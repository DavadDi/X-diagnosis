p start
int tcp_recvmsg(struct sock *sk, struct msghdr *msg, size_t len, int nonblock,
        int flags, int *addr_len)
    sk = sk
    ken = len
    srcip = sk->__sk_common.skc_rcv_saddr
    dstip = sk->__sk_common.skc_daddr
    srcport = (struct inet_sock *)sk->inet_sport
    dstport = sk->__sk_common.skc_dport
    skc_state = sk->__sk_common.skc_state
    sk_drops = sk->sk_drops
    sk_flags = sk->__sk_common.skc_flags
    rcv_nxt = (struct tcp_sock *)sk->rcv_nxt
    copied_seq = (struct tcp_sock *)sk->copied_seq
    sk_receive_queue_qlen = sk->sk_receive_queue.qlen
end

p start
static void tcp_cleanup_rbuf(struct sock *sk, int copied)
    sk = sk
    copied = copied
    srcip = sk->__sk_common.skc_rcv_saddr
    dstip = sk->__sk_common.skc_daddr
    srcport = (struct inet_sock *)sk->inet_sport
    dstport = sk->__sk_common.skc_dport
    skc_state = sk->__sk_common.skc_state
    sk_drops = sk->sk_drops
    sk_flags = sk->__sk_common.skc_flags
    sk_err = sk->sk_err
    rcv_nxt = (struct tcp_sock *)sk->rcv_nxt
    copied_seq = (struct tcp_sock *)sk->copied_seq
    sk_receive_queue_qlen = sk->sk_receive_queue.qlen
end

p start
int tcp_sendmsg(struct sock *sk, struct msghdr *msg, size_t size)
    sk = sk
    size = size
    srcip = sk->__sk_common.skc_rcv_saddr
    dstip = sk->__sk_common.skc_daddr
    srcport = (struct inet_sock *)sk->inet_sport
    dstport = sk->__sk_common.skc_dport
    skc_state = sk->__sk_common.skc_state
    sk_drops = sk->sk_drops
    sk_flags = sk->__sk_common.skc_flags
    rcv_nxt = (struct tcp_sock *)sk->rcv_nxt
    copied_seq = (struct tcp_sock *)sk->copied_seq
    write_seq = (struct tcp_sock *)sk->write_seq
    snd_nxt = (struct tcp_sock *)sk->snd_nxt
    snd_una = (struct tcp_sock *)sk->snd_una
end

p start
int tcp_sendpage(struct sock *sk, struct page *page, int offset,
         size_t size, int flags)
    sk = sk
    size = size
    srcip = sk->__sk_common.skc_rcv_saddr
    dstip = sk->__sk_common.skc_daddr
    srcport = (struct inet_sock *)sk->inet_sport
    dstport = sk->__sk_common.skc_dport
    skc_state = sk->__sk_common.skc_state
    sk_drops = sk->sk_drops
    sk_flags = sk->__sk_common.skc_flags
    sk_err = sk->sk_err
    rcv_nxt = (struct tcp_sock *)sk->rcv_nxt
    copied_seq = (struct tcp_sock *)sk->copied_seq
    write_seq = (struct tcp_sock *)sk->write_seq
    snd_nxt = (struct tcp_sock *)sk->snd_nxt
    snd_una = (struct tcp_sock *)sk->snd_una
end

p start
int sk_stream_wait_memory(struct sock *sk, long *timeo_p)
    sk = sk
    srcip = sk->__sk_common.skc_rcv_saddr
    dstip = sk->__sk_common.skc_daddr
    srcport = (struct inet_sock *)sk->inet_sport
    dstport = sk->__sk_common.skc_dport
    skc_state = sk->__sk_common.skc_state
    sk_drops = sk->sk_drops
    sk_flags = sk->__sk_common.skc_flags
    sock_flags = (struct socket *)(sk->sk_socket)->flags
    rcv_nxt = (struct tcp_sock *)sk->rcv_nxt
    copied_seq = (struct tcp_sock *)sk->copied_seq
    write_seq = (struct tcp_sock *)sk->write_seq
    snd_nxt = (struct tcp_sock *)sk->snd_nxt
    snd_una = (struct tcp_sock *)sk->snd_una
    rcv_mss = (struct inet_connection_sock *)sk->icsk_ack.rcv_mss
    packets_out = (struct tcp_sock *)sk->packets_out
    sacked_out = (struct tcp_sock *)sk->sacked_out
    lost_out = (struct tcp_sock *)sk->lost_out
    retrans_out = (struct tcp_sock *)sk->retrans_out
    delivered = (struct tcp_sock *)sk->delivered
    lost = (struct tcp_sock *)sk->lost
    snd_wl= (struct tcp_sock *)sk->snd_wl1
    snd_cwnd = (struct tcp_sock *)sk->snd_cwnd
    max_window = (struct tcp_sock *)sk->max_window
    tlp_high_seq = (struct tcp_sock *)sk->tlp_high_seq
    out_of_order_queue = (struct tcp_sock *)sk->out_of_order_queue
    sk_sndbuf = sk->sk_sndbuf
    sk_wmem_queued  = sk->sk_wmem_queued
end

r start
int sk_stream_wait_memory(struct sock *sk, long *timeo_p)
FILTER 'ret!=0'
end

r start
int __sk_mem_schedule(struct sock *sk, long *timeo_p)
FILTER 'ret==0'
end

r start
struct sock *inet_csk_accept(struct sock *sk, int flags, int *err)
FILTER 'ret==0'
end

r start
struct request_sock *inet_reqsk_alloc(const struct request_sock_ops *ops,
				      struct sock *sk_listener,
				      bool attach_listener)
FILTER 'ret==0'
end

p start
void tcp_set_state(struct sock *sk, int state)
    sk = sk
    nstate = state
    srcip = sk->__sk_common.skc_rcv_saddr
    dstip = sk->__sk_common.skc_daddr
    srcport = (struct inet_sock *)sk->inet_sport
    dstport = sk->__sk_common.skc_dport
    skc_state = sk->__sk_common.skc_state
    sk_flags = sk->__sk_common.skc_flags
end

p start
void tcp_close(struct sock *sk, long timeout)
    sk = sk
    timeout = timeout
    srcip = sk->__sk_common.skc_rcv_saddr
    dstip = sk->__sk_common.skc_daddr
    srcport = (struct inet_sock *)sk->inet_sport
    dstport = sk->__sk_common.skc_dport
    skc_state = sk->__sk_common.skc_state
    sk_drops = sk->sk_drops
    sk_flags = sk->__sk_common.skc_flags
    sk_lingertime = sk->sk_lingertime
    sk_err = sk->sk_err
    rcv_nxt = (struct tcp_sock *)sk->rcv_nxt
    copied_seq = (struct tcp_sock *)sk->copied_seq
    write_seq = (struct tcp_sock *)sk->write_seq
    sk_receive_queue_qlen = sk->sk_receive_queue.qlen
    sk_backlog_rmem_alloc = sk->sk_backlog.rmem_alloc
    icsk_retransmits = (struct inet_connection_sock *)sk->icsk_retransmits
    icsk_probes_out = (struct inet_connection_sock *)sk->icsk_probes_out
    rcv_tstamp = (struct tcp_sock *)sk->rcv_tstamp
    lsndtime = (struct tcp_sock *)sk->lsndtime
    snd_nxt = (struct tcp_sock *)sk->snd_nxt
    snd_una = (struct tcp_sock *)sk->snd_una
    sk_forward_alloc = sk->sk_forward_alloc
end

p start
void tcp_shutdown(struct sock *sk, int how)
    sk = sk
    how = how
    srcip = sk->__sk_common.skc_rcv_saddr
    dstip = sk->__sk_common.skc_daddr
    srcport = (struct inet_sock *)sk->inet_sport
    dstport = sk->__sk_common.skc_dport
    skc_state = sk->__sk_common.skc_state
    sk_drops = sk->sk_drops
    sk_flags = sk->__sk_common.skc_flags
    sk_lingertime = sk->sk_lingertime
    sk_err = sk->sk_err
    rcv_nxt = (struct tcp_sock *)sk->rcv_nxt
    copied_seq = (struct tcp_sock *)sk->copied_seq
    write_seq = (struct tcp_sock *)sk->write_seq
    sk_receive_queue_qlen = sk->sk_receive_queue.qlen
end

p start
int tcp_setsockopt(struct sock *sk, int level, int optname, char __user *optval,
               unsigned int optlen)
    sk = sk
    level = level
    optname = optname
    srcip = sk->__sk_common.skc_rcv_saddr
    dstip = sk->__sk_common.skc_daddr
    srcport = (struct inet_sock *)sk->inet_sport
    dstport = sk->__sk_common.skc_dport
    skc_state = sk->__sk_common.skc_state
    sk_drops = sk->sk_drops
    sk_flags = sk->__sk_common.skc_flags
    sk_lingertime = sk->sk_lingertime
    sk_err = sk->sk_err
end

p start
int tcp_v4_connect(struct sock *sk, struct sockaddr *uaddr, int addr_len)
    sk = sk
    srcip = sk->__sk_common.skc_rcv_saddr
    dstip = (struct sockaddr_in *)uaddr->sin_addr
    srcport = (struct inet_sock *)sk->inet_sport
    dstport = (struct sockaddr_in *)uaddr->sin_port
    skc_state = sk->__sk_common.skc_state
    sk_bound_dev_if = sk->__sk_common.skc_bound_dev_if
    sk_drops = sk->sk_drops
    sk_flags = sk->__sk_common.skc_flags
    daddr = (struct sockaddr_in *)uaddr->sin_addr
    dport = (struct sockaddr_in *)uaddr->sin_port
end

p start
int tcp_connect(struct sock *sk)
    sk = sk
    srcip = sk->__sk_common.skc_rcv_saddr
    dstip = sk->__sk_common.skc_daddr
    srcport = (struct inet_sock *)sk->inet_sport
    dstport = sk->__sk_common.skc_dport
    skc_state = sk->__sk_common.skc_state
    sk_bound_dev_if = sk->__sk_common.skc_bound_dev_if
    sk_drops = sk->sk_drops
    sk_flags = sk->__sk_common.skc_flags
end

p start
int inet_bind(struct socket *sock, struct sockaddr *uaddr, int addr_len)
    addr_len = addr_len
    sk = sock->sk
    sa_family = (struct sockaddr_in *)uaddr->sin_family
    daddr = (struct sockaddr_in *)uaddr->sin_addr
    dport = (struct sockaddr_in *)uaddr->sin_port
    skc_state = sock->sk->__sk_common.skc_state
    sk_bound_dev_if = sock->sk->__sk_common.skc_bound_dev_if
    sk_drops = sock->sk->sk_drops
    sk_flags = sock->sk->__sk_common.skc_flags
    sk_err = sock->sk->sk_err
end

r start
int inet_bind(struct socket *sock, struct sockaddr *uaddr, int addr_len)
FILTER 'ret!=0'
end

r start
int inet_listen(struct socket *sock, int backlog)
FILTER 'ret!=0'
end

p start
int tcp_v4_rcv(struct sk_buff *skb)
    skb = skb
    srcip = (struct iphdr *)(skb->data - 20)->saddr
    dstip = (struct iphdr *)(skb->data - 20)->daddr
    srcport = (struct tcphdr *)(skb->data)->source
    dstport = (struct tcphdr *)(skb->data)->dest
    ip_len = (struct iphdr *)(skb->data - 20)->tot_len
    ip_id = (struct iphdr *)(skb->data - 20)->id
    tcp_seq = (struct tcphdr *)(skb->data)->seq
    tcp_ack = (struct tcphdr *)(skb->data)->ack_seq
    tcp_flag_syn = (struct tcphdr *)(skb->data)->syn
    tcp_flag_ack = (struct tcphdr *)(skb->data)->ack
    tcp_flag_fin = (struct tcphdr *)(skb->data)->fin
    tcp_flag_rst = (struct tcphdr *)(skb->data)->rst
    tcp_win = (struct tcphdr *)(skb->data)->window
    tcp_check = (struct tcphdr *)(skb->data)->check
    devname = skb->dev->name
    skb_pfmemalloc = skb->pfmemalloc
    pkt_type = skb->pkt_type
    csum_valid = skb->csum_valid
    csum_complete_sw = skb->csum_complete_sw
    skb_iif = skb->skb_iif
end

r start
int tcp_filter(struct sock *sk, struct sk_buff *skb)
FILTER 'ret!=0'
end

r start
struct sock *__inet_lookup_listener(struct net *net,
				    struct inet_hashinfo *hashinfo,
				    struct sk_buff *skb, int doff,
				    const __be32 saddr, __be16 sport,
				    const __be32 daddr, const unsigned short hnum,
				    const int dif, const int sdif)
FILTER 'ret==0'
end

p start
int tcp_child_process(struct sock *parent, struct sock *child,
                  struct sk_buff *skb)
    parent = parent
    child = child
    skb = skb
    srcip = (struct iphdr *)(skb->data - 20)->saddr
    dstip = (struct iphdr *)(skb->data - 20)->daddr
    srcport = (struct tcphdr *)(skb->data)->source
    dstport = (struct tcphdr *)(skb->data)->dest
    #tcp_flags = (struct tcphdr *)(skb->data)->tcp_flags
    tcp_flag_syn = (struct tcphdr *)(skb->data)->syn
    tcp_flag_ack = (struct tcphdr *)(skb->data)->ack
    tcp_flag_fin = (struct tcphdr *)(skb->data)->fin
    tcp_flag_rst = (struct tcphdr *)(skb->data)->rst
end

p start
int tcp_rcv_state_process(struct sock *sk, struct sk_buff *skb)
    sk = sk
    skb = skb
    skc_state = sk->__sk_common.skc_state
    sk_drops = sk->sk_drops
    sk_flags = sk->__sk_common.skc_flags
    rcv_nxt = (struct tcp_sock *)sk->rcv_nxt
    copied_seq = (struct tcp_sock *)sk->copied_seq
    sk_receive_queue_qlen = sk->sk_receive_queue.qlen
    srcip = (struct iphdr *)(skb->data - 20)->saddr
    dstip = (struct iphdr *)(skb->data - 20)->daddr
    srcport = (struct tcphdr *)(skb->data)->source
    dstport = (struct tcphdr *)(skb->data)->dest
    ip_len = (struct iphdr *)(skb->data - 20)->tot_len
    ip_id = (struct iphdr *)(skb->data - 20)->id
    tcp_seq = (struct tcphdr *)(skb->data)->seq
    tcp_ack = (struct tcphdr *)(skb->data)->ack_seq
    #tcp_flags = (struct tcphdr *)(skb->data)->tcp_flags
    tcp_flag_syn = (struct tcphdr *)(skb->data)->syn
    tcp_flag_ack = (struct tcphdr *)(skb->data)->ack
    tcp_flag_fin = (struct tcphdr *)(skb->data)->fin
    tcp_flag_rst = (struct tcphdr *)(skb->data)->rst
    tcp_win = (struct tcphdr *)(skb->data)->window
    tcp_check = (struct tcphdr *)(skb->data)->check
    cb_seq = (struct tcp_skb_cb)(skb->cb).seq
    cb_end_seq = (struct tcp_skb_cb)(skb->cb).end_seq
end

p start
struct sock *tcp_v4_syn_recv_sock(const struct sock *sk, struct sk_buff *skb,
                      struct request_sock *req,
                      struct dst_entry *dst,
                      struct request_sock *req_unhash,
                      bool *own_req)
    sk = sk
    skb = skb
    sk_srcip = sk->__sk_common.skc_rcv_saddr
    sk_dstip = sk->__sk_common.skc_daddr
    sk_srcport = (struct inet_sock *)sk->inet_sport
    sk_dstport = sk->__sk_common.skc_dport
    skc_state = sk->__sk_common.skc_state
    sk_drops = sk->sk_drops
    sk_flags = sk->__sk_common.skc_flags
    icsk_accept_queue_qlen = (struct inet_connection_sock *)sk->icsk_accept_queue.qlen
    icsk_accept_queue_young = (struct inet_connection_sock *)sk->icsk_accept_queue.young
    sk_ack_backlog = sk->sk_ack_backlog
    sk_max_ack_backlog = sk->sk_max_ack_backlog
    srcip = (struct iphdr *)(skb->data - 20)->saddr
    dstip = (struct iphdr *)(skb->data - 20)->daddr
    srcport = (struct tcphdr *)(skb->data)->source
    dstport = (struct tcphdr *)(skb->data)->dest
    ip_len = (struct iphdr *)(skb->data - 20)->tot_len
    ip_id = (struct iphdr *)(skb->data - 20)->id
    tcp_seq = (struct tcphdr *)(skb->data)->seq
    tcp_ack = (struct tcphdr *)(skb->data)->ack_seq
    #tcp_flags = (struct tcphdr *)(skb->data)->tcp_flags
    tcp_flag_syn = (struct tcphdr *)(skb->data)->syn
    tcp_flag_ack = (struct tcphdr *)(skb->data)->ack
    tcp_flag_fin = (struct tcphdr *)(skb->data)->fin
    tcp_flag_rst = (struct tcphdr *)(skb->data)->rst
    tcp_win = (struct tcphdr *)(skb->data)->window
    tcp_check = (struct tcphdr *)(skb->data)->check
end

p start
int tcp_conn_request(struct request_sock_ops *rsk_ops,
                 const struct tcp_request_sock_ops *af_ops,
                 struct sock *sk, struct sk_buff *skb)
    sk = sk
    skb = skb
    sk_srcip = sk->__sk_common.skc_rcv_saddr
    sk_dstip = sk->__sk_common.skc_daddr
    sk_srcport = (struct inet_sock *)sk->inet_sport
    sk_dstport = sk->__sk_common.skc_dport
    skc_state = sk->__sk_common.skc_state
    sk_drops = sk->sk_drops
    sk_flags = sk->__sk_common.skc_flags
    icsk_accept_queue_qlen = (struct inet_connection_sock *)sk->icsk_accept_queue.qlen
    icsk_accept_queue_young = (struct inet_connection_sock *)sk->icsk_accept_queue.young
    sk_ack_backlog = sk->sk_ack_backlog
    sk_max_ack_backlog = sk->sk_max_ack_backlog
    srcip = (struct iphdr *)(skb->data - 20)->saddr
    dstip = (struct iphdr *)(skb->data - 20)->daddr
    srcport = (struct tcphdr *)(skb->data)->source
    dstport = (struct tcphdr *)(skb->data)->dest
    ip_len = (struct iphdr *)(skb->data - 20)->tot_len
    ip_id = (struct iphdr *)(skb->data - 20)->id
    tcp_seq = (struct tcphdr *)(skb->data)->seq
    tcp_ack = (struct tcphdr *)(skb->data)->ack_seq
    #tcp_flags = (struct tcphdr *)(skb->data)->tcp_flags
    tcp_flag_syn = (struct tcphdr *)(skb->data)->syn
    tcp_flag_ack = (struct tcphdr *)(skb->data)->ack
    tcp_flag_fin = (struct tcphdr *)(skb->data)->fin
    tcp_flag_rst = (struct tcphdr *)(skb->data)->rst
    tcp_win = (struct tcphdr *)(skb->data)->window
    tcp_check = (struct tcphdr *)(skb->data)->check
end

p start
static int tcp_v4_send_synack(const struct sock *sk, struct dst_entry *dst,
                      struct flowi *fl,
                      struct request_sock *req,
                      struct tcp_fastopen_cookie *foc,
                      enum tcp_synack_type synack_type)
    sk = sk
    req = req
    srcip = sk->__sk_common.skc_rcv_saddr
    dstip = sk->__sk_common.skc_daddr
    srcport = (struct inet_sock *)sk->inet_sport
    dstport = sk->__sk_common.skc_dport
    tcp_seq = (struct tcp_request_sock *)req->rcv_isn
    tcp_ack = (struct tcp_request_sock *)req->rcv_nxt
end

r start
static int tcp_v4_send_synack(const struct sock *sk, struct dst_entry *dst,
                      struct flowi *fl,
                      struct request_sock *req,
                      struct tcp_fastopen_cookie *foc,
                      enum tcp_synack_type synack_type)
FILTER 'ret!=0'
end

p start
void tcp_finish_connect(struct sock *sk, struct sk_buff *skb)
    sk = sk
    skb = skb
    srcip = sk->__sk_common.skc_rcv_saddr
    dstip = sk->__sk_common.skc_daddr
    srcport = (struct inet_sock *)sk->inet_sport
    dstport = sk->__sk_common.skc_dport
    skc_state = sk->__sk_common.skc_state
    sk_bound_dev_if = sk->__sk_common.skc_bound_dev_if
    sk_drops = sk->sk_drops
    sk_flags = sk->__sk_common.skc_flags
    ip_id = (struct iphdr *)(skb->data - 20)->id
    rcv_nxt = (struct tcp_sock *)sk->rcv_nxt
    snd_nxt = (struct tcp_sock *)sk->snd_nxt
end

p start
void tcp_reset(struct sock *sk)
    sk = sk
    srcip = sk->__sk_common.skc_rcv_saddr
    dstip = sk->__sk_common.skc_daddr
    srcport = (struct inet_sock *)sk->inet_sport
    dstport = sk->__sk_common.skc_dport
    skc_state = sk->__sk_common.skc_state
    sk_srcport = (struct inet_sock *)sk->inet_sport
    sk_drops = sk->sk_drops
    sk_flags = sk->__sk_common.skc_flags
    sk_err = sk->sk_err
    sock_flags = (struct socket *)(sk->sk_socket)->flags
    rcv_nxt = (struct tcp_sock *)sk->rcv_nxt
    copied_seq = (struct tcp_sock *)sk->copied_seq
    rcv_wup = (struct tcp_sock *)sk->rcv_wup
    rcv_wnd = (struct tcp_sock *)sk->rcv_wnd
    sk_receive_queue_qlen = sk->sk_receive_queue.qlen
    sk_write_queue_qlen = sk->sk_write_queue.qlen
    write_seq = (struct tcp_sock *)sk->write_seq
    snd_nxt = (struct tcp_sock *)sk->snd_nxt
    snd_una = (struct tcp_sock *)sk->snd_una
    sk_sndbuf = sk->sk_sndbuf
    sk_wmem_queued = sk->sk_wmem_queued
    sk_backlog_rmem_alloc = sk->sk_backlog.rmem_alloc
    icsk_retransmits = (struct inet_connection_sock *)sk->icsk_retransmits
    icsk_probes_out = (struct inet_connection_sock *)sk->icsk_probes_out
    rcv_tstamp = (struct tcp_sock *)sk->rcv_tstamp
    lsndtime = (struct tcp_sock *)sk->lsndtime
    sk_forward_alloc  = sk->sk_forward_alloc
end


p start
void tcp_v4_err(struct sk_buff *icmp_skb, u32 info)
    icmp_skb = icmp_skb
    info = info
    icmp_type = (struct icmphdr *)(icmp_skb->data - 8)->type
    icmp_code = (struct icmphdr *)(icmp_skb->data - 8)->code
    srcip = (struct iphdr *)(icmp_skb->data)->saddr
    dstip = (struct iphdr *)(icmp_skb->data)->daddr
    srcport = (struct tcphdr *)(icmp_skb->data + 20)->source
    dstport = (struct tcphdr *)(icmp_skb->data + 20)->dest
    tcp_seq = (struct tcphdr *)(icmp_skb->data + 20)->seq
    tcp_ack = (struct tcphdr *)(icmp_skb->data + 20)->ack_seq
    #tcp_flags = (struct tcphdr *)(icmp_skb->data + 20)->tcp_flags
    tcp_flag_syn = (struct tcphdr *)(icmp_skb->data + 20)->syn
    tcp_flag_ack = (struct tcphdr *)(icmp_skb->data + 20)->ack
    tcp_flag_fin = (struct tcphdr *)(icmp_skb->data + 20)->fin
    tcp_flag_rst = (struct tcphdr *)(icmp_skb->data + 20)->rst
    tcp_check = (struct tcphdr *)(icmp_skb->data + 20)->check
    devname = icmp_skb->dev->name
    ip_tos = (struct iphdr *)(icmp_skb->data)->tos
    ip_len = (struct iphdr *)(icmp_skb->data)->tot_len
    ip_id = (struct iphdr *)(icmp_skb->data)->id
    ip_frag = (struct iphdr *)(icmp_skb->data)->frag_off
    ip_ttl = (struct iphdr *)(icmp_skb->data)->ttl
    ip_proto = (struct iphdr *)(icmp_skb->data)->protocol
    skb_len = icmp_skb->len
    skb_datalen = icmp_skb->data_len
    skb_protocol = icmp_skb->protocol
    skb_iif = icmp_skb->skb_iif
end

p start
void tcp_send_active_reset(struct sock *sk, gfp_t priority)
    sk = sk
    srcip = sk->__sk_common.skc_rcv_saddr
    dstip = sk->__sk_common.skc_daddr
    srcport = (struct inet_sock *)sk->inet_sport
    dstport = sk->__sk_common.skc_dport
    skc_state = sk->__sk_common.skc_state
    sk_drops = sk->sk_drops
    sk_flags = sk->__sk_common.skc_flags
    sk_err = sk->sk_err
    sock_flags = (struct socket *)(sk->sk_socket)->flags
    rcv_nxt = (struct tcp_sock *)sk->rcv_nxt
    copied_seq = (struct tcp_sock *)sk->copied_seq
    rcv_wup = (struct tcp_sock *)sk->rcv_wup
    rcv_wnd = (struct tcp_sock *)sk->rcv_wnd
    sk_receive_queue_qlen=sk->sk_receive_queue.qlen
    sk_write_queue_qlen = sk->sk_write_queue.qlen
    write_seq = (struct tcp_sock *)sk->write_seq
    snd_nxt = (struct tcp_sock *)sk->snd_nxt
    snd_una = (struct tcp_sock *)sk->snd_una
    sk_sndbuf = sk->sk_sndbuf
    sk_wmem_queued = sk->sk_wmem_queued
    sk_backlog_rmem_alloc = sk->sk_backlog.rmem_alloc
    icsk_retransmits = (struct inet_connection_sock *)sk->icsk_retransmits
    icsk_probes_out = (struct inet_connection_sock *)sk->icsk_probes_out
    rcv_tstamp = (struct tcp_sock *)sk->rcv_tstamp
    lsndtime = (struct tcp_sock *)sk->lsndtime
    sk_forward_alloc  = sk->sk_forward_alloc
end

p start
int tcp_disconnect(struct sock *sk, int flags)
    sk = sk
    flags = flags
    srcip = sk->__sk_common.skc_rcv_saddr
    dstip = sk->__sk_common.skc_daddr
    srcport = (struct inet_sock *)sk->inet_sport
    dstport = sk->__sk_common.skc_dport
    skc_state = sk->__sk_common.skc_state
    sk_drops = sk->sk_drops
    sk_flags = sk->__sk_common.skc_flags
    sk_lingertime = sk->sk_lingertime
    sk_err = sk->sk_err
    sock_flags = (struct socket *)(sk->sk_socket)->flags
    rcv_nxt = (struct tcp_sock *)sk->rcv_nxt
    copied_seq = (struct tcp_sock *)sk->copied_seq
    rcv_wup = (struct tcp_sock *)sk->rcv_wup
    rcv_wnd = (struct tcp_sock *)sk->rcv_wnd
    sk_receive_queue_qlen = sk->sk_receive_queue.qlen
    sk_write_queue_qlen = sk->sk_write_queue.qlen
    write_seq = (struct tcp_sock *)sk->write_seq
    snd_nxt = (struct tcp_sock *)sk->snd_nxt
    snd_una = (struct tcp_sock *)sk->snd_una
    sk_sndbuf = sk->sk_sndbuf
    sk_wmem_queued = sk->sk_wmem_queued
    sk_backlog_rmem_alloc = sk->sk_backlog.rmem_alloc
    icsk_retransmits = (struct inet_connection_sock *)sk->icsk_retransmits
    icsk_probes_out = (struct inet_connection_sock *)sk->icsk_probes_out
end

p start
void tcp_send_fin(struct sock *sk)
    sk = sk
    srcip = sk->__sk_common.skc_rcv_saddr
    dstip = sk->__sk_common.skc_daddr
    srcport = (struct inet_sock *)sk->inet_sport
    dstport = sk->__sk_common.skc_dport
    skc_state = sk->__sk_common.skc_state
    sk_drops = sk->sk_drops
    sk_flags = sk->__sk_common.skc_flags
    sk_err = sk->sk_err
    sock_flags = (struct socket *)(sk->sk_socket)->flags
    rcv_nxt = (struct tcp_sock *)sk->rcv_nxt
    copied_seq = (struct tcp_sock *)sk->copied_seq
    rcv_wup = (struct tcp_sock *)sk->rcv_wup
    rcv_wnd = (struct tcp_sock *)sk->rcv_wnd
    sk_receive_queue_qlen = sk->sk_receive_queue.qlen
    sk_write_queue_qlen = sk->sk_write_queue.qlen
    write_seq = (struct tcp_sock *)sk->write_seq
    snd_nxt = (struct tcp_sock *)sk->snd_nxt
    snd_una = (struct tcp_sock *)sk->snd_una
    sk_sndbuf = sk->sk_sndbuf
    sk_wmem_queued = sk->sk_wmem_queued
end

p start
void tcp_fin(struct sock *sk)
    sk = sk
    srcip = sk->__sk_common.skc_rcv_saddr
    dstip = sk->__sk_common.skc_daddr
    srcport = (struct inet_sock *)sk->inet_sport
    dstport = sk->__sk_common.skc_dport
    skc_state = sk->__sk_common.skc_state
    sk_flags = sk->__sk_common.skc_flags
    sock_flags = (struct socket *)(sk->sk_socket)->flags
    sk_rcvbuf = sk->sk_rcvbuf
    sk_backlog_rmem_alloc = sk->sk_backlog.rmem_alloc
    window_clamp = (struct tcp_sock *)sk->window_clamp
    rcv_ssthresh = (struct tcp_sock *)sk->rcv_ssthresh
    rcv_nxt = (struct tcp_sock *)sk->rcv_nxt
    copied_seq = (struct tcp_sock *)sk->copied_seq
    rcv_wup = (struct tcp_sock *)sk->rcv_wup
    rcv_wnd = (struct tcp_sock *)sk->rcv_wnd
    write_seq = (struct tcp_sock *)sk->write_seq
    packets_out = (struct tcp_sock *)sk->packets_out
    sacked_out = (struct tcp_sock *)sk->sacked_out
    lost_out = (struct tcp_sock *)sk->lost_out
    retrans_out = (struct tcp_sock *)sk->retrans_out
    delivered = (struct tcp_sock *)sk->delivered
    lost = (struct tcp_sock *)sk->lost
    snd_wl= (struct tcp_sock *)sk->snd_wl1
    snd_cwnd = (struct tcp_sock *)sk->snd_cwnd
    max_window = (struct tcp_sock *)sk->max_window
    tlp_high_seq = (struct tcp_sock *)sk->tlp_high_seq
    out_of_order_queue = (struct tcp_sock *)sk->out_of_order_queue
    snd_nxt = (struct tcp_sock *)sk->snd_nxt
    snd_una = (struct tcp_sock *)sk->snd_una
    sk_sndbuf = sk->sk_sndbuf
    sk_wmem_queued = sk->sk_wmem_queued
end

p start
int tcp_v4_do_rcv(struct sock *sk, struct sk_buff *skb)
    sk = sk
    skb = skb
    skc_state = sk->__sk_common.skc_state
    sk_drops = sk->sk_drops
    sk_flags = sk->__sk_common.skc_flags
    rcv_nxt = (struct tcp_sock *)sk->rcv_nxt
    copied_seq = (struct tcp_sock *)sk->copied_seq
    srcip = (struct iphdr *)(skb->data - 20)->saddr
    dstip = (struct iphdr *)(skb->data - 20)->daddr
    srcport = (struct tcphdr *)(skb->data)->source
    dstport = (struct tcphdr *)(skb->data)->dest
    ip_id = (struct iphdr *)(skb->data - 20)->id
    tcp_seq = (struct tcphdr *)(skb->data)->seq
    tcp_ack = (struct tcphdr *)(skb->data)->ack_seq
    #tcp_flags = (struct tcphdr *)(skb->data)->tcp_flags
    tcp_flag_syn = (struct tcphdr *)(skb->data)->syn
    tcp_flag_ack = (struct tcphdr *)(skb->data)->ack
    tcp_flag_fin = (struct tcphdr *)(skb->data)->fin
    tcp_flag_rst = (struct tcphdr *)(skb->data)->rst
    tcp_win = (struct tcphdr *)(skb->data)->window
    tcp_check = (struct tcphdr *)(skb->data)->check
    skb_len = skb->len
    skb_datalen = skb->data_len
    cb_seq = (struct tcp_skb_cb)(skb->cb).seq
    cb_end_seq = (struct tcp_skb_cb)(skb->cb).end_seq
end

p start
bool tcp_add_backlog(struct sock *sk, struct sk_buff *skb)
    sk = sk
    skb = skb
    skc_state = sk->__sk_common.skc_state
    sk_drops = sk->sk_drops
    sk_flags = sk->__sk_common.skc_flags
    rcv_nxt = (struct tcp_sock *)sk->rcv_nxt
    copied_seq = (struct tcp_sock *)sk->copied_seq
    srcip = (struct iphdr *)(skb->data - 20)->saddr
    dstip = (struct iphdr *)(skb->data - 20)->daddr
    srcport = (struct tcphdr *)(skb->data)->source
    dstport = (struct tcphdr *)(skb->data)->dest
    ip_id = (struct iphdr *)(skb->data - 20)->id
    tcp_seq = (struct tcphdr *)(skb->data)->seq
    tcp_ack = (struct tcphdr *)(skb->data)->ack_seq
    #tcp_flags = (struct tcphdr *)(skb->data)->tcp_flags
    tcp_flag_syn = (struct tcphdr *)(skb->data)->syn
    tcp_flag_ack = (struct tcphdr *)(skb->data)->ack
    tcp_flag_fin = (struct tcphdr *)(skb->data)->fin
    tcp_flag_rst = (struct tcphdr *)(skb->data)->rst
    tcp_win = (struct tcphdr *)(skb->data)->window
    tcp_check = (struct tcphdr *)(skb->data)->check
    skb_len = skb->len
    skb_datalen = skb->data_len
    sk_rcvbuf = sk->sk_rcvbuf
    sk_sndbuf = sk->sk_sndbuf
    sk_backlog_rmem_alloc = sk->sk_backlog.rmem_alloc
    sk_backlog_len = sk->sk_backlog.len
    cb_seq = (struct tcp_skb_cb)(skb->cb).seq
    cb_end_seq = (struct tcp_skb_cb)(skb->cb).end_seq
end

r start
bool tcp_add_backlog(struct sock *sk, struct sk_buff *skb)
FILTER 'ret!=0'
end

p start
void tcp_rcv_established(struct sock *sk, struct sk_buff *skb)
    sk = sk
    skb = skb
    srcip = (struct iphdr *)(skb->data - 20)->saddr
    dstip = (struct iphdr *)(skb->data - 20)->daddr
    srcport = (struct tcphdr *)(skb->data)->source
    dstport = (struct tcphdr *)(skb->data)->dest
    tcp_seq = (struct tcphdr *)(skb->data)->seq
    tcp_ack = (struct tcphdr *)(skb->data)->ack_seq
    skb_len = skb->len
    skb_datalen = skb->data_len
    cb_seq = (struct tcp_skb_cb)(skb->cb).seq
    cb_end_seq = (struct tcp_skb_cb)(skb->cb).end_seq
    ack_seq = (struct tcp_skb_cb)(skb->cb).ack_seq
    sacked = (struct tcp_skb_cb)(skb->cb).sacked
    skc_state = sk->__sk_common.skc_state
    sk_srcport = (struct inet_sock *)sk->inet_sport
    sk_drops = sk->sk_drops
    sk_flags = sk->__sk_common.skc_flags
    sock_flags = (struct socket *)(sk->sk_socket)->flags
    rcv_nxt = (struct tcp_sock *)sk->rcv_nxt
    copied_seq = (struct tcp_sock *)sk->copied_seq
    sk_receive_queue_qlen = sk->sk_receive_queue.qlen
    out_of_order_queue = (struct tcp_sock *)sk->out_of_order_queue
    reordering = (struct tcp_sock *)sk->reordering
    write_seq = (struct tcp_sock *)sk->write_seq
    snd_nxt = (struct tcp_sock *)sk->snd_nxt
    snd_una = (struct tcp_sock *)sk->snd_una
    sk_sndbuf = sk->sk_sndbuf
    sk_wmem_queued = sk->sk_wmem_queued
end

p start
void tcp_retransmit_timer(struct sock *sk)
    sk = sk
    srcip = sk->__sk_common.skc_rcv_saddr
    dstip = sk->__sk_common.skc_daddr
    srcport = (struct inet_sock *)sk->inet_sport
    dstport = sk->__sk_common.skc_dport
    skc_state = sk->__sk_common.skc_state
    icsk_retransmits = (struct inet_connection_sock *)sk->icsk_retransmits
    icsk_rto = (struct inet_connection_sock *)sk->icsk_rto
    icsk_pending = (struct inet_connection_sock *)sk->icsk_pending
    mss_cache = (struct tcp_sock *)sk->mss_cache
    rcv_nxt = (struct tcp_sock *)sk->rcv_nxt
    copied_seq = (struct tcp_sock *)sk->copied_seq
    rcv_wup = (struct tcp_sock *)sk->rcv_wup
    rcv_wnd = (struct tcp_sock *)sk->rcv_wnd
    write_seq = (struct tcp_sock *)sk->write_seq
    snd_nxt = (struct tcp_sock *)sk->snd_nxt
    snd_una = (struct tcp_sock *)sk->snd_una
    sk_sndbuf = sk->sk_sndbuf
    sk_wmem_queued = sk->sk_wmem_queued
    sk_write_queue_qlen = sk->sk_write_queue.qlen
    packets_out = (struct tcp_sock *)sk->packets_out
    sacked_out = (struct tcp_sock *)sk->sacked_out
    lost_out = (struct tcp_sock *)sk->lost_out
    retrans_out = (struct tcp_sock *)sk->retrans_out
    delivered = (struct tcp_sock *)sk->delivered
    lost = (struct tcp_sock *)sk->lost
    sk_forward_alloc = sk->sk_forward_alloc
    sk_wmem_alloc = sk->sk_wmem_alloc
    undo_retrans = (struct tcp_sock *)sk->undo_retrans
    retrans_stamp = (struct tcp_sock *)sk->retrans_stamp
    total_retrans = (struct tcp_sock *)sk->total_retrans
    snd_wnd = (struct tcp_sock *)sk->snd_wnd
end

r start
int tcp_retransmit_skb(struct sock *sk, struct sk_buff *skb, int segs)
FILTER 'ret!=0'
end

p start
static int __tcp_transmit_skb(struct sock *sk, struct sk_buff *skb, int clone_it, gfp_t gfp_mask)
    sk = sk
    skb = skb
    srcip = sk->__sk_common.skc_rcv_saddr
    dstip = sk->__sk_common.skc_daddr
    srcport = (struct inet_sock *)sk->inet_sport
    dstport = sk->__sk_common.skc_dport
    icsk_rto = (struct inet_connection_sock *)sk->icsk_rto
    icsk_pending = (struct inet_connection_sock *)sk->icsk_pending
    mss_cache = (struct tcp_sock *)sk->mss_cache
    icsk_retransmits = (struct inet_connection_sock *)sk->icsk_retransmits
    rcv_nxt = (struct tcp_sock *)sk->rcv_nxt
    copied_seq = (struct tcp_sock *)sk->copied_seq
    rcv_wup = (struct tcp_sock *)sk->rcv_wup
    rcv_wnd = (struct tcp_sock *)sk->rcv_wnd
    write_seq = (struct tcp_sock *)sk->write_seq
    snd_nxt = (struct tcp_sock *)sk->snd_nxt
    snd_una = (struct tcp_sock *)sk->snd_una
    sk_sndbuf = sk->sk_sndbuf
    sk_wmem_queued = sk->sk_wmem_queued
    sk_write_queue_qlen = sk->sk_write_queue.qlen
    snd_wnd = (struct tcp_sock *)sk->snd_wnd
    skb_len = skb->len
    skb_datalen = skb->data_len
    cb_seq = (struct tcp_skb_cb)(skb->cb).seq
    cb_end_seq = (struct tcp_skb_cb)(skb->cb).end_seq
    cb_ack = (struct tcp_skb_cb)(skb->cb).ack_seq
end

p start
static int tcp_clean_rtx_queue(struct sock *sk, u32 prior_fack,
                       u32 prior_snd_una,
                       struct tcp_sacktag_state *sack)
    sk = sk
    prior_fack = prior_fack
    prior_snd_una = prior_snd_una
    srcip = sk->__sk_common.skc_rcv_saddr
    dstip = sk->__sk_common.skc_daddr
    srcport = (struct inet_sock *)sk->inet_sport
    dstport = sk->__sk_common.skc_dport
    sk_flags = sk->__sk_common.skc_flags
    sk_rcvbuf = sk->sk_rcvbuf
    sk_backlog_rmem_alloc = sk->sk_backlog.rmem_alloc
    write_seq = (struct tcp_sock *)sk->write_seq
    pending = (struct inet_connection_sock *)sk->icsk_ack.pending
    rcv_mss = (struct inet_connection_sock *)sk->icsk_ack.rcv_mss
    packets_out = (struct tcp_sock *)sk->packets_out
    sacked_out = (struct tcp_sock *)sk->sacked_out
    lost_out = (struct tcp_sock *)sk->lost_out
    retrans_out = (struct tcp_sock *)sk->retrans_out
    delivered = (struct tcp_sock *)sk->delivered
    lost = (struct tcp_sock *)sk->lost
    snd_wl= (struct tcp_sock *)sk->snd_wl1
    snd_wnd= (struct tcp_sock *)sk->snd_wnd
    max_window = (struct tcp_sock *)sk->max_window
    tlp_high_seq = (struct tcp_sock *)sk->tlp_high_seq
    out_of_order_queue = (struct tcp_sock *)sk->out_of_order_queue
    snd_nxt = (struct tcp_sock *)sk->snd_nxt
    snd_una = (struct tcp_sock *)sk->snd_una
    sk_sndbuf = sk->sk_sndbuf
    sk_wmem_queued = sk->sk_wmem_queued
    sk_write_queue_qlen = sk->sk_write_queue.qlen
end

p start
static int tcp_ack(struct sock *sk, const struct sk_buff *skb, int flag)
    sk = sk
    skb = skb
    srcip = sk->__sk_common.skc_rcv_saddr
    dstip = sk->__sk_common.skc_daddr
    srcport = (struct inet_sock *)sk->inet_sport
    dstport = sk->__sk_common.skc_dport
    sk_flags = sk->__sk_common.skc_flags
    sock_flags = (struct socket *)(sk->sk_socket)->flags
    sk_rcvbuf = sk->sk_rcvbuf
    sk_backlog_rmem_alloc = sk->sk_backlog.rmem_alloc
    window_clamp = (struct tcp_sock *)sk->window_clamp
    rcv_ssthresh = (struct tcp_sock *)sk->rcv_ssthresh
    icsk_rto = (struct inet_connection_sock *)sk->icsk_rto
    icsk_pending = (struct inet_connection_sock *)sk->icsk_pending
    mss_cache = (struct tcp_sock *)sk->mss_cache
    rcv_nxt = (struct tcp_sock *)sk->rcv_nxt
    copied_seq = (struct tcp_sock *)sk->copied_seq
    rcv_wup = (struct tcp_sock *)sk->rcv_wup
    rcv_wnd = (struct tcp_sock *)sk->rcv_wnd
    write_seq = (struct tcp_sock *)sk->write_seq
    pending = (struct inet_connection_sock *)sk->icsk_ack.pending
    quick = (struct inet_connection_sock *)sk->icsk_ack.quick
    pingpong = (struct inet_connection_sock *)sk->icsk_ack.pingpong
    # blocked = (struct inet_connection_sock *)sk->icsk_ack.blocked
    ato = (struct inet_connection_sock *)sk->icsk_ack.ato
    icsk_ack_timeout = (struct inet_connection_sock *)sk->icsk_ack.timeout
    lrcvtime = (struct inet_connection_sock *)sk->icsk_ack.lrcvtime
    last_seg_size = (struct inet_connection_sock *)sk->icsk_ack.last_seg_size
    rcv_mss = (struct inet_connection_sock *)sk->icsk_ack.rcv_mss
    packets_out = (struct tcp_sock *)sk->packets_out
    sacked_out = (struct tcp_sock *)sk->sacked_out
    lost_out = (struct tcp_sock *)sk->lost_out
    retrans_out = (struct tcp_sock *)sk->retrans_out
    delivered = (struct tcp_sock *)sk->delivered
    lost = (struct tcp_sock *)sk->lost
    snd_wl= (struct tcp_sock *)sk->snd_wl1
    snd_wnd= (struct tcp_sock *)sk->snd_wnd
    max_window = (struct tcp_sock *)sk->max_window
    tlp_high_seq = (struct tcp_sock *)sk->tlp_high_seq
    out_of_order_queue = (struct tcp_sock *)sk->out_of_order_queue
    snd_nxt = (struct tcp_sock *)sk->snd_nxt
    snd_una = (struct tcp_sock *)sk->snd_una
    sk_sndbuf = sk->sk_sndbuf
    sk_wmem_queued = sk->sk_wmem_queued
    sk_write_queue_qlen = sk->sk_write_queue.qlen
    skb_len = skb->len
    skb_datalen = skb->data_len
    cb_ack = (struct tcp_skb_cb)(skb->cb).ack_seq
end

p start
static bool tcp_write_xmit(struct sock *sk, unsigned int mss_now, int nonagle,
                   int push_one, gfp_t gfp)
    sk = sk
    mss_now = mss_now
    nonagle = nonagle
    push_one = push_one
    srcip = sk->__sk_common.skc_rcv_saddr
    dstip = sk->__sk_common.skc_daddr
    srcport = (struct inet_sock *)sk->inet_sport
    dstport = sk->__sk_common.skc_dport
    sk_flags = sk->__sk_common.skc_flags
    sock_flags = (struct socket *)(sk->sk_socket)->flags
    sk_rcvbuf = sk->sk_rcvbuf
    sk_backlog_rmem_alloc = sk->sk_backlog.rmem_alloc
    window_clamp = (struct tcp_sock *)sk->window_clamp
    rcv_ssthresh = (struct tcp_sock *)sk->rcv_ssthresh
    icsk_rto = (struct inet_connection_sock *)sk->icsk_rto
    icsk_pending = (struct inet_connection_sock *)sk->icsk_pending
    mss_cache = (struct tcp_sock *)sk->mss_cache
    rcv_nxt = (struct tcp_sock *)sk->rcv_nxt
    copied_seq = (struct tcp_sock *)sk->copied_seq
    rcv_wup = (struct tcp_sock *)sk->rcv_wup
    rcv_wnd = (struct tcp_sock *)sk->rcv_wnd
    write_seq = (struct tcp_sock *)sk->write_seq
    rcv_mss = (struct inet_connection_sock *)sk->icsk_ack.rcv_mss
    packets_out = (struct tcp_sock *)sk->packets_out
    sacked_out = (struct tcp_sock *)sk->sacked_out
    lost_out = (struct tcp_sock *)sk->lost_out
    retrans_out = (struct tcp_sock *)sk->retrans_out
    delivered = (struct tcp_sock *)sk->delivered
    lost = (struct tcp_sock *)sk->lost
    snd_wl= (struct tcp_sock *)sk->snd_wl1
    snd_wnd= (struct tcp_sock *)sk->snd_wnd
    max_window = (struct tcp_sock *)sk->max_window
    tlp_high_seq = (struct tcp_sock *)sk->tlp_high_seq
    out_of_order_queue = (struct tcp_sock *)sk->out_of_order_queue
    snd_nxt = (struct tcp_sock *)sk->snd_nxt
    snd_una = (struct tcp_sock *)sk->snd_una
    sk_sndbuf = sk->sk_sndbuf
    sk_wmem_queued = sk->sk_wmem_queued
end


p start
void tcp_send_delayed_ack(struct sock *sk)
    sk = sk
    srcip = sk->__sk_common.skc_rcv_saddr
    dstip = sk->__sk_common.skc_daddr
    srcport = (struct inet_sock *)sk->inet_sport
    dstport = sk->__sk_common.skc_dport
    sk_flags = sk->__sk_common.skc_flags
    sock_flags = (struct socket *)(sk->sk_socket)->flags
    rcv_nxt = (struct tcp_sock *)sk->rcv_nxt
    copied_seq = (struct tcp_sock *)sk->copied_seq
    rcv_wup = (struct tcp_sock *)sk->rcv_wup
    rcv_wnd = (struct tcp_sock *)sk->rcv_wnd
    sk_rcvbuf = sk->sk_rcvbuf
    sk_backlog_rmem_alloc = sk->sk_backlog.rmem_alloc
    window_clamp = (struct tcp_sock *)sk->window_clamp
    rcv_ssthresh = (struct tcp_sock *)sk->rcv_ssthresh
    pending = (struct inet_connection_sock *)sk->icsk_ack.pending
    quick = (struct inet_connection_sock *)sk->icsk_ack.quick
    pingpong = (struct inet_connection_sock *)sk->icsk_ack.pingpong
    # blocked = (struct inet_connection_sock *)sk->icsk_ack.blocked
    ato = (struct inet_connection_sock *)sk->icsk_ack.ato
    icsk_ack_timeout = (struct inet_connection_sock *)sk->icsk_ack.timeout
    lrcvtime = (struct inet_connection_sock *)sk->icsk_ack.lrcvtime
    last_seg_size = (struct inet_connection_sock *)sk->icsk_ack.last_seg_size
    rcv_mss = (struct inet_connection_sock *)sk->icsk_ack.rcv_mss
    write_seq = (struct tcp_sock *)sk->write_seq
    out_of_order_queue = (struct tcp_sock *)sk->out_of_order_queue
    snd_nxt = (struct tcp_sock *)sk->snd_nxt
    snd_una = (struct tcp_sock *)sk->snd_una
    sk_sndbuf = sk->sk_sndbuf
    sk_wmem_queued = sk->sk_wmem_queued
end

p start
void tcp_send_ack(struct sock *sk)
    sk = sk
    srcip = sk->__sk_common.skc_rcv_saddr
    dstip = sk->__sk_common.skc_daddr
    srcport = (struct inet_sock *)sk->inet_sport
    dstport = sk->__sk_common.skc_dport
    sk_flags = sk->__sk_common.skc_flags
    sock_flags = (struct socket *)(sk->sk_socket)->flags
    rcv_nxt = (struct tcp_sock *)sk->rcv_nxt
    copied_seq = (struct tcp_sock *)sk->copied_seq
    rcv_wup = (struct tcp_sock *)sk->rcv_wup
    rcv_wnd = (struct tcp_sock *)sk->rcv_wnd
    sk_rcvbuf = sk->sk_rcvbuf
    sk_backlog_rmem_alloc = sk->sk_backlog.rmem_alloc
    window_clamp = (struct tcp_sock *)sk->window_clamp
    rcv_ssthresh = (struct tcp_sock *)sk->rcv_ssthresh
    pending = (struct inet_connection_sock *)sk->icsk_ack.pending
    quick = (struct inet_connection_sock *)sk->icsk_ack.quick
    pingpong = (struct inet_connection_sock *)sk->icsk_ack.pingpong
    # blocked = (struct inet_connection_sock *)sk->icsk_ack.blocked
    ato = (struct inet_connection_sock *)sk->icsk_ack.ato
    icsk_ack_timeout = (struct inet_connection_sock *)sk->icsk_ack.timeout
    lrcvtime = (struct inet_connection_sock *)sk->icsk_ack.lrcvtime
    last_seg_size = (struct inet_connection_sock *)sk->icsk_ack.last_seg_size
    rcv_mss = (struct inet_connection_sock *)sk->icsk_ack.rcv_mss
    write_seq = (struct tcp_sock *)sk->write_seq
    out_of_order_queue = (struct tcp_sock *)sk->out_of_order_queue
    snd_nxt = (struct tcp_sock *)sk->snd_nxt
    snd_una = (struct tcp_sock *)sk->snd_una
    sk_sndbuf = sk->sk_sndbuf
    sk_wmem_queued = sk->sk_wmem_queued
end



p start
static int __must_check tcp_queue_rcv(struct sock *sk, struct sk_buff *skb, int hdrlen,
              bool *fragstolen)
    sk = sk
    skb = skb
    srcip = sk->__sk_common.skc_rcv_saddr
    dstip = sk->__sk_common.skc_daddr
    srcport = (struct inet_sock *)sk->inet_sport
    dstport = sk->__sk_common.skc_dport
    sk_flags = sk->__sk_common.skc_flags
    sock_flags = (struct socket *)(sk->sk_socket)->flags
    sk_rcvbuf = sk->sk_rcvbuf
    sk_backlog_rmem_alloc = sk->sk_backlog.rmem_alloc
    window_clamp = (struct tcp_sock *)sk->window_clamp
    rcv_ssthresh = (struct tcp_sock *)sk->rcv_ssthresh
    rcv_nxt = (struct tcp_sock *)sk->rcv_nxt
    copied_seq = (struct tcp_sock *)sk->copied_seq
    rcv_wup = (struct tcp_sock *)sk->rcv_wup
    rcv_wnd = (struct tcp_sock *)sk->rcv_wnd
    write_seq = (struct tcp_sock *)sk->write_seq
    out_of_order_queue = (struct tcp_sock *)sk->out_of_order_queue
    sk_write_queue_qlen = sk->sk_write_queue.qlen
    skb_len = skb->len
    skb_datalen = skb->data_len
    cb_seq = (struct tcp_skb_cb)(skb->cb).seq
    cb_end_seq = (struct tcp_skb_cb)(skb->cb).end_seq
    cb_ack = (struct tcp_skb_cb)(skb->cb).ack_seq
end



p start
static void tcp_data_queue(struct sock *sk, struct sk_buff *skb)
    sk = sk
    skb = skb
    srcip = sk->__sk_common.skc_rcv_saddr
    dstip = sk->__sk_common.skc_daddr
    srcport = (struct inet_sock *)sk->inet_sport
    dstport = sk->__sk_common.skc_dport
    sk_flags = sk->__sk_common.skc_flags
    sock_flags = (struct socket *)(sk->sk_socket)->flags
    sk_rcvbuf = sk->sk_rcvbuf
    sk_backlog_rmem_alloc = sk->sk_backlog.rmem_alloc
    window_clamp = (struct tcp_sock *)sk->window_clamp
    rcv_ssthresh = (struct tcp_sock *)sk->rcv_ssthresh
    rcv_nxt = (struct tcp_sock *)sk->rcv_nxt
    copied_seq = (struct tcp_sock *)sk->copied_seq
    rcv_wup = (struct tcp_sock *)sk->rcv_wup
    rcv_wnd = (struct tcp_sock *)sk->rcv_wnd
    write_seq = (struct tcp_sock *)sk->write_seq
    out_of_order_queue = (struct tcp_sock *)sk->out_of_order_queue
    sk_write_queue_qlen = sk->sk_write_queue.qlen
    skb_len = skb->len
    skb_datalen = skb->data_len
    cb_seq = (struct tcp_skb_cb)(skb->cb).seq
    cb_end_seq = (struct tcp_skb_cb)(skb->cb).end_seq
    cb_ack = (struct tcp_skb_cb)(skb->cb).ack_seq
end

p start
int __ip_local_out(struct net *net, struct sock *sk, struct sk_buff *skb)
    skb = skb
    srcip = (struct iphdr *)(skb->data)->saddr
    dstip = (struct iphdr *)(skb->data)->daddr
    srcport = (struct tcphdr *)(skb->data + 20)->source
    dstport = (struct tcphdr *)(skb->data + 20)->dest
    tcp_seq = (struct tcphdr *)(skb->data + 20)->seq
    tcp_ack = (struct tcphdr *)(skb->data + 20)->ack_seq
    #tcp_ack = (struct tcphdr *)(skb->data + 20)->tcp_flags
    tcp_flag_syn = (struct tcphdr *)(skb->data + 20)->syn
    tcp_flag_ack = (struct tcphdr *)(skb->data + 20)->ack
    tcp_flag_fin = (struct tcphdr *)(skb->data + 20)->fin
    tcp_flag_rst = (struct tcphdr *)(skb->data + 20)->rst
    tcp_win = (struct tcphdr *)(skb->data + 20)->window
    tcp_check = (struct tcphdr *)(skb->data + 20)->check
    ip_len = (struct iphdr *)(skb->data)->tot_len
    ip_id = (struct iphdr *)(skb->data)->id
    ip_frag = (struct iphdr *)(skb->data)->frag_off
    ip_proto = (struct iphdr *)(skb->data)->protocol
    devname = skb->dev->name
    skb_len = skb->len
    skb_datalen = skb->data_len
end

r start
static int ip_finish_output(struct sock *sk, struct sk_buff *skb)
FILTER 'ret!=0'
end

p start
int ip_output(struct net *net, struct sock *sk, struct sk_buff *skb)
    skb = skb
    srcip = (struct iphdr *)(skb->data)->saddr
    dstip = (struct iphdr *)(skb->data)->daddr
    srcport = (struct tcphdr *)(skb->data + 20)->source
    dstport = (struct tcphdr *)(skb->data + 20)->dest
    tcp_seq = (struct tcphdr *)(skb->data + 20)->seq
    tcp_ack = (struct tcphdr *)(skb->data + 20)->ack_seq
    #tcp_ack = (struct tcphdr *)(skb->data + 20)->tcp_flags
    tcp_flag_syn = (struct tcphdr *)(skb->data + 20)->syn
    tcp_flag_ack = (struct tcphdr *)(skb->data + 20)->ack
    tcp_flag_fin = (struct tcphdr *)(skb->data + 20)->fin
    tcp_flag_rst = (struct tcphdr *)(skb->data + 20)->rst
    tcp_win = (struct tcphdr *)(skb->data + 20)->window
    tcp_check = (struct tcphdr *)(skb->data + 20)->check
    ip_len = (struct iphdr *)(skb->data)->tot_len
    ip_id = (struct iphdr *)(skb->data)->id
    ip_frag = (struct iphdr *)(skb->data)->frag_off
    ip_proto = (struct iphdr *)(skb->data)->protocol
    devname = skb->dev->name
    skb_len = skb->len
    skb_datalen = skb->data_len
end

p start
static int __dev_queue_xmit(struct sk_buff *skb, struct net_device *sb_dev)

    skb = skb
    srcip = (struct iphdr *)(skb->data + 14)->saddr
    dstip = (struct iphdr *)(skb->data + 14)->daddr
    srcport = (struct tcphdr *)(skb->data + 34)->source
    dstport = (struct tcphdr *)(skb->data + 34)->dest
    tcp_seq = (struct tcphdr *)(skb->data + 34)->seq
    tcp_ack = (struct tcphdr *)(skb->data + 34)->ack_seq
    #tcp_flags = (struct tcphdr *)(skb->data + 34)->tcp_flags
    tcp_flag_syn = (struct tcphdr *)(skb->data + 34)->syn
    tcp_flag_ack = (struct tcphdr *)(skb->data + 34)->ack
    tcp_flag_fin = (struct tcphdr *)(skb->data + 34)->fin
    tcp_flag_rst = (struct tcphdr *)(skb->data + 34)->rst
    tcp_win = (struct tcphdr *)(skb->data + 34)->window
    tcp_check = (struct tcphdr *)(skb->data + 34)->check
    ip_tos = (struct iphdr *)(skb->data + 14)->tos
    ip_len = (struct iphdr *)(skb->data + 14)->tot_len
    ip_id = (struct iphdr *)(skb->data + 14)->id
    ip_frag = (struct iphdr *)(skb->data + 14)->frag_off
    ip_proto = (struct iphdr *)(skb->data + 14)->protocol
    ip_check = (struct iphdr *)(skb->data + 14)->check
    src_mac = (struct ethhdr *)(skb->data)->h_source:b48@0/64
    #dst_mac = (struct ethhdr *)(skb->data)->h_dest:b48@0/64
    eth_type = (struct ethhdr *)(skb->data)->h_proto
    devname = skb->dev->name
    skb_len = skb->len
    skb_datalen = skb->data_len
    txq_state = skb->dev._tx->state
    qdisc_len = skb->dev._tx->qdisc->q.qlen
end

p start
bool sch_direct_xmit(struct sk_buff *skb, struct Qdisc *q,
                 struct net_device *dev, struct netdev_queue *txq,
                 spinlock_t *root_lock, bool validate)
    skb = skb
    q = q
    txq = txq
    srcip = (struct iphdr *)(skb->data + 14)->saddr
    dstip = (struct iphdr *)(skb->data + 14)->daddr
    srcport = (struct tcphdr *)(skb->data + 34)->source
    dstport = (struct tcphdr *)(skb->data + 34)->dest
    tcp_seq = (struct tcphdr *)(skb->data + 34)->seq
    tcp_ack = (struct tcphdr *)(skb->data + 34)->ack_seq
    #tcp_flags = (struct tcphdr *)(skb->data + 34)->tcp_flags
    tcp_flag_syn = (struct tcphdr *)(skb->data + 34)->syn
    tcp_flag_ack = (struct tcphdr *)(skb->data + 34)->ack
    tcp_flag_fin = (struct tcphdr *)(skb->data + 34)->fin
    tcp_flag_rst = (struct tcphdr *)(skb->data + 34)->rst
    ip_id = (struct iphdr *)(skb->data + 14)->id
    ip_proto = (struct iphdr *)(skb->data + 14)->protocol
    devname = dev->name
    skb_len = skb->len
    skb_datalen = skb->data_len
    txq_state = txq->state
    qdisc_len = q->q.qlen
end

p start
struct sk_buff *dev_hard_start_xmit(struct sk_buff *first, struct net_device *dev,
                        struct netdev_queue *txq, int *ret)
    skb = first
    txq = txq
    srcip = (struct iphdr *)(first->data + 14)->saddr
    dstip = (struct iphdr *)(first->data + 14)->daddr
    srcport = (struct tcphdr *)(first->data + 34)->source
    dstport = (struct tcphdr *)(first->data + 34)->dest
    tcp_seq = (struct tcphdr *)(first->data + 34)->seq
    tcp_ack = (struct tcphdr *)(first->data + 34)->ack_seq
    #tcp_flags = (struct tcphdr *)(first->data + 34)->tcp_flags
    tcp_flag_syn = (struct tcphdr *)(first->data + 34)->syn
    tcp_flag_ack = (struct tcphdr *)(first->data + 34)->ack
    tcp_flag_fin = (struct tcphdr *)(first->data + 34)->fin
    tcp_flag_rst = (struct tcphdr *)(first->data + 34)->rst
    ip_id = (struct iphdr *)(first->data + 14)->id
    ip_proto = (struct iphdr *)(first->data + 14)->protocol
    src_mac = (struct ethhdr *)(first->data)->h_source:b48@0/64
    #dst_mac = (struct ethhdr *)(first->data)->h_dest:b48@0/64
    eth_type = (struct ethhdr *)(first->data)->h_proto
    devname = dev->name
    txq_state = txq->state
end

p start
int nf_hook_slow(struct sk_buff *skb, struct nf_hook_state *state,
             const struct nf_hook_entries *e, unsigned int s)
    skb = skb
    hook = state->hook
    pf = state->pf
    srcip = (struct iphdr *)(skb->data)->saddr
    dstip = (struct iphdr *)(skb->data)->daddr
    srcport = (struct tcphdr *)(skb->data + 20)->source
    dstport = (struct tcphdr *)(skb->data + 20)->dest
    tcp_seq = (struct tcphdr *)(skb->data + 20)->seq
    tcp_ack = (struct tcphdr *)(skb->data + 20)->ack_seq
    #tcp_flags = (struct tcphdr *)(skb->data + 20)->tcp_flags
    tcp_flag_syn = (struct tcphdr *)(skb->data + 20)->syn
    tcp_flag_ack = (struct tcphdr *)(skb->data + 20)->ack
    tcp_flag_fin = (struct tcphdr *)(skb->data + 20)->fin
    tcp_flag_rst = (struct tcphdr *)(skb->data + 20)->rst
    tcp_win = (struct tcphdr *)(skb->data + 20)->window
    tcp_check = (struct tcphdr *)(skb->data + 20)->check
    ip_len = (struct iphdr *)(skb->data)->tot_len
    ip_id = (struct iphdr *)(skb->data)->id
    ip_frag = (struct iphdr *)(skb->data)->frag_off
    ip_proto = (struct iphdr *)(skb->data)->protocol
    devname = skb->dev->name
    skb_len = skb->len
    skb_datalen = skb->data_len
end

p start
gro_result_t napi_gro_receive(struct napi_struct *napi, struct sk_buff *skb)
    skb = skb
    srcip = (struct iphdr *)(skb->data)->saddr
    dstip = (struct iphdr *)(skb->data)->daddr
    srcport = (struct tcphdr *)(skb->data + 20)->source
    dstport = (struct tcphdr *)(skb->data + 20)->dest
    tcp_seq = (struct tcphdr *)(skb->data + 20)->seq
    tcp_ack = (struct tcphdr *)(skb->data + 20)->ack_seq
    #tcp_ack = (struct tcphdr *)(skb->data + 20)->tcp_flags
    tcp_flag_syn = (struct tcphdr *)(skb->data + 20)->syn
    tcp_flag_ack = (struct tcphdr *)(skb->data + 20)->ack
    tcp_flag_fin = (struct tcphdr *)(skb->data + 20)->fin
    tcp_flag_rst = (struct tcphdr *)(skb->data + 20)->rst
    tcp_win = (struct tcphdr *)(skb->data + 20)->window
    tcp_check = (struct tcphdr *)(skb->data + 20)->check
    ip_len = (struct iphdr *)(skb->data)->tot_len
    ip_id = (struct iphdr *)(skb->data)->id
    ip_frag = (struct iphdr *)(skb->data)->frag_off
    ip_proto = (struct iphdr *)(skb->data)->protocol
    devname = skb->dev->name
    skb_len = skb->len
    skb_datalen = skb->data_len
    poll = napi->poll
end

p start
int ip_rcv(struct sk_buff *skb, struct net_device *dev, struct packet_type *pt,
           struct net_device *orig_dev)
    skb = skb
    srcip = (struct iphdr *)(skb->data)->saddr
    dstip = (struct iphdr *)(skb->data)->daddr
    srcport = (struct tcphdr *)(skb->data + 20)->source
    dstport = (struct tcphdr *)(skb->data + 20)->dest
    tcp_seq = (struct tcphdr *)(skb->data + 20)->seq
    tcp_ack = (struct tcphdr *)(skb->data + 20)->ack_seq
    #tcp_ack = (struct tcphdr *)(skb->data + 20)->tcp_flags
    tcp_flag_syn = (struct tcphdr *)(skb->data + 20)->syn
    tcp_flag_ack = (struct tcphdr *)(skb->data + 20)->ack
    tcp_flag_fin = (struct tcphdr *)(skb->data + 20)->fin
    tcp_flag_rst = (struct tcphdr *)(skb->data + 20)->rst
    tcp_win = (struct tcphdr *)(skb->data + 20)->window
    tcp_check = (struct tcphdr *)(skb->data + 20)->check
    ip_len = (struct iphdr *)(skb->data)->tot_len
    ip_id = (struct iphdr *)(skb->data)->id
    ip_frag = (struct iphdr *)(skb->data)->frag_off
    ip_proto = (struct iphdr *)(skb->data)->protocol
    devname = skb->dev->name
    skb_len = skb->len
    skb_datalen = skb->data_len
    skb_iif = skb->skb_iif
    skb_protocol = skb->protocol
    skb_csum =skb->csum
end

p start
static int ip_rcv_finish(struct net *net, struct sock *sk, struct sk_buff *skb)
    skb = skb
    srcip = (struct iphdr *)(skb->data)->saddr
    dstip = (struct iphdr *)(skb->data)->daddr
    srcport = (struct tcphdr *)(skb->data + 20)->source
    dstport = (struct tcphdr *)(skb->data + 20)->dest
    tcp_seq = (struct tcphdr *)(skb->data + 20)->seq
    tcp_ack = (struct tcphdr *)(skb->data + 20)->ack_seq
    #tcp_ack = (struct tcphdr *)(skb->data + 20)->tcp_flags
    tcp_flag_syn = (struct tcphdr *)(skb->data + 20)->syn
    tcp_flag_ack = (struct tcphdr *)(skb->data + 20)->ack
    tcp_flag_fin = (struct tcphdr *)(skb->data + 20)->fin
    tcp_flag_rst = (struct tcphdr *)(skb->data + 20)->rst
    tcp_win = (struct tcphdr *)(skb->data + 20)->window
    tcp_check = (struct tcphdr *)(skb->data + 20)->check
    ip_len = (struct iphdr *)(skb->data)->tot_len
    ip_id = (struct iphdr *)(skb->data)->id
    ip_frag = (struct iphdr *)(skb->data)->frag_off
    ip_proto = (struct iphdr *)(skb->data)->protocol
    devname = skb->dev->name
    skb_len = skb->len
    skb_datalen = skb->data_len
end

p start
int ip_local_deliver(struct sk_buff *skb)
    skb = skb
    srcip = (struct iphdr *)(skb->data)->saddr
    dstip = (struct iphdr *)(skb->data)->daddr
    srcport = (struct tcphdr *)(skb->data + 20)->source
    dstport = (struct tcphdr *)(skb->data + 20)->dest
    tcp_seq = (struct tcphdr *)(skb->data + 20)->seq
    tcp_ack = (struct tcphdr *)(skb->data + 20)->ack_seq
    #tcp_ack = (struct tcphdr *)(skb->data + 20)->tcp_flags
    tcp_flag_syn = (struct tcphdr *)(skb->data + 20)->syn
    tcp_flag_ack = (struct tcphdr *)(skb->data + 20)->ack
    tcp_flag_fin = (struct tcphdr *)(skb->data + 20)->fin
    tcp_flag_rst = (struct tcphdr *)(skb->data + 20)->rst
    tcp_win = (struct tcphdr *)(skb->data + 20)->window
    tcp_check = (struct tcphdr *)(skb->data + 20)->check
    ip_len = (struct iphdr *)(skb->data)->tot_len
    ip_id = (struct iphdr *)(skb->data)->id
    ip_frag = (struct iphdr *)(skb->data)->frag_off
    ip_proto = (struct iphdr *)(skb->data)->protocol
    devname = skb->dev->name
    skb_len = skb->len
    skb_datalen = skb->data_len
    skb_iif = skb->skb_iif
    skb_protocol = skb->protocol
    skb_csum = skb->csum
end

p start
static int ip_local_deliver_finish(struct net *net, struct sock *sk, struct sk_buff *skb)
    skb = skb
    srcip = (struct iphdr *)(skb->data)->saddr
    dstip = (struct iphdr *)(skb->data)->daddr
    srcport = (struct tcphdr *)(skb->data + 20)->source
    dstport = (struct tcphdr *)(skb->data + 20)->dest
    tcp_seq = (struct tcphdr *)(skb->data + 20)->seq
    tcp_ack = (struct tcphdr *)(skb->data + 20)->ack_seq
    #tcp_ack = (struct tcphdr *)(skb->data + 20)->tcp_flags
    tcp_flag_syn = (struct tcphdr *)(skb->data + 20)->syn
    tcp_flag_ack = (struct tcphdr *)(skb->data + 20)->ack
    tcp_flag_fin = (struct tcphdr *)(skb->data + 20)->fin
    tcp_flag_rst = (struct tcphdr *)(skb->data + 20)->rst
    tcp_win = (struct tcphdr *)(skb->data + 20)->window
    tcp_check = (struct tcphdr *)(skb->data + 20)->check
    ip_len = (struct iphdr *)(skb->data)->tot_len
    ip_id = (struct iphdr *)(skb->data)->id
    ip_frag = (struct iphdr *)(skb->data)->frag_off
    ip_proto = (struct iphdr *)(skb->data)->protocol
    devname = skb->dev->name
    skb_len = skb->len
    skb_datalen = skb->data_len
    skb_csum = skb->csum
end
