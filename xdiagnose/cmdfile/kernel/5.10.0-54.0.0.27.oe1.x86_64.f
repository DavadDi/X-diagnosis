All defined functions:

File ./arch/x86/include/asm//msr-trace.h:
50:	int __traceiter_rdpmc(void *, unsigned int, u64, int);
40:	int __traceiter_read_msr(void *, unsigned int, u64, int);
45:	int __traceiter_write_msr(void *, unsigned int, u64, int);
21:	static void __bpf_trace_msr_trace_class(void *, unsigned int, u64, int);
21:	static void perf_trace_msr_trace_class(void *, unsigned int, u64, int);
21:	static void trace_event_raw_event_msr_trace_class(void *, unsigned int, u64, int);
21:	static enum print_line_t trace_raw_output_msr_trace_class(struct trace_iterator *, int, struct trace_event *);

File ./arch/x86/include/asm/apic.h:
75:	static void default_inquire_remote_apic(int);
112:	static u32 native_apic_mem_read(u32);
103:	static void native_apic_mem_write(u32, u32);
210:	static void native_apic_msr_eoi_write(u32, u32);
215:	static u32 native_apic_msr_read(u32);
201:	static void native_apic_msr_write(u32, u32);
232:	static u32 native_safe_x2apic_wait_icr_idle(void);
243:	static u64 native_x2apic_icr_read(void);
238:	static void native_x2apic_icr_write(u32, u32);
226:	static void native_x2apic_wait_icr_idle(void);

File ./arch/x86/include/asm/bootparam_utils.h:
35:	static void sanitize_boot_params(struct boot_params *);

File ./arch/x86/include/asm/e820/api.h:
50:	static bool is_ISA_range(u64, u64);

File ./arch/x86/include/asm/gart.h:
54:	static int gart_iommu_hole_init(void);

File ./arch/x86/include/asm/mach_traps.h:
21:	static unsigned char default_get_nmi_reason(void);

File ./arch/x86/include/asm/mpspec.h:
133:	static void physid_set_mask_of_physid(int, physid_mask_t *);

File ./arch/x86/include/asm/resctrl.h:
54:	static void __resctrl_sched_in(void);

File ./arch/x86/include/asm/trace//fpu.h:
52:	int __traceiter_x86_fpu_after_restore(void *, struct fpu *);
42:	int __traceiter_x86_fpu_after_save(void *, struct fpu *);
47:	int __traceiter_x86_fpu_before_restore(void *, struct fpu *);
37:	int __traceiter_x86_fpu_before_save(void *, struct fpu *);
82:	int __traceiter_x86_fpu_copy_dst(void *, struct fpu *);
77:	int __traceiter_x86_fpu_copy_src(void *, struct fpu *);
72:	int __traceiter_x86_fpu_dropped(void *, struct fpu *);
67:	int __traceiter_x86_fpu_init_state(void *, struct fpu *);
57:	int __traceiter_x86_fpu_regs_activated(void *, struct fpu *);
62:	int __traceiter_x86_fpu_regs_deactivated(void *, struct fpu *);
87:	int __traceiter_x86_fpu_xstate_check_failed(void *, struct fpu *);
10:	static void __bpf_trace_x86_fpu(void *, struct fpu *);
10:	static void perf_trace_x86_fpu(void *, struct fpu *);
10:	static void trace_event_raw_event_x86_fpu(void *, struct fpu *);
10:	static enum print_line_t trace_raw_output_x86_fpu(struct trace_iterator *, int, struct trace_event *);

File ./arch/x86/include/asm/trace//hyperv.h:
11:	int __traceiter_hyperv_mmu_flush_tlb_multi(void *, const struct cpumask *, const struct flush_tlb_info *);
31:	int __traceiter_hyperv_nested_flush_guest_mapping(void *, u64, int);
45:	int __traceiter_hyperv_nested_flush_guest_mapping_range(void *, u64, int);
59:	int __traceiter_hyperv_send_ipi_mask(void *, const struct cpumask *, int);
74:	int __traceiter_hyperv_send_ipi_one(void *, int, int);
11:	static void __bpf_trace_hyperv_mmu_flush_tlb_multi(void *, const struct cpumask *, const struct flush_tlb_info *);
31:	static void __bpf_trace_hyperv_nested_flush_guest_mapping(void *, u64, int);
59:	static void __bpf_trace_hyperv_send_ipi_mask(void *, const struct cpumask *, int);
74:	static void __bpf_trace_hyperv_send_ipi_one(void *, int, int);
11:	static void perf_trace_hyperv_mmu_flush_tlb_multi(void *, const struct cpumask *, const struct flush_tlb_info *);
31:	static void perf_trace_hyperv_nested_flush_guest_mapping(void *, u64, int);
45:	static void perf_trace_hyperv_nested_flush_guest_mapping_range(void *, u64, int);
59:	static void perf_trace_hyperv_send_ipi_mask(void *, const struct cpumask *, int);
74:	static void perf_trace_hyperv_send_ipi_one(void *, int, int);
11:	static void trace_event_raw_event_hyperv_mmu_flush_tlb_multi(void *, const struct cpumask *, const struct flush_tlb_info *);
31:	static void trace_event_raw_event_hyperv_nested_flush_guest_mapping(void *, u64, int);
45:	static void trace_event_raw_event_hyperv_nested_flush_guest_mapping_range(void *, u64, int);
59:	static void trace_event_raw_event_hyperv_send_ipi_mask(void *, const struct cpumask *, int);
74:	static void trace_event_raw_event_hyperv_send_ipi_one(void *, int, int);
11:	static enum print_line_t trace_raw_output_hyperv_mmu_flush_tlb_multi(struct trace_iterator *, int, struct trace_event *);
31:	static enum print_line_t trace_raw_output_hyperv_nested_flush_guest_mapping(struct trace_iterator *, int, struct trace_event *);
45:	static enum print_line_t trace_raw_output_hyperv_nested_flush_guest_mapping_range(struct trace_iterator *, int, struct trace_event *);
59:	static enum print_line_t trace_raw_output_hyperv_send_ipi_mask(struct trace_iterator *, int, struct trace_event *);
74:	static enum print_line_t trace_raw_output_hyperv_send_ipi_one(struct trace_iterator *, int, struct trace_event *);

File ./arch/x86/include/asm/xen/hypervisor.h:
49:	static bool xen_x2apic_para_available(void);

File ./arch/x86/kernel/../include/asm/trace/./irq_vectors.h:
93:	int __traceiter_call_function_entry(void *, int);
93:	int __traceiter_call_function_exit(void *, int);
99:	int __traceiter_call_function_single_entry(void *, int);
99:	int __traceiter_call_function_single_exit(void *, int);
115:	int __traceiter_deferred_error_apic_entry(void *, int);
115:	int __traceiter_deferred_error_apic_exit(void *, int);
51:	int __traceiter_error_apic_entry(void *, int);
51:	int __traceiter_error_apic_exit(void *, int);
64:	int __traceiter_irq_work_entry(void *, int);
64:	int __traceiter_irq_work_exit(void *, int);
41:	int __traceiter_local_timer_entry(void *, int);
41:	int __traceiter_local_timer_exit(void *, int);
87:	int __traceiter_reschedule_entry(void *, int);
87:	int __traceiter_reschedule_exit(void *, int);
46:	int __traceiter_spurious_apic_entry(void *, int);
46:	int __traceiter_spurious_apic_exit(void *, int);
123:	int __traceiter_thermal_apic_entry(void *, int);
123:	int __traceiter_thermal_apic_exit(void *, int);
107:	int __traceiter_threshold_apic_entry(void *, int);
107:	int __traceiter_threshold_apic_exit(void *, int);
300:	int __traceiter_vector_activate(void *, unsigned int, bool, bool, bool);
219:	int __traceiter_vector_alloc(void *, unsigned int, unsigned int, bool, int);
245:	int __traceiter_vector_alloc_managed(void *, unsigned int, unsigned int, int);
190:	int __traceiter_vector_clear(void *, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int);
126:	int __traceiter_vector_config(void *, unsigned int, unsigned int, unsigned int, unsigned int);
301:	int __traceiter_vector_deactivate(void *, unsigned int, bool, bool, bool);
347:	int __traceiter_vector_free_moved(void *, unsigned int, unsigned int, unsigned int, bool);
217:	int __traceiter_vector_reserve(void *, unsigned int, int);
216:	int __traceiter_vector_reserve_managed(void *, unsigned int, int);
325:	int __traceiter_vector_setup(void *, unsigned int, bool, int);
303:	int __traceiter_vector_teardown(void *, unsigned int, bool, bool);
189:	int __traceiter_vector_update(void *, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int);
57:	int __traceiter_x86_platform_ipi_entry(void *, int);
57:	int __traceiter_x86_platform_ipi_exit(void *, int);
268:	static void __bpf_trace_vector_activate(void *, unsigned int, bool, bool, bool);
219:	static void __bpf_trace_vector_alloc(void *, unsigned int, unsigned int, bool, int);
245:	static void __bpf_trace_vector_alloc_managed(void *, unsigned int, unsigned int, int);
126:	static void __bpf_trace_vector_config(void *, unsigned int, unsigned int, unsigned int, unsigned int);
347:	static void __bpf_trace_vector_free_moved(void *, unsigned int, unsigned int, unsigned int, bool);
152:	static void __bpf_trace_vector_mod(void *, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int);
192:	static void __bpf_trace_vector_reserve(void *, unsigned int, int);
325:	static void __bpf_trace_vector_setup(void *, unsigned int, bool, int);
303:	static void __bpf_trace_vector_teardown(void *, unsigned int, bool, bool);
13:	static void __bpf_trace_x86_irq_vector(void *, int);
75:	static int perf_perm_irq_work_exit(struct trace_event_call *, struct perf_event *);
268:	static void perf_trace_vector_activate(void *, unsigned int, bool, bool, bool);
219:	static void perf_trace_vector_alloc(void *, unsigned int, unsigned int, bool, int);
245:	static void perf_trace_vector_alloc_managed(void *, unsigned int, unsigned int, int);
126:	static void perf_trace_vector_config(void *, unsigned int, unsigned int, unsigned int, unsigned int);
347:	static void perf_trace_vector_free_moved(void *, unsigned int, unsigned int, unsigned int, bool);
152:	static void perf_trace_vector_mod(void *, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int);
192:	static void perf_trace_vector_reserve(void *, unsigned int, int);
325:	static void perf_trace_vector_setup(void *, unsigned int, bool, int);
303:	static void perf_trace_vector_teardown(void *, unsigned int, bool, bool);
13:	static void perf_trace_x86_irq_vector(void *, int);
268:	static void trace_event_raw_event_vector_activate(void *, unsigned int, bool, bool, bool);
219:	static void trace_event_raw_event_vector_alloc(void *, unsigned int, unsigned int, bool, int);
245:	static void trace_event_raw_event_vector_alloc_managed(void *, unsigned int, unsigned int, int);
126:	static void trace_event_raw_event_vector_config(void *, unsigned int, unsigned int, unsigned int, unsigned int);
347:	static void trace_event_raw_event_vector_free_moved(void *, unsigned int, unsigned int, unsigned int, bool);
152:	static void trace_event_raw_event_vector_mod(void *, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int);
192:	static void trace_event_raw_event_vector_reserve(void *, unsigned int, int);
325:	static void trace_event_raw_event_vector_setup(void *, unsigned int, bool, int);
303:	static void trace_event_raw_event_vector_teardown(void *, unsigned int, bool, bool);
13:	static void trace_event_raw_event_x86_irq_vector(void *, int);
75:	static int trace_init_perf_perm_irq_work_exit(void);
268:	static enum print_line_t trace_raw_output_vector_activate(struct trace_iterator *, int, struct trace_event *);
219:	static enum print_line_t trace_raw_output_vector_alloc(struct trace_iterator *, int, struct trace_event *);
245:	static enum print_line_t trace_raw_output_vector_alloc_managed(struct trace_iterator *, int, struct trace_event *);
126:	static enum print_line_t trace_raw_output_vector_config(struct trace_iterator *, int, struct trace_event *);
347:	static enum print_line_t trace_raw_output_vector_free_moved(struct trace_iterator *, int, struct trace_event *);
152:	static enum print_line_t trace_raw_output_vector_mod(struct trace_iterator *, int, struct trace_event *);
192:	static enum print_line_t trace_raw_output_vector_reserve(struct trace_iterator *, int, struct trace_event *);
325:	static enum print_line_t trace_raw_output_vector_setup(struct trace_iterator *, int, struct trace_event *);
303:	static enum print_line_t trace_raw_output_vector_teardown(struct trace_iterator *, int, struct trace_event *);
13:	static enum print_line_t trace_raw_output_x86_irq_vector(struct trace_iterator *, int, struct trace_event *);

File ./arch/x86/mm/../include/asm/trace/./exceptions.h:
45:	int __traceiter_page_fault_kernel(void *, unsigned long, struct pt_regs *, unsigned long);
44:	int __traceiter_page_fault_user(void *, unsigned long, struct pt_regs *, unsigned long);
14:	static void __bpf_trace_x86_exceptions(void *, unsigned long, struct pt_regs *, unsigned long);
14:	static void perf_trace_x86_exceptions(void *, unsigned long, struct pt_regs *, unsigned long);
14:	static void trace_event_raw_event_x86_exceptions(void *, unsigned long, struct pt_regs *, unsigned long);
14:	static enum print_line_t trace_raw_output_x86_exceptions(struct trace_iterator *, int, struct trace_event *);

File ./fs/iomap/./trace.h:
144:	int __traceiter_iomap_apply(void *, struct inode *, loff_t, loff_t, unsigned int, const void *, void *, unsigned long);
141:	int __traceiter_iomap_apply_dstmap(void *, struct inode *, struct iomap *);
142:	int __traceiter_iomap_apply_srcmap(void *, struct inode *, struct iomap *);
77:	int __traceiter_iomap_dio_invalidate_fail(void *, struct inode *, unsigned long, unsigned int);
76:	int __traceiter_iomap_invalidatepage(void *, struct inode *, unsigned long, unsigned int);
42:	int __traceiter_iomap_readahead(void *, struct inode *, int);
41:	int __traceiter_iomap_readpage(void *, struct inode *, int);
75:	int __traceiter_iomap_releasepage(void *, struct inode *, unsigned long, unsigned int);
74:	int __traceiter_iomap_writepage(void *, struct inode *, unsigned long, unsigned int);
144:	static void __bpf_trace_iomap_apply(void *, struct inode *, loff_t, loff_t, unsigned int, const void *, void *, unsigned long);
102:	static void __bpf_trace_iomap_class(void *, struct inode *, struct iomap *);
44:	static void __bpf_trace_iomap_range_class(void *, struct inode *, unsigned long, unsigned int);
18:	static void __bpf_trace_iomap_readpage_class(void *, struct inode *, int);
144:	static void perf_trace_iomap_apply(void *, struct inode *, loff_t, loff_t, unsigned int, const void *, void *, unsigned long);
102:	static void perf_trace_iomap_class(void *, struct inode *, struct iomap *);
44:	static void perf_trace_iomap_range_class(void *, struct inode *, unsigned long, unsigned int);
18:	static void perf_trace_iomap_readpage_class(void *, struct inode *, int);
144:	static void trace_event_raw_event_iomap_apply(void *, struct inode *, loff_t, loff_t, unsigned int, const void *, void *, unsigned long);
102:	static void trace_event_raw_event_iomap_class(void *, struct inode *, struct iomap *);
44:	static void trace_event_raw_event_iomap_range_class(void *, struct inode *, unsigned long, unsigned int);
18:	static void trace_event_raw_event_iomap_readpage_class(void *, struct inode *, int);
144:	static enum print_line_t trace_raw_output_iomap_apply(struct trace_iterator *, int, struct trace_event *);
102:	static enum print_line_t trace_raw_output_iomap_class(struct trace_iterator *, int, struct trace_event *);
44:	static enum print_line_t trace_raw_output_iomap_range_class(struct trace_iterator *, int, struct trace_event *);
18:	static enum print_line_t trace_raw_output_iomap_readpage_class(struct trace_iterator *, int, struct trace_event *);

File ./include/asm-generic/tlb.h:
445:	static void tlb_remove_page(struct mmu_gather *, struct page *);

File ./include/crypto/sha1_base.h:
20:	static int sha1_base_init(struct shash_desc *);

File ./include/crypto/sha256_base.h:
21:	static int sha224_base_init(struct shash_desc *);
29:	static int sha256_base_init(struct shash_desc *);

File ./include/linux/acpi.h:
486:	static int acpi_dev_filter_resource_type_cb(struct acpi_resource *, void *);

File ./include/linux/jhash.h:
70:	static u32 jhash(const void *, u32, u32);

File ./include/linux/mroute_base.h:
421:	static void mr_mfc_seq_stop(struct seq_file *, void *);

File ./include/linux/sched/clock.h:
82:	static u64 local_clock(void);

File ./include/linux/sched/topology.h:
54:	static int cpu_core_flags(void);
61:	static int cpu_numa_flags(void);
40:	static int cpu_smt_flags(void);

File ./include/linux/timekeeping.h:
93:	static ktime_t ktime_get_boottime(void);
162:	static u64 ktime_get_boottime_ns(void);
106:	static ktime_t ktime_get_clocktai(void);
167:	static u64 ktime_get_clocktai_ns(void);
77:	static ktime_t ktime_get_real(void);
157:	static u64 ktime_get_real_ns(void);

File ./include/linux/topology.h:
222:	static const struct cpumask *cpu_cpu_mask(int);
209:	static const struct cpumask *cpu_smt_mask(int);

File ./include/linux/uidgid.h:
61:	static bool uid_eq(kuid_t, kuid_t);
71:	static bool uid_gt(kuid_t, kuid_t);
91:	static bool uid_lt(kuid_t, kuid_t);

File ./include/net/checksum.h:
96:	static __wsum csum_block_add_ext(__wsum, __wsum, int, int);
112:	static __wsum csum_partial_ext(const void *, int, __wsum);

File ./include/net/codel_impl.h:
142:	static struct sk_buff *codel_dequeue(void *, u32 *, struct codel_params *, struct codel_vars *, struct codel_stats *, codel_skb_dequeue_t, codel_skb_drop_t, codel_skb_time_t, codel_skb_len_t);

File ./include/net/codel_qdisc.h:
64:	static codel_time_t codel_get_enqueue_time(const struct sk_buff *);

File ./include/net/dst.h:
388:	static int dst_discard(struct sk_buff *);
451:	static int dst_output(struct net *, struct sock *, struct sk_buff *);

File ./include/net/ipv6_frag.h:
31:	static void ip6frag_init(struct inet_frag_queue *, const void *);
40:	static u32 ip6frag_key_hashfn(const void *, u32, u32);
55:	static int ip6frag_obj_cmpfn(struct rhashtable_compare_arg *, const void *);
46:	static u32 ip6frag_obj_hashfn(const void *, u32, u32);

File ./include/net/sch_generic.h:
1062:	static struct sk_buff *qdisc_dequeue_head(struct Qdisc *);
1118:	static struct sk_buff *qdisc_peek_dequeued(struct Qdisc *);
1110:	static struct sk_buff *qdisc_peek_head(struct Qdisc *);
824:	static unsigned int qdisc_pkt_len(const struct sk_buff *);
1200:	static void qdisc_reset_queue(struct Qdisc *);

File ./include/net/tcp.h:
1979:	static bool tcp_stream_memory_free(const struct sock *, int);

File ./include/net/udp.h:
207:	static void udp_lib_close(struct sock *, long);
198:	static int udp_lib_hash(struct sock *);

File ./include/net/udplite.h:
20:	static int udplite_getfrag(void *, char *, int, int, int, struct sk_buff *);
28:	static int udplite_sk_init(struct sock *);

File ./include/trace/../../arch/x86/entry/vsyscall//vsyscall_trace.h:
10:	int __traceiter_emulate_vsyscall(void *, int);
10:	static void __bpf_trace_emulate_vsyscall(void *, int);
10:	static void perf_trace_emulate_vsyscall(void *, int);
10:	static void trace_event_raw_event_emulate_vsyscall(void *, int);
10:	static enum print_line_t trace_raw_output_emulate_vsyscall(struct trace_iterator *, int, struct trace_event *);

File ./include/trace/../../include/ras/ras_event.h:
298:	int __traceiter_aer_event(void *, const char *, const u32, const u8, const u8, struct aer_header_log_regs *);
171:	int __traceiter_arm_event(void *, const struct cper_sec_proc_arm *);
27:	int __traceiter_extlog_mem_event(void *, struct cper_sec_mem_err *, u32, const guid_t *, const char *, u8);
98:	int __traceiter_mc_event(void *, const unsigned int, const char *, const char *, const int, const u8, const s8, const s8, const s8, unsigned long, const u8, unsigned long, const char *);
402:	int __traceiter_memory_failure_event(void *, unsigned long, int, int);
219:	int __traceiter_non_standard_event(void *, const guid_t *, const guid_t *, const char *, const u8, const u8 *, const u32);
298:	static void __bpf_trace_aer_event(void *, const char *, const u32, const u8, const u8, struct aer_header_log_regs *);
171:	static void __bpf_trace_arm_event(void *, const struct cper_sec_proc_arm *);
27:	static void __bpf_trace_extlog_mem_event(void *, struct cper_sec_mem_err *, u32, const guid_t *, const char *, u8);
98:	static void __bpf_trace_mc_event(void *, const unsigned int, const char *, const char *, const int, const u8, const s8, const s8, const s8, unsigned long, const u8, unsigned long, const char *);
402:	static void __bpf_trace_memory_failure_event(void *, unsigned long, int, int);
219:	static void __bpf_trace_non_standard_event(void *, const guid_t *, const guid_t *, const char *, const u8, const u8 *, const u32);
298:	static void perf_trace_aer_event(void *, const char *, const u32, const u8, const u8, struct aer_header_log_regs *);
171:	static void perf_trace_arm_event(void *, const struct cper_sec_proc_arm *);
27:	static void perf_trace_extlog_mem_event(void *, struct cper_sec_mem_err *, u32, const guid_t *, const char *, u8);
98:	static void perf_trace_mc_event(void *, const unsigned int, const char *, const char *, const int, const u8, const s8, const s8, const s8, unsigned long, const u8, unsigned long, const char *);
402:	static void perf_trace_memory_failure_event(void *, unsigned long, int, int);
219:	static void perf_trace_non_standard_event(void *, const guid_t *, const guid_t *, const char *, const u8, const u8 *, const u32);
298:	static void trace_event_raw_event_aer_event(void *, const char *, const u32, const u8, const u8, struct aer_header_log_regs *);
171:	static void trace_event_raw_event_arm_event(void *, const struct cper_sec_proc_arm *);
27:	static void trace_event_raw_event_extlog_mem_event(void *, struct cper_sec_mem_err *, u32, const guid_t *, const char *, u8);
98:	static void trace_event_raw_event_mc_event(void *, const unsigned int, const char *, const char *, const int, const u8, const s8, const s8, const s8, unsigned long, const u8, unsigned long, const char *);
402:	static void trace_event_raw_event_memory_failure_event(void *, unsigned long, int, int);
219:	static void trace_event_raw_event_non_standard_event(void *, const guid_t *, const guid_t *, const char *, const u8, const u8 *, const u32);
298:	static enum print_line_t trace_raw_output_aer_event(struct trace_iterator *, int, struct trace_event *);
171:	static enum print_line_t trace_raw_output_arm_event(struct trace_iterator *, int, struct trace_event *);
27:	static enum print_line_t trace_raw_output_extlog_mem_event(struct trace_iterator *, int, struct trace_event *);
98:	static enum print_line_t trace_raw_output_mc_event(struct trace_iterator *, int, struct trace_event *);
402:	static enum print_line_t trace_raw_output_memory_failure_event(struct trace_iterator *, int, struct trace_event *);
219:	static enum print_line_t trace_raw_output_non_standard_event(struct trace_iterator *, int, struct trace_event *);

File ./include/trace/events/alarmtimer.h:
87:	int __traceiter_alarmtimer_cancel(void *, struct alarm *, ktime_t);
73:	int __traceiter_alarmtimer_fired(void *, struct alarm *, ktime_t);
80:	int __traceiter_alarmtimer_start(void *, struct alarm *, ktime_t);
23:	int __traceiter_alarmtimer_suspend(void *, ktime_t, int);
45:	static void __bpf_trace_alarm_class(void *, struct alarm *, ktime_t);
23:	static void __bpf_trace_alarmtimer_suspend(void *, ktime_t, int);
45:	static void perf_trace_alarm_class(void *, struct alarm *, ktime_t);
23:	static void perf_trace_alarmtimer_suspend(void *, ktime_t, int);
45:	static void trace_event_raw_event_alarm_class(void *, struct alarm *, ktime_t);
23:	static void trace_event_raw_event_alarmtimer_suspend(void *, ktime_t, int);
45:	static enum print_line_t trace_raw_output_alarm_class(struct trace_iterator *, int, struct trace_event *);
23:	static enum print_line_t trace_raw_output_alarmtimer_suspend(struct trace_iterator *, int, struct trace_event *);

File ./include/trace/events/avc.h:
14:	int __traceiter_selinux_audited(void *, struct selinux_audit_data *, char *, char *, const char *);
14:	static void __bpf_trace_selinux_audited(void *, struct selinux_audit_data *, char *, char *, const char *);
14:	static void perf_trace_selinux_audited(void *, struct selinux_audit_data *, char *, char *, const char *);
14:	static void trace_event_raw_event_selinux_audited(void *, struct selinux_audit_data *, char *, char *, const char *);
14:	static enum print_line_t trace_raw_output_selinux_audited(struct trace_iterator *, int, struct trace_event *);

File ./include/trace/events/block.h:
341:	int __traceiter_block_bio_backmerge(void *, struct request_queue *, struct request *, struct bio *);
240:	int __traceiter_block_bio_bounce(void *, struct request_queue *, struct bio *);
276:	int __traceiter_block_bio_complete(void *, struct request_queue *, struct bio *);
357:	int __traceiter_block_bio_frontmerge(void *, struct request_queue *, struct request *, struct bio *);
371:	int __traceiter_block_bio_queue(void *, struct request_queue *, struct bio *);
573:	int __traceiter_block_bio_remap(void *, struct request_queue *, struct bio *, dev_t, sector_t);
58:	int __traceiter_block_dirty_buffer(void *, struct buffer_head *);
437:	int __traceiter_block_getrq(void *, struct request_queue *, struct bio *, int);
470:	int __traceiter_block_plug(void *, struct request_queue *);
116:	int __traceiter_block_rq_complete(void *, struct request *, int, unsigned int);
192:	int __traceiter_block_rq_insert(void *, struct request_queue *, struct request *);
207:	int __traceiter_block_rq_issue(void *, struct request_queue *, struct request *);
222:	int __traceiter_block_rq_merge(void *, struct request_queue *, struct request *);
617:	int __traceiter_block_rq_remap(void *, struct request_queue *, struct request *, dev_t, sector_t);
74:	int __traceiter_block_rq_requeue(void *, struct request_queue *, struct request *);
455:	int __traceiter_block_sleeprq(void *, struct request_queue *, struct bio *, int);
533:	int __traceiter_block_split(void *, struct request_queue *, struct bio *, unsigned int);
45:	int __traceiter_block_touch_buffer(void *, struct buffer_head *);
515:	int __traceiter_block_unplug(void *, struct request_queue *, unsigned int, bool);
304:	static void __bpf_trace_block_bio_merge(void *, struct request_queue *, struct request *, struct bio *);
573:	static void __bpf_trace_block_bio_remap(void *, struct request_queue *, struct bio *, dev_t, sector_t);
15:	static void __bpf_trace_block_buffer(void *, struct buffer_head *);
399:	static void __bpf_trace_block_get_rq(void *, struct request_queue *, struct bio *, int);
116:	static void __bpf_trace_block_rq_complete(void *, struct request *, int, unsigned int);
74:	static void __bpf_trace_block_rq_requeue(void *, struct request_queue *, struct request *);
533:	static void __bpf_trace_block_split(void *, struct request_queue *, struct bio *, unsigned int);
487:	static void __bpf_trace_block_unplug(void *, struct request_queue *, unsigned int, bool);
240:	static void perf_trace_block_bio_bounce(void *, struct request_queue *, struct bio *);
276:	static void perf_trace_block_bio_complete(void *, struct request_queue *, struct bio *);
304:	static void perf_trace_block_bio_merge(void *, struct request_queue *, struct request *, struct bio *);
371:	static void perf_trace_block_bio_queue(void *, struct request_queue *, struct bio *);
573:	static void perf_trace_block_bio_remap(void *, struct request_queue *, struct bio *, dev_t, sector_t);
15:	static void perf_trace_block_buffer(void *, struct buffer_head *);
399:	static void perf_trace_block_get_rq(void *, struct request_queue *, struct bio *, int);
470:	static void perf_trace_block_plug(void *, struct request_queue *);
148:	static void perf_trace_block_rq(void *, struct request_queue *, struct request *);
116:	static void perf_trace_block_rq_complete(void *, struct request *, int, unsigned int);
617:	static void perf_trace_block_rq_remap(void *, struct request_queue *, struct request *, dev_t, sector_t);
74:	static void perf_trace_block_rq_requeue(void *, struct request_queue *, struct request *);
533:	static void perf_trace_block_split(void *, struct request_queue *, struct bio *, unsigned int);
487:	static void perf_trace_block_unplug(void *, struct request_queue *, unsigned int, bool);
240:	static void trace_event_raw_event_block_bio_bounce(void *, struct request_queue *, struct bio *);
276:	static void trace_event_raw_event_block_bio_complete(void *, struct request_queue *, struct bio *);
304:	static void trace_event_raw_event_block_bio_merge(void *, struct request_queue *, struct request *, struct bio *);
371:	static void trace_event_raw_event_block_bio_queue(void *, struct request_queue *, struct bio *);
573:	static void trace_event_raw_event_block_bio_remap(void *, struct request_queue *, struct bio *, dev_t, sector_t);
15:	static void trace_event_raw_event_block_buffer(void *, struct buffer_head *);
399:	static void trace_event_raw_event_block_get_rq(void *, struct request_queue *, struct bio *, int);
470:	static void trace_event_raw_event_block_plug(void *, struct request_queue *);
148:	static void trace_event_raw_event_block_rq(void *, struct request_queue *, struct request *);
116:	static void trace_event_raw_event_block_rq_complete(void *, struct request *, int, unsigned int);
617:	static void trace_event_raw_event_block_rq_remap(void *, struct request_queue *, struct request *, dev_t, sector_t);
74:	static void trace_event_raw_event_block_rq_requeue(void *, struct request_queue *, struct request *);
533:	static void trace_event_raw_event_block_split(void *, struct request_queue *, struct bio *, unsigned int);
487:	static void trace_event_raw_event_block_unplug(void *, struct request_queue *, unsigned int, bool);
240:	static enum print_line_t trace_raw_output_block_bio_bounce(struct trace_iterator *, int, struct trace_event *);
276:	static enum print_line_t trace_raw_output_block_bio_complete(struct trace_iterator *, int, struct trace_event *);
304:	static enum print_line_t trace_raw_output_block_bio_merge(struct trace_iterator *, int, struct trace_event *);
371:	static enum print_line_t trace_raw_output_block_bio_queue(struct trace_iterator *, int, struct trace_event *);
573:	static enum print_line_t trace_raw_output_block_bio_remap(struct trace_iterator *, int, struct trace_event *);
15:	static enum print_line_t trace_raw_output_block_buffer(struct trace_iterator *, int, struct trace_event *);
399:	static enum print_line_t trace_raw_output_block_get_rq(struct trace_iterator *, int, struct trace_event *);
470:	static enum print_line_t trace_raw_output_block_plug(struct trace_iterator *, int, struct trace_event *);
148:	static enum print_line_t trace_raw_output_block_rq(struct trace_iterator *, int, struct trace_event *);
116:	static enum print_line_t trace_raw_output_block_rq_complete(struct trace_iterator *, int, struct trace_event *);
617:	static enum print_line_t trace_raw_output_block_rq_remap(struct trace_iterator *, int, struct trace_event *);
74:	static enum print_line_t trace_raw_output_block_rq_requeue(struct trace_iterator *, int, struct trace_event *);
533:	static enum print_line_t trace_raw_output_block_split(struct trace_iterator *, int, struct trace_event *);
487:	static enum print_line_t trace_raw_output_block_unplug(struct trace_iterator *, int, struct trace_event *);

File ./include/trace/events/bpf_test_run.h:
38:	int __traceiter_bpf_test_finish(void *, int *);
10:	static void __bpf_trace_bpf_test_finish(void *, int *);
10:	static void perf_trace_bpf_test_finish(void *, int *);
10:	static void trace_event_raw_event_bpf_test_finish(void *, int *);
10:	static enum print_line_t trace_raw_output_bpf_test_finish(struct trace_iterator *, int, struct trace_event *);

File ./include/trace/events/bridge.h:
12:	int __traceiter_br_fdb_add(void *, struct ndmsg *, struct net_device *, const unsigned char *, u16, u16);
42:	int __traceiter_br_fdb_external_learn_add(void *, struct net_bridge *, struct net_bridge_port *, const unsigned char *, u16);
95:	int __traceiter_br_fdb_update(void *, struct net_bridge *, struct net_bridge_port *, const unsigned char *, u16, unsigned long);
69:	int __traceiter_fdb_delete(void *, struct net_bridge *, struct net_bridge_fdb_entry *);
12:	static void __bpf_trace_br_fdb_add(void *, struct ndmsg *, struct net_device *, const unsigned char *, u16, u16);
42:	static void __bpf_trace_br_fdb_external_learn_add(void *, struct net_bridge *, struct net_bridge_port *, const unsigned char *, u16);
95:	static void __bpf_trace_br_fdb_update(void *, struct net_bridge *, struct net_bridge_port *, const unsigned char *, u16, unsigned long);
12:	static void perf_trace_br_fdb_add(void *, struct ndmsg *, struct net_device *, const unsigned char *, u16, u16);
42:	static void perf_trace_br_fdb_external_learn_add(void *, struct net_bridge *, struct net_bridge_port *, const unsigned char *, u16);
95:	static void perf_trace_br_fdb_update(void *, struct net_bridge *, struct net_bridge_port *, const unsigned char *, u16, unsigned long);
69:	static void perf_trace_fdb_delete(void *, struct net_bridge *, struct net_bridge_fdb_entry *);
12:	static void trace_event_raw_event_br_fdb_add(void *, struct ndmsg *, struct net_device *, const unsigned char *, u16, u16);
42:	static void trace_event_raw_event_br_fdb_external_learn_add(void *, struct net_bridge *, struct net_bridge_port *, const unsigned char *, u16);
95:	static void trace_event_raw_event_br_fdb_update(void *, struct net_bridge *, struct net_bridge_port *, const unsigned char *, u16, unsigned long);
69:	static void trace_event_raw_event_fdb_delete(void *, struct net_bridge *, struct net_bridge_fdb_entry *);
12:	static enum print_line_t trace_raw_output_br_fdb_add(struct trace_iterator *, int, struct trace_event *);
42:	static enum print_line_t trace_raw_output_br_fdb_external_learn_add(struct trace_iterator *, int, struct trace_event *);
95:	static enum print_line_t trace_raw_output_br_fdb_update(struct trace_iterator *, int, struct trace_event *);
69:	static enum print_line_t trace_raw_output_fdb_delete(struct trace_iterator *, int, struct trace_event *);

File ./include/trace/events/cgroup.h:
150:	int __traceiter_cgroup_attach_task(void *, struct cgroup *, const char *, struct task_struct *, bool);
40:	int __traceiter_cgroup_destroy_root(void *, struct cgroup_root *);
106:	int __traceiter_cgroup_freeze(void *, struct cgroup *, const char *);
78:	int __traceiter_cgroup_mkdir(void *, struct cgroup *, const char *);
200:	int __traceiter_cgroup_notify_frozen(void *, struct cgroup *, const char *, int);
193:	int __traceiter_cgroup_notify_populated(void *, struct cgroup *, const char *, int);
92:	int __traceiter_cgroup_release(void *, struct cgroup *, const char *);
47:	int __traceiter_cgroup_remount(void *, struct cgroup_root *);
99:	int __traceiter_cgroup_rename(void *, struct cgroup *, const char *);
85:	int __traceiter_cgroup_rmdir(void *, struct cgroup *, const char *);
33:	int __traceiter_cgroup_setup_root(void *, struct cgroup_root *);
158:	int __traceiter_cgroup_transfer_tasks(void *, struct cgroup *, const char *, struct task_struct *, bool);
113:	int __traceiter_cgroup_unfreeze(void *, struct cgroup *, const char *);
54:	static void __bpf_trace_cgroup(void *, struct cgroup *, const char *);
166:	static void __bpf_trace_cgroup_event(void *, struct cgroup *, const char *, int);
120:	static void __bpf_trace_cgroup_migrate(void *, struct cgroup *, const char *, struct task_struct *, bool);
11:	static void __bpf_trace_cgroup_root(void *, struct cgroup_root *);
54:	static void perf_trace_cgroup(void *, struct cgroup *, const char *);
166:	static void perf_trace_cgroup_event(void *, struct cgroup *, const char *, int);
120:	static void perf_trace_cgroup_migrate(void *, struct cgroup *, const char *, struct task_struct *, bool);
11:	static void perf_trace_cgroup_root(void *, struct cgroup_root *);
54:	static void trace_event_raw_event_cgroup(void *, struct cgroup *, const char *);
166:	static void trace_event_raw_event_cgroup_event(void *, struct cgroup *, const char *, int);
120:	static void trace_event_raw_event_cgroup_migrate(void *, struct cgroup *, const char *, struct task_struct *, bool);
11:	static void trace_event_raw_event_cgroup_root(void *, struct cgroup_root *);
54:	static enum print_line_t trace_raw_output_cgroup(struct trace_iterator *, int, struct trace_event *);
166:	static enum print_line_t trace_raw_output_cgroup_event(struct trace_iterator *, int, struct trace_event *);
120:	static enum print_line_t trace_raw_output_cgroup_migrate(struct trace_iterator *, int, struct trace_event *);
11:	static enum print_line_t trace_raw_output_cgroup_root(struct trace_iterator *, int, struct trace_event *);

File ./include/trace/events/clk.h:
46:	int __traceiter_clk_disable(void *, struct clk_core *);
53:	int __traceiter_clk_disable_complete(void *, struct clk_core *);
32:	int __traceiter_clk_enable(void *, struct clk_core *);
39:	int __traceiter_clk_enable_complete(void *, struct clk_core *);
60:	int __traceiter_clk_prepare(void *, struct clk_core *);
67:	int __traceiter_clk_prepare_complete(void *, struct clk_core *);
209:	int __traceiter_clk_set_duty_cycle(void *, struct clk_core *, struct clk_duty *);
216:	int __traceiter_clk_set_duty_cycle_complete(void *, struct clk_core *, struct clk_duty *);
140:	int __traceiter_clk_set_parent(void *, struct clk_core *, struct clk_core *);
147:	int __traceiter_clk_set_parent_complete(void *, struct clk_core *, struct clk_core *);
173:	int __traceiter_clk_set_phase(void *, struct clk_core *, int);
180:	int __traceiter_clk_set_phase_complete(void *, struct clk_core *, int);
107:	int __traceiter_clk_set_rate(void *, struct clk_core *, unsigned long);
114:	int __traceiter_clk_set_rate_complete(void *, struct clk_core *, unsigned long);
74:	int __traceiter_clk_unprepare(void *, struct clk_core *);
81:	int __traceiter_clk_unprepare_complete(void *, struct clk_core *);
15:	static void __bpf_trace_clk(void *, struct clk_core *);
121:	static void __bpf_trace_clk_parent(void *, struct clk_core *, struct clk_core *);
154:	static void __bpf_trace_clk_phase(void *, struct clk_core *, int);
88:	static void __bpf_trace_clk_rate(void *, struct clk_core *, unsigned long);
15:	static void perf_trace_clk(void *, struct clk_core *);
187:	static void perf_trace_clk_duty_cycle(void *, struct clk_core *, struct clk_duty *);
121:	static void perf_trace_clk_parent(void *, struct clk_core *, struct clk_core *);
154:	static void perf_trace_clk_phase(void *, struct clk_core *, int);
88:	static void perf_trace_clk_rate(void *, struct clk_core *, unsigned long);
15:	static void trace_event_raw_event_clk(void *, struct clk_core *);
187:	static void trace_event_raw_event_clk_duty_cycle(void *, struct clk_core *, struct clk_duty *);
121:	static void trace_event_raw_event_clk_parent(void *, struct clk_core *, struct clk_core *);
154:	static void trace_event_raw_event_clk_phase(void *, struct clk_core *, int);
88:	static void trace_event_raw_event_clk_rate(void *, struct clk_core *, unsigned long);
15:	static enum print_line_t trace_raw_output_clk(struct trace_iterator *, int, struct trace_event *);
187:	static enum print_line_t trace_raw_output_clk_duty_cycle(struct trace_iterator *, int, struct trace_event *);
121:	static enum print_line_t trace_raw_output_clk_parent(struct trace_iterator *, int, struct trace_event *);
154:	static enum print_line_t trace_raw_output_clk_phase(struct trace_iterator *, int, struct trace_event *);
88:	static enum print_line_t trace_raw_output_clk_rate(struct trace_iterator *, int, struct trace_event *);

File ./include/trace/events/compaction.h:
106:	int __traceiter_mm_compaction_begin(void *, unsigned long, unsigned long, unsigned long, unsigned long, bool);
284:	int __traceiter_mm_compaction_defer_compaction(void *, struct zone *, int);
291:	int __traceiter_mm_compaction_defer_reset(void *, struct zone *, int);
277:	int __traceiter_mm_compaction_deferred(void *, struct zone *, int);
136:	int __traceiter_mm_compaction_end(void *, unsigned long, unsigned long, unsigned long, unsigned long, bool, int);
226:	int __traceiter_mm_compaction_finished(void *, struct zone *, int, int);
56:	int __traceiter_mm_compaction_isolate_freepages(void *, unsigned long, unsigned long, unsigned long, unsigned long);
45:	int __traceiter_mm_compaction_isolate_migratepages(void *, unsigned long, unsigned long, unsigned long, unsigned long);
298:	int __traceiter_mm_compaction_kcompactd_sleep(void *, int);
350:	int __traceiter_mm_compaction_kcompactd_wake(void *, int, int, enum zone_type);
68:	int __traceiter_mm_compaction_migratepages(void *, unsigned long, int, struct list_head *);
235:	int __traceiter_mm_compaction_suitable(void *, struct zone *, int, int);
170:	int __traceiter_mm_compaction_try_to_compact_pages(void *, int, gfp_t, int);
343:	int __traceiter_mm_compaction_wakeup_kcompactd(void *, int, int, enum zone_type);
315:	static void __bpf_trace_kcompactd_wake_template(void *, int, int, enum zone_type);
106:	static void __bpf_trace_mm_compaction_begin(void *, unsigned long, unsigned long, unsigned long, unsigned long, bool);
244:	static void __bpf_trace_mm_compaction_defer_template(void *, struct zone *, int);
136:	static void __bpf_trace_mm_compaction_end(void *, unsigned long, unsigned long, unsigned long, unsigned long, bool, int);
14:	static void __bpf_trace_mm_compaction_isolate_template(void *, unsigned long, unsigned long, unsigned long, unsigned long);
298:	static void __bpf_trace_mm_compaction_kcompactd_sleep(void *, int);
68:	static void __bpf_trace_mm_compaction_migratepages(void *, unsigned long, int, struct list_head *);
197:	static void __bpf_trace_mm_compaction_suitable_template(void *, struct zone *, int, int);
170:	static void __bpf_trace_mm_compaction_try_to_compact_pages(void *, int, gfp_t, int);
315:	static void perf_trace_kcompactd_wake_template(void *, int, int, enum zone_type);
106:	static void perf_trace_mm_compaction_begin(void *, unsigned long, unsigned long, unsigned long, unsigned long, bool);
244:	static void perf_trace_mm_compaction_defer_template(void *, struct zone *, int);
136:	static void perf_trace_mm_compaction_end(void *, unsigned long, unsigned long, unsigned long, unsigned long, bool, int);
14:	static void perf_trace_mm_compaction_isolate_template(void *, unsigned long, unsigned long, unsigned long, unsigned long);
298:	static void perf_trace_mm_compaction_kcompactd_sleep(void *, int);
68:	static void perf_trace_mm_compaction_migratepages(void *, unsigned long, int, struct list_head *);
197:	static void perf_trace_mm_compaction_suitable_template(void *, struct zone *, int, int);
170:	static void perf_trace_mm_compaction_try_to_compact_pages(void *, int, gfp_t, int);
315:	static void trace_event_raw_event_kcompactd_wake_template(void *, int, int, enum zone_type);
106:	static void trace_event_raw_event_mm_compaction_begin(void *, unsigned long, unsigned long, unsigned long, unsigned long, bool);
244:	static void trace_event_raw_event_mm_compaction_defer_template(void *, struct zone *, int);
136:	static void trace_event_raw_event_mm_compaction_end(void *, unsigned long, unsigned long, unsigned long, unsigned long, bool, int);
14:	static void trace_event_raw_event_mm_compaction_isolate_template(void *, unsigned long, unsigned long, unsigned long, unsigned long);
298:	static void trace_event_raw_event_mm_compaction_kcompactd_sleep(void *, int);
68:	static void trace_event_raw_event_mm_compaction_migratepages(void *, unsigned long, int, struct list_head *);
197:	static void trace_event_raw_event_mm_compaction_suitable_template(void *, struct zone *, int, int);
170:	static void trace_event_raw_event_mm_compaction_try_to_compact_pages(void *, int, gfp_t, int);
315:	static enum print_line_t trace_raw_output_kcompactd_wake_template(struct trace_iterator *, int, struct trace_event *);
106:	static enum print_line_t trace_raw_output_mm_compaction_begin(struct trace_iterator *, int, struct trace_event *);
244:	static enum print_line_t trace_raw_output_mm_compaction_defer_template(struct trace_iterator *, int, struct trace_event *);
136:	static enum print_line_t trace_raw_output_mm_compaction_end(struct trace_iterator *, int, struct trace_event *);
14:	static enum print_line_t trace_raw_output_mm_compaction_isolate_template(struct trace_iterator *, int, struct trace_event *);
298:	static enum print_line_t trace_raw_output_mm_compaction_kcompactd_sleep(struct trace_iterator *, int, struct trace_event *);
68:	static enum print_line_t trace_raw_output_mm_compaction_migratepages(struct trace_iterator *, int, struct trace_event *);
197:	static enum print_line_t trace_raw_output_mm_compaction_suitable_template(struct trace_iterator *, int, struct trace_event *);
170:	static enum print_line_t trace_raw_output_mm_compaction_try_to_compact_pages(struct trace_iterator *, int, struct trace_event *);

File ./include/trace/events/context_tracking.h:
34:	int __traceiter_user_enter(void *, int);
48:	int __traceiter_user_exit(void *, int);
10:	static void __bpf_trace_context_tracking_user(void *, int);
10:	static void perf_trace_context_tracking_user(void *, int);
10:	static void trace_event_raw_event_context_tracking_user(void *, int);
10:	static enum print_line_t trace_raw_output_context_tracking_user(struct trace_iterator *, int, struct trace_event *);

File ./include/trace/events/cpuhp.h:
10:	int __traceiter_cpuhp_enter(void *, unsigned int, int, int, int (*)(unsigned int));
65:	int __traceiter_cpuhp_exit(void *, unsigned int, int, int, int);
37:	int __traceiter_cpuhp_multi_enter(void *, unsigned int, int, int, int (*)(unsigned int, struct hlist_node *), struct hlist_node *);
10:	static void __bpf_trace_cpuhp_enter(void *, unsigned int, int, int, int (*)(unsigned int));
65:	static void __bpf_trace_cpuhp_exit(void *, unsigned int, int, int, int);
37:	static void __bpf_trace_cpuhp_multi_enter(void *, unsigned int, int, int, int (*)(unsigned int, struct hlist_node *), struct hlist_node *);
10:	static void perf_trace_cpuhp_enter(void *, unsigned int, int, int, int (*)(unsigned int));
65:	static void perf_trace_cpuhp_exit(void *, unsigned int, int, int, int);
37:	static void perf_trace_cpuhp_multi_enter(void *, unsigned int, int, int, int (*)(unsigned int, struct hlist_node *), struct hlist_node *);
10:	static void trace_event_raw_event_cpuhp_enter(void *, unsigned int, int, int, int (*)(unsigned int));
65:	static void trace_event_raw_event_cpuhp_exit(void *, unsigned int, int, int, int);
37:	static void trace_event_raw_event_cpuhp_multi_enter(void *, unsigned int, int, int, int (*)(unsigned int, struct hlist_node *), struct hlist_node *);
10:	static enum print_line_t trace_raw_output_cpuhp_enter(struct trace_iterator *, int, struct trace_event *);
65:	static enum print_line_t trace_raw_output_cpuhp_exit(struct trace_iterator *, int, struct trace_event *);
37:	static enum print_line_t trace_raw_output_cpuhp_multi_enter(struct trace_iterator *, int, struct trace_event *);

File ./include/trace/events/devlink.h:
112:	int __traceiter_devlink_health_recover_aborted(void *, const struct devlink *, const char *, bool, u64);
81:	int __traceiter_devlink_health_report(void *, const struct devlink *, const char *, const char *);
146:	int __traceiter_devlink_health_reporter_state_update(void *, const struct devlink *, const char *, bool);
52:	int __traceiter_devlink_hwerr(void *, const struct devlink *, int, const char *);
17:	int __traceiter_devlink_hwmsg(void *, const struct devlink *, bool, unsigned long, const u8 *, size_t);
177:	int __traceiter_devlink_trap_report(void *, const struct devlink *, struct sk_buff *, const struct devlink_trap_metadata *);
112:	static void __bpf_trace_devlink_health_recover_aborted(void *, const struct devlink *, const char *, bool, u64);
81:	static void __bpf_trace_devlink_health_report(void *, const struct devlink *, const char *, const char *);
146:	static void __bpf_trace_devlink_health_reporter_state_update(void *, const struct devlink *, const char *, bool);
52:	static void __bpf_trace_devlink_hwerr(void *, const struct devlink *, int, const char *);
17:	static void __bpf_trace_devlink_hwmsg(void *, const struct devlink *, bool, unsigned long, const u8 *, size_t);
112:	static void perf_trace_devlink_health_recover_aborted(void *, const struct devlink *, const char *, bool, u64);
81:	static void perf_trace_devlink_health_report(void *, const struct devlink *, const char *, const char *);
146:	static void perf_trace_devlink_health_reporter_state_update(void *, const struct devlink *, const char *, bool);
52:	static void perf_trace_devlink_hwerr(void *, const struct devlink *, int, const char *);
17:	static void perf_trace_devlink_hwmsg(void *, const struct devlink *, bool, unsigned long, const u8 *, size_t);
177:	static void perf_trace_devlink_trap_report(void *, const struct devlink *, struct sk_buff *, const struct devlink_trap_metadata *);
112:	static void trace_event_raw_event_devlink_health_recover_aborted(void *, const struct devlink *, const char *, bool, u64);
81:	static void trace_event_raw_event_devlink_health_report(void *, const struct devlink *, const char *, const char *);
146:	static void trace_event_raw_event_devlink_health_reporter_state_update(void *, const struct devlink *, const char *, bool);
52:	static void trace_event_raw_event_devlink_hwerr(void *, const struct devlink *, int, const char *);
17:	static void trace_event_raw_event_devlink_hwmsg(void *, const struct devlink *, bool, unsigned long, const u8 *, size_t);
177:	static void trace_event_raw_event_devlink_trap_report(void *, const struct devlink *, struct sk_buff *, const struct devlink_trap_metadata *);
112:	static enum print_line_t trace_raw_output_devlink_health_recover_aborted(struct trace_iterator *, int, struct trace_event *);
81:	static enum print_line_t trace_raw_output_devlink_health_report(struct trace_iterator *, int, struct trace_event *);
146:	static enum print_line_t trace_raw_output_devlink_health_reporter_state_update(struct trace_iterator *, int, struct trace_event *);
52:	static enum print_line_t trace_raw_output_devlink_hwerr(struct trace_iterator *, int, struct trace_event *);
17:	static enum print_line_t trace_raw_output_devlink_hwmsg(struct trace_iterator *, int, struct trace_event *);
177:	static enum print_line_t trace_raw_output_devlink_trap_report(struct trace_iterator *, int, struct trace_event *);

File ./include/trace/events/dma_fence.h:
51:	int __traceiter_dma_fence_destroy(void *, struct dma_fence *);
37:	int __traceiter_dma_fence_emit(void *, struct dma_fence *);
58:	int __traceiter_dma_fence_enable_signal(void *, struct dma_fence *);
44:	int __traceiter_dma_fence_init(void *, struct dma_fence *);
65:	int __traceiter_dma_fence_signaled(void *, struct dma_fence *);
79:	int __traceiter_dma_fence_wait_end(void *, struct dma_fence *);
72:	int __traceiter_dma_fence_wait_start(void *, struct dma_fence *);
12:	static void __bpf_trace_dma_fence(void *, struct dma_fence *);
12:	static void perf_trace_dma_fence(void *, struct dma_fence *);
12:	static void trace_event_raw_event_dma_fence(void *, struct dma_fence *);
12:	static enum print_line_t trace_raw_output_dma_fence(struct trace_iterator *, int, struct trace_event *);

File ./include/trace/events/dynamic_hugetlb.h:
60:	int __traceiter_dynamic_hugetlb_acct_memory(void *, const void *, unsigned long, unsigned long, unsigned long);
87:	int __traceiter_dynamic_hugetlb_alloc_free(void *, const void *, struct page *, unsigned long, unsigned long, unsigned long);
32:	int __traceiter_dynamic_hugetlb_split_merge(void *, const void *, struct page *, unsigned long, unsigned long);
60:	static void __bpf_trace_dynamic_hugetlb_acct_memory(void *, const void *, unsigned long, unsigned long, unsigned long);
87:	static void __bpf_trace_dynamic_hugetlb_alloc_free(void *, const void *, struct page *, unsigned long, unsigned long, unsigned long);
32:	static void __bpf_trace_dynamic_hugetlb_split_merge(void *, const void *, struct page *, unsigned long, unsigned long);
60:	static void perf_trace_dynamic_hugetlb_acct_memory(void *, const void *, unsigned long, unsigned long, unsigned long);
87:	static void perf_trace_dynamic_hugetlb_alloc_free(void *, const void *, struct page *, unsigned long, unsigned long, unsigned long);
32:	static void perf_trace_dynamic_hugetlb_split_merge(void *, const void *, struct page *, unsigned long, unsigned long);
60:	static void trace_event_raw_event_dynamic_hugetlb_acct_memory(void *, const void *, unsigned long, unsigned long, unsigned long);
87:	static void trace_event_raw_event_dynamic_hugetlb_alloc_free(void *, const void *, struct page *, unsigned long, unsigned long, unsigned long);
32:	static void trace_event_raw_event_dynamic_hugetlb_split_merge(void *, const void *, struct page *, unsigned long, unsigned long);
60:	static enum print_line_t trace_raw_output_dynamic_hugetlb_acct_memory(struct trace_iterator *, int, struct trace_event *);
87:	static enum print_line_t trace_raw_output_dynamic_hugetlb_alloc_free(struct trace_iterator *, int, struct trace_event *);
32:	static enum print_line_t trace_raw_output_dynamic_hugetlb_split_merge(struct trace_iterator *, int, struct trace_event *);

File ./include/trace/events/error_report.h:
67:	int __traceiter_error_report_end(void *, enum error_detector, unsigned long);
47:	static void __bpf_trace_error_report_template(void *, enum error_detector, unsigned long);
47:	static void perf_trace_error_report_template(void *, enum error_detector, unsigned long);
47:	static void trace_event_raw_event_error_report_template(void *, enum error_detector, unsigned long);
47:	static enum print_line_t trace_raw_output_error_report_template(struct trace_iterator *, int, struct trace_event *);

File ./include/trace/events/fib.h:
13:	int __traceiter_fib_table_lookup(void *, u32, const struct flowi4 *, const struct fib_nh_common *, int);
13:	static void __bpf_trace_fib_table_lookup(void *, u32, const struct flowi4 *, const struct fib_nh_common *, int);
13:	static void perf_trace_fib_table_lookup(void *, u32, const struct flowi4 *, const struct fib_nh_common *, int);
13:	static void trace_event_raw_event_fib_table_lookup(void *, u32, const struct flowi4 *, const struct fib_nh_common *, int);
13:	static enum print_line_t trace_raw_output_fib_table_lookup(struct trace_iterator *, int, struct trace_event *);

File ./include/trace/events/fib6.h:
13:	int __traceiter_fib6_table_lookup(void *, const struct net *, const struct fib6_result *, struct fib6_table *, const struct flowi6 *);
13:	static void __bpf_trace_fib6_table_lookup(void *, const struct net *, const struct fib6_result *, struct fib6_table *, const struct flowi6 *);
13:	static void perf_trace_fib6_table_lookup(void *, const struct net *, const struct fib6_result *, struct fib6_table *, const struct flowi6 *);
13:	static void trace_event_raw_event_fib6_table_lookup(void *, const struct net *, const struct fib6_result *, struct fib6_table *, const struct flowi6 *);
13:	static enum print_line_t trace_raw_output_fib6_table_lookup(struct trace_iterator *, int, struct trace_event *);

File ./include/trace/events/filelock.h:
159:	int __traceiter_break_lease_block(void *, struct inode *, struct file_lock *);
156:	int __traceiter_break_lease_noblock(void *, struct inode *, struct file_lock *);
162:	int __traceiter_break_lease_unblock(void *, struct inode *, struct file_lock *);
107:	int __traceiter_fcntl_setlk(void *, struct inode *, struct file_lock *, int);
115:	int __traceiter_flock_lock_inode(void *, struct inode *, struct file_lock *, int);
171:	int __traceiter_generic_add_lease(void *, struct inode *, struct file_lock *);
165:	int __traceiter_generic_delete_lease(void *, struct inode *, struct file_lock *);
206:	int __traceiter_leases_conflict(void *, bool, struct file_lock *, struct file_lock *);
38:	int __traceiter_locks_get_lock_context(void *, struct inode *, int, struct file_lock_context *);
111:	int __traceiter_locks_remove_posix(void *, struct inode *, struct file_lock *, int);
103:	int __traceiter_posix_lock_inode(void *, struct inode *, struct file_lock *, int);
168:	int __traceiter_time_out_leases(void *, struct inode *, struct file_lock *);
119:	static void __bpf_trace_filelock_lease(void *, struct inode *, struct file_lock *);
62:	static void __bpf_trace_filelock_lock(void *, struct inode *, struct file_lock *, int);
206:	static void __bpf_trace_leases_conflict(void *, bool, struct file_lock *, struct file_lock *);
38:	static void __bpf_trace_locks_get_lock_context(void *, struct inode *, int, struct file_lock_context *);
119:	static void perf_trace_filelock_lease(void *, struct inode *, struct file_lock *);
62:	static void perf_trace_filelock_lock(void *, struct inode *, struct file_lock *, int);
171:	static void perf_trace_generic_add_lease(void *, struct inode *, struct file_lock *);
206:	static void perf_trace_leases_conflict(void *, bool, struct file_lock *, struct file_lock *);
38:	static void perf_trace_locks_get_lock_context(void *, struct inode *, int, struct file_lock_context *);
119:	static void trace_event_raw_event_filelock_lease(void *, struct inode *, struct file_lock *);
62:	static void trace_event_raw_event_filelock_lock(void *, struct inode *, struct file_lock *, int);
171:	static void trace_event_raw_event_generic_add_lease(void *, struct inode *, struct file_lock *);
206:	static void trace_event_raw_event_leases_conflict(void *, bool, struct file_lock *, struct file_lock *);
38:	static void trace_event_raw_event_locks_get_lock_context(void *, struct inode *, int, struct file_lock_context *);
119:	static enum print_line_t trace_raw_output_filelock_lease(struct trace_iterator *, int, struct trace_event *);
62:	static enum print_line_t trace_raw_output_filelock_lock(struct trace_iterator *, int, struct trace_event *);
171:	static enum print_line_t trace_raw_output_generic_add_lease(struct trace_iterator *, int, struct trace_event *);
206:	static enum print_line_t trace_raw_output_leases_conflict(struct trace_iterator *, int, struct trace_event *);
38:	static enum print_line_t trace_raw_output_locks_get_lock_context(struct trace_iterator *, int, struct trace_event *);

File ./include/trace/events/filemap.h:
82:	int __traceiter_file_check_and_advance_wb_err(void *, struct file *, errseq_t);
57:	int __traceiter_filemap_set_wb_err(void *, struct address_space *, errseq_t);
52:	int __traceiter_mm_filemap_add_to_page_cache(void *, struct page *);
47:	int __traceiter_mm_filemap_delete_from_page_cache(void *, struct page *);
57:	static void __bpf_trace_filemap_set_wb_err(void *, struct address_space *, errseq_t);
16:	static void __bpf_trace_mm_filemap_op_page_cache(void *, struct page *);
82:	static void perf_trace_file_check_and_advance_wb_err(void *, struct file *, errseq_t);
57:	static void perf_trace_filemap_set_wb_err(void *, struct address_space *, errseq_t);
16:	static void perf_trace_mm_filemap_op_page_cache(void *, struct page *);
82:	static void trace_event_raw_event_file_check_and_advance_wb_err(void *, struct file *, errseq_t);
57:	static void trace_event_raw_event_filemap_set_wb_err(void *, struct address_space *, errseq_t);
16:	static void trace_event_raw_event_mm_filemap_op_page_cache(void *, struct page *);
82:	static enum print_line_t trace_raw_output_file_check_and_advance_wb_err(struct trace_iterator *, int, struct trace_event *);
57:	static enum print_line_t trace_raw_output_filemap_set_wb_err(struct trace_iterator *, int, struct trace_event *);
16:	static enum print_line_t trace_raw_output_mm_filemap_op_page_cache(struct trace_iterator *, int, struct trace_event *);

File ./include/trace/events/fs_dax.h:
197:	int __traceiter_dax_insert_mapping(void *, struct inode *, struct vm_fault *, void *);
195:	int __traceiter_dax_insert_pfn_mkwrite(void *, struct inode *, struct vm_fault *, int);
194:	int __traceiter_dax_insert_pfn_mkwrite_no_entry(void *, struct inode *, struct vm_fault *, int);
193:	int __traceiter_dax_load_hole(void *, struct inode *, struct vm_fault *, int);
60:	int __traceiter_dax_pmd_fault(void *, struct inode *, struct vm_fault *, unsigned long, int);
61:	int __traceiter_dax_pmd_fault_done(void *, struct inode *, struct vm_fault *, unsigned long, int);
151:	int __traceiter_dax_pmd_insert_mapping(void *, struct inode *, struct vm_fault *, long, pfn_t, void *);
102:	int __traceiter_dax_pmd_load_hole(void *, struct inode *, struct vm_fault *, struct page *, void *);
103:	int __traceiter_dax_pmd_load_hole_fallback(void *, struct inode *, struct vm_fault *, struct page *, void *);
191:	int __traceiter_dax_pte_fault(void *, struct inode *, struct vm_fault *, int);
192:	int __traceiter_dax_pte_fault_done(void *, struct inode *, struct vm_fault *, int);
259:	int __traceiter_dax_writeback_one(void *, struct inode *, unsigned long, unsigned long);
256:	int __traceiter_dax_writeback_range(void *, struct inode *, unsigned long, unsigned long);
257:	int __traceiter_dax_writeback_range_done(void *, struct inode *, unsigned long, unsigned long);
197:	static void __bpf_trace_dax_insert_mapping(void *, struct inode *, struct vm_fault *, void *);
10:	static void __bpf_trace_dax_pmd_fault_class(void *, struct inode *, struct vm_fault *, unsigned long, int);
105:	static void __bpf_trace_dax_pmd_insert_mapping_class(void *, struct inode *, struct vm_fault *, long, pfn_t, void *);
63:	static void __bpf_trace_dax_pmd_load_hole_class(void *, struct inode *, struct vm_fault *, struct page *, void *);
153:	static void __bpf_trace_dax_pte_fault_class(void *, struct inode *, struct vm_fault *, int);
227:	static void __bpf_trace_dax_writeback_range_class(void *, struct inode *, unsigned long, unsigned long);
197:	static void perf_trace_dax_insert_mapping(void *, struct inode *, struct vm_fault *, void *);
10:	static void perf_trace_dax_pmd_fault_class(void *, struct inode *, struct vm_fault *, unsigned long, int);
105:	static void perf_trace_dax_pmd_insert_mapping_class(void *, struct inode *, struct vm_fault *, long, pfn_t, void *);
63:	static void perf_trace_dax_pmd_load_hole_class(void *, struct inode *, struct vm_fault *, struct page *, void *);
153:	static void perf_trace_dax_pte_fault_class(void *, struct inode *, struct vm_fault *, int);
259:	static void perf_trace_dax_writeback_one(void *, struct inode *, unsigned long, unsigned long);
227:	static void perf_trace_dax_writeback_range_class(void *, struct inode *, unsigned long, unsigned long);
197:	static void trace_event_raw_event_dax_insert_mapping(void *, struct inode *, struct vm_fault *, void *);
10:	static void trace_event_raw_event_dax_pmd_fault_class(void *, struct inode *, struct vm_fault *, unsigned long, int);
105:	static void trace_event_raw_event_dax_pmd_insert_mapping_class(void *, struct inode *, struct vm_fault *, long, pfn_t, void *);
63:	static void trace_event_raw_event_dax_pmd_load_hole_class(void *, struct inode *, struct vm_fault *, struct page *, void *);
153:	static void trace_event_raw_event_dax_pte_fault_class(void *, struct inode *, struct vm_fault *, int);
259:	static void trace_event_raw_event_dax_writeback_one(void *, struct inode *, unsigned long, unsigned long);
227:	static void trace_event_raw_event_dax_writeback_range_class(void *, struct inode *, unsigned long, unsigned long);
197:	static enum print_line_t trace_raw_output_dax_insert_mapping(struct trace_iterator *, int, struct trace_event *);
10:	static enum print_line_t trace_raw_output_dax_pmd_fault_class(struct trace_iterator *, int, struct trace_event *);
105:	static enum print_line_t trace_raw_output_dax_pmd_insert_mapping_class(struct trace_iterator *, int, struct trace_event *);
63:	static enum print_line_t trace_raw_output_dax_pmd_load_hole_class(struct trace_iterator *, int, struct trace_event *);
153:	static enum print_line_t trace_raw_output_dax_pte_fault_class(struct trace_iterator *, int, struct trace_event *);
259:	static enum print_line_t trace_raw_output_dax_writeback_one(struct trace_iterator *, int, struct trace_event *);
227:	static enum print_line_t trace_raw_output_dax_writeback_range_class(struct trace_iterator *, int, struct trace_event *);

File ./include/trace/events/gpio.h:
10:	int __traceiter_gpio_direction(void *, unsigned int, int, int);
32:	int __traceiter_gpio_value(void *, unsigned int, int, int);
10:	static void __bpf_trace_gpio_direction(void *, unsigned int, int, int);
10:	static void perf_trace_gpio_direction(void *, unsigned int, int, int);
32:	static void perf_trace_gpio_value(void *, unsigned int, int, int);
10:	static void trace_event_raw_event_gpio_direction(void *, unsigned int, int, int);
32:	static void trace_event_raw_event_gpio_value(void *, unsigned int, int, int);
10:	static enum print_line_t trace_raw_output_gpio_direction(struct trace_iterator *, int, struct trace_event *);
32:	static enum print_line_t trace_raw_output_gpio_value(struct trace_iterator *, int, struct trace_event *);

File ./include/trace/events/huge_memory.h:
88:	int __traceiter_mm_collapse_huge_page(void *, struct mm_struct *, int, int);
112:	int __traceiter_mm_collapse_huge_page_isolate(void *, struct page *, int, int, bool, int);
143:	int __traceiter_mm_collapse_huge_page_swapin(void *, struct mm_struct *, int, int, int);
51:	int __traceiter_mm_khugepaged_scan_pmd(void *, struct mm_struct *, struct page *, bool, int, int, int, int);
88:	static void __bpf_trace_mm_collapse_huge_page(void *, struct mm_struct *, int, int);
112:	static void __bpf_trace_mm_collapse_huge_page_isolate(void *, struct page *, int, int, bool, int);
143:	static void __bpf_trace_mm_collapse_huge_page_swapin(void *, struct mm_struct *, int, int, int);
51:	static void __bpf_trace_mm_khugepaged_scan_pmd(void *, struct mm_struct *, struct page *, bool, int, int, int, int);
88:	static void perf_trace_mm_collapse_huge_page(void *, struct mm_struct *, int, int);
112:	static void perf_trace_mm_collapse_huge_page_isolate(void *, struct page *, int, int, bool, int);
143:	static void perf_trace_mm_collapse_huge_page_swapin(void *, struct mm_struct *, int, int, int);
51:	static void perf_trace_mm_khugepaged_scan_pmd(void *, struct mm_struct *, struct page *, bool, int, int, int, int);
88:	static void trace_event_raw_event_mm_collapse_huge_page(void *, struct mm_struct *, int, int);
112:	static void trace_event_raw_event_mm_collapse_huge_page_isolate(void *, struct page *, int, int, bool, int);
143:	static void trace_event_raw_event_mm_collapse_huge_page_swapin(void *, struct mm_struct *, int, int, int);
51:	static void trace_event_raw_event_mm_khugepaged_scan_pmd(void *, struct mm_struct *, struct page *, bool, int, int, int, int);
88:	static enum print_line_t trace_raw_output_mm_collapse_huge_page(struct trace_iterator *, int, struct trace_event *);
112:	static enum print_line_t trace_raw_output_mm_collapse_huge_page_isolate(struct trace_iterator *, int, struct trace_event *);
143:	static enum print_line_t trace_raw_output_mm_collapse_huge_page_swapin(struct trace_iterator *, int, struct trace_event *);
51:	static enum print_line_t trace_raw_output_mm_khugepaged_scan_pmd(struct trace_iterator *, int, struct trace_event *);

File ./include/trace/events/hwmon.h:
32:	int __traceiter_hwmon_attr_show(void *, int, const char *, long);
46:	int __traceiter_hwmon_attr_show_string(void *, int, const char *, const char *);
39:	int __traceiter_hwmon_attr_store(void *, int, const char *, long);
10:	static void __bpf_trace_hwmon_attr_class(void *, int, const char *, long);
46:	static void __bpf_trace_hwmon_attr_show_string(void *, int, const char *, const char *);
10:	static void perf_trace_hwmon_attr_class(void *, int, const char *, long);
46:	static void perf_trace_hwmon_attr_show_string(void *, int, const char *, const char *);
10:	static void trace_event_raw_event_hwmon_attr_class(void *, int, const char *, long);
46:	static void trace_event_raw_event_hwmon_attr_show_string(void *, int, const char *, const char *);
10:	static enum print_line_t trace_raw_output_hwmon_attr_class(struct trace_iterator *, int, struct trace_event *);
46:	static enum print_line_t trace_raw_output_hwmon_attr_show_string(struct trace_iterator *, int, struct trace_event *);

File ./include/trace/events/i2c.h:
58:	int __traceiter_i2c_read(void *, const struct i2c_adapter *, const struct i2c_msg *, int);
89:	int __traceiter_i2c_reply(void *, const struct i2c_adapter *, const struct i2c_msg *, int);
122:	int __traceiter_i2c_result(void *, const struct i2c_adapter *, int, int);
25:	int __traceiter_i2c_write(void *, const struct i2c_adapter *, const struct i2c_msg *, int);
122:	static void __bpf_trace_i2c_result(void *, const struct i2c_adapter *, int, int);
25:	static void __bpf_trace_i2c_write(void *, const struct i2c_adapter *, const struct i2c_msg *, int);
58:	static void perf_trace_i2c_read(void *, const struct i2c_adapter *, const struct i2c_msg *, int);
89:	static void perf_trace_i2c_reply(void *, const struct i2c_adapter *, const struct i2c_msg *, int);
122:	static void perf_trace_i2c_result(void *, const struct i2c_adapter *, int, int);
25:	static void perf_trace_i2c_write(void *, const struct i2c_adapter *, const struct i2c_msg *, int);
58:	static void trace_event_raw_event_i2c_read(void *, const struct i2c_adapter *, const struct i2c_msg *, int);
89:	static void trace_event_raw_event_i2c_reply(void *, const struct i2c_adapter *, const struct i2c_msg *, int);
122:	static void trace_event_raw_event_i2c_result(void *, const struct i2c_adapter *, int, int);
25:	static void trace_event_raw_event_i2c_write(void *, const struct i2c_adapter *, const struct i2c_msg *, int);
58:	static enum print_line_t trace_raw_output_i2c_read(struct trace_iterator *, int, struct trace_event *);
89:	static enum print_line_t trace_raw_output_i2c_reply(struct trace_iterator *, int, struct trace_event *);
122:	static enum print_line_t trace_raw_output_i2c_result(struct trace_iterator *, int, struct trace_event *);
25:	static enum print_line_t trace_raw_output_i2c_write(struct trace_iterator *, int, struct trace_event *);

File ./include/trace/events/initcall.h:
48:	int __traceiter_initcall_finish(void *, initcall_t, int);
10:	int __traceiter_initcall_level(void *, const char *);
27:	int __traceiter_initcall_start(void *, initcall_t);
48:	static void __bpf_trace_initcall_finish(void *, initcall_t, int);
10:	static void __bpf_trace_initcall_level(void *, const char *);
27:	static void __bpf_trace_initcall_start(void *, initcall_t);
48:	static void perf_trace_initcall_finish(void *, initcall_t, int);
10:	static void perf_trace_initcall_level(void *, const char *);
27:	static void perf_trace_initcall_start(void *, initcall_t);
48:	static void trace_event_raw_event_initcall_finish(void *, initcall_t, int);
10:	static void trace_event_raw_event_initcall_level(void *, const char *);
27:	static void trace_event_raw_event_initcall_start(void *, initcall_t);
48:	static enum print_line_t trace_raw_output_initcall_finish(struct trace_iterator *, int, struct trace_event *);
10:	static enum print_line_t trace_raw_output_initcall_level(struct trace_iterator *, int, struct trace_event *);
27:	static enum print_line_t trace_raw_output_initcall_start(struct trace_iterator *, int, struct trace_event *);

File ./include/trace/events/intel_iommu.h:
133:	int __traceiter_bounce_map_sg(void *, struct device *, int, int, struct scatterlist *);
52:	int __traceiter_bounce_map_single(void *, struct device *, dma_addr_t, phys_addr_t, size_t);
91:	int __traceiter_bounce_unmap_single(void *, struct device *, dma_addr_t, size_t);
127:	int __traceiter_map_sg(void *, struct device *, int, int, struct scatterlist *);
46:	int __traceiter_map_single(void *, struct device *, dma_addr_t, phys_addr_t, size_t);
86:	int __traceiter_unmap_sg(void *, struct device *, dma_addr_t, size_t);
81:	int __traceiter_unmap_single(void *, struct device *, dma_addr_t, size_t);
19:	static void __bpf_trace_dma_map(void *, struct device *, dma_addr_t, phys_addr_t, size_t);
96:	static void __bpf_trace_dma_map_sg(void *, struct device *, int, int, struct scatterlist *);
58:	static void __bpf_trace_dma_unmap(void *, struct device *, dma_addr_t, size_t);
19:	static void perf_trace_dma_map(void *, struct device *, dma_addr_t, phys_addr_t, size_t);
96:	static void perf_trace_dma_map_sg(void *, struct device *, int, int, struct scatterlist *);
58:	static void perf_trace_dma_unmap(void *, struct device *, dma_addr_t, size_t);
19:	static void trace_event_raw_event_dma_map(void *, struct device *, dma_addr_t, phys_addr_t, size_t);
96:	static void trace_event_raw_event_dma_map_sg(void *, struct device *, int, int, struct scatterlist *);
58:	static void trace_event_raw_event_dma_unmap(void *, struct device *, dma_addr_t, size_t);
19:	static enum print_line_t trace_raw_output_dma_map(struct trace_iterator *, int, struct trace_event *);
96:	static enum print_line_t trace_raw_output_dma_map_sg(struct trace_iterator *, int, struct trace_event *);
58:	static enum print_line_t trace_raw_output_dma_unmap(struct trace_iterator *, int, struct trace_event *);

File ./include/trace/events/io_uring.h:
295:	int __traceiter_io_uring_complete(void *, void *, u64, long);
240:	int __traceiter_io_uring_cqring_wait(void *, void *, int);
24:	int __traceiter_io_uring_create(void *, int, void *, u32, u32, u32);
175:	int __traceiter_io_uring_defer(void *, void *, void *, unsigned long long);
268:	int __traceiter_io_uring_fail_link(void *, void *, void *);
108:	int __traceiter_io_uring_file_get(void *, void *, int);
208:	int __traceiter_io_uring_link(void *, void *, void *, void *);
360:	int __traceiter_io_uring_poll_arm(void *, void *, u8, u64, int, int);
388:	int __traceiter_io_uring_poll_wake(void *, void *, u8, u64, int);
137:	int __traceiter_io_uring_queue_async_work(void *, void *, int, void *, struct io_wq_work *, unsigned int);
67:	int __traceiter_io_uring_register(void *, void *, unsigned int, unsigned int, unsigned int, bool, long);
331:	int __traceiter_io_uring_submit_sqe(void *, void *, u8, u64, bool, bool);
414:	int __traceiter_io_uring_task_add(void *, void *, u8, u64, int);
440:	int __traceiter_io_uring_task_run(void *, void *, u8, u64);
295:	static void __bpf_trace_io_uring_complete(void *, void *, u64, long);
24:	static void __bpf_trace_io_uring_create(void *, int, void *, u32, u32, u32);
175:	static void __bpf_trace_io_uring_defer(void *, void *, void *, unsigned long long);
268:	static void __bpf_trace_io_uring_fail_link(void *, void *, void *);
108:	static void __bpf_trace_io_uring_file_get(void *, void *, int);
208:	static void __bpf_trace_io_uring_link(void *, void *, void *, void *);
360:	static void __bpf_trace_io_uring_poll_arm(void *, void *, u8, u64, int, int);
388:	static void __bpf_trace_io_uring_poll_wake(void *, void *, u8, u64, int);
137:	static void __bpf_trace_io_uring_queue_async_work(void *, void *, int, void *, struct io_wq_work *, unsigned int);
67:	static void __bpf_trace_io_uring_register(void *, void *, unsigned int, unsigned int, unsigned int, bool, long);
331:	static void __bpf_trace_io_uring_submit_sqe(void *, void *, u8, u64, bool, bool);
440:	static void __bpf_trace_io_uring_task_run(void *, void *, u8, u64);
295:	static void perf_trace_io_uring_complete(void *, void *, u64, long);
240:	static void perf_trace_io_uring_cqring_wait(void *, void *, int);
24:	static void perf_trace_io_uring_create(void *, int, void *, u32, u32, u32);
175:	static void perf_trace_io_uring_defer(void *, void *, void *, unsigned long long);
268:	static void perf_trace_io_uring_fail_link(void *, void *, void *);
108:	static void perf_trace_io_uring_file_get(void *, void *, int);
208:	static void perf_trace_io_uring_link(void *, void *, void *, void *);
360:	static void perf_trace_io_uring_poll_arm(void *, void *, u8, u64, int, int);
388:	static void perf_trace_io_uring_poll_wake(void *, void *, u8, u64, int);
137:	static void perf_trace_io_uring_queue_async_work(void *, void *, int, void *, struct io_wq_work *, unsigned int);
67:	static void perf_trace_io_uring_register(void *, void *, unsigned int, unsigned int, unsigned int, bool, long);
331:	static void perf_trace_io_uring_submit_sqe(void *, void *, u8, u64, bool, bool);
414:	static void perf_trace_io_uring_task_add(void *, void *, u8, u64, int);
440:	static void perf_trace_io_uring_task_run(void *, void *, u8, u64);
295:	static void trace_event_raw_event_io_uring_complete(void *, void *, u64, long);
240:	static void trace_event_raw_event_io_uring_cqring_wait(void *, void *, int);
24:	static void trace_event_raw_event_io_uring_create(void *, int, void *, u32, u32, u32);
175:	static void trace_event_raw_event_io_uring_defer(void *, void *, void *, unsigned long long);
268:	static void trace_event_raw_event_io_uring_fail_link(void *, void *, void *);
108:	static void trace_event_raw_event_io_uring_file_get(void *, void *, int);
208:	static void trace_event_raw_event_io_uring_link(void *, void *, void *, void *);
360:	static void trace_event_raw_event_io_uring_poll_arm(void *, void *, u8, u64, int, int);
388:	static void trace_event_raw_event_io_uring_poll_wake(void *, void *, u8, u64, int);
137:	static void trace_event_raw_event_io_uring_queue_async_work(void *, void *, int, void *, struct io_wq_work *, unsigned int);
67:	static void trace_event_raw_event_io_uring_register(void *, void *, unsigned int, unsigned int, unsigned int, bool, long);
331:	static void trace_event_raw_event_io_uring_submit_sqe(void *, void *, u8, u64, bool, bool);
414:	static void trace_event_raw_event_io_uring_task_add(void *, void *, u8, u64, int);
440:	static void trace_event_raw_event_io_uring_task_run(void *, void *, u8, u64);
295:	static enum print_line_t trace_raw_output_io_uring_complete(struct trace_iterator *, int, struct trace_event *);
240:	static enum print_line_t trace_raw_output_io_uring_cqring_wait(struct trace_iterator *, int, struct trace_event *);
24:	static enum print_line_t trace_raw_output_io_uring_create(struct trace_iterator *, int, struct trace_event *);
175:	static enum print_line_t trace_raw_output_io_uring_defer(struct trace_iterator *, int, struct trace_event *);
268:	static enum print_line_t trace_raw_output_io_uring_fail_link(struct trace_iterator *, int, struct trace_event *);
108:	static enum print_line_t trace_raw_output_io_uring_file_get(struct trace_iterator *, int, struct trace_event *);
208:	static enum print_line_t trace_raw_output_io_uring_link(struct trace_iterator *, int, struct trace_event *);
360:	static enum print_line_t trace_raw_output_io_uring_poll_arm(struct trace_iterator *, int, struct trace_event *);
388:	static enum print_line_t trace_raw_output_io_uring_poll_wake(struct trace_iterator *, int, struct trace_event *);
137:	static enum print_line_t trace_raw_output_io_uring_queue_async_work(struct trace_iterator *, int, struct trace_event *);
67:	static enum print_line_t trace_raw_output_io_uring_register(struct trace_iterator *, int, struct trace_event *);
331:	static enum print_line_t trace_raw_output_io_uring_submit_sqe(struct trace_iterator *, int, struct trace_event *);
414:	static enum print_line_t trace_raw_output_io_uring_task_add(struct trace_iterator *, int, struct trace_event *);
440:	static enum print_line_t trace_raw_output_io_uring_task_run(struct trace_iterator *, int, struct trace_event *);

File ./include/trace/events/iommu.h:
41:	int __traceiter_add_device_to_group(void *, int, struct device *);
74:	int __traceiter_attach_device_to_domain(void *, struct device *);
177:	int __traceiter_clear_dirty_log(void *, unsigned long, size_t);
81:	int __traceiter_detach_device_from_domain(void *, struct device *);
230:	int __traceiter_dev_fault(void *, struct device *, struct iommu_fault *);
283:	int __traceiter_dev_page_response(void *, struct device *, struct iommu_page_response *);
223:	int __traceiter_io_page_fault(void *, struct device *, unsigned long, int);
88:	int __traceiter_map(void *, unsigned long, phys_addr_t, size_t);
49:	int __traceiter_remove_device_from_group(void *, int, struct device *);
134:	int __traceiter_switch_dirty_log(void *, unsigned long, size_t, bool);
157:	int __traceiter_sync_dirty_log(void *, unsigned long, size_t);
111:	int __traceiter_unmap(void *, unsigned long, size_t, size_t);
230:	static void __bpf_trace_dev_fault(void *, struct device *, struct iommu_fault *);
56:	static void __bpf_trace_iommu_device_event(void *, struct device *);
197:	static void __bpf_trace_iommu_error(void *, struct device *, unsigned long, int);
20:	static void __bpf_trace_iommu_group_event(void *, int, struct device *);
88:	static void __bpf_trace_map(void *, unsigned long, phys_addr_t, size_t);
134:	static void __bpf_trace_switch_dirty_log(void *, unsigned long, size_t, bool);
157:	static void __bpf_trace_sync_dirty_log(void *, unsigned long, size_t);
177:	static void perf_trace_clear_dirty_log(void *, unsigned long, size_t);
230:	static void perf_trace_dev_fault(void *, struct device *, struct iommu_fault *);
283:	static void perf_trace_dev_page_response(void *, struct device *, struct iommu_page_response *);
56:	static void perf_trace_iommu_device_event(void *, struct device *);
197:	static void perf_trace_iommu_error(void *, struct device *, unsigned long, int);
20:	static void perf_trace_iommu_group_event(void *, int, struct device *);
88:	static void perf_trace_map(void *, unsigned long, phys_addr_t, size_t);
134:	static void perf_trace_switch_dirty_log(void *, unsigned long, size_t, bool);
157:	static void perf_trace_sync_dirty_log(void *, unsigned long, size_t);
111:	static void perf_trace_unmap(void *, unsigned long, size_t, size_t);
177:	static void trace_event_raw_event_clear_dirty_log(void *, unsigned long, size_t);
230:	static void trace_event_raw_event_dev_fault(void *, struct device *, struct iommu_fault *);
283:	static void trace_event_raw_event_dev_page_response(void *, struct device *, struct iommu_page_response *);
56:	static void trace_event_raw_event_iommu_device_event(void *, struct device *);
197:	static void trace_event_raw_event_iommu_error(void *, struct device *, unsigned long, int);
20:	static void trace_event_raw_event_iommu_group_event(void *, int, struct device *);
88:	static void trace_event_raw_event_map(void *, unsigned long, phys_addr_t, size_t);
134:	static void trace_event_raw_event_switch_dirty_log(void *, unsigned long, size_t, bool);
157:	static void trace_event_raw_event_sync_dirty_log(void *, unsigned long, size_t);
111:	static void trace_event_raw_event_unmap(void *, unsigned long, size_t, size_t);
177:	static enum print_line_t trace_raw_output_clear_dirty_log(struct trace_iterator *, int, struct trace_event *);
230:	static enum print_line_t trace_raw_output_dev_fault(struct trace_iterator *, int, struct trace_event *);
283:	static enum print_line_t trace_raw_output_dev_page_response(struct trace_iterator *, int, struct trace_event *);
56:	static enum print_line_t trace_raw_output_iommu_device_event(struct trace_iterator *, int, struct trace_event *);
197:	static enum print_line_t trace_raw_output_iommu_error(struct trace_iterator *, int, struct trace_event *);
20:	static enum print_line_t trace_raw_output_iommu_group_event(struct trace_iterator *, int, struct trace_event *);
88:	static enum print_line_t trace_raw_output_map(struct trace_iterator *, int, struct trace_event *);
134:	static enum print_line_t trace_raw_output_switch_dirty_log(struct trace_iterator *, int, struct trace_event *);
157:	static enum print_line_t trace_raw_output_sync_dirty_log(struct trace_iterator *, int, struct trace_event *);
111:	static enum print_line_t trace_raw_output_unmap(struct trace_iterator *, int, struct trace_event *);

File ./include/trace/events/irq.h:
53:	int __traceiter_irq_handler_entry(void *, int, struct irqaction *);
83:	int __traceiter_irq_handler_exit(void *, int, struct irqaction *, int);
128:	int __traceiter_softirq_entry(void *, unsigned int);
142:	int __traceiter_softirq_exit(void *, unsigned int);
156:	int __traceiter_softirq_raise(void *, unsigned int);
53:	static void __bpf_trace_irq_handler_entry(void *, int, struct irqaction *);
83:	static void __bpf_trace_irq_handler_exit(void *, int, struct irqaction *, int);
103:	static void __bpf_trace_softirq(void *, unsigned int);
53:	static void perf_trace_irq_handler_entry(void *, int, struct irqaction *);
83:	static void perf_trace_irq_handler_exit(void *, int, struct irqaction *, int);
103:	static void perf_trace_softirq(void *, unsigned int);
53:	static void trace_event_raw_event_irq_handler_entry(void *, int, struct irqaction *);
83:	static void trace_event_raw_event_irq_handler_exit(void *, int, struct irqaction *, int);
103:	static void trace_event_raw_event_softirq(void *, unsigned int);
53:	static enum print_line_t trace_raw_output_irq_handler_entry(struct trace_iterator *, int, struct trace_event *);
83:	static enum print_line_t trace_raw_output_irq_handler_exit(struct trace_iterator *, int, struct trace_event *);
103:	static enum print_line_t trace_raw_output_softirq(struct trace_iterator *, int, struct trace_event *);

File ./include/trace/events/irq_matrix.h:
181:	int __traceiter_irq_matrix_alloc(void *, int, unsigned int, struct irq_matrix *, struct cpumap *);
165:	int __traceiter_irq_matrix_alloc_managed(void *, int, unsigned int, struct irq_matrix *, struct cpumap *);
141:	int __traceiter_irq_matrix_alloc_reserved(void *, int, unsigned int, struct irq_matrix *, struct cpumap *);
173:	int __traceiter_irq_matrix_assign(void *, int, unsigned int, struct irq_matrix *, struct cpumap *);
134:	int __traceiter_irq_matrix_assign_system(void *, int, struct irq_matrix *);
189:	int __traceiter_irq_matrix_free(void *, int, unsigned int, struct irq_matrix *, struct cpumap *);
113:	int __traceiter_irq_matrix_offline(void *, struct irq_matrix *);
106:	int __traceiter_irq_matrix_online(void *, struct irq_matrix *);
157:	int __traceiter_irq_matrix_remove_managed(void *, int, unsigned int, struct irq_matrix *, struct cpumap *);
127:	int __traceiter_irq_matrix_remove_reserved(void *, struct irq_matrix *);
120:	int __traceiter_irq_matrix_reserve(void *, struct irq_matrix *);
149:	int __traceiter_irq_matrix_reserve_managed(void *, int, unsigned int, struct irq_matrix *, struct cpumap *);
65:	static void __bpf_trace_irq_matrix_cpu(void *, int, unsigned int, struct irq_matrix *, struct cpumap *);
12:	static void __bpf_trace_irq_matrix_global(void *, struct irq_matrix *);
37:	static void __bpf_trace_irq_matrix_global_update(void *, int, struct irq_matrix *);
65:	static void perf_trace_irq_matrix_cpu(void *, int, unsigned int, struct irq_matrix *, struct cpumap *);
12:	static void perf_trace_irq_matrix_global(void *, struct irq_matrix *);
37:	static void perf_trace_irq_matrix_global_update(void *, int, struct irq_matrix *);
65:	static void trace_event_raw_event_irq_matrix_cpu(void *, int, unsigned int, struct irq_matrix *, struct cpumap *);
12:	static void trace_event_raw_event_irq_matrix_global(void *, struct irq_matrix *);
37:	static void trace_event_raw_event_irq_matrix_global_update(void *, int, struct irq_matrix *);
65:	static enum print_line_t trace_raw_output_irq_matrix_cpu(struct trace_iterator *, int, struct trace_event *);
12:	static enum print_line_t trace_raw_output_irq_matrix_global(struct trace_iterator *, int, struct trace_event *);
37:	static enum print_line_t trace_raw_output_irq_matrix_global_update(struct trace_iterator *, int, struct trace_event *);

File ./include/trace/events/kmem.h:
138:	int __traceiter_kfree(void *, unsigned long, const void *);
46:	int __traceiter_kmalloc(void *, unsigned long, const void *, size_t, size_t, gfp_t);
100:	int __traceiter_kmalloc_node(void *, unsigned long, const void *, size_t, size_t, gfp_t, int);
54:	int __traceiter_kmem_cache_alloc(void *, unsigned long, const void *, size_t, size_t, gfp_t);
109:	int __traceiter_kmem_cache_alloc_node(void *, unsigned long, const void *, size_t, size_t, gfp_t, int);
145:	int __traceiter_kmem_cache_free(void *, unsigned long, const void *);
193:	int __traceiter_mm_page_alloc(void *, struct page *, unsigned int, gfp_t, int);
278:	int __traceiter_mm_page_alloc_extfrag(void *, struct page *, int, int, int, int);
248:	int __traceiter_mm_page_alloc_zone_locked(void *, struct page *, unsigned int, int);
152:	int __traceiter_mm_page_free(void *, struct page *, unsigned int);
174:	int __traceiter_mm_page_free_batched(void *, struct page *);
255:	int __traceiter_mm_page_pcpu_drain(void *, struct page *, unsigned int, int);
338:	int __traceiter_rss_stat(void *, struct mm_struct *, int, long);
12:	static void __bpf_trace_kmem_alloc(void *, unsigned long, const void *, size_t, size_t, gfp_t);
62:	static void __bpf_trace_kmem_alloc_node(void *, unsigned long, const void *, size_t, size_t, gfp_t, int);
118:	static void __bpf_trace_kmem_free(void *, unsigned long, const void *);
222:	static void __bpf_trace_mm_page(void *, struct page *, unsigned int, int);
193:	static void __bpf_trace_mm_page_alloc(void *, struct page *, unsigned int, gfp_t, int);
278:	static void __bpf_trace_mm_page_alloc_extfrag(void *, struct page *, int, int, int, int);
152:	static void __bpf_trace_mm_page_free(void *, struct page *, unsigned int);
174:	static void __bpf_trace_mm_page_free_batched(void *, struct page *);
338:	static void __bpf_trace_rss_stat(void *, struct mm_struct *, int, long);
12:	static void perf_trace_kmem_alloc(void *, unsigned long, const void *, size_t, size_t, gfp_t);
62:	static void perf_trace_kmem_alloc_node(void *, unsigned long, const void *, size_t, size_t, gfp_t, int);
118:	static void perf_trace_kmem_free(void *, unsigned long, const void *);
222:	static void perf_trace_mm_page(void *, struct page *, unsigned int, int);
193:	static void perf_trace_mm_page_alloc(void *, struct page *, unsigned int, gfp_t, int);
278:	static void perf_trace_mm_page_alloc_extfrag(void *, struct page *, int, int, int, int);
152:	static void perf_trace_mm_page_free(void *, struct page *, unsigned int);
174:	static void perf_trace_mm_page_free_batched(void *, struct page *);
255:	static void perf_trace_mm_page_pcpu_drain(void *, struct page *, unsigned int, int);
338:	static void perf_trace_rss_stat(void *, struct mm_struct *, int, long);
12:	static void trace_event_raw_event_kmem_alloc(void *, unsigned long, const void *, size_t, size_t, gfp_t);
62:	static void trace_event_raw_event_kmem_alloc_node(void *, unsigned long, const void *, size_t, size_t, gfp_t, int);
118:	static void trace_event_raw_event_kmem_free(void *, unsigned long, const void *);
222:	static void trace_event_raw_event_mm_page(void *, struct page *, unsigned int, int);
193:	static void trace_event_raw_event_mm_page_alloc(void *, struct page *, unsigned int, gfp_t, int);
278:	static void trace_event_raw_event_mm_page_alloc_extfrag(void *, struct page *, int, int, int, int);
152:	static void trace_event_raw_event_mm_page_free(void *, struct page *, unsigned int);
174:	static void trace_event_raw_event_mm_page_free_batched(void *, struct page *);
255:	static void trace_event_raw_event_mm_page_pcpu_drain(void *, struct page *, unsigned int, int);
338:	static void trace_event_raw_event_rss_stat(void *, struct mm_struct *, int, long);
12:	static enum print_line_t trace_raw_output_kmem_alloc(struct trace_iterator *, int, struct trace_event *);
62:	static enum print_line_t trace_raw_output_kmem_alloc_node(struct trace_iterator *, int, struct trace_event *);
118:	static enum print_line_t trace_raw_output_kmem_free(struct trace_iterator *, int, struct trace_event *);
222:	static enum print_line_t trace_raw_output_mm_page(struct trace_iterator *, int, struct trace_event *);
193:	static enum print_line_t trace_raw_output_mm_page_alloc(struct trace_iterator *, int, struct trace_event *);
278:	static enum print_line_t trace_raw_output_mm_page_alloc_extfrag(struct trace_iterator *, int, struct trace_event *);
152:	static enum print_line_t trace_raw_output_mm_page_free(struct trace_iterator *, int, struct trace_event *);
174:	static enum print_line_t trace_raw_output_mm_page_free_batched(struct trace_iterator *, int, struct trace_event *);
255:	static enum print_line_t trace_raw_output_mm_page_pcpu_drain(struct trace_iterator *, int, struct trace_event *);
338:	static enum print_line_t trace_raw_output_rss_stat(struct trace_iterator *, int, struct trace_event *);

File ./include/trace/events/kyber.h:
48:	int __traceiter_kyber_adjust(void *, struct request_queue *, const char *, unsigned int);
14:	int __traceiter_kyber_latency(void *, struct request_queue *, const char *, const char *, unsigned int, unsigned int, unsigned int, unsigned int);
72:	int __traceiter_kyber_throttled(void *, struct request_queue *, const char *);
48:	static void __bpf_trace_kyber_adjust(void *, struct request_queue *, const char *, unsigned int);
14:	static void __bpf_trace_kyber_latency(void *, struct request_queue *, const char *, const char *, unsigned int, unsigned int, unsigned int, unsigned int);
72:	static void __bpf_trace_kyber_throttled(void *, struct request_queue *, const char *);
48:	static void perf_trace_kyber_adjust(void *, struct request_queue *, const char *, unsigned int);
14:	static void perf_trace_kyber_latency(void *, struct request_queue *, const char *, const char *, unsigned int, unsigned int, unsigned int, unsigned int);
72:	static void perf_trace_kyber_throttled(void *, struct request_queue *, const char *);
48:	static void trace_event_raw_event_kyber_adjust(void *, struct request_queue *, const char *, unsigned int);
14:	static void trace_event_raw_event_kyber_latency(void *, struct request_queue *, const char *, const char *, unsigned int, unsigned int, unsigned int, unsigned int);
72:	static void trace_event_raw_event_kyber_throttled(void *, struct request_queue *, const char *);
48:	static enum print_line_t trace_raw_output_kyber_adjust(struct trace_iterator *, int, struct trace_event *);
14:	static enum print_line_t trace_raw_output_kyber_latency(struct trace_iterator *, int, struct trace_event *);
72:	static enum print_line_t trace_raw_output_kyber_throttled(struct trace_iterator *, int, struct trace_event *);

File ./include/trace/events/mce.h:
12:	int __traceiter_mce_record(void *, struct mce *);
12:	static void __bpf_trace_mce_record(void *, struct mce *);
12:	static void perf_trace_mce_record(void *, struct mce *);
12:	static void trace_event_raw_event_mce_record(void *, struct mce *);
12:	static enum print_line_t trace_raw_output_mce_record(struct trace_iterator *, int, struct trace_event *);

File ./include/trace/events/mdio.h:
10:	int __traceiter_mdio_access(void *, struct mii_bus *, char, u8, unsigned int, u16, int);
10:	static void __bpf_trace_mdio_access(void *, struct mii_bus *, char, u8, unsigned int, u16, int);
10:	static void perf_trace_mdio_access(void *, struct mii_bus *, char, u8, unsigned int, u16, int);
10:	static void trace_event_raw_event_mdio_access(void *, struct mii_bus *, char, u8, unsigned int, u16, int);
10:	static enum print_line_t trace_raw_output_mdio_access(struct trace_iterator *, int, struct trace_event *);

File ./include/trace/events/migrate.h:
46:	int __traceiter_mm_migrate_pages(void *, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, enum migrate_mode, int);
46:	static void __bpf_trace_mm_migrate_pages(void *, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, enum migrate_mode, int);
46:	static void perf_trace_mm_migrate_pages(void *, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, enum migrate_mode, int);
46:	static void trace_event_raw_event_mm_migrate_pages(void *, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, enum migrate_mode, int);
46:	static enum print_line_t trace_raw_output_mm_migrate_pages(struct trace_iterator *, int, struct trace_event *);

File ./include/trace/events/mmap.h:
10:	int __traceiter_vm_unmapped_area(void *, unsigned long, struct vm_unmapped_area_info *);
10:	static void __bpf_trace_vm_unmapped_area(void *, unsigned long, struct vm_unmapped_area_info *);
10:	static void perf_trace_vm_unmapped_area(void *, unsigned long, struct vm_unmapped_area_info *);
10:	static void trace_event_raw_event_vm_unmapped_area(void *, unsigned long, struct vm_unmapped_area_info *);
10:	static enum print_line_t trace_raw_output_vm_unmapped_area(struct trace_iterator *, int, struct trace_event *);

File ./include/trace/events/mmap_lock.h:
44:	int __traceiter_mmap_lock_acquire_returned(void *, struct mm_struct *, const char *, bool, bool);
76:	int __traceiter_mmap_lock_released(void *, struct mm_struct *, const char *, bool);
16:	int __traceiter_mmap_lock_start_locking(void *, struct mm_struct *, const char *, bool);
44:	static void __bpf_trace_mmap_lock_acquire_returned(void *, struct mm_struct *, const char *, bool, bool);
16:	static void __bpf_trace_mmap_lock_start_locking(void *, struct mm_struct *, const char *, bool);
44:	static void perf_trace_mmap_lock_acquire_returned(void *, struct mm_struct *, const char *, bool, bool);
76:	static void perf_trace_mmap_lock_released(void *, struct mm_struct *, const char *, bool);
16:	static void perf_trace_mmap_lock_start_locking(void *, struct mm_struct *, const char *, bool);
44:	static void trace_event_raw_event_mmap_lock_acquire_returned(void *, struct mm_struct *, const char *, bool, bool);
76:	static void trace_event_raw_event_mmap_lock_released(void *, struct mm_struct *, const char *, bool);
16:	static void trace_event_raw_event_mmap_lock_start_locking(void *, struct mm_struct *, const char *, bool);
44:	static enum print_line_t trace_raw_output_mmap_lock_acquire_returned(struct trace_iterator *, int, struct trace_event *);
76:	static enum print_line_t trace_raw_output_mmap_lock_released(struct trace_iterator *, int, struct trace_event *);
16:	static enum print_line_t trace_raw_output_mmap_lock_start_locking(struct trace_iterator *, int, struct trace_event *);

File ./include/trace/events/module.h:
50:	int __traceiter_module_free(void *, struct module *);
92:	int __traceiter_module_get(void *, struct module *, unsigned long);
31:	int __traceiter_module_load(void *, struct module *);
99:	int __traceiter_module_put(void *, struct module *, unsigned long);
107:	int __traceiter_module_request(void *, char *, bool, unsigned long);
31:	static void __bpf_trace_module_load(void *, struct module *);
70:	static void __bpf_trace_module_refcnt(void *, struct module *, unsigned long);
107:	static void __bpf_trace_module_request(void *, char *, bool, unsigned long);
50:	static void perf_trace_module_free(void *, struct module *);
31:	static void perf_trace_module_load(void *, struct module *);
70:	static void perf_trace_module_refcnt(void *, struct module *, unsigned long);
107:	static void perf_trace_module_request(void *, char *, bool, unsigned long);
50:	static void trace_event_raw_event_module_free(void *, struct module *);
31:	static void trace_event_raw_event_module_load(void *, struct module *);
70:	static void trace_event_raw_event_module_refcnt(void *, struct module *, unsigned long);
107:	static void trace_event_raw_event_module_request(void *, char *, bool, unsigned long);
50:	static enum print_line_t trace_raw_output_module_free(struct trace_iterator *, int, struct trace_event *);
31:	static enum print_line_t trace_raw_output_module_load(struct trace_iterator *, int, struct trace_event *);
70:	static enum print_line_t trace_raw_output_module_refcnt(struct trace_iterator *, int, struct trace_event *);
107:	static enum print_line_t trace_raw_output_module_request(struct trace_iterator *, int, struct trace_event *);

File ./include/trace/events/napi.h:
14:	int __traceiter_napi_poll(void *, struct napi_struct *, int, int);
14:	static void __bpf_trace_napi_poll(void *, struct napi_struct *, int, int);
14:	static void perf_trace_napi_poll(void *, struct napi_struct *, int, int);
14:	static void trace_event_raw_event_napi_poll(void *, struct napi_struct *, int, int);
14:	static enum print_line_t trace_raw_output_napi_poll(struct trace_iterator *, int, struct trace_event *);

File ./include/trace/events/neigh.h:
247:	int __traceiter_neigh_cleanup_and_release(void *, struct neighbour *, int);
23:	int __traceiter_neigh_create(void *, struct neigh_table *, struct net_device *, const void *, const struct neighbour *, bool);
242:	int __traceiter_neigh_event_send_dead(void *, struct neighbour *, int);
237:	int __traceiter_neigh_event_send_done(void *, struct neighbour *, int);
232:	int __traceiter_neigh_timer_handler(void *, struct neighbour *, int);
72:	int __traceiter_neigh_update(void *, struct neighbour *, const u8 *, u8, u32, u32);
227:	int __traceiter_neigh_update_done(void *, struct neighbour *, int);
23:	static void __bpf_trace_neigh_create(void *, struct neigh_table *, struct net_device *, const void *, const struct neighbour *, bool);
72:	static void __bpf_trace_neigh_update(void *, struct neighbour *, const u8 *, u8, u32, u32);
156:	static void perf_trace_neigh__update(void *, struct neighbour *, int);
23:	static void perf_trace_neigh_create(void *, struct neigh_table *, struct net_device *, const void *, const struct neighbour *, bool);
72:	static void perf_trace_neigh_update(void *, struct neighbour *, const u8 *, u8, u32, u32);
156:	static void trace_event_raw_event_neigh__update(void *, struct neighbour *, int);
23:	static void trace_event_raw_event_neigh_create(void *, struct neigh_table *, struct net_device *, const void *, const struct neighbour *, bool);
72:	static void trace_event_raw_event_neigh_update(void *, struct neighbour *, const u8 *, u8, u32, u32);
156:	static enum print_line_t trace_raw_output_neigh__update(struct trace_iterator *, int, struct trace_event *);
23:	static enum print_line_t trace_raw_output_neigh_create(struct trace_iterator *, int, struct trace_event *);
72:	static enum print_line_t trace_raw_output_neigh_update(struct trace_iterator *, int, struct trace_event *);

File ./include/trace/events/net.h:
228:	int __traceiter_napi_gro_frags_entry(void *, const struct sk_buff *);
287:	int __traceiter_napi_gro_frags_exit(void *, int);
235:	int __traceiter_napi_gro_receive_entry(void *, const struct sk_buff *);
294:	int __traceiter_napi_gro_receive_exit(void *, int);
143:	int __traceiter_net_dev_queue(void *, struct sk_buff *);
14:	int __traceiter_net_dev_start_xmit(void *, const struct sk_buff *, const struct net_device *);
71:	int __traceiter_net_dev_xmit(void *, struct sk_buff *, int, struct net_device *, unsigned int);
98:	int __traceiter_net_dev_xmit_timeout(void *, struct net_device *, int);
150:	int __traceiter_netif_receive_skb(void *, struct sk_buff *);
242:	int __traceiter_netif_receive_skb_entry(void *, const struct sk_buff *);
301:	int __traceiter_netif_receive_skb_exit(void *, int);
249:	int __traceiter_netif_receive_skb_list_entry(void *, const struct sk_buff *);
322:	int __traceiter_netif_receive_skb_list_exit(void *, int);
157:	int __traceiter_netif_rx(void *, struct sk_buff *);
256:	int __traceiter_netif_rx_entry(void *, const struct sk_buff *);
308:	int __traceiter_netif_rx_exit(void *, int);
263:	int __traceiter_netif_rx_ni_entry(void *, const struct sk_buff *);
315:	int __traceiter_netif_rx_ni_exit(void *, int);
270:	static void __bpf_trace_net_dev_rx_exit_template(void *, int);
71:	static void __bpf_trace_net_dev_xmit(void *, struct sk_buff *, int, struct net_device *, unsigned int);
270:	static void perf_trace_net_dev_rx_exit_template(void *, int);
164:	static void perf_trace_net_dev_rx_verbose_template(void *, const struct sk_buff *);
14:	static void perf_trace_net_dev_start_xmit(void *, const struct sk_buff *, const struct net_device *);
121:	static void perf_trace_net_dev_template(void *, struct sk_buff *);
71:	static void perf_trace_net_dev_xmit(void *, struct sk_buff *, int, struct net_device *, unsigned int);
98:	static void perf_trace_net_dev_xmit_timeout(void *, struct net_device *, int);
270:	static void trace_event_raw_event_net_dev_rx_exit_template(void *, int);
164:	static void trace_event_raw_event_net_dev_rx_verbose_template(void *, const struct sk_buff *);
14:	static void trace_event_raw_event_net_dev_start_xmit(void *, const struct sk_buff *, const struct net_device *);
121:	static void trace_event_raw_event_net_dev_template(void *, struct sk_buff *);
71:	static void trace_event_raw_event_net_dev_xmit(void *, struct sk_buff *, int, struct net_device *, unsigned int);
98:	static void trace_event_raw_event_net_dev_xmit_timeout(void *, struct net_device *, int);
270:	static enum print_line_t trace_raw_output_net_dev_rx_exit_template(struct trace_iterator *, int, struct trace_event *);
164:	static enum print_line_t trace_raw_output_net_dev_rx_verbose_template(struct trace_iterator *, int, struct trace_event *);
14:	static enum print_line_t trace_raw_output_net_dev_start_xmit(struct trace_iterator *, int, struct trace_event *);
121:	static enum print_line_t trace_raw_output_net_dev_template(struct trace_iterator *, int, struct trace_event *);
71:	static enum print_line_t trace_raw_output_net_dev_xmit(struct trace_iterator *, int, struct trace_event *);
98:	static enum print_line_t trace_raw_output_net_dev_xmit_timeout(struct trace_iterator *, int, struct trace_event *);

File ./include/trace/events/nmi.h:
11:	int __traceiter_nmi_handler(void *, void *, s64, int);
11:	static void __bpf_trace_nmi_handler(void *, void *, s64, int);
11:	static void perf_trace_nmi_handler(void *, void *, s64, int);
11:	static void trace_event_raw_event_nmi_handler(void *, void *, s64, int);
11:	static enum print_line_t trace_raw_output_nmi_handler(struct trace_iterator *, int, struct trace_event *);

File ./include/trace/events/oom.h:
155:	int __traceiter_compact_retry(void *, int, enum compact_priority, enum compact_result, int, int, bool);
122:	int __traceiter_finish_task_reaping(void *, int);
74:	int __traceiter_mark_victim(void *, int);
10:	int __traceiter_oom_score_adj_update(void *, struct task_struct *);
32:	int __traceiter_reclaim_retry_zone(void *, struct zoneref *, int, unsigned long, unsigned long, unsigned long, int, bool);
138:	int __traceiter_skip_task_reaping(void *, int);
106:	int __traceiter_start_task_reaping(void *, int);
90:	int __traceiter_wake_reaper(void *, int);
155:	static void __bpf_trace_compact_retry(void *, int, enum compact_priority, enum compact_result, int, int, bool);
74:	static void __bpf_trace_mark_victim(void *, int);
10:	static void __bpf_trace_oom_score_adj_update(void *, struct task_struct *);
32:	static void __bpf_trace_reclaim_retry_zone(void *, struct zoneref *, int, unsigned long, unsigned long, unsigned long, int, bool);
155:	static void perf_trace_compact_retry(void *, int, enum compact_priority, enum compact_result, int, int, bool);
122:	static void perf_trace_finish_task_reaping(void *, int);
74:	static void perf_trace_mark_victim(void *, int);
10:	static void perf_trace_oom_score_adj_update(void *, struct task_struct *);
32:	static void perf_trace_reclaim_retry_zone(void *, struct zoneref *, int, unsigned long, unsigned long, unsigned long, int, bool);
138:	static void perf_trace_skip_task_reaping(void *, int);
106:	static void perf_trace_start_task_reaping(void *, int);
90:	static void perf_trace_wake_reaper(void *, int);
155:	static void trace_event_raw_event_compact_retry(void *, int, enum compact_priority, enum compact_result, int, int, bool);
122:	static void trace_event_raw_event_finish_task_reaping(void *, int);
74:	static void trace_event_raw_event_mark_victim(void *, int);
10:	static void trace_event_raw_event_oom_score_adj_update(void *, struct task_struct *);
32:	static void trace_event_raw_event_reclaim_retry_zone(void *, struct zoneref *, int, unsigned long, unsigned long, unsigned long, int, bool);
138:	static void trace_event_raw_event_skip_task_reaping(void *, int);
106:	static void trace_event_raw_event_start_task_reaping(void *, int);
90:	static void trace_event_raw_event_wake_reaper(void *, int);
155:	static enum print_line_t trace_raw_output_compact_retry(struct trace_iterator *, int, struct trace_event *);
122:	static enum print_line_t trace_raw_output_finish_task_reaping(struct trace_iterator *, int, struct trace_event *);
74:	static enum print_line_t trace_raw_output_mark_victim(struct trace_iterator *, int, struct trace_event *);
10:	static enum print_line_t trace_raw_output_oom_score_adj_update(struct trace_iterator *, int, struct trace_event *);
32:	static enum print_line_t trace_raw_output_reclaim_retry_zone(struct trace_iterator *, int, struct trace_event *);
138:	static enum print_line_t trace_raw_output_skip_task_reaping(struct trace_iterator *, int, struct trace_event *);
106:	static enum print_line_t trace_raw_output_start_task_reaping(struct trace_iterator *, int, struct trace_event *);
90:	static enum print_line_t trace_raw_output_wake_reaper(struct trace_iterator *, int, struct trace_event *);

File ./include/trace/events/osnoise.h:
63:	int __traceiter_irq_noise(void *, int, const char *, u64, u64);
92:	int __traceiter_nmi_noise(void *, u64, u64);
114:	int __traceiter_sample_threshold(void *, u64, u64, u64);
37:	int __traceiter_softirq_noise(void *, int, u64, u64);
9:	int __traceiter_thread_noise(void *, struct task_struct *, u64, u64);
63:	static void __bpf_trace_irq_noise(void *, int, const char *, u64, u64);
92:	static void __bpf_trace_nmi_noise(void *, u64, u64);
114:	static void __bpf_trace_sample_threshold(void *, u64, u64, u64);
37:	static void __bpf_trace_softirq_noise(void *, int, u64, u64);
9:	static void __bpf_trace_thread_noise(void *, struct task_struct *, u64, u64);
63:	static void perf_trace_irq_noise(void *, int, const char *, u64, u64);
92:	static void perf_trace_nmi_noise(void *, u64, u64);
114:	static void perf_trace_sample_threshold(void *, u64, u64, u64);
37:	static void perf_trace_softirq_noise(void *, int, u64, u64);
9:	static void perf_trace_thread_noise(void *, struct task_struct *, u64, u64);
63:	static void trace_event_raw_event_irq_noise(void *, int, const char *, u64, u64);
92:	static void trace_event_raw_event_nmi_noise(void *, u64, u64);
114:	static void trace_event_raw_event_sample_threshold(void *, u64, u64, u64);
37:	static void trace_event_raw_event_softirq_noise(void *, int, u64, u64);
9:	static void trace_event_raw_event_thread_noise(void *, struct task_struct *, u64, u64);
63:	static enum print_line_t trace_raw_output_irq_noise(struct trace_iterator *, int, struct trace_event *);
92:	static enum print_line_t trace_raw_output_nmi_noise(struct trace_iterator *, int, struct trace_event *);
114:	static enum print_line_t trace_raw_output_sample_threshold(struct trace_iterator *, int, struct trace_event *);
37:	static enum print_line_t trace_raw_output_softirq_noise(struct trace_iterator *, int, struct trace_event *);
9:	static enum print_line_t trace_raw_output_thread_noise(struct trace_iterator *, int, struct trace_event *);

File ./include/trace/events/page_isolation.h:
10:	int __traceiter_test_pages_isolated(void *, unsigned long, unsigned long, unsigned long);
10:	static void __bpf_trace_test_pages_isolated(void *, unsigned long, unsigned long, unsigned long);
10:	static void perf_trace_test_pages_isolated(void *, unsigned long, unsigned long, unsigned long);
10:	static void trace_event_raw_event_test_pages_isolated(void *, unsigned long, unsigned long, unsigned long);
10:	static enum print_line_t trace_raw_output_test_pages_isolated(struct trace_iterator *, int, struct trace_event *);

File ./include/trace/events/page_pool.h:
14:	int __traceiter_page_pool_release(void *, const struct page_pool *, s32, u32, u32);
67:	int __traceiter_page_pool_state_hold(void *, const struct page_pool *, const struct page *, u32);
42:	int __traceiter_page_pool_state_release(void *, const struct page_pool *, const struct page *, u32);
92:	int __traceiter_page_pool_update_nid(void *, const struct page_pool *, int);
14:	static void __bpf_trace_page_pool_release(void *, const struct page_pool *, s32, u32, u32);
14:	static void perf_trace_page_pool_release(void *, const struct page_pool *, s32, u32, u32);
67:	static void perf_trace_page_pool_state_hold(void *, const struct page_pool *, const struct page *, u32);
42:	static void perf_trace_page_pool_state_release(void *, const struct page_pool *, const struct page *, u32);
92:	static void perf_trace_page_pool_update_nid(void *, const struct page_pool *, int);
14:	static void trace_event_raw_event_page_pool_release(void *, const struct page_pool *, s32, u32, u32);
67:	static void trace_event_raw_event_page_pool_state_hold(void *, const struct page_pool *, const struct page *, u32);
42:	static void trace_event_raw_event_page_pool_state_release(void *, const struct page_pool *, const struct page *, u32);
92:	static void trace_event_raw_event_page_pool_update_nid(void *, const struct page_pool *, int);
14:	static enum print_line_t trace_raw_output_page_pool_release(struct trace_iterator *, int, struct trace_event *);
67:	static enum print_line_t trace_raw_output_page_pool_state_hold(struct trace_iterator *, int, struct trace_event *);
42:	static enum print_line_t trace_raw_output_page_pool_state_release(struct trace_iterator *, int, struct trace_event *);
92:	static enum print_line_t trace_raw_output_page_pool_update_nid(struct trace_iterator *, int, struct trace_event *);

File ./include/trace/events/pagemap.h:
64:	int __traceiter_mm_lru_activate(void *, struct page *);
28:	int __traceiter_mm_lru_insertion(void *, struct page *, int);
64:	static void __bpf_trace_mm_lru_activate(void *, struct page *);
28:	static void __bpf_trace_mm_lru_insertion(void *, struct page *, int);
64:	static void perf_trace_mm_lru_activate(void *, struct page *);
28:	static void perf_trace_mm_lru_insertion(void *, struct page *, int);
64:	static void trace_event_raw_event_mm_lru_activate(void *, struct page *);
28:	static void trace_event_raw_event_mm_lru_insertion(void *, struct page *, int);
64:	static enum print_line_t trace_raw_output_mm_lru_activate(struct trace_iterator *, int, struct trace_event *);
28:	static enum print_line_t trace_raw_output_mm_lru_insertion(struct trace_iterator *, int, struct trace_event *);

File ./include/trace/events/percpu.h:
10:	int __traceiter_percpu_alloc_percpu(void *, bool, bool, size_t, size_t, void *, int, void *);
65:	int __traceiter_percpu_alloc_percpu_fail(void *, bool, bool, size_t, size_t);
90:	int __traceiter_percpu_create_chunk(void *, void *);
107:	int __traceiter_percpu_destroy_chunk(void *, void *);
43:	int __traceiter_percpu_free_percpu(void *, void *, int, void *);
10:	static void __bpf_trace_percpu_alloc_percpu(void *, bool, bool, size_t, size_t, void *, int, void *);
65:	static void __bpf_trace_percpu_alloc_percpu_fail(void *, bool, bool, size_t, size_t);
90:	static void __bpf_trace_percpu_create_chunk(void *, void *);
43:	static void __bpf_trace_percpu_free_percpu(void *, void *, int, void *);
10:	static void perf_trace_percpu_alloc_percpu(void *, bool, bool, size_t, size_t, void *, int, void *);
65:	static void perf_trace_percpu_alloc_percpu_fail(void *, bool, bool, size_t, size_t);
90:	static void perf_trace_percpu_create_chunk(void *, void *);
107:	static void perf_trace_percpu_destroy_chunk(void *, void *);
43:	static void perf_trace_percpu_free_percpu(void *, void *, int, void *);
10:	static void trace_event_raw_event_percpu_alloc_percpu(void *, bool, bool, size_t, size_t, void *, int, void *);
65:	static void trace_event_raw_event_percpu_alloc_percpu_fail(void *, bool, bool, size_t, size_t);
90:	static void trace_event_raw_event_percpu_create_chunk(void *, void *);
107:	static void trace_event_raw_event_percpu_destroy_chunk(void *, void *);
43:	static void trace_event_raw_event_percpu_free_percpu(void *, void *, int, void *);
10:	static enum print_line_t trace_raw_output_percpu_alloc_percpu(struct trace_iterator *, int, struct trace_event *);
65:	static enum print_line_t trace_raw_output_percpu_alloc_percpu_fail(struct trace_iterator *, int, struct trace_event *);
90:	static enum print_line_t trace_raw_output_percpu_create_chunk(struct trace_iterator *, int, struct trace_event *);
107:	static enum print_line_t trace_raw_output_percpu_destroy_chunk(struct trace_iterator *, int, struct trace_event *);
43:	static enum print_line_t trace_raw_output_percpu_free_percpu(struct trace_iterator *, int, struct trace_event *);

File ./include/trace/events/power.h:
315:	int __traceiter_clock_disable(void *, const char *, unsigned int, unsigned int);
308:	int __traceiter_clock_enable(void *, const char *, unsigned int, unsigned int);
322:	int __traceiter_clock_set_rate(void *, const char *, unsigned int, unsigned int);
145:	int __traceiter_cpu_frequency(void *, unsigned int, unsigned int);
152:	int __traceiter_cpu_frequency_limits(void *, struct cpufreq_policy *);
36:	int __traceiter_cpu_idle(void *, unsigned int, unsigned int);
480:	int __traceiter_dev_pm_qos_add_request(void *, const char *, enum dev_pm_qos_req_type, s32);
496:	int __traceiter_dev_pm_qos_remove_request(void *, const char *, enum dev_pm_qos_req_type, s32);
488:	int __traceiter_dev_pm_qos_update_request(void *, const char *, enum dev_pm_qos_req_type, s32);
204:	int __traceiter_device_pm_callback_end(void *, struct device *, int);
176:	int __traceiter_device_pm_callback_start(void *, struct device *, const char *, int);
382:	int __traceiter_pm_qos_add_request(void *, s32);
396:	int __traceiter_pm_qos_remove_request(void *, s32);
439:	int __traceiter_pm_qos_update_flags(void *, enum pm_qos_req_action, int, int);
389:	int __traceiter_pm_qos_update_request(void *, s32);
432:	int __traceiter_pm_qos_update_target(void *, enum pm_qos_req_action, int, int);
354:	int __traceiter_power_domain_target(void *, const char *, unsigned int, unsigned int);
43:	int __traceiter_powernv_throttle(void *, int, const char *, int);
65:	int __traceiter_pstate_sample(void *, u32, u32, u32, u32, u64, u64, u64, u32, u32);
226:	int __traceiter_suspend_resume(void *, const char *, int, bool);
268:	int __traceiter_wakeup_source_activate(void *, const char *, unsigned int);
275:	int __traceiter_wakeup_source_deactivate(void *, const char *, unsigned int);
286:	static void __bpf_trace_clock(void *, const char *, unsigned int, unsigned int);
16:	static void __bpf_trace_cpu(void *, unsigned int, unsigned int);
152:	static void __bpf_trace_cpu_frequency_limits(void *, struct cpufreq_policy *);
364:	static void __bpf_trace_cpu_latency_qos_request(void *, s32);
453:	static void __bpf_trace_dev_pm_qos_request(void *, const char *, enum dev_pm_qos_req_type, s32);
204:	static void __bpf_trace_device_pm_callback_end(void *, struct device *, int);
176:	static void __bpf_trace_device_pm_callback_start(void *, struct device *, const char *, int);
406:	static void __bpf_trace_pm_qos_update(void *, enum pm_qos_req_action, int, int);
43:	static void __bpf_trace_powernv_throttle(void *, int, const char *, int);
65:	static void __bpf_trace_pstate_sample(void *, u32, u32, u32, u32, u64, u64, u64, u32, u32);
226:	static void __bpf_trace_suspend_resume(void *, const char *, int, bool);
248:	static void __bpf_trace_wakeup_source(void *, const char *, unsigned int);
286:	static void perf_trace_clock(void *, const char *, unsigned int, unsigned int);
16:	static void perf_trace_cpu(void *, unsigned int, unsigned int);
152:	static void perf_trace_cpu_frequency_limits(void *, struct cpufreq_policy *);
364:	static void perf_trace_cpu_latency_qos_request(void *, s32);
453:	static void perf_trace_dev_pm_qos_request(void *, const char *, enum dev_pm_qos_req_type, s32);
204:	static void perf_trace_device_pm_callback_end(void *, struct device *, int);
176:	static void perf_trace_device_pm_callback_start(void *, struct device *, const char *, int);
406:	static void perf_trace_pm_qos_update(void *, enum pm_qos_req_action, int, int);
332:	static void perf_trace_power_domain(void *, const char *, unsigned int, unsigned int);
43:	static void perf_trace_powernv_throttle(void *, int, const char *, int);
65:	static void perf_trace_pstate_sample(void *, u32, u32, u32, u32, u64, u64, u64, u32, u32);
226:	static void perf_trace_suspend_resume(void *, const char *, int, bool);
248:	static void perf_trace_wakeup_source(void *, const char *, unsigned int);
286:	static void trace_event_raw_event_clock(void *, const char *, unsigned int, unsigned int);
16:	static void trace_event_raw_event_cpu(void *, unsigned int, unsigned int);
152:	static void trace_event_raw_event_cpu_frequency_limits(void *, struct cpufreq_policy *);
364:	static void trace_event_raw_event_cpu_latency_qos_request(void *, s32);
453:	static void trace_event_raw_event_dev_pm_qos_request(void *, const char *, enum dev_pm_qos_req_type, s32);
204:	static void trace_event_raw_event_device_pm_callback_end(void *, struct device *, int);
176:	static void trace_event_raw_event_device_pm_callback_start(void *, struct device *, const char *, int);
406:	static void trace_event_raw_event_pm_qos_update(void *, enum pm_qos_req_action, int, int);
332:	static void trace_event_raw_event_power_domain(void *, const char *, unsigned int, unsigned int);
43:	static void trace_event_raw_event_powernv_throttle(void *, int, const char *, int);
65:	static void trace_event_raw_event_pstate_sample(void *, u32, u32, u32, u32, u64, u64, u64, u32, u32);
226:	static void trace_event_raw_event_suspend_resume(void *, const char *, int, bool);
248:	static void trace_event_raw_event_wakeup_source(void *, const char *, unsigned int);
286:	static enum print_line_t trace_raw_output_clock(struct trace_iterator *, int, struct trace_event *);
16:	static enum print_line_t trace_raw_output_cpu(struct trace_iterator *, int, struct trace_event *);
152:	static enum print_line_t trace_raw_output_cpu_frequency_limits(struct trace_iterator *, int, struct trace_event *);
364:	static enum print_line_t trace_raw_output_cpu_latency_qos_request(struct trace_iterator *, int, struct trace_event *);
453:	static enum print_line_t trace_raw_output_dev_pm_qos_request(struct trace_iterator *, int, struct trace_event *);
204:	static enum print_line_t trace_raw_output_device_pm_callback_end(struct trace_iterator *, int, struct trace_event *);
176:	static enum print_line_t trace_raw_output_device_pm_callback_start(struct trace_iterator *, int, struct trace_event *);
406:	static enum print_line_t trace_raw_output_pm_qos_update(struct trace_iterator *, int, struct trace_event *);
439:	static enum print_line_t trace_raw_output_pm_qos_update_flags(struct trace_iterator *, int, struct trace_event *);
332:	static enum print_line_t trace_raw_output_power_domain(struct trace_iterator *, int, struct trace_event *);
43:	static enum print_line_t trace_raw_output_powernv_throttle(struct trace_iterator *, int, struct trace_event *);
65:	static enum print_line_t trace_raw_output_pstate_sample(struct trace_iterator *, int, struct trace_event *);
226:	static enum print_line_t trace_raw_output_suspend_resume(struct trace_iterator *, int, struct trace_event *);
248:	static enum print_line_t trace_raw_output_wakeup_source(struct trace_iterator *, int, struct trace_event *);

File ./include/trace/events/printk.h:
10:	int __traceiter_console(void *, const char *, size_t);
10:	static void __bpf_trace_console(void *, const char *, size_t);
10:	static void perf_trace_console(void *, const char *, size_t);
10:	static void trace_event_raw_event_console(void *, const char *, size_t);
10:	static enum print_line_t trace_raw_output_console(struct trace_iterator *, int, struct trace_event *);

File ./include/trace/events/pwm.h:
39:	int __traceiter_pwm_apply(void *, struct pwm_device *, const struct pwm_state *);
47:	int __traceiter_pwm_get(void *, struct pwm_device *, const struct pwm_state *);
11:	static void __bpf_trace_pwm(void *, struct pwm_device *, const struct pwm_state *);
11:	static void perf_trace_pwm(void *, struct pwm_device *, const struct pwm_state *);
11:	static void trace_event_raw_event_pwm(void *, struct pwm_device *, const struct pwm_state *);
11:	static enum print_line_t trace_raw_output_pwm(struct trace_iterator *, int, struct trace_event *);

File ./include/trace/events/qdisc.h:
99:	int __traceiter_qdisc_create(void *, const struct Qdisc_ops *, struct net_device *, u32);
14:	int __traceiter_qdisc_dequeue(void *, struct Qdisc *, const struct netdev_queue *, int, struct sk_buff *);
74:	int __traceiter_qdisc_destroy(void *, struct Qdisc *);
49:	int __traceiter_qdisc_reset(void *, struct Qdisc *);
99:	static void __bpf_trace_qdisc_create(void *, const struct Qdisc_ops *, struct net_device *, u32);
14:	static void __bpf_trace_qdisc_dequeue(void *, struct Qdisc *, const struct netdev_queue *, int, struct sk_buff *);
99:	static void perf_trace_qdisc_create(void *, const struct Qdisc_ops *, struct net_device *, u32);
14:	static void perf_trace_qdisc_dequeue(void *, struct Qdisc *, const struct netdev_queue *, int, struct sk_buff *);
74:	static void perf_trace_qdisc_destroy(void *, struct Qdisc *);
49:	static void perf_trace_qdisc_reset(void *, struct Qdisc *);
99:	static void trace_event_raw_event_qdisc_create(void *, const struct Qdisc_ops *, struct net_device *, u32);
14:	static void trace_event_raw_event_qdisc_dequeue(void *, struct Qdisc *, const struct netdev_queue *, int, struct sk_buff *);
74:	static void trace_event_raw_event_qdisc_destroy(void *, struct Qdisc *);
49:	static void trace_event_raw_event_qdisc_reset(void *, struct Qdisc *);
99:	static enum print_line_t trace_raw_output_qdisc_create(struct trace_iterator *, int, struct trace_event *);
14:	static enum print_line_t trace_raw_output_qdisc_dequeue(struct trace_iterator *, int, struct trace_event *);
74:	static enum print_line_t trace_raw_output_qdisc_destroy(struct trace_iterator *, int, struct trace_event *);
49:	static enum print_line_t trace_raw_output_qdisc_reset(struct trace_iterator *, int, struct trace_event *);

File ./include/trace/events/random.h:
11:	int __traceiter_add_device_randomness(void *, int, unsigned long);
145:	int __traceiter_add_disk_randomness(void *, dev_t, int);
129:	int __traceiter_add_input_randomness(void *, int);
63:	int __traceiter_credit_entropy_bits(void *, const char *, int, int, unsigned long);
110:	int __traceiter_debit_entropy(void *, const char *, int);
249:	int __traceiter_extract_entropy(void *, const char *, int, int, unsigned long);
256:	int __traceiter_extract_entropy_user(void *, const char *, int, int, unsigned long);
211:	int __traceiter_get_random_bytes(void *, int, unsigned long);
217:	int __traceiter_get_random_bytes_arch(void *, int, unsigned long);
51:	int __traceiter_mix_pool_bytes(void *, const char *, int, unsigned long);
57:	int __traceiter_mix_pool_bytes_nolock(void *, const char *, int, unsigned long);
310:	int __traceiter_prandom_u32(void *, unsigned int);
88:	int __traceiter_push_to_pool(void *, const char *, int, int);
263:	int __traceiter_random_read(void *, int, int, int, int);
288:	int __traceiter_urandom_read(void *, int, int, int);
164:	int __traceiter_xfer_secondary_pool(void *, const char *, int, int, int, int);
11:	static void __bpf_trace_add_device_randomness(void *, int, unsigned long);
145:	static void __bpf_trace_add_disk_randomness(void *, dev_t, int);
129:	static void __bpf_trace_add_input_randomness(void *, int);
63:	static void __bpf_trace_credit_entropy_bits(void *, const char *, int, int, unsigned long);
110:	static void __bpf_trace_debit_entropy(void *, const char *, int);
310:	static void __bpf_trace_prandom_u32(void *, unsigned int);
88:	static void __bpf_trace_push_to_pool(void *, const char *, int, int);
30:	static void __bpf_trace_random__mix_pool_bytes(void *, const char *, int, unsigned long);
263:	static void __bpf_trace_random_read(void *, int, int, int, int);
288:	static void __bpf_trace_urandom_read(void *, int, int, int);
164:	static void __bpf_trace_xfer_secondary_pool(void *, const char *, int, int, int, int);
11:	static void perf_trace_add_device_randomness(void *, int, unsigned long);
145:	static void perf_trace_add_disk_randomness(void *, dev_t, int);
129:	static void perf_trace_add_input_randomness(void *, int);
63:	static void perf_trace_credit_entropy_bits(void *, const char *, int, int, unsigned long);
110:	static void perf_trace_debit_entropy(void *, const char *, int);
310:	static void perf_trace_prandom_u32(void *, unsigned int);
88:	static void perf_trace_push_to_pool(void *, const char *, int, int);
223:	static void perf_trace_random__extract_entropy(void *, const char *, int, int, unsigned long);
193:	static void perf_trace_random__get_random_bytes(void *, int, unsigned long);
30:	static void perf_trace_random__mix_pool_bytes(void *, const char *, int, unsigned long);
263:	static void perf_trace_random_read(void *, int, int, int, int);
288:	static void perf_trace_urandom_read(void *, int, int, int);
164:	static void perf_trace_xfer_secondary_pool(void *, const char *, int, int, int, int);
11:	static void trace_event_raw_event_add_device_randomness(void *, int, unsigned long);
145:	static void trace_event_raw_event_add_disk_randomness(void *, dev_t, int);
129:	static void trace_event_raw_event_add_input_randomness(void *, int);
63:	static void trace_event_raw_event_credit_entropy_bits(void *, const char *, int, int, unsigned long);
110:	static void trace_event_raw_event_debit_entropy(void *, const char *, int);
310:	static void trace_event_raw_event_prandom_u32(void *, unsigned int);
88:	static void trace_event_raw_event_push_to_pool(void *, const char *, int, int);
223:	static void trace_event_raw_event_random__extract_entropy(void *, const char *, int, int, unsigned long);
193:	static void trace_event_raw_event_random__get_random_bytes(void *, int, unsigned long);
30:	static void trace_event_raw_event_random__mix_pool_bytes(void *, const char *, int, unsigned long);
263:	static void trace_event_raw_event_random_read(void *, int, int, int, int);
288:	static void trace_event_raw_event_urandom_read(void *, int, int, int);
164:	static void trace_event_raw_event_xfer_secondary_pool(void *, const char *, int, int, int, int);
11:	static enum print_line_t trace_raw_output_add_device_randomness(struct trace_iterator *, int, struct trace_event *);
145:	static enum print_line_t trace_raw_output_add_disk_randomness(struct trace_iterator *, int, struct trace_event *);
129:	static enum print_line_t trace_raw_output_add_input_randomness(struct trace_iterator *, int, struct trace_event *);
63:	static enum print_line_t trace_raw_output_credit_entropy_bits(struct trace_iterator *, int, struct trace_event *);
110:	static enum print_line_t trace_raw_output_debit_entropy(struct trace_iterator *, int, struct trace_event *);
310:	static enum print_line_t trace_raw_output_prandom_u32(struct trace_iterator *, int, struct trace_event *);
88:	static enum print_line_t trace_raw_output_push_to_pool(struct trace_iterator *, int, struct trace_event *);
223:	static enum print_line_t trace_raw_output_random__extract_entropy(struct trace_iterator *, int, struct trace_event *);
193:	static enum print_line_t trace_raw_output_random__get_random_bytes(struct trace_iterator *, int, struct trace_event *);
30:	static enum print_line_t trace_raw_output_random__mix_pool_bytes(struct trace_iterator *, int, struct trace_event *);
263:	static enum print_line_t trace_raw_output_random_read(struct trace_iterator *, int, struct trace_event *);
288:	static enum print_line_t trace_raw_output_urandom_read(struct trace_iterator *, int, struct trace_event *);
164:	static enum print_line_t trace_raw_output_xfer_secondary_pool(struct trace_iterator *, int, struct trace_event *);

File ./include/trace/events/rcu.h:
27:	int __traceiter_rcu_utilization(void *, const char *);
27:	static void __bpf_trace_rcu_utilization(void *, const char *);
27:	static void perf_trace_rcu_utilization(void *, const char *);
27:	static void trace_event_raw_event_rcu_utilization(void *, const char *);
27:	static enum print_line_t trace_raw_output_rcu_utilization(struct trace_iterator *, int, struct trace_event *);

File ./include/trace/events/rpm.h:
71:	int __traceiter_rpm_idle(void *, struct device *, int);
65:	int __traceiter_rpm_resume(void *, struct device *, int);
84:	int __traceiter_rpm_return_int(void *, struct device *, unsigned long, int);
59:	int __traceiter_rpm_suspend(void *, struct device *, int);
77:	int __traceiter_rpm_usage(void *, struct device *, int);
18:	static void __bpf_trace_rpm_internal(void *, struct device *, int);
84:	static void __bpf_trace_rpm_return_int(void *, struct device *, unsigned long, int);
18:	static void perf_trace_rpm_internal(void *, struct device *, int);
84:	static void perf_trace_rpm_return_int(void *, struct device *, unsigned long, int);
18:	static void trace_event_raw_event_rpm_internal(void *, struct device *, int);
84:	static void trace_event_raw_event_rpm_return_int(void *, struct device *, unsigned long, int);
18:	static enum print_line_t trace_raw_output_rpm_internal(struct trace_iterator *, int, struct trace_event *);
84:	static enum print_line_t trace_raw_output_rpm_return_int(struct trace_iterator *, int, struct trace_event *);

File ./include/trace/events/rseq.h:
28:	int __traceiter_rseq_ip_fixup(void *, unsigned long, unsigned long, unsigned long, unsigned long);
11:	int __traceiter_rseq_update(void *, struct task_struct *);
28:	static void __bpf_trace_rseq_ip_fixup(void *, unsigned long, unsigned long, unsigned long, unsigned long);
11:	static void __bpf_trace_rseq_update(void *, struct task_struct *);
28:	static void perf_trace_rseq_ip_fixup(void *, unsigned long, unsigned long, unsigned long, unsigned long);
11:	static void perf_trace_rseq_update(void *, struct task_struct *);
28:	static void trace_event_raw_event_rseq_ip_fixup(void *, unsigned long, unsigned long, unsigned long, unsigned long);
11:	static void trace_event_raw_event_rseq_update(void *, struct task_struct *);
28:	static enum print_line_t trace_raw_output_rseq_ip_fixup(struct trace_iterator *, int, struct trace_event *);
11:	static enum print_line_t trace_raw_output_rseq_update(struct trace_iterator *, int, struct trace_event *);

File ./include/trace/events/rtc.h:
102:	int __traceiter_rtc_alarm_irq_enable(void *, unsigned int, int);
59:	int __traceiter_rtc_irq_set_freq(void *, int, int);
80:	int __traceiter_rtc_irq_set_state(void *, int, int);
52:	int __traceiter_rtc_read_alarm(void *, time64_t, int);
152:	int __traceiter_rtc_read_offset(void *, long, int);
38:	int __traceiter_rtc_read_time(void *, time64_t, int);
45:	int __traceiter_rtc_set_alarm(void *, time64_t, int);
145:	int __traceiter_rtc_set_offset(void *, long, int);
31:	int __traceiter_rtc_set_time(void *, time64_t, int);
189:	int __traceiter_rtc_timer_dequeue(void *, struct rtc_timer *);
182:	int __traceiter_rtc_timer_enqueue(void *, struct rtc_timer *);
196:	int __traceiter_rtc_timer_fired(void *, struct rtc_timer *);
102:	static void __bpf_trace_rtc_alarm_irq_enable(void *, unsigned int, int);
59:	static void __bpf_trace_rtc_irq_set_freq(void *, int, int);
10:	static void __bpf_trace_rtc_time_alarm_class(void *, time64_t, int);
159:	static void __bpf_trace_rtc_timer_class(void *, struct rtc_timer *);
102:	static void perf_trace_rtc_alarm_irq_enable(void *, unsigned int, int);
59:	static void perf_trace_rtc_irq_set_freq(void *, int, int);
80:	static void perf_trace_rtc_irq_set_state(void *, int, int);
124:	static void perf_trace_rtc_offset_class(void *, long, int);
10:	static void perf_trace_rtc_time_alarm_class(void *, time64_t, int);
159:	static void perf_trace_rtc_timer_class(void *, struct rtc_timer *);
102:	static void trace_event_raw_event_rtc_alarm_irq_enable(void *, unsigned int, int);
59:	static void trace_event_raw_event_rtc_irq_set_freq(void *, int, int);
80:	static void trace_event_raw_event_rtc_irq_set_state(void *, int, int);
124:	static void trace_event_raw_event_rtc_offset_class(void *, long, int);
10:	static void trace_event_raw_event_rtc_time_alarm_class(void *, time64_t, int);
159:	static void trace_event_raw_event_rtc_timer_class(void *, struct rtc_timer *);
102:	static enum print_line_t trace_raw_output_rtc_alarm_irq_enable(struct trace_iterator *, int, struct trace_event *);
59:	static enum print_line_t trace_raw_output_rtc_irq_set_freq(struct trace_iterator *, int, struct trace_event *);
80:	static enum print_line_t trace_raw_output_rtc_irq_set_state(struct trace_iterator *, int, struct trace_event *);
124:	static enum print_line_t trace_raw_output_rtc_offset_class(struct trace_iterator *, int, struct trace_event *);
10:	static enum print_line_t trace_raw_output_rtc_time_alarm_class(struct trace_iterator *, int, struct trace_event *);
159:	static enum print_line_t trace_raw_output_rtc_timer_class(struct trace_iterator *, int, struct trace_event *);

File ./include/trace/events/sched.h:
609:	int __traceiter_pelt_cfs_tp(void *, struct cfs_rq *);
617:	int __traceiter_pelt_dl_tp(void *, struct rq *);
625:	int __traceiter_pelt_irq_tp(void *, struct rq *);
613:	int __traceiter_pelt_rt_tp(void *, struct rq *);
629:	int __traceiter_pelt_se_tp(void *, struct sched_entity *);
621:	int __traceiter_pelt_thermal_tp(void *, struct rq *);
633:	int __traceiter_sched_cpu_capacity_tp(void *, struct rq *);
15:	int __traceiter_sched_kthread_stop(void *, struct task_struct *);
37:	int __traceiter_sched_kthread_stop_ret(void *, int);
189:	int __traceiter_sched_migrate_task(void *, struct task_struct *, int);
494:	int __traceiter_sched_move_numa(void *, struct task_struct *, int, int);
637:	int __traceiter_sched_overutilized_tp(void *, struct root_domain *, bool);
443:	int __traceiter_sched_pi_setprio(void *, struct task_struct *, struct task_struct *);
315:	int __traceiter_sched_process_exec(void *, struct task_struct *, pid_t, struct linux_binprm *);
248:	int __traceiter_sched_process_exit(void *, struct task_struct *);
287:	int __traceiter_sched_process_fork(void *, struct task_struct *, struct task_struct *);
241:	int __traceiter_sched_process_free(void *, struct task_struct *);
472:	int __traceiter_sched_process_hang(void *, struct task_struct *);
262:	int __traceiter_sched_process_wait(void *, struct pid *);
401:	int __traceiter_sched_stat_blocked(void *, struct task_struct *, u64);
394:	int __traceiter_sched_stat_iowait(void *, struct task_struct *, u64);
435:	int __traceiter_sched_stat_runtime(void *, struct task_struct *, u64, u64);
386:	int __traceiter_sched_stat_sleep(void *, struct task_struct *, u64);
378:	int __traceiter_sched_stat_wait(void *, struct task_struct *, u64);
566:	int __traceiter_sched_stick_numa(void *, struct task_struct *, int, struct task_struct *, int);
574:	int __traceiter_sched_swap_numa(void *, struct task_struct *, int, struct task_struct *, int);
138:	int __traceiter_sched_switch(void *, bool, struct task_struct *, struct task_struct *);
649:	int __traceiter_sched_update_nr_running_tp(void *, struct rq *, int);
641:	int __traceiter_sched_util_est_cfs_tp(void *, struct cfs_rq *);
645:	int __traceiter_sched_util_est_se_tp(void *, struct sched_entity *);
255:	int __traceiter_sched_wait_task(void *, struct task_struct *);
586:	int __traceiter_sched_wake_idle_without_ipi(void *, int);
96:	int __traceiter_sched_wakeup(void *, struct task_struct *);
103:	int __traceiter_sched_wakeup_new(void *, struct task_struct *);
88:	int __traceiter_sched_waking(void *, struct task_struct *);
15:	static void __bpf_trace_sched_kthread_stop(void *, struct task_struct *);
37:	static void __bpf_trace_sched_kthread_stop_ret(void *, int);
189:	static void __bpf_trace_sched_migrate_task(void *, struct task_struct *, int);
494:	static void __bpf_trace_sched_move_numa(void *, struct task_struct *, int, int);
526:	static void __bpf_trace_sched_numa_pair_template(void *, struct task_struct *, int, struct task_struct *, int);
315:	static void __bpf_trace_sched_process_exec(void *, struct task_struct *, pid_t, struct linux_binprm *);
287:	static void __bpf_trace_sched_process_fork(void *, struct task_struct *, struct task_struct *);
409:	static void __bpf_trace_sched_stat_runtime(void *, struct task_struct *, u64, u64);
351:	static void __bpf_trace_sched_stat_template(void *, struct task_struct *, u64);
138:	static void __bpf_trace_sched_switch(void *, bool, struct task_struct *, struct task_struct *);
15:	static void perf_trace_sched_kthread_stop(void *, struct task_struct *);
37:	static void perf_trace_sched_kthread_stop_ret(void *, int);
189:	static void perf_trace_sched_migrate_task(void *, struct task_struct *, int);
494:	static void perf_trace_sched_move_numa(void *, struct task_struct *, int, int);
526:	static void perf_trace_sched_numa_pair_template(void *, struct task_struct *, int, struct task_struct *, int);
443:	static void perf_trace_sched_pi_setprio(void *, struct task_struct *, struct task_struct *);
315:	static void perf_trace_sched_process_exec(void *, struct task_struct *, pid_t, struct linux_binprm *);
287:	static void perf_trace_sched_process_fork(void *, struct task_struct *, struct task_struct *);
472:	static void perf_trace_sched_process_hang(void *, struct task_struct *);
216:	static void perf_trace_sched_process_template(void *, struct task_struct *);
262:	static void perf_trace_sched_process_wait(void *, struct pid *);
409:	static void perf_trace_sched_stat_runtime(void *, struct task_struct *, u64, u64);
351:	static void perf_trace_sched_stat_template(void *, struct task_struct *, u64);
138:	static void perf_trace_sched_switch(void *, bool, struct task_struct *, struct task_struct *);
586:	static void perf_trace_sched_wake_idle_without_ipi(void *, int);
57:	static void perf_trace_sched_wakeup_template(void *, struct task_struct *);
15:	static void trace_event_raw_event_sched_kthread_stop(void *, struct task_struct *);
37:	static void trace_event_raw_event_sched_kthread_stop_ret(void *, int);
189:	static void trace_event_raw_event_sched_migrate_task(void *, struct task_struct *, int);
494:	static void trace_event_raw_event_sched_move_numa(void *, struct task_struct *, int, int);
526:	static void trace_event_raw_event_sched_numa_pair_template(void *, struct task_struct *, int, struct task_struct *, int);
443:	static void trace_event_raw_event_sched_pi_setprio(void *, struct task_struct *, struct task_struct *);
315:	static void trace_event_raw_event_sched_process_exec(void *, struct task_struct *, pid_t, struct linux_binprm *);
287:	static void trace_event_raw_event_sched_process_fork(void *, struct task_struct *, struct task_struct *);
472:	static void trace_event_raw_event_sched_process_hang(void *, struct task_struct *);
216:	static void trace_event_raw_event_sched_process_template(void *, struct task_struct *);
262:	static void trace_event_raw_event_sched_process_wait(void *, struct pid *);
409:	static void trace_event_raw_event_sched_stat_runtime(void *, struct task_struct *, u64, u64);
351:	static void trace_event_raw_event_sched_stat_template(void *, struct task_struct *, u64);
138:	static void trace_event_raw_event_sched_switch(void *, bool, struct task_struct *, struct task_struct *);
586:	static void trace_event_raw_event_sched_wake_idle_without_ipi(void *, int);
57:	static void trace_event_raw_event_sched_wakeup_template(void *, struct task_struct *);
15:	static enum print_line_t trace_raw_output_sched_kthread_stop(struct trace_iterator *, int, struct trace_event *);
37:	static enum print_line_t trace_raw_output_sched_kthread_stop_ret(struct trace_iterator *, int, struct trace_event *);
189:	static enum print_line_t trace_raw_output_sched_migrate_task(struct trace_iterator *, int, struct trace_event *);
494:	static enum print_line_t trace_raw_output_sched_move_numa(struct trace_iterator *, int, struct trace_event *);
526:	static enum print_line_t trace_raw_output_sched_numa_pair_template(struct trace_iterator *, int, struct trace_event *);
443:	static enum print_line_t trace_raw_output_sched_pi_setprio(struct trace_iterator *, int, struct trace_event *);
315:	static enum print_line_t trace_raw_output_sched_process_exec(struct trace_iterator *, int, struct trace_event *);
287:	static enum print_line_t trace_raw_output_sched_process_fork(struct trace_iterator *, int, struct trace_event *);
472:	static enum print_line_t trace_raw_output_sched_process_hang(struct trace_iterator *, int, struct trace_event *);
216:	static enum print_line_t trace_raw_output_sched_process_template(struct trace_iterator *, int, struct trace_event *);
262:	static enum print_line_t trace_raw_output_sched_process_wait(struct trace_iterator *, int, struct trace_event *);
409:	static enum print_line_t trace_raw_output_sched_stat_runtime(struct trace_iterator *, int, struct trace_event *);
351:	static enum print_line_t trace_raw_output_sched_stat_template(struct trace_iterator *, int, struct trace_event *);
138:	static enum print_line_t trace_raw_output_sched_switch(struct trace_iterator *, int, struct trace_event *);
586:	static enum print_line_t trace_raw_output_sched_wake_idle_without_ipi(struct trace_iterator *, int, struct trace_event *);
57:	static enum print_line_t trace_raw_output_sched_wakeup_template(struct trace_iterator *, int, struct trace_event *);

File ./include/trace/events/scsi.h:
336:	int __traceiter_scsi_dispatch_cmd_done(void *, struct scsi_cmnd *);
242:	int __traceiter_scsi_dispatch_cmd_error(void *, struct scsi_cmnd *, int);
200:	int __traceiter_scsi_dispatch_cmd_start(void *, struct scsi_cmnd *);
340:	int __traceiter_scsi_dispatch_cmd_timeout(void *, struct scsi_cmnd *);
344:	int __traceiter_scsi_eh_wakeup(void *, struct Scsi_Host *);
242:	static void __bpf_trace_scsi_dispatch_cmd_error(void *, struct scsi_cmnd *, int);
200:	static void __bpf_trace_scsi_dispatch_cmd_start(void *, struct scsi_cmnd *);
287:	static void perf_trace_scsi_cmd_done_timeout_template(void *, struct scsi_cmnd *);
242:	static void perf_trace_scsi_dispatch_cmd_error(void *, struct scsi_cmnd *, int);
200:	static void perf_trace_scsi_dispatch_cmd_start(void *, struct scsi_cmnd *);
344:	static void perf_trace_scsi_eh_wakeup(void *, struct Scsi_Host *);
287:	static void trace_event_raw_event_scsi_cmd_done_timeout_template(void *, struct scsi_cmnd *);
242:	static void trace_event_raw_event_scsi_dispatch_cmd_error(void *, struct scsi_cmnd *, int);
200:	static void trace_event_raw_event_scsi_dispatch_cmd_start(void *, struct scsi_cmnd *);
344:	static void trace_event_raw_event_scsi_eh_wakeup(void *, struct Scsi_Host *);
287:	static enum print_line_t trace_raw_output_scsi_cmd_done_timeout_template(struct trace_iterator *, int, struct trace_event *);
242:	static enum print_line_t trace_raw_output_scsi_dispatch_cmd_error(struct trace_iterator *, int, struct trace_event *);
200:	static enum print_line_t trace_raw_output_scsi_dispatch_cmd_start(struct trace_iterator *, int, struct trace_event *);
344:	static enum print_line_t trace_raw_output_scsi_eh_wakeup(struct trace_iterator *, int, struct trace_event *);

File ./include/trace/events/signal.h:
96:	int __traceiter_signal_deliver(void *, int, struct kernel_siginfo *, struct k_sigaction *);
50:	int __traceiter_signal_generate(void *, int, struct kernel_siginfo *, struct task_struct *, int, int);
96:	static void __bpf_trace_signal_deliver(void *, int, struct kernel_siginfo *, struct k_sigaction *);
50:	static void __bpf_trace_signal_generate(void *, int, struct kernel_siginfo *, struct task_struct *, int, int);
96:	static void perf_trace_signal_deliver(void *, int, struct kernel_siginfo *, struct k_sigaction *);
50:	static void perf_trace_signal_generate(void *, int, struct kernel_siginfo *, struct task_struct *, int, int);
96:	static void trace_event_raw_event_signal_deliver(void *, int, struct kernel_siginfo *, struct k_sigaction *);
50:	static void trace_event_raw_event_signal_generate(void *, int, struct kernel_siginfo *, struct task_struct *, int, int);
96:	static enum print_line_t trace_raw_output_signal_deliver(struct trace_iterator *, int, struct trace_event *);
50:	static enum print_line_t trace_raw_output_signal_generate(struct trace_iterator *, int, struct trace_event *);

File ./include/trace/events/skb.h:
37:	int __traceiter_consume_skb(void *, struct sk_buff *);
15:	int __traceiter_kfree_skb(void *, struct sk_buff *, void *);
54:	int __traceiter_skb_copy_datagram_iovec(void *, const struct sk_buff *, int);
37:	static void __bpf_trace_consume_skb(void *, struct sk_buff *);
15:	static void __bpf_trace_kfree_skb(void *, struct sk_buff *, void *);
54:	static void __bpf_trace_skb_copy_datagram_iovec(void *, const struct sk_buff *, int);
37:	static void perf_trace_consume_skb(void *, struct sk_buff *);
15:	static void perf_trace_kfree_skb(void *, struct sk_buff *, void *);
54:	static void perf_trace_skb_copy_datagram_iovec(void *, const struct sk_buff *, int);
37:	static void trace_event_raw_event_consume_skb(void *, struct sk_buff *);
15:	static void trace_event_raw_event_kfree_skb(void *, struct sk_buff *, void *);
54:	static void trace_event_raw_event_skb_copy_datagram_iovec(void *, const struct sk_buff *, int);
37:	static enum print_line_t trace_raw_output_consume_skb(struct trace_iterator *, int, struct trace_event *);
15:	static enum print_line_t trace_raw_output_kfree_skb(struct trace_iterator *, int, struct trace_event *);
54:	static enum print_line_t trace_raw_output_skb_copy_datagram_iovec(struct trace_iterator *, int, struct trace_event *);

File ./include/trace/events/smbus.h:
91:	int __traceiter_smbus_read(void *, const struct i2c_adapter *, u16, unsigned short, char, u8, int);
133:	int __traceiter_smbus_reply(void *, const struct i2c_adapter *, u16, unsigned short, char, u8, int, const union i2c_smbus_data *, int);
199:	int __traceiter_smbus_result(void *, const struct i2c_adapter *, u16, unsigned short, char, u8, int, int);
23:	int __traceiter_smbus_write(void *, const struct i2c_adapter *, u16, unsigned short, char, u8, int, const union i2c_smbus_data *);
91:	static void __bpf_trace_smbus_read(void *, const struct i2c_adapter *, u16, unsigned short, char, u8, int);
133:	static void __bpf_trace_smbus_reply(void *, const struct i2c_adapter *, u16, unsigned short, char, u8, int, const union i2c_smbus_data *, int);
199:	static void __bpf_trace_smbus_result(void *, const struct i2c_adapter *, u16, unsigned short, char, u8, int, int);
23:	static void __bpf_trace_smbus_write(void *, const struct i2c_adapter *, u16, unsigned short, char, u8, int, const union i2c_smbus_data *);
91:	static void perf_trace_smbus_read(void *, const struct i2c_adapter *, u16, unsigned short, char, u8, int);
133:	static void perf_trace_smbus_reply(void *, const struct i2c_adapter *, u16, unsigned short, char, u8, int, const union i2c_smbus_data *, int);
199:	static void perf_trace_smbus_result(void *, const struct i2c_adapter *, u16, unsigned short, char, u8, int, int);
23:	static void perf_trace_smbus_write(void *, const struct i2c_adapter *, u16, unsigned short, char, u8, int, const union i2c_smbus_data *);
91:	static void trace_event_raw_event_smbus_read(void *, const struct i2c_adapter *, u16, unsigned short, char, u8, int);
133:	static void trace_event_raw_event_smbus_reply(void *, const struct i2c_adapter *, u16, unsigned short, char, u8, int, const union i2c_smbus_data *, int);
199:	static void trace_event_raw_event_smbus_result(void *, const struct i2c_adapter *, u16, unsigned short, char, u8, int, int);
23:	static void trace_event_raw_event_smbus_write(void *, const struct i2c_adapter *, u16, unsigned short, char, u8, int, const union i2c_smbus_data *);
91:	static enum print_line_t trace_raw_output_smbus_read(struct trace_iterator *, int, struct trace_event *);
133:	static enum print_line_t trace_raw_output_smbus_reply(struct trace_iterator *, int, struct trace_event *);
199:	static enum print_line_t trace_raw_output_smbus_result(struct trace_iterator *, int, struct trace_event *);
23:	static enum print_line_t trace_raw_output_smbus_write(struct trace_iterator *, int, struct trace_event *);

File ./include/trace/events/smmu.h:
29:	int __traceiter_smmu_bind_alloc(void *, struct device *, unsigned int);
33:	int __traceiter_smmu_bind_get(void *, struct device *, unsigned int);
53:	int __traceiter_smmu_mm_invalidate(void *, unsigned int, unsigned long, unsigned long);
45:	int __traceiter_smmu_mm_release(void *, unsigned int);
80:	int __traceiter_smmu_mn_alloc(void *, unsigned int);
81:	int __traceiter_smmu_mn_free(void *, unsigned int);
82:	int __traceiter_smmu_mn_get(void *, unsigned int);
83:	int __traceiter_smmu_mn_put(void *, unsigned int);
41:	int __traceiter_smmu_unbind_free(void *, struct device *, unsigned int);
37:	int __traceiter_smmu_unbind_put(void *, struct device *, unsigned int);
15:	static void __bpf_trace_smmu_bond(void *, struct device *, unsigned int);
53:	static void __bpf_trace_smmu_mm_invalidate(void *, unsigned int, unsigned long, unsigned long);
45:	static void __bpf_trace_smmu_mm_release(void *, unsigned int);
15:	static void perf_trace_smmu_bond(void *, struct device *, unsigned int);
53:	static void perf_trace_smmu_mm_invalidate(void *, unsigned int, unsigned long, unsigned long);
45:	static void perf_trace_smmu_mm_release(void *, unsigned int);
72:	static void perf_trace_smmu_mn(void *, unsigned int);
15:	static void trace_event_raw_event_smmu_bond(void *, struct device *, unsigned int);
53:	static void trace_event_raw_event_smmu_mm_invalidate(void *, unsigned int, unsigned long, unsigned long);
45:	static void trace_event_raw_event_smmu_mm_release(void *, unsigned int);
72:	static void trace_event_raw_event_smmu_mn(void *, unsigned int);
15:	static enum print_line_t trace_raw_output_smmu_bond(struct trace_iterator *, int, struct trace_event *);
53:	static enum print_line_t trace_raw_output_smmu_mm_invalidate(struct trace_iterator *, int, struct trace_event *);
45:	static enum print_line_t trace_raw_output_smmu_mm_release(struct trace_iterator *, int, struct trace_event *);
72:	static enum print_line_t trace_raw_output_smmu_mn(struct trace_iterator *, int, struct trace_event *);

File ./include/trace/events/sock.h:
138:	int __traceiter_inet_sock_set_state(void *, const struct sock *, const int, const int);
93:	int __traceiter_sock_exceed_buf_limit(void *, struct sock *, struct proto *, long, int);
71:	int __traceiter_sock_rcvqueue_full(void *, struct sock *, struct sk_buff *);
93:	static void __bpf_trace_sock_exceed_buf_limit(void *, struct sock *, struct proto *, long, int);
138:	static void perf_trace_inet_sock_set_state(void *, const struct sock *, const int, const int);
93:	static void perf_trace_sock_exceed_buf_limit(void *, struct sock *, struct proto *, long, int);
71:	static void perf_trace_sock_rcvqueue_full(void *, struct sock *, struct sk_buff *);
138:	static void trace_event_raw_event_inet_sock_set_state(void *, const struct sock *, const int, const int);
93:	static void trace_event_raw_event_sock_exceed_buf_limit(void *, struct sock *, struct proto *, long, int);
71:	static void trace_event_raw_event_sock_rcvqueue_full(void *, struct sock *, struct sk_buff *);
138:	static enum print_line_t trace_raw_output_inet_sock_set_state(struct trace_iterator *, int, struct trace_event *);
93:	static enum print_line_t trace_raw_output_sock_exceed_buf_limit(struct trace_iterator *, int, struct trace_event *);
71:	static enum print_line_t trace_raw_output_sock_rcvqueue_full(struct trace_iterator *, int, struct trace_event *);

File ./include/trace/events/spi.h:
37:	int __traceiter_spi_controller_busy(void *, struct spi_controller *);
29:	int __traceiter_spi_controller_idle(void *, struct spi_controller *);
84:	int __traceiter_spi_message_done(void *, struct spi_message *);
76:	int __traceiter_spi_message_start(void *, struct spi_message *);
68:	int __traceiter_spi_message_submit(void *, struct spi_message *);
163:	int __traceiter_spi_transfer_start(void *, struct spi_message *, struct spi_transfer *);
171:	int __traceiter_spi_transfer_stop(void *, struct spi_message *, struct spi_transfer *);
11:	static void __bpf_trace_spi_controller(void *, struct spi_controller *);
122:	static void __bpf_trace_spi_transfer(void *, struct spi_message *, struct spi_transfer *);
11:	static void perf_trace_spi_controller(void *, struct spi_controller *);
45:	static void perf_trace_spi_message(void *, struct spi_message *);
84:	static void perf_trace_spi_message_done(void *, struct spi_message *);
122:	static void perf_trace_spi_transfer(void *, struct spi_message *, struct spi_transfer *);
11:	static void trace_event_raw_event_spi_controller(void *, struct spi_controller *);
45:	static void trace_event_raw_event_spi_message(void *, struct spi_message *);
84:	static void trace_event_raw_event_spi_message_done(void *, struct spi_message *);
122:	static void trace_event_raw_event_spi_transfer(void *, struct spi_message *, struct spi_transfer *);
11:	static enum print_line_t trace_raw_output_spi_controller(struct trace_iterator *, int, struct trace_event *);
45:	static enum print_line_t trace_raw_output_spi_message(struct trace_iterator *, int, struct trace_event *);
84:	static enum print_line_t trace_raw_output_spi_message_done(struct trace_iterator *, int, struct trace_event *);
122:	static enum print_line_t trace_raw_output_spi_transfer(struct trace_iterator *, int, struct trace_event *);

File ./include/trace/events/swiotlb.h:
10:	int __traceiter_swiotlb_bounced(void *, struct device *, dma_addr_t, size_t, enum swiotlb_force);
10:	static void __bpf_trace_swiotlb_bounced(void *, struct device *, dma_addr_t, size_t, enum swiotlb_force);
10:	static void perf_trace_swiotlb_bounced(void *, struct device *, dma_addr_t, size_t, enum swiotlb_force);
10:	static void trace_event_raw_event_swiotlb_bounced(void *, struct device *, dma_addr_t, size_t, enum swiotlb_force);
10:	static enum print_line_t trace_raw_output_swiotlb_bounced(struct trace_iterator *, int, struct trace_event *);

File ./include/trace/events/syscalls.h:
18:	int __traceiter_sys_enter(void *, struct pt_regs *, long);
44:	int __traceiter_sys_exit(void *, struct pt_regs *, long);
18:	static void __bpf_trace_sys_enter(void *, struct pt_regs *, long);
18:	static void perf_trace_sys_enter(void *, struct pt_regs *, long);
44:	static void perf_trace_sys_exit(void *, struct pt_regs *, long);
18:	static void trace_event_raw_event_sys_enter(void *, struct pt_regs *, long);
44:	static void trace_event_raw_event_sys_exit(void *, struct pt_regs *, long);
42:	static int trace_init_flags_sys_enter(void);
66:	static int trace_init_flags_sys_exit(void);
18:	static enum print_line_t trace_raw_output_sys_enter(struct trace_iterator *, int, struct trace_event *);
44:	static enum print_line_t trace_raw_output_sys_exit(struct trace_iterator *, int, struct trace_event *);

File ./include/trace/events/task.h:
9:	int __traceiter_task_newtask(void *, struct task_struct *, unsigned long);
34:	int __traceiter_task_rename(void *, struct task_struct *, const char *);
9:	static void __bpf_trace_task_newtask(void *, struct task_struct *, unsigned long);
34:	static void __bpf_trace_task_rename(void *, struct task_struct *, const char *);
9:	static void perf_trace_task_newtask(void *, struct task_struct *, unsigned long);
34:	static void perf_trace_task_rename(void *, struct task_struct *, const char *);
9:	static void trace_event_raw_event_task_newtask(void *, struct task_struct *, unsigned long);
34:	static void trace_event_raw_event_task_rename(void *, struct task_struct *, const char *);
9:	static enum print_line_t trace_raw_output_task_newtask(struct trace_iterator *, int, struct trace_event *);
34:	static enum print_line_t trace_raw_output_task_rename(struct trace_iterator *, int, struct trace_event *);

File ./include/trace/events/tcp.h:
170:	int __traceiter_tcp_destroy_sock(void *, struct sock *);
229:	int __traceiter_tcp_probe(void *, struct sock *, struct sk_buff *);
177:	int __traceiter_tcp_rcv_space_adjust(void *, struct sock *);
163:	int __traceiter_tcp_receive_reset(void *, struct sock *);
95:	int __traceiter_tcp_retransmit_skb(void *, const struct sock *, const struct sk_buff *);
184:	int __traceiter_tcp_retransmit_synack(void *, const struct sock *, const struct request_sock *);
106:	int __traceiter_tcp_send_reset(void *, const struct sock *, const struct sk_buff *);
118:	static void perf_trace_tcp_event_sk(void *, struct sock *);
50:	static void perf_trace_tcp_event_sk_skb(void *, const struct sock *, const struct sk_buff *);
229:	static void perf_trace_tcp_probe(void *, struct sock *, struct sk_buff *);
184:	static void perf_trace_tcp_retransmit_synack(void *, const struct sock *, const struct request_sock *);
118:	static void trace_event_raw_event_tcp_event_sk(void *, struct sock *);
50:	static void trace_event_raw_event_tcp_event_sk_skb(void *, const struct sock *, const struct sk_buff *);
229:	static void trace_event_raw_event_tcp_probe(void *, struct sock *, struct sk_buff *);
184:	static void trace_event_raw_event_tcp_retransmit_synack(void *, const struct sock *, const struct request_sock *);
118:	static enum print_line_t trace_raw_output_tcp_event_sk(struct trace_iterator *, int, struct trace_event *);
50:	static enum print_line_t trace_raw_output_tcp_event_sk_skb(struct trace_iterator *, int, struct trace_event *);
229:	static enum print_line_t trace_raw_output_tcp_probe(struct trace_iterator *, int, struct trace_event *);
184:	static enum print_line_t trace_raw_output_tcp_retransmit_synack(struct trace_iterator *, int, struct trace_event *);

File ./include/trace/events/thermal.h:
49:	int __traceiter_cdev_update(void *, struct thermal_cooling_device *, unsigned long);
24:	int __traceiter_thermal_temperature(void *, struct thermal_zone_device *);
68:	int __traceiter_thermal_zone_trip(void *, struct thermal_zone_device *, int, enum thermal_trip_type);
49:	static void __bpf_trace_cdev_update(void *, struct thermal_cooling_device *, unsigned long);
24:	static void __bpf_trace_thermal_temperature(void *, struct thermal_zone_device *);
68:	static void __bpf_trace_thermal_zone_trip(void *, struct thermal_zone_device *, int, enum thermal_trip_type);
49:	static void perf_trace_cdev_update(void *, struct thermal_cooling_device *, unsigned long);
24:	static void perf_trace_thermal_temperature(void *, struct thermal_zone_device *);
68:	static void perf_trace_thermal_zone_trip(void *, struct thermal_zone_device *, int, enum thermal_trip_type);
49:	static void trace_event_raw_event_cdev_update(void *, struct thermal_cooling_device *, unsigned long);
24:	static void trace_event_raw_event_thermal_temperature(void *, struct thermal_zone_device *);
68:	static void trace_event_raw_event_thermal_zone_trip(void *, struct thermal_zone_device *, int, enum thermal_trip_type);
49:	static enum print_line_t trace_raw_output_cdev_update(struct trace_iterator *, int, struct trace_event *);
24:	static enum print_line_t trace_raw_output_thermal_temperature(struct trace_iterator *, int, struct trace_event *);
68:	static enum print_line_t trace_raw_output_thermal_zone_trip(struct trace_iterator *, int, struct trace_event *);

File ./include/trace/events/timer.h:
290:	int __traceiter_hrtimer_cancel(void *, struct hrtimer *);
232:	int __traceiter_hrtimer_expire_entry(void *, struct hrtimer *, ktime_t *);
279:	int __traceiter_hrtimer_expire_exit(void *, struct hrtimer *);
167:	int __traceiter_hrtimer_init(void *, struct hrtimer *, clockid_t, enum hrtimer_mode);
195:	int __traceiter_hrtimer_start(void *, struct hrtimer *, enum hrtimer_mode);
341:	int __traceiter_itimer_expire(void *, int, struct pid *, unsigned long long);
304:	int __traceiter_itimer_state(void *, int, const struct itimerspec64 * const, unsigned long long);
398:	int __traceiter_tick_stop(void *, int, int);
136:	int __traceiter_timer_cancel(void *, struct timer_list *);
90:	int __traceiter_timer_expire_entry(void *, struct timer_list *, unsigned long);
125:	int __traceiter_timer_expire_exit(void *, struct timer_list *);
33:	int __traceiter_timer_init(void *, struct timer_list *);
52:	int __traceiter_timer_start(void *, struct timer_list *, unsigned long, unsigned int);
232:	static void __bpf_trace_hrtimer_expire_entry(void *, struct hrtimer *, ktime_t *);
167:	static void __bpf_trace_hrtimer_init(void *, struct hrtimer *, clockid_t, enum hrtimer_mode);
195:	static void __bpf_trace_hrtimer_start(void *, struct hrtimer *, enum hrtimer_mode);
304:	static void __bpf_trace_itimer_state(void *, int, const struct itimerspec64 * const, unsigned long long);
398:	static void __bpf_trace_tick_stop(void *, int, int);
12:	static void __bpf_trace_timer_class(void *, struct timer_list *);
90:	static void __bpf_trace_timer_expire_entry(void *, struct timer_list *, unsigned long);
52:	static void __bpf_trace_timer_start(void *, struct timer_list *, unsigned long, unsigned int);
255:	static void perf_trace_hrtimer_class(void *, struct hrtimer *);
232:	static void perf_trace_hrtimer_expire_entry(void *, struct hrtimer *, ktime_t *);
167:	static void perf_trace_hrtimer_init(void *, struct hrtimer *, clockid_t, enum hrtimer_mode);
195:	static void perf_trace_hrtimer_start(void *, struct hrtimer *, enum hrtimer_mode);
341:	static void perf_trace_itimer_expire(void *, int, struct pid *, unsigned long long);
304:	static void perf_trace_itimer_state(void *, int, const struct itimerspec64 * const, unsigned long long);
398:	static void perf_trace_tick_stop(void *, int, int);
12:	static void perf_trace_timer_class(void *, struct timer_list *);
90:	static void perf_trace_timer_expire_entry(void *, struct timer_list *, unsigned long);
52:	static void perf_trace_timer_start(void *, struct timer_list *, unsigned long, unsigned int);
255:	static void trace_event_raw_event_hrtimer_class(void *, struct hrtimer *);
232:	static void trace_event_raw_event_hrtimer_expire_entry(void *, struct hrtimer *, ktime_t *);
167:	static void trace_event_raw_event_hrtimer_init(void *, struct hrtimer *, clockid_t, enum hrtimer_mode);
195:	static void trace_event_raw_event_hrtimer_start(void *, struct hrtimer *, enum hrtimer_mode);
341:	static void trace_event_raw_event_itimer_expire(void *, int, struct pid *, unsigned long long);
304:	static void trace_event_raw_event_itimer_state(void *, int, const struct itimerspec64 * const, unsigned long long);
398:	static void trace_event_raw_event_tick_stop(void *, int, int);
12:	static void trace_event_raw_event_timer_class(void *, struct timer_list *);
90:	static void trace_event_raw_event_timer_expire_entry(void *, struct timer_list *, unsigned long);
52:	static void trace_event_raw_event_timer_start(void *, struct timer_list *, unsigned long, unsigned int);
255:	static enum print_line_t trace_raw_output_hrtimer_class(struct trace_iterator *, int, struct trace_event *);
232:	static enum print_line_t trace_raw_output_hrtimer_expire_entry(struct trace_iterator *, int, struct trace_event *);
167:	static enum print_line_t trace_raw_output_hrtimer_init(struct trace_iterator *, int, struct trace_event *);
195:	static enum print_line_t trace_raw_output_hrtimer_start(struct trace_iterator *, int, struct trace_event *);
341:	static enum print_line_t trace_raw_output_itimer_expire(struct trace_iterator *, int, struct trace_event *);
304:	static enum print_line_t trace_raw_output_itimer_state(struct trace_iterator *, int, struct trace_event *);
398:	static enum print_line_t trace_raw_output_tick_stop(struct trace_iterator *, int, struct trace_event *);
12:	static enum print_line_t trace_raw_output_timer_class(struct trace_iterator *, int, struct trace_event *);
90:	static enum print_line_t trace_raw_output_timer_expire_entry(struct trace_iterator *, int, struct trace_event *);
52:	static enum print_line_t trace_raw_output_timer_start(struct trace_iterator *, int, struct trace_event *);

File ./include/trace/events/tlb.h:
38:	int __traceiter_tlb_flush(void *, int, unsigned long);
38:	static void __bpf_trace_tlb_flush(void *, int, unsigned long);
38:	static void perf_trace_tlb_flush(void *, int, unsigned long);
38:	static void trace_event_raw_event_tlb_flush(void *, int, unsigned long);
38:	static enum print_line_t trace_raw_output_tlb_flush(struct trace_iterator *, int, struct trace_event *);

File ./include/trace/events/udp.h:
11:	int __traceiter_udp_fail_queue_rcv_skb(void *, int, struct sock *);
11:	static void __bpf_trace_udp_fail_queue_rcv_skb(void *, int, struct sock *);
11:	static void perf_trace_udp_fail_queue_rcv_skb(void *, int, struct sock *);
11:	static void trace_event_raw_event_udp_fail_queue_rcv_skb(void *, int, struct sock *);
11:	static enum print_line_t trace_raw_output_udp_fail_queue_rcv_skb(struct trace_iterator *, int, struct trace_event *);

File ./include/trace/events/vmscan.h:
230:	int __traceiter_mm_shrink_slab_end(void *, struct shrinker *, int, int, long, long, long);
185:	int __traceiter_mm_shrink_slab_start(void *, struct shrinker *, struct shrink_control *, long, unsigned long, unsigned long long, unsigned long, int);
122:	int __traceiter_mm_vmscan_direct_reclaim_begin(void *, int, gfp_t);
162:	int __traceiter_mm_vmscan_direct_reclaim_end(void *, unsigned long);
426:	int __traceiter_mm_vmscan_inactive_list_is_low(void *, int, int, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, int);
35:	int __traceiter_mm_vmscan_kswapd_sleep(void *, int);
52:	int __traceiter_mm_vmscan_kswapd_wake(void *, int, int, int);
267:	int __traceiter_mm_vmscan_lru_isolate(void *, int, int, unsigned long, unsigned long, unsigned long, unsigned long, isolate_mode_t, int);
390:	int __traceiter_mm_vmscan_lru_shrink_active(void *, int, unsigned long, unsigned long, unsigned long, unsigned long, int, int);
339:	int __traceiter_mm_vmscan_lru_shrink_inactive(void *, int, unsigned long, unsigned long, struct reclaim_stat *, int, int);
130:	int __traceiter_mm_vmscan_memcg_reclaim_begin(void *, int, gfp_t);
170:	int __traceiter_mm_vmscan_memcg_reclaim_end(void *, unsigned long);
137:	int __traceiter_mm_vmscan_memcg_softlimit_reclaim_begin(void *, int, gfp_t);
177:	int __traceiter_mm_vmscan_memcg_softlimit_reclaim_end(void *, unsigned long);
467:	int __traceiter_mm_vmscan_node_reclaim_begin(void *, int, int, gfp_t);
491:	int __traceiter_mm_vmscan_node_reclaim_end(void *, unsigned long);
75:	int __traceiter_mm_vmscan_wakeup_kswapd(void *, int, int, int, gfp_t);
316:	int __traceiter_mm_vmscan_writepage(void *, struct page *);
230:	static void __bpf_trace_mm_shrink_slab_end(void *, struct shrinker *, int, int, long, long, long);
185:	static void __bpf_trace_mm_shrink_slab_start(void *, struct shrinker *, struct shrink_control *, long, unsigned long, unsigned long long, unsigned long, int);
101:	static void __bpf_trace_mm_vmscan_direct_reclaim_begin_template(void *, int, gfp_t);
145:	static void __bpf_trace_mm_vmscan_direct_reclaim_end_template(void *, unsigned long);
426:	static void __bpf_trace_mm_vmscan_inactive_list_is_low(void *, int, int, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, int);
35:	static void __bpf_trace_mm_vmscan_kswapd_sleep(void *, int);
52:	static void __bpf_trace_mm_vmscan_kswapd_wake(void *, int, int, int);
267:	static void __bpf_trace_mm_vmscan_lru_isolate(void *, int, int, unsigned long, unsigned long, unsigned long, unsigned long, isolate_mode_t, int);
390:	static void __bpf_trace_mm_vmscan_lru_shrink_active(void *, int, unsigned long, unsigned long, unsigned long, unsigned long, int, int);
339:	static void __bpf_trace_mm_vmscan_lru_shrink_inactive(void *, int, unsigned long, unsigned long, struct reclaim_stat *, int, int);
467:	static void __bpf_trace_mm_vmscan_node_reclaim_begin(void *, int, int, gfp_t);
75:	static void __bpf_trace_mm_vmscan_wakeup_kswapd(void *, int, int, int, gfp_t);
316:	static void __bpf_trace_mm_vmscan_writepage(void *, struct page *);
230:	static void perf_trace_mm_shrink_slab_end(void *, struct shrinker *, int, int, long, long, long);
185:	static void perf_trace_mm_shrink_slab_start(void *, struct shrinker *, struct shrink_control *, long, unsigned long, unsigned long long, unsigned long, int);
101:	static void perf_trace_mm_vmscan_direct_reclaim_begin_template(void *, int, gfp_t);
145:	static void perf_trace_mm_vmscan_direct_reclaim_end_template(void *, unsigned long);
426:	static void perf_trace_mm_vmscan_inactive_list_is_low(void *, int, int, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, int);
35:	static void perf_trace_mm_vmscan_kswapd_sleep(void *, int);
52:	static void perf_trace_mm_vmscan_kswapd_wake(void *, int, int, int);
267:	static void perf_trace_mm_vmscan_lru_isolate(void *, int, int, unsigned long, unsigned long, unsigned long, unsigned long, isolate_mode_t, int);
390:	static void perf_trace_mm_vmscan_lru_shrink_active(void *, int, unsigned long, unsigned long, unsigned long, unsigned long, int, int);
339:	static void perf_trace_mm_vmscan_lru_shrink_inactive(void *, int, unsigned long, unsigned long, struct reclaim_stat *, int, int);
467:	static void perf_trace_mm_vmscan_node_reclaim_begin(void *, int, int, gfp_t);
75:	static void perf_trace_mm_vmscan_wakeup_kswapd(void *, int, int, int, gfp_t);
316:	static void perf_trace_mm_vmscan_writepage(void *, struct page *);
230:	static void trace_event_raw_event_mm_shrink_slab_end(void *, struct shrinker *, int, int, long, long, long);
185:	static void trace_event_raw_event_mm_shrink_slab_start(void *, struct shrinker *, struct shrink_control *, long, unsigned long, unsigned long long, unsigned long, int);
101:	static void trace_event_raw_event_mm_vmscan_direct_reclaim_begin_template(void *, int, gfp_t);
145:	static void trace_event_raw_event_mm_vmscan_direct_reclaim_end_template(void *, unsigned long);
426:	static void trace_event_raw_event_mm_vmscan_inactive_list_is_low(void *, int, int, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, int);
35:	static void trace_event_raw_event_mm_vmscan_kswapd_sleep(void *, int);
52:	static void trace_event_raw_event_mm_vmscan_kswapd_wake(void *, int, int, int);
267:	static void trace_event_raw_event_mm_vmscan_lru_isolate(void *, int, int, unsigned long, unsigned long, unsigned long, unsigned long, isolate_mode_t, int);
390:	static void trace_event_raw_event_mm_vmscan_lru_shrink_active(void *, int, unsigned long, unsigned long, unsigned long, unsigned long, int, int);
339:	static void trace_event_raw_event_mm_vmscan_lru_shrink_inactive(void *, int, unsigned long, unsigned long, struct reclaim_stat *, int, int);
467:	static void trace_event_raw_event_mm_vmscan_node_reclaim_begin(void *, int, int, gfp_t);
75:	static void trace_event_raw_event_mm_vmscan_wakeup_kswapd(void *, int, int, int, gfp_t);
316:	static void trace_event_raw_event_mm_vmscan_writepage(void *, struct page *);
230:	static enum print_line_t trace_raw_output_mm_shrink_slab_end(struct trace_iterator *, int, struct trace_event *);
185:	static enum print_line_t trace_raw_output_mm_shrink_slab_start(struct trace_iterator *, int, struct trace_event *);
101:	static enum print_line_t trace_raw_output_mm_vmscan_direct_reclaim_begin_template(struct trace_iterator *, int, struct trace_event *);
145:	static enum print_line_t trace_raw_output_mm_vmscan_direct_reclaim_end_template(struct trace_iterator *, int, struct trace_event *);
426:	static enum print_line_t trace_raw_output_mm_vmscan_inactive_list_is_low(struct trace_iterator *, int, struct trace_event *);
35:	static enum print_line_t trace_raw_output_mm_vmscan_kswapd_sleep(struct trace_iterator *, int, struct trace_event *);
52:	static enum print_line_t trace_raw_output_mm_vmscan_kswapd_wake(struct trace_iterator *, int, struct trace_event *);
267:	static enum print_line_t trace_raw_output_mm_vmscan_lru_isolate(struct trace_iterator *, int, struct trace_event *);
390:	static enum print_line_t trace_raw_output_mm_vmscan_lru_shrink_active(struct trace_iterator *, int, struct trace_event *);
339:	static enum print_line_t trace_raw_output_mm_vmscan_lru_shrink_inactive(struct trace_iterator *, int, struct trace_event *);
467:	static enum print_line_t trace_raw_output_mm_vmscan_node_reclaim_begin(struct trace_iterator *, int, struct trace_event *);
75:	static enum print_line_t trace_raw_output_mm_vmscan_wakeup_kswapd(struct trace_iterator *, int, struct trace_event *);
316:	static enum print_line_t trace_raw_output_mm_vmscan_writepage(struct trace_iterator *, int, struct trace_event *);

File ./include/trace/events/wbt.h:
59:	int __traceiter_wbt_lat(void *, struct backing_dev_info *, unsigned long);
15:	int __traceiter_wbt_stat(void *, struct backing_dev_info *, struct blk_rq_stat *);
89:	int __traceiter_wbt_step(void *, struct backing_dev_info *, const char *, int, unsigned long, unsigned int, unsigned int, unsigned int);
129:	int __traceiter_wbt_timer(void *, struct backing_dev_info *, unsigned int, int, unsigned int);
59:	static void __bpf_trace_wbt_lat(void *, struct backing_dev_info *, unsigned long);
15:	static void __bpf_trace_wbt_stat(void *, struct backing_dev_info *, struct blk_rq_stat *);
89:	static void __bpf_trace_wbt_step(void *, struct backing_dev_info *, const char *, int, unsigned long, unsigned int, unsigned int, unsigned int);
129:	static void __bpf_trace_wbt_timer(void *, struct backing_dev_info *, unsigned int, int, unsigned int);
59:	static void perf_trace_wbt_lat(void *, struct backing_dev_info *, unsigned long);
15:	static void perf_trace_wbt_stat(void *, struct backing_dev_info *, struct blk_rq_stat *);
89:	static void perf_trace_wbt_step(void *, struct backing_dev_info *, const char *, int, unsigned long, unsigned int, unsigned int, unsigned int);
129:	static void perf_trace_wbt_timer(void *, struct backing_dev_info *, unsigned int, int, unsigned int);
59:	static void trace_event_raw_event_wbt_lat(void *, struct backing_dev_info *, unsigned long);
15:	static void trace_event_raw_event_wbt_stat(void *, struct backing_dev_info *, struct blk_rq_stat *);
89:	static void trace_event_raw_event_wbt_step(void *, struct backing_dev_info *, const char *, int, unsigned long, unsigned int, unsigned int, unsigned int);
129:	static void trace_event_raw_event_wbt_timer(void *, struct backing_dev_info *, unsigned int, int, unsigned int);
59:	static enum print_line_t trace_raw_output_wbt_lat(struct trace_iterator *, int, struct trace_event *);
15:	static enum print_line_t trace_raw_output_wbt_stat(struct trace_iterator *, int, struct trace_event *);
89:	static enum print_line_t trace_raw_output_wbt_step(struct trace_iterator *, int, struct trace_event *);
129:	static enum print_line_t trace_raw_output_wbt_timer(struct trace_iterator *, int, struct trace_event *);

File ./include/trace/events/workqueue.h:
59:	int __traceiter_workqueue_activate_work(void *, struct work_struct *);
108:	int __traceiter_workqueue_execute_end(void *, struct work_struct *, work_func_t);
82:	int __traceiter_workqueue_execute_start(void *, struct work_struct *);
23:	int __traceiter_workqueue_queue_work(void *, unsigned int, struct pool_workqueue *, struct work_struct *);
59:	static void __bpf_trace_workqueue_activate_work(void *, struct work_struct *);
108:	static void __bpf_trace_workqueue_execute_end(void *, struct work_struct *, work_func_t);
23:	static void __bpf_trace_workqueue_queue_work(void *, unsigned int, struct pool_workqueue *, struct work_struct *);
59:	static void perf_trace_workqueue_activate_work(void *, struct work_struct *);
108:	static void perf_trace_workqueue_execute_end(void *, struct work_struct *, work_func_t);
82:	static void perf_trace_workqueue_execute_start(void *, struct work_struct *);
23:	static void perf_trace_workqueue_queue_work(void *, unsigned int, struct pool_workqueue *, struct work_struct *);
59:	static void trace_event_raw_event_workqueue_activate_work(void *, struct work_struct *);
108:	static void trace_event_raw_event_workqueue_execute_end(void *, struct work_struct *, work_func_t);
82:	static void trace_event_raw_event_workqueue_execute_start(void *, struct work_struct *);
23:	static void trace_event_raw_event_workqueue_queue_work(void *, unsigned int, struct pool_workqueue *, struct work_struct *);
59:	static enum print_line_t trace_raw_output_workqueue_activate_work(struct trace_iterator *, int, struct trace_event *);
108:	static enum print_line_t trace_raw_output_workqueue_execute_end(struct trace_iterator *, int, struct trace_event *);
82:	static enum print_line_t trace_raw_output_workqueue_execute_start(struct trace_iterator *, int, struct trace_event *);
23:	static enum print_line_t trace_raw_output_workqueue_queue_work(struct trace_iterator *, int, struct trace_event *);

File ./include/trace/events/writeback.h:
620:	int __traceiter_balance_dirty_pages(void *, struct bdi_writeback *, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, long, unsigned long);
574:	int __traceiter_bdi_dirty_ratelimit(void *, struct bdi_writeback *, unsigned long, unsigned long);
273:	int __traceiter_flush_foreign(void *, struct bdi_writeback *, unsigned int, unsigned int);
529:	int __traceiter_global_dirty_state(void *, unsigned long, unsigned long);
178:	int __traceiter_inode_foreign_history(void *, struct inode *, struct writeback_control *, unsigned int);
207:	int __traceiter_inode_switch_wbs(void *, struct inode *, struct bdi_writeback *, struct bdi_writeback *);
887:	int __traceiter_sb_clear_inode_writeback(void *, struct inode *);
882:	int __traceiter_sb_mark_inode_writeback(void *, struct inode *);
236:	int __traceiter_track_foreign_dirty(void *, struct page *, struct bdi_writeback *);
88:	int __traceiter_wait_on_page_writeback(void *, struct page *, struct address_space *);
495:	int __traceiter_wbc_writepage(void *, struct writeback_control *, struct backing_dev_info *);
429:	int __traceiter_writeback_bdi_register(void *, struct backing_dev_info *);
758:	int __traceiter_writeback_congestion_wait(void *, unsigned int, unsigned int);
140:	int __traceiter_writeback_dirty_inode(void *, struct inode *, int);
871:	int __traceiter_writeback_dirty_inode_enqueue(void *, struct inode *);
133:	int __traceiter_writeback_dirty_inode_start(void *, struct inode *, int);
81:	int __traceiter_writeback_dirty_page(void *, struct page *, struct address_space *);
389:	int __traceiter_writeback_exec(void *, struct bdi_writeback *, struct wb_writeback_work *);
859:	int __traceiter_writeback_lazytime(void *, struct inode *);
865:	int __traceiter_writeback_lazytime_iput(void *, struct inode *);
126:	int __traceiter_writeback_mark_inode_dirty(void *, struct inode *, int);
394:	int __traceiter_writeback_pages_written(void *, long);
388:	int __traceiter_writeback_queue(void *, struct bdi_writeback *, struct wb_writeback_work *);
497:	int __traceiter_writeback_queue_io(void *, struct bdi_writeback *, struct wb_writeback_work *, unsigned long, int);
705:	int __traceiter_writeback_sb_inodes_requeue(void *, struct inode *);
825:	int __traceiter_writeback_single_inode(void *, struct inode *, struct writeback_control *, unsigned long);
818:	int __traceiter_writeback_single_inode_start(void *, struct inode *, struct writeback_control *, unsigned long);
390:	int __traceiter_writeback_start(void *, struct bdi_writeback *, struct wb_writeback_work *);
392:	int __traceiter_writeback_wait(void *, struct bdi_writeback *, struct wb_writeback_work *);
765:	int __traceiter_writeback_wait_iff_congested(void *, unsigned int, unsigned int);
427:	int __traceiter_writeback_wake_background(void *, struct bdi_writeback *);
339:	int __traceiter_writeback_write_inode(void *, struct inode *, struct writeback_control *);
332:	int __traceiter_writeback_write_inode_start(void *, struct inode *, struct writeback_control *);
391:	int __traceiter_writeback_written(void *, struct bdi_writeback *, struct wb_writeback_work *);
620:	static void __bpf_trace_balance_dirty_pages(void *, struct bdi_writeback *, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, long, unsigned long);
574:	static void __bpf_trace_bdi_dirty_ratelimit(void *, struct bdi_writeback *, unsigned long, unsigned long);
273:	static void __bpf_trace_flush_foreign(void *, struct bdi_writeback *, unsigned int, unsigned int);
529:	static void __bpf_trace_global_dirty_state(void *, unsigned long, unsigned long);
178:	static void __bpf_trace_inode_foreign_history(void *, struct inode *, struct writeback_control *, unsigned int);
207:	static void __bpf_trace_inode_switch_wbs(void *, struct inode *, struct bdi_writeback *, struct bdi_writeback *);
406:	static void __bpf_trace_writeback_class(void *, struct bdi_writeback *);
737:	static void __bpf_trace_writeback_congest_waited_template(void *, unsigned int, unsigned int);
95:	static void __bpf_trace_writeback_dirty_inode_template(void *, struct inode *, int);
54:	static void __bpf_trace_writeback_page_template(void *, struct page *, struct address_space *);
394:	static void __bpf_trace_writeback_pages_written(void *, long);
497:	static void __bpf_trace_writeback_queue_io(void *, struct bdi_writeback *, struct wb_writeback_work *, unsigned long, int);
772:	static void __bpf_trace_writeback_single_inode_template(void *, struct inode *, struct writeback_control *, unsigned long);
620:	static void perf_trace_balance_dirty_pages(void *, struct bdi_writeback *, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, long, unsigned long);
574:	static void perf_trace_bdi_dirty_ratelimit(void *, struct bdi_writeback *, unsigned long, unsigned long);
273:	static void perf_trace_flush_foreign(void *, struct bdi_writeback *, unsigned int, unsigned int);
529:	static void perf_trace_global_dirty_state(void *, unsigned long, unsigned long);
178:	static void perf_trace_inode_foreign_history(void *, struct inode *, struct writeback_control *, unsigned int);
207:	static void perf_trace_inode_switch_wbs(void *, struct inode *, struct bdi_writeback *, struct bdi_writeback *);
236:	static void perf_trace_track_foreign_dirty(void *, struct page *, struct bdi_writeback *);
443:	static void perf_trace_wbc_class(void *, struct writeback_control *, struct backing_dev_info *);
429:	static void perf_trace_writeback_bdi_register(void *, struct backing_dev_info *);
406:	static void perf_trace_writeback_class(void *, struct bdi_writeback *);
737:	static void perf_trace_writeback_congest_waited_template(void *, unsigned int, unsigned int);
95:	static void perf_trace_writeback_dirty_inode_template(void *, struct inode *, int);
832:	static void perf_trace_writeback_inode_template(void *, struct inode *);
54:	static void perf_trace_writeback_page_template(void *, struct page *, struct address_space *);
394:	static void perf_trace_writeback_pages_written(void *, long);
497:	static void perf_trace_writeback_queue_io(void *, struct bdi_writeback *, struct wb_writeback_work *, unsigned long, int);
705:	static void perf_trace_writeback_sb_inodes_requeue(void *, struct inode *);
772:	static void perf_trace_writeback_single_inode_template(void *, struct inode *, struct writeback_control *, unsigned long);
346:	static void perf_trace_writeback_work_class(void *, struct bdi_writeback *, struct wb_writeback_work *);
303:	static void perf_trace_writeback_write_inode_template(void *, struct inode *, struct writeback_control *);
620:	static void trace_event_raw_event_balance_dirty_pages(void *, struct bdi_writeback *, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, long, unsigned long);
574:	static void trace_event_raw_event_bdi_dirty_ratelimit(void *, struct bdi_writeback *, unsigned long, unsigned long);
273:	static void trace_event_raw_event_flush_foreign(void *, struct bdi_writeback *, unsigned int, unsigned int);
529:	static void trace_event_raw_event_global_dirty_state(void *, unsigned long, unsigned long);
178:	static void trace_event_raw_event_inode_foreign_history(void *, struct inode *, struct writeback_control *, unsigned int);
207:	static void trace_event_raw_event_inode_switch_wbs(void *, struct inode *, struct bdi_writeback *, struct bdi_writeback *);
236:	static void trace_event_raw_event_track_foreign_dirty(void *, struct page *, struct bdi_writeback *);
443:	static void trace_event_raw_event_wbc_class(void *, struct writeback_control *, struct backing_dev_info *);
429:	static void trace_event_raw_event_writeback_bdi_register(void *, struct backing_dev_info *);
406:	static void trace_event_raw_event_writeback_class(void *, struct bdi_writeback *);
737:	static void trace_event_raw_event_writeback_congest_waited_template(void *, unsigned int, unsigned int);
95:	static void trace_event_raw_event_writeback_dirty_inode_template(void *, struct inode *, int);
832:	static void trace_event_raw_event_writeback_inode_template(void *, struct inode *);
54:	static void trace_event_raw_event_writeback_page_template(void *, struct page *, struct address_space *);
394:	static void trace_event_raw_event_writeback_pages_written(void *, long);
497:	static void trace_event_raw_event_writeback_queue_io(void *, struct bdi_writeback *, struct wb_writeback_work *, unsigned long, int);
705:	static void trace_event_raw_event_writeback_sb_inodes_requeue(void *, struct inode *);
772:	static void trace_event_raw_event_writeback_single_inode_template(void *, struct inode *, struct writeback_control *, unsigned long);
346:	static void trace_event_raw_event_writeback_work_class(void *, struct bdi_writeback *, struct wb_writeback_work *);
303:	static void trace_event_raw_event_writeback_write_inode_template(void *, struct inode *, struct writeback_control *);
620:	static enum print_line_t trace_raw_output_balance_dirty_pages(struct trace_iterator *, int, struct trace_event *);
574:	static enum print_line_t trace_raw_output_bdi_dirty_ratelimit(struct trace_iterator *, int, struct trace_event *);
273:	static enum print_line_t trace_raw_output_flush_foreign(struct trace_iterator *, int, struct trace_event *);
529:	static enum print_line_t trace_raw_output_global_dirty_state(struct trace_iterator *, int, struct trace_event *);
178:	static enum print_line_t trace_raw_output_inode_foreign_history(struct trace_iterator *, int, struct trace_event *);
207:	static enum print_line_t trace_raw_output_inode_switch_wbs(struct trace_iterator *, int, struct trace_event *);
236:	static enum print_line_t trace_raw_output_track_foreign_dirty(struct trace_iterator *, int, struct trace_event *);
443:	static enum print_line_t trace_raw_output_wbc_class(struct trace_iterator *, int, struct trace_event *);
429:	static enum print_line_t trace_raw_output_writeback_bdi_register(struct trace_iterator *, int, struct trace_event *);
406:	static enum print_line_t trace_raw_output_writeback_class(struct trace_iterator *, int, struct trace_event *);
737:	static enum print_line_t trace_raw_output_writeback_congest_waited_template(struct trace_iterator *, int, struct trace_event *);
95:	static enum print_line_t trace_raw_output_writeback_dirty_inode_template(struct trace_iterator *, int, struct trace_event *);
832:	static enum print_line_t trace_raw_output_writeback_inode_template(struct trace_iterator *, int, struct trace_event *);
54:	static enum print_line_t trace_raw_output_writeback_page_template(struct trace_iterator *, int, struct trace_event *);
394:	static enum print_line_t trace_raw_output_writeback_pages_written(struct trace_iterator *, int, struct trace_event *);
497:	static enum print_line_t trace_raw_output_writeback_queue_io(struct trace_iterator *, int, struct trace_event *);
705:	static enum print_line_t trace_raw_output_writeback_sb_inodes_requeue(struct trace_iterator *, int, struct trace_event *);
772:	static enum print_line_t trace_raw_output_writeback_single_inode_template(struct trace_iterator *, int, struct trace_event *);
346:	static enum print_line_t trace_raw_output_writeback_work_class(struct trace_iterator *, int, struct trace_event *);
303:	static enum print_line_t trace_raw_output_writeback_write_inode_template(struct trace_iterator *, int, struct trace_event *);

File ./include/trace/events/xdp.h:
335:	int __traceiter_mem_connect(void *, const struct xdp_mem_allocator *, const struct xdp_rxq_info *);
308:	int __traceiter_mem_disconnect(void *, const struct xdp_mem_allocator *);
369:	int __traceiter_mem_return_failed(void *, const struct xdp_mem_info *, const struct page *);
53:	int __traceiter_xdp_bulk_tx(void *, const struct net_device *, int, int, int);
220:	int __traceiter_xdp_cpumap_enqueue(void *, int, unsigned int, unsigned int, int);
177:	int __traceiter_xdp_cpumap_kthread(void *, int, unsigned int, unsigned int, int, struct xdp_cpumap_stats *);
255:	int __traceiter_xdp_devmap_xmit(void *, const struct net_device *, const struct net_device *, int, int, int);
28:	int __traceiter_xdp_exception(void *, const struct net_device *, const struct bpf_prog *, u32);
132:	int __traceiter_xdp_redirect(void *, const struct net_device *, const struct bpf_prog *, const void *, int, const struct bpf_map *, u32);
140:	int __traceiter_xdp_redirect_err(void *, const struct net_device *, const struct bpf_prog *, const void *, int, const struct bpf_map *, u32);
161:	int __traceiter_xdp_redirect_map(void *, const struct net_device *, const struct bpf_prog *, const void *, int, const struct bpf_map *, u32);
169:	int __traceiter_xdp_redirect_map_err(void *, const struct net_device *, const struct bpf_prog *, const void *, int, const struct bpf_map *, u32);
335:	static void __bpf_trace_mem_connect(void *, const struct xdp_mem_allocator *, const struct xdp_rxq_info *);
308:	static void __bpf_trace_mem_disconnect(void *, const struct xdp_mem_allocator *);
53:	static void __bpf_trace_xdp_bulk_tx(void *, const struct net_device *, int, int, int);
220:	static void __bpf_trace_xdp_cpumap_enqueue(void *, int, unsigned int, unsigned int, int);
177:	static void __bpf_trace_xdp_cpumap_kthread(void *, int, unsigned int, unsigned int, int, struct xdp_cpumap_stats *);
255:	static void __bpf_trace_xdp_devmap_xmit(void *, const struct net_device *, const struct net_device *, int, int, int);
28:	static void __bpf_trace_xdp_exception(void *, const struct net_device *, const struct bpf_prog *, u32);
94:	static void __bpf_trace_xdp_redirect_template(void *, const struct net_device *, const struct bpf_prog *, const void *, int, const struct bpf_map *, u32);
335:	static void perf_trace_mem_connect(void *, const struct xdp_mem_allocator *, const struct xdp_rxq_info *);
308:	static void perf_trace_mem_disconnect(void *, const struct xdp_mem_allocator *);
369:	static void perf_trace_mem_return_failed(void *, const struct xdp_mem_info *, const struct page *);
53:	static void perf_trace_xdp_bulk_tx(void *, const struct net_device *, int, int, int);
220:	static void perf_trace_xdp_cpumap_enqueue(void *, int, unsigned int, unsigned int, int);
177:	static void perf_trace_xdp_cpumap_kthread(void *, int, unsigned int, unsigned int, int, struct xdp_cpumap_stats *);
255:	static void perf_trace_xdp_devmap_xmit(void *, const struct net_device *, const struct net_device *, int, int, int);
28:	static void perf_trace_xdp_exception(void *, const struct net_device *, const struct bpf_prog *, u32);
94:	static void perf_trace_xdp_redirect_template(void *, const struct net_device *, const struct bpf_prog *, const void *, int, const struct bpf_map *, u32);
335:	static void trace_event_raw_event_mem_connect(void *, const struct xdp_mem_allocator *, const struct xdp_rxq_info *);
308:	static void trace_event_raw_event_mem_disconnect(void *, const struct xdp_mem_allocator *);
369:	static void trace_event_raw_event_mem_return_failed(void *, const struct xdp_mem_info *, const struct page *);
53:	static void trace_event_raw_event_xdp_bulk_tx(void *, const struct net_device *, int, int, int);
220:	static void trace_event_raw_event_xdp_cpumap_enqueue(void *, int, unsigned int, unsigned int, int);
177:	static void trace_event_raw_event_xdp_cpumap_kthread(void *, int, unsigned int, unsigned int, int, struct xdp_cpumap_stats *);
255:	static void trace_event_raw_event_xdp_devmap_xmit(void *, const struct net_device *, const struct net_device *, int, int, int);
28:	static void trace_event_raw_event_xdp_exception(void *, const struct net_device *, const struct bpf_prog *, u32);
94:	static void trace_event_raw_event_xdp_redirect_template(void *, const struct net_device *, const struct bpf_prog *, const void *, int, const struct bpf_map *, u32);
335:	static enum print_line_t trace_raw_output_mem_connect(struct trace_iterator *, int, struct trace_event *);
308:	static enum print_line_t trace_raw_output_mem_disconnect(struct trace_iterator *, int, struct trace_event *);
369:	static enum print_line_t trace_raw_output_mem_return_failed(struct trace_iterator *, int, struct trace_event *);
53:	static enum print_line_t trace_raw_output_xdp_bulk_tx(struct trace_iterator *, int, struct trace_event *);
220:	static enum print_line_t trace_raw_output_xdp_cpumap_enqueue(struct trace_iterator *, int, struct trace_event *);
177:	static enum print_line_t trace_raw_output_xdp_cpumap_kthread(struct trace_iterator *, int, struct trace_event *);
255:	static enum print_line_t trace_raw_output_xdp_devmap_xmit(struct trace_iterator *, int, struct trace_event *);
28:	static enum print_line_t trace_raw_output_xdp_exception(struct trace_iterator *, int, struct trace_event *);
94:	static enum print_line_t trace_raw_output_xdp_redirect_template(struct trace_iterator *, int, struct trace_event *);

File ./include/trace/events/xen.h:
413:	int __traceiter_xen_cpu_load_idt(void *, const struct desc_ptr *);
442:	int __traceiter_xen_cpu_set_ldt(void *, const void *, unsigned int);
423:	int __traceiter_xen_cpu_write_gdt_entry(void *, struct desc_struct *, int, const void *, int);
399:	int __traceiter_xen_cpu_write_idt_entry(void *, gate_desc *, int, const gate_desc *);
382:	int __traceiter_xen_cpu_write_ldt_entry(void *, struct desc_struct *, int, u64);
31:	int __traceiter_xen_mc_batch(void *, enum paravirt_lazy_mode);
65:	int __traceiter_xen_mc_callback(void *, xen_mc_callback_fn_t, void *);
36:	int __traceiter_xen_mc_entry(void *, struct multicall_entry *, unsigned int);
55:	int __traceiter_xen_mc_entry_alloc(void *, size_t);
113:	int __traceiter_xen_mc_extend_args(void *, unsigned long, size_t, enum xen_mc_extend_args);
98:	int __traceiter_xen_mc_flush(void *, unsigned int, unsigned int, unsigned int);
84:	int __traceiter_xen_mc_flush_reason(void *, enum xen_mc_flush_reason);
32:	int __traceiter_xen_mc_issue(void *, enum paravirt_lazy_mode);
286:	int __traceiter_xen_mmu_alloc_ptpage(void *, struct mm_struct *, unsigned long, unsigned int, bool);
349:	int __traceiter_xen_mmu_flush_tlb_multi(void *, const struct cpumask *, struct mm_struct *, unsigned long, unsigned long);
339:	int __traceiter_xen_mmu_flush_tlb_one_user(void *, unsigned long);
336:	int __traceiter_xen_mmu_pgd_pin(void *, struct mm_struct *, pgd_t *);
337:	int __traceiter_xen_mmu_pgd_unpin(void *, struct mm_struct *, pgd_t *);
284:	int __traceiter_xen_mmu_ptep_modify_prot_commit(void *, struct mm_struct *, unsigned long, pte_t *, pte_t);
283:	int __traceiter_xen_mmu_ptep_modify_prot_start(void *, struct mm_struct *, unsigned long, pte_t *, pte_t);
304:	int __traceiter_xen_mmu_release_ptpage(void *, unsigned long, unsigned int, bool);
223:	int __traceiter_xen_mmu_set_p4d(void *, p4d_t *, p4d_t *, p4d_t);
158:	int __traceiter_xen_mmu_set_pmd(void *, pmd_t *, pmd_t);
154:	int __traceiter_xen_mmu_set_pte(void *, pte_t *, pte_t);
206:	int __traceiter_xen_mmu_set_pud(void *, pud_t *, pud_t);
367:	int __traceiter_xen_mmu_write_cr3(void *, bool, unsigned long);
413:	static void __bpf_trace_xen_cpu_load_idt(void *, const struct desc_ptr *);
423:	static void __bpf_trace_xen_cpu_write_gdt_entry(void *, struct desc_struct *, int, const void *, int);
399:	static void __bpf_trace_xen_cpu_write_idt_entry(void *, gate_desc *, int, const gate_desc *);
382:	static void __bpf_trace_xen_cpu_write_ldt_entry(void *, struct desc_struct *, int, u64);
15:	static void __bpf_trace_xen_mc__batch(void *, enum paravirt_lazy_mode);
65:	static void __bpf_trace_xen_mc_callback(void *, xen_mc_callback_fn_t, void *);
36:	static void __bpf_trace_xen_mc_entry(void *, struct multicall_entry *, unsigned int);
55:	static void __bpf_trace_xen_mc_entry_alloc(void *, size_t);
113:	static void __bpf_trace_xen_mc_extend_args(void *, unsigned long, size_t, enum xen_mc_extend_args);
98:	static void __bpf_trace_xen_mc_flush(void *, unsigned int, unsigned int, unsigned int);
134:	static void __bpf_trace_xen_mmu__set_pte(void *, pte_t *, pte_t);
286:	static void __bpf_trace_xen_mmu_alloc_ptpage(void *, struct mm_struct *, unsigned long, unsigned int, bool);
349:	static void __bpf_trace_xen_mmu_flush_tlb_multi(void *, const struct cpumask *, struct mm_struct *, unsigned long, unsigned long);
320:	static void __bpf_trace_xen_mmu_pgd(void *, struct mm_struct *, pgd_t *);
258:	static void __bpf_trace_xen_mmu_ptep_modify_prot(void *, struct mm_struct *, unsigned long, pte_t *, pte_t);
304:	static void __bpf_trace_xen_mmu_release_ptpage(void *, unsigned long, unsigned int, bool);
223:	static void __bpf_trace_xen_mmu_set_p4d(void *, p4d_t *, p4d_t *, p4d_t);
158:	static void __bpf_trace_xen_mmu_set_pmd(void *, pmd_t *, pmd_t);
206:	static void __bpf_trace_xen_mmu_set_pud(void *, pud_t *, pud_t);
367:	static void __bpf_trace_xen_mmu_write_cr3(void *, bool, unsigned long);
413:	static void perf_trace_xen_cpu_load_idt(void *, const struct desc_ptr *);
442:	static void perf_trace_xen_cpu_set_ldt(void *, const void *, unsigned int);
423:	static void perf_trace_xen_cpu_write_gdt_entry(void *, struct desc_struct *, int, const void *, int);
399:	static void perf_trace_xen_cpu_write_idt_entry(void *, gate_desc *, int, const gate_desc *);
382:	static void perf_trace_xen_cpu_write_ldt_entry(void *, struct desc_struct *, int, u64);
15:	static void perf_trace_xen_mc__batch(void *, enum paravirt_lazy_mode);
65:	static void perf_trace_xen_mc_callback(void *, xen_mc_callback_fn_t, void *);
36:	static void perf_trace_xen_mc_entry(void *, struct multicall_entry *, unsigned int);
55:	static void perf_trace_xen_mc_entry_alloc(void *, size_t);
113:	static void perf_trace_xen_mc_extend_args(void *, unsigned long, size_t, enum xen_mc_extend_args);
98:	static void perf_trace_xen_mc_flush(void *, unsigned int, unsigned int, unsigned int);
84:	static void perf_trace_xen_mc_flush_reason(void *, enum xen_mc_flush_reason);
134:	static void perf_trace_xen_mmu__set_pte(void *, pte_t *, pte_t);
286:	static void perf_trace_xen_mmu_alloc_ptpage(void *, struct mm_struct *, unsigned long, unsigned int, bool);
349:	static void perf_trace_xen_mmu_flush_tlb_multi(void *, const struct cpumask *, struct mm_struct *, unsigned long, unsigned long);
339:	static void perf_trace_xen_mmu_flush_tlb_one_user(void *, unsigned long);
320:	static void perf_trace_xen_mmu_pgd(void *, struct mm_struct *, pgd_t *);
258:	static void perf_trace_xen_mmu_ptep_modify_prot(void *, struct mm_struct *, unsigned long, pte_t *, pte_t);
304:	static void perf_trace_xen_mmu_release_ptpage(void *, unsigned long, unsigned int, bool);
223:	static void perf_trace_xen_mmu_set_p4d(void *, p4d_t *, p4d_t *, p4d_t);
158:	static void perf_trace_xen_mmu_set_pmd(void *, pmd_t *, pmd_t);
206:	static void perf_trace_xen_mmu_set_pud(void *, pud_t *, pud_t);
367:	static void perf_trace_xen_mmu_write_cr3(void *, bool, unsigned long);
413:	static void trace_event_raw_event_xen_cpu_load_idt(void *, const struct desc_ptr *);
442:	static void trace_event_raw_event_xen_cpu_set_ldt(void *, const void *, unsigned int);
423:	static void trace_event_raw_event_xen_cpu_write_gdt_entry(void *, struct desc_struct *, int, const void *, int);
399:	static void trace_event_raw_event_xen_cpu_write_idt_entry(void *, gate_desc *, int, const gate_desc *);
382:	static void trace_event_raw_event_xen_cpu_write_ldt_entry(void *, struct desc_struct *, int, u64);
15:	static void trace_event_raw_event_xen_mc__batch(void *, enum paravirt_lazy_mode);
65:	static void trace_event_raw_event_xen_mc_callback(void *, xen_mc_callback_fn_t, void *);
36:	static void trace_event_raw_event_xen_mc_entry(void *, struct multicall_entry *, unsigned int);
55:	static void trace_event_raw_event_xen_mc_entry_alloc(void *, size_t);
113:	static void trace_event_raw_event_xen_mc_extend_args(void *, unsigned long, size_t, enum xen_mc_extend_args);
98:	static void trace_event_raw_event_xen_mc_flush(void *, unsigned int, unsigned int, unsigned int);
84:	static void trace_event_raw_event_xen_mc_flush_reason(void *, enum xen_mc_flush_reason);
134:	static void trace_event_raw_event_xen_mmu__set_pte(void *, pte_t *, pte_t);
286:	static void trace_event_raw_event_xen_mmu_alloc_ptpage(void *, struct mm_struct *, unsigned long, unsigned int, bool);
349:	static void trace_event_raw_event_xen_mmu_flush_tlb_multi(void *, const struct cpumask *, struct mm_struct *, unsigned long, unsigned long);
339:	static void trace_event_raw_event_xen_mmu_flush_tlb_one_user(void *, unsigned long);
320:	static void trace_event_raw_event_xen_mmu_pgd(void *, struct mm_struct *, pgd_t *);
258:	static void trace_event_raw_event_xen_mmu_ptep_modify_prot(void *, struct mm_struct *, unsigned long, pte_t *, pte_t);
304:	static void trace_event_raw_event_xen_mmu_release_ptpage(void *, unsigned long, unsigned int, bool);
223:	static void trace_event_raw_event_xen_mmu_set_p4d(void *, p4d_t *, p4d_t *, p4d_t);
158:	static void trace_event_raw_event_xen_mmu_set_pmd(void *, pmd_t *, pmd_t);
206:	static void trace_event_raw_event_xen_mmu_set_pud(void *, pud_t *, pud_t);
367:	static void trace_event_raw_event_xen_mmu_write_cr3(void *, bool, unsigned long);
413:	static enum print_line_t trace_raw_output_xen_cpu_load_idt(struct trace_iterator *, int, struct trace_event *);
442:	static enum print_line_t trace_raw_output_xen_cpu_set_ldt(struct trace_iterator *, int, struct trace_event *);
423:	static enum print_line_t trace_raw_output_xen_cpu_write_gdt_entry(struct trace_iterator *, int, struct trace_event *);
399:	static enum print_line_t trace_raw_output_xen_cpu_write_idt_entry(struct trace_iterator *, int, struct trace_event *);
382:	static enum print_line_t trace_raw_output_xen_cpu_write_ldt_entry(struct trace_iterator *, int, struct trace_event *);
15:	static enum print_line_t trace_raw_output_xen_mc__batch(struct trace_iterator *, int, struct trace_event *);
65:	static enum print_line_t trace_raw_output_xen_mc_callback(struct trace_iterator *, int, struct trace_event *);
36:	static enum print_line_t trace_raw_output_xen_mc_entry(struct trace_iterator *, int, struct trace_event *);
55:	static enum print_line_t trace_raw_output_xen_mc_entry_alloc(struct trace_iterator *, int, struct trace_event *);
113:	static enum print_line_t trace_raw_output_xen_mc_extend_args(struct trace_iterator *, int, struct trace_event *);
98:	static enum print_line_t trace_raw_output_xen_mc_flush(struct trace_iterator *, int, struct trace_event *);
84:	static enum print_line_t trace_raw_output_xen_mc_flush_reason(struct trace_iterator *, int, struct trace_event *);
134:	static enum print_line_t trace_raw_output_xen_mmu__set_pte(struct trace_iterator *, int, struct trace_event *);
286:	static enum print_line_t trace_raw_output_xen_mmu_alloc_ptpage(struct trace_iterator *, int, struct trace_event *);
349:	static enum print_line_t trace_raw_output_xen_mmu_flush_tlb_multi(struct trace_iterator *, int, struct trace_event *);
339:	static enum print_line_t trace_raw_output_xen_mmu_flush_tlb_one_user(struct trace_iterator *, int, struct trace_event *);
320:	static enum print_line_t trace_raw_output_xen_mmu_pgd(struct trace_iterator *, int, struct trace_event *);
258:	static enum print_line_t trace_raw_output_xen_mmu_ptep_modify_prot(struct trace_iterator *, int, struct trace_event *);
304:	static enum print_line_t trace_raw_output_xen_mmu_release_ptpage(struct trace_iterator *, int, struct trace_event *);
223:	static enum print_line_t trace_raw_output_xen_mmu_set_p4d(struct trace_iterator *, int, struct trace_event *);
158:	static enum print_line_t trace_raw_output_xen_mmu_set_pmd(struct trace_iterator *, int, struct trace_event *);
206:	static enum print_line_t trace_raw_output_xen_mmu_set_pud(struct trace_iterator *, int, struct trace_event *);
367:	static enum print_line_t trace_raw_output_xen_mmu_write_cr3(struct trace_iterator *, int, struct trace_event *);

File arch/x86/crypto/aesni-intel_glue.c:
333:	static int aes_set_key(struct crypto_tfm *, const u8 *, unsigned int);
312:	static int aes_set_key_common(void *, const u8 *, unsigned int, struct crypto_tfm *);
476:	static void aesni_ctr_enc_avx_tfm(struct crypto_aes_ctx *, u8 *, const u8 *, unsigned int, u8 *);
352:	static void aesni_decrypt(struct crypto_tfm *, u8 *, const u8 *);
339:	static void aesni_encrypt(struct crypto_tfm *, u8 *, const u8 *);
1118:	static void aesni_exit(void);
1067:	static int aesni_init(void);
365:	static int aesni_skcipher_setkey(struct crypto_skcipher *, const u8 *, unsigned int);
548:	static void aesni_xts_dec(const void *, u8 *, const u8 *, le128 *);
558:	static void aesni_xts_dec32(const void *, u8 *, const u8 *, le128 *);
543:	static void aesni_xts_enc(const void *, u8 *, const u8 *, le128 *);
553:	static void aesni_xts_enc32(const void *, u8 *, const u8 *, le128 *);
438:	static int cbc_decrypt(struct skcipher_request *);
416:	static int cbc_encrypt(struct skcipher_request *);
651:	static int common_rfc4106_set_authsize(struct crypto_aead *, unsigned int);
631:	static int common_rfc4106_set_key(struct crypto_aead *, const u8 *, unsigned int);
493:	static int ctr_crypt(struct skcipher_request *);
394:	static int ecb_decrypt(struct skcipher_request *);
372:	static int ecb_encrypt(struct skcipher_request *);
685:	static int gcmaes_crypt_by_sg(bool, struct aead_request *, unsigned int, u8 *, u8 *, void *);
1004:	static int generic_gcmaes_decrypt(struct aead_request *);
988:	static int generic_gcmaes_encrypt(struct aead_request *);
666:	static int generic_gcmaes_set_authsize(struct crypto_aead *, unsigned int);
978:	static int generic_gcmaes_set_key(struct crypto_aead *, const u8 *, unsigned int);
856:	static int helper_rfc4106_decrypt(struct aead_request *);
829:	static int helper_rfc4106_encrypt(struct aead_request *);
612:	static int rfc4106_set_hash_subkey(u8 *, const u8 *, unsigned int);
519:	static int xts_aesni_setkey(struct crypto_skcipher *, const u8 *, unsigned int);
600:	static int xts_decrypt(struct skcipher_request *);
589:	static int xts_encrypt(struct skcipher_request *);

File arch/x86/crypto/glue_helper.c:
98:	int glue_cbc_decrypt_req_128bit(const struct common_glue_ctx *, struct skcipher_request *);
66:	int glue_cbc_encrypt_req_128bit(const common_glue_func_t, struct skcipher_request *);
159:	int glue_ctr_req_128bit(const struct common_glue_ctx *, struct skcipher_request *);
21:	int glue_ecb_req_128bit(const struct common_glue_ctx *, struct skcipher_request *);
362:	void glue_xts_crypt_128bit_one(const void *, u8 *, const u8 *, le128 *, common_glue_func_t);
265:	int glue_xts_req_128bit(const struct common_glue_ctx *, struct skcipher_request *, common_glue_func_t, void *, void *, bool);
229:	static unsigned int __glue_xts_req_128bit(const struct common_glue_ctx *, void *, struct skcipher_walk *);

File arch/x86/crypto/sha1_ssse3_glue.c:
181:	static bool avx2_usable(void);
152:	static bool avx_usable(void);
191:	static void sha1_apply_transform_avx2(struct sha1_state *, const u8 *, int);
213:	static int sha1_avx2_final(struct shash_desc *, u8 *);
207:	static int sha1_avx2_finup(struct shash_desc *, const u8 *, unsigned int, u8 *);
201:	static int sha1_avx2_update(struct shash_desc *, const u8 *, unsigned int);
131:	static int sha1_avx_final(struct shash_desc *, u8 *);
125:	static int sha1_avx_finup(struct shash_desc *, const u8 *, unsigned int, u8 *);
119:	static int sha1_avx_update(struct shash_desc *, const u8 *, unsigned int);
51:	static int sha1_finup(struct shash_desc *, const u8 *, unsigned int, u8 *, sha1_block_fn *);
263:	static int sha1_ni_final(struct shash_desc *, u8 *);
257:	static int sha1_ni_finup(struct shash_desc *, const u8 *, unsigned int, u8 *);
251:	static int sha1_ni_update(struct shash_desc *, const u8 *, unsigned int);
82:	static int sha1_ssse3_final(struct shash_desc *, u8 *);
75:	static int sha1_ssse3_finup(struct shash_desc *, const u8 *, unsigned int, u8 *);
330:	static void sha1_ssse3_mod_fini(void);
302:	static int sha1_ssse3_mod_init(void);
69:	static int sha1_ssse3_update(struct shash_desc *, const u8 *, unsigned int);
29:	static int sha1_update(struct shash_desc *, const u8 *, unsigned int, sha1_block_fn *);
170:	static void unregister_sha1_avx(void);
241:	static void unregister_sha1_avx2(void);
110:	static void unregister_sha1_ssse3(void);

File arch/x86/crypto/sha256_ssse3_glue.c:
46:	static int _sha256_update(struct shash_desc *, const u8 *, unsigned int, sha256_block_fn *);
272:	static bool avx2_usable(void);
196:	static bool avx_usable(void);
237:	static int sha256_avx2_final(struct shash_desc *, u8 *);
231:	static int sha256_avx2_finup(struct shash_desc *, const u8 *, unsigned int, u8 *);
225:	static int sha256_avx2_update(struct shash_desc *, const u8 *, unsigned int);
161:	static int sha256_avx_final(struct shash_desc *, u8 *);
155:	static int sha256_avx_finup(struct shash_desc *, const u8 *, unsigned int, u8 *);
149:	static int sha256_avx_update(struct shash_desc *, const u8 *, unsigned int);
68:	static int sha256_finup(struct shash_desc *, const u8 *, unsigned int, u8 *, sha256_block_fn *);
312:	static int sha256_ni_final(struct shash_desc *, u8 *);
306:	static int sha256_ni_finup(struct shash_desc *, const u8 *, unsigned int, u8 *);
300:	static int sha256_ni_update(struct shash_desc *, const u8 *, unsigned int);
96:	static int sha256_ssse3_final(struct shash_desc *, u8 *);
89:	static int sha256_ssse3_finup(struct shash_desc *, const u8 *, unsigned int, u8 *);
395:	static void sha256_ssse3_mod_fini(void);
367:	static int sha256_ssse3_mod_init(void);
83:	static int sha256_ssse3_update(struct shash_desc *, const u8 *, unsigned int);
215:	static void unregister_sha256_avx(void);
289:	static void unregister_sha256_avx2(void);
139:	static void unregister_sha256_ssse3(void);

File arch/x86/entry/common.c:
200:	long do_SYSENTER_32(struct pt_regs *);
148:	long do_fast_syscall_32(struct pt_regs *);
82:	void do_int80_syscall_32(struct pt_regs *);
39:	void do_syscall_64(unsigned long, struct pt_regs *);
100:	static bool __do_fast_syscall_32(struct pt_regs *);
212:	static long __do_sys_ni_syscall(const struct pt_regs *);

File arch/x86/entry/vdso/vdso32-setup.c:
54:	int sysenter_setup(void);
91:	static int ia32_binfmt_init(void);
31:	static int vdso32_setup(char *);

File arch/x86/entry/vdso/vma.c:
35:	struct vdso_data *arch_get_vdso_data(void *);
406:	int arch_setup_additional_pages(struct linux_binprm *, int);
415:	int compat_arch_setup_additional_pages(struct linux_binprm *, int);
47:	void init_vdso_image(const struct vdso_image *);
370:	int map_vdso_once(const struct vdso_image *, unsigned long);
142:	int vdso_join_timens(struct task_struct *, struct time_namespace *);
447:	static int init_vdso(void);
263:	static int map_vdso(const struct vdso_image *, unsigned long);
329:	static unsigned long vdso_addr(unsigned long, unsigned int);
59:	static vm_fault_t vdso_fault(const struct vm_special_mapping *, struct vm_area_struct *, struct vm_fault *);
89:	static int vdso_mremap(const struct vm_special_mapping *, struct vm_area_struct *);
440:	static int vdso_setup(char *);
166:	static vm_fault_t vvar_fault(const struct vm_special_mapping *, struct vm_area_struct *, struct vm_fault *);
104:	static int vvar_mremap(const struct vm_special_mapping *, struct vm_area_struct *);

File arch/x86/entry/vsyscall/vsyscall_64.c:
120:	bool emulate_vsyscall(unsigned long, struct pt_regs *, unsigned long);
316:	struct vm_area_struct *get_gate_vma(struct mm_struct *);
327:	int in_gate_area(struct mm_struct *, unsigned long);
342:	int in_gate_area_no_mm(unsigned long);
376:	void map_vsyscall(void);
357:	void set_vsyscall_pgtable_user_bits(pgd_t *);
301:	static const char *gate_vma_name(struct vm_area_struct *);
54:	static int vsyscall_setup(char *);
73:	static void warn_bad_vsyscall(const char *, struct pt_regs *, const char *);
99:	static bool write_ok_or_segv(unsigned long, size_t);

File arch/x86/events/amd/core.c:
1038:	void amd_pmu_disable_virt(void);
1026:	void amd_pmu_enable_virt(void);
996:	int amd_pmu_init(void);
941:	static int amd_core_pmu_init(void);
900:	static ssize_t amd_event_sysfs_show(char *, u64);
696:	static struct event_constraint *amd_get_event_constraints(struct cpu_hw_events *, int, struct perf_event *);
805:	static struct event_constraint *amd_get_event_constraints_f15h(struct cpu_hw_events *, int, struct perf_event *);
880:	static struct event_constraint *amd_get_event_constraints_f17h(struct cpu_hw_events *, int, struct perf_event *);
281:	static int amd_pmu_addr_offset(int, bool);
560:	static void amd_pmu_cpu_dead(int);
513:	static int amd_pmu_cpu_prepare(int);
529:	static void amd_pmu_cpu_starting(int);
608:	static void amd_pmu_disable_all(void);
637:	static void amd_pmu_disable_event(struct perf_event *);
260:	static u64 amd_pmu_event_map(int);
672:	static int amd_pmu_handle_irq(struct pt_regs *);
361:	static int amd_pmu_hw_config(struct perf_event *);
588:	static void amd_pmu_wait_on_overflow(int);
708:	static void amd_put_event_constraints(struct cpu_hw_events *, struct perf_event *);
891:	static void amd_put_event_constraints_f17h(struct cpu_hw_events *, struct perf_event *);
719:	static ssize_t cmask_show(struct device *, struct device_attribute *, char *);
717:	static ssize_t edge_show(struct device *, struct device_attribute *, char *);
715:	static ssize_t event_show(struct device *, struct device_attribute *, char *);
718:	static ssize_t inv_show(struct device *, struct device_attribute *, char *);
716:	static ssize_t umask_show(struct device *, struct device_attribute *, char *);

File arch/x86/events/amd/ibs.c:
829:	u32 get_ibs_caps(void);
1045:	static int amd_ibs_init(void);
994:	static void clear_APIC_ibs(void);
527:	static ssize_t cnt_ctl_show(struct device *, struct device_attribute *, char *);
921:	static void force_ibs_eilvt_setup(void);
330:	static u64 get_ibs_fetch_count(u64);
335:	static u64 get_ibs_op_count(u64);
767:	static void perf_event_ibs_init(void);
491:	static int perf_ibs_add(struct perf_event *, int);
509:	static void perf_ibs_del(struct perf_event *, int);
356:	static void perf_ibs_event_update(struct perf_ibs *, struct perf_event *, u64 *);
590:	static int perf_ibs_handle_irq(struct perf_ibs *, struct pt_regs *);
258:	static int perf_ibs_init(struct perf_event *);
719:	static int perf_ibs_nmi_handler(unsigned int, struct pt_regs *);
736:	static int perf_ibs_pmu_init(struct perf_ibs *, char *);
524:	static void perf_ibs_read(struct perf_event *);
1017:	static void perf_ibs_resume(void);
406:	static void perf_ibs_start(struct perf_event *, int);
437:	static void perf_ibs_stop(struct perf_event *, int);
1011:	static int perf_ibs_suspend(void);
526:	static ssize_t rand_en_show(struct device *, struct device_attribute *, char *);
979:	static void setup_APIC_ibs(void);
879:	static int setup_ibs_ctl(int);
1039:	static int x86_pmu_amd_ibs_dying_cpu(unsigned int);
1003:	static int x86_pmu_amd_ibs_starting_cpu(unsigned int);

File arch/x86/events/amd/iommu.c:
379:	static int _init_events_attrs(void);
133:	static ssize_t _iommu_cpumask_show(struct device *, struct device_attribute *, char *);
86:	static ssize_t _iommu_event_show(struct device *, struct device_attribute *, char *);
454:	static int amd_iommu_pc_init(void);
50:	static ssize_t csource_show(struct device *, struct device_attribute *, char *);
54:	static ssize_t devid_mask_show(struct device *, struct device_attribute *, char *);
51:	static ssize_t devid_show(struct device *, struct device_attribute *, char *);
55:	static ssize_t domid_mask_show(struct device *, struct device_attribute *, char *);
52:	static ssize_t domid_show(struct device *, struct device_attribute *, char *);
417:	static int init_one_iommu(unsigned int);
56:	static ssize_t pasid_mask_show(struct device *, struct device_attribute *, char *);
53:	static ssize_t pasid_show(struct device *, struct device_attribute *, char *);
347:	static int perf_iommu_add(struct perf_event *, int);
364:	static void perf_iommu_del(struct perf_event *, int);
236:	static void perf_iommu_enable_event(struct perf_event *);
205:	static int perf_iommu_event_init(struct perf_event *);
308:	static void perf_iommu_read(struct perf_event *);
276:	static void perf_iommu_start(struct perf_event *, int);
328:	static void perf_iommu_stop(struct perf_event *, int);

File arch/x86/events/amd/uncore.c:
292:	static ssize_t __uncore_coreid_show(struct device *, struct device_attribute *, char *);
297:	static ssize_t __uncore_enallcores_show(struct device *, struct device_attribute *, char *);
296:	static ssize_t __uncore_enallslices_show(struct device *, struct device_attribute *, char *);
288:	static ssize_t __uncore_event12_show(struct device *, struct device_attribute *, char *);
289:	static ssize_t __uncore_event14_show(struct device *, struct device_attribute *, char *);
290:	static ssize_t __uncore_event8_show(struct device *, struct device_attribute *, char *);
298:	static ssize_t __uncore_sliceid_show(struct device *, struct device_attribute *, char *);
293:	static ssize_t __uncore_slicemask_show(struct device *, struct device_attribute *, char *);
295:	static ssize_t __uncore_threadmask2_show(struct device *, struct device_attribute *, char *);
294:	static ssize_t __uncore_threadmask8_show(struct device *, struct device_attribute *, char *);
291:	static ssize_t __uncore_umask_show(struct device *, struct device_attribute *, char *);
126:	static int amd_uncore_add(struct perf_event *, int);
250:	static ssize_t amd_uncore_attr_show_cpumask(struct device *, struct device_attribute *, char *);
546:	static int amd_uncore_cpu_dead(unsigned int);
523:	static int amd_uncore_cpu_down_prepare(unsigned int);
486:	static int amd_uncore_cpu_online(unsigned int);
439:	static int amd_uncore_cpu_starting(unsigned int);
371:	static int amd_uncore_cpu_up_prepare(unsigned int);
167:	static void amd_uncore_del(struct perf_event *, int);
208:	static int amd_uncore_event_init(struct perf_event *);
413:	static struct amd_uncore *amd_uncore_find_online_sibling(struct amd_uncore *, struct amd_uncore **);
557:	static int amd_uncore_init(void);
82:	static void amd_uncore_read(struct perf_event *);
101:	static void amd_uncore_start(struct perf_event *, int);
113:	static void amd_uncore_stop(struct perf_event *, int);
72:	static struct amd_uncore *event_to_amd_uncore(struct perf_event *);
534:	static void uncore_dead(unsigned int, struct amd_uncore **);
497:	static void uncore_down_prepare(unsigned int, struct amd_uncore **);
475:	static void uncore_online(unsigned int, struct amd_uncore **);

File arch/x86/events/core.c:
2496:	void arch_perf_update_userpage(struct perf_event *, struct perf_event_mmap_page *, u64);
1797:	ssize_t events_ht_sysfs_show(struct device *, struct device_attribute *, char *);
1780:	ssize_t events_sysfs_show(struct device *, struct device_attribute *, char *);
320:	void hw_perf_lbr_event_destroy(struct perf_event *);
916:	int perf_assign_events(struct event_constraint **, int, int, int, int, int *);
2546:	void perf_callchain_kernel(struct perf_callchain_entry_ctx *, struct pt_regs *);
2649:	void perf_callchain_user(struct perf_callchain_entry_ctx *, struct pt_regs *);
2437:	void perf_check_microcode(void);
1485:	void perf_event_print_debug(void);
1673:	void perf_events_lapic_init(void);
2759:	void perf_get_x86_pmu_capability(struct x86_pmu_capability *);
2729:	unsigned long perf_instruction_pointer(struct pt_regs *);
2737:	unsigned long perf_misc_flags(struct pt_regs *);
406:	int x86_add_exclusive(unsigned int);
436:	void x86_del_exclusive(unsigned int);
1870:	ssize_t x86_event_sysfs_show(char *, u64, u64);
722:	struct pmu *x86_get_pmu(unsigned int);
1315:	int x86_perf_event_set_period(struct perf_event *);
100:	u64 x86_perf_event_update(struct perf_event *);
1219:	int x86_perf_rdpmc_index(struct perf_event *);
651:	void x86_pmu_disable_all(void);
702:	void x86_pmu_enable_all(int);
1389:	void x86_pmu_enable_event(struct perf_event *);
1624:	int x86_pmu_handle_irq(struct pt_regs *);
536:	int x86_pmu_hw_config(struct perf_event *);
518:	int x86_pmu_max_precise(void);
1545:	void x86_pmu_stop(struct perf_event *, int);
392:	void x86_release_hardware(void);
370:	int x86_reserve_hardware(void);
934:	int x86_schedule_events(struct cpu_hw_events *, int, int *);
449:	int x86_setup_perfctr(struct perf_event *);
1939:	static void _x86_pmu_read(struct perf_event *);
2164:	static struct cpu_hw_events *allocate_fake_cpuc(void);
227:	static bool check_hw_exists(void);
1093:	static int collect_event(struct cpu_hw_events *, struct perf_event *, int, int);
1116:	static int collect_events(struct cpu_hw_events *, struct perf_event *, bool);
2341:	static ssize_t get_attr_rdpmc(struct device *, struct device_attribute *, char *);
2577:	static unsigned long get_segment_base(unsigned int);
314:	static void hw_perf_event_destroy(struct perf_event *);
1944:	static int init_hw_perf_events(void);
1852:	static umode_t is_visible(struct kobject *, struct attribute *, int);
2399:	static ssize_t max_precise_show(struct device *, struct device_attribute *, char *);
1685:	static int perf_event_nmi_handler(unsigned int, struct pt_regs *);
181:	static bool reserve_pmc_hardware(void);
2348:	static ssize_t set_attr_rdpmc(struct device *, struct device_attribute *, const char *, size_t);
1402:	static int x86_pmu_add(struct perf_event *, int);
2456:	static int x86_pmu_aux_output_match(struct perf_event *);
2088:	static void x86_pmu_cancel_txn(struct pmu *);
2443:	static int x86_pmu_check_period(struct perf_event *, u64);
2118:	static int x86_pmu_commit_txn(struct pmu *);
1723:	static int x86_pmu_dead_cpu(unsigned int);
1568:	static void x86_pmu_del(struct perf_event *, int);
685:	static void x86_pmu_disable(struct pmu *);
1749:	static int x86_pmu_dying_cpu(unsigned int);
1237:	static void x86_pmu_enable(struct pmu *);
2328:	static int x86_pmu_event_idx(struct perf_event *);
2252:	static int x86_pmu_event_init(struct perf_event *);
2297:	static void x86_pmu_event_mapped(struct perf_event *, struct mm_struct *);
2318:	static void x86_pmu_event_unmapped(struct perf_event *, struct mm_struct *);
148:	static int x86_pmu_extra_regs(u64, struct perf_event *);
1730:	static int x86_pmu_online_cpu(unsigned int);
1711:	static int x86_pmu_prepare_cpu(unsigned int);
2053:	static void x86_pmu_read(struct perf_event *);
2426:	static void x86_pmu_sched_task(struct perf_event_context *, bool);
1460:	static void x86_pmu_start(struct perf_event *, int);
2067:	static void x86_pmu_start_txn(struct pmu *, unsigned int);
1742:	static int x86_pmu_starting_cpu(unsigned int);
1912:	static void x86_pmu_static_call_update(void);
2431:	static void x86_pmu_swap_task_ctx(struct perf_event_context *, struct perf_event_context *);

File arch/x86/events/intel/../perf_event.h:
1010:	static void x86_pmu_disable_event(struct perf_event *);

File arch/x86/events/intel/bts.c:
353:	void intel_bts_disable_local(void);
333:	void intel_bts_enable_local(void);
444:	int intel_bts_interrupt(void);
226:	static void __bts_event_start(struct perf_event *);
133:	static void bts_buffer_free_aux(void *);
369:	static int bts_buffer_reset(struct bts_buffer *, struct perf_output_handle *);
80:	static void *bts_buffer_setup_aux(struct perf_event *, void **, int, bool);
513:	static int bts_event_add(struct perf_event *, int);
508:	static void bts_event_del(struct perf_event *, int);
536:	static void bts_event_destroy(struct perf_event *);
542:	static int bts_event_init(struct perf_event *);
578:	static void bts_event_read(struct perf_event *);
254:	static void bts_event_start(struct perf_event *, int);
299:	static void bts_event_stop(struct perf_event *, int);
582:	static int bts_init(void);
183:	static void bts_update(struct bts_ctx *);

File arch/x86/events/intel/core.c:
4171:	void intel_cpuc_finish(struct cpu_hw_events *);
4012:	int intel_cpuc_prepare(struct cpu_hw_events *, int);
3972:	ssize_t intel_event_sysfs_show(char *, u64);
4917:	int intel_pmu_init(void);
2530:	int intel_pmu_save_and_restart(struct perf_event *);
3684:	struct perf_guest_switch_msr *perf_guest_get_msrs(int *);
3057:	struct event_constraint *x86_get_event_constraints(struct cpu_hw_events *, int, struct perf_event *);
2304:	static void __icl_update_topdown_event(struct perf_event *, u64, u64, u64, u64);
1969:	static void __intel_pmu_disable_all(void);
1986:	static void __intel_pmu_enable_all(bool, int);
2932:	static struct event_constraint *__intel_shared_reg_get_constraints(struct cpu_hw_events *, struct perf_event *, struct hw_perf_event_extra *);
3956:	static ssize_t any_show(struct device *, struct device_attribute *, char *);
3936:	static u64 bdw_limit_period(struct perf_event *, u64);
4790:	static ssize_t branches_show(struct device *, struct device_attribute *, char *);
4465:	static bool check_msr(unsigned long, u64);
3958:	static ssize_t cmask_show(struct device *, struct device_attribute *, char *);
3731:	static struct perf_guest_switch_msr *core_guest_get_msrs(int *);
3765:	static void core_pmu_enable_all(int);
3759:	static void core_pmu_enable_event(struct perf_event *);
3546:	static int core_pmu_hw_config(struct perf_event *);
4855:	static umode_t default_is_visible(struct kobject *, struct attribute *, int);
2131:	static void disable_counter_freeze(void);
3183:	static struct event_constraint *dyn_constraint(struct cpu_hw_events *, struct event_constraint *, int);
3954:	static ssize_t edge_show(struct device *, struct device_attribute *, char *);
2125:	static void enable_counter_freeze(void);
3952:	static ssize_t event_show(struct device *, struct device_attribute *, char *);
4849:	static umode_t exra_is_visible(struct kobject *, struct attribute *, int);
5620:	static int fixup_ht_bug(void);
4057:	static void flip_smm_bit(void *);
4148:	static void free_excl_cntrs(struct cpu_hw_events *);
4705:	static ssize_t freeze_on_smi_show(struct device *, struct device_attribute *, char *);
4714:	static ssize_t freeze_on_smi_store(struct device *, struct device_attribute *, const char *, size_t);
4220:	static ssize_t frontend_show(struct device *, struct device_attribute *, char *);
3864:	static struct event_constraint *glp_get_event_constraints(struct cpu_hw_events *, int, struct perf_event *);
2585:	static int handle_pmi_common(struct pt_regs *, u64);
3831:	static struct event_constraint *hsw_get_event_constraints(struct cpu_hw_events *, int, struct perf_event *);
3781:	static int hsw_hw_config(struct perf_event *);
3849:	static struct event_constraint *icl_get_event_constraints(struct cpu_hw_events *, int, struct perf_event *);
2247:	static int icl_set_topdown_event_period(struct perf_event *);
2353:	static u64 icl_update_topdown_event(struct perf_event *);
3960:	static ssize_t in_tx_cp_show(struct device *, struct device_attribute *, char *);
3959:	static ssize_t in_tx_show(struct device *, struct device_attribute *, char *);
4532:	static void intel_arch_events_quirk(void);
4413:	static void intel_check_pebs_isolation(void);
4355:	static void intel_clovertown_quirk(void);
3129:	static void intel_commit_scheduling(struct cpu_hw_events *, int, int);
4578:	static void intel_counter_freezing_quirk(void);
3312:	static struct event_constraint *intel_get_event_constraints(struct cpu_hw_events *, int, struct perf_event *);
3699:	static struct perf_guest_switch_msr *intel_guest_get_msrs(int *);
4608:	static void intel_ht_bug(void);
4544:	static void intel_nehalem_quirk(void);
3412:	static void intel_pebs_aliases_core2(struct perf_event *);
3492:	static void intel_pebs_aliases_ivb(struct perf_event *);
3499:	static void intel_pebs_aliases_skl(struct perf_event *);
3440:	static void intel_pebs_aliases_snb(struct perf_event *);
4418:	static void intel_pebs_isolation_quirk(void);
2701:	static int intel_perf_counter_freezing_setup(char *);
2518:	static void intel_pmu_add_event(struct perf_event *);
4208:	static int intel_pmu_aux_output_match(struct perf_event *);
3519:	static int intel_pmu_bts_config(struct perf_event *);
4203:	static int intel_pmu_check_period(struct perf_event *, u64);
4185:	static void intel_pmu_cpu_dead(int);
4163:	static void intel_pmu_cpu_dying(int);
4052:	static int intel_pmu_cpu_prepare(int);
4070:	static void intel_pmu_cpu_starting(int);
2239:	static void intel_pmu_del_event(struct perf_event *);
1979:	static void intel_pmu_disable_all(void);
2203:	static void intel_pmu_disable_event(struct perf_event *);
2177:	static void intel_pmu_disable_fixed(struct perf_event *);
2005:	static void intel_pmu_enable_all(int);
2487:	static void intel_pmu_enable_event(struct perf_event *);
2434:	static void intel_pmu_enable_fixed(struct perf_event *);
383:	static u64 intel_pmu_event_map(int);
2793:	static int intel_pmu_handle_irq(struct pt_regs *);
2720:	static int intel_pmu_handle_irq_v4(struct pt_regs *);
3556:	static int intel_pmu_hw_config(struct perf_event *);
2085:	static void intel_pmu_nhm_enable_all(int);
2025:	static void intel_pmu_nhm_workaround(void);
2424:	static void intel_pmu_read_event(struct perf_event *);
2547:	static void intel_pmu_reset(void);
4190:	static void intel_pmu_sched_task(struct perf_event_context *, bool);
4197:	static void intel_pmu_swap_task_ctx(struct perf_event_context *, struct perf_event_context *);
3398:	static void intel_put_event_constraints(struct cpu_hw_events *, struct perf_event *);
4514:	static void intel_sandybridge_quirk(void);
2092:	static void intel_set_tfa(struct cpu_hw_events *, bool);
4437:	static void intel_snb_check_microcode(void);
3100:	static void intel_start_scheduling(struct cpu_hw_events *);
3156:	static void intel_stop_scheduling(struct cpu_hw_events *);
2102:	static void intel_tfa_commit_scheduling(struct cpu_hw_events *, int, int);
2111:	static void intel_tfa_pmu_enable_all(int);
3957:	static ssize_t inv_show(struct device *, struct device_attribute *, char *);
4843:	static umode_t lbr_is_visible(struct kobject *, struct attribute *, int);
4218:	static ssize_t ldlat_show(struct device *, struct device_attribute *, char *);
3947:	static u64 nhm_limit_period(struct perf_event *, u64);
4216:	static ssize_t offcore_rsp_show(struct device *, struct device_attribute *, char *);
3955:	static ssize_t pc_show(struct device *, struct device_attribute *, char *);
4837:	static umode_t pebs_is_visible(struct kobject *, struct attribute *, int);
4806:	static ssize_t pmu_name_show(struct device *, struct device_attribute *, char *);
4763:	static ssize_t set_sysctl_tfa(struct device *, struct device_attribute *, const char *, size_t);
4756:	static ssize_t show_sysctl_tfa(struct device *, struct device_attribute *, char *);
3904:	static struct event_constraint *tfa_get_event_constraints(struct cpu_hw_events *, int, struct perf_event *);
3879:	static struct event_constraint *tnt_get_event_constraints(struct cpu_hw_events *, int, struct perf_event *);
4831:	static umode_t tsx_is_visible(struct kobject *, struct attribute *, int);
3953:	static ssize_t umask_show(struct device *, struct device_attribute *, char *);
2328:	static void update_saved_topdown_regs(struct perf_event *, u64, u64);
4744:	static void update_tfa_sched(void *);

File arch/x86/events/intel/ds.c:
276:	void fini_debug_store_on_cpu(int);
264:	void init_debug_store_on_cpu(int);
2013:	void intel_ds_init(void);
873:	struct event_constraint *intel_pebs_constraints(struct perf_event *);
1654:	void intel_pmu_auto_reload_read(struct perf_event *);
564:	void intel_pmu_disable_bts(void);
581:	int intel_pmu_drain_bts_buffer(void);
544:	void intel_pmu_enable_bts(u64);
1060:	void intel_pmu_pebs_add(struct perf_event *);
82:	void intel_pmu_pebs_data_source_nhm(void);
89:	void intel_pmu_pebs_data_source_skl(bool);
1144:	void intel_pmu_pebs_del(struct perf_event *);
1159:	void intel_pmu_pebs_disable(struct perf_event *);
1192:	void intel_pmu_pebs_disable_all(void);
1103:	void intel_pmu_pebs_enable(struct perf_event *);
1184:	void intel_pmu_pebs_enable_all(void);
912:	void intel_pmu_pebs_sched_task(struct perf_event_context *, bool);
2106:	void perf_restore_debug_store(void);
449:	void release_ds_buffers(void);
474:	void reserve_ds_buffers(void);
391:	static int alloc_bts_buffer(int);
335:	static int alloc_pebs_buffer(int);
286:	static void ds_update_cea(void *, void *, size_t, pgprot_t);
319:	static void *dsalloc_pages(size_t, gfp_t, int);
329:	static void dsfree_pages(const void *, size_t);
1325:	static u64 get_data_src(u64, struct perf_event *, struct perf_event *);
1784:	static void intel_pmu_drain_pebs_core(struct pt_regs *, struct perf_sample_data *);
1955:	static void intel_pmu_drain_pebs_icl(struct pt_regs *, struct perf_sample_data *);
1841:	static void intel_pmu_drain_pebs_nhm(struct pt_regs *, struct perf_sample_data *);
1822:	static void intel_pmu_pebs_event_update_no_drain(struct cpu_hw_events *, int);
1200:	static int intel_pmu_pebs_fixup_ip(struct pt_regs *);
1667:	static int intel_pmu_save_and_restart_reload(struct perf_event *, int);
966:	static u64 pebs_update_adaptive_cfg(struct perf_event *);
1013:	static void pebs_update_state(bool, struct cpu_hw_events *, struct perf_event *, bool);
420:	static void release_bts_buffer(int);
373:	static void release_pebs_buffer(int);
1509:	static void setup_pebs_adaptive_sample_data(struct perf_event *, struct pt_regs *, void *, struct perf_sample_data *, struct pt_regs *);
1340:	static void setup_pebs_fixed_sample_data(struct perf_event *, struct pt_regs *, void *, struct perf_sample_data *, struct pt_regs *);

File arch/x86/events/intel/knc.c:
314:	int knc_pmu_init(void);
279:	static ssize_t cmask_show(struct device *, struct device_attribute *, char *);
277:	static ssize_t edge_show(struct device *, struct device_attribute *, char *);
275:	static ssize_t event_show(struct device *, struct device_attribute *, char *);
278:	static ssize_t inv_show(struct device *, struct device_attribute *, char *);
158:	static void knc_pmu_disable_all(void);
177:	static void knc_pmu_disable_event(struct perf_event *);
167:	static void knc_pmu_enable_all(int);
188:	static void knc_pmu_enable_event(struct perf_event *);
120:	static u64 knc_pmu_event_map(int);
213:	static int knc_pmu_handle_irq(struct pt_regs *);
276:	static ssize_t umask_show(struct device *, struct device_attribute *, char *);

File arch/x86/events/intel/lbr.c:
1743:	void intel_pmu_arch_lbr_init(void);
659:	void intel_pmu_lbr_add(struct perf_event *);
740:	void intel_pmu_lbr_del(struct perf_event *);
778:	void intel_pmu_lbr_disable_all(void);
770:	void intel_pmu_lbr_enable_all(bool);
1659:	void intel_pmu_lbr_init_atom(void);
1557:	void intel_pmu_lbr_init_core(void);
1616:	void intel_pmu_lbr_init_hsw(void);
1702:	void intel_pmu_lbr_init_knl(void);
1571:	void intel_pmu_lbr_init_nhm(void);
1635:	void intel_pmu_lbr_init_skl(void);
1684:	void intel_pmu_lbr_init_slm(void);
1591:	void intel_pmu_lbr_init_snb(void);
1001:	void intel_pmu_lbr_read(void);
786:	void intel_pmu_lbr_read_32(struct cpu_hw_events *);
823:	void intel_pmu_lbr_read_64(struct cpu_hw_events *);
271:	void intel_pmu_lbr_reset(void);
245:	void intel_pmu_lbr_reset_32(void);
253:	void intel_pmu_lbr_reset_64(void);
440:	void intel_pmu_lbr_restore(void *);
532:	void intel_pmu_lbr_save(void *);
622:	void intel_pmu_lbr_sched_task(struct perf_event_context *, bool);
599:	void intel_pmu_lbr_swap_task_ctx(struct perf_event_context *, struct perf_event_context *);
1137:	int intel_pmu_setup_lbr_filter(struct perf_event *);
1468:	void intel_pmu_store_pebs_lbrs(struct lbr_entry *);
330:	u64 lbr_from_signext_quirk_wr(u64);
700:	void release_lbr_buffers(void);
719:	void reserve_lbr_buffers(void);
1849:	int x86_perf_get_lbr(struct x86_pmu_lbr *);
231:	static void __intel_pmu_lbr_disable(void);
188:	static void __intel_pmu_lbr_enable(bool);
505:	static void __intel_pmu_lbr_restore(void *);
582:	static void __intel_pmu_lbr_save(void *);
1174:	static int branch_type(unsigned long, unsigned long, int);
983:	static void intel_pmu_arch_lbr_read(struct cpu_hw_events *);
988:	static void intel_pmu_arch_lbr_read_xsave(struct cpu_hw_events *);
265:	static void intel_pmu_arch_lbr_reset(void);
469:	static void intel_pmu_arch_lbr_restore(void *);
555:	static void intel_pmu_arch_lbr_save(void *);
490:	static void intel_pmu_arch_lbr_xrstors(void *);
575:	static void intel_pmu_arch_lbr_xsaves(void *);
1405:	static void intel_pmu_lbr_filter(struct cpu_hw_events *);
1093:	static int intel_pmu_setup_hw_lbr_filter(struct perf_event *);
947:	static void intel_pmu_store_lbr(struct cpu_hw_events *, struct lbr_entry *);

File arch/x86/events/intel/p4.c:
1340:	int p4_pmu_init(void);
1291:	static ssize_t cccr_show(struct device *, struct device_attribute *, char *);
1292:	static ssize_t escr_show(struct device *, struct device_attribute *, char *);
1293:	static ssize_t ht_show(struct device *, struct device_attribute *, char *);
802:	static int p4_hw_config(struct perf_event *);
917:	static void p4_pmu_disable_all(void);
904:	static void p4_pmu_disable_event(struct perf_event *);
986:	static void p4_pmu_enable_all(int);
950:	static void p4_pmu_enable_event(struct perf_event *);
716:	static u64 p4_pmu_event_map(int);
999:	static int p4_pmu_handle_irq(struct pt_regs *);
1207:	static int p4_pmu_schedule_events(struct cpu_hw_events *, int, int *);
1067:	static void p4_pmu_swap_config_ts(struct hw_perf_event *, int);

File arch/x86/events/intel/p6.c:
247:	int p6_pmu_init(void);
189:	static ssize_t cmask_show(struct device *, struct device_attribute *, char *);
186:	static ssize_t edge_show(struct device *, struct device_attribute *, char *);
184:	static ssize_t event_show(struct device *, struct device_attribute *, char *);
188:	static ssize_t inv_show(struct device *, struct device_attribute *, char *);
138:	static void p6_pmu_disable_all(void);
159:	static void p6_pmu_disable_event(struct perf_event *);
148:	static void p6_pmu_enable_all(int);
167:	static void p6_pmu_enable_event(struct perf_event *);
114:	static u64 p6_pmu_event_map(int);
235:	static void p6_pmu_rdpmc_quirk(void);
187:	static ssize_t pc_show(struct device *, struct device_attribute *, char *);
185:	static ssize_t umask_show(struct device *, struct device_attribute *, char *);

File arch/x86/events/intel/pt.c:
1689:	void cpu_emergency_stop_pt(void);
1473:	void intel_pt_handle_vmx(int);
1420:	void intel_pt_interrupt(void);
71:	u32 intel_pt_validate_cap(u32 *, enum pt_capabilities);
81:	u32 intel_pt_validate_hw_cap(enum pt_capabilities);
1697:	int is_intel_pt_event(struct perf_event *);
110:	static ssize_t branch_show(struct device *, struct device_attribute *, char *);
103:	static ssize_t cyc_show(struct device *, struct device_attribute *, char *);
112:	static ssize_t cyc_thresh_show(struct device *, struct device_attribute *, char *);
105:	static ssize_t fup_on_ptw_show(struct device *, struct device_attribute *, char *);
111:	static ssize_t mtc_period_show(struct device *, struct device_attribute *, char *);
106:	static ssize_t mtc_show(struct device *, struct device_attribute *, char *);
108:	static ssize_t noretcomp_show(struct device *, struct device_attribute *, char *);
113:	static ssize_t psb_period_show(struct device *, struct device_attribute *, char *);
1323:	static int pt_addr_filters_init(struct perf_event *);
1315:	static void pt_buffer_free_aux(void *);
1194:	static int pt_buffer_init_topa(struct pt_buffer *, int, unsigned long, gfp_t);
1061:	static int pt_buffer_reset_markers(struct pt_buffer *, struct perf_output_handle *);
1143:	static void pt_buffer_reset_offsets(struct pt_buffer *, unsigned long);
1267:	static void *pt_buffer_setup_aux(struct perf_event *, void **, int, bool);
87:	static ssize_t pt_cap_show(struct device *, struct device_attribute *, char *);
481:	static void pt_config(struct perf_event *);
605:	static void pt_config_buffer(struct pt_buffer *);
440:	static u64 pt_config_filters(struct perf_event *);
398:	static void pt_config_start(struct perf_event *);
522:	static void pt_config_stop(struct perf_event *);
1634:	static int pt_event_add(struct perf_event *, int);
1384:	static void pt_event_addr_filters_sync(struct perf_event *);
1355:	static int pt_event_addr_filters_validate(struct list_head *);
1629:	static void pt_event_del(struct perf_event *, int);
1662:	static void pt_event_destroy(struct perf_event *);
1668:	static int pt_event_init(struct perf_event *);
1658:	static void pt_event_read(struct perf_event *);
1583:	static long pt_event_snapshot_aux(struct perf_event *, struct perf_output_handle *, unsigned long);
1513:	static void pt_event_start(struct perf_event *, int);
1543:	static void pt_event_stop(struct perf_event *, int);
302:	static bool pt_event_valid(struct perf_event *, struct perf_event *);
878:	static void pt_handle_status(struct pt *);
1702:	static int pt_init(void);
179:	static int pt_pmu_hw_init(void);
936:	static void pt_read_offset(struct pt_buffer *);
102:	static ssize_t pt_show(struct device *, struct device_attribute *, char *);
137:	static ssize_t pt_timing_attr_show(struct device *, struct device_attribute *, char *);
771:	static void pt_topa_dump(struct pt_buffer *);
956:	static struct topa_entry *pt_topa_entry_for_page(struct pt_buffer *, unsigned int);
827:	static void pt_update_head(struct pt *);
109:	static ssize_t ptw_show(struct device *, struct device_attribute *, char *);
104:	static ssize_t pwr_evt_show(struct device *, struct device_attribute *, char *);
639:	static struct topa *topa_alloc(int, gfp_t);
728:	static int topa_insert_pages(struct pt_buffer *, int, gfp_t);
682:	static void topa_insert_table(struct pt_buffer *, struct topa *);
107:	static ssize_t tsc_show(struct device *, struct device_attribute *, char *);

File arch/x86/events/msr.c:
164:	static ssize_t event_show(struct device *, struct device_attribute *, char *);
272:	static int msr_event_add(struct perf_event *, int);
191:	static int msr_event_init(struct perf_event *);
255:	static void msr_event_start(struct perf_event *, int);
262:	static void msr_event_stop(struct perf_event *, int);
229:	static void msr_event_update(struct perf_event *);
293:	static int msr_init(void);
20:	static bool test_aperfmperf(int, void *);
40:	static bool test_intel(int, void *);
30:	static bool test_irperf(int, void *);
25:	static bool test_ptsc(int, void *);
35:	static bool test_therm_status(int, void *);

File arch/x86/events/probe.c:
19:	unsigned long perf_msr_probe(struct perf_msr *, int, bool, void *);
8:	static umode_t not_visible(struct kobject *, struct attribute *, int);

File arch/x86/events/zhaoxin/core.c:
505:	int zhaoxin_pmu_init(void);
441:	static ssize_t cmask_show(struct device *, struct device_attribute *, char *);
439:	static ssize_t edge_show(struct device *, struct device_attribute *, char *);
437:	static ssize_t event_show(struct device *, struct device_attribute *, char *);
440:	static ssize_t inv_show(struct device *, struct device_attribute *, char *);
438:	static ssize_t umask_show(struct device *, struct device_attribute *, char *);
493:	static void zhaoxin_arch_events_quirk(void);
452:	static ssize_t zhaoxin_event_sysfs_show(char *, u64);
422:	static struct event_constraint *zhaoxin_get_event_constraints(struct cpu_hw_events *, int, struct perf_event *);
255:	static void zhaoxin_pmu_disable_all(void);
301:	static void zhaoxin_pmu_disable_event(struct perf_event *);
289:	static void zhaoxin_pmu_disable_fixed(struct hw_perf_event *);
260:	static void zhaoxin_pmu_enable_all(int);
338:	static void zhaoxin_pmu_enable_event(struct perf_event *);
313:	static void zhaoxin_pmu_enable_fixed(struct hw_perf_event *);
416:	static u64 zhaoxin_pmu_event_map(int);
354:	static int zhaoxin_pmu_handle_irq(struct pt_regs *);

File arch/x86/events/zhaoxin/uncore.c:
1056:	void chx_uncore_cpu_init(void);
51:	ssize_t zx_uncore_event_show(struct device *, struct device_attribute *, char *);
49:	static ssize_t __uncore_cmask8_show(struct device *, struct device_attribute *, char *);
47:	static ssize_t __uncore_edge_show(struct device *, struct device_attribute *, char *);
45:	static ssize_t __uncore_event_show(struct device *, struct device_attribute *, char *);
48:	static ssize_t __uncore_inv_show(struct device *, struct device_attribute *, char *);
46:	static ssize_t __uncore_umask_show(struct device *, struct device_attribute *, char *);
880:	static int allocate_boxes(struct zhaoxin_uncore_type **, unsigned int, unsigned int);
73:	static void chx_uncore_msr_disable_box(struct zhaoxin_uncore_box *);
59:	static void chx_uncore_msr_disable_event(struct zhaoxin_uncore_box *, struct perf_event *);
78:	static void chx_uncore_msr_enable_box(struct zhaoxin_uncore_box *);
83:	static void chx_uncore_msr_enable_event(struct zhaoxin_uncore_box *, struct perf_event *);
242:	static struct zhaoxin_uncore_box *uncore_alloc_box(int, struct zhaoxin_uncore_type *, struct zhaoxin_uncore_type *);
306:	static int uncore_assign_events(struct zhaoxin_uncore_box *, int *, int);
151:	static void uncore_assign_hw_event(struct zhaoxin_uncore_box *, struct perf_event *, int);
919:	static int uncore_box_ref(struct zhaoxin_uncore_type **, int, unsigned int);
837:	static void uncore_box_unref(struct zhaoxin_uncore_type **, int);
830:	static void uncore_change_context(struct zhaoxin_uncore_type **, int, int);
406:	static int uncore_collect_events(struct zhaoxin_uncore_box *, struct perf_event *, bool);
855:	static int uncore_event_cpu_offline(unsigned int);
943:	static int uncore_event_cpu_online(unsigned int);
672:	static ssize_t uncore_get_attr_cpumask(struct device *, struct device_attribute *, char *);
64:	static u64 uncore_msr_read_counter(struct zhaoxin_uncore_box *, struct perf_event *);
169:	static void uncore_perf_event_update(struct zhaoxin_uncore_box *, struct perf_event *);
655:	static void uncore_pmu_disable(struct pmu *);
638:	static void uncore_pmu_enable(struct pmu *);
443:	static int uncore_pmu_event_add(struct perf_event *, int);
539:	static void uncore_pmu_event_del(struct perf_event *, int);
569:	static int uncore_pmu_event_init(struct perf_event *);
562:	static void uncore_pmu_event_read(struct perf_event *);
355:	static void uncore_pmu_event_start(struct perf_event *, int);
379:	static void uncore_pmu_event_stop(struct perf_event *, int);
192:	static enum hrtimer_restart uncore_pmu_hrtimer(struct hrtimer *);
969:	static int uncore_pmu_register(struct zhaoxin_uncore_pmu *);
728:	static int uncore_type_init(struct zhaoxin_uncore_type *, bool);
722:	static void uncore_types_exit(struct zhaoxin_uncore_type **);
1118:	static void zhaoxin_uncore_exit(void);
1075:	static int zhaoxin_uncore_init(void);

File arch/x86/hyperv/hv_apic.c:
255:	void hv_apic_init(void);
139:	static bool __send_ipi_mask(const struct cpumask *, int);
100:	static bool __send_ipi_mask_ex(const struct cpumask *, int);
195:	static bool __send_ipi_one(int, int);
87:	static void hv_apic_eoi_write(u32, u32);
37:	static u64 hv_apic_icr_read(void);
45:	static void hv_apic_icr_write(u32, u32);
56:	static u32 hv_apic_read(u32);
73:	static void hv_apic_write(u32, u32);
213:	static void hv_send_ipi(int, int);
243:	static void hv_send_ipi_all(int);
238:	static void hv_send_ipi_allbutself(int);
219:	static void hv_send_ipi_mask(const struct cpumask *, int);
225:	static void hv_send_ipi_mask_allbutself(const struct cpumask *, int);
249:	static void hv_send_ipi_self(int);

File arch/x86/hyperv/hv_init.c:
196:	void clear_hv_tscchange_cb(void);
50:	void *hv_alloc_hyperv_page(void);
58:	void *hv_alloc_hyperv_zeroed_page(void);
66:	void hv_free_hyperv_page(unsigned long);
559:	bool hv_is_hibernation_supported(void);
537:	bool hv_is_hyperv_initialized(void);
452:	void hyperv_cleanup(void);
351:	void hyperv_init(void);
478:	void hyperv_report_panic(struct pt_regs *, long, bool);
515:	void hyperv_report_panic_msg(phys_addr_t, size_t);
134:	void hyperv_stop_tsc_emulation(void);
166:	void set_hv_tscchange_cb(void (*)(void));
159:	void sysvec_hyperv_reenlightenment(struct pt_regs *);
159:	static void __sysvec_hyperv_reenlightenment(struct pt_regs *);
211:	static int hv_cpu_die(unsigned int);
72:	static int hv_cpu_init(unsigned int);
252:	static int hv_pci_init(void);
122:	static void hv_reenlightenment_notify(struct work_struct *);
292:	static void hv_resume(void);
326:	static void hv_stimer_setup_percpu_clockev(void);
268:	static int hv_suspend(void);

File arch/x86/hyperv/hv_spinlock.c:
65:	void hv_init_spinlocks(void);
59:	bool hv_vcpu_is_preempted(int);
83:	static int hv_parse_nopvspin(char *);
21:	static void hv_qlock_kick(int);
26:	static void hv_qlock_wait(u8 *, u8);

File arch/x86/hyperv/mmu.c:
236:	void hyperv_setup_mmu_ops(void);
55:	static void hyperv_flush_tlb_multi(const struct cpumask *, const struct flush_tlb_info *);
170:	static u64 hyperv_flush_tlb_others_ex(const struct cpumask *, const struct flush_tlb_info *);

File arch/x86/hyperv/nested.c:
59:	int hyperv_fill_flush_guest_mapping_list(struct hv_guest_mapping_flush_list *, u64, u64);
20:	int hyperv_flush_guest_mapping(u64);
90:	int hyperv_flush_guest_mapping_range(u64, hyperv_fill_flush_list_func, void *);

File arch/x86/ia32/audit.c:
30:	int ia32_classify_syscall(unsigned int);

File arch/x86/ia32/ia32_signal.c:
234:	int ia32_setup_frame(int, struct ksignal *, compat_sigset_t *, struct pt_regs *);
300:	int ia32_setup_rt_frame(int, struct ksignal *, compat_sigset_t *, struct pt_regs *);
123:	static long __do_compat_sys_rt_sigreturn(const struct pt_regs *);
100:	static long __do_compat_sys_sigreturn(const struct pt_regs *);
203:	static void *get_sigframe(struct ksignal *, struct pt_regs *, size_t, void **);
60:	static int ia32_restore_sigcontext(struct pt_regs *, struct sigcontext_32 *);

File arch/x86/kernel/acpi/apei.c:
11:	int arch_apei_enable_cmcff(struct acpi_hest_header *, void *);
40:	void arch_apei_report_mem_error(int, struct cper_sec_mem_err *);

File arch/x86/kernel/acpi/boot.c:
1742:	int __acpi_acquire_global_lock(unsigned int *);
106:	void *__acpi_map_table(unsigned long, unsigned long);
1753:	int __acpi_release_global_lock(unsigned int *);
115:	void __acpi_unmap_table(void *, unsigned long);
1598:	int acpi_boot_init(void);
1544:	void acpi_boot_table_init(void);
1375:	void acpi_generic_reduced_hw_init(void);
605:	int acpi_gsi_to_irq(u32, unsigned int *);
841:	int acpi_ioapic_registered(acpi_handle, u32);
629:	int acpi_isa_irq_to_gsi(unsigned int, u32 *);
750:	int acpi_map_cpu(acpi_handle, phys_cpuid_t, u32, int *);
1690:	int acpi_mps_check(void);
569:	void acpi_pic_sci_set_trigger(unsigned int, u16);
707:	int acpi_register_gsi(struct device *, u32, int, int);
784:	int acpi_register_ioapic(acpi_handle, u64, u32);
769:	int acpi_unmap_cpu(int);
713:	void acpi_unregister_gsi(u32);
818:	int acpi_unregister_ioapic(acpi_handle, u32);
1764:	void arch_reserve_mem_area(acpi_physical_address, size_t);
1563:	int early_acpi_boot_init(void);
1775:	u64 x86_default_get_root_pointer(void);
1770:	void x86_default_set_root_pointer(u64);
955:	static int acpi_parse_fadt(struct acpi_table_header *);
868:	static int acpi_parse_hpet(struct acpi_table_header *);
495:	static int acpi_parse_int_src_ovr(union acpi_subtable_headers *, const unsigned long);
436:	static int acpi_parse_ioapic(union acpi_subtable_headers *, const unsigned long);
229:	static int acpi_parse_lapic(union acpi_subtable_headers *, const unsigned long);
278:	static int acpi_parse_lapic_addr_ovr(union acpi_subtable_headers *, const unsigned long);
315:	static int acpi_parse_lapic_nmi(union acpi_subtable_headers *, const unsigned long);
124:	static int acpi_parse_madt(struct acpi_table_header *);
1162:	static int acpi_parse_madt_ioapic_entries(void);
1037:	static int acpi_parse_madt_lapic_entries(void);
537:	static int acpi_parse_nmi_src(union acpi_subtable_headers *, const unsigned long);
259:	static int acpi_parse_sapic(union acpi_subtable_headers *, const unsigned long);
854:	static int acpi_parse_sbf(struct acpi_table_header *);
184:	static int acpi_parse_x2apic(union acpi_subtable_headers *, const unsigned long);
296:	static int acpi_parse_x2apic_nmi(union acpi_subtable_headers *, const unsigned long);
1262:	static void acpi_process_madt(void);
655:	static int acpi_register_gsi_ioapic(struct device *, u32, int, int);
640:	static int acpi_register_gsi_pic(struct device *, u32, int, int);
158:	static int acpi_register_lapic(int, u32, u8);
464:	static void acpi_sci_ioapic_setup(u8, u16, u16, u32);
679:	static void acpi_unregister_gsi_ioapic(u32);
1323:	static int disable_acpi_irq(const struct dmi_system_id *);
1333:	static int disable_acpi_pci(const struct dmi_system_id *);
1343:	static int dmi_disable_acpi(const struct dmi_system_id *);
1358:	static int dmi_ignore_irq0_timer_override(const struct dmi_system_id *);
1235:	static void early_acpi_process_madt(void);
941:	static int hpet_insert_resource(void);
1092:	static void mp_config_acpi_legacy_irqs(void);
340:	static void mp_override_legacy_irq(u8, u8, u8, u32);
407:	static int mp_register_ioapic_irq(u8, u8, u8, u32);
1633:	static int parse_acpi(char *);
1674:	static int parse_acpi_bgrt(char *);
1705:	static int parse_acpi_skip_timer_override(char *);
1712:	static int parse_acpi_use_timer_override(char *);
1682:	static int parse_pci(char *);
1720:	static int setup_acpi_sci(char *);

File arch/x86/kernel/acpi/cppc_msr.c:
12:	bool cpc_ffh_supported(void);
17:	int cpc_read_ffh(int, struct cpc_reg *, u64 *);
32:	int cpc_write_ffh(int, struct cpc_reg *, u64);

File arch/x86/kernel/acpi/cstate.c:
184:	void acpi_processor_ffh_cstate_enter(struct acpi_processor_cx *);
145:	int acpi_processor_ffh_cstate_probe(unsigned int, struct acpi_processor_cx *, struct acpi_power_register *);
29:	void acpi_processor_power_init_bm_check(struct acpi_processor_flags *, unsigned int);
99:	static long acpi_processor_ffh_cstate_probe_cpu(void *);
207:	static void ffh_cstate_exit(void);
195:	static int ffh_cstate_init(void);

File arch/x86/kernel/acpi/sleep.c:
35:	unsigned long acpi_get_wakeup_address(void);
46:	acpi_status x86_acpi_enter_sleep_state(u8);
57:	int x86_acpi_suspend_lowlevel(void);
132:	static int acpi_sleep_setup(char *);

File arch/x86/kernel/alternative.c:
704:	void alternative_instructions(void);
545:	void alternatives_enable_smp(void);
493:	void alternatives_smp_module_add(struct module *, char *, void *, void *, void *, void *);
530:	void alternatives_smp_module_del(struct module *);
571:	int alternatives_text_reserved(void *, void *);
372:	void apply_alternatives(struct alt_instr *, struct alt_instr *);
596:	void apply_paravirt(struct paravirt_patch_site *, struct paravirt_patch_site *);
205:	void arch_init_ideal_nops(void);
1060:	int poke_int3_handler(struct pt_regs *);
975:	void *text_poke(void *, const void *, size_t);
1383:	void text_poke_bp(void *, const void *, size_t, const void *);
762:	void text_poke_early(void *, const void *, size_t);
1352:	void text_poke_finish(void);
1357:	void text_poke_queue(void *, const void *, size_t, const void *);
1006:	void text_poke_sync(void);
855:	static void *__text_poke(void *, const void *, size_t);
259:	static void add_nops(void *, unsigned int);
40:	static int debug_alt(char *);
1001:	static void do_sync_core(void *);
652:	static int int3_exception_notify(struct notifier_block *, unsigned long, void *);
670:	static void int3_selftest(void);
344:	static void optimize_nops(struct alt_instr *, u8 *);
49:	static int setup_noreplace_smp(char *);
1164:	static void text_poke_bp_batch(struct text_poke_loc *, unsigned int);
1344:	static void text_poke_flush(void *);
1273:	static void text_poke_loc_init(struct text_poke_loc *, void *, const void *, size_t, const void *);

File arch/x86/kernel/amd_nb.c:
225:	int amd_cache_northbridges(void);
187:	int amd_df_indirect_read(u16, u8, u16, u8, u32 *);
456:	void amd_flush_garts(void);
353:	struct resource *amd_get_mmconfig_range(struct resource *);
385:	int amd_get_subcaches(int);
109:	bool amd_nb_has_feature(unsigned int);
103:	u16 amd_nb_num(void);
398:	int amd_set_subcaches(int, unsigned long);
165:	int amd_smn_read(u16, u32, u32 *);
171:	int amd_smn_write(u16, u32, u32);
333:	bool early_is_amd_nb(u32);
115:	struct amd_northbridge *node_to_amd_nb(int);
132:	static int __amd_smn_rw(u16, u32, u32 *, bool);
495:	static void __fix_erratum_688(void *);
438:	static void amd_cache_gart(void);
530:	static int init_amd_nbs(void);

File arch/x86/kernel/apic/apic.c:
1737:	void apic_ap_setup(void);
2330:	bool apic_id_is_primary_thread(unsigned int);
1410:	void apic_intr_mode_init(void);
1353:	void apic_intr_mode_select(void);
2779:	int apic_is_clustered_box(void);
789:	bool apic_needs_pit(void);
2498:	void apic_set_eoi_write(void (*)(u32, u32));
1202:	void apic_soft_disable(void);
2320:	bool arch_match_cpu_phys_id(int, u64);
1869:	void check_x2apic(void);
1123:	void clear_local_APIC(void);
1217:	void disable_local_APIC(void);
2245:	void disconnect_bsp_APIC(int);
1895:	void enable_IR_x2apic(void);
2371:	int generic_processor_info(int, int);
2487:	int hard_smp_processor_id(void);
2058:	void init_apic_mappings(void);
1361:	void init_bsp_APIC(void);
304:	int lapic_get_maxlvt(void);
1246:	void lapic_shutdown(void);
650:	void lapic_update_tsc_freq(void);
281:	u64 native_apic_icr_read(void);
271:	void native_apic_icr_write(u32, u32);
248:	void native_apic_wait_icr_idle(void);
254:	u32 native_safe_apic_wait_icr_idle(void);
2104:	void register_lapic_address(unsigned long);
430:	int setup_APIC_eilvt(u8, u8, u8, u8);
1010:	void setup_boot_APIC_clock(void);
1107:	int setup_profiling_timer(unsigned int);
1047:	void setup_secondary_APIC_clock(void);
2134:	void spurious_interrupt(struct pt_regs *, unsigned long);
1269:	void sync_Arb_IDs(void);
1095:	void sysvec_apic_timer_interrupt(struct pt_regs *);
2177:	void sysvec_error_interrupt(struct pt_regs *);
2169:	void sysvec_spurious_apic_interrupt(struct pt_regs *);
1801:	void x2apic_setup(void);
1290:	static int __apic_intr_mode_select(void);
640:	static void __lapic_update_tsc_freq(void *);
331:	static void __setup_APIC_LVTT(unsigned int, int, int);
1095:	static void __sysvec_apic_timer_interrupt(struct pt_regs *);
2177:	static void __sysvec_error_interrupt(struct pt_regs *);
2169:	static void __sysvec_spurious_apic_interrupt(struct pt_regs *);
1753:	static void __x2apic_disable(void);
1769:	static void __x2apic_enable(void);
2510:	static void apic_bsp_up_setup(void);
1492:	static bool apic_check_and_ack(union apic_ir *, union apic_ir *);
2870:	static int apic_set_disabled_cpu_apicid(char *);
2879:	static int apic_set_extnmi(char *);
2825:	static int apic_set_verbosity(char *);
829:	static int calibrate_APIC_clock(void);
2718:	static int init_lapic_sysfs(void);
692:	static void lapic_cal_handler(struct clock_event_device *);
771:	static int lapic_init_clockevent(void);
2851:	static int lapic_insert_resource(void);
471:	static int lapic_next_deadline(unsigned long, struct clock_event_device *);
464:	static int lapic_next_event(unsigned long, struct clock_event_device *);
2633:	static void lapic_resume(void);
1442:	static void lapic_setup_esr(void);
2585:	static int lapic_suspend(void);
523:	static void lapic_timer_broadcast(const struct cpumask *);
515:	static int lapic_timer_set_oneshot(struct clock_event_device *);
510:	static int lapic_timer_set_periodic(struct clock_event_device *);
484:	static int lapic_timer_shutdown(struct clock_event_device *);
2811:	static int parse_disable_apic_timer(char *);
155:	static int parse_lapic(char *);
2804:	static int parse_lapic_timer_c2_ok(char *);
2741:	static int set_multi(const struct dmi_system_id *);
611:	static void setup_APIC_timer(void);
167:	static int setup_apicpmtimer(char *);
2789:	static int setup_disableapic(char *);
1557:	static void setup_local_APIC(void);
2798:	static int setup_nolapic(char *);
1780:	static int setup_nox2apic(char *);

File arch/x86/kernel/apic/apic_common.c:
9:	u32 apic_default_calc_apicid(unsigned int);
14:	u32 apic_flat_calc_apicid(unsigned int);
43:	int default_apic_id_valid(u32);
19:	bool default_check_apicid_used(physid_mask_t *, int);
38:	int default_check_phys_apicid_present(int);
29:	int default_cpu_present_to_apicid(int);
24:	void default_ioapic_phys_id_map(physid_mask_t *, physid_mask_t *);

File arch/x86/kernel/apic/apic_flat_64.c:
38:	void flat_init_apic_ldr(void);
26:	static int flat_acpi_madt_oem_check(char *, char *);
94:	static int flat_apic_id_registered(void);
79:	static unsigned int flat_get_apic_id(unsigned long);
99:	static int flat_phys_pkg_id(int, int);
104:	static int flat_probe(void);
60:	static void flat_send_IPI_mask(const struct cpumask *, int);
68:	static void flat_send_IPI_mask_allbutself(const struct cpumask *, int);
160:	static int physflat_acpi_madt_oem_check(char *, char *);
183:	static void physflat_init_apic_ldr(void);
192:	static int physflat_probe(void);
84:	static u32 set_apic_id(unsigned int);

File arch/x86/kernel/apic/apic_noop.c:
37:	static u64 noop_apic_icr_read(void);
25:	static void noop_apic_icr_write(u32, u32);
61:	static int noop_apic_id_registered(void);
72:	static u32 noop_apic_read(u32);
78:	static void noop_apic_write(u32, u32);
47:	static unsigned int noop_get_apic_id(unsigned long);
17:	static void noop_init_apic_ldr(void);
42:	static int noop_phys_pkg_id(int, int);
52:	static int noop_probe(void);
32:	static u32 noop_safe_apic_wait_icr_idle(void);
18:	static void noop_send_IPI(int, int);
21:	static void noop_send_IPI_allbutself(int);
19:	static void noop_send_IPI_mask(const struct cpumask *, int);
27:	static int noop_wakeup_secondary_cpu(int, unsigned long);

File arch/x86/kernel/apic/hw_nmi.c:
37:	bool arch_trigger_cpumask_backtrace(const cpumask_t *, bool);
25:	u64 hw_nmi_get_sample_period(int);
44:	static int nmi_cpu_backtrace_handler(unsigned int, struct pt_regs *);
32:	static void nmi_raise_cpu_backtrace(cpumask_t *);
53:	static int register_nmi_cpu_backtrace_handler(void);

File arch/x86/kernel/apic/io_apic.c:
1145:	int IO_APIC_get_PCI_irq_vector(int, int, int);
2602:	int acpi_get_override_irq(u32, int *, int *);
2443:	unsigned int arch_dynirq_lower_bound(unsigned int);
240:	int arch_early_ioapic_init(void);
579:	void clear_IO_APIC(void);
184:	void disable_ioapic_support(void);
1363:	void enable_IO_APIC(void);
2667:	void io_apic_init_mappings(void);
2711:	void ioapic_insert_resources(void);
858:	void ioapic_set_alloc_attr(struct irq_alloc_info *, int, int, int);
1225:	void ioapic_zap_locks(void);
650:	void mask_ioapic_entries(void);
2729:	int mp_find_ioapic(u32);
2747:	int mp_find_ioapic_pin(int, u32);
2934:	int mp_ioapic_registered(u32);
3055:	int mp_irqdomain_activate(struct irq_domain *, struct irq_data *, bool);
2979:	int mp_irqdomain_alloc(struct irq_domain *, unsigned int, unsigned int, void *);
3066:	void mp_irqdomain_deactivate(struct irq_domain *, struct irq_data *);
3037:	void mp_irqdomain_free(struct irq_domain *, unsigned int, unsigned int);
3074:	int mp_irqdomain_ioapic_idx(struct irq_domain *);
1107:	int mp_map_gsi_to_irq(u32, unsigned int, struct irq_alloc_info *);
2798:	int mp_register_ioapic(int, u32, u32, struct ioapic_domain_cfg *);
202:	void mp_save_irq(struct mpc_intsrc *);
1123:	void mp_unmap_irq(int);
2892:	int mp_unregister_ioapic(u32);
130:	unsigned int mpc_ioapic_addr(int);
125:	int mpc_ioapic_id(int);
273:	unsigned int native_io_apic_read(unsigned int, unsigned int);
1414:	void native_restore_boot_irq_mode(void);
1316:	void print_IO_APICs(void);
1442:	void restore_boot_irq_mode(void);
673:	int restore_ioapic_entries(void);
628:	int save_ioapic_entries(void);
2362:	void setup_IO_APIC(void);
361:	static int __add_pin_to_irq_node(struct mp_chip_data *, int, int, int);
497:	static void __eoi_ioapic_pin(int, int, int);
294:	static struct IO_APIC_route_entry __ioapic_read_entry(int, int);
322:	static void __ioapic_write_entry(int, int, struct IO_APIC_route_entry);
2011:	static void ack_lapic_irq(struct irq_data *);
221:	static void alloc_ioapic_saved_registers(int);
988:	static int alloc_isa_irq_from_domain(struct irq_domain *, int, int, struct irq_alloc_info *, int);
532:	static void clear_IO_APIC_pin(unsigned int, unsigned int);
2091:	static int disable_timer_pin_setup(char *);
521:	static void eoi_ioapic_pin(int, struct mp_chip_data *);
691:	static int find_irq_entry(int, int, int);
724:	static int find_isa_irq_apic(int, int);
708:	static int find_isa_irq_pin(int, int);
425:	static void io_apic_modify_irq(struct mp_chip_data *, int, int, void (*)(struct irq_pin_list *));
1230:	static void io_apic_print_entries(unsigned int, unsigned int);
444:	static void io_apic_sync(struct irq_pin_list *);
2543:	static u8 io_apic_unique_id(int, u8);
1782:	static void ioapic_ack_level(struct irq_data *);
1862:	static void ioapic_configure_entry(struct irq_data *);
2418:	static int ioapic_init_ops(void);
1848:	static void ioapic_ir_ack_level(struct irq_data *);
1911:	static int ioapic_irq_get_chip_state(struct irq_data *, enum irqchip_irq_state, bool *);
345:	static void ioapic_mask_entry(int, int);
304:	static struct IO_APIC_route_entry ioapic_read_entry(int, int);
2403:	static void ioapic_resume(void);
1881:	static int ioapic_set_affinity(struct irq_data *, const struct cpumask *, bool);
2634:	static struct resource *ioapic_setup_resources(void);
331:	static void ioapic_write_entry(int, int, struct IO_APIC_route_entry);
830:	static int irq_trigger(int);
456:	static void mask_ioapic_irq(struct irq_data *);
1995:	static void mask_lapic_irq(struct irq_data *);
926:	static bool mp_check_pin_attr(int, struct irq_alloc_info *);
2297:	static int mp_irqdomain_create(int);
1021:	static int mp_map_pin_to_irq(u32, int, int, int, unsigned int, struct irq_alloc_info *);
1576:	static int notimercheck(char *);
193:	static int parse_noapic(char *);
1074:	static int pin_2_irq(int, int, int, unsigned int);
1260:	static void print_IO_APIC(int);
1206:	static void setup_IO_APIC_irqs(void);
1682:	static unsigned int startup_ioapic_irq(struct irq_data *);
1628:	static int timer_irq_works(void);
471:	static void unmask_ioapic_irq(struct irq_data *);
2003:	static void unmask_lapic_irq(struct irq_data *);

File arch/x86/kernel/apic/ipi.c:
146:	void __default_send_IPI_dest_field(unsigned int, int, unsigned int);
111:	void __default_send_IPI_shortcut(unsigned int, int);
49:	void apic_send_IPI_allbutself(unsigned int);
29:	void apic_smt_update(void);
235:	void default_send_IPI_all(int);
230:	void default_send_IPI_allbutself(int);
203:	void default_send_IPI_mask_allbutself_phys(const struct cpumask *, int);
185:	void default_send_IPI_mask_sequence_phys(const struct cpumask *, int);
240:	void default_send_IPI_self(int);
225:	void default_send_IPI_single(int, int);
175:	void default_send_IPI_single_phys(int, int);
79:	void native_send_call_func_ipi(const struct cpumask *);
74:	void native_send_call_func_single_ipi(int);
65:	void native_smp_send_reschedule(int);
14:	static int apic_ipi_shorthand(char *);
21:	static int print_ipi_mode(void);

File arch/x86/kernel/apic/msi.c:
266:	struct irq_domain *arch_create_remap_msi_irq_domain(struct irq_domain *, const char *, int);
342:	int dmar_alloc_hwirq(int, int, void *);
359:	void dmar_free_hwirq(int);
461:	int hpet_assign_irq(struct irq_domain *, struct hpet_channel *, int);
420:	struct irq_domain *hpet_create_irq_domain(int);
218:	struct irq_domain *native_create_pci_msi_domain(void);
187:	int pci_msi_prepare(struct irq_domain *, struct device *, int, msi_alloc_info_t *);
241:	void x86_create_pci_msi_domain(void);
48:	void x86_vector_msi_compose_msg(struct irq_data *, struct msi_msg *);
26:	static void __irq_msi_compose_msg(struct irq_cfg *, struct msi_msg *);
300:	static int dmar_msi_init(struct irq_domain *, struct msi_domain_info *, unsigned int, irq_hw_number_t, msi_alloc_info_t *);
283:	static void dmar_msi_write_msg(struct irq_data *, struct msi_msg *);
403:	static void hpet_msi_free(struct irq_domain *, struct msi_domain_info *, unsigned int);
392:	static int hpet_msi_init(struct irq_domain *, struct msi_domain_info *, unsigned int, irq_hw_number_t, msi_alloc_info_t *);
376:	static void hpet_msi_write_msg(struct irq_data *, struct msi_msg *);
62:	static int msi_set_affinity(struct irq_data *, const struct cpumask *, bool);

File arch/x86/kernel/apic/probe_64.c:
37:	int default_acpi_madt_oem_check(char *, char *);
19:	void default_setup_apic_routing(void);

File arch/x86/kernel/apic/vector.c:
839:	void apic_ack_edge(struct irq_data *);
833:	void apic_ack_irq(struct irq_data *);
730:	int arch_early_irq_init(void);
653:	int arch_probe_nr_irqs(void);
70:	void copy_irq_alloc_info(struct irq_alloc_info *, struct irq_alloc_info *);
63:	void init_irq_alloc_info(struct irq_alloc_info *, const struct cpumask *);
97:	struct irq_cfg *irq_cfg(unsigned int);
937:	void irq_complete_move(struct irq_cfg *);
958:	void irq_force_complete_move(struct irq_desc *);
89:	struct irq_cfg *irqd_cfg(struct irq_data *);
680:	void lapic_assign_legacy_vector(unsigned int, bool);
710:	void lapic_assign_system_vectors(void);
1051:	int lapic_can_unplug_cpu(void);
792:	void lapic_offline(void);
770:	void lapic_online(void);
690:	void lapic_update_legacy_vectors(void);
50:	void lock_vector_lock(void);
928:	void send_cleanup_vector(struct irq_cfg *);
879:	void sysvec_irq_move_cleanup(struct pt_regs *);
58:	void unlock_vector_lock(void);
912:	static void __send_cleanup_vector(struct apic_chip_data *);
879:	static void __sysvec_irq_move_cleanup(struct pt_regs *);
420:	static int activate_managed(struct irq_data *);
388:	static int activate_reserved(struct irq_data *);
821:	static int apic_retrigger_irq(struct irq_data *);
799:	static int apic_set_affinity(struct irq_data *, const struct cpumask *, bool);
117:	static void apic_update_irq_cfg(struct irq_data *, unsigned int, unsigned int);
131:	static void apic_update_vector(struct irq_data *, unsigned int, unsigned int);
270:	static int assign_irq_vector_any_locked(struct irq_data *);
313:	static int assign_managed_vector(struct irq_data *, const struct cpumask *);
222:	static int assign_vector_locked(struct irq_data *, const struct cpumask *);
334:	static void clear_irq_vector(struct irq_data *);
855:	static void free_moved_vector(struct apic_chip_data *);
1077:	static void print_APIC_field(int);
1261:	static int print_ICs(void);
1212:	static void print_PIC(void);
1089:	static void print_local_APIC(void *);
199:	static void reserve_irq_vector_locked(struct irq_data *);
184:	static int reserve_managed_vector(struct irq_data *);
1245:	static int setup_show_lapic(char *);
503:	static bool vector_configure_legacy(unsigned int, struct irq_data *, struct apic_chip_data *);
467:	static void vector_free_reserved_and_managed(struct irq_data *);
444:	static int x86_vector_activate(struct irq_domain *, struct irq_data *, bool);
531:	static int x86_vector_alloc_irqs(struct irq_domain *, unsigned int, unsigned int, void *);
364:	static void x86_vector_deactivate(struct irq_domain *, struct irq_data *);
481:	static void x86_vector_free_irqs(struct irq_domain *, unsigned int, unsigned int);

File arch/x86/kernel/apic/x2apic_cluster.c:
38:	static void __x2apic_send_IPI_mask(const struct cpumask *, int, int);
100:	static void init_x2apic_ldr(void);
23:	static int x2apic_acpi_madt_oem_check(char *, char *);
95:	static u32 x2apic_calc_apicid(unsigned int);
167:	static int x2apic_cluster_probe(void);
157:	static int x2apic_dead_cpu(unsigned int);
148:	static int x2apic_prepare_cpu(unsigned int);
28:	static void x2apic_send_IPI(int, int);
90:	static void x2apic_send_IPI_all(int);
85:	static void x2apic_send_IPI_allbutself(int);
74:	static void x2apic_send_IPI_mask(const struct cpumask *, int);
80:	static void x2apic_send_IPI_mask_allbutself(const struct cpumask *, int);

File arch/x86/kernel/apic/x2apic_phys.c:
120:	void __x2apic_send_IPI_dest(unsigned int, int, unsigned int);
126:	void __x2apic_send_IPI_shorthand(int, u32);
115:	int x2apic_apic_id_registered(void);
107:	int x2apic_apic_id_valid(u32);
135:	unsigned int x2apic_get_apic_id(unsigned long);
145:	int x2apic_phys_pkg_id(int, int);
150:	void x2apic_send_IPI_self(int);
140:	u32 x2apic_set_apic_id(unsigned int);
13:	void x2apic_set_max_apicid(u32);
52:	static void __x2apic_send_IPI_mask(const struct cpumask *, int, int);
94:	static void init_x2apic_ldr(void);
18:	static int set_x2apic_phys_mode(char *);
37:	static int x2apic_acpi_madt_oem_check(char *, char *);
98:	static int x2apic_phys_probe(void);
42:	static void x2apic_send_IPI(int, int);
89:	static void x2apic_send_IPI_all(int);
84:	static void x2apic_send_IPI_allbutself(int);
73:	static void x2apic_send_IPI_mask(const struct cpumask *, int);
79:	static void x2apic_send_IPI_mask_allbutself(const struct cpumask *, int);

File arch/x86/kernel/apic/x2apic_uv_x.c:
500:	enum uv_system_type get_uv_system_type(void);
511:	int is_uv_hubbed(int);
505:	int is_uv_system(void);
1227:	void uv_cpu_init(void);
1803:	void uv_system_init(void);
61:	unsigned long uv_undefined(char *);
780:	static u32 apic_uv_calc_apicid(unsigned int);
1447:	static void boot_init_possible_blades(struct uv_hub_info_s *);
1477:	static void build_socket_tables(void);
594:	static void build_uv_gr_table(void);
992:	static void calc_mmioh_map(enum mmioh_arch, int, int, int, unsigned long, int, int);
1334:	static void decode_gam_rng_tbl(unsigned long);
1392:	static int decode_uv_systab(void);
278:	static void early_get_apic_socketid_shift(void);
330:	static int early_get_arch_type(void);
97:	static void early_get_pnodeid(void);
139:	static int early_set_hub_type(void);
866:	static void get_lowmem_redirect(unsigned long *, unsigned long *);
1244:	static void get_mn(struct mn *);
922:	static void map_gru_high(int);
903:	static void map_high(char *, unsigned long, int, int, int, enum map_type);
1178:	static void map_low_mmrs(void);
1106:	static void map_mmioh_high(int, int);
952:	static void map_mmr_high(int);
552:	static int parse_mem_block_size(char *);
1619:	static int proc_archtype_show(struct seq_file *, void *);
1607:	static int proc_hubbed_show(struct seq_file *, void *);
1613:	static int proc_hubless_show(struct seq_file *, void *);
790:	static u32 set_apic_id(unsigned int);
578:	static void set_block_size(void);
466:	static int uv_acpi_madt_oem_check(char *, char *);
771:	static int uv_apic_id_registered(void);
766:	static int uv_apic_id_valid(u32);
73:	static unsigned long uv_early_read_mmr(unsigned long);
776:	static void uv_init_apic_ldr(void);
1264:	static void uv_init_hub_info(struct uv_hub_info_s *);
92:	static bool uv_is_untracked_pat_range(u64, u64);
800:	static int uv_phys_pkg_id(int, int);
810:	static int uv_probe(void);
761:	static void uv_send_IPI_all(int);
750:	static void uv_send_IPI_allbutself(int);
731:	static void uv_send_IPI_mask(const struct cpumask *, int);
739:	static void uv_send_IPI_mask_allbutself(const struct cpumask *, int);
712:	static void uv_send_IPI_one(int, int);
805:	static void uv_send_IPI_self(int);
372:	static int uv_set_system_type(char *, char *);
1205:	static int uv_set_vga_state(struct pci_dev *, bool, unsigned int, u32);
1625:	static void uv_setup_proc_files(int);
289:	static void uv_stringify(int, char *, char *);
1667:	static void uv_system_init_hub(void);
195:	static void uv_tsc_check_sync(void);
688:	static int uv_wakeup_secondary(int, unsigned long);
785:	static unsigned int x2apic_get_apic_id(unsigned long);

File arch/x86/kernel/audit_64.c:
33:	int audit_classify_arch(int);
42:	int audit_classify_syscall(int, unsigned int);
61:	static int audit_classes_init(void);

File arch/x86/kernel/bootflag.c:
79:	static int sbf_init(void);

File arch/x86/kernel/cc_platform.c:
62:	bool cc_platform_has(enum cc_attr);

File arch/x86/kernel/check.c:
92:	void setup_bios_corruption_check(void);
167:	static void check_corruption(struct work_struct *);
140:	static void check_for_bios_corruption(void);
33:	static int set_corruption_check(char *);
53:	static int set_corruption_check_period(char *);
72:	static int set_corruption_check_size(char *);
174:	static int start_periodic_check_for_corruption(void);

File arch/x86/kernel/cpu/amd.c:
427:	u16 amd_get_nb_id(int);
433:	u32 amd_get_nodes_per_socket(void);
1184:	void set_dr_addr_mask(unsigned long, int);
398:	static void amd_detect_ppin(struct cpuinfo_x86 *);
331:	static void amd_get_topology(struct cpuinfo_x86 *);
516:	static void bsp_init_amd(struct cpuinfo_x86 *);
852:	static void clear_rdrand_cpuid_bit(struct cpuinfo_x86 *);
1041:	static void cpu_detect_tlb_amd(struct cpuinfo_x86 *);
1153:	static bool cpu_has_amd_erratum(struct cpuinfo_x86 *, const int *);
605:	static void early_detect_mem_encrypt(struct cpuinfo_x86 *);
651:	static void early_init_amd(struct cpuinfo_x86 *);
933:	static void init_amd(struct cpuinfo_x86 *);
751:	static void init_amd_k8(struct cpuinfo_x86 *);
291:	static int nearby_node(int);
838:	static int rdrand_cmdline(char *);
439:	static void srat_detect_node(struct cpuinfo_x86 *);

File arch/x86/kernel/cpu/aperfmperf.c:
81:	unsigned int aperfmperf_get_khz(int);
119:	unsigned int arch_freq_get_on_cpu(int);
96:	void arch_freq_prepare_all(void);
39:	static void aperfmperf_snapshot_khz(void *);

File arch/x86/kernel/cpu/bugs.c:
1386:	int arch_prctl_spec_ctrl_get(struct task_struct *, unsigned long);
1319:	int arch_prctl_spec_ctrl_set(struct task_struct *, unsigned long, unsigned long);
1333:	void arch_seccomp_spec_mitigate(struct task_struct *);
79:	void check_bugs(void);
1014:	void cpu_bugs_smt_update(void);
1748:	ssize_t cpu_show_itlb_multihit(struct device *, struct device_attribute *, char *);
1733:	ssize_t cpu_show_l1tf(struct device *, struct device_attribute *, char *);
1738:	ssize_t cpu_show_mds(struct device *, struct device_attribute *, char *);
1713:	ssize_t cpu_show_meltdown(struct device *, struct device_attribute *, char *);
1728:	ssize_t cpu_show_spec_store_bypass(struct device *, struct device_attribute *, char *);
1718:	ssize_t cpu_show_spectre_v1(struct device *, struct device_attribute *, char *);
1723:	ssize_t cpu_show_spectre_v2(struct device *, struct device_attribute *, char *);
1753:	ssize_t cpu_show_srbds(struct device *, struct device_attribute *, char *);
1743:	ssize_t cpu_show_tsx_async_abort(struct device *, struct device_attribute *, char *);
598:	bool retpoline_module_ok(bool);
426:	void update_srbds_msr(void);
1398:	void x86_spec_ctrl_setup_ap(void);
156:	void x86_virt_spec_ctrl(u64, u64, bool);
1120:	static enum ssb_mitigation __ssb_select_mitigation(void);
1265:	static int ib_prctl_set(struct task_struct *, unsigned long);
1566:	static ssize_t itlb_multihit_show_state(char *);
1507:	static int l1tf_cmdline(char *);
1460:	static void l1tf_select_mitigation(void);
1549:	static ssize_t l1tf_show_state(char *);
268:	static int mds_cmdline(char *);
241:	static void mds_select_mitigation(void);
1590:	static ssize_t mds_show_state(char *);
577:	static int nospectre_v1_cmdline(char *);
531:	static void spectre_v1_select_mitigation(void);
814:	static enum spectre_v2_mitigation_cmd spectre_v2_parse_cmdline(void);
860:	static void spectre_v2_select_mitigation(void);
704:	static void spectre_v2_user_select_mitigation(enum spectre_v2_mitigation_cmd);
481:	static int srbds_parse_cmdline(char *);
456:	static void srbds_select_mitigation(void);
1088:	static enum ssb_mitigation_cmd ssb_parse_cmdline(void);
1218:	static int ssb_prctl_set(struct task_struct *, unsigned long);
310:	static void taa_select_mitigation(void);
382:	static int tsx_async_abort_parse_cmdline(char *);
1607:	static ssize_t tsx_async_abort_show_state(char *);
957:	static void update_stibp_msr(void *);
218:	static void x86_amd_ssb_disable(void);

File arch/x86/kernel/cpu/cacheinfo.c:
562:	const struct attribute_group *cache_get_priv_group(struct cacheinfo *);
649:	void cacheinfo_amd_init_llc_id(struct cpuinfo_x86 *, int);
687:	void cacheinfo_hygon_init_llc_id(struct cpuinfo_x86 *, int);
703:	void init_amd_cacheinfo(struct cpuinfo_x86 *);
988:	int init_cache_level(unsigned int);
716:	void init_hygon_cacheinfo(struct cpuinfo_x86 *);
721:	void init_intel_cacheinfo(struct cpuinfo_x86 *);
1017:	int populate_cache_leaves(unsigned int);
877:	static int __cache_amd_cpumap_setup(unsigned int, int, struct _cpuid4_info_regs *);
934:	static void __cache_cpumap_setup(unsigned int, int, struct _cpuid4_info_regs *);
306:	static void amd_calc_l3_indices(struct amd_northbridge *);
370:	static ssize_t cache_disable_0_show(struct device *, struct device_attribute *, char *);
470:	static ssize_t cache_disable_0_store(struct device *, struct device_attribute *, const char *, size_t);
371:	static ssize_t cache_disable_1_show(struct device *, struct device_attribute *, char *);
471:	static ssize_t cache_disable_1_store(struct device *, struct device_attribute *, const char *, size_t);
507:	static umode_t cache_private_attrs_is_visible(struct kobject *, struct attribute *, int);
593:	static int cpuid4_cache_lookup_regs(int, struct _cpuid4_info_regs *);
533:	static void init_amd_l3_attrs(void);
435:	static ssize_t store_cache_disable(struct cacheinfo *, const char *, size_t, unsigned int);
473:	static ssize_t subcaches_show(struct device *, struct device_attribute *, char *);
482:	static ssize_t subcaches_store(struct device *, struct device_attribute *, const char *, size_t);

File arch/x86/kernel/cpu/centaur.c:
94:	static void early_init_centaur(struct cpuinfo_x86 *);
22:	static void init_c3(struct cpuinfo_x86 *);
130:	static void init_centaur(struct cpuinfo_x86 *);

File arch/x86/kernel/cpu/common.c:
2080:	void arch_smt_update(void);
1420:	void check_null_seg_clears_base(struct cpuinfo_x86 *);
823:	void cpu_detect(struct cpuinfo_x86 *);
691:	void cpu_detect_cache_sizes(struct cpuinfo_x86 *);
1972:	void cpu_init(void);
1947:	void cpu_init_exception_handling(void);
421:	void cr4_init(void);
415:	unsigned long cr4_read_shadow(void);
400:	void cr4_update_irqsoff(unsigned long, unsigned long);
775:	void detect_ht(struct cpuinfo_x86 *);
752:	int detect_ht_early(struct cpuinfo_x86 *);
678:	void detect_num_cpu_cores(struct cpuinfo_x86 *);
1361:	void early_cpu_init(void);
975:	void get_cpu_address_sizes(struct cpuinfo_x86 *);
899:	void get_cpu_cap(struct cpuinfo_x86 *);
1688:	void identify_boot_cpu(void);
1701:	void identify_secondary_cpu(struct cpuinfo_x86 *);
612:	void load_direct_gdt(int);
623:	void load_fixmap_gdt(int);
595:	void load_percpu_segment(int);
2052:	void microcode_check(void);
359:	void native_write_cr0(unsigned long);
378:	void native_write_cr4(unsigned long);
1722:	void print_cpu_info(struct cpuinfo_x86 *);
82:	void setup_cpu_local_masks(void);
637:	void switch_to_new_gdt(int);
1780:	void syscall_init(void);
1123:	u64 x86_read_arch_cap_msr(void);
1835:	static void clear_all_debug_regs(void);
1116:	static bool cpu_matches(const struct x86_cpu_id *, unsigned long);
1229:	static void cpu_parse_early_param(void);
1133:	static void cpu_set_bug_bits(struct cpuinfo_x86 *);
90:	static void default_init(struct cpuinfo_x86 *);
1394:	static bool detect_null_seg_behavior(void);
1287:	static void early_identify_cpu(struct cpuinfo_x86 *);
532:	static void filter_cpuid_features(struct cpuinfo_x86 *, bool);
1455:	static void generic_identify(struct cpuinfo_x86 *);
797:	static void get_cpu_vendor(struct cpuinfo_x86 *);
1531:	static void identify_cpu(struct cpuinfo_x86 *);
858:	static void init_speculation_control(struct cpuinfo_x86 *);
1754:	static int setup_clearcpuid(char *);
494:	static int setup_disable_pku(char *);
305:	static int setup_disable_smap(char *);
292:	static int setup_disable_smep(char *);
1714:	static int setup_noclflush(char *);
1510:	static void validate_apic_and_package_id(struct cpuinfo_x86 *);
447:	static int x86_nofsgsbase_setup(char *);
187:	static int x86_noinvpcid_setup(char *);
170:	static int x86_nopcid_setup(char *);

File arch/x86/kernel/cpu/cpuid-deps.c:
125:	void clear_cpu_cap(struct cpuinfo_x86 *, unsigned int);
130:	void setup_clear_cpu_cap(unsigned int);
95:	static void do_clear_cpu_cap(struct cpuinfo_x86 *, unsigned int);

File arch/x86/kernel/cpu/feat_ctl.c:
96:	void init_ia32_feat_ctl(struct cpuinfo_x86 *);
23:	static void init_vmx_capabilities(struct cpuinfo_x86 *);

File arch/x86/kernel/cpu/hygon.c:
204:	static void bsp_init_hygon(struct cpuinfo_x86 *);
358:	static void cpu_detect_tlb_hygon(struct cpuinfo_x86 *);
260:	static void early_init_hygon(struct cpuinfo_x86 *);
66:	static void hygon_get_topology(struct cpuinfo_x86 *);
306:	static void init_hygon(struct cpuinfo_x86 *);
36:	static int nearby_node(int);
128:	static void srat_detect_node(struct cpuinfo_x86 *);

File arch/x86/kernel/cpu/hypervisor.c:
95:	void init_hypervisor_platform(void);
84:	static void copy_array(const void *, void *, unsigned int);
54:	static int parse_nopv(char *);

File arch/x86/kernel/cpu/intel.c:
1166:	void cpu_set_core_cap_bits(struct cpuinfo_x86 *);
1100:	bool handle_guest_split_lock(unsigned long);
1118:	bool handle_user_split_lock(struct pt_regs *, long);
1133:	void switch_to_sld(unsigned long);
334:	static void bsp_init_intel(struct cpuinfo_x86 *);
512:	static void detect_tme(struct cpuinfo_x86 *);
181:	static void early_init_intel(struct cpuinfo_x86 *);
576:	static void init_cpuid_fault(struct cpuinfo_x86 *);
606:	static void init_intel(struct cpuinfo_x86 *);
586:	static void init_intel_misc_features(struct cpuinfo_x86 *);
894:	static void intel_detect_tlb(struct cpuinfo_x86 *);
807:	static void intel_tlb_lookup(const unsigned char);
88:	static int ring3mwait_disable(char *);
1070:	static void sld_update_msr(bool);
1020:	static void split_lock_setup(void);
1004:	static bool split_lock_verify_msr(bool);
1086:	static void split_lock_warn(unsigned long);

File arch/x86/kernel/cpu/intel_epb.c:
120:	static ssize_t energy_perf_bias_show(struct device *, struct device_attribute *, char *);
135:	static ssize_t energy_perf_bias_store(struct device *, struct device_attribute *, const char *, size_t);
196:	static int intel_epb_init(void);
185:	static int intel_epb_offline(unsigned int);
174:	static int intel_epb_online(unsigned int);
75:	static void intel_epb_restore(void);
61:	static int intel_epb_save(void);

File arch/x86/kernel/cpu/intel_pconfig.c:
27:	int pconfig_target_supported(enum pconfig_target);
40:	static int intel_pconfig_init(void);

File arch/x86/kernel/cpu/match.c:
82:	bool x86_cpu_has_min_microcode_rev(const struct x86_cpu_desc *);
37:	const struct x86_cpu_id *x86_match_cpu(const struct x86_cpu_id *);

File arch/x86/kernel/cpu/mce/amd.c:
576:	bool amd_filter_mce(struct mce *);
878:	bool amd_mce_is_memory_error(struct mce *);
642:	void mce_amd_feature_init(struct cpuinfo_x86 *);
1495:	int mce_threshold_create_device(unsigned int);
1460:	int mce_threshold_remove_device(unsigned int);
111:	const char *smca_get_long_name(enum smca_bank_types);
924:	void sysvec_deferred_error(struct pt_regs *);
678:	int umc_normaddr_to_sysaddr(u64, u16, u8, u64 *);
889:	static void __log_error(unsigned int, u64, u64, u64);
924:	static void __sysvec_deferred_error(struct pt_regs *);
1307:	static int __threshold_add_blocks(struct threshold_bank *);
1230:	static int allocate_threshold_blocks(unsigned int, struct threshold_bank *, unsigned int, unsigned int, u32);
989:	static void amd_deferred_error_interrupt(void);
1029:	static void amd_threshold_interrupt(void);
208:	static void default_deferred_error_interrupt(void);
463:	static void deferred_error_interrupt_enable(struct cpuinfo_x86 *);
602:	static void disable_err_thresholding(struct cpuinfo_x86 *, unsigned int);
501:	static u32 get_block_address(u32, u32, unsigned int, unsigned int, unsigned int, u32);
1200:	static const char *get_name(unsigned int, struct threshold_block *);
1002:	static void log_and_reset_block(struct threshold_block *);
964:	static void log_error_deferred(unsigned int);
997:	static void log_error_thresholding(unsigned int, u64);
530:	static int prepare_threshold_block(unsigned int, unsigned int, u32, int, u32);
1164:	static ssize_t show(struct kobject *, struct attribute *, char *);
1127:	static ssize_t show_error_count(struct threshold_block *, char *);
1076:	static ssize_t show_interrupt_enable(struct threshold_block *, char *);
1077:	static ssize_t show_threshold_limit(struct threshold_block *, char *);
236:	static void smca_configure(unsigned int, unsigned int);
214:	static void smca_set_misc_banks_map(unsigned int, unsigned int);
1175:	static ssize_t store(struct kobject *, struct attribute *, const char *, size_t);
1080:	static ssize_t store_interrupt_enable(struct threshold_block *, const char *, size_t);
1103:	static ssize_t store_threshold_limit(struct threshold_block *, const char *, size_t);
1402:	static void threshold_block_release(struct kobject *);
1331:	static int threshold_create_bank(struct threshold_bank **, unsigned int, unsigned int);
384:	static void threshold_restart_bank(void *);

File arch/x86/kernel/cpu/mce/apei.c:
137:	int apei_check_mce(void);
142:	int apei_clear_mce(u64);
29:	void apei_mce_report_mem_error(int, struct cper_sec_mem_err *);
103:	ssize_t apei_read_mce(struct mce *, u64 *);
71:	int apei_write_mce(struct mce *);

File arch/x86/kernel/cpu/mce/core.c:
1329:	void do_machine_check(struct pt_regs *);
376:	bool ex_handler_rdmsr_fault(const struct exception_table_entry *, struct pt_regs *, int, unsigned long, unsigned long);
430:	bool ex_handler_wrmsr_fault(const struct exception_table_entry *, struct pt_regs *, int, unsigned long, unsigned long);
2040:	void exc_machine_check(struct pt_regs *);
1979:	bool filter_mce(struct mce *);
740:	bool machine_check_poll(enum mcp_flags, mce_banks_t *);
510:	int mce_available(struct cpuinfo_x86 *);
2137:	void mce_disable_bank(int);
2725:	struct dentry *mce_get_debugfs_dir(void);
599:	bool mce_is_correctable(struct mce *);
558:	bool mce_is_memory_error(struct mce *);
156:	void mce_log(struct mce *);
1583:	int mce_notify_irq(void);
163:	void mce_register_decode_chain(struct notifier_block *);
133:	void mce_setup(struct mce *);
1558:	void mce_timer_kick(unsigned long);
173:	void mce_unregister_decode_chain(struct notifier_block *);
534:	int mce_usable_address(struct mce *);
2114:	void mcheck_cpu_clear(struct cpuinfo_x86 *);
2077:	void mcheck_cpu_init(struct cpuinfo_x86 *);
2204:	int mcheck_init(void);
2050:	void noist_exc_machine_check(struct pt_regs *);
1177:	static void __mc_scan_banks(struct mce *, struct pt_regs *, struct mce *, unsigned long *, unsigned long *, int, int *);
2130:	static void __mce_disable_bank(void *);
1744:	static int __mcheck_cpu_apply_quirks(struct cpuinfo_x86 *);
1622:	static void __mcheck_cpu_cap_init(void);
1698:	static void __mcheck_cpu_check_banks(void);
1673:	static void __mcheck_cpu_init_clear_banks(void);
1649:	static void __mcheck_cpu_init_generic(void);
1971:	static void __mcheck_cpu_init_timer(void);
1909:	static void __mcheck_cpu_init_vendor(struct cpuinfo_x86 *);
226:	static void __print_mce(struct mce *);
1510:	static void __start_timer(struct timer_list *, unsigned long);
189:	static u32 addr_reg(int);
179:	static u32 ctl_reg(int);
2757:	static int fake_panic_fops_open(struct inode *, struct file *);
2744:	static int fake_panic_get(void *, u64 *);
2750:	static int fake_panic_set(void *, u64);
1253:	static void kill_me_maybe(struct callback_head *);
1245:	static void kill_me_now(struct callback_head *);
1503:	static unsigned long mce_adjust_timer_default(unsigned long);
1153:	static bool mce_check_crashing_cpu(void);
2592:	static int mce_cpu_dead(unsigned int);
2602:	static int mce_cpu_online(unsigned int);
2619:	static int mce_cpu_pre_down(unsigned int);
2292:	static void mce_cpu_restart(void *);
664:	static int mce_default_notifier(struct notifier_block *, unsigned long, void *);
2491:	static int mce_device_create(unsigned int);
2485:	static void mce_device_release(struct device *);
2543:	static void mce_device_remove(unsigned int);
2309:	static void mce_disable_cmci(void *);
2226:	static void mce_disable_error_reporting(void);
614:	static int mce_early_notifier(struct notifier_block *, unsigned long, void *);
2316:	static void mce_enable_ce(void *);
523:	static void mce_irq_work_cb(struct irq_work *);
849:	static int mce_no_way_out(struct mce *, char **, unsigned long *, struct pt_regs *);
298:	static void mce_panic(const char *, struct mce *, char *);
395:	static u64 mce_rdmsrl(u32);
687:	static void mce_read_aux(struct mce *, int);
2574:	static void mce_reenable_cpu(void);
937:	static void mce_reign(void);
999:	static int mce_start(int *);
2275:	static void mce_syscore_resume(void);
2265:	static void mce_syscore_shutdown(void);
2259:	static int mce_syscore_suspend(void);
888:	static int mce_timed_out(u64 *, const char *);
1523:	static void mce_timer_fn(struct timer_list *);
449:	static void mce_wrmsrl(u32, u64);
2717:	static int mcheck_disable(char *);
2165:	static int mcheck_enable(char *);
2657:	static int mcheck_init_device(void);
2772:	static int mcheck_late_init(void);
194:	static u32 misc_reg(int);
359:	static int msr_to_offset(u32);
269:	static void print_mce(struct mce *);
1279:	static void queue_task_work(struct mce *, char *, int);
1723:	static void quirk_sandybridge_ifu(int, struct mce *, struct pt_regs *);
2355:	static ssize_t set_bank(struct device *, struct device_attribute *, const char *, size_t);
2406:	static ssize_t set_cmci_disabled(struct device *, struct device_attribute *, const char *, size_t);
2379:	static ssize_t set_ignore_ce(struct device *, struct device_attribute *, const char *, size_t);
2338:	static ssize_t show_bank(struct device *, struct device_attribute *, char *);
209:	static u32 smca_addr_reg(int);
199:	static u32 smca_ctl_reg(int);
214:	static u32 smca_misc_reg(int);
204:	static u32 smca_status_reg(int);
184:	static u32 status_reg(int);
2432:	static ssize_t store_int_with_restart(struct device *, struct device_attribute *, const char *, size_t);
637:	static int uc_decode_notifier(void *, unsigned long, struct notifier_block *);
1990:	static void unexpected_machine_check(struct pt_regs *);
285:	static void wait_for_panic(void);

File arch/x86/kernel/cpu/mce/dev-mcelog.c:
282:	void mce_register_injector_chain(struct notifier_block *);
288:	void mce_unregister_injector_chain(struct notifier_block *);
89:	void mce_work_trigger(void);
163:	static int __mce_read_apei(char **, size_t);
36:	static int dev_mce_log(void *, unsigned long, struct notifier_block *);
344:	static int dev_mcelog_init_device(void);
255:	static long mce_chrdev_ioctl(struct file *, unsigned int, unsigned long);
128:	static int mce_chrdev_open(struct inode *, struct file *);
245:	static __poll_t mce_chrdev_poll(struct file *, poll_table *);
203:	static ssize_t mce_chrdev_read(struct file *, char *, size_t, loff_t *);
148:	static int mce_chrdev_release(struct inode *, struct file *);
294:	static ssize_t mce_chrdev_write(struct file *, const char *, size_t, loff_t *);
81:	static void mce_do_trigger(struct work_struct *);
103:	static ssize_t set_trigger(struct device *, struct device_attribute *, const char *, size_t);
96:	static ssize_t show_trigger(struct device *, struct device_attribute *, char *);

File arch/x86/kernel/cpu/mce/genpool.c:
97:	int mce_gen_pool_add(struct mce *);
92:	bool mce_gen_pool_empty(void);
140:	int mce_gen_pool_init(void);
55:	struct llist_node *mce_gen_pool_prepare_records(void);
74:	void mce_gen_pool_process(struct work_struct *);

File arch/x86/kernel/cpu/mce/intel.c:
373:	void cmci_clear(void);
417:	void cmci_disable_bank(int);
177:	unsigned long cmci_intel_adjust_timer(unsigned long);
343:	void cmci_recheck(void);
397:	void cmci_rediscover(void);
410:	void cmci_reenable(void);
462:	void intel_clear_lmce(void);
526:	bool intel_filter_mce(struct mce *);
430:	void intel_init_cmci(void);
449:	void intel_init_lmce(void);
131:	bool mce_intel_cmci_poll(void);
521:	void mce_intel_feature_clear(struct cpuinfo_x86 *);
513:	void mce_intel_feature_init(struct cpuinfo_x86 *);
148:	void mce_intel_hcpu_update(unsigned long);
357:	static void __cmci_disable_bank(int);
268:	static void cmci_discover(int);
387:	static void cmci_rediscover_work_func(void *);
217:	static bool cmci_storm_detect(void);
76:	static int cmci_supported(int *);
156:	static void cmci_toggle_interrupt_mode(bool);
474:	static void intel_ppin_init(struct cpuinfo_x86 *);
255:	static void intel_threshold_interrupt(void);
100:	static bool lmce_supported(void);

File arch/x86/kernel/cpu/mce/severity.c:
418:	void mcheck_vendor_init_severity(void);
270:	static int error_context(struct mce *, struct pt_regs *);
218:	static bool is_copy_from_user(struct pt_regs *);
324:	static int mce_severity_amd(struct mce *, struct pt_regs *, int, char **, bool);
293:	static int mce_severity_amd_smca(struct mce *, enum context);
377:	static int mce_severity_intel(struct mce *, struct pt_regs *, int, char **, bool);
433:	static void *s_next(struct seq_file *, void *, loff_t *);
444:	static int s_show(struct seq_file *, void *);
426:	static void *s_start(struct seq_file *, loff_t *);
440:	static void s_stop(struct seq_file *, void *);
458:	static int severities_coverage_open(struct inode *, struct file *);
463:	static ssize_t severities_coverage_write(struct file *, const char *, size_t, loff_t *);
481:	static int severities_debugfs_init(void);

File arch/x86/kernel/cpu/mce/therm_throt.c:
647:	void intel_init_thermal(struct cpuinfo_x86 *);
636:	void mcheck_intel_therm_init(void);
617:	void sysvec_thermal(struct pt_regs *);
617:	static void __sysvec_thermal(struct pt_regs *);
201:	static void clear_therm_status_log(int);
219:	static void get_therm_status(int, bool *, u8 *);
397:	static int int_pln_enable_setup(char *);
573:	static void intel_thermal_interrupt(void);
627:	static int intel_thermal_supported(struct cpuinfo_x86 *);
521:	static void notify_package_thresholds(__u64);
158:	static ssize_t therm_throt_device_show_core_power_limit_count(struct device *, struct device_attribute *, char *);
155:	static ssize_t therm_throt_device_show_core_throttle_count(struct device *, struct device_attribute *, char *);
167:	static ssize_t therm_throt_device_show_core_throttle_max_time_ms(struct device *, struct device_attribute *, char *);
173:	static ssize_t therm_throt_device_show_core_throttle_total_time_ms(struct device *, struct device_attribute *, char *);
164:	static ssize_t therm_throt_device_show_package_power_limit_count(struct device *, struct device_attribute *, char *);
161:	static ssize_t therm_throt_device_show_package_throttle_count(struct device *, struct device_attribute *, char *);
170:	static ssize_t therm_throt_device_show_package_throttle_max_time_ms(struct device *, struct device_attribute *, char *);
176:	static ssize_t therm_throt_device_show_package_throttle_total_time_ms(struct device *, struct device_attribute *, char *);
312:	static void therm_throt_process(bool, int, int);
407:	static int thermal_throttle_add_dev(struct device *, unsigned int);
505:	static int thermal_throttle_init_device(void);
485:	static int thermal_throttle_offline(unsigned int);
466:	static int thermal_throttle_online(unsigned int);
238:	static void throttle_active_work(struct work_struct *);
609:	static void unexpected_thermal_interrupt(void);

File arch/x86/kernel/cpu/mce/threshold.c:
24:	void sysvec_threshold(struct pt_regs *);
24:	static void __sysvec_threshold(struct pt_regs *);
16:	static void default_threshold_interrupt(void);

File arch/x86/kernel/cpu/microcode/amd.c:
959:	void exit_amd_microcode(void);
943:	struct microcode_ops *init_amd_microcode(void);
510:	void load_ucode_amd_ap(unsigned int);
499:	void load_ucode_amd_bsp(unsigned int);
567:	void reload_ucode_amd(void);
544:	int save_microcode_in_initrd_amd(unsigned int);
393:	static int __apply_microcode_amd(struct microcode_amd *);
473:	static void __load_ucode_amd(unsigned int, struct cpio_data *);
669:	static enum ucode_state apply_microcode_amd(int);
419:	static bool apply_microcode_early_amd(u32, void *, size_t, bool);
647:	static int collect_cpu_info_amd(int, struct cpu_signature *);
636:	static struct ucode_patch *find_patch(unsigned int);
625:	static void free_cache(void);
743:	static void free_equiv_cpu_table(void);
719:	static size_t install_equiv_cpu_table(const u8 *, size_t);
838:	static enum ucode_state load_microcode_amd(bool, u8, const u8 *, size_t);
928:	static void microcode_fini_cpu_amd(int);
296:	static size_t parse_container(u8 *, size_t, struct cont_desc *);
888:	static enum ucode_state request_microcode_amd(int, struct device *, bool);
923:	static enum ucode_state request_microcode_user(int, const void *, size_t);
376:	static void scan_containers(u8 *, size_t, struct cont_desc *);
602:	static void update_cache(struct ucode_patch *);
762:	static int verify_and_add_patch(u8, u8 *, unsigned int, unsigned int *);
89:	static bool verify_container(const u8 *, size_t, bool);
116:	static bool verify_equivalence_table(const u8 *, size_t, bool);
236:	static int verify_patch(u8, const u8 *, size_t, u32 *, bool);

File arch/x86/kernel/cpu/microcode/core.c:
250:	struct cpio_data find_microcode_in_initrd(const char *, bool);
146:	bool get_builtin_firmware(struct cpio_data *, const char *);
204:	void load_ucode_ap(void);
160:	void load_ucode_bsp(void);
833:	int microcode_init(void);
318:	void reload_early_microcode(void);
548:	static int __reload_late(void *);
522:	static int __wait_for_cpus(atomic_t *, long long);
373:	static void apply_microcode_local(void *);
109:	static bool check_loader_disabled_bsp(void);
359:	static int collect_cpu_info(int);
339:	static void collect_cpu_info_local(void *);
780:	static void mc_bp_resume(void);
811:	static int mc_cpu_down_prep(unsigned int);
802:	static int mc_cpu_online(unsigned int);
795:	static int mc_cpu_starting(unsigned int);
739:	static int mc_device_add(struct device *, struct subsys_interface *);
758:	static void mc_device_remove(struct device *, struct subsys_interface *);
476:	static void microcode_dev_exit(void);
702:	static enum ucode_state microcode_init_cpu(int, bool);
418:	static int microcode_open(struct inode *, struct file *);
423:	static ssize_t microcode_write(struct file *, const char *, size_t, loff_t *);
663:	static ssize_t pf_show(struct device *, struct device_attribute *, char *);
616:	static ssize_t reload_store(struct device *, struct device_attribute *, const char *, size_t);
227:	static int save_microcode_in_initrd(void);
655:	static ssize_t version_show(struct device *, struct device_attribute *, char *);

File arch/x86/kernel/cpu/microcode/intel.c:
989:	struct microcode_ops *init_intel_microcode(void);
652:	void load_ucode_intel_ap(void);
638:	void load_ucode_intel_bsp(void);
703:	void reload_ucode_intel(void);
581:	int save_microcode_in_initrd_intel(void);
612:	static struct microcode_intel *__load_ucode_intel(struct ucode_cpu_info *);
538:	static int apply_microcode_early(struct ucode_cpu_info *, bool);
747:	static enum ucode_state apply_microcode_intel(int);
719:	static int collect_cpu_info(int, struct cpu_signature *);
345:	static int collect_cpu_info_early(struct ucode_cpu_info *);
65:	static int find_matching_signature(void *, unsigned int, int);
681:	static struct microcode_intel *find_patch(struct ucode_cpu_info *);
819:	static enum ucode_state generic_load_microcode(int, struct iov_iter *);
903:	static bool is_blacklisted(unsigned int);
456:	static bool load_builtin_intel_microcode(struct cpio_data *);
103:	static struct ucode_patch *memdup_patch(void *, unsigned int);
180:	static int microcode_sanity_check(void *, int);
476:	static void print_ucode_info(unsigned int, struct ucode_cpu_info *, struct ucode_cpu_info *);
926:	static enum ucode_state request_microcode_fw(int, struct device *, bool);
958:	static enum ucode_state request_microcode_user(int, const void *, size_t);
120:	static void save_microcode_patch(struct ucode_cpu_info *, void *, unsigned int);
283:	static struct microcode_intel *scan_microcode(void *, size_t, struct ucode_cpu_info *, bool);

File arch/x86/kernel/cpu/mshyperv.c:
127:	void hv_remove_crash_handler(void);
115:	void hv_remove_kexec_handler(void);
102:	void hv_remove_stimer0_irq(int);
68:	void hv_remove_vmbus_irq(void);
121:	void hv_setup_crash_handler(void (*)(struct pt_regs *));
109:	void hv_setup_kexec_handler(void (*)(void));
93:	int hv_setup_stimer0_irq(int *, int *, void (*)(void));
58:	int hv_setup_vmbus_irq(int, void (*)(void));
44:	void sysvec_hyperv_callback(struct pt_regs *);
80:	void sysvec_hyperv_stimer0(struct pt_regs *);
44:	static void __sysvec_hyperv_callback(struct pt_regs *);
80:	static void __sysvec_hyperv_stimer0(struct pt_regs *);
187:	static unsigned char hv_get_nmi_reason(void);
212:	static unsigned long hv_get_tsc_khz(void);
154:	static void hv_machine_crash_shutdown(struct pt_regs *);
134:	static void hv_machine_shutdown(void);
198:	static int hv_nmi_unknown(unsigned int, struct pt_regs *);
222:	static void hv_smp_prepare_boot_cpu(void);
231:	static void ms_hyperv_init_platform(void);
168:	static uint32_t ms_hyperv_platform(void);

File arch/x86/kernel/cpu/mtrr/cleanup.c:
829:	int amd_special_default_mtrr(void);
683:	int mtrr_cleanup(unsigned int);
877:	int mtrr_trim_uncached_memory(unsigned long);
153:	static int disable_mtrr_cleanup_setup(char *);
813:	static int disable_mtrr_trim_setup(char *);
160:	static int enable_mtrr_cleanup_setup(char *);
590:	static void mtrr_calc_range_state(u64, u64, unsigned long, int, unsigned long);
167:	static int mtrr_cleanup_debug_setup(char *);
636:	static void mtrr_print_out_one_result(int);
440:	static int parse_mtrr_chunk_size_opt(char *);
452:	static int parse_mtrr_gran_size_opt(char *);
464:	static int parse_mtrr_spare_reg(char *);
527:	static void print_out_mtrr_range_state(void);
249:	static unsigned int range_to_mtrr(unsigned int, unsigned long, unsigned long, unsigned char);
295:	static unsigned int range_to_mtrr_with_hole(struct var_mtrr_state *, unsigned long, unsigned long);
852:	static u64 real_trim_memory(unsigned long, unsigned long);
212:	static void set_var_mtrr_all(unsigned int);
139:	static unsigned long sum_ranges(struct range *, int);
65:	static int x86_get_mtrr_mem_range(struct range *, int, unsigned long, unsigned long);
473:	static int x86_setup_var_mtrrs(int, u64, u64, struct range *);

File arch/x86/kernel/cpu/mtrr/generic.c:
323:	void fill_mtrr_var_range(unsigned int, u32, u32, u32, u32);
560:	int generic_get_free_region(unsigned long, unsigned long, int);
863:	int generic_validate_add_page(unsigned long, unsigned long, unsigned int);
463:	bool get_mtrr_state(void);
449:	void mtrr_bp_pat_init(void);
351:	void mtrr_save_fixed_ranges(void *);
502:	void mtrr_state_warn(void);
255:	u8 mtrr_type_lookup(u64, u64, u8 *);
524:	void mtrr_wrmsr(unsigned int, unsigned int, unsigned int);
909:	int positive_have_wrcomb(void);
83:	static int check_type_overlap(u8 *, u8 *);
579:	static void generic_get_mtrr(unsigned int, unsigned long *, unsigned long *, mtrr_type *);
902:	static int generic_have_wrcomb(void);
795:	static void generic_set_all(void);
831:	static void generic_set_mtrr(unsigned int, unsigned long, unsigned long, mtrr_type);
336:	static void get_fixed_ranges(mtrr_type *);
316:	static void get_mtrr_var_range(unsigned int, struct mtrr_var_range *);
160:	static u8 mtrr_type_lookup_variable(u64, u64, u64 *, int *, u8 *);
777:	static void post_set(void);
730:	static void prepare_set(void);
381:	static void print_fixed(unsigned int, unsigned int, const mtrr_type *);
361:	static void print_fixed_last(void);
403:	static void print_mtrr_state(void);
637:	static int set_fixed_ranges(mtrr_type *);
691:	static unsigned long set_mtrr_state(void);
658:	static bool set_mtrr_var_ranges(unsigned int, struct mtrr_var_range *);

File arch/x86/kernel/cpu/mtrr/if.c:
30:	const char *mtrr_attrib_to_str(int);
338:	static int mtrr_close(struct inode *, struct file *);
38:	static int mtrr_file_add(unsigned long, unsigned long, unsigned int, struct file *, int, bool);
64:	static int mtrr_file_del(unsigned long, unsigned long, int, struct file *, struct file *);
411:	static int mtrr_if_init(void);
155:	static long mtrr_ioctl(struct file *, unsigned int, unsigned long);
388:	static int mtrr_open(struct inode *, struct file *);
357:	static int mtrr_seq_show(struct seq_file *, void *);
94:	static ssize_t mtrr_write(struct file *, const char *, size_t, loff_t *);

File arch/x86/kernel/cpu/mtrr/mtrr.c:
567:	int arch_phys_wc_add(unsigned long, unsigned long);
593:	void arch_phys_wc_del(int);
613:	int arch_phys_wc_index(int);
453:	int mtrr_add(unsigned long, unsigned long, unsigned int, bool);
301:	int mtrr_add_page(unsigned long, unsigned long, unsigned int, bool);
789:	void mtrr_ap_init(void);
842:	void mtrr_aps_init(void);
689:	void mtrr_bp_init(void);
859:	void mtrr_bp_restore(void);
543:	int mtrr_del(int, unsigned long, unsigned long);
478:	int mtrr_del_page(int, unsigned long, unsigned long);
818:	void mtrr_save_state(void);
829:	void set_mtrr_aps_delayed_init(void);
83:	void set_mtrr_ops(const struct mtrr_ops *);
407:	static int mtrr_check(unsigned long, unsigned long);
867:	static int mtrr_init_finialize(void);
161:	static int mtrr_rendezvous_handler(void *);
659:	static void mtrr_restore(void);
647:	static int mtrr_save(void);
124:	static void set_num_var_ranges(void);

File arch/x86/kernel/cpu/perfctr-watchdog.c:
109:	int avail_to_resrv_perfctr_nmi_bit(unsigned int);
160:	void release_evntsel_nmi(unsigned int);
132:	void release_perfctr_nmi(unsigned int);
145:	int reserve_evntsel_nmi(unsigned int);
117:	int reserve_perfctr_nmi(unsigned int);

File arch/x86/kernel/cpu/proc.c:
167:	static void *c_next(struct seq_file *, void *, loff_t *);
159:	static void *c_start(struct seq_file *, loff_t *);
173:	static void c_stop(struct seq_file *, void *);
61:	static int show_cpuinfo(struct seq_file *, void *);
17:	static void show_cpuinfo_core(struct seq_file *, struct cpuinfo_x86 *, unsigned int);

File arch/x86/kernel/cpu/rdrand.c:
30:	void x86_init_rdrand(struct cpuinfo_x86 *);
14:	static int x86_rdrand_setup(char *);

File arch/x86/kernel/cpu/resctrl/./pseudo_lock_event.h:
18:	int __traceiter_pseudo_lock_l2(void *, u64, u64);
28:	int __traceiter_pseudo_lock_l3(void *, u64, u64);
10:	int __traceiter_pseudo_lock_mem_latency(void *, u32);
18:	static void __bpf_trace_pseudo_lock_l2(void *, u64, u64);
10:	static void __bpf_trace_pseudo_lock_mem_latency(void *, u32);
18:	static void perf_trace_pseudo_lock_l2(void *, u64, u64);
28:	static void perf_trace_pseudo_lock_l3(void *, u64, u64);
10:	static void perf_trace_pseudo_lock_mem_latency(void *, u32);
18:	static void trace_event_raw_event_pseudo_lock_l2(void *, u64, u64);
28:	static void trace_event_raw_event_pseudo_lock_l3(void *, u64, u64);
10:	static void trace_event_raw_event_pseudo_lock_mem_latency(void *, u32);
18:	static enum print_line_t trace_raw_output_pseudo_lock_l2(struct trace_iterator *, int, struct trace_event *);
28:	static enum print_line_t trace_raw_output_pseudo_lock_l3(struct trace_iterator *, int, struct trace_event *);
10:	static enum print_line_t trace_raw_output_pseudo_lock_mem_latency(struct trace_iterator *, int, struct trace_event *);

File arch/x86/kernel/cpu/resctrl/core.c:
378:	u32 delay_bw_map(unsigned long, struct rdt_resource *);
407:	struct rdt_domain *get_domain_from_cpu(int, struct rdt_resource *);
225:	bool is_mba_sc(struct rdt_resource *);
420:	void rdt_ctrl_update(void *);
444:	struct rdt_domain *rdt_find_domain(struct rdt_resource *, int, struct list_head **);
970:	void resctrl_cpu_detect(struct cpuinfo_x86 *);
469:	void setup_default_ctrlval(struct rdt_resource *, u32 *, u32 *);
888:	static void __check_quirks_intel(void);
399:	static void cat_wrmsr(struct rdt_domain *, struct msr_param *, struct rdt_resource *);
673:	static void clear_closid_rmid(int);
559:	static void domain_add_cpu(int, struct rdt_resource *);
609:	static void domain_remove_cpu(int, struct rdt_resource *);
485:	static int domain_setup_ctrlval(struct rdt_resource *, struct rdt_domain *);
510:	static int domain_setup_mon_state(struct rdt_resource *, struct rdt_domain *);
843:	static bool get_rdt_alloc_resources(void);
365:	static void mba_wrmsr_amd(struct rdt_domain *, struct msr_param *, struct rdt_resource *);
388:	static void mba_wrmsr_intel(struct rdt_domain *, struct msr_param *, struct rdt_resource *);
810:	static bool rdt_cpu_has(int);
318:	static void rdt_get_cache_alloc_cfg(int, struct rdt_resource *);
334:	static void rdt_get_cdp_config(int, int);
734:	static void rdt_init_padding(void);
1041:	static void resctrl_exit(void);
999:	static int resctrl_late_init(void);
710:	static int resctrl_offline_cpu(unsigned int);
684:	static int resctrl_online_cpu(unsigned int);
784:	static int set_rdt_options(char *);

File arch/x86/kernel/cpu/resctrl/ctrlmondata.c:
432:	void mon_event_read(struct rmid_read *, struct rdt_resource *, struct rdt_domain *, struct rdtgroup *, int, int);
60:	int parse_bw(struct rdt_parse_data *, struct rdt_resource *, struct rdt_domain *);
128:	int parse_cbm(struct rdt_parse_data *, struct rdt_resource *, struct rdt_domain *);
449:	int rdtgroup_mondata_show(struct seq_file *, void *);
394:	int rdtgroup_schemata_show(struct kernfs_open_file *, struct seq_file *, void *);
297:	ssize_t rdtgroup_schemata_write(struct kernfs_open_file *, char *, size_t, loff_t);
239:	int update_domains(struct rdt_resource *, int);
86:	static bool cbm_validate(char *, u32 *, struct rdt_resource *);
374:	static void show_doms(struct seq_file *, struct rdt_resource *, int);

File arch/x86/kernel/cpu/resctrl/monitor.c:
108:	void __check_limbo(struct rdt_domain *, bool);
149:	int alloc_rmid(void);
473:	void cqm_handle_limbo(struct work_struct *);
493:	void cqm_setup_limbo_handler(struct rdt_domain *, unsigned long);
200:	void free_rmid(u32);
139:	bool has_busy_rmid(struct rdt_resource *, struct rdt_domain *);
504:	void mbm_handle_overflow(struct work_struct *);
538:	void mbm_setup_overflow_handler(struct rdt_domain *, unsigned long);
294:	void mon_event_count(void *);
612:	int rdt_get_mon_l3_config(struct rdt_resource *);
225:	static u64 __mon_event_count(u32, struct rmid_read *);
77:	static u64 __rmid_read(u32, u32);
165:	static void add_rmid_to_limbo(struct rmid_entry *);
550:	static int dom_data_init(struct rdt_resource *, struct rdt_resource *);
600:	static void l3_mon_evt_init(struct rdt_resource *);
439:	static void mbm_update(struct rdt_domain *, int, struct rdt_resource *);
356:	static void update_mba_bw(struct rdtgroup *, struct rdt_domain *);

File arch/x86/kernel/cpu/resctrl/pseudo_lock.c:
1561:	int rdt_pseudo_lock_init(void);
1582:	void rdt_pseudo_lock_release(void);
793:	bool rdtgroup_cbm_overlaps_pseudo_locked(struct rdt_domain *, unsigned long);
648:	int rdtgroup_locksetup_enter(struct rdtgroup *);
755:	int rdtgroup_locksetup_exit(struct rdtgroup *);
1271:	int rdtgroup_pseudo_lock_create(struct rdtgroup *);
1400:	void rdtgroup_pseudo_lock_remove(struct rdtgroup *);
820:	bool rdtgroup_pseudo_locked_in_hierarchy(struct rdt_domain *);
867:	static int measure_cycles_lat_fn(void *);
1047:	static int measure_l2_residency(void *);
1085:	static int measure_l3_residency(void *);
931:	static int measure_residency_fn(struct pseudo_lock_region *, struct residency_counts *, struct perf_event_attr *, struct perf_event_attr *);
200:	static int pseudo_lock_cstates_constrain(struct pseudo_lock_region *);
174:	static void pseudo_lock_cstates_relax(struct pseudo_lock_region *);
1471:	static int pseudo_lock_dev_mmap(struct file *, struct vm_area_struct *);
1461:	static int pseudo_lock_dev_mremap(struct vm_area_struct *);
1422:	static int pseudo_lock_dev_open(struct inode *, struct file *);
1444:	static int pseudo_lock_dev_release(struct inode *, struct file *);
1551:	static char *pseudo_lock_devnode(struct device *, umode_t *);
413:	static int pseudo_lock_fn(void *);
1151:	static int pseudo_lock_measure_cycles(struct rdtgroup *, int);
1218:	static ssize_t pseudo_lock_measure_trigger(struct file *, const char *, size_t, loff_t *);
344:	static int pseudo_lock_region_alloc(struct pseudo_lock_region *);
275:	static int pseudo_lock_region_init(struct pseudo_lock_region *);
595:	static int rdtgroup_locksetup_user_restore(struct rdtgroup *);
548:	static int rdtgroup_locksetup_user_restrict(struct rdtgroup *);

File arch/x86/kernel/cpu/resctrl/rdtgroup.c:
129:	void closid_free(int);
96:	int closids_supported(void);
2521:	void mkdir_mondata_subdir_allrdtgrp(struct rdt_resource *, struct rdt_domain *);
774:	int proc_resctrl_show(struct seq_file *, struct pid_namespace *, struct pid *, struct task_struct *);
1915:	void rdt_domain_reconfigure_cdp(struct rdt_resource *);
56:	void rdt_last_cmd_clear(void);
68:	void rdt_last_cmd_printf(const char *, ...);
62:	void rdt_last_cmd_puts(const char *);
1229:	bool rdtgroup_cbm_overlaps(struct rdt_resource *, struct rdt_domain *, unsigned long, int, bool);
1371:	unsigned int rdtgroup_cbm_to_size(struct rdt_resource *, struct rdt_domain *, unsigned long);
3247:	void rdtgroup_exit(void);
3195:	int rdtgroup_init(void);
2038:	struct rdtgroup *rdtgroup_kn_lock_live(struct kernfs_node *);
1718:	int rdtgroup_kn_mode_restore(struct rdtgroup *, const char *, umode_t);
1680:	int rdtgroup_kn_mode_restrict(struct rdtgroup *, const char *);
2057:	void rdtgroup_kn_unlock(struct kernfs_node *);
155:	enum rdtgrp_mode rdtgroup_mode_by_closid(int);
612:	int rdtgroup_tasks_assigned(struct rdtgroup *);
2455:	void rmdir_mondata_subdir_allrdtgrp(struct rdt_resource *, unsigned int);
1652:	void thread_throttle_mode_init(void);
2649:	static int __init_one_rdt_domain(struct rdt_domain *, struct rdt_resource *, u32);
1173:	static bool __rdtgroup_cbm_overlaps(struct rdt_resource *, struct rdt_domain *, unsigned long, int, bool);
528:	static void _update_task_closid_rmid(void *);
2004:	static void cdp_disable_all(void);
376:	static void cpumask_rdtgrp_clear(struct rdtgroup *, struct cpumask *);
386:	static int cpus_ctrl_write(struct rdtgroup *, cpumask_var_t, cpumask_var_t, cpumask_var_t);
333:	static int cpus_mon_write(struct rdtgroup *, cpumask_var_t, cpumask_var_t);
2334:	static void free_all_child_rdtgrp(struct rdtgroup *);
1861:	static void l2_qos_cfg_update(void *);
1854:	static void l3_qos_cfg_update(void *);
1019:	static int max_threshold_occ_show(struct kernfs_open_file *, struct seq_file *, void *);
1042:	static ssize_t max_threshold_occ_write(struct kernfs_open_file *, char *, size_t, loff_t);
2576:	static int mkdir_mondata_all(struct kernfs_node *, struct rdtgroup *, struct kernfs_node **);
2472:	static int mkdir_mondata_subdir(struct kernfs_node *, struct rdt_domain *, struct rdt_resource *, struct rdtgroup *);
2776:	static int mkdir_rdt_prepare(struct kernfs_node *, const char *, umode_t, enum rdt_group_type, struct rdtgroup **);
1827:	static int mongroup_create_dir(struct kernfs_node *, struct rdtgroup *, char *, struct kernfs_node **);
892:	static int rdt_bit_usage_show(struct kernfs_open_file *, struct seq_file *, void *);
1001:	static int rdt_bw_gran_show(struct kernfs_open_file *, struct seq_file *, void *);
1104:	static int rdt_cdp_peer_get(struct rdt_domain *, struct rdt_resource **, struct rdt_domain **, struct rdt_resource *, struct rdt_resource *);
851:	static int rdt_default_ctrl_show(struct kernfs_open_file *, struct seq_file *, void *);
1010:	static int rdt_delay_linear_show(struct kernfs_open_file *, struct seq_file *, void *);
2226:	static void rdt_fs_context_free(struct fs_context *);
2098:	static int rdt_get_tree(struct fs_context *);
2240:	static int rdt_init_fs_context(struct fs_context *);
2399:	static void rdt_kill_sb(struct super_block *);
827:	static int rdt_last_cmd_status_show(struct kernfs_open_file *, struct seq_file *, void *);
970:	static int rdt_min_bw_show(struct kernfs_open_file *, struct seq_file *, void *);
860:	static int rdt_min_cbm_bits_show(struct kernfs_open_file *, struct seq_file *, void *);
989:	static int rdt_mon_features_show(struct kernfs_open_file *, struct seq_file *, void *);
2304:	static void rdt_move_group_tasks(struct rdtgroup *, struct rdtgroup *, struct cpumask *);
842:	static int rdt_num_closids_show(struct kernfs_open_file *, struct seq_file *, void *);
979:	static int rdt_num_rmids_show(struct kernfs_open_file *, struct seq_file *, void *);
2199:	static int rdt_parse_param(struct fs_context *, struct fs_parameter *);
869:	static int rdt_shareable_bits_show(struct kernfs_open_file *, struct seq_file *, void *);
1029:	static int rdt_thread_throttle_mode_show(struct kernfs_open_file *, struct seq_file *, void *);
1608:	static int rdtgroup_add_files(struct kernfs_node *, unsigned long);
261:	static int rdtgroup_cpus_show(struct kernfs_open_file *, struct seq_file *, void *);
441:	static ssize_t rdtgroup_cpus_write(struct kernfs_open_file *, char *, size_t, loff_t);
1782:	static int rdtgroup_create_info_dir(struct kernfs_node *);
232:	static ssize_t rdtgroup_file_write(struct kernfs_open_file *, char *, size_t, loff_t);
2749:	static int rdtgroup_init_alloc(struct rdtgroup *);
189:	static int rdtgroup_kn_set_ugid(struct kernfs_node *);
2982:	static int rdtgroup_mkdir(struct kernfs_node *, const char *, umode_t);
2913:	static int rdtgroup_mkdir_ctrl_mon(struct kernfs_node *, const char *, umode_t);
1760:	static int rdtgroup_mkdir_info_resdir(struct rdt_resource *, char *, unsigned long);
1064:	static int rdtgroup_mode_show(struct kernfs_open_file *, struct seq_file *, void *);
1256:	static bool rdtgroup_mode_test_exclusive(struct rdtgroup *);
1288:	static ssize_t rdtgroup_mode_write(struct kernfs_open_file *, char *, size_t, loff_t);
653:	static int rdtgroup_move_task(pid_t, struct rdtgroup *, struct kernfs_open_file *);
3088:	static int rdtgroup_rmdir(struct kernfs_node *);
3050:	static int rdtgroup_rmdir_ctrl(struct rdtgroup *, cpumask_var_t, struct kernfs_node *);
3007:	static int rdtgroup_rmdir_mon(struct rdtgroup *, cpumask_var_t, struct kernfs_node *);
222:	static int rdtgroup_seqfile_show(struct seq_file *, void *);
3152:	static int rdtgroup_setup_root(void);
3132:	static int rdtgroup_show_options(struct seq_file *, struct kernfs_root *);
1397:	static int rdtgroup_size_show(struct kernfs_open_file *, struct seq_file *, void *);
725:	static int rdtgroup_tasks_show(struct kernfs_open_file *, struct seq_file *, void *);
682:	static ssize_t rdtgroup_tasks_write(struct kernfs_open_file *, char *, size_t, loff_t);
2258:	static int reset_all_ctrls(struct rdt_resource *);
2354:	static void rmdir_all_sub(void);
1873:	static int set_cache_qos_cfg(int, bool);
1933:	static int set_mba_sc(bool);
713:	static void show_rdt_tasks(struct rdtgroup *, struct seq_file *);
323:	static void update_closid_rmid(const struct cpumask *, struct rdtgroup *);
300:	static void update_cpu_closid_rmid(void *);

File arch/x86/kernel/cpu/scattered.c:
50:	void init_scattered_cpuid_features(struct cpuinfo_x86 *);

File arch/x86/kernel/cpu/topology.c:
92:	int detect_extended_topology(struct cpuinfo_x86 *);
65:	int detect_extended_topology_early(struct cpuinfo_x86 *);
49:	static int detect_extended_topology_leaf(struct cpuinfo_x86 *);

File arch/x86/kernel/cpu/tsx.c:
22:	void tsx_disable(void);
42:	void tsx_enable(void);
87:	void tsx_init(void);

File arch/x86/kernel/cpu/umwait.c:
127:	static ssize_t enable_c02_show(struct device *, struct device_attribute *, char *);
134:	static ssize_t enable_c02_store(struct device *, struct device_attribute *, const char *, size_t);
159:	static ssize_t max_time_show(struct device *, struct device_attribute *, char *);
166:	static ssize_t max_time_store(struct device *, struct device_attribute *, const char *, size_t);
66:	static int umwait_cpu_offline(unsigned int);
54:	static int umwait_cpu_online(unsigned int);
204:	static int umwait_init(void);
89:	static void umwait_syscore_resume(void);
33:	static void umwait_update_control_msr(void *);

File arch/x86/kernel/cpu/vmware.c:
316:	static int activate_jump_labels(void);
138:	static int parse_no_stealacc(char *);
131:	static int setup_vmw_sched_clock(char *);
168:	static int vmware_cmd_stealclock(uint32_t, uint32_t);
307:	static int vmware_cpu_down_prepare(unsigned int);
299:	static int vmware_cpu_online(unsigned int);
119:	static unsigned long vmware_get_tsc_khz(void);
472:	static bool vmware_legacy_x2apic_available(void);
328:	static void vmware_paravirt_ops_setup(void);
446:	static uint32_t vmware_platform(void);
387:	static void vmware_platform_setup(void);
275:	static void vmware_pv_guest_cpu_reboot(void *);
280:	static int vmware_pv_reboot_notify(struct notifier_block *, unsigned long, void *);
244:	static void vmware_register_steal_time(void);
145:	static unsigned long long vmware_sched_clock(void);
377:	static void vmware_set_capabilities(void);
494:	static bool vmware_sev_es_hcall_finish(struct ghcb *, struct pt_regs *);
481:	static void vmware_sev_es_hcall_prepare(struct ghcb *, struct pt_regs *);
293:	static void vmware_smp_prepare_boot_cpu(void);
217:	static uint64_t vmware_steal_clock(int);

File arch/x86/kernel/cpu/zhaoxin.c:
57:	static void early_init_zhaoxin(struct cpuinfo_x86 *);
86:	static void init_zhaoxin(struct cpuinfo_x86 *);
20:	static void init_zhaoxin_cap(struct cpuinfo_x86 *);

File arch/x86/kernel/cpuid.c:
127:	static int cpuid_device_create(unsigned int);
136:	static int cpuid_device_destroy(unsigned int);
142:	static char *cpuid_devnode(struct device *, umode_t *);
180:	static void cpuid_exit(void);
147:	static int cpuid_init(void);
101:	static int cpuid_open(struct inode *, struct file *);
62:	static ssize_t cpuid_read(struct file *, char *, size_t, loff_t *);
51:	static void cpuid_smp_cpuid(void *);

File arch/x86/kernel/crash.c:
399:	int crash_load_segments(struct kimage *);
77:	void crash_reserve_low_1M(void);
332:	int crash_setup_memmap_entries(struct kimage *, struct boot_params *);
122:	void crash_smp_send_stop(void);
114:	void kdump_nmi_shootdown_cpus(void);
144:	void native_machine_crash_shutdown(struct pt_regs *);
288:	static int add_e820_entry(struct boot_params *, struct e820_entry *);
191:	static int get_nr_ram_ranges_callback(struct resource *, void *);
88:	static void kdump_nmi_callback(int, struct pt_regs *);
301:	static int memmap_entry_callback(struct resource *, void *);
249:	static int prepare_elf64_ram_headers_callback(struct resource *, void *);
261:	static int prepare_elf_headers(void **, unsigned long *, struct kimage *);

File arch/x86/kernel/crash_core_64.c:
8:	void arch_crash_save_vmcoreinfo(void);

File arch/x86/kernel/crash_dump_64.c:
57:	ssize_t copy_oldmem_page(unsigned long, char *, size_t, unsigned long, int);
68:	ssize_t copy_oldmem_page_encrypted(unsigned long, char *, size_t, unsigned long, int);
74:	ssize_t elfcorehdr_read(char *, size_t, u64 *);
14:	static ssize_t __copy_oldmem_page(unsigned long, char *, size_t, unsigned long, int, bool);

File arch/x86/kernel/dumpstack.c:
428:	int __die(const char *, struct pt_regs *, long);
439:	void die(const char *, struct pt_regs *, long);
449:	void die_addr(const char *, struct pt_regs *, long, long);
50:	bool in_entry_stack(unsigned long *, struct stack_info *);
32:	bool in_task_stack(unsigned long *, struct task_struct *, struct stack_info *);
330:	unsigned long oops_begin(void);
356:	void oops_end(unsigned long, struct pt_regs *, int);
143:	void show_ip(struct pt_regs *, const char *);
153:	void show_iret_regs(struct pt_regs *, const char *);
119:	void show_opcodes(struct pt_regs *, const char *);
462:	void show_regs(struct pt_regs *);
306:	void show_stack(struct task_struct *, unsigned long *, const char *);
321:	void show_stack_regs(struct pt_regs *);
186:	void show_trace_log_lvl(struct task_struct *, struct pt_regs *, unsigned long *, const char *);
415:	static int __die_body(const char *, struct pt_regs *, long);
393:	static void __die_header(const char *, struct pt_regs *, long);
160:	static void show_regs_if_on_stack(struct stack_info *, struct pt_regs *, bool, const char *);

File arch/x86/kernel/dumpstack_64.c:
175:	int get_stack_info(unsigned long *, struct task_struct *, struct stack_info *, unsigned long *);
154:	bool get_stack_info_noinstr(unsigned long *, struct task_struct *, struct stack_info *);
31:	const char *stack_type_name(enum stack_type);

File arch/x86/kernel/e820.c:
870:	unsigned long e820__end_of_low_ram_pfn(void);
865:	unsigned long e820__end_of_ram_pfn(void);
1044:	void e820__finish_early_params(void);
156:	int e820__get_entry_type(u64, u64);
148:	bool e820__mapped_all(u64, u64, enum e820_type);
100:	bool e820__mapped_any(u64, u64, enum e820_type);
94:	bool e820__mapped_raw_any(u64, u64, enum e820_type);
803:	u64 e820__memblock_alloc_reserved(u64, u64);
1295:	void e820__memblock_setup(void);
1279:	void e820__memory_setup(void);
1241:	char *e820__memory_setup_default(void);
724:	void e820__memory_setup_extended(u64, u32);
203:	void e820__print_table(char *);
182:	void e820__range_add(u64, u64, enum e820_type);
541:	u64 e820__range_remove(u64, u64, enum e820_type, bool);
530:	u64 e820__range_update(u64, u64, enum e820_type, enum e820_type);
697:	void e820__reallocate_tables(void);
753:	void e820__register_nosave_regions(unsigned long);
1135:	void e820__reserve_resources(void);
1203:	void e820__reserve_resources_late(void);
996:	void e820__reserve_setup_data(void);
658:	void e820__setup_pci_gap(void);
322:	int e820__update_table(struct e820_table *);
602:	void e820__update_table_print(void);
422:	static int __append_e820_table(struct boot_e820_entry *, u32);
112:	static struct e820_entry *__e820__mapped_all(u64, u64, enum e820_type);
166:	static void __e820__range_add(struct e820_table *, u64, u64, enum e820_type);
463:	static u64 __e820__range_update(struct e820_table *, u64, u64, enum e820_type, enum e820_type);
291:	static int cpcompare(const void *, const void *);
535:	static u64 e820__range_update_kexec(u64, u64, enum e820_type, enum e820_type);
779:	static int e820__register_nvs_regions(void);
830:	static unsigned long e820_end_pfn(unsigned long, enum e820_type);
187:	static void e820_print_type(enum e820_type);
1055:	static const char *e820_type_to_string(struct e820_entry *);
918:	static int parse_memmap_one(char *);
975:	static int parse_memmap_opt(char *);
884:	static int parse_memopt(char *);

File arch/x86/kernel/early-quirks.c:
792:	void early_quirks(void);
620:	static void apple_airport_reset(int, int, int);
134:	static void ati_bugs(int, int, int);
170:	static void ati_bugs_contd(int, int, int);
732:	static int check_dev_quirk(int, int, int);
425:	static resource_size_t chv_stolen_size(int, int, int);
779:	static void early_pci_scan_bus(int);
31:	static void fix_hypertransport_config(int, int, int);
607:	static void force_disable_hpet(int, int, int);
341:	static resource_size_t gen11_stolen_base(int, int, int, resource_size_t);
326:	static resource_size_t gen3_stolen_base(int, int, int, resource_size_t);
374:	static resource_size_t gen3_stolen_size(int, int, int);
403:	static resource_size_t gen6_stolen_size(int, int, int);
414:	static resource_size_t gen8_stolen_size(int, int, int);
446:	static resource_size_t gen9_stolen_size(int, int, int);
284:	static resource_size_t i830_mem_size(void);
298:	static resource_size_t i830_stolen_base(int, int, int, resource_size_t);
353:	static resource_size_t i830_stolen_size(int, int, int);
304:	static resource_size_t i845_stolen_base(int, int, int, resource_size_t);
257:	static resource_size_t i845_tseg_size(void);
310:	static resource_size_t i85x_stolen_base(int, int, int, resource_size_t);
316:	static resource_size_t i865_stolen_base(int, int, int, resource_size_t);
585:	static void intel_graphics_quirks(int, int, int);
211:	static void intel_remapping_check(int, int, int);
80:	static void nvidia_bugs(int, int, int);
73:	static int nvidia_hpet_check(struct acpi_table_header *);
57:	static void via_bugs(int, int, int);

File arch/x86/kernel/early_printk.c:
327:	static void early_console_register(struct console *, int);
217:	static void early_pci_serial_init(char *);
130:	static void early_serial_hw_init(unsigned int);
148:	static void early_serial_init(char *);
110:	static int early_serial_putc(unsigned char);
120:	static void early_serial_write(struct console *, const char *, unsigned int);
29:	static void early_vga_write(struct console *, const char *, unsigned int);
97:	static unsigned int io_serial_in(unsigned long, int);
102:	static void io_serial_out(unsigned long, int, int);
202:	static unsigned int mem32_serial_in(unsigned long, int);
195:	static void mem32_serial_out(unsigned long, int, int);
342:	static int setup_early_printk(char *);

File arch/x86/kernel/ebda.c:
56:	void reserve_bios_regions(void);

File arch/x86/kernel/espfix_64.c:
131:	void init_espfix_ap(int);
114:	void init_espfix_bsp(void);
95:	static void init_espfix_random(void);

File arch/x86/kernel/fpu/bugs.c:
25:	void fpu__init_check_bugs(void);

File arch/x86/kernel/fpu/core.c:
95:	int copy_fpregs_to_fpstate(struct fpu *);
428:	void fpregs_mark_activate(void);
195:	void fpstate_init(union fpregs_state *);
393:	void fpu__clear_all(struct fpu *);
388:	void fpu__clear_user_states(struct fpu *);
213:	int fpu__copy(struct task_struct *, struct task_struct *);
322:	void fpu__drop(struct fpu *);
442:	int fpu__exception_code(struct fpu *, int);
283:	void fpu__prepare_read(struct fpu *);
301:	void fpu__prepare_write(struct fpu *);
167:	void fpu__save(struct fpu *);
77:	bool irq_fpu_usable(void);
124:	void kernel_fpu_begin_mask(unsigned int);
153:	void kernel_fpu_end(void);
401:	void switch_fpu_return(void);
362:	static void fpu__clear(struct fpu *, bool);

File arch/x86/kernel/fpu/init.c:
224:	u64 fpu__get_supported_xfeatures_mask(void);
46:	void fpu__init_cpu(void);
243:	void fpu__init_system(struct cpuinfo_x86 *);
16:	static void fpu__init_cpu_generic(void);
70:	static void fpu__init_system_early_generic(struct cpuinfo_x86 *);

File arch/x86/kernel/fpu/regset.c:
225:	void convert_from_fxsr(struct user_i387_ia32_struct *, struct task_struct *);
261:	void convert_to_fxsr(struct fxregs_state *, const struct user_i387_ia32_struct *);
288:	int fpregs_get(struct task_struct *, const struct user_regset *, struct membuf);
315:	int fpregs_set(struct task_struct *, const struct user_regset *, unsigned int, unsigned int, const void *, const void *);
16:	int regset_fpregs_active(struct task_struct *, const struct user_regset *);
29:	int xfpregs_get(struct task_struct *, const struct user_regset *, struct membuf);
43:	int xfpregs_set(struct task_struct *, const struct user_regset *, unsigned int, unsigned int, const void *, const void *);
74:	int xstateregs_get(struct task_struct *, const struct user_regset *, struct membuf);
106:	int xstateregs_set(struct task_struct *, const struct user_regset *, unsigned int, unsigned int, const void *, const void *);

File arch/x86/kernel/fpu/signal.c:
164:	int copy_fpstate_to_sigframe(void *, void *, int);
501:	unsigned long fpu__alloc_mathframe(unsigned long, int, unsigned long *, unsigned long *);
523:	void fpu__init_prepare_fx_sw_frame(void);
487:	int fpu__restore_sig(void *, int);
280:	static int __fpu__restore_sig(void *, void *, int);
253:	static int copy_user_to_fpregs_zeroing(void *, u64, int);

File arch/x86/kernel/fpu/xstate.c:
1029:	int arch_set_user_pkey_access(struct task_struct *, int, unsigned long);
1356:	void copy_dynamic_supervisor_to_kernel(struct xregs_state *, u64);
1392:	void copy_kernel_to_dynamic_supervisor(struct xregs_state *, u64);
1183:	int copy_kernel_to_xstate(struct xregs_state *, const void *);
1291:	void copy_supervisor_to_kernel(struct xregs_state *);
1236:	int copy_user_to_xstate(struct xregs_state *, const void *);
1100:	void copy_xstate_to_kernel(struct membuf, struct xregs_state *);
81:	int cpu_has_xfeatures(u64, const char **);
142:	void fpstate_sanitize_xstate(struct fpu *);
210:	void fpu__init_cpu_xstate(void);
820:	void fpu__init_system_xstate(void);
911:	void fpu__resume_cpu(void);
961:	void *get_xsave_addr(struct xregs_state *, int);
1010:	const void *get_xsave_field_ptr(int);
1445:	int proc_pid_arch_status(struct seq_file *, struct pid_namespace *, struct pid *, struct task_struct *);
547:	int using_compacted_format(void);
553:	int validate_user_xstate_header(const struct xstate_header *);
529:	int xfeature_size(int);
576:	static void __xstate_dump_leaves(void);
616:	static void check_xstate_against_struct(int);
1087:	static void copy_feature(bool, struct membuf *, void *, void *, unsigned int);
658:	static void do_extra_xstate_size_checks(void);
723:	static unsigned int get_xsaves_size_no_dynamic(void);
301:	static void print_xstate_feature(u64);
465:	static void setup_init_fpu_buf(void);
365:	static void setup_xstate_comp_offsets(void);
253:	static void setup_xstate_features(void);
339:	static int xfeature_is_aligned(int);

File arch/x86/kernel/ftrace.c:
577:	void arch_ftrace_trampoline_free(struct ftrace_ops *);
565:	void *arch_ftrace_trampoline_func(struct ftrace_ops *, struct dyn_ftrace *);
250:	void arch_ftrace_update_code(int);
477:	void arch_ftrace_update_trampoline(struct ftrace_ops *);
53:	int ftrace_arch_code_modify_post_process(void);
40:	int ftrace_arch_code_modify_prepare(void);
615:	int ftrace_disable_ftrace_graph_caller(void);
255:	int ftrace_dyn_arch_init(void);
608:	int ftrace_enable_ftrace_graph_caller(void);
151:	int ftrace_make_call(struct dyn_ftrace *, unsigned long);
124:	int ftrace_make_nop(struct module *, struct dyn_ftrace *, unsigned long);
171:	int ftrace_modify_call(struct dyn_ftrace *, unsigned long, unsigned long);
194:	void ftrace_replace_code(int);
178:	int ftrace_update_ftrace_func(ftrace_func_t);
628:	void prepare_ftrace_return(unsigned long, unsigned long *, unsigned long);
435:	void set_ftrace_ops_ro(void);
512:	static void *addr_from_call(void *);
314:	static unsigned long create_trampoline(struct ftrace_ops *, unsigned int *);
109:	static int ftrace_modify_code_direct(unsigned long, const char *, const char *);
77:	static int ftrace_verify_code(unsigned long, const char *);

File arch/x86/kernel/head64.c:
323:	bool __early_make_pgtable(unsigned long, pmdval_t);
136:	unsigned long __startup_64(unsigned long, struct boot_params *);
305:	unsigned long __startup_secondary_64(void);
403:	void do_early_exception(struct pt_regs *, int);
580:	void early_setup_idt(void);
593:	void startup_64_setup_env(unsigned long);
461:	void x86_64_start_kernel(char *);
510:	void x86_64_start_reservations(char *);
433:	static void copy_bootdata(char *);
315:	static void reset_early_page_tables(void);
548:	static void set_bringup_idt_handler(gate_desc *, void *, int);

File arch/x86/kernel/hpet.c:
1057:	void hpet_disable(void);
890:	int hpet_enable(void);
1215:	int hpet_mask_rtc_irq_bit(unsigned long);
483:	void hpet_msi_mask(struct irq_data *);
473:	void hpet_msi_unmask(struct irq_data *);
493:	void hpet_msi_write(struct hpet_channel *, struct msi_msg *);
76:	unsigned int hpet_readl(unsigned int);
1130:	int hpet_register_irq_handler(rtc_irq_handler);
1283:	int hpet_rtc_dropped_irq(void);
1320:	irqreturn_t hpet_rtc_interrupt(int, void *);
1163:	int hpet_rtc_timer_init(void);
1247:	int hpet_set_alarm_time(unsigned char, unsigned char, unsigned char);
1260:	int hpet_set_periodic_freq(unsigned long);
1228:	int hpet_set_rtc_irq_bit(unsigned long);
1147:	void hpet_unregister_irq_handler(rtc_irq_handler);
134:	int is_hpet_enabled(void);
140:	static void _hpet_print_config(const char *, int);
119:	static int disable_hpet(char *);
352:	static int hpet_clkevt_legacy_resume(struct clock_event_device *);
499:	static int hpet_clkevt_msi_resume(struct clock_event_device *);
360:	static int hpet_clkevt_set_next_event(unsigned long, struct clock_event_device *);
327:	static int hpet_clkevt_set_state_oneshot(struct clock_event_device *);
296:	static int hpet_clkevt_set_state_periodic(struct clock_event_device *);
340:	static int hpet_clkevt_set_state_shutdown(struct clock_event_device *);
582:	static int hpet_cpuhp_dead(unsigned int);
573:	static int hpet_cpuhp_online(unsigned int);
287:	static void hpet_enable_legacy_int(void);
397:	static void hpet_init_clockevent(struct hpet_channel *, unsigned int);
864:	static bool hpet_is_pc10_damaged(void);
1018:	static int hpet_late_init(void);
416:	static void hpet_legacy_clockevent_register(struct hpet_channel *);
512:	static irqreturn_t hpet_msi_interrupt_handler(int, void *);
187:	static void hpet_reserve_platform_timers(void);
269:	static void hpet_restart_counter(void);
281:	static void hpet_resume_counter(struct clocksource *);
1289:	static void hpet_rtc_timer_reinit(void);
594:	static void hpet_select_clockevents(void);
100:	static int hpet_setup(char *);
526:	static int hpet_setup_msi_irq(struct hpet_channel *);
810:	static bool mwait_pc10_supported(void);
684:	static u64 read_hpet(struct clocksource *);

File arch/x86/kernel/hw_breakpoint.c:
198:	int arch_bp_generic_fields(int, int, int *, int *);
234:	int arch_check_bp_in_kernelspace(struct arch_hw_breakpoint *);
96:	int arch_install_hw_breakpoint(struct perf_event *);
144:	void arch_uninstall_hw_breakpoint(struct perf_event *);
77:	int decode_dr7(unsigned long, int, unsigned int *, unsigned int *);
68:	unsigned long encode_dr7(int, unsigned int, unsigned int);
469:	void flush_ptrace_hw_breakpoint(struct task_struct *);
422:	int hw_breakpoint_arch_parse(struct perf_event *, const struct perf_event_attr *, struct arch_hw_breakpoint *);
580:	int hw_breakpoint_exceptions_notify(struct notifier_block *, unsigned long, void *);
589:	void hw_breakpoint_pmu_read(struct perf_event *);
483:	void hw_breakpoint_restore(void);
323:	static int arch_build_bp_info(const struct perf_event_attr *, struct arch_hw_breakpoint *, struct perf_event *);
510:	static int hw_breakpoint_handler(struct die_args *);

File arch/x86/kernel/i8237.c:
48:	static int i8237A_init_ops(void);
22:	static void i8237A_resume(void);

File arch/x86/kernel/i8253.c:
40:	bool pit_timer_init(void);

File arch/x86/kernel/i8259.c:
72:	static void disable_8259A_irq(struct irq_data *);
91:	static void enable_8259A_irq(struct irq_data *);
426:	static int i8259A_init_ops(void);
96:	static int i8259A_irq_pending(unsigned int);
249:	static void i8259A_resume(void);
261:	static void i8259A_shutdown(void);
255:	static int i8259A_suspend(void);
327:	static void init_8259A(int);
387:	static void legacy_pic_int_noop(int);
388:	static int legacy_pic_irq_pending_noop(unsigned int);
385:	static void legacy_pic_noop(void);
392:	static int legacy_pic_probe(void);
386:	static void legacy_pic_uint_noop(unsigned int);
112:	static void make_8259A_irq(unsigned int);
277:	static void mask_8259A(void);
58:	static void mask_8259A_irq(unsigned int);
150:	static void mask_and_ack_8259A(struct irq_data *);
301:	static int probe_8259A(void);
289:	static void unmask_8259A(void);
77:	static void unmask_8259A_irq(unsigned int);

File arch/x86/kernel/idt.c:
343:	void alloc_intr_gate(unsigned int, const void *);
336:	void idt_invalidate(void *);
283:	void idt_setup_apic_and_irq_gates(void);
319:	void idt_setup_early_handler(void);
252:	void idt_setup_early_pf(void);
200:	void idt_setup_early_traps(void);
261:	void idt_setup_ist_traps(void);
210:	void idt_setup_traps(void);
158:	void load_current_idt(void);
172:	static void idt_setup_from_table(const struct idt_data *, int, bool, gate_desc *);
184:	static void set_intr_gate(unsigned int, const void *);

File arch/x86/kernel/io_delay.c:
122:	void io_delay_init(void);
38:	void native_io_delay(void);
64:	static int dmi_io_delay_0xed_port(const struct dmi_system_id *);
128:	static int io_delay_param(char *);

File arch/x86/kernel/ioport.c:
152:	long __ia32_sys_ioperm(const struct pt_regs *);
173:	long __ia32_sys_iopl(const struct pt_regs *);
152:	long __x64_sys_ioperm(const struct pt_regs *);
173:	long __x64_sys_iopl(const struct pt_regs *);
52:	void io_bitmap_exit(struct task_struct *);
22:	void io_bitmap_share(struct task_struct *);
65:	long ksys_ioperm(unsigned long, unsigned long, int);
173:	static long __se_sys_iopl(long);
36:	static void task_update_io_bitmap(struct task_struct *);

File arch/x86/kernel/irq.c:
37:	void ack_bad_irq(unsigned int);
220:	u64 arch_irq_stat(void);
190:	u64 arch_irq_stat_cpu(unsigned int);
58:	int arch_show_interrupts(struct seq_file *, int);
239:	void common_interrupt(struct pt_regs *, unsigned long);
332:	void fixup_irqs(void);
289:	void kvm_set_posted_intr_wakeup_handler(void (*)(void));
303:	void sysvec_kvm_posted_intr_ipi(struct pt_regs *);
322:	void sysvec_kvm_posted_intr_nested_ipi(struct pt_regs *);
312:	void sysvec_kvm_posted_intr_wakeup_ipi(struct pt_regs *);
271:	void sysvec_x86_platform_ipi(struct pt_regs *);
312:	static void __sysvec_kvm_posted_intr_wakeup_ipi(struct pt_regs *);
271:	static void __sysvec_x86_platform_ipi(struct pt_regs *);
286:	static void dummy_handler(void);

File arch/x86/kernel/irq_64.c:
75:	void do_softirq_own_stack(void);
68:	int irq_init_percpu_irqstack(unsigned int);
34:	static int map_irq_stack(unsigned int);

File arch/x86/kernel/irq_work.c:
26:	void arch_irq_work_raise(void);
17:	void sysvec_irq_work(struct pt_regs *);
17:	static void __sysvec_irq_work(struct pt_regs *);

File arch/x86/kernel/irqinit.c:
72:	void init_IRQ(void);
53:	void init_ISA_irqs(void);
92:	void native_init_IRQ(void);

File arch/x86/kernel/itmt.c:
170:	int arch_asym_cpu_priority(int);
145:	void sched_clear_itmt_support(void);
189:	void sched_set_itmt_core_prio(int, int);
108:	int sched_set_itmt_support(void);
41:	static int sched_itmt_update_handler(struct ctl_table *, int, void *, size_t *, loff_t *);

File arch/x86/kernel/jump_label.c:
96:	void arch_jump_label_transform(struct jump_entry *, enum jump_label_type);
123:	void arch_jump_label_transform_apply(void);
102:	bool arch_jump_label_transform_queue(struct jump_entry *, enum jump_label_type);
136:	void arch_jump_label_transform_static(struct jump_entry *, enum jump_label_type);
31:	static const void *__jump_label_set_jump_code(struct jump_entry *, enum jump_label_type, int);
87:	static void jump_label_transform(struct jump_entry *, enum jump_label_type, int);

File arch/x86/kernel/kdebugfs.c:
164:	static int arch_kdebugfs_init(void);
89:	static int create_setup_data_nodes(struct dentry *);
29:	static ssize_t setup_data_read(struct file *, char *, size_t, loff_t *);

File arch/x86/kernel/kexec-bzimage64.c:
518:	static int bzImage64_cleanup(void *);
324:	static void *bzImage64_load(struct kimage *, char *, unsigned long, char *, unsigned long, char *, unsigned long);
261:	static int bzImage64_probe(const char *, unsigned long);
532:	static int bzImage64_verify_sig(const char *, unsigned long);
190:	static int setup_boot_parameters(struct kimage *, struct boot_params *, unsigned long, unsigned int, unsigned int, unsigned int);

File arch/x86/kernel/kgdb.c:
106:	char *dbg_get_reg(int, void *, struct pt_regs *);
91:	int dbg_set_reg(int, void *, struct pt_regs *);
683:	void kgdb_arch_exit(void);
439:	int kgdb_arch_handle_exception(int, int, int, char *, char *, struct pt_regs *);
597:	int kgdb_arch_init(void);
638:	void kgdb_arch_late(void);
719:	unsigned long kgdb_arch_pc(int, struct pt_regs *);
757:	int kgdb_arch_remove_breakpoint(struct kgdb_bkpt *);
731:	int kgdb_arch_set_breakpoint(struct kgdb_bkpt *);
726:	void kgdb_arch_set_pc(struct pt_regs *, unsigned long);
556:	int kgdb_ll_trap(int, const char *, struct pt_regs *, long, int, int);
417:	void kgdb_roundup_cpus(void);
710:	int kgdb_skipexception(int, struct pt_regs *);
142:	void sleeping_thread_to_gdb_regs(unsigned long *, struct task_struct *);
527:	static int __kgdb_notify(struct die_args *, unsigned long);
255:	static int hw_break_release_slot(int);
226:	static int hw_break_reserve_slot(int);
189:	static void kgdb_correct_hw_break(void);
381:	static void kgdb_disable_hw_debug(struct pt_regs *);
626:	static void kgdb_hw_overflow_handler(struct perf_event *, struct perf_sample_data *, struct pt_regs *);
496:	static int kgdb_nmi_handler(unsigned int, struct pt_regs *);
575:	static int kgdb_notify(struct notifier_block *, unsigned long, void *);
295:	static void kgdb_remove_all_hw_break(void);
276:	static int kgdb_remove_hw_break(unsigned long, int, enum kgdb_bptype);
321:	static int kgdb_set_hw_break(unsigned long, int, enum kgdb_bptype);

File arch/x86/kernel/kprobes/core.c:
347:	int __copy_instruction(u8 *, u8 *, u8 *, struct insn *);
430:	void *alloc_insn_page(void);
515:	void arch_arm_kprobe(struct kprobe *);
524:	void arch_disarm_kprobe(struct kprobe *);
993:	int arch_init_kprobes(void);
987:	int arch_populate_kprobe_blacklist(void);
492:	int arch_prepare_kprobe(struct kprobe *);
593:	void arch_prepare_kretprobe(struct kretprobe_instance *, struct pt_regs *);
533:	void arch_remove_kprobe(struct kprobe *);
998:	int arch_trampoline_kprobe(struct kprobe *);
159:	int can_boost(struct insn *, void *);
455:	void free_insn_page(void *);
889:	int kprobe_debug_handler(struct pt_regs *);
924:	int kprobe_fault_handler(struct pt_regs *, int);
682:	int kprobe_int3_handler(struct pt_regs *);
271:	unsigned long recover_probed_instruction(kprobe_opcode_t *, unsigned long);
129:	void synthesize_relcall(void *, void *, void *);
122:	void synthesize_reljump(void *, void *, void *);
781:	void *trampoline_handler(struct pt_regs *);
214:	static unsigned long __recover_probed_insn(kprobe_opcode_t *, unsigned long);
460:	static int arch_copy_kprobe(struct kprobe *);
283:	static int can_probe(unsigned long);
648:	static int reenter_kprobe(struct kprobe *, struct pt_regs *, struct kprobe_ctlblk *);
822:	static void resume_execution(struct kprobe *, struct pt_regs *, struct kprobe_ctlblk *);
605:	static void setup_singlestep(struct kprobe *, struct pt_regs *, struct kprobe_ctlblk *, int);
138:	static kprobe_opcode_t *skip_prefixes(kprobe_opcode_t *);

File arch/x86/kernel/kprobes/ftrace.c:
58:	int arch_prepare_kprobe_ftrace(struct kprobe *);
16:	void kprobe_ftrace_handler(unsigned long, unsigned long, struct ftrace_ops *, struct pt_regs *);

File arch/x86/kernel/kprobes/opt.c:
36:	unsigned long __recover_optprobed_insn(kprobe_opcode_t *, unsigned long);
349:	int arch_check_optimized_kprobe(struct optimized_kprobe *);
481:	void arch_optimize_kprobes(struct list_head *);
399:	int arch_prepare_optimized_kprobe(struct optimized_kprobe *, struct kprobe *);
389:	void arch_remove_optimized_kprobe(struct optimized_kprobe *);
512:	void arch_unoptimize_kprobe(struct optimized_kprobe *);
537:	void arch_unoptimize_kprobes(struct list_head *, struct list_head *);
364:	int arch_within_optimized_kprobe(struct optimized_kprobe *, unsigned long);
548:	int setup_detour_execution(struct kprobe *, struct pt_regs *, int);
289:	static int can_optimize(unsigned long);
199:	static int copy_optimized_instructions(u8 *, u8 *, u8 *);
229:	static int insn_jump_into_range(struct insn *, unsigned long, int);
171:	static void optimized_callback(struct optimized_kprobe *, struct pt_regs *);

File arch/x86/kernel/ksysfs.c:
30:	static ssize_t boot_params_data_read(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t, size_t);
327:	static int boot_params_ksysfs_init(void);
226:	static int create_setup_data_node(struct kobject *, struct kobject **, int);
282:	static int create_setup_data_nodes(struct kobject *);
146:	static ssize_t setup_data_data_read(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t, size_t);
120:	static ssize_t type_show(struct kobject *, struct kobj_attribute *, char *);
22:	static ssize_t version_show(struct kobject *, struct kobj_attribute *, char *);

File arch/x86/kernel/kvm.c:
240:	bool __kvm_handle_async_pf(struct pt_regs *, u32);
1024:	void arch_haltpoll_disable(unsigned int);
1011:	void arch_haltpoll_enable(unsigned int);
770:	unsigned int kvm_arch_para_features(void);
775:	unsigned int kvm_arch_para_hints(void);
137:	void kvm_async_pf_task_wait_schedule(u32);
186:	void kvm_async_pf_task_wake(u32);
764:	bool kvm_para_available(void);
227:	u32 kvm_read_and_reset_apf_flags(void);
944:	void kvm_spinlock_init(void);
273:	void sysvec_kvm_asyncpf_interrupt(struct pt_regs *);
743:	static uint32_t __kvm_cpuid_base(void);
502:	static void __send_ipi_mask(const struct cpumask *, int);
273:	static void __sysvec_kvm_asyncpf_interrupt(struct pt_regs *);
830:	static int activate_jump_labels(void);
167:	static void apf_task_wake_all(void);
842:	static int kvm_alloc_cpumask(void);
786:	static void kvm_apic_init(void);
106:	static bool kvm_async_pf_queue_task(u32, struct kvm_task_sleep_node *);
613:	static int kvm_cpu_down_prepare(unsigned int);
476:	static int kvm_cpu_online(unsigned int);
649:	static void kvm_crash_shutdown(struct pt_regs *);
781:	static uint32_t kvm_detect(void);
1001:	static void kvm_disable_host_haltpoll(void *);
379:	static void kvm_disable_steal_time(void);
1006:	static void kvm_enable_host_haltpoll(void *);
656:	static void kvm_flush_tlb_multi(const struct cpumask *, const struct flush_tlb_info *);
319:	static void kvm_guest_apic_eoi_write(u32, u32);
333:	static void kvm_guest_cpu_init(void);
465:	static void kvm_guest_cpu_offline(bool);
687:	static void kvm_guest_init(void);
794:	static void kvm_init_platform(void);
72:	static void kvm_io_delay(void);
871:	static void kvm_kick_cpu(int);
368:	static void kvm_pv_disable_apf(void);
387:	static void kvm_pv_guest_cpu_reboot(void *);
400:	static int kvm_pv_reboot_notify(struct notifier_block *, unsigned long, void *);
304:	static void kvm_register_steal_time(void);
632:	static void kvm_resume(void);
558:	static void kvm_send_ipi_mask(const struct cpumask *, int);
563:	static void kvm_send_ipi_mask_allbutself(const struct cpumask *, int);
810:	static bool kvm_sev_es_hcall_finish(struct ghcb *, struct pt_regs *);
801:	static void kvm_sev_es_hcall_prepare(struct ghcb *, struct pt_regs *);
600:	static void kvm_smp_prepare_boot_cpu(void);
585:	static void kvm_smp_send_call_func_ipi(const struct cpumask *);
412:	static u64 kvm_steal_clock(int);
625:	static int kvm_suspend(void);
882:	static void kvm_wait(u8 *, u8);
48:	static int parse_no_kvmapf(char *);
57:	static int parse_no_stealacc(char *);
456:	static bool pv_tlb_flush_supported(void);
442:	static void sev_map_percpu_data(void);

File arch/x86/kernel/kvmclock.c:
136:	bool kvm_check_and_clear_guest_paused(void);
197:	void kvmclock_disable(void);
285:	void kvmclock_init(void);
85:	static u64 kvm_clock_get_cycles(struct clocksource *);
75:	static u64 kvm_clock_read(void);
152:	static int kvm_cs_enable(struct clocksource *);
118:	static unsigned long kvm_get_tsc_khz(void);
62:	static void kvm_get_wallclock(struct timespec64 *);
168:	static void kvm_register_clock(char *);
185:	static void kvm_restore_sched_clock_state(void);
181:	static void kvm_save_sched_clock_state(void);
90:	static u64 kvm_sched_clock_read(void);
70:	static int kvm_set_wallclock(const struct timespec64 *);
191:	static void kvm_setup_secondary_clock(void);
241:	static int kvm_setup_vsyscall_timeinfo(void);
202:	static void kvmclock_init_mem(void);
261:	static int kvmclock_setup_percpu(unsigned int);
31:	static int parse_no_kvmclock(char *);
38:	static int parse_no_kvmclock_vsyscall(char *);

File arch/x86/kernel/ldt.c:
659:	long __ia32_sys_modify_ldt(const struct pt_regs *);
659:	long __x64_sys_modify_ldt(const struct pt_regs *);
483:	void destroy_context_ldt(struct mm_struct *);
489:	void ldt_arch_exit_mmap(struct mm_struct *);
443:	int ldt_dup_context(struct mm_struct *, struct mm_struct *);
42:	void load_mm_ldt(struct mm_struct *);
90:	void switch_ldt(struct mm_struct *, struct mm_struct *);
149:	static struct ldt_struct *alloc_ldt_struct(unsigned int);
136:	static void flush_ldt(void *);
391:	static void free_ldt_pgtables(struct mm_struct *);
288:	static int map_ldt_struct(struct mm_struct *, struct ldt_struct *, int);
494:	static int read_ldt(void *, unsigned long);
116:	static void refresh_ldt_segments(void);
570:	static int write_ldt(void *, unsigned long, int);

File arch/x86/kernel/livepatch.c:
410:	void arch_klp_code_modify_post_process(void);
404:	void arch_klp_code_modify_prepare(void);
477:	void arch_klp_mem_prepare(struct klp_patch *);
490:	void arch_klp_mem_recycle(struct klp_patch *);
417:	int arch_klp_patch_func(struct klp_func *);
451:	void arch_klp_unpatch_func(struct klp_func *);
337:	int klp_check_calltrace(struct klp_patch *, int);
126:	static int add_func_to_list(struct klp_func_list **, struct klp_func_list **, unsigned long, unsigned long, const char *, int);
106:	static bool check_jump_insn(unsigned long);

File arch/x86/kernel/machine_kexec_64.c:
429:	int arch_kexec_apply_relocations_add(struct purgatory_info *, Elf64_Shdr *, const Elf64_Shdr *, const Elf64_Shdr *);
405:	void *arch_kexec_kernel_image_load(struct kimage *);
601:	int arch_kexec_post_alloc_pages(void *, unsigned int, gfp_t);
614:	void arch_kexec_pre_free_pages(void *, unsigned int);
582:	void arch_kexec_protect_crashkres(void);
587:	void arch_kexec_unprotect_crashkres(void);
325:	void machine_kexec(struct kimage *);
316:	void machine_kexec_cleanup(struct kimage *);
300:	int machine_kexec_prepare(struct kimage *);
178:	static void *alloc_pgt_page(void *);
193:	static int init_pgtable(struct kimage *, unsigned long);
123:	static int init_transition_pgtable(struct kimage *, pgd_t *);
568:	static void kexec_mark_crashkres(bool);
548:	static int kexec_mark_range(unsigned long, unsigned long, bool);
40:	static int mem_region_callback(struct resource *, void *);

File arch/x86/kernel/mmconf-fam10h_64.c:
235:	void check_enable_amd_mmconf_dmi(void);
170:	void fam10h_check_enable_mmcfg(void);
35:	static int cmp_range(const void *, const void *);
53:	static void get_fam10h_pci_mmconf_base(void);
217:	static int set_check_enable_amd_mmconf(const struct dmi_system_id *);

File arch/x86/kernel/module.c:
221:	int apply_relocate_add(Elf64_Shdr *, const char *, unsigned int, unsigned int, struct module *);
68:	void *module_alloc(unsigned long);
300:	void module_arch_cleanup(struct module *);
249:	int module_finalize(const Elf64_Ehdr *, const Elf64_Shdr *, struct module *);
130:	static int __apply_relocate_add(Elf64_Shdr *, unsigned int, unsigned int, struct module *, void *(*)(void *, const void *, size_t), const char *);

File arch/x86/kernel/mpparse.c:
601:	void default_find_smp_config(void);
485:	void default_get_smp_config(unsigned int);
830:	void e820__memblock_alloc_reserved_mpc_new(void);
77:	static void MP_bus_info(struct mpc_bus *);
107:	static void MP_ioapic_info(struct mpc_ioapic *);
132:	static void MP_lintsrc_info(struct mpc_lintsrc *);
48:	static void MP_processor_info(struct mpc_cpu *);
682:	static void check_irq_src(struct mpc_intsrc *, int *);
258:	static void construct_default_ioirq_mptable(int);
420:	static unsigned long get_mpc_size(unsigned long);
38:	static int mpf_checksum(unsigned char *, int);
816:	static int parse_alloc_mptable_opt(char *);
118:	static void print_mp_irq_info(struct mpc_intsrc *);
725:	static int replace_intsrc_all(struct mpc_table *, unsigned long, unsigned long);
143:	static int smp_check_mpc(struct mpc_table *, char *, char *);
184:	static void smp_dump_mptable(struct mpc_table *, unsigned char *);
557:	static int smp_scan_config(unsigned long, unsigned long);
836:	static int update_mp_table(void);
801:	static int update_mptable_setup(char *);

File arch/x86/kernel/msr.c:
81:	static int filter_write(u32);
313:	static int get_allow_writes(char *, const struct kernel_param *);
240:	static int msr_device_create(unsigned int);
249:	static int msr_device_destroy(unsigned int);
255:	static char *msr_devnode(struct device *, umode_t *);
290:	static void msr_exit(void);
260:	static int msr_init(void);
151:	static long msr_ioctl(struct file *, unsigned int, unsigned long);
209:	static int msr_open(struct inode *, struct file *);
53:	static ssize_t msr_read(struct file *, char *, size_t, loff_t *);
111:	static ssize_t msr_write(struct file *, const char *, size_t, loff_t *);
298:	static int set_allow_writes(const char *, const struct kernel_param *);

File arch/x86/kernel/nmi.c:
155:	int __register_nmi_handler(unsigned int, struct nmiaction *);
476:	void exc_nmi(struct pt_regs *);
528:	void exc_nmi_noist(struct pt_regs *);
548:	void local_touch_nmi(void);
542:	void restart_nmi(void);
537:	void stop_nmi(void);
186:	void unregister_nmi_handler(unsigned int, const char *);
306:	static void default_do_nmi(struct pt_regs *);
234:	static void io_check_error(unsigned char, struct pt_regs *);
121:	static int nmi_handle(unsigned int, struct pt_regs *);
96:	static int nmi_warning_debugfs(void);
213:	static void pci_serr_error(unsigned char, struct pt_regs *);
85:	static int setup_unknown_nmi_panic(char *);
274:	static void unknown_nmi_error(unsigned char, struct pt_regs *);

File arch/x86/kernel/paravirt-spinlocks.c:
12:	void __native_queued_spin_unlock(struct qspinlock *);
24:	bool __native_vcpu_is_preempted(long);
18:	bool pv_is_native_spin_unlock(void);
30:	bool pv_is_native_vcpu_is_preempted(void);

File arch/x86/kernel/paravirt.c:
48:	void default_banner(void);
111:	void native_pv_lock_init(void);
189:	int paravirt_disable_iospace(void);
210:	void paravirt_enter_lazy_mmu(void);
220:	void paravirt_flush_lazy_mmu(void);
255:	enum paravirt_lazy_mode paravirt_get_lazy_mode(void);
215:	void paravirt_leave_lazy_mmu(void);
117:	unsigned int paravirt_patch_default(u8, void *, unsigned long, unsigned int);
150:	unsigned int paravirt_patch_insns(void *, unsigned int, const char *, const char *);
166:	static u64 native_steal_clock(int);

File arch/x86/kernel/paravirt_patch.c:
71:	unsigned int native_patch(u8, void *, unsigned long, unsigned int);

File arch/x86/kernel/pci-dma.c:
39:	void pci_iommu_alloc(void);
61:	static int iommu_setup(char *);
122:	static int pci_iommu_init(void);
147:	static void via_no_dac(struct pci_dev *);
141:	static int via_no_dac_cb(struct pci_dev *, void *);

File arch/x86/kernel/pci-iommu_table.c:
50:	void check_iommu_entries(struct iommu_table_entry *, struct iommu_table_entry *);
28:	void sort_iommu_table(struct iommu_table_entry *, struct iommu_table_entry *);
11:	static struct iommu_table_entry *find_dependents_of(struct iommu_table_entry *, struct iommu_table_entry *, struct iommu_table_entry *);

File arch/x86/kernel/pci-swiotlb.c:
41:	int pci_swiotlb_detect_4gb(void);
25:	int pci_swiotlb_detect_override(void);
62:	void pci_swiotlb_init(void);
68:	void pci_swiotlb_late_init(void);

File arch/x86/kernel/pcspeaker.c:
6:	static int add_pcspkr(void);

File arch/x86/kernel/perf_regs.c:
133:	void perf_get_regs_user(struct perf_regs *, struct pt_regs *);
123:	u64 perf_reg_abi(struct task_struct *);
115:	int perf_reg_validate(u64);
60:	u64 perf_reg_value(struct pt_regs *, int);

File arch/x86/kernel/platform-quirks.c:
8:	void x86_early_init_platform_quirks(void);
36:	bool x86_pnpbios_disabled(void);

File arch/x86/kernel/probe_roms.c:
171:	size_t pci_biosrom_size(struct pci_dev *);
154:	void *pci_map_biosrom(struct pci_dev *);
165:	void pci_unmap_biosrom(void *);
198:	void probe_roms(void);
114:	static struct resource *find_oprom(struct pci_dev *);
81:	static bool match_id(unsigned short, unsigned short, struct pci_dev *, struct pci_dev *);
189:	static int romchecksum(const unsigned char *, unsigned long);
181:	static int romsignature(const unsigned char *);

File arch/x86/kernel/process.c:
608:	void __switch_to_xtra(struct task_struct *, struct task_struct *);
834:	void amd_e400_c1e_apic_setup(void);
901:	unsigned long arch_align_stack(unsigned long);
679:	void arch_cpu_idle(void);
671:	void arch_cpu_idle_dead(void);
665:	void arch_cpu_idle_enter(void);
89:	int arch_dup_task_struct(struct task_struct *, struct task_struct *);
844:	void arch_post_acpi_subsys_init(void);
908:	unsigned long arch_randomize_brk(struct mm_struct *);
309:	void arch_setup_new_exec(void);
125:	int copy_thread(unsigned long, unsigned long, unsigned long, struct task_struct *, unsigned long);
687:	void default_idle(void);
201:	void disable_TSC(void);
975:	long do_arch_prctl_common(struct task_struct *, int, unsigned long);
102:	void exit_thread(struct task_struct *);
191:	void flush_thread(void);
225:	int get_tsc_mode(unsigned long);
919:	unsigned long get_wchan(struct task_struct *);
366:	void native_tss_update_io_bitmap(void);
815:	void select_idle_routine(const struct cpuinfo_x86 *);
237:	int set_tsc_mode(unsigned int);
579:	void speculation_ctrl_update(unsigned long);
590:	void speculation_ctrl_update_current(void);
418:	void speculative_store_bypass_ht_init(void);
707:	void stop_this_cpu(void *);
697:	bool xen_set_default_idle(void);
744:	static void amd_e400_idle(void);
275:	static void enable_cpuid(void);
867:	static int idle_setup(char *);
795:	static void mwait_idle(void);
251:	static void set_cpuid_faulting(bool);
562:	static unsigned long speculation_ctrl_update_tif(struct task_struct *);

File arch/x86/kernel/process_64.c:
836:	unsigned long KSTK_ESP(struct task_struct *);
830:	long __ia32_compat_sys_arch_prctl(const struct pt_regs *);
818:	long __ia32_sys_arch_prctl(const struct pt_regs *);
65:	void __show_regs(struct pt_regs *, enum show_regs_mode, const char *);
534:	struct task_struct *__switch_to(struct task_struct *, struct task_struct *);
818:	long __x64_sys_arch_prctl(const struct pt_regs *);
514:	void compat_start_thread(struct pt_regs *, u32, u32);
270:	void current_save_fsgs(void);
722:	long do_arch_prctl_64(struct task_struct *, int, unsigned long);
143:	void release_thread(struct task_struct *);
639:	void set_personality_64bit(void);
697:	void set_personality_ia32(bool);
506:	void start_thread(struct pt_regs *, unsigned long, unsigned long);
436:	unsigned long x86_fsbase_read_task(struct task_struct *);
466:	void x86_fsbase_write_task(struct task_struct *, unsigned long);
363:	unsigned long x86_fsgsbase_read_task(struct task_struct *, unsigned short);
406:	unsigned long x86_gsbase_read_cpu_inactive(void);
451:	unsigned long x86_gsbase_read_task(struct task_struct *);
423:	void x86_gsbase_write_cpu_inactive(unsigned long);
473:	void x86_gsbase_write_task(struct task_struct *, unsigned long);
161:	static unsigned long __rdgsbase_inactive(void);
683:	static void __set_personality_ia32(void);
188:	static void __wrgsbase_inactive(unsigned long);
481:	static void start_thread_common(struct pt_regs *, unsigned long, unsigned long, unsigned int, unsigned int, unsigned int);

File arch/x86/kernel/ptrace.c:
708:	long arch_ptrace(struct task_struct *, long, unsigned long, unsigned long);
1190:	long compat_arch_ptrace(struct task_struct *, compat_long_t, compat_ulong_t, compat_ulong_t);
699:	void ptrace_disable(struct task_struct *);
122:	const char *regs_query_register_name(unsigned int);
106:	int regs_query_register_offset(const char *);
1325:	void send_sigtrap(struct pt_regs *, int, int);
1312:	const struct user_regset_view *task_user_regset_view(struct task_struct *);
1301:	void update_regset_xstate_info(unsigned int, u64);
1337:	void user_single_step_report(struct pt_regs *);
992:	static int genregs32_get(struct task_struct *, const struct user_regset *, struct membuf);
1006:	static int genregs32_set(struct task_struct *, const struct user_regset *, unsigned int, unsigned int, const void *, const void *);
413:	static int genregs_get(struct task_struct *, const struct user_regset *, struct membuf);
424:	static int genregs_set(struct task_struct *, const struct user_regset *, unsigned int, unsigned int, const void *, const void *);
388:	static unsigned long getreg(struct task_struct *, unsigned long);
941:	static int getreg32(struct task_struct *, unsigned int, u32 *);
1034:	static long ia32_arch_ptrace(struct task_struct *, compat_long_t, compat_ulong_t, compat_ulong_t);
674:	static int ioperm_active(struct task_struct *, const struct user_regset *);
682:	static int ioperm_get(struct task_struct *, const struct user_regset *, struct membuf);
525:	static int ptrace_modify_breakpoint(struct perf_event *, int, int, int);
508:	static struct perf_event *ptrace_register_breakpoint(struct task_struct *, int, int, unsigned long, bool);
611:	static int ptrace_set_breakpoint_addr(struct task_struct *, int, unsigned long);
452:	static void ptrace_triggered(struct perf_event *, struct perf_sample_data *, struct pt_regs *);
541:	static int ptrace_write_dr7(struct task_struct *, unsigned long);
355:	static int putreg(struct task_struct *, unsigned long, unsigned long);
843:	static int putreg32(struct task_struct *, unsigned int, u32);
336:	static int set_flags(struct task_struct *, unsigned long);
271:	static int set_segment_reg(struct task_struct *, unsigned long, u16);

File arch/x86/kernel/pvclock.c:
67:	u64 pvclock_clocksource_read(struct pvclock_vcpu_time_info *);
152:	struct pvclock_vsyscall_time_info *pvclock_get_pvti_cpu0_va(void);
54:	u8 pvclock_read_flags(struct pvclock_vcpu_time_info *);
113:	void pvclock_read_wallclock(struct pvclock_wall_clock *, struct pvclock_vcpu_time_info *, struct timespec64 *);
49:	void pvclock_resume(void);
22:	void pvclock_set_flags(u8);
146:	void pvclock_set_pvti_cpu0_va(struct pvclock_vsyscall_time_info *);
39:	void pvclock_touch_watchdogs(void);
27:	unsigned long pvclock_tsc_khz(struct pvclock_vcpu_time_info *);

File arch/x86/kernel/quirks.c:
665:	void early_platform_quirks(void);
478:	void force_hpet_resume(void);
604:	static void amd_disable_seq_and_redirect_scrub(struct pci_dev *);
378:	static void ati_force_enable_hpet(struct pci_dev *);
357:	static u32 ati_ixp4x0_rev(struct pci_dev *);
505:	static void e6xx_force_enable_hpet(struct pci_dev *);
525:	static void force_disable_hpet_msi(struct pci_dev *);
96:	static void ich_force_enable_hpet(struct pci_dev *);
73:	static void ich_force_hpet_resume(void);
431:	static void nvidia_force_enable_hpet(struct pci_dev *);
208:	static void old_ich_force_enable_hpet(struct pci_dev *);
261:	static void old_ich_force_enable_hpet_user(struct pci_dev *);
186:	static void old_ich_force_hpet_resume(void);
537:	static void quirk_amd_nb_node(struct pci_dev *);
629:	static void quirk_intel_brickland_xeon_ras_cap(struct pci_dev *);
15:	static void quirk_intel_irqbalance(struct pci_dev *);
640:	static void quirk_intel_purley_xeon_ras_cap(struct pci_dev *);
300:	static void vt8237_force_enable_hpet(struct pci_dev *);

File arch/x86/kernel/reboot.c:
570:	void mach_reboot_fixups(void);
796:	void machine_crash_shutdown(struct pt_regs *);
780:	void machine_emergency_restart(void);
790:	void machine_halt(void);
770:	void machine_power_off(void);
97:	void machine_real_restart(unsigned int);
785:	void machine_restart(char *);
775:	void machine_shutdown(void);
683:	void native_machine_shutdown(void);
901:	void nmi_panic_self_stop(struct pt_regs *);
846:	void nmi_shootdown_cpus(nmi_shootdown_cb);
894:	void run_crash_ipi_callback(struct pt_regs *);
813:	static int crash_nmi_callback(unsigned int, struct pt_regs *);
545:	static void emergency_vmx_disable_all(void);
593:	static void native_machine_emergency_restart(void);
738:	static void native_machine_halt(void);
748:	static void native_machine_power_off(void);
729:	static void native_machine_restart(char *);
503:	static int reboot_init(void);
60:	static int set_acpi_reboot(const struct dmi_system_id *);
74:	static int set_bios_reboot(const struct dmi_system_id *);
88:	static int set_efi_reboot(const struct dmi_system_id *);
158:	static int set_kbd_reboot(const struct dmi_system_id *);
148:	static int set_pci_reboot(const struct dmi_system_id *);
539:	static void vmxoff_nmi(int, struct pt_regs *);

File arch/x86/kernel/resource.c:
39:	void arch_remove_reservations(struct resource *);

File arch/x86/kernel/rtc.c:
63:	void mach_get_cmos_time(struct timespec64 *);
42:	int mach_set_rtc_mmss(const struct timespec64 *);
154:	void read_persistent_clock64(struct timespec64 *);
126:	unsigned char rtc_cmos_read(unsigned char);
139:	void rtc_cmos_write(unsigned char, unsigned char);
148:	int update_persistent_clock64(struct timespec64);
180:	static int add_rtc_cmos(void);

File arch/x86/kernel/setup.c:
199:	void *extend_brk(size_t, size_t);
422:	void reserve_standard_io_resources(void);
624:	void setup_arch(char **);
64:	static void __brk_reservation_fn_dmi_alloc__(void);
596:	static int dump_kernel_offset(struct notifier_block *, unsigned long, void *);
239:	static u64 get_ramdisk_image(void);
250:	static u64 get_ramdisk_size(void);
565:	static int parse_reservelow(char *);
1120:	static int register_kernel_offset_dumper(void);
262:	static void relocate_initrd(void);
303:	static void reserve_initrd(void);

File arch/x86/kernel/setup_percpu.c:
168:	void setup_per_cpu_areas(void);
100:	static void *pcpu_alloc_bootmem(unsigned int, unsigned long, unsigned long);
141:	static int pcpu_cpu_distance(unsigned int, unsigned int);
131:	static void *pcpu_fc_alloc(unsigned int, size_t, size_t);
136:	static void pcpu_fc_free(void *, size_t);
153:	static void pcpup_populate_pte(unsigned long);

File arch/x86/kernel/sev-es-shared.c:
147:	void do_vc_no_ghcb(struct pt_regs *, unsigned long);
97:	static enum es_result sev_es_ghcb_hv_call(struct ghcb *, struct es_em_ctxt *, u64, u64, u64);
45:	static bool sev_es_negotiate_protocol(void);
27:	static void sev_es_terminate(unsigned int);
476:	static enum es_result vc_handle_cpuid(struct ghcb *, struct es_em_ctxt *);
368:	static enum es_result vc_handle_ioio(struct ghcb *, struct es_em_ctxt *);
77:	static enum es_result vc_init_em_ctxt(struct es_em_ctxt *, struct pt_regs *, unsigned long);
281:	static enum es_result vc_ioio_exitinfo(struct es_em_ctxt *, u64 *);

File arch/x86/kernel/sev-es.c:
117:	void __sev_es_ist_enter(struct pt_regs *);
137:	void __sev_es_ist_exit(void);
479:	void __sev_es_nmi_complete(void);
1427:	bool handle_vc_boot_ghcb(struct pt_regs *);
1349:	void kernel_exc_vmm_communication(struct pt_regs *, unsigned long);
567:	int sev_es_efi_map_ghcbs(pgd_t *);
727:	void sev_es_init_vc_handling(void);
527:	int sev_es_setup_ap_jump_table(struct real_mode_header *);
1401:	void user_exc_vmm_communication(struct pt_regs *, unsigned long);
157:	static struct ghcb *__sev_get_ghcb(struct ghcb_state *);
454:	static void __sev_put_ghcb(struct ghcb_state *);
497:	static u64 get_jump_table_addr(void);
640:	static void sev_es_ap_hlt_loop(void);
671:	static void sev_es_play_dead(void);
224:	static enum es_result vc_decode_insn(struct es_em_ctxt *);
796:	static enum es_result vc_do_mmio(struct ghcb *, struct es_em_ctxt *, unsigned int, bool);
1047:	static enum es_result vc_handle_dr7_write(struct ghcb *, struct es_em_ctxt *);
1189:	static enum es_result vc_handle_exitcode(struct es_em_ctxt *, struct ghcb *, unsigned long);
965:	static enum es_result vc_handle_mmio(struct ghcb *, struct es_em_ctxt *);
917:	static enum es_result vc_handle_mmio_movs(struct es_em_ctxt *, unsigned int);
828:	static enum es_result vc_handle_mmio_twobyte_ops(struct ghcb *, struct es_em_ctxt *);
1144:	static enum es_result vc_handle_vmmcall(struct ghcb *, struct es_em_ctxt *);
1284:	static bool vc_raw_handle_exception(struct pt_regs *, unsigned long);
338:	static enum es_result vc_read_mem(struct es_em_ctxt *, char *, char *, size_t);
416:	static enum es_result vc_slow_virt_to_phys(struct es_em_ctxt *, unsigned long, phys_addr_t *, struct ghcb *);
259:	static enum es_result vc_write_mem(struct es_em_ctxt *, char *, char *, size_t);

File arch/x86/kernel/signal.c:
801:	void arch_do_signal(struct pt_regs *);
836:	void signal_fault(struct pt_regs *, void *, char *);
652:	static long __do_sys_rt_sigreturn(const struct pt_regs *);
455:	static int __setup_rt_frame(int, struct ksignal *, sigset_t *, struct pt_regs *);
233:	static void *get_sigframe(struct k_sigaction *, void **, size_t, struct pt_regs *, struct pt_regs *);
82:	static int restore_sigcontext(struct pt_regs *, struct sigcontext_64 *, unsigned long);
700:	static int setup_rt_frame(struct ksignal *, struct pt_regs *);

File arch/x86/kernel/signal_compat.c:
164:	void sigaction_compat_abi(struct k_sigaction *, struct k_sigaction *);

File arch/x86/kernel/smp.c:
234:	void sysvec_call_function(struct pt_regs *);
243:	void sysvec_call_function_single(struct pt_regs *);
134:	void sysvec_reboot(struct pt_regs *);
225:	void sysvec_reschedule_ipi(struct pt_regs *);
234:	static void __sysvec_call_function(struct pt_regs *);
243:	static void __sysvec_call_function_single(struct pt_regs *);
134:	static void __sysvec_reboot(struct pt_regs *);
147:	static void native_stop_other_cpus(int);
252:	static int nonmi_ipi_setup(char *);
119:	static int smp_stop_nmi_callback(unsigned int, struct pt_regs *);

File arch/x86/kernel/smpboot.c:
666:	void __inquire_remote_apic(int);
1209:	void arch_disable_smp_support(void);
2076:	void arch_scale_freq_tick(void);
1826:	void arch_set_max_freq_ratio(bool);
1379:	void arch_thaw_secondary_cpus_begin(void);
1384:	void arch_thaw_secondary_cpus_end(void);
115:	int arch_update_cpu_topology(void);
1402:	void calculate_max_logical_packages(void);
1623:	int common_cpu_die(unsigned int);
997:	int common_cpu_up(unsigned int, struct task_struct *);
1664:	void cond_wakeup_cpu0(void);
642:	const struct cpumask *cpu_coregroup_mask(int);
1576:	void cpu_disable_common(void);
1743:	void hlt_play_dead(void);
1641:	void native_cpu_die(unsigned int);
1590:	int native_cpu_disable(void);
1131:	int native_cpu_up(unsigned int, struct task_struct *);
1755:	void native_play_dead(void);
1415:	void native_smp_cpus_done(unsigned int);
1392:	void native_smp_prepare_boot_cpu(void);
1314:	void native_smp_prepare_cpus(unsigned int);
1646:	void play_dead_common(void);
1455:	void prefill_possible_map(void);
569:	void set_cpu_sibling_map(int);
371:	void smp_store_boot_cpu_info(void);
387:	void smp_store_cpu_info(int);
272:	bool topology_is_primary_thread(unsigned int);
308:	int topology_phys_to_logical_die(unsigned int, unsigned int);
290:	int topology_phys_to_logical_pkg(unsigned int);
280:	bool topology_smt_supported(void);
352:	int topology_update_die_map(unsigned int, unsigned int);
329:	int topology_update_package_map(unsigned int, unsigned int);
749:	int wakeup_secondary_cpu_via_nmi(int, unsigned long);
1430:	static int _setup_possible_cpus(char *);
897:	static void announce_cpu(int, int);
1958:	static bool core_set_max_freq_ratio(u64 *, u64 *);
718:	static int cpu_init_udelay(char *);
2066:	static void disable_freq_invariance_workfn(struct work_struct *);
1219:	static void disable_smp(void);
1027:	static int do_boot_cpu(int, int, struct task_struct *, int *);
647:	static void impress_friends(void);
2030:	static void init_counter_refs(void);
2041:	static void init_freq_invariance(bool);
1981:	static bool intel_set_max_freq_ratio(void);
1888:	static bool knl_set_max_freq_ratio(u64 *, u64 *, int);
495:	static bool match_llc(struct cpuinfo_x86 *, struct cpuinfo_x86 *);
1522:	static void recompute_smt_state(void);
1536:	static void remove_siblinginfo(int);
1927:	static bool skx_set_max_freq_ratio(u64 *, u64 *, int);
1845:	static bool slv_set_max_freq_ratio(u64 *, u64 *);
157:	static void smp_callin(void);
1240:	static void smp_sanity_check(void);
216:	static void start_secondary(void *);
412:	static bool topology_sane(const char *, struct cpuinfo_x86 *, struct cpuinfo_x86 *, struct cpuinfo_x86 *, struct cpuinfo_x86 *);
1833:	static bool turbo_disabled(void);
933:	static int wakeup_cpu0_nmi(unsigned int, struct pt_regs *);
783:	static int wakeup_secondary_cpu_via_init(int, unsigned long);
528:	static int x86_core_flags(void);
534:	static int x86_smt_flags(void);

File arch/x86/kernel/stacktrace.c:
15:	void arch_stack_walk(stack_trace_consume_fn, void *, struct task_struct *, struct pt_regs *);
38:	int arch_stack_walk_reliable(stack_trace_consume_fn, void *, struct task_struct *);
112:	void arch_stack_walk_user(stack_trace_consume_fn, void *, const struct pt_regs *);
94:	static int copy_stack_frame(const struct stack_frame_user *, struct stack_frame_user *);

File arch/x86/kernel/static_call.c:
95:	void arch_static_call_transform(void *, void *, void *, bool);
20:	static void __static_call_transform(void *, enum insn_type, void *);
59:	static void __static_call_validate(void *, bool);

File arch/x86/kernel/step.c:
12:	unsigned long convert_ip_to_linear(struct task_struct *, struct pt_regs *);
167:	void set_task_blockstep(struct task_struct *, bool);
223:	void user_disable_single_step(struct task_struct *);
218:	void user_enable_block_step(struct task_struct *);
213:	void user_enable_single_step(struct task_struct *);
111:	static int enable_single_step(struct task_struct *);
56:	static int is_setting_trap_flag(struct task_struct *, struct pt_regs *);

File arch/x86/kernel/sys_ia32.c:
240:	long __ia32_compat_sys_ia32_clone(const struct pt_regs *);
185:	long __ia32_compat_sys_ia32_fstat64(const struct pt_regs *);
195:	long __ia32_compat_sys_ia32_fstatat64(const struct pt_regs *);
175:	long __ia32_compat_sys_ia32_lstat64(const struct pt_regs *);
223:	long __ia32_compat_sys_ia32_mmap(const struct pt_regs *);
164:	long __ia32_compat_sys_ia32_stat64(const struct pt_regs *);
112:	long __ia32_sys_ia32_fadvise64(const struct pt_regs *);
87:	long __ia32_sys_ia32_fadvise64_64(const struct pt_regs *);
119:	long __ia32_sys_ia32_fallocate(const struct pt_regs *);
61:	long __ia32_sys_ia32_ftruncate64(const struct pt_regs *);
68:	long __ia32_sys_ia32_pread64(const struct pt_regs *);
75:	long __ia32_sys_ia32_pwrite64(const struct pt_regs *);
97:	long __ia32_sys_ia32_readahead(const struct pt_regs *);
103:	long __ia32_sys_ia32_sync_file_range(const struct pt_regs *);
54:	long __ia32_sys_ia32_truncate64(const struct pt_regs *);
112:	long __x64_sys_ia32_fadvise64(const struct pt_regs *);
87:	long __x64_sys_ia32_fadvise64_64(const struct pt_regs *);
119:	long __x64_sys_ia32_fallocate(const struct pt_regs *);
61:	long __x64_sys_ia32_ftruncate64(const struct pt_regs *);
68:	long __x64_sys_ia32_pread64(const struct pt_regs *);
75:	long __x64_sys_ia32_pwrite64(const struct pt_regs *);
97:	long __x64_sys_ia32_readahead(const struct pt_regs *);
103:	long __x64_sys_ia32_sync_file_range(const struct pt_regs *);
54:	long __x64_sys_ia32_truncate64(const struct pt_regs *);
240:	static long __se_compat_sys_ia32_clone(long, long, long, long, long);
185:	static long __se_compat_sys_ia32_fstat64(long, long);
195:	static long __se_compat_sys_ia32_fstatat64(long, long, long, long);
175:	static long __se_compat_sys_ia32_lstat64(long, long);
164:	static long __se_compat_sys_ia32_stat64(long, long);
132:	static int cp_stat64(struct stat64 *, struct kstat *);

File arch/x86/kernel/sys_x86_64.c:
89:	long __ia32_sys_mmap(const struct pt_regs *);
89:	long __x64_sys_mmap(const struct pt_regs *);
55:	unsigned long align_vdso_addr(unsigned long);
130:	unsigned long arch_get_unmapped_area(struct file *, unsigned long, unsigned long, unsigned long, unsigned long);
168:	unsigned long arch_get_unmapped_area_topdown(struct file *, const unsigned long, const unsigned long, const unsigned long, const unsigned long);
62:	static int control_va_addr_alignment(char *);

File arch/x86/kernel/sysfb.c:
37:	static int sysfb_init(void);

File arch/x86/kernel/sysfb_efi.c:
70:	void efifb_setup_from_dmi(struct screen_info *, const char *);
270:	void sysfb_apply_efi_quirks(void);
94:	static int efifb_set_system(const struct dmi_system_id *);

File arch/x86/kernel/tboot.c:
47:	bool tboot_enabled(void);
513:	int tboot_force_iommu(void);
469:	struct acpi_table_header *tboot_get_dmar_table(struct acpi_table_header *);
52:	void tboot_probe(void);
221:	void tboot_shutdown(u32);
107:	static int map_tboot_page(unsigned long, unsigned long, pgprot_t);
253:	static void tboot_copy_fadt(const struct acpi_table_fadt *);
161:	static void tboot_create_trampoline(void);
331:	static int tboot_dying_cpu(unsigned int);
303:	static int tboot_extended_sleep(u8, u32, u32);
408:	static int tboot_late_init(void);
353:	static ssize_t tboot_log_read(struct file *, char *, size_t, loff_t *);
190:	static int tboot_setup_sleep(void);
276:	static int tboot_sleep(u8, u32, u32);

File arch/x86/kernel/time.c:
119:	void clocksource_arch_init(struct clocksource *);
75:	void hpet_time_init(void);
28:	unsigned long profile_pc(struct pt_regs *);
111:	void time_init(void);
55:	static irqreturn_t timer_interrupt(int, void *);
85:	static void x86_late_time_init(void);

File arch/x86/kernel/tls.c:
243:	long __ia32_sys_get_thread_area(const struct pt_regs *);
191:	long __ia32_sys_set_thread_area(const struct pt_regs *);
243:	long __x64_sys_get_thread_area(const struct pt_regs *);
191:	long __x64_sys_set_thread_area(const struct pt_regs *);
220:	int do_get_thread_area(struct task_struct *, int, struct user_desc *);
114:	int do_set_thread_area(struct task_struct *, int, struct user_desc *, int);
248:	int regset_tls_active(struct task_struct *, const struct user_regset *);
258:	int regset_tls_get(struct task_struct *, const struct user_regset *, struct membuf);
272:	int regset_tls_set(struct task_struct *, const struct user_regset *, unsigned int, unsigned int, const void *, const void *);
84:	static void set_tls_desc(struct task_struct *, int, const struct user_desc *, int);
32:	static bool tls_desc_okay(const struct user_desc *);

File arch/x86/kernel/topology.c:
98:	int arch_register_cpu(int);
139:	void arch_unregister_cpu(int);
45:	static int enable_cpu0_hotplug(char *);
152:	static int topology_init(void);

File arch/x86/kernel/trace.c:
26:	int osnoise_arch_register(void);
193:	void osnoise_arch_unregister(void);
8:	static void trace_intel_irq_entry(void *, int);
16:	static void trace_intel_irq_exit(void *, int);

File arch/x86/kernel/trace_clock.c:
14:	u64 trace_clock_x86_tsc(void);

File arch/x86/kernel/tracepoint.c:
18:	int trace_pagefault_reg(void);
24:	void trace_pagefault_unreg(void);

File arch/x86/kernel/traps.c:
289:	void exc_alignment_check(struct pt_regs *, unsigned long);
466:	void exc_bounds(struct pt_regs *);
265:	void exc_coproc_segment_overrun(struct pt_regs *);
1092:	void exc_coprocessor_error(struct pt_regs *);
1022:	void exc_debug(struct pt_regs *);
1132:	void exc_device_not_available(struct pt_regs *);
197:	void exc_divide_error(struct pt_regs *);
345:	void exc_double_fault(struct pt_regs *, unsigned long);
557:	void exc_general_protection(struct pt_regs *, unsigned long);
665:	void exc_int3(struct pt_regs *);
246:	void exc_invalid_op(struct pt_regs *);
271:	void exc_invalid_tss(struct pt_regs *, unsigned long);
203:	void exc_overflow(struct pt_regs *);
277:	void exc_segment_not_present(struct pt_regs *, unsigned long);
1097:	void exc_simd_coprocessor_error(struct pt_regs *);
1109:	void exc_spurious_interrupt_bug(struct pt_regs *);
283:	void exc_stack_segment(struct pt_regs *, unsigned long);
762:	struct bad_iret_stack *fixup_bad_iret(struct bad_iret_stack *);
312:	void handle_stack_overflow(const char *, struct pt_regs *, unsigned long);
87:	int is_valid_bugaddr(unsigned long);
1028:	void noist_exc_debug(struct pt_regs *);
705:	struct pt_regs *sync_regs(struct pt_regs *);
1177:	void trap_init(void);
714:	struct pt_regs *vc_switch_off_ist(struct pt_regs *);
169:	static void do_error_trap(struct pt_regs *, long, char *, unsigned long, int, int, void *);
636:	static bool do_int3(struct pt_regs *);
152:	static void do_trap(int, int, char *, struct pt_regs *, long, int, void *);
526:	static bool fixup_iopl_exception(struct pt_regs *);
492:	static enum kernel_gp_hint get_kernel_gp_address(struct pt_regs *, unsigned long *);
218:	static bool handle_bug(struct pt_regs *);
1050:	static void math_error(struct pt_regs *, int);
137:	static void show_signal(struct task_struct *, const char *, const char *, struct pt_regs *, long, int);

File arch/x86/kernel/tsc.c:
1561:	unsigned long calibrate_delay_is_known(void);
266:	int check_tsc_unstable(void);
1295:	struct system_counterval_t convert_art_ns_to_tsc(u64);
1257:	struct system_counterval_t convert_art_to_tsc(u64);
69:	void cyc2ns_read_begin(struct cyc2ns_data *);
86:	void cyc2ns_read_end(void);
1164:	void mark_tsc_unstable(char *);
868:	unsigned long native_calibrate_cpu_early(void);
621:	unsigned long native_calibrate_tsc(void);
217:	u64 native_sched_clock(void);
242:	u64 native_sched_clock_from_tsc(u64);
273:	int notsc_setup(char *);
896:	void recalibrate_cpu_khz(void);
250:	unsigned long long sched_clock(void);
1494:	void tsc_early_init(void);
1508:	void tsc_init(void);
936:	void tsc_restore_sched_clock_state(void);
920:	void tsc_save_sched_clock_state(void);
1226:	int unsynchronized_tsc(void);
255:	bool using_native_sched_clock(void);
130:	static void __set_cyc2ns_scale(unsigned long, int, unsigned long long);
1017:	static int cpufreq_register_tsc_scaling(void);
1039:	static void detect_art(void);
1436:	static bool determine_cpu_tsc_frequencies(bool);
1403:	static int init_tsc_clocksource(void);
886:	static unsigned long native_calibrate_cpu(void);
388:	static unsigned long pit_calibrate_tsc(u32, unsigned long, int);
716:	static unsigned long pit_hpet_ptimer_calibrate_cpu(void);
526:	static unsigned long quick_pit_calibrate(void);
1092:	static u64 read_tsc(struct clocksource *);
168:	static void set_cyc2ns_scale(unsigned long, int, unsigned long long);
982:	static int time_cpufreq_notifier(struct notifier_block *, unsigned long, void *);
1118:	static int tsc_cs_enable(struct clocksource *);
1097:	static void tsc_cs_mark_unstable(struct clocksource *);
1109:	static void tsc_cs_tick_stable(struct clocksource *);
1181:	static void tsc_disable_clocksource_watchdog(void);
63:	static int tsc_early_khz_setup(char *);
1486:	static void tsc_enable_sched_clock(void);
316:	static u64 tsc_read_refs(u64 *, int);
1329:	static void tsc_refine_calibration_work(struct work_struct *);
1071:	static void tsc_resume(struct clocksource *);
295:	static int tsc_setup(char *);

File arch/x86/kernel/tsc_msr.c:
166:	unsigned long cpu_khz_from_msr(void);

File arch/x86/kernel/tsc_sync.c:
350:	void check_tsc_sync_source(int);
440:	void check_tsc_sync_target(void);
41:	void mark_tsc_async_resets(char *);
179:	bool tsc_store_and_check_tsc_adjust(bool);
49:	void tsc_verify_tsc_adjust(bool);
267:	static cycles_t check_tsc_warp(unsigned int);
108:	static int start_sync_check_timer(void);
93:	static void tsc_sync_check_timer_fn(struct timer_list *);

File arch/x86/kernel/umip.c:
336:	bool fixup_umip_exception(struct pt_regs *);
205:	static int emulate_umip_insn(struct insn *, int, unsigned char *, int *, bool);
116:	static void umip_printk(const struct pt_regs *, const char *, const char *, ...);

File arch/x86/kernel/unwind_orc.c:
621:	void __unwind_start(struct unwind_state *, struct task_struct *, struct pt_regs *, unsigned long *);
313:	unsigned long unwind_get_return_address(struct unwind_state *);
322:	unsigned long *unwind_get_return_address_ptr(struct unwind_state *);
266:	void unwind_init(void);
238:	void unwind_module_init(struct module *, void *, size_t, void *, size_t);
417:	bool unwind_next_frame(struct unwind_state *);
33:	static struct orc_entry *__orc_find(int *, struct orc_entry *, unsigned int, unsigned long);
349:	static bool deref_stack_reg(struct unwind_state *, unsigned long, unsigned long *);
144:	static struct orc_entry *orc_find(unsigned long);
216:	static int orc_sort_cmp(const void *, const void *);
196:	static void orc_sort_swap(void *, void *, int);
336:	static bool stack_access_ok(struct unwind_state *, unsigned long, size_t);

File arch/x86/kernel/uprobes.c:
1032:	void arch_uprobe_abort_xol(struct arch_uprobe *, struct pt_regs *);
852:	int arch_uprobe_analyze_insn(struct arch_uprobe *, struct mm_struct *, unsigned long);
999:	int arch_uprobe_exception_notify(struct notifier_block *, unsigned long, void *);
961:	int arch_uprobe_post_xol(struct arch_uprobe *, struct pt_regs *);
914:	int arch_uprobe_pre_xol(struct arch_uprobe *, struct pt_regs *);
1053:	bool arch_uprobe_skip_sstep(struct arch_uprobe *, struct pt_regs *);
946:	bool arch_uprobe_xol_was_trapped(struct task_struct *);
1062:	unsigned long arch_uretprobe_hijack_return_addr(unsigned long, struct pt_regs *);
1088:	bool arch_uretprobe_is_alive(struct return_instance *, enum rp_check, struct pt_regs *);
638:	static bool branch_emulate_op(struct arch_uprobe *, struct pt_regs *);
673:	static int branch_post_xol_op(struct arch_uprobe *, struct pt_regs *);
619:	static bool check_jmp_cond(struct pt_regs *, struct arch_uprobe *, struct pt_regs *, struct arch_uprobe *);
574:	static void default_abort_op(struct arch_uprobe *, struct pt_regs *);
554:	static int default_post_xol_op(struct arch_uprobe *, struct pt_regs *);
520:	static int default_pre_xol_op(struct arch_uprobe *, struct pt_regs *);
526:	static int emulate_push_stack(struct pt_regs *, unsigned long);
663:	static bool push_emulate_op(struct arch_uprobe *, struct pt_regs *);
335:	static void riprel_analyze(struct arch_uprobe *, struct insn *);
277:	static int uprobe_init_insn(struct arch_uprobe *, struct insn *, bool);

File arch/x86/kernel/vsmp_64.c:
141:	void vsmp_init(void);
130:	static int apicid_phys_pkg_id(int, int);
135:	static void vsmp_apic_post_init(void);
96:	static void vsmp_cap_cpus(void);

File arch/x86/kernel/x86_init.c:
153:	void arch_restore_msi_irqs(struct pci_dev *);
33:	bool bool_x86_init_noop(void);
29:	void x86_init_noop(void);
30:	void x86_init_uint_noop(unsigned int);
34:	void x86_op_int_noop(int);
31:	static int iommu_init_noop(void);
48:	static void x86_wallclock_init(void);

File arch/x86/lib/cache-smp.c:
16:	int wbinvd_on_all_cpus(void);
10:	void wbinvd_on_cpu(int);
5:	static void __wbinvd(void *);

File arch/x86/lib/cmdline.c:
209:	int cmdline_find_option(const char *, const char *, char *, int);
204:	int cmdline_find_option_bool(const char *, const char *);

File arch/x86/lib/copy_highpages.c:
98:	void copy_highpages(struct page *, struct page *, int);
20:	int sysctl_hugepage_nocache_copy(struct ctl_table *, int, void *, size_t *, loff_t *);
88:	static void copy_highpages_cache(struct page *, struct page *, int);
63:	static int copy_highpages_init(void);
70:	static void copy_highpages_nocache(struct page *, struct page *, int);

File arch/x86/lib/copy_mc.c:
30:	unsigned long copy_mc_fragile_handle_tail(char *, char *, unsigned int);
66:	unsigned long copy_mc_to_kernel(void *, const void *, unsigned int);
77:	unsigned long copy_mc_to_user(void *, const void *, unsigned int);
19:	void enable_copy_mc_fragile(void);

File arch/x86/lib/cpu.c:
6:	unsigned int x86_family(unsigned int);
19:	unsigned int x86_model(unsigned int);
34:	unsigned int x86_stepping(unsigned int);

File arch/x86/lib/csum-partial_64.c:
134:	__wsum csum_partial(const void *, int, __wsum);
145:	__sum16 ip_compute_csum(const void *, int);
35:	static unsigned int do_csum(const unsigned char *, unsigned int);

File arch/x86/lib/csum-wrappers_64.c:
24:	__wsum csum_and_copy_from_user(const void *, void *, int);
49:	__wsum csum_and_copy_to_user(const void *, void *, int);
78:	__sum16 csum_ipv6_magic(const struct in6_addr *, const struct in6_addr *, __u32, __u8, __wsum);
72:	__wsum csum_partial_copy_nocheck(const void *, void *, int);

File arch/x86/lib/delay.c:
207:	void __const_udelay(unsigned long);
201:	void __delay(unsigned long);
227:	void __ndelay(unsigned long);
221:	void __udelay(unsigned long);
192:	int read_current_timer(unsigned long *);
186:	void use_mwaitx_delay(void);
180:	void use_tpause_delay(void);
174:	void use_tsc_delay(void);
149:	static void delay_halt(u64);
125:	static void delay_halt_mwaitx(u64, u64);
105:	static void delay_halt_tpause(u64, u64);
40:	static void delay_loop(u64);
63:	static void delay_tsc(u64);

File arch/x86/lib/error-inject.c:
17:	void override_function_with_return(struct pt_regs *);

File arch/x86/lib/inat.c:
65:	insn_attr_t inat_get_avx_attribute(insn_byte_t, insn_byte_t, insn_byte_t);
26:	insn_attr_t inat_get_escape_attribute(insn_byte_t, int, insn_attr_t);
45:	insn_attr_t inat_get_group_attribute(insn_byte_t, int, insn_attr_t);
18:	int inat_get_last_prefix_id(insn_byte_t);
13:	insn_attr_t inat_get_opcode_attribute(insn_byte_t);

File arch/x86/lib/insn-eval.c:
1508:	bool insn_decode(struct insn *, struct pt_regs *, unsigned char *, int);
1451:	int insn_fetch_from_user(struct pt_regs *, unsigned char *);
1480:	int insn_fetch_from_user_inatomic(struct pt_regs *, unsigned char *);
1401:	void *insn_get_addr_ref(struct insn *, struct pt_regs *);
778:	int insn_get_code_seg_params(struct pt_regs *);
1418:	unsigned long insn_get_effective_ip(struct pt_regs *);
852:	int insn_get_modrm_reg_off(struct insn *, struct pt_regs *);
837:	int insn_get_modrm_rm_off(struct insn *, struct pt_regs *);
663:	unsigned long insn_get_seg_base(struct pt_regs *, int);
64:	bool insn_has_rep_prefix(struct insn *);
1190:	static void *get_addr_ref_16(struct insn *, struct pt_regs *);
603:	static bool get_desc(struct desc_struct *, unsigned short);
976:	static int get_eff_addr_modrm(struct insn *, struct pt_regs *, int *, long *);
928:	static int get_eff_addr_reg(struct insn *, struct pt_regs *, int *, long *);
1111:	static int get_eff_addr_sib(struct insn *, struct pt_regs *, int *, long *);
419:	static int get_reg_offset(enum reg_type, struct pt_regs *, struct insn *, struct insn *);
878:	static int get_seg_base_limit(struct insn *, struct pt_regs *, int, unsigned long *, unsigned long *);
93:	static int get_seg_reg_override_idx(struct insn *);
345:	static short get_segment_selector(struct pt_regs *, int);
181:	static int resolve_default_seg(struct insn *, int, struct pt_regs *, struct pt_regs *);

File arch/x86/lib/insn.c:
378:	void insn_get_displacement(struct insn *);
549:	void insn_get_immediate(struct insn *);
619:	void insn_get_length(struct insn *);
287:	void insn_get_modrm(struct insn *);
234:	void insn_get_opcode(struct insn *);
101:	void insn_get_prefixes(struct insn *);
347:	void insn_get_sib(struct insn *);
42:	void insn_init(struct insn *, const void *, int, int);
325:	int insn_rip_relative(struct insn *);

File arch/x86/lib/iomem.c:
25:	void memcpy_fromio(void *, const volatile void *, size_t);
43:	void memcpy_toio(volatile void *, const void *, size_t);
61:	void memset_io(volatile void *, int, size_t);

File arch/x86/lib/kaslr.c:
49:	unsigned long kaslr_get_random_long(const char *);

File arch/x86/lib/misc.c:
7:	int num_digits(int);

File arch/x86/lib/msr-smp.c:
36:	int rdmsr_on_cpu(unsigned int, u32, u32 *, u32 *);
127:	void rdmsr_on_cpus(const struct cpumask *, u32, struct msr *);
169:	int rdmsr_safe_on_cpu(unsigned int, u32, u32 *, u32 *);
255:	int rdmsr_safe_regs_on_cpu(unsigned int, u32 *);
52:	int rdmsrl_on_cpu(unsigned int, u32, u64 *);
225:	int rdmsrl_safe_on_cpu(unsigned int, u32, u64 *);
67:	int wrmsr_on_cpu(unsigned int, u32, u32, u32);
141:	void wrmsr_on_cpus(const struct cpumask *, u32, struct msr *);
193:	int wrmsr_safe_on_cpu(unsigned int, u32, u32, u32);
268:	int wrmsr_safe_regs_on_cpu(unsigned int, u32 *);
83:	int wrmsrl_on_cpu(unsigned int, u32, u64);
209:	int wrmsrl_safe_on_cpu(unsigned int, u32, u64);
8:	static void __rdmsr_on_cpu(void *);
154:	static void __rdmsr_safe_on_cpu(void *);
241:	static void __rdmsr_safe_regs_on_cpu(void *);
22:	static void __wrmsr_on_cpu(void *);
162:	static void __wrmsr_safe_on_cpu(void *);
248:	static void __wrmsr_safe_regs_on_cpu(void *);

File arch/x86/lib/msr.c:
131:	void do_trace_rdpmc(unsigned int, u64, int);
124:	void do_trace_read_msr(unsigned int, u64, int);
117:	void do_trace_write_msr(unsigned int, u64, int);
111:	int msr_clear_bit(u32, u8);
39:	int msr_read(u32, struct msr *);
98:	int msr_set_bit(u32, u8);
57:	int msr_write(u32, struct msr *);
9:	struct msr *msrs_alloc(void);
23:	void msrs_free(struct msr *);

File arch/x86/lib/usercopy.c:
17:	unsigned long copy_from_user_nmi(void *, const void *, unsigned long);

File arch/x86/lib/usercopy_64.c:
17:	unsigned long __clear_user(void *, unsigned long);
87:	long __copy_user_flushcache(void *, const void *, unsigned int);
117:	void __memcpy_flushcache(void *, const void *, size_t);
81:	void arch_wb_cache_pmem(void *, size_t);
51:	unsigned long clear_user(void *, unsigned long);
182:	void memcpy_page_flushcache(char *, struct page *, size_t, size_t);
69:	static void clean_cache_range(void *, size_t);

File arch/x86/mm/amdtopology.c:
55:	int amd_numa_init(void);

File arch/x86/mm/cpu_entry_area.c:
34:	void cea_set_pte(void *, phys_addr_t, pgprot_t);
25:	struct cpu_entry_area *get_cpu_entry_area(int);
220:	void setup_cpu_entry_areas(void);
54:	static void cea_map_percpu_pages(void *, void *, int, pgprot_t);
94:	static void percpu_setup_exception_stacks(unsigned int);
132:	static void setup_cpu_entry_area(unsigned int);

File arch/x86/mm/extable.c:
189:	void early_fixup_exception(struct pt_regs *, int);
141:	enum handler_type ex_get_fault_handler_type(unsigned long);
129:	bool ex_handler_clear_fs(const struct exception_table_entry *, struct pt_regs *, int, unsigned long, unsigned long);
84:	bool ex_handler_copy(const struct exception_table_entry *, struct pt_regs *, int, unsigned long, unsigned long);
27:	bool ex_handler_default(const struct exception_table_entry *, struct pt_regs *, int, unsigned long, unsigned long);
37:	bool ex_handler_fault(const struct exception_table_entry *, struct pt_regs *, int, unsigned long, unsigned long);
58:	bool ex_handler_fprestore(const struct exception_table_entry *, struct pt_regs *, int, unsigned long, unsigned long);
96:	bool ex_handler_rdmsr_unsafe(const struct exception_table_entry *, struct pt_regs *, int, unsigned long, unsigned long);
73:	bool ex_handler_uaccess(const struct exception_table_entry *, struct pt_regs *, int, unsigned long, unsigned long);
113:	bool ex_handler_wrmsr_unsafe(const struct exception_table_entry *, struct pt_regs *, int, unsigned long, unsigned long);
158:	int fixup_exception(struct pt_regs *, int, unsigned long, unsigned long);

File arch/x86/mm/fault.c:
1454:	void exc_page_fault(struct pt_regs *, unsigned long);
1144:	bool fault_in_kernel_space(unsigned long);
859:	static void __bad_area(struct pt_regs *, unsigned long, unsigned long, u32, int);
800:	static void __bad_area_nosemaphore(struct pt_regs *, unsigned long, unsigned long, u32, int);
873:	static void bad_area(struct pt_regs *, unsigned long, unsigned long);
896:	static void bad_area_access_error(struct pt_regs *, unsigned long, unsigned long, struct vm_area_struct *);
852:	static void bad_area_nosemaphore(struct pt_regs *, unsigned long, unsigned long);
1163:	static void do_kern_addr_fault(struct pt_regs *, unsigned long, unsigned long);
1226:	static void do_user_addr_fault(struct pt_regs *, unsigned long, unsigned long);
361:	static void dump_pagetable(unsigned long);
110:	static int is_prefetch(struct pt_regs *, unsigned long, unsigned long);
969:	static void mm_fault_error(struct pt_regs *, unsigned long, unsigned long, vm_fault_t);
636:	static void no_context(struct pt_regs *, unsigned long, unsigned long, int, int);
592:	static void pgtable_bad(struct pt_regs *, unsigned long, unsigned long);
613:	static void set_signal_archinfo(unsigned long, unsigned long);
515:	static void show_fault_oops(struct pt_regs *, unsigned long, unsigned long);
483:	static void show_ldttss(const struct desc_ptr *, const char *, u16);
1035:	static int spurious_kernel_fault(unsigned long, unsigned long);
1002:	static int spurious_kernel_fault_check(unsigned long, pte_t *);

File arch/x86/mm/hugetlbpage.c:
183:	bool arch_hugetlb_valid_size(unsigned long);
142:	unsigned long hugetlb_get_unmapped_area(struct file *, unsigned long, unsigned long, unsigned long, unsigned long);
65:	int pmd_huge(pmd_t);
71:	int pud_huge(pud_t);
194:	static int gigantic_pages_init(void);
101:	static unsigned long hugetlb_get_unmapped_area_topdown(unsigned long, unsigned long, unsigned long, unsigned long, struct file *, struct file *);

File arch/x86/mm/ident_map.c:
97:	int kernel_ident_mapping_init(struct x86_mapping_info *, pgd_t *, unsigned long, unsigned long);
61:	static int ident_p4d_init(struct x86_mapping_info *, p4d_t *, unsigned long, unsigned long);
7:	static void ident_pmd_init(struct x86_mapping_info *, pmd_t *, unsigned long, unsigned long);
21:	static int ident_pud_init(struct x86_mapping_info *, pud_t *, unsigned long, unsigned long);

File arch/x86/mm/init.c:
114:	void *alloc_low_pages(unsigned int);
62:	unsigned long cachemode2protval(enum page_cache_mode);
810:	int devmem_is_allowed(unsigned long);
172:	void early_alloc_pgt_buf(void);
840:	void free_init_pages(const char *, unsigned long, unsigned long);
916:	void free_initmem(void);
927:	void free_initrd_mem(unsigned long, unsigned long);
889:	void free_kernel_image_pages(const char *, void *, void *);
706:	void init_mem_mapping(void);
503:	unsigned long init_memory_mapping(unsigned long, unsigned long, pgprot_t);
1025:	unsigned long max_swapfile_size(void);
950:	void memblock_find_dma_reserve(void);
486:	bool pfn_range_is_mapped(unsigned long, unsigned long);
87:	enum page_cache_mode pgprot2cachemode(pgprot_t);
767:	void poking_init(void);
1015:	void update_cache_mode_entry(unsigned int, enum page_cache_mode);
82:	bool x86_has_pat_wp(void);
989:	void zone_sizes_init(void);
171:	static void __brk_reservation_fn_early_pgt_alloc__(void);
315:	static void adjust_range_page_size_mask(struct map_range *, int);
539:	static unsigned long init_range_memory_mapping(unsigned long, unsigned long);
650:	static void memory_map_bottom_up(unsigned long, unsigned long);
186:	static int parse_direct_gbpages_off(char *);
186:	static int parse_direct_gbpages_on(char *);
209:	static void probe_page_size_mask(void);
295:	static int save_mr(struct map_range *, int, unsigned long, unsigned long, unsigned long);
247:	static void setup_pcid(void);
370:	static int split_mem_range(struct map_range *, unsigned long, unsigned long, int);

File arch/x86/mm/init_64.c:
849:	int add_pages(int, unsigned long, unsigned long, struct mhp_params *);
864:	int arch_add_memory(int, u64, u64, struct mhp_params *);
1213:	void arch_remove_memory(int, u64, u64, struct vmem_altmap *);
421:	void cleanup_highmap(void);
1315:	int deferred_page_init_max_threads(const struct cpumask *);
403:	void init_extra_mapping_uc(unsigned long, unsigned long);
398:	void init_extra_mapping_wb(unsigned long, unsigned long);
1376:	int kern_addr_valid(unsigned long);
798:	unsigned long kernel_physical_mapping_change(unsigned long, unsigned long, unsigned long);
783:	unsigned long kernel_physical_mapping_init(unsigned long, unsigned long, unsigned long, pgprot_t);
1328:	void mark_rodata_ro(void);
1286:	void mem_init(void);
1477:	unsigned long memory_block_size_bytes(void);
814:	void paging_init(void);
338:	pmd_t *populate_extra_pmd(unsigned long);
350:	pte_t *populate_extra_pte(unsigned long);
1576:	void register_page_bootmem_memmap(unsigned long, struct page *, unsigned long);
1429:	int set_memory_block_size_order(unsigned int);
320:	void set_pte_vaddr(unsigned long, pte_t);
305:	void set_pte_vaddr_p4d(p4d_t *, unsigned long, pte_t);
313:	void set_pte_vaddr_pud(pud_t *, unsigned long, pte_t);
1198:	void vmemmap_free(unsigned long, unsigned long, struct vmem_altmap *);
1555:	int vmemmap_populate(unsigned long, unsigned long, int, struct vmem_altmap *);
1643:	void vmemmap_populate_print_last(void);
361:	static void __init_extra_mapping(unsigned long, unsigned long, enum page_cache_mode);
726:	static unsigned long __kernel_physical_mapping_init(unsigned long, unsigned long, unsigned long, pgprot_t, bool);
244:	static p4d_t *fill_p4d(pgd_t *, unsigned long);
268:	static pmd_t *fill_pmd(pud_t *, unsigned long);
280:	static pte_t *fill_pte(pmd_t *, unsigned long);
256:	static pud_t *fill_pud(p4d_t *, unsigned long);
897:	static void free_hugepage_table(struct page *, struct vmem_altmap *);
877:	static void free_pagetable(struct page *, int);
924:	static void free_pmd_table(pmd_t *, pud_t *);
906:	static void free_pte_table(pte_t *, pmd_t *);
942:	static void free_pud_table(pud_t *, p4d_t *);
118:	static int nonx32_setup(char *);
675:	static unsigned long phys_p4d_init(p4d_t *, unsigned long, unsigned long, unsigned long, pgprot_t, bool);
503:	static unsigned long phys_pmd_init(pmd_t *, unsigned long, unsigned long, unsigned long, pgprot_t, bool);
449:	static unsigned long phys_pte_init(pte_t *, unsigned long, unsigned long, pgprot_t, bool);
588:	static unsigned long phys_pud_init(pud_t *, unsigned long, unsigned long, unsigned long, pgprot_t, bool);
1241:	static void preallocate_vmalloc_pages(void);
1143:	static void remove_p4d_table(p4d_t *, unsigned long, unsigned long, struct vmem_altmap *, bool);
1176:	static void remove_pagetable(unsigned long, unsigned long, bool, struct vmem_altmap *);
1032:	static void remove_pmd_table(pmd_t *, unsigned long, unsigned long, bool, struct vmem_altmap *);
961:	static void remove_pte_table(pte_t *, unsigned long, unsigned long, bool);
1088:	static void remove_pud_table(pud_t *, unsigned long, unsigned long, struct vmem_altmap *, bool);
225:	static void *spp_getpage(void);
213:	static void sync_global_pgds(unsigned long, unsigned long);
165:	static void sync_global_pgds_l4(unsigned long, unsigned long);
128:	static void sync_global_pgds_l5(unsigned long, unsigned long);
1493:	static int vmemmap_populate_hugepages(unsigned long, unsigned long, int, struct vmem_altmap *);

File arch/x86/mm/ioremap.c:
852:	void __early_set_fixmap(enum fixed_addresses, phys_addr_t, pgprot_t);
693:	bool arch_memremap_can_ram_remap(resource_size_t, unsigned long, unsigned long);
813:	void early_ioremap_init(void);
770:	void *early_memremap_decrypted(resource_size_t, unsigned long);
780:	void *early_memremap_decrypted_wp(resource_size_t, unsigned long);
751:	void *early_memremap_encrypted(resource_size_t, unsigned long);
761:	void *early_memremap_encrypted_wp(resource_size_t, unsigned long);
720:	pgprot_t early_memremap_pgprot_adjust(resource_size_t, unsigned long, pgprot_t);
326:	void *ioremap(resource_size_t, unsigned long);
417:	void *ioremap_cache(resource_size_t, unsigned long);
43:	int ioremap_change_attr(unsigned long, unsigned long, enum page_cache_mode);
410:	void *ioremap_encrypted(resource_size_t, unsigned long);
424:	void *ioremap_prot(resource_size_t, unsigned long, unsigned long);
367:	void *ioremap_uc(resource_size_t, unsigned long);
386:	void *ioremap_wc(resource_size_t, unsigned long);
403:	void *ioremap_wt(resource_size_t, unsigned long);
439:	void iounmap(volatile void *);
808:	bool is_early_ioremap_ptep(pte_t *);
744:	bool phys_mem_access_encrypted(unsigned long, unsigned long);
506:	void unxlate_dev_mem_ptr(phys_addr_t, void *);
490:	void *xlate_dev_mem_ptr(phys_addr_t);
178:	static void *__ioremap_caller(resource_size_t, unsigned long, enum page_cache_mode, void *, bool);
69:	static unsigned int __ioremap_check_ram(struct resource *);
127:	static int __ioremap_collect_map_flags(struct resource *, void *);
575:	static bool memremap_is_efi_data(resource_size_t, unsigned long);
522:	static bool memremap_should_map_decrypted(resource_size_t, unsigned long);

File arch/x86/mm/kaslr.c:
141:	void init_trampoline_kaslr(void);
64:	void kernel_randomize_memory(void);

File arch/x86/mm/maccess.c:
12:	bool copy_from_kernel_nofault_allowed(const void *, size_t);

File arch/x86/mm/mem_encrypt.c:
324:	int early_set_memory_decrypted(unsigned long, unsigned long);
329:	int early_set_memory_encrypted(unsigned long, unsigned long);
364:	bool force_dma_unencrypted(struct device *);
389:	void mem_encrypt_free_decrypted_mem(void);
439:	void mem_encrypt_init(void);
351:	bool sev_active(void);
358:	bool sev_es_active(void);
346:	bool sme_active(void);
117:	void sme_early_decrypt(resource_size_t, unsigned long);
112:	void sme_early_encrypt(resource_size_t, unsigned long);
183:	void sme_early_init(void);
163:	void sme_map_bootdata(char *);
143:	void sme_unmap_bootdata(char *);
202:	static void __set_clr_pte_enc(pte_t *, int, bool);
62:	static void __sme_early_enc_dec(resource_size_t, unsigned long, bool);
122:	static void __sme_early_map_unmap_mem(void *, unsigned long, bool);
256:	static int early_set_memory_enc_dec(unsigned long, unsigned long, bool);

File arch/x86/mm/mem_encrypt_identity.c:
496:	void sme_enable(struct boot_params *);
289:	void sme_encrypt_kernel(struct boot_params *);
213:	static void __sme_map_range(struct sme_populate_pgd_data *, pmdval_t, pteval_t);
203:	static void __sme_map_range_pte(struct sme_populate_pgd_data *);
99:	static void sme_clear_pgd(struct sme_populate_pgd_data *);
242:	static void sme_map_range_decrypted(struct sme_populate_pgd_data *);
237:	static void sme_map_range_encrypted(struct sme_populate_pgd_data *);
252:	static unsigned long sme_pgtable_calc(unsigned long);
167:	static void sme_populate_pgd(struct sme_populate_pgd_data *);
151:	static void sme_populate_pgd_large(struct sme_populate_pgd_data *);
114:	static pud_t *sme_prepare_pgd(struct sme_populate_pgd_data *);

File arch/x86/mm/mmap.c:
77:	unsigned long arch_mmap_rnd(void);
129:	void arch_pick_mmap_layout(struct mm_struct *, struct rlimit *);
166:	const char *arch_vma_name(struct vm_area_struct *);
153:	unsigned long get_mmap_base(int);
209:	bool mmap_address_hint_valid(unsigned long, unsigned long);
238:	bool pfn_modify_allowed(unsigned long, pgprot_t);
31:	unsigned long task_size_32bit(void);
36:	unsigned long task_size_64bit(int);
224:	int valid_mmap_phys_addr_range(unsigned long, size_t);
218:	int valid_phys_addr_range(phys_addr_t, size_t);
82:	static unsigned long mmap_base(unsigned long, unsigned long, struct rlimit *, struct rlimit *);

File arch/x86/mm/numa.c:
443:	int __node_distance(int, int);
789:	void init_cpu_to_node(void);
766:	void init_gi_nodes(void);
949:	int memory_add_physaddr_to_nid(u64);
190:	int numa_add_memblk(int, u64, u64);
238:	int numa_cleanup_meminfo(struct numa_meminfo *);
97:	void numa_clear_node(int);
57:	int numa_cpu_node(int);
159:	void numa_remove_memblk_from(int, struct numa_meminfo *);
352:	void numa_reset_distance(void);
421:	void numa_set_distance(int, int, int);
75:	void numa_set_node(int, int);
934:	int phys_to_target_node(phys_addr_t);
109:	void setup_node_to_cpumask_map(void);
726:	void x86_numa_init(void);
196:	static void alloc_node_data(int);
706:	static int dummy_numa_init(void);
125:	static int numa_add_memblk_to(int, u64, u64, struct numa_meminfo *);
363:	static int numa_alloc_distance(void);
486:	static void numa_clear_kernel_node_hotplug(void);
640:	static int numa_init(int (*)(void));
455:	static bool numa_meminfo_cover_memory(const struct numa_meminfo *);
335:	static void numa_nodemask_from_meminfo(nodemask_t *, const struct numa_meminfo *);
548:	static int numa_register_memblks(struct numa_meminfo *);
34:	static int numa_setup(char *);

File arch/x86/mm/numa_64.c:
10:	void initmem_init(void);

File arch/x86/mm/numa_emulation.c:
532:	void numa_add_cpu(int);
16:	int numa_emu_cmdline(char *);
371:	void numa_emulation(struct numa_meminfo *, int);
550:	void numa_remove_cpu(int);
46:	static int emu_setup_memblk(int, int, u64, struct numa_meminfo *, struct numa_meminfo *);
32:	static u64 mem_hole_size(u64, u64);
83:	static int split_nodes_interleave(u64, int, u64, struct numa_meminfo *, struct numa_meminfo *);
216:	static int split_nodes_size_interleave_uniform(u64, u64, u64, int, struct numa_memblk *, int, struct numa_meminfo *, struct numa_meminfo *);

File arch/x86/mm/pat/memtype.c:
816:	void arch_io_free_memtype_wc(resource_size_t, resource_size_t);
808:	int arch_io_reserve_memtype_wc(resource_size_t, resource_size_t);
275:	void init_cache_modes(void);
663:	int memtype_free(u64, u64);
803:	void memtype_free_io(resource_size_t, resource_size_t);
878:	int memtype_kernel_map_sync(u64, unsigned long, enum page_cache_mode);
577:	int memtype_reserve(u64, u64, enum page_cache_mode, enum page_cache_mode *);
768:	int memtype_reserve_io(resource_size_t, resource_size_t, enum page_cache_mode *);
72:	void pat_disable(const char *);
93:	bool pat_enabled(void);
331:	void pat_init(void);
748:	bool pat_pfn_immune_to_uc_mtrr(unsigned long);
1118:	pgprot_t pgprot_writecombine(pgprot_t);
1125:	pgprot_t pgprot_writethrough(pgprot_t);
822:	pgprot_t phys_mem_access_prot(struct file *, unsigned long, unsigned long, pgprot_t);
858:	int phys_mem_access_prot_allowed(struct file *, unsigned long, unsigned long, pgprot_t *);
997:	int track_pfn_copy(struct vm_area_struct *);
1066:	void track_pfn_insert(struct vm_area_struct *, pgprot_t *, pfn_t);
1026:	int track_pfn_remap(struct vm_area_struct *, pgprot_t *, unsigned long, unsigned long, unsigned long);
1084:	void untrack_pfn(struct vm_area_struct *, unsigned long, unsigned long);
1113:	void untrack_pfn_moved(struct vm_area_struct *);
220:	static void __init_cache_modes(u64);
711:	static enum page_cache_mode lookup_memtype(u64);
1138:	static struct memtype *memtype_get_idx(loff_t);
1170:	static void *memtype_seq_next(struct seq_file *, void *, loff_t *);
1201:	static int memtype_seq_open(struct inode *, struct file *);
1182:	static int memtype_seq_show(struct seq_file *, void *);
1160:	static void *memtype_seq_start(struct seq_file *, loff_t *);
1177:	static void memtype_seq_stop(struct seq_file *, void *);
86:	static int nopat(char *);
445:	static int pagerange_is_ram_callback(unsigned long, unsigned long, void *);
241:	static void pat_bp_init(u64);
101:	static int pat_debug_setup(char *);
1213:	static int pat_memtype_list_init(void);
456:	static int pat_pagerange_is_ram(resource_size_t, resource_size_t);
911:	static int reserve_pfn_range(u64, unsigned long, pgprot_t *, int);

File arch/x86/mm/pat/memtype_interval.c:
116:	int memtype_check_insert(struct memtype *, enum page_cache_mode *);
175:	int memtype_copy_nth_element(struct memtype *, loff_t);
131:	struct memtype *memtype_erase(u64, u64);
164:	struct memtype *memtype_lookup(u64);
46:	static void interval_augment_rotate(struct rb_node *, struct rb_node *);
46:	static void interval_insert(struct memtype *, struct rb_root_cached *);
46:	static struct memtype *interval_iter_next(struct memtype *, u64, u64);
46:	static void interval_remove(struct memtype *, struct rb_root_cached *);
46:	static struct memtype *interval_subtree_search(struct memtype *, u64, u64);
78:	static int memtype_check_conflict(u64, u64, enum page_cache_mode, enum page_cache_mode *);
57:	static struct memtype *memtype_match(u64, u64, int);

File arch/x86/mm/pat/set_memory.c:
2197:	void __kernel_map_pages(struct page *, int, int);
1813:	int __set_memory_prot(unsigned long, int, pgprot_t);
1820:	int _set_memory_uc(unsigned long, int);
1897:	int _set_memory_wb(unsigned long, int);
1858:	int _set_memory_wc(unsigned long, int);
1891:	int _set_memory_wt(unsigned long, int);
315:	void arch_invalidate_pmem(void *, size_t);
97:	void arch_report_meminfo(struct seq_file *);
306:	void clflush_cache_range(void *, unsigned int);
2243:	int kernel_map_pages_in_pgd(pgd_t *, u64, unsigned long, unsigned int, unsigned long);
2230:	bool kernel_page_present(struct page *);
2280:	int kernel_unmap_pages_in_pgd(pgd_t *, unsigned long, unsigned long);
624:	pte_t *lookup_address(unsigned long, unsigned int *);
634:	pte_t *lookup_address_in_mm(struct mm_struct *, unsigned long, unsigned int *);
575:	pte_t *lookup_address_in_pgd(pgd_t *, unsigned long, unsigned int *);
655:	pmd_t *lookup_pmd_address(unsigned long);
2192:	int set_direct_map_default_noflush(struct page *);
2187:	int set_direct_map_invalid_noflush(struct page *);
1957:	int set_memory_4k(unsigned long, int);
2024:	int set_memory_decrypted(unsigned long, int);
2018:	int set_memory_encrypted(unsigned long, int);
1969:	int set_memory_global(unsigned long, int);
1963:	int set_memory_nonglobal(unsigned long, int);
1943:	int set_memory_np(unsigned long, int);
1948:	int set_memory_np_noalias(unsigned long, int);
1925:	int set_memory_nx(unsigned long, int);
1933:	int set_memory_ro(unsigned long, int);
1938:	int set_memory_rw(unsigned long, int);
1833:	int set_memory_uc(unsigned long, int);
1904:	int set_memory_wb(unsigned long, int);
1874:	int set_memory_wc(unsigned long, int);
1917:	int set_memory_x(unsigned long, int);
2084:	int set_pages_array_uc(struct page **, int);
2110:	int set_pages_array_wb(struct page **, int);
2090:	int set_pages_array_wc(struct page **, int);
2096:	int set_pages_array_wt(struct page **, int);
2135:	int set_pages_ro(struct page *, int);
2142:	int set_pages_rw(struct page *, int);
2030:	int set_pages_uc(struct page *, int);
2102:	int set_pages_wb(struct page *, int);
687:	phys_addr_t slow_virt_to_phys(void *);
80:	void update_page_count(int, unsigned long);
1509:	static int __change_page_attr(struct cpa_data *, int);
1641:	static int __change_page_attr_set_clr(struct cpa_data *, int);
264:	static unsigned long __cpa_addr(struct cpa_data *, unsigned long);
322:	static void __cpa_flush_all(void *);
343:	static void __cpa_flush_tlb(void *);
1464:	static int __cpa_process_fault(struct cpa_data *, unsigned long, int);
1975:	static int __set_memory_enc_dec(unsigned long, int, bool);
2168:	static int __set_pages_np(struct page *, int);
2149:	static int __set_pages_p(struct page *, int);
765:	static int __should_split_large_page(pte_t *, unsigned long, struct cpa_data *);
960:	static int __split_large_page(struct cpa_data *, pte_t *, unsigned long, struct page *);
1125:	static void __unmap_pmd_range(pud_t *, pmd_t *, unsigned long, unsigned long);
641:	static pte_t *_lookup_address_cpa(unsigned long, unsigned int *, struct cpa_data *, struct cpa_data *);
2038:	static int _set_pages_array(struct page **, int, enum page_cache_mode);
1687:	static int change_page_attr_set_clr(unsigned long *, int, pgprot_t, pgprot_t, int, int, struct page **);
352:	static void cpa_flush(struct cpa_data *, int);
336:	static void cpa_flush_all(unsigned long);
1584:	static int cpa_process_alias(struct cpa_data *);
1415:	static int populate_pgd(struct cpa_data *, unsigned long);
1259:	static long populate_pmd(struct cpa_data *, unsigned long, unsigned long, unsigned int, pud_t *, pgprot_t);
1240:	static void populate_pte(struct cpa_data *, unsigned long, unsigned long, unsigned int, pgprot_t, pmd_t *, pmd_t *);
1333:	static int populate_pud(struct cpa_data *, unsigned long, p4d_t *, pgprot_t);
464:	static pgprotval_t protect_kernel_text_ro(unsigned long, unsigned long);
1064:	static int split_large_page(struct cpa_data *, pte_t *, unsigned long);
923:	static void split_set_pte(struct cpa_data *, pte_t *, unsigned long, pgprot_t, unsigned long, unsigned long);
1133:	static void unmap_pmd_range(pud_t *, unsigned long, unsigned long);
1107:	static bool unmap_pte_range(pmd_t *, unsigned long, unsigned long);

File arch/x86/mm/pgtable.c:
61:	void ___pmd_free_tlb(struct mmu_gather *, pmd_t *);
53:	void ___pte_free_tlb(struct mmu_gather *, struct page *);
77:	void ___pud_free_tlb(struct mmu_gather *, pud_t *);
632:	void __native_set_fixmap(pte_t, enum fixed_addresses);
653:	void native_set_fixmap(unsigned int, phys_addr_t, pgprot_t);
679:	int p4d_clear_huge(p4d_t *);
669:	int p4d_set_huge(p4d_t *, phys_addr_t, pgprot_t);
424:	pgd_t *pgd_alloc(struct mm_struct *);
471:	void pgd_free(struct mm_struct *, pgd_t *);
118:	struct mm_struct *pgd_page_get_mm(struct page *);
773:	int pmd_clear_huge(pmd_t *);
839:	int pmd_free_pte_page(pmd_t *, unsigned long);
730:	int pmd_set_huge(pmd_t *, phys_addr_t, pgprot_t);
598:	int pmdp_clear_flush_young(struct vm_area_struct *, unsigned long, pmd_t *);
499:	int pmdp_set_access_flags(struct vm_area_struct *, unsigned long, pmd_t *, pmd_t, int);
554:	int pmdp_test_and_clear_young(struct vm_area_struct *, unsigned long, pmd_t *);
31:	pgtable_t pte_alloc_one(struct mm_struct *);
578:	int ptep_clear_flush_young(struct vm_area_struct *, unsigned long, pte_t *);
486:	int ptep_set_access_flags(struct vm_area_struct *, unsigned long, pte_t *, pte_t, int);
541:	int ptep_test_and_clear_young(struct vm_area_struct *, unsigned long, pte_t *);
758:	int pud_clear_huge(pud_t *);
794:	int pud_free_pmd_page(pud_t *, unsigned long);
703:	int pud_set_huge(pud_t *, phys_addr_t, pgprot_t);
520:	int pudp_set_access_flags(struct vm_area_struct *, unsigned long, pud_t *, pud_t, int);
565:	int pudp_test_and_clear_young(struct vm_area_struct *, unsigned long, pud_t *);
620:	void reserve_top_address(unsigned long);
213:	static void free_pmds(struct mm_struct *, pmd_t **, int);
123:	static void pgd_ctor(struct mm_struct *, pgd_t *);
143:	static void pgd_dtor(pgd_t *);
225:	static int preallocate_pmds(struct mm_struct *, pmd_t **, int);
36:	static int setup_userpte(char *);

File arch/x86/mm/physaddr.c:
47:	bool __virt_addr_valid(unsigned long);

File arch/x86/mm/pkeys.c:
77:	int __arch_override_mprotect_pkey(struct vm_area_struct *, int, int);
15:	int __execute_only_pkey(struct mm_struct *);
134:	void copy_init_pkru_to_fpregs(void);
193:	static int create_init_pkru_value(void);
144:	static ssize_t init_pkru_read_file(struct file *, char *, size_t, loff_t *);
154:	static ssize_t init_pkru_write_file(struct file *, const char *, size_t, loff_t *);
201:	static int setup_init_pkru(char *);

File arch/x86/mm/pti.c:
124:	pgd_t __pti_set_user_pgtbl(pgd_t *, pgd_t);
78:	void pti_check_boottime_disable(void);
655:	void pti_finalize(void);
609:	void pti_init(void);
554:	static void pti_clone_kernel_text(void);
417:	static void pti_clone_p4d(unsigned long);
303:	static void pti_clone_pgtable(unsigned long, unsigned long, enum pti_clone_level);
435:	static void pti_clone_user_shared(void);
60:	static void pti_print_if_insecure(const char *);
277:	static void pti_setup_vsyscall(void);
171:	static p4d_t *pti_user_pagetable_walk_p4d(unsigned long);
199:	static pmd_t *pti_user_pagetable_walk_pmd(unsigned long);
244:	static pte_t *pti_user_pagetable_walk_pte(unsigned long);

File arch/x86/mm/setup_nx.c:
34:	void x86_configure_nx(void);
42:	void x86_report_nx(void);
20:	static int noexec_setup(char *);

File arch/x86/mm/srat.c:
67:	void acpi_numa_processor_affinity_init(struct acpi_srat_cpu_affinity *);
28:	void acpi_numa_x2apic_affinity_init(struct acpi_srat_x2apic_cpu_affinity *);
106:	int x86_acpi_numa_init(void);

File arch/x86/mm/tlb.c:
1141:	void __flush_tlb_all(void);
1009:	unsigned long __get_current_cr3_fast(void);
1160:	void arch_tlbbatch_flush(struct arch_tlbflush_unmap_batch *);
413:	void cr4_update_pce(void *);
597:	void enter_lazy_tlb(struct mm_struct *, struct task_struct *);
967:	void flush_tlb_all(void);
983:	void flush_tlb_kernel_range(unsigned long, unsigned long);
1133:	void flush_tlb_local(void);
919:	void flush_tlb_mm_range(struct mm_struct *, unsigned long, unsigned long, unsigned int, bool);
859:	void flush_tlb_multi(const struct cpumask *, const struct flush_tlb_info *);
1025:	void flush_tlb_one_kernel(unsigned long);
1076:	void flush_tlb_one_user(unsigned long);
618:	void initialize_tlbstate_and_flush(void);
287:	void leave_mm(int);
1084:	void native_flush_tlb_global(void);
1118:	void native_flush_tlb_local(void);
802:	void native_flush_tlb_multi(const struct cpumask *, const struct flush_tlb_info *);
1057:	void native_flush_tlb_one_user(unsigned long);
1194:	bool nmi_uaccess_okay(void);
309:	void switch_mm(struct mm_struct *, struct mm_struct *, struct task_struct *);
422:	void switch_mm_irqs_off(struct mm_struct *, struct mm_struct *, struct task_struct *);
205:	static void choose_new_asid(struct mm_struct *, u64, u16 *, bool *);
176:	static void clear_asid_other(void);
327:	static void cond_ibpb(struct task_struct *);
1257:	static int create_tlb_single_page_flush_ceiling(void);
961:	static void do_flush_tlb_all(void *);
973:	static void do_kernel_range_flush(void *);
657:	static void flush_tlb_func(void *);
268:	static void load_new_mm_cr3(pgd_t *, u16, bool);
1219:	static ssize_t tlbflush_read_file(struct file *, char *, size_t, loff_t *);
1229:	static ssize_t tlbflush_write_file(struct file *, const char *, size_t, loff_t *);

File arch/x86/net/bpf_jit_comp.c:
2024:	int arch_prepare_bpf_dispatcher(void *, s64 *, int);
1780:	int arch_prepare_bpf_trampoline(struct bpf_tramp_image *, void *, void *, const struct btf_func_model *, u32, struct bpf_tramp_progs *, void *);
364:	int bpf_arch_text_poke(void *, enum bpf_text_poke_type, void *, void *);
2040:	struct bpf_prog *bpf_int_jit_compile(struct bpf_prog *);
317:	static int __bpf_arch_text_poke(void *, enum bpf_text_poke_type, void *, void *, const bool);
558:	static void bpf_tail_call_direct_fixup(struct bpf_prog *);
2012:	static int cmp_ips(const void *, const void *);
776:	static void detect_reg_usage(struct bpf_insn *, int, bool *, bool *);
795:	static int do_jit(struct bpf_prog *, int *, u8 *, int, struct jit_context *);
1942:	static int emit_bpf_dispatcher(u8 **, int, int, s64 *);
495:	static void emit_bpf_tail_call_direct(struct bpf_jit_poke_descriptor *, u8 **, int, u8 *, bool *, u32);
405:	static void emit_bpf_tail_call_indirect(u8 **, bool *, u32);
688:	static void emit_ldx(u8 **, u32, u32, u32, int);
604:	static void emit_mov_imm32(u8 **, bool, u32, const u32);
645:	static void emit_mov_imm64(u8 **, u32, const u32, const u32);
669:	static void emit_mov_reg(u8 **, bool, u32, u32);
727:	static void emit_stx(u8 **, u32, u32, u32, int);
764:	static bool ex_handler_bpf(const struct exception_table_entry *, struct pt_regs *, int, unsigned long, unsigned long);
1667:	static int invoke_bpf_mod_ret(u8 **, struct bpf_tramp_progs *, int, u8 **, const struct btf_func_model *);
1549:	static int invoke_bpf_prog(u8 **, struct bpf_prog *, int, bool, const struct btf_func_model *);
208:	static void jit_fill_hole(void *, unsigned int);
243:	static void pop_callee_regs(u8 **, bool *);
1532:	static void restore_regs(const struct btf_func_model *, u8 **, int, int);

File arch/x86/pci/acpi.c:
141:	void pci_acpi_crs_quirks(void);
400:	int pci_acpi_init(void);
326:	struct pci_bus *pci_acpi_scan_root(struct acpi_pci_root *);
385:	int pcibios_root_bridge_prepare(struct pci_host_bridge *);
166:	static int check_segment(u16, struct device *, char *);
263:	static int pci_acpi_root_init_info(struct acpi_pci_root_info *);
294:	static int pci_acpi_root_prepare_resources(struct acpi_pci_root_info *);
268:	static void pci_acpi_root_release_info(struct acpi_pci_root_info *);
37:	static int set_ignore_seg(const struct dmi_system_id *);
31:	static int set_nouse_crs(const struct dmi_system_id *);
25:	static int set_use_crs(const struct dmi_system_id *);
189:	static int setup_mcfg_map(struct acpi_pci_root_info *);

File arch/x86/pci/amd_bus.c:
332:	static int amd_bus_cpu_online(unsigned int);
392:	static int amd_postcore_init(void);
60:	static int early_root_info_init(void);
42:	static struct pci_root_info *find_pci_root_info(int, int);
344:	static void pci_enable_pci_io_ecs(void);

File arch/x86/pci/bus_numa.c:
70:	struct pci_root_info *alloc_pci_root_info(int, int, int, int);
95:	void update_res(struct pci_root_info *, resource_size_t, resource_size_t, unsigned long, int);
21:	int x86_pci_root_bus_node(int);
31:	void x86_pci_root_bus_resources(int, struct list_head *);

File arch/x86/pci/common.c:
453:	void dmi_check_pciprobe(void);
122:	void dmi_check_skip_isa_align(void);
710:	int pci_ext_cfg_avail(void);
719:	struct pci_dev *pci_real_dma_dev(struct pci_dev *);
173:	void pcibios_add_bus(struct pci_bus *);
635:	int pcibios_add_device(struct pci_dev *);
624:	unsigned int pcibios_assign_all_busses(void);
695:	void pcibios_disable_device(struct pci_dev *);
683:	int pcibios_enable_device(struct pci_dev *, int);
164:	void pcibios_fixup_bus(struct pci_bus *);
501:	int pcibios_init(void);
702:	void pcibios_release_device(struct pci_dev *);
178:	void pcibios_remove_bus(struct pci_bus *);
458:	void pcibios_scan_root(int);
481:	void pcibios_set_cache_line_size(void);
516:	char *pcibios_setup(char *);
40:	int raw_pci_read(unsigned int, unsigned int, unsigned int, int, int, u32 *);
50:	int raw_pci_write(unsigned int, unsigned int, unsigned int, int, int, u32);
83:	static int can_skip_ioresource_align(const struct dmi_system_id *);
208:	static int find_sort_method(const struct dmi_system_id *);
60:	static int pci_read(struct pci_bus *, unsigned int, int, int, u32 *);
66:	static int pci_write(struct pci_bus *, unsigned int, int, int, u32);
197:	static void read_dmi_type_b1(const struct dmi_header *, void *);
188:	static int set_bf_sort(const struct dmi_system_id *);
227:	static int set_scan_all(const struct dmi_system_id *);

File arch/x86/pci/direct.c:
263:	void pci_direct_init(int);
283:	int pci_direct_probe(void);
21:	static int pci_conf1_read(unsigned int, unsigned int, unsigned int, int, int, u32 *);
52:	static int pci_conf1_write(unsigned int, unsigned int, unsigned int, int, int, u32);
95:	static int pci_conf2_read(unsigned int, unsigned int, unsigned int, int, int, u32 *);
137:	static int pci_conf2_write(unsigned int, unsigned int, unsigned int, int, int, u32);
195:	static int pci_sanity_check(const struct pci_raw_ops *);

File arch/x86/pci/early.c:
54:	int early_pci_allowed(void);
11:	u32 read_pci_config(u8, u8, u8, u8);
27:	u16 read_pci_config_16(u8, u8, u8, u8);
19:	u8 read_pci_config_byte(u8, u8, u8, u8);
35:	void write_pci_config(u8, u8, u8, u8, u32);
48:	void write_pci_config_16(u8, u8, u8, u8, u16);
42:	void write_pci_config_byte(u8, u8, u8, u8, u8);

File arch/x86/pci/fixup.c:
692:	static void pci_amd_enable_64bit_bar(struct pci_dev *);
474:	static void pci_early_fixup_cyrix_5530(struct pci_dev *);
587:	static void pci_fixup_amd_ehci_pme(struct pci_dev *);
599:	static void pci_fixup_amd_fch_xhci_pme(struct pci_dev *);
38:	static void pci_fixup_i450gx(struct pci_dev *);
13:	static void pci_fixup_i450nx(struct pci_dev *);
66:	static void pci_fixup_latency(struct pci_dev *);
381:	static void pci_fixup_msi_k8t_onboard_sound(struct pci_dev *);
174:	static void pci_fixup_nforce2(struct pci_dev *);
78:	static void pci_fixup_piix4_acpi(struct pci_dev *);
154:	static void pci_fixup_transparent_bridge(struct pci_dev *);
52:	static void pci_fixup_umc_ide(struct pci_dev *);
107:	static void pci_fixup_via_northbridge_bug(struct pci_dev *);
311:	static void pci_fixup_video(struct pci_dev *);
567:	static void pci_invalid_bar(struct pci_dev *);
453:	static void pci_post_fixup_toshiba_ohci1394(struct pci_dev *);
442:	static void pci_pre_fixup_toshiba_ohci1394(struct pci_dev *);
491:	static void pci_siemens_interrupt_controller(struct pci_dev *);
241:	static void pcie_rootport_aspm_quirk(struct pci_dev *);
619:	static void quirk_apple_mbp_poweroff(struct pci_dev *);
653:	static void quirk_intel_th_dnv(struct pci_dev *);
644:	static void quirk_no_aersid(struct pci_dev *);
205:	static int quirk_pcie_aspm_read(struct pci_bus *, unsigned int, int, int, u32 *);
215:	static int quirk_pcie_aspm_write(struct pci_bus *, unsigned int, int, int, u32);
798:	static void rs690_fix_64bit_dma(struct pci_dev *);
502:	static void sb600_disable_hpet_bar(struct pci_dev *);
527:	static void sb600_hpet_quirk(struct pci_dev *);
547:	static void twinhead_reserve_killing_zone(struct pci_dev *);

File arch/x86/pci/i386.c:
155:	resource_size_t pcibios_align_resource(void *, const struct resource *, resource_size_t, resource_size_t);
388:	void pcibios_resource_survey(void);
375:	void pcibios_resource_survey_bus(struct pci_bus *);
99:	resource_size_t pcibios_retrieve_fw_addr(struct pci_dev *, int);
233:	static void pcibios_allocate_bus_resources(struct pci_bus *);
249:	static void pcibios_allocate_dev_resources(struct pci_dev *, int);
307:	static void pcibios_allocate_resources(struct pci_bus *, int);
341:	static void pcibios_allocate_rom_resources(struct pci_bus *);
355:	static int pcibios_assign_resources(void);
72:	static void pcibios_save_fw_addr(struct pci_dev *, int, resource_size_t);

File arch/x86/pci/init.c:
10:	static int pci_arch_init(void);

File arch/x86/pci/irq.c:
153:	void elcr_set_level_irq(unsigned int);
1268:	bool mp_should_keep_irq(struct device *);
1026:	void pcibios_fixup_irqs(void);
1120:	void pcibios_irq_init(void);
1187:	void pcibios_penalize_isa_irq(int, int);
745:	static int ali_router_probe(struct irq_router *, struct pci_dev *, u16);
758:	static int amd_router_probe(struct irq_router *, struct pci_dev *, u16);
709:	static int cyrix_router_probe(struct irq_router *, struct pci_dev *, u16);
1087:	static int fix_acer_tm360_irqrouting(const struct dmi_system_id *);
1073:	static int fix_broken_hp_bios_irq9(const struct dmi_system_id *);
539:	static int intel_router_probe(struct irq_router *, struct pci_dev *, u16);
733:	static int ite_router_probe(struct irq_router *, struct pci_dev *, u16);
721:	static int opti_router_probe(struct irq_router *, struct pci_dev *, u16);
881:	static int pcibios_lookup_irq(struct pci_dev *, int);
778:	static int pico_router_probe(struct irq_router *, struct pci_dev *, u16);
201:	static int pirq_ali_get(struct pci_dev *, struct pci_dev *, int);
209:	static int pirq_ali_set(struct pci_dev *, struct pci_dev *, int, int);
486:	static int pirq_amd756_get(struct pci_dev *, struct pci_dev *, int);
498:	static int pirq_amd756_set(struct pci_dev *, struct pci_dev *, int, int);
320:	static int pirq_cyrix_get(struct pci_dev *, struct pci_dev *, int);
325:	static int pirq_cyrix_set(struct pci_dev *, struct pci_dev *, int, int);
1280:	static void pirq_disable_irq(struct pci_dev *);
1197:	static int pirq_enable_irq(struct pci_dev *);
820:	static void pirq_find_router(struct irq_router *);
94:	static struct irq_routing_table *pirq_find_routing_table(void);
867:	static struct irq_info *pirq_get_info(struct pci_dev *);
283:	static int pirq_ite_get(struct pci_dev *, struct pci_dev *, int);
291:	static int pirq_ite_set(struct pci_dev *, struct pci_dev *, int, int);
304:	static int pirq_opti_get(struct pci_dev *, struct pci_dev *, int);
309:	static int pirq_opti_set(struct pci_dev *, struct pci_dev *, int, int);
119:	static void pirq_peer_trick(void);
511:	static int pirq_pico_get(struct pci_dev *, struct pci_dev *, int);
517:	static int pirq_pico_set(struct pci_dev *, struct pci_dev *, int, int);
226:	static int pirq_piix_get(struct pci_dev *, struct pci_dev *, int);
234:	static int pirq_piix_set(struct pci_dev *, struct pci_dev *, int, int);
464:	static int pirq_serverworks_get(struct pci_dev *, struct pci_dev *, int);
470:	static int pirq_serverworks_set(struct pci_dev *, struct pci_dev *, int, int);
396:	static int pirq_sis_get(struct pci_dev *, struct pci_dev *, int);
408:	static int pirq_sis_set(struct pci_dev *, struct pci_dev *, int, int);
261:	static int pirq_via586_get(struct pci_dev *, struct pci_dev *, int);
269:	static int pirq_via586_set(struct pci_dev *, struct pci_dev *, int, int);
245:	static int pirq_via_get(struct pci_dev *, struct pci_dev *, int);
250:	static int pirq_via_set(struct pci_dev *, struct pci_dev *, int, int);
432:	static int pirq_vlsi_get(struct pci_dev *, struct pci_dev *, int);
442:	static int pirq_vlsi_set(struct pci_dev *, struct pci_dev *, int, int);
684:	static int serverworks_router_probe(struct irq_router *, struct pci_dev *, u16);
698:	static int sis_router_probe(struct irq_router *, struct pci_dev *, u16);
616:	static int via_router_probe(struct irq_router *, struct pci_dev *, u16);
671:	static int vlsi_router_probe(struct irq_router *, struct pci_dev *, u16);
185:	static void write_config_nybble(struct pci_dev *, unsigned int, unsigned int, unsigned int);

File arch/x86/pci/legacy.c:
27:	int pci_legacy_init(void);
37:	void pcibios_scan_specific_bus(int);
58:	static int pci_subsys_init(void);

File arch/x86/pci/mmconfig-shared.c:
662:	void pci_mmcfg_early_init(void);
675:	void pci_mmcfg_late_init(void);
98:	struct pci_mmcfg_region *pci_mmconfig_add(int, int, int, u64);
795:	int pci_mmconfig_delete(u16, u8, u8);
721:	int pci_mmconfig_insert(struct device *, u16, u8, u8, phys_addr_t);
118:	struct pci_mmcfg_region *pci_mmconfig_lookup(int, int);
636:	static void __pci_mmcfg_init(int);
378:	static acpi_status check_mcfg_resource(struct acpi_resource *, void *);
414:	static acpi_status find_mboard_resource(acpi_handle, u32, void *, void **);
44:	static void free_all_mmcfg(void);
428:	static bool is_acpi_reserved(u64, u64, unsigned int);
447:	static bool is_mmconf_reserved(check_reserved_t, struct pci_mmcfg_region *, struct device *, int);
53:	static void list_add_sorted(struct pci_mmcfg_region *);
189:	static const char *pci_mmcfg_amd_fam10h(void);
343:	static int pci_mmcfg_check_hostbridge(void);
500:	static bool pci_mmcfg_check_reserved(struct device *, struct pci_mmcfg_region *, int);
130:	static const char *pci_mmcfg_e7520(void);
614:	static int pci_mmcfg_for_each_region(int (*)(__u64, __u64, void *), void *);
145:	static const char *pci_mmcfg_intel_945(void);
691:	static int pci_mmcfg_late_insert_resources(void);
240:	static const char *pci_mmcfg_nvidia_mcp55(void);
69:	static struct pci_mmcfg_region *pci_mmconfig_alloc(int, int, int, u64);
566:	static int pci_parse_mcfg(struct acpi_table_header *);

File arch/x86/pci/mmconfig_64.c:
129:	void pci_mmcfg_arch_free(void);
114:	int pci_mmcfg_arch_init(void);
137:	int pci_mmcfg_arch_map(struct pci_mmcfg_region *);
148:	void pci_mmcfg_arch_unmap(struct pci_mmcfg_region *);
28:	static int pci_mmcfg_read(unsigned int, unsigned int, unsigned int, int, int, u32 *);
62:	static int pci_mmcfg_write(unsigned int, unsigned int, unsigned int, int, int, u32);

File arch/x86/pci/xen.c:
538:	int pci_xen_hvm_init(void);
499:	int pci_xen_init(void);
106:	static int acpi_register_gsi_xen_hvm(struct device *, u32, int, int);
454:	static struct irq_domain *xen_create_pci_msi_domain(void);
519:	static void xen_hvm_msi_init(void);
232:	static int xen_hvm_setup_msi_irqs(struct pci_dev *, int, int);
412:	static int xen_msi_domain_alloc_irqs(struct irq_domain *, struct device *, int);
428:	static void xen_msi_domain_free_irqs(struct irq_domain *, struct device *);
32:	static int xen_pcifront_enable_irq(struct pci_dev *);
400:	static void xen_pv_teardown_msi_irqs(struct pci_dev *);
167:	static int xen_setup_msi_irqs(struct pci_dev *, int, int);
469:	static void xen_setup_pci_msi(void);
387:	static void xen_teardown_msi_irqs(struct pci_dev *);

File arch/x86/platform/efi/efi.c:
907:	umode_t efi_attr_is_visible(struct kobject *, struct attribute *, int);
854:	void efi_enter_virtual_mode(void);
108:	void efi_find_mirror(void);
444:	void efi_init(void);
869:	bool efi_is_table_address(unsigned long);
215:	int efi_memblock_x86_reserve_range(void);
326:	void efi_print_memmap(void);
883:	char *efi_systab_show_arch(char *);
777:	static void __efi_enter_virtual_mode(void);
901:	static ssize_t config_table_show(struct kobject *, struct kobj_attribute *, char *);
138:	static void do_add_efi_memmap(void);
294:	static void efi_clean_memmap(void);
670:	static void *efi_map_regions(int *, int *);
260:	static bool efi_memmap_entry_valid(const efi_memory_desc_t *, int);
502:	static void efi_merge_regions(void);
342:	static int efi_systab_init(unsigned long);
899:	static ssize_t fw_vendor_show(struct kobject *, struct kobj_attribute *, char *);
706:	static void kexec_enter_virtual_mode(void);
900:	static ssize_t runtime_show(struct kobject *, struct kobj_attribute *, char *);
101:	static int setup_add_efi_memmap(char *);

File arch/x86/platform/efi/efi_64.c:
71:	int efi_alloc_page_tables(void);
451:	void efi_dump_pagetable(void);
299:	void efi_map_region(efi_memory_desc_t *);
352:	void efi_map_region_fixed(efi_memory_desc_t *);
402:	void efi_runtime_update_mappings(void);
817:	efi_status_t efi_set_virtual_address_map(unsigned long, unsigned long, u32, efi_memory_desc_t *, unsigned long);
180:	int efi_setup_page_tables(unsigned long, unsigned int);
465:	void efi_switch_mm(struct mm_struct *);
110:	void efi_sync_low_kernel_mappings(void);
795:	void efi_thunk_runtime_setup(void);
358:	void parse_efi_setup(u64, u32);
265:	static void __map_region(efi_memory_desc_t *, u64);
665:	static efi_status_t efi_thunk_get_next_variable(unsigned long *, efi_char16_t *, efi_guid_t *);
544:	static efi_status_t efi_thunk_get_time(efi_time_t *, efi_time_cap_t *);
573:	static efi_status_t efi_thunk_get_variable(efi_char16_t *, efi_guid_t *, u32 *, unsigned long *, void *);
555:	static efi_status_t efi_thunk_get_wakeup_time(efi_bool_t *, efi_bool_t *, efi_time_t *);
783:	static efi_status_t efi_thunk_query_capsule_caps(efi_capsule_header_t **, unsigned long, u64 *, int *);
730:	static efi_status_t efi_thunk_query_variable_info(u32, u64 *, u64 *, u64 *);
756:	static efi_status_t efi_thunk_query_variable_info_nonblocking(u32, u64 *, u64 *, u64 *);
702:	static void efi_thunk_reset_system(int, efi_status_t, unsigned long, efi_char16_t *);
549:	static efi_status_t efi_thunk_set_time(efi_time_t *);
605:	static efi_status_t efi_thunk_set_variable(efi_char16_t *, efi_guid_t *, u32, unsigned long, void *);
634:	static efi_status_t efi_thunk_set_variable_nonblocking(efi_char16_t *, efi_guid_t *, u32, unsigned long, void *);
522:	static efi_status_t efi_thunk_set_virtual_address_map(unsigned long, unsigned long, u32, efi_memory_desc_t *);
562:	static efi_status_t efi_thunk_set_wakeup_time(efi_bool_t, efi_time_t *);
718:	static efi_status_t efi_thunk_update_capsule(efi_capsule_header_t **, unsigned long, unsigned long);
363:	static int efi_update_mappings(efi_memory_desc_t *, unsigned long);
386:	static int efi_update_mem_attr(struct mm_struct *, efi_memory_desc_t *);

File arch/x86/platform/efi/quirks.c:
554:	void efi_apply_memmap_quirks(void);
245:	void efi_arch_mem_reserve(phys_addr_t, u64);
108:	void efi_delete_dummy_variable(void);
399:	void efi_free_boot_services(void);
584:	bool efi_poweroff_required(void);
151:	efi_status_t efi_query_variable_store(u32, unsigned long, bool);
575:	bool efi_reboot_required(void);
691:	void efi_recover_from_page_fault(unsigned long);
316:	void efi_reserve_boot_services(void);
504:	int efi_reuse_config(u64, int);
98:	static int setup_storage_paranoia(char *);

File arch/x86/platform/intel/iosf_mbi.c:
438:	void iosf_mbi_assert_punit_acquired(void);
182:	bool iosf_mbi_available(void);
312:	int iosf_mbi_block_punit_i2c_access(void);
143:	int iosf_mbi_modify(u8, u8, u32, u32, u32);
214:	void iosf_mbi_punit_acquire(void);
233:	void iosf_mbi_punit_release(void);
97:	int iosf_mbi_read(u8, u8, u32, u32 *);
401:	int iosf_mbi_register_pmic_bus_access_notifier(struct notifier_block *);
382:	void iosf_mbi_unblock_punit_i2c_access(void);
425:	int iosf_mbi_unregister_pmic_bus_access_notifier(struct notifier_block *);
415:	int iosf_mbi_unregister_pmic_bus_access_notifier_unlocked(struct notifier_block *);
120:	int iosf_mbi_write(u8, u8, u32, u32);
555:	static void iosf_mbi_exit(void);
546:	static int iosf_mbi_init(void);
39:	static int iosf_mbi_pci_read_mdr(u32, u32, u32 *);
68:	static int iosf_mbi_pci_write_mdr(u32, u32, u32);
514:	static int iosf_mbi_probe(struct pci_dev *, const struct pci_device_id *);
262:	static void iosf_mbi_reset_semaphore(void);

File arch/x86/platform/sfi/sfi.c:
90:	int sfi_platform_init(void);
38:	static int sfi_parse_cpus(struct sfi_table_header *);
61:	static int sfi_parse_ioapic(struct sfi_table_header *);

File arch/x86/platform/uv/bios_uv.c:
174:	unsigned long get_uv_systab_phys(bool);
135:	s64 uv_bios_change_memprotect(u64, u64, enum uv_memprotect);
150:	s64 uv_bios_freq_base(u64, u64 *);
80:	s64 uv_bios_get_sn_info(int, int *, long *, long *, long *, long *);
185:	int uv_bios_init(void);
107:	int uv_bios_mq_watchlist_alloc(unsigned long, unsigned int, unsigned long *);
127:	int uv_bios_mq_watchlist_free(int, int);
143:	s64 uv_bios_reserved_page_pa(u64, u64 *, u64 *, u64 *);
168:	int uv_bios_set_legacy_vga_target(bool, int, int);
23:	static s64 __uv_bios_call(enum uv_bios_cmd, u64, u64, u64, u64, u64);

File arch/x86/platform/uv/uv_irq.c:
185:	int uv_setup_irq(char *, int, int, unsigned long, int);
213:	void uv_teardown_irq(unsigned int);
125:	static int uv_domain_activate(struct irq_domain *, struct irq_data *, bool);
75:	static int uv_domain_alloc(struct irq_domain *, unsigned int, unsigned int, void *);
136:	static void uv_domain_deactivate(struct irq_domain *, struct irq_data *);
109:	static void uv_domain_free(struct irq_domain *, unsigned int, unsigned int);
48:	static void uv_noop(struct irq_data *);
27:	static void uv_program_mmr(struct uv_irq_2_mmr_pnode *, struct irq_cfg *, struct uv_irq_2_mmr_pnode *, struct irq_cfg *);
51:	static int uv_set_irq_affinity(struct irq_data *, const struct cpumask *, bool);

File arch/x86/platform/uv/uv_nmi.c:
1032:	void uv_nmi_init(void);
1071:	void uv_nmi_setup(void);
1080:	void uv_nmi_setup_hubless(void);
193:	static int param_get_action(char *, const struct kernel_param *);
110:	static int param_get_local64(char *, const struct kernel_param *);
198:	static int param_set_action(const char *, const struct kernel_param *);
115:	static int param_set_local64(const char *, const struct kernel_param *);
511:	static int uv_check_nmi(struct uv_hub_nmi_s *);
937:	static int uv_handle_nmi(unsigned int, struct pt_regs *);
1006:	static int uv_handle_nmi_ping(unsigned int, struct pt_regs *);
312:	static void uv_init_hubless_pch_io(int, int, int);
604:	static void uv_nmi_cleanup_mask(void);
723:	static void uv_nmi_dump_state_cpu(int, struct pt_regs *);
1045:	static void uv_nmi_setup_common(bool);
242:	static void uv_nmi_setup_mmrs(void);
763:	static void uv_nmi_sync_exit(int);
668:	static void uv_nmi_wait(int);
616:	static int uv_nmi_wait_cpus(int);
1023:	static void uv_register_nmi_notifier(void);
496:	static int uv_set_in_nmi(int, struct uv_hub_nmi_s *);

File arch/x86/platform/uv/uv_sysfs.c:
21:	static ssize_t coherence_id_show(struct kobject *, struct kobj_attribute *, char *);
15:	static ssize_t partition_id_show(struct kobject *, struct kobj_attribute *, char *);
34:	static int sgi_uv_sysfs_init(void);

File arch/x86/platform/uv/uv_time.c:
324:	static int uv_enable_evt_rtc(char *);
86:	static int uv_intr_pending(int);
276:	static u64 uv_read_rtc(struct clocksource *);
135:	static int uv_rtc_allocate_timers(void);
124:	static void uv_rtc_deallocate_timers(void);
171:	static void uv_rtc_find_next_timer(struct uv_rtc_timer_head *, int);
310:	static void uv_rtc_interrupt(void);
291:	static int uv_rtc_next_event(unsigned long, struct clock_event_device *);
332:	static void uv_rtc_register_clockevents(struct work_struct *);
71:	static void uv_rtc_send_IPI(int);
201:	static int uv_rtc_set_timer(int, u64);
341:	static int uv_rtc_setup_clock(void);
302:	static int uv_rtc_shutdown(struct clock_event_device *);
237:	static int uv_rtc_unset_timer(int, int);
93:	static int uv_setup_intr(int, u64);

File arch/x86/power/cpu.c:
291:	int hibernate_resume_nonboot_cpu_disable(void);
275:	void restore_processor_state(void);
132:	void save_processor_state(void);
194:	static void __restore_processor_state(struct saved_context *);
75:	static void __save_processor_state(struct saved_context *);
337:	static int bsp_pm_callback(struct notifier_block *, unsigned long, void *);
390:	static int bsp_pm_check_init(void);
149:	static void fix_processor_context(void);
403:	static int msr_build_context(const u32 *, const int);
450:	static int msr_initialize_bdw(const struct dmi_system_id *);
37:	static void msr_save_context(struct saved_context *);
471:	static int msr_save_cpuid_features(const struct x86_cpu_id *);
506:	static int pm_check_save_msr(void);
284:	static void resume_play_dead(void);

File arch/x86/power/hibernate.c:
129:	int arch_hibernation_header_restore(void *);
91:	int arch_hibernation_header_save(void *, unsigned int);
189:	int arch_resume_nosmt(void);
46:	int pfn_is_nosave(unsigned long);
150:	int relocate_restore_code(void);

File arch/x86/power/hibernate_64.c:
127:	int swsusp_arch_resume(void);
87:	static void *alloc_pgt_page(void *);
92:	static int set_up_temporary_mappings(void);
28:	static int set_up_temporary_text_mapping(pgd_t *);

File arch/x86/realmode/init.c:
20:	void reserve_real_mode(void);
175:	static int init_real_mode(void);
61:	static void setup_real_mode(void);

File arch/x86/video/fbdev.c:
14:	int fb_is_primary_device(struct fb_info *);

File arch/x86/xen/efi.c:
149:	void xen_efi_init(struct boot_params *);

File arch/x86/xen/enlighten.c:
357:	void xen_arch_register_cpu(int);
363:	void xen_arch_unregister_cpu(int);
103:	int xen_cpuhp_setup(int (*)(unsigned int), int (*)(unsigned int));
273:	void xen_emergency_restart(void);
311:	int xen_panic_handler_init(void);
317:	void xen_pin_vcpu(int);
259:	void xen_reboot(int);
187:	void xen_vcpu_info_reset(int);
146:	void xen_vcpu_restore(void);
198:	int xen_vcpu_setup(int);
299:	static int parse_xen_legacy_crash(char *);
97:	static int xen_cpu_up_online(unsigned int);
279:	static int xen_panic_event(struct notifier_block *, unsigned long, void *);

File arch/x86/xen/enlighten_hvm.c:
123:	void sysvec_xen_hvm_callback(struct pt_regs *);
32:	void xen_hvm_init_shared_info(void);
245:	bool xen_hvm_need_lapic(void);
123:	static void __sysvec_xen_hvm_callback(struct pt_regs *);
87:	static void init_hvm_pv_info(void);
181:	static int xen_cpu_dead_hvm(unsigned int);
149:	static int xen_cpu_up_prepare_hvm(unsigned int);
142:	static void xen_hvm_crash_shutdown(struct pt_regs *);
193:	static void xen_hvm_guest_init(void);
256:	static void xen_hvm_guest_late_init(void);
68:	static void xen_hvm_init_mem_mapping(void);
135:	static void xen_hvm_shutdown(void);
238:	static int xen_parse_no_vector_callback(char *);
228:	static int xen_parse_nopv(char *);
279:	static uint32_t xen_platform_hvm(void);

File arch/x86/xen/grant-table.c:
127:	int arch_gnttab_init(unsigned long, unsigned long);
31:	int arch_gnttab_map_shared(unsigned long *, unsigned long, unsigned long, void **);
53:	int arch_gnttab_map_status(uint64_t *, unsigned long, unsigned long, grant_status_t **);
75:	void arch_gnttab_unmap(void *, unsigned long);
102:	static int arch_gnttab_valloc(struct gnttab_vm_area *, unsigned int);
94:	static int gnttab_apply(pte_t *, unsigned long, void *);

File arch/x86/xen/mmu.c:
18:	xmaddr_t arbitrary_virt_to_machine(void *);
11:	unsigned long arbitrary_virt_to_mfn(void *);
42:	int xen_unmap_domain_gfn_range(struct vm_area_struct *, int, struct page **);

File arch/x86/xen/mmu_hvm.c:
73:	void xen_hvm_init_mmu_ops(void);
47:	static void xen_hvm_exit_mmap(struct mm_struct *);
21:	static int xen_oldmem_pfn_is_ram(unsigned long);

File arch/x86/xen/pci-swiotlb-xen.c:
29:	int pci_xen_swiotlb_detect(void);
59:	void pci_xen_swiotlb_init(void);
72:	int pci_xen_swiotlb_init_late(void);

File arch/x86/xen/platform-pci-unplug.c:
117:	bool xen_has_pv_and_legacy_disk_devices(void);
59:	bool xen_has_pv_devices(void);
105:	bool xen_has_pv_disk_devices(void);
133:	void xen_unplug_emulated_devices(void);
177:	static int parse_xen_emul_unplug(char *);

File arch/x86/xen/smp.c:
230:	void xen_send_IPI_all(int);
264:	void xen_send_IPI_allbutself(int);
221:	void xen_send_IPI_mask(const struct cpumask *, int);
246:	void xen_send_IPI_mask_allbutself(const struct cpumask *, int);
238:	void xen_send_IPI_self(int);
122:	void xen_smp_cpus_done(unsigned int);
33:	void xen_smp_intr_free(unsigned int);
62:	int xen_smp_intr_init(unsigned int);
168:	void xen_smp_send_call_function_ipi(const struct cpumask *);
183:	void xen_smp_send_call_function_single_ipi(int);
154:	void xen_smp_send_reschedule(int);
269:	static irqreturn_t xen_call_function_interrupt(int, void *);
25:	static irqreturn_t xen_reschedule_interrupt(int, void *);

File arch/x86/xen/smp_hvm.c:
69:	void xen_hvm_smp_init(void);
52:	static void xen_hvm_cpu_die(unsigned int);
11:	static void xen_hvm_smp_prepare_boot_cpu(void);
31:	static void xen_hvm_smp_prepare_cpus(unsigned int);

File arch/x86/xen/spinlock.c:
66:	void xen_init_lock_cpu(int);
125:	void xen_init_spinlocks(void);
94:	void xen_uninit_lock_cpu(int);
60:	static irqreturn_t dummy_handler(int, void *);
147:	static int xen_parse_nopvspin(char *);
23:	static void xen_qlock_kick(int);
37:	static void xen_qlock_wait(u8 *, u8);

File arch/x86/xen/suspend.c:
31:	void xen_arch_post_suspend(int);
23:	void xen_arch_pre_suspend(void);
66:	void xen_arch_resume(void);
76:	void xen_arch_suspend(void);
41:	static void xen_vcpu_notify_restore(void *);
53:	static void xen_vcpu_notify_suspend(void *);

File arch/x86/xen/suspend_hvm.c:
11:	void xen_hvm_post_suspend(int);

File arch/x86/xen/time.c:
557:	void xen_hvm_init_time_ops(void);
528:	void xen_init_time_ops(void);
410:	void xen_restore_time_memory_area(void);
390:	void xen_save_time_memory_area(void);
363:	void xen_setup_cpu_clockevents(void);
336:	void xen_setup_timer(int);
325:	void xen_teardown_timer(int);
368:	void xen_timer_resume(void);
584:	static int parse_xen_timer_slop(char *);
58:	static u64 xen_clocksource_get_cycles(struct clocksource *);
46:	static u64 xen_clocksource_read(void);
149:	static int xen_cs_enable(struct clocksource *);
79:	static void xen_get_wallclock(struct timespec64 *);
545:	static void xen_hvm_setup_cpu_clockevents(void);
68:	static void xen_read_wallclock(struct timespec64 *);
63:	static u64 xen_sched_clock(void);
84:	static int xen_set_wallclock(const struct timespec64 *);
441:	static void xen_setup_vsyscall_time_info(void);
482:	static void xen_time_init(void);
311:	static irqreturn_t xen_timer_interrupt(int, void *);
208:	static int xen_timerop_set_next_event(unsigned long, struct clock_event_device *);
200:	static int xen_timerop_shutdown(struct clock_event_device *);
37:	static unsigned long xen_tsc_khz(void);
264:	static int xen_vcpuop_set_next_event(unsigned long, struct clock_event_device *);
253:	static int xen_vcpuop_set_oneshot(struct clock_event_device *);
240:	static int xen_vcpuop_shutdown(struct clock_event_device *);

File block/badblocks.c:
433:	void ack_all_badblocks(struct badblocks *);
53:	int badblocks_check(struct badblocks *, sector_t, int, sector_t *, int *);
331:	int badblocks_clear(struct badblocks *, sector_t, int);
593:	void badblocks_exit(struct badblocks *);
575:	int badblocks_init(struct badblocks *, int);
163:	int badblocks_set(struct badblocks *, sector_t, int, int);
467:	ssize_t badblocks_show(struct badblocks *, char *, int);
517:	ssize_t badblocks_store(struct badblocks *, const char *, size_t, int);
581:	int devm_init_badblocks(struct device *, struct badblocks *);

File block/bfq-cgroup.c:
642:	void bfq_bfqq_move(struct bfq_data *, struct bfq_queue *, struct bfq_group *);
739:	void bfq_bic_update_cgroup(struct bfq_io_cq *, struct bio *);
1239:	struct bfq_group *bfq_create_group_hierarchy(struct bfq_data *, int);
949:	void bfq_end_wr_async(struct bfq_data *);
597:	struct bfq_group *bfq_find_set_group(struct bfq_data *, struct blkcg *);
424:	void bfq_init_entity(struct bfq_entity *, struct bfq_group *);
343:	void bfqg_and_blkg_put(struct bfq_group *);
261:	void bfqg_stats_update_completion(struct bfq_group *, u64, u64, unsigned int);
263:	void bfqg_stats_update_dequeue(struct bfq_group *);
257:	void bfqg_stats_update_io_add(struct bfq_group *, struct bfq_queue *, unsigned int);
259:	void bfqg_stats_update_io_remove(struct bfq_group *, unsigned int);
350:	void bfqg_stats_update_legacy_io(struct request_queue *, struct request *);
284:	struct blkcg_gq *bfqg_to_blkg(struct bfq_group *);
308:	struct bfq_group *bfqq_group(struct bfq_queue *);
707:	static struct bfq_group *__bfq_bic_change_cgroup(struct bfq_data *, struct bfq_io_cq *, struct blkcg *);
500:	static struct blkcg_policy_data *bfq_cpd_alloc(gfp_t);
518:	static void bfq_cpd_free(struct blkcg_policy_data *);
510:	static void bfq_cpd_init(struct blkcg_policy_data *);
1055:	static ssize_t bfq_io_set_device_weight(struct kernfs_open_file *, char *, size_t, loff_t);
1093:	static ssize_t bfq_io_set_weight(struct kernfs_open_file *, char *, size_t, loff_t);
1029:	static int bfq_io_set_weight_legacy(struct cgroup_subsys_state *, struct cftype *, u64);
985:	static int bfq_io_show_weight(struct seq_file *, void *);
961:	static int bfq_io_show_weight_legacy(struct seq_file *, void *);
523:	static struct blkg_policy_data *bfq_pd_alloc(gfp_t, struct request_queue *, struct blkcg *);
561:	static void bfq_pd_free(struct blkg_policy_data *);
542:	static void bfq_pd_init(struct blkg_policy_data *);
884:	static void bfq_pd_offline(struct blkg_policy_data *);
830:	static void bfq_reparent_leaf_entity(struct bfq_data *, struct bfq_entity *, int);
335:	static void bfqg_and_blkg_get(struct bfq_group *);
1120:	static u64 bfqg_prfill_rwstat_recursive(struct seq_file *, struct blkg_policy_data *, int);
975:	static u64 bfqg_prfill_weight_device(struct seq_file *, struct blkg_policy_data *, int);
1113:	static int bfqg_print_rwstat(struct seq_file *, void *);
1129:	static int bfqg_print_rwstat_recursive(struct seq_file *, void *);

File block/bfq-iosched.c:
796:	void __bfq_weights_tree_remove(struct bfq_data *, struct bfq_queue *, struct rb_root_cached *);
156:	int bfq_bfqq_IO_bound(const struct bfq_queue *);
150:	int bfq_bfqq_busy(const struct bfq_queue *);
158:	int bfq_bfqq_coop(const struct bfq_queue *);
3918:	void bfq_bfqq_expire(struct bfq_data *, struct bfq_queue *, bool, enum bfqq_expiration);
153:	int bfq_bfqq_fifo_expire(const struct bfq_queue *);
154:	int bfq_bfqq_has_short_ttime(const struct bfq_queue *);
161:	int bfq_bfqq_has_waker(const struct bfq_queue *);
157:	int bfq_bfqq_in_large_burst(const struct bfq_queue *);
149:	int bfq_bfqq_just_created(const struct bfq_queue *);
152:	int bfq_bfqq_non_blocking_wait_rq(const struct bfq_queue *);
160:	int bfq_bfqq_softrt_update(const struct bfq_queue *);
159:	int bfq_bfqq_split_coop(const struct bfq_queue *);
155:	int bfq_bfqq_sync(const struct bfq_queue *);
151:	int bfq_bfqq_wait_request(const struct bfq_queue *);
156:	void bfq_clear_bfqq_IO_bound(struct bfq_queue *);
150:	void bfq_clear_bfqq_busy(struct bfq_queue *);
158:	void bfq_clear_bfqq_coop(struct bfq_queue *);
153:	void bfq_clear_bfqq_fifo_expire(struct bfq_queue *);
154:	void bfq_clear_bfqq_has_short_ttime(struct bfq_queue *);
161:	void bfq_clear_bfqq_has_waker(struct bfq_queue *);
157:	void bfq_clear_bfqq_in_large_burst(struct bfq_queue *);
149:	void bfq_clear_bfqq_just_created(struct bfq_queue *);
152:	void bfq_clear_bfqq_non_blocking_wait_rq(struct bfq_queue *);
160:	void bfq_clear_bfqq_softrt_update(struct bfq_queue *);
159:	void bfq_clear_bfqq_split_coop(struct bfq_queue *);
155:	void bfq_clear_bfqq_sync(struct bfq_queue *);
151:	void bfq_clear_bfqq_wait_request(struct bfq_queue *);
2377:	void bfq_end_wr_async_queues(struct bfq_data *, struct bfq_group *);
156:	void bfq_mark_bfqq_IO_bound(struct bfq_queue *);
150:	void bfq_mark_bfqq_busy(struct bfq_queue *);
158:	void bfq_mark_bfqq_coop(struct bfq_queue *);
153:	void bfq_mark_bfqq_fifo_expire(struct bfq_queue *);
154:	void bfq_mark_bfqq_has_short_ttime(struct bfq_queue *);
161:	void bfq_mark_bfqq_has_waker(struct bfq_queue *);
157:	void bfq_mark_bfqq_in_large_burst(struct bfq_queue *);
149:	void bfq_mark_bfqq_just_created(struct bfq_queue *);
152:	void bfq_mark_bfqq_non_blocking_wait_rq(struct bfq_queue *);
160:	void bfq_mark_bfqq_softrt_update(struct bfq_queue *);
159:	void bfq_mark_bfqq_split_coop(struct bfq_queue *);
155:	void bfq_mark_bfqq_sync(struct bfq_queue *);
151:	void bfq_mark_bfqq_wait_request(struct bfq_queue *);
607:	void bfq_pos_tree_add_move(struct bfq_data *, struct bfq_queue *);
6294:	void bfq_put_async_queues(struct bfq_data *, struct bfq_group *);
4837:	void bfq_put_queue(struct bfq_queue *);
2730:	void bfq_release_process_ref(struct bfq_data *, struct bfq_queue *);
422:	void bfq_schedule_dispatch(struct bfq_data *);
722:	void bfq_weights_tree_add(struct bfq_data *, struct bfq_queue *, struct rb_root_cached *);
819:	void bfq_weights_tree_remove(struct bfq_data *, struct bfq_queue *);
374:	void bic_set_bfqq(struct bfq_io_cq *, struct bfq_queue *, bool);
379:	struct bfq_data *bic_to_bfqd(struct bfq_io_cq *);
369:	struct bfq_queue *bic_to_bfqq(struct bfq_io_cq *, bool);
3472:	static bool __bfq_bfqq_expire(struct bfq_data *, struct bfq_queue *, enum bfqq_expiration);
3540:	static void __bfq_bfqq_recalc_budget(struct bfq_data *, struct bfq_queue *, enum bfqq_expiration);
4665:	static struct request *__bfq_dispatch_request(struct blk_mq_hw_ctx *);
5419:	static bool __bfq_insert_request(struct bfq_data *, struct request *);
6272:	static void __bfq_put_async_bfqq(struct bfq_data *, struct bfq_queue **);
2899:	static void __bfq_set_in_service_queue(struct bfq_data *, struct bfq_queue *);
1864:	static void bfq_add_request(struct request *);
2823:	static bool bfq_allow_bio_merge(struct request_queue *, struct request *, struct bio *);
2964:	static void bfq_arm_slice_timer(struct bfq_data *);
677:	static bool bfq_asymmetric_scenario(struct bfq_data *, struct bfq_queue *);
6591:	static ssize_t bfq_back_seek_max_show(struct elevator_queue *, char *);
6638:	static ssize_t bfq_back_seek_max_store(struct elevator_queue *, const char *, size_t);
6592:	static ssize_t bfq_back_seek_penalty_show(struct elevator_queue *, char *);
6639:	static ssize_t bfq_back_seek_penalty_store(struct elevator_queue *, const char *, size_t);
4189:	static bool bfq_better_to_idle(struct bfq_queue *);
1650:	static void bfq_bfqq_handle_idle_busy_switch(struct bfq_data *, struct bfq_queue *, int, bool *, struct request *);
3732:	static bool bfq_bfqq_is_slow(struct bfq_data *, struct bfq_queue *, bool, unsigned long *, enum bfqq_expiration);
1011:	static void bfq_bfqq_resume_state(struct bfq_queue *, struct bfq_data *, struct bfq_io_cq *, bool);
2687:	static void bfq_bfqq_save_state(struct bfq_queue *);
2213:	static bool bfq_bio_merge(struct request_queue *, struct bio *, unsigned int);
871:	static struct request *bfq_check_fifo(struct bfq_queue *, struct request *);
4253:	static struct bfq_queue *bfq_choose_bfqq_for_injection(struct bfq_data *);
439:	static struct request *bfq_choose_req(struct bfq_data *, struct request *, struct request *, sector_t);
5618:	static void bfq_completed_request(struct bfq_queue *, struct bfq_data *);
6352:	static void bfq_depth_updated(struct blk_mq_hw_ctx *);
4805:	static struct request *bfq_dispatch_request(struct blk_mq_hw_ctx *);
4603:	static struct request *bfq_dispatch_rq_from_bfqq(struct bfq_data *, struct bfq_queue *);
2390:	static void bfq_end_wr(struct bfq_data *);
6851:	static void bfq_exit(void);
4936:	static void bfq_exit_bfqq(struct bfq_data *, struct bfq_queue *);
4969:	static void bfq_exit_icq(struct io_cq *);
6368:	static void bfq_exit_queue(struct elevator_queue *);
6590:	static ssize_t bfq_fifo_expire_async_show(struct elevator_queue *, char *);
6636:	static ssize_t bfq_fifo_expire_async_store(struct elevator_queue *, const char *, size_t);
6589:	static ssize_t bfq_fifo_expire_sync_show(struct elevator_queue *, char *);
6634:	static ssize_t bfq_fifo_expire_sync_store(struct elevator_queue *, const char *, size_t);
5910:	static void bfq_finish_requeue_request(struct request *);
5990:	static struct bfq_queue *bfq_get_bfqq_handle_split(struct bfq_data *, struct bfq_io_cq *, struct bio *, bool, bool, bool *);
5139:	static struct bfq_queue *bfq_get_queue(struct bfq_data *, struct bio *, bool, struct bfq_io_cq *);
1243:	static void bfq_handle_burst(struct bfq_data *, struct bfq_queue *);
4650:	static bool bfq_has_work(struct blk_mq_hw_ctx *);
6252:	static enum hrtimer_restart bfq_idle_slice_timer(struct hrtimer *);
6806:	static int bfq_init(void);
5060:	static void bfq_init_bfqq(struct bfq_data *, struct bfq_queue *, struct bfq_io_cq *, pid_t, int);
6362:	static int bfq_init_hctx(struct blk_mq_hw_ctx *, unsigned int);
6417:	static int bfq_init_queue(struct request_queue *, struct elevator_type *);
6092:	static struct bfq_queue *bfq_init_rq(struct request *);
5503:	static void bfq_insert_request(struct blk_mq_hw_ctx *, struct request *, bool);
5564:	static void bfq_insert_requests(struct blk_mq_hw_ctx *, struct list_head *, bool);
535:	static void bfq_limit_depth(unsigned int, struct blk_mq_alloc_data *);
6597:	static ssize_t bfq_low_latency_show(struct elevator_queue *, char *);
6738:	static ssize_t bfq_low_latency_store(struct elevator_queue *, const char *, size_t);
6594:	static ssize_t bfq_max_budget_show(struct elevator_queue *, char *);
6665:	static ssize_t bfq_max_budget_store(struct elevator_queue *, const char *, size_t);
2541:	static bool bfq_may_be_close_cooperator(struct bfq_queue *, struct bfq_queue *);
4075:	static bool bfq_may_expire_for_budg_timeout(struct bfq_queue *);
2751:	static void bfq_merge_bfqqs(struct bfq_data *, struct bfq_io_cq *, struct bfq_queue *, struct bfq_queue *);
6059:	static void bfq_prepare_request(struct request *);
2152:	static void bfq_remove_request(struct request_queue *, struct request *);
2245:	static int bfq_request_merge(struct request_queue *, struct request **, struct bio *);
2265:	static void bfq_request_merged(struct request_queue *, struct request *, enum elv_merge);
2322:	static void bfq_requests_merged(struct request_queue *, struct request *, struct request *);
3028:	static void bfq_reset_rate_computation(struct bfq_data *, struct request *);
5362:	static void bfq_rq_enqueued(struct bfq_data *, struct bfq_queue *, struct request *);
551:	static struct bfq_queue *bfq_rq_pos_tree_lookup(struct bfq_data *, struct rb_root *, sector_t, struct rb_node **, struct rb_node ***);
4345:	static struct bfq_queue *bfq_select_queue(struct bfq_data *);
4982:	static void bfq_set_next_ioprio_data(struct bfq_queue *, struct bfq_io_cq *);
2591:	static struct bfq_queue *bfq_setup_cooperator(struct bfq_data *, struct bfq_queue *, void *, bool);
2483:	static struct bfq_queue *bfq_setup_merge(struct bfq_queue *, struct bfq_queue *);
6593:	static ssize_t bfq_slice_idle_show(struct elevator_queue *, char *);
6641:	static ssize_t bfq_slice_idle_store(struct elevator_queue *, const char *, size_t);
6608:	static ssize_t bfq_slice_idle_us_show(struct elevator_queue *, char *);
6661:	static ssize_t bfq_slice_idle_us_store(struct elevator_queue *, const char *, size_t);
5971:	static struct bfq_queue *bfq_split_bfqq(struct bfq_io_cq *, struct bfq_queue *);
6596:	static ssize_t bfq_strict_guarantees_show(struct elevator_queue *, char *);
6716:	static ssize_t bfq_strict_guarantees_store(struct elevator_queue *, const char *, size_t);
6595:	static ssize_t bfq_timeout_sync_show(struct elevator_queue *, char *);
6693:	static ssize_t bfq_timeout_sync_store(struct elevator_queue *, const char *, size_t);
5847:	static void bfq_update_inject_limit(struct bfq_data *, struct bfq_queue *);
3187:	static void bfq_update_peak_rate(struct bfq_data *, struct request *);
3046:	static void bfq_update_rate_reset(struct bfq_data *, struct request *);
4547:	static void bfq_update_wr_data(struct bfq_data *, struct bfq_queue *);
939:	static void bfq_updated_next_req(struct bfq_data *, struct bfq_queue *);
2420:	static struct bfq_queue *bfqq_find_close(struct bfq_data *, struct bfq_queue *, sector_t);
4089:	static bool idling_boosts_thr_without_issues(struct bfq_data *, struct bfq_queue *);
3457:	static bool idling_needed_for_service_guarantees(struct bfq_data *, struct bfq_queue *);

File block/bfq-wf2q.c:
1602:	bool __bfq_bfqd_reset_in_service(struct bfq_data *);
1162:	bool __bfq_deactivate_entity(struct bfq_entity *, bool);
718:	struct bfq_service_tree *__bfq_entity_update_weight_prio(struct bfq_service_tree *, struct bfq_entity *, bool);
1650:	void bfq_activate_bfqq(struct bfq_data *, struct bfq_queue *);
1696:	void bfq_add_bfqq_busy(struct bfq_data *, struct bfq_queue *);
874:	void bfq_bfqq_charge_time(struct bfq_data *, struct bfq_queue *, unsigned long);
824:	void bfq_bfqq_served(struct bfq_queue *, int);
148:	struct bfq_group *bfq_bfqq_to_bfqg(struct bfq_queue *);
1642:	void bfq_deactivate_bfqq(struct bfq_data *, struct bfq_queue *, bool, bool);
1673:	void bfq_del_bfqq_busy(struct bfq_data *, struct bfq_queue *, bool);
315:	struct bfq_entity *bfq_entity_of(struct rb_node *);
691:	struct bfq_service_tree *bfq_entity_service_tree(struct bfq_entity *);
262:	struct bfq_queue *bfq_entity_to_bfqq(struct bfq_entity *);
1509:	struct bfq_queue *bfq_get_next_queue(struct bfq_data *);
509:	unsigned short bfq_ioprio_to_weight(int);
659:	void bfq_put_idle_entity(struct bfq_service_tree *, struct bfq_entity *);
1659:	void bfq_requeue_bfqq(struct bfq_data *, struct bfq_queue *, bool);
38:	unsigned int bfq_tot_busy_queues(struct bfq_data *);
1499:	bool next_queue_may_preempt(struct bfq_data *);
1036:	static void __bfq_requeue_entity(struct bfq_entity *);
1136:	static void bfq_activate_requeue_entity(struct bfq_entity *, bool, bool, bool);
574:	static void bfq_active_extract(struct bfq_service_tree *, struct bfq_entity *);
288:	static void bfq_calc_finish(struct bfq_entity *, unsigned long);
1215:	static void bfq_deactivate_entity(struct bfq_entity *, bool, bool);
673:	static void bfq_forget_idle(struct bfq_service_tree *);
341:	static void bfq_idle_extract(struct bfq_service_tree *, struct bfq_entity *);
1442:	static struct bfq_entity *bfq_lookup_next_entity(struct bfq_sched_data *, bool);
441:	static void bfq_update_active_tree(struct rb_node *);
892:	static void bfq_update_fin_time_enqueue(struct bfq_entity *, struct bfq_service_tree *, bool);
74:	static bool bfq_update_next_in_service(struct bfq_sched_data *, struct bfq_entity *, bool);

File block/bio-integrity.c:
356:	bool __bio_integrity_endio(struct bio *);
129:	int bio_integrity_add_page(struct bio *, struct page *, unsigned int, unsigned int);
381:	void bio_integrity_advance(struct bio *, unsigned int);
50:	struct bio_integrity_payload *bio_integrity_alloc(struct bio *, gfp_t, unsigned int);
414:	int bio_integrity_clone(struct bio *, struct bio *, gfp_t);
106:	void bio_integrity_free(struct bio *);
460:	void bio_integrity_init(void);
208:	bool bio_integrity_prep(struct bio *);
397:	void bio_integrity_trim(struct bio *);
436:	int bioset_integrity_create(struct bio_set *, int);
454:	void bioset_integrity_free(struct bio_set *);
22:	void blk_flush_integrity(void);
162:	static blk_status_t bio_integrity_process(struct bio *, struct bvec_iter *, integrity_processing_fn *);
327:	static void bio_integrity_verify_fn(struct work_struct *);

File block/bio.c:
903:	void __bio_add_page(struct bio *, struct page *, unsigned int, unsigned int);
674:	void __bio_clone_fast(struct bio *, struct bio *);
870:	bool __bio_try_merge_page(struct bio *, struct page *, unsigned int, unsigned int, bool *);
790:	int bio_add_hw_page(struct request_queue *, struct bio *, struct page *, unsigned int, unsigned int, unsigned int, bool *);
933:	int bio_add_page(struct bio *, struct page *, unsigned int, unsigned int);
845:	int bio_add_pc_page(struct request_queue *, struct bio *, struct page *, unsigned int, unsigned int);
1191:	void bio_advance(struct bio *, unsigned int);
437:	struct bio *bio_alloc_bioset(gfp_t, unsigned int, struct bio_set *);
338:	void bio_chain(struct bio *, struct bio *);
1373:	void bio_check_pages_dirty(struct bio *);
706:	struct bio *bio_clone_fast(struct bio *, gfp_t, struct bio_set *);
1240:	void bio_copy_data(struct bio *, struct bio *);
1201:	void bio_copy_data_iter(struct bio *, struct bvec_iter *, struct bio *, struct bvec_iter *);
731:	const char *bio_devname(struct bio *, char *);
1428:	void bio_endio(struct bio *);
1286:	void bio_free_pages(struct bio *);
278:	void bio_init(struct bio *, struct bio_vec *, unsigned short);
1114:	int bio_iov_iter_get_pages(struct bio *, struct iov_iter *);
1259:	void bio_list_copy_data(struct bio *, struct bio *);
647:	void bio_put(struct bio *);
947:	void bio_release_pages(struct bio *, bool);
300:	void bio_reset(struct bio *);
1325:	void bio_set_pages_dirty(struct bio *);
1479:	struct bio *bio_split(struct bio *, int, gfp_t, struct bio_set *);
1515:	void bio_trim(struct bio *, int, int);
557:	void bio_truncate(struct bio *, unsigned int);
235:	void bio_uninit(struct bio *);
1551:	void bioset_exit(struct bio_set *);
1588:	int bioset_init(struct bio_set *, unsigned int, unsigned int, int);
1630:	int bioset_init_from_src(struct bio_set *, struct bio_set *);
1538:	int biovec_init_pool(mempool_t *, int);
171:	struct bio_vec *bvec_alloc(gfp_t, int, unsigned long *, mempool_t *);
154:	void bvec_free(mempool_t *, struct bio_vec *, unsigned int);
149:	unsigned int bvec_nr_vecs(unsigned short);
608:	void guard_bio_eod(struct bio *);
1157:	int submit_bio_wait(struct bio *);
532:	void zero_fill_bio_iter(struct bio *, struct bvec_iter);
1046:	static int __bio_iov_append_get_pages(struct bio *, struct iov_iter *);
1001:	static int __bio_iov_iter_get_pages(struct bio *, struct iov_iter *);
348:	static void bio_alloc_rescue(struct work_struct *);
322:	static void bio_chain_endio(struct bio *);
1356:	static void bio_dirty_fn(struct work_struct *);
64:	static struct kmem_cache *bio_find_or_create_slab(unsigned int);
250:	static void bio_free(struct bio *);
981:	static void bio_put_pages(struct page **, size_t, size_t);
120:	static void bio_put_slab(struct bio_set *);
1663:	static int init_bio(void);
365:	static void punt_bios_to_rescuer(struct bio_set *);
1141:	static void submit_bio_wait_endio(struct bio *);

File block/blk-cgroup-rwstat.c:
42:	u64 __blkg_prfill_rwstat(struct seq_file *, struct blkg_policy_data *, const struct blkg_rwstat_sample *);
79:	u64 blkg_prfill_rwstat(struct seq_file *, struct blkg_policy_data *, int);
25:	void blkg_rwstat_exit(struct blkg_rwstat *);
8:	int blkg_rwstat_init(struct blkg_rwstat *, gfp_t);
103:	void blkg_rwstat_recursive_sum(struct blkcg_gq *, struct blkcg_policy *, int, struct blkg_rwstat_sample *);

File block/blk-cgroup.c:
1601:	bool __blkcg_punt_bio_submit(struct bio *);
548:	u64 __blkg_prfill_u64(struct seq_file *, struct blkg_policy_data *, u64);
1904:	void bio_associate_blkg(struct bio *);
1880:	void bio_associate_blkg_from_css(struct bio *, struct cgroup_subsys_state *);
1926:	void bio_clone_blkg_association(struct bio *, struct bio *);
1946:	void blk_cgroup_bio_start(struct bio *);
1343:	int blkcg_activate_policy(struct request_queue *, const struct blkcg_policy *);
1830:	void blkcg_add_delay(struct blkcg_gq *, u64, u64);
584:	struct gendisk *blkcg_conf_get_disk(char **);
1446:	void blkcg_deactivate_policy(struct request_queue *, const struct blkcg_policy *);
1051:	void blkcg_destroy_blkgs(struct blkcg *);
1245:	void blkcg_exit_queue(struct request_queue *);
1192:	int blkcg_init_queue(struct request_queue *);
1749:	void blkcg_maybe_throttle_current(void);
1488:	int blkcg_policy_register(struct blkcg_policy *);
1567:	void blkcg_policy_unregister(struct blkcg_policy *);
517:	void blkcg_print_blkgs(struct seq_file *, struct blkcg *, u64 (*)(struct seq_file *, struct blkg_policy_data *, int), const struct blkcg_policy *, int, bool);
1805:	void blkcg_schedule_throttle(struct request_queue *, bool);
751:	void blkg_conf_finish(struct blkg_conf_ctx *);
623:	int blkg_conf_prep(struct blkcg *, const struct blkcg_policy *, char *, struct blkg_conf_ctx *);
491:	const char *blkg_dev_name(struct blkcg_gq *);
205:	struct blkcg_gq *blkg_lookup_slowpath(struct blkcg *, struct request_queue *, bool);
90:	static void __blkg_release(struct callback_head *);
1277:	static void blkcg_bind(struct cgroup_subsys_state *);
1257:	static int blkcg_can_attach(struct cgroup_taskset *);
1100:	static struct cgroup_subsys_state *blkcg_css_alloc(struct cgroup_subsys_state *);
1081:	static void blkcg_css_free(struct cgroup_subsys_state *);
1029:	static void blkcg_css_offline(struct cgroup_subsys_state *);
1167:	static int blkcg_css_online(struct cgroup_subsys_state *);
1297:	static void blkcg_exit(struct task_struct *);
848:	static void blkcg_fill_root_iostats(void);
1972:	static int blkcg_init(void);
1683:	static void blkcg_maybe_throttle_blkg(struct blkcg_gq *, bool);
889:	static int blkcg_print_stat(struct seq_file *, void *);
455:	static int blkcg_reset_stats(struct cgroup_subsys_state *, struct cftype *, u64);
790:	static void blkcg_rstat_flush(struct cgroup_subsys_state *, int);
1626:	static void blkcg_scale_delay(struct blkcg_gq *, u64);
152:	static struct blkcg_gq *blkg_alloc(struct blkcg *, struct request_queue *, gfp_t);
118:	static void blkg_async_bio_workfn(struct work_struct *);
233:	static struct blkcg_gq *blkg_create(struct blkcg *, struct request_queue *, struct blkcg_gq *);
379:	static void blkg_destroy(struct blkcg_gq *);
425:	static void blkg_destroy_all(struct request_queue *);
74:	static void blkg_free(struct blkcg_gq *);
327:	static struct blkcg_gq *blkg_lookup_create(struct blkcg *, struct request_queue *);
111:	static void blkg_release(struct percpu_ref *);

File block/blk-core.c:
1280:	void blk_account_io_done(struct request *, u64);
1304:	void blk_account_io_start(struct request *);
517:	struct request_queue *blk_alloc_queue(int);
1719:	struct blk_plug_cb *blk_check_plugged(blk_plug_cb_fn, void *, int);
370:	void blk_cleanup_queue(struct request_queue *);
315:	void blk_clear_pm_only(struct request_queue *);
1784:	int blk_dev_init(void);
266:	void blk_dump_rq_flags(struct request *, char *);
1762:	void blk_finish_plug(struct blk_plug *);
1744:	void blk_flush_plug_list(struct blk_plug *, bool);
610:	bool blk_get_queue(struct request_queue *);
627:	struct request *blk_get_request(struct request_queue *, unsigned int, blk_mq_req_flags_t);
1184:	blk_status_t blk_insert_cloned_request(struct request_queue *, struct request *);
1772:	void blk_io_schedule(void);
1546:	int blk_lld_busy(struct request_queue *);
158:	const char *blk_op_str(unsigned int);
336:	void blk_put_queue(struct request_queue *);
643:	void blk_put_request(struct request *);
429:	int blk_queue_enter(struct request_queue *, blk_mq_req_flags_t);
493:	void blk_queue_exit(struct request_queue *);
91:	void blk_queue_flag_clear(unsigned int, struct request_queue *);
80:	void blk_queue_flag_set(unsigned int, struct request_queue *);
105:	bool blk_queue_flag_test_and_set(unsigned int, struct request_queue *);
1224:	unsigned int blk_rq_err_bytes(const struct request *);
111:	void blk_rq_init(struct request_queue *, struct request *);
1591:	int blk_rq_prep_clone(struct request *, struct request *, struct bio_set *, gfp_t, int (*)(struct bio *, struct bio *, void *), void *);
1562:	void blk_rq_unprep_clone(struct request *);
309:	void blk_set_pm_only(struct request_queue *);
342:	void blk_set_queue_dying(struct request_queue *);
1678:	void blk_start_plug(struct blk_plug *);
210:	int blk_status_to_errno(blk_status_t);
1381:	void blk_steal_bios(struct bio_list *, struct request *);
298:	void blk_sync_queue(struct request_queue *);
1424:	bool blk_update_request(struct request *, blk_status_t, unsigned int);
1370:	void disk_end_io_acct(struct gendisk *, unsigned int, unsigned long);
1341:	unsigned long disk_start_io_acct(struct gendisk *, unsigned int, unsigned int);
197:	blk_status_t errno_to_blk_status(int);
1648:	int kblockd_mod_delayed_work_on(int, struct delayed_work *, unsigned long);
1642:	int kblockd_schedule_work(struct work_struct *);
1362:	void part_end_io_acct(struct hd_struct *, struct bio *, unsigned long);
1332:	unsigned long part_start_io_acct(struct gendisk *, struct hd_struct **, struct bio *);
1075:	blk_qc_t submit_bio(struct bio *);
1040:	blk_qc_t submit_bio_noacct(struct bio *);
1348:	static void __part_end_io_acct(struct hd_struct *, unsigned int, unsigned long);
1316:	static unsigned long __part_start_io_acct(struct hd_struct *, unsigned int, unsigned int);
956:	static blk_qc_t __submit_bio_noacct(struct bio *);
1005:	static blk_qc_t __submit_bio_noacct_mq(struct bio *);
498:	static void blk_queue_usage_counter_release(struct percpu_ref *);
506:	static void blk_rq_timed_out_timer(struct timer_list *);
513:	static void blk_timeout_work(struct work_struct *);
1702:	static void flush_plug_callbacks(struct blk_plug *, bool);
649:	static void handle_bad_sector(struct bio *, sector_t);
220:	static void print_req_error(struct request *, blk_status_t, const char *);
714:	static int should_fail_bio(struct bio *);
806:	static bool submit_bio_checks(struct bio *);
1252:	static void update_io_ticks(struct hd_struct *, unsigned long, bool);

File block/blk-exec.c:
80:	blk_status_t blk_execute_rq(struct request_queue *, struct gendisk *, struct request *, int);
48:	void blk_execute_rq_nowait(struct request_queue *, struct gendisk *, struct request *, int, rq_end_io_fn *);
20:	static void blk_end_sync_rq(struct request *, blk_status_t);

File block/blk-flush.c:
469:	struct blk_flush_queue *blk_alloc_flush_queue(int, int, gfp_t);
498:	void blk_free_flush_queue(struct blk_flush_queue *);
384:	void blk_insert_flush(struct request *);
526:	void blk_mq_hctx_set_fq_lock_class(struct blk_mq_hw_ctx *, struct lock_class_key *);
454:	int blkdev_issue_flush(struct block_device *, gfp_t);
267:	bool is_flush_rq(struct request *);
163:	static void blk_flush_complete_seq(struct request *, struct blk_flush_queue *, unsigned int, blk_status_t);
285:	static void blk_kick_flush(struct request_queue *, struct blk_flush_queue *, unsigned int);
214:	static void flush_end_io(struct request *, blk_status_t);
351:	static void mq_flush_data_end_io(struct request *, blk_status_t);

File block/blk-integrity.c:
441:	void blk_integrity_add(struct gendisk *);
121:	int blk_integrity_compare(struct gendisk *, struct gendisk *);
450:	void blk_integrity_del(struct gendisk *);
187:	bool blk_integrity_merge_bio(struct request_queue *, struct request *, struct bio *);
164:	bool blk_integrity_merge_rq(struct request_queue *, struct request *, struct request *);
397:	void blk_integrity_register(struct gendisk *, struct blk_integrity *);
427:	void blk_integrity_unregister(struct gendisk *);
27:	int blk_rq_count_integrity_sg(struct request_queue *, struct bio *);
68:	int blk_rq_map_integrity_sg(struct request_queue *, struct bio *, struct scatterlist *);
373:	static void blk_integrity_nop_complete(struct request *, unsigned int);
364:	static blk_status_t blk_integrity_nop_fn(struct blk_integrity_iter *);
369:	static void blk_integrity_nop_prepare(struct request *);
221:	static ssize_t integrity_attr_show(struct kobject *, struct attribute *, char *);
232:	static ssize_t integrity_attr_store(struct kobject *, struct attribute *, const char *, size_t);
305:	static ssize_t integrity_device_show(struct blk_integrity *, char *);
248:	static ssize_t integrity_format_show(struct blk_integrity *, char *);
300:	static ssize_t integrity_generate_show(struct blk_integrity *, char *);
286:	static ssize_t integrity_generate_store(struct blk_integrity *, const char *, size_t);
261:	static ssize_t integrity_interval_show(struct blk_integrity *, char *);
256:	static ssize_t integrity_tag_size_show(struct blk_integrity *, char *);
281:	static ssize_t integrity_verify_show(struct blk_integrity *, char *);
267:	static ssize_t integrity_verify_store(struct blk_integrity *, const char *, size_t);

File block/blk-ioc.c:
250:	int create_task_io_context(struct task_struct *, gfp_t, int);
199:	void exit_io_context(struct task_struct *);
26:	void get_io_context(struct io_context *);
303:	struct io_context *get_task_io_context(struct task_struct *, gfp_t, int);
239:	void ioc_clear_queue(struct request_queue *);
372:	struct io_cq *ioc_create_icq(struct io_context *, struct request_queue *, gfp_t);
332:	struct io_cq *ioc_lookup_icq(struct io_context *, struct request_queue *);
142:	void put_io_context(struct io_context *);
177:	void put_io_context_active(struct io_context *);
416:	static int blk_ioc_init(void);
32:	static void icq_free_icq_rcu(struct callback_head *);
60:	static void ioc_destroy_icq(struct io_cq *);
95:	static void ioc_release_fn(struct work_struct *);

File block/blk-lib.c:
25:	int __blkdev_issue_discard(struct block_device *, sector_t, sector_t, gfp_t, int, struct bio **);
358:	int __blkdev_issue_zeroout(struct block_device *, sector_t, sector_t, gfp_t, struct bio **, unsigned int);
13:	struct bio *blk_next_bio(struct bio *, unsigned int, gfp_t);
131:	int blkdev_issue_discard(struct block_device *, sector_t, sector_t, gfp_t, unsigned long);
226:	int blkdev_issue_write_same(struct block_device *, sector_t, sector_t, gfp_t, struct page *);
392:	int blkdev_issue_zeroout(struct block_device *, sector_t, sector_t, gfp_t, unsigned int);
165:	static int __blkdev_issue_write_same(struct block_device *, sector_t, sector_t, gfp_t, struct page *, struct bio **);
246:	static int __blkdev_issue_write_zeroes(struct block_device *, sector_t, sector_t, gfp_t, struct bio **, unsigned int);
302:	static int __blkdev_issue_zero_pages(struct block_device *, sector_t, sector_t, gfp_t, struct bio **);

File block/blk-map.c:
524:	int blk_rq_append_bio(struct request *, struct bio **);
684:	int blk_rq_map_kern(struct request_queue *, struct request *, void *, unsigned int, gfp_t);
620:	int blk_rq_map_user(struct request_queue *, struct request *, struct rq_map_data *, void *, unsigned long, gfp_t);
578:	int blk_rq_map_user_iov(struct request_queue *, struct request *, struct rq_map_data *, const struct iov_iter *, gfp_t);
644:	int blk_rq_unmap_user(struct bio *);
21:	static struct bio_map_data *bio_alloc_map_data(struct iov_iter *, gfp_t);
432:	static void bio_copy_kern_endio(struct bio *);
438:	static void bio_copy_kern_endio_read(struct bio *);
130:	static int bio_copy_user_iov(struct request *, struct rq_map_data *, struct iov_iter *, gfp_t);
381:	static struct bio *bio_map_kern(struct request_queue *, void *, unsigned int, gfp_t);
365:	static void bio_map_kern_endio(struct bio *);
243:	static int bio_map_user_iov(struct request *, struct iov_iter *, gfp_t);

File block/blk-merge.c:
298:	void __blk_queue_split(struct bio **, unsigned int *);
522:	int __blk_rq_map_sg(struct request_queue *, struct request *, struct scatterlist *, struct scatterlist **);
1038:	bool blk_attempt_plug_merge(struct request_queue *, struct bio *, unsigned int, struct request **);
839:	bool blk_attempt_req_merge(struct request_queue *, struct request *, struct request *);
1076:	bool blk_bio_list_merge(struct request_queue *, struct list_head *, struct bio *, unsigned int);
1101:	bool blk_mq_sched_try_merge(struct request_queue *, struct bio *, unsigned int, struct request **);
359:	void blk_queue_split(struct bio **);
367:	unsigned int blk_recalc_rq_segments(struct request *);
845:	bool blk_rq_merge_ok(struct request *, struct bio *);
673:	void blk_rq_set_mixed_merge(struct request *);
887:	enum elv_merge blk_try_merge(struct request *, struct bio *);
579:	int ll_back_merge_fn(struct request *, struct bio *, unsigned int);
482:	static int __blk_bios_map_sg(struct request_queue *, struct bio *, struct scatterlist *, struct scatterlist **);
720:	static struct request *attempt_merge(struct request_queue *, struct request *, struct request *);
914:	static enum bio_merge_status bio_attempt_back_merge(struct request *, struct bio *, unsigned int);
964:	static enum bio_merge_status bio_attempt_discard_merge(struct request_queue *, struct request *, struct bio *);
938:	static enum bio_merge_status bio_attempt_front_merge(struct request *, struct bio *, unsigned int);
898:	static void blk_account_io_merge_bio(struct request *);
694:	static void blk_account_io_merge_request(struct request *);
989:	static enum bio_merge_status blk_attempt_bio_merge(struct request_queue *, struct request *, struct bio *, unsigned int, bool);
245:	static struct bio *blk_bio_segment_split(struct request_queue *, struct bio *, struct bio_set *, unsigned int *);
417:	static unsigned int blk_bvec_map_sg(struct request_queue *, struct bio_vec *, struct scatterlist *, struct scatterlist **);
197:	static bool bvec_split_segs(const struct request_queue *, const struct bio_vec *, unsigned int *, unsigned int *, unsigned int, unsigned int);
597:	static int ll_front_merge_fn(struct request *, struct bio *, unsigned int);
634:	static int ll_merge_requests_fn(struct request_queue *, struct request *, struct request *);
616:	static bool req_attempt_discard_merge(struct request_queue *, struct request *, struct request *);

File block/blk-mq-cpumap.c:
86:	int blk_mq_hw_queue_to_node(struct blk_mq_queue_map *, unsigned int);
35:	int blk_mq_map_queues(struct blk_mq_queue_map *);

File block/blk-mq-debugfs-zoned.c:
9:	int queue_zone_wlock_show(void *, struct seq_file *);

File block/blk-mq-debugfs.c:
331:	int __blk_mq_debugfs_rq_show(struct seq_file *, struct request *);
827:	void blk_mq_debugfs_register(struct request_queue *);
877:	void blk_mq_debugfs_register_hctx(struct request_queue *, struct blk_mq_hw_ctx *);
900:	void blk_mq_debugfs_register_hctxs(struct request_queue *);
949:	void blk_mq_debugfs_register_rqos(struct rq_qos *);
918:	void blk_mq_debugfs_register_sched(struct request_queue *);
973:	void blk_mq_debugfs_register_sched_hctx(struct request_queue *, struct blk_mq_hw_ctx *);
358:	int blk_mq_debugfs_rq_show(struct seq_file *, void *);
860:	void blk_mq_debugfs_unregister(struct request_queue *);
893:	void blk_mq_debugfs_unregister_hctx(struct blk_mq_hw_ctx *);
909:	void blk_mq_debugfs_unregister_hctxs(struct request_queue *);
967:	void blk_mq_debugfs_unregister_queue_rqos(struct request_queue *);
943:	void blk_mq_debugfs_unregister_rqos(struct rq_qos *);
937:	void blk_mq_debugfs_unregister_sched(struct request_queue *);
987:	void blk_mq_debugfs_unregister_sched_hctx(struct blk_mq_hw_ctx *);
75:	static int blk_flags_show(struct seq_file *, const unsigned long, const char * const *, int);
744:	static int blk_mq_debugfs_open(struct inode *, struct file *);
766:	static int blk_mq_debugfs_release(struct inode *, struct file *);
719:	static int blk_mq_debugfs_show(struct seq_file *, void *);
449:	static void blk_mq_debugfs_tags_show(struct seq_file *, struct blk_mq_tags *);
727:	static ssize_t blk_mq_debugfs_write(struct file *, const char *, size_t, loff_t *);
702:	static int ctx_completed_show(void *, struct seq_file *);
710:	static ssize_t ctx_completed_write(void *, const char *, size_t, loff_t *);
664:	static void *ctx_default_rq_list_next(struct seq_file *, void *, loff_t *);
664:	static void *ctx_default_rq_list_start(struct seq_file *, loff_t *);
668:	static int ctx_dispatched_show(void *, struct seq_file *);
676:	static ssize_t ctx_dispatched_write(void *, const char *, size_t, loff_t *);
685:	static int ctx_merged_show(void *, struct seq_file *);
693:	static ssize_t ctx_merged_write(void *, const char *, size_t, loff_t *);
666:	static void *ctx_poll_rq_list_next(struct seq_file *, void *, loff_t *);
666:	static void *ctx_poll_rq_list_start(struct seq_file *, loff_t *);
665:	static void *ctx_read_rq_list_next(struct seq_file *, void *, loff_t *);
665:	static void *ctx_read_rq_list_start(struct seq_file *, loff_t *);
814:	static void debugfs_create_files(struct dentry *, void *, const struct blk_mq_debugfs_attr *);
615:	static int hctx_active_show(void *, struct seq_file *);
415:	static int hctx_busy_show(void *, struct seq_file *);
441:	static int hctx_ctx_map_show(void *, struct seq_file *);
623:	static int hctx_dispatch_busy_show(void *, struct seq_file *);
373:	static void *hctx_dispatch_next(struct seq_file *, void *, loff_t *);
364:	static void *hctx_dispatch_start(struct seq_file *, loff_t *);
380:	static void hctx_dispatch_stop(struct seq_file *, void *);
553:	static int hctx_dispatched_show(void *, struct seq_file *);
570:	static ssize_t hctx_dispatched_write(void *, const char *, size_t, loff_t *);
254:	static int hctx_flags_show(void *, struct seq_file *);
534:	static int hctx_io_poll_show(void *, struct seq_file *);
544:	static ssize_t hctx_io_poll_write(void *, const char *, size_t, loff_t *);
581:	static int hctx_queued_show(void *, struct seq_file *);
589:	static ssize_t hctx_queued_write(void *, const char *, size_t, loff_t *);
598:	static int hctx_run_show(void *, struct seq_file *);
606:	static ssize_t hctx_run_write(void *, const char *, size_t, loff_t *);
517:	static int hctx_sched_tags_bitmap_show(void *, struct seq_file *);
500:	static int hctx_sched_tags_show(void *, struct seq_file *);
405:	static bool hctx_show_busy_rq(struct request *, void *, bool);
226:	static int hctx_state_show(void *, struct seq_file *);
483:	static int hctx_tags_bitmap_show(void *, struct seq_file *);
466:	static int hctx_tags_show(void *, struct seq_file *);
432:	static int hctx_type_show(void *, struct seq_file *);
95:	static int queue_pm_only_show(void *, struct seq_file *);
27:	static int queue_poll_stat_show(void *, struct seq_file *);
53:	static void *queue_requeue_list_next(struct seq_file *, void *, loff_t *);
44:	static void *queue_requeue_list_start(struct seq_file *, loff_t *);
60:	static void queue_requeue_list_stop(struct seq_file *, void *);
137:	static int queue_state_show(void *, struct seq_file *);
147:	static ssize_t queue_state_write(void *, const char *, size_t, loff_t *);
184:	static int queue_write_hint_show(void *, struct seq_file *);
195:	static ssize_t queue_write_hint_store(void *, const char *, size_t, loff_t *);

File block/blk-mq-pci.c:
26:	int blk_mq_pci_map_queues(struct blk_mq_queue_map *, struct pci_dev *, int);

File block/blk-mq-rdma.c:
24:	int blk_mq_rdma_map_queues(struct blk_mq_queue_map *, struct ib_device *, int);

File block/blk-mq-sched.c:
348:	bool __blk_mq_sched_bio_merge(struct request_queue *, struct bio *, unsigned int);
621:	void blk_mq_exit_sched(struct request_queue *, struct elevator_queue *);
550:	int blk_mq_init_sched(struct request_queue *, struct elevator_type *);
21:	void blk_mq_sched_assign_ioc(struct request *);
328:	void blk_mq_sched_dispatch_requests(struct blk_mq_hw_ctx *);
610:	void blk_mq_sched_free_requests(struct request_queue *);
421:	void blk_mq_sched_insert_request(struct request *, bool, bool, bool);
474:	void blk_mq_sched_insert_requests(struct blk_mq_hw_ctx *, struct blk_mq_ctx *, struct list_head *, bool);
51:	void blk_mq_sched_mark_restart_hctx(struct blk_mq_hw_ctx *);
391:	void blk_mq_sched_request_inserted(struct request *);
60:	void blk_mq_sched_restart(struct blk_mq_hw_ctx *);
384:	bool blk_mq_sched_try_insert_merge(struct request_queue *, struct request *, struct list_head *);
118:	static int __blk_mq_do_dispatch_sched(struct blk_mq_hw_ctx *);
275:	static int __blk_mq_sched_dispatch_requests(struct blk_mq_hw_ctx *);
225:	static int blk_mq_do_dispatch_ctx(struct blk_mq_hw_ctx *);
78:	static int sched_rq_cmp(void *, const struct list_head *, const struct list_head *);

File block/blk-mq-sysfs.c:
312:	int __blk_mq_register_dev(struct device *, struct request_queue *);
280:	void blk_mq_hctx_kobj_init(struct blk_mq_hw_ctx *);
285:	void blk_mq_sysfs_deinit(struct request_queue *);
297:	void blk_mq_sysfs_init(struct request_queue *);
363:	int blk_mq_sysfs_register(struct request_queue *);
347:	void blk_mq_sysfs_unregister(struct request_queue *);
263:	void blk_mq_unregister_dev(struct device *, struct request_queue *);
26:	static void blk_mq_ctx_sysfs_release(struct kobject *);
157:	static ssize_t blk_mq_hw_sysfs_cpus_show(struct blk_mq_hw_ctx *, char *);
151:	static ssize_t blk_mq_hw_sysfs_nr_reserved_tags_show(struct blk_mq_hw_ctx *, char *);
145:	static ssize_t blk_mq_hw_sysfs_nr_tags_show(struct blk_mq_hw_ctx *, char *);
34:	static void blk_mq_hw_sysfs_release(struct kobject *);
102:	static ssize_t blk_mq_hw_sysfs_show(struct kobject *, struct attribute *, char *);
123:	static ssize_t blk_mq_hw_sysfs_store(struct kobject *, struct attribute *, const char *, size_t);
241:	static int blk_mq_register_hctx(struct blk_mq_hw_ctx *);
18:	static void blk_mq_sysfs_release(struct kobject *);
60:	static ssize_t blk_mq_sysfs_show(struct kobject *, struct attribute *, char *);
81:	static ssize_t blk_mq_sysfs_store(struct kobject *, struct attribute *, const char *, size_t);

File block/blk-mq-tag.c:
24:	bool __blk_mq_tag_busy(struct blk_mq_hw_ctx *);
56:	void __blk_mq_tag_idle(struct blk_mq_hw_ctx *);
359:	void blk_mq_all_tag_iter(struct blk_mq_tags *, busy_tag_iter_fn *, void *);
521:	void blk_mq_exit_shared_sbitmap(struct blk_mq_tag_set *);
557:	void blk_mq_free_tags(struct blk_mq_tags *, unsigned int);
89:	unsigned int blk_mq_get_tag(struct blk_mq_alloc_data *);
495:	int blk_mq_init_shared_sbitmap(struct blk_mq_tag_set *, unsigned int);
527:	struct blk_mq_tags *blk_mq_init_tags(unsigned int, unsigned int, int, unsigned int);
181:	void blk_mq_put_tag(struct blk_mq_tags *, struct blk_mq_ctx *, unsigned int);
436:	void blk_mq_queue_tag_busy_iter(struct request_queue *, busy_iter_fn *, void *);
621:	void blk_mq_tag_resize_shared_sbitmap(struct blk_mq_tag_set *, unsigned int);
566:	int blk_mq_tag_update_depth(struct blk_mq_hw_ctx *, struct blk_mq_tags **, unsigned int, bool);
45:	void blk_mq_tag_wakeup_all(struct blk_mq_tags *, bool);
378:	void blk_mq_tagset_busy_iter(struct blk_mq_tag_set *, busy_tag_iter_fn *, void *);
408:	void blk_mq_tagset_wait_completed_request(struct blk_mq_tag_set *);
638:	u32 blk_mq_unique_tag(struct request *);
336:	static void __blk_mq_all_tag_iter(struct blk_mq_tags *, busy_tag_iter_fn *, void *, unsigned int);
76:	static int __blk_mq_get_tag(struct blk_mq_alloc_data *, struct sbitmap_queue *);
202:	static struct request *blk_mq_find_and_get_req(struct blk_mq_tags *, unsigned int);
391:	static bool blk_mq_tagset_count_completed_rqs(struct request *, void *, bool);
255:	static void bt_for_each(struct blk_mq_hw_ctx *, struct sbitmap_queue *, busy_iter_fn *, void *, bool);
322:	static void bt_tags_for_each(struct blk_mq_tags *, struct sbitmap_queue *, busy_tag_iter_fn *, void *, unsigned int);

File block/blk-mq-virtio.c:
24:	int blk_mq_virtio_map_queues(struct blk_mq_queue_map *, struct virtio_device *, int);

File block/blk-mq.c:
552:	void __blk_mq_end_request(struct request *, blk_status_t);
1830:	void __blk_mq_insert_request(struct blk_mq_hw_ctx *, struct request *, bool);
134:	void blk_freeze_queue_start(struct request_queue *);
833:	void blk_mq_add_to_requeue_list(struct request *, bool, bool);
416:	struct request *blk_mq_alloc_request(struct request_queue *, unsigned int, blk_mq_req_flags_t);
444:	struct request *blk_mq_alloc_request_hctx(struct request_queue *, unsigned int, blk_mq_req_flags_t, unsigned int);
2369:	struct blk_mq_tags *blk_mq_alloc_rq_map(struct blk_mq_tag_set *, unsigned int, unsigned int, unsigned int, unsigned int);
2421:	int blk_mq_alloc_rqs(struct blk_mq_tag_set *, struct blk_mq_tags *, unsigned int, unsigned int);
3469:	int blk_mq_alloc_tag_set(struct blk_mq_tag_set *);
3997:	void blk_mq_cancel_work_sync(struct request_queue *);
710:	void blk_mq_complete_request(struct request *);
679:	bool blk_mq_complete_request_remote(struct request *);
864:	void blk_mq_delay_kick_requeue_list(struct request_queue *, unsigned long);
1628:	void blk_mq_delay_run_hw_queue(struct blk_mq_hw_ctx *, unsigned long);
1690:	void blk_mq_delay_run_hw_queues(struct request_queue *, unsigned long);
1072:	struct request *blk_mq_dequeue_from_ctx(struct blk_mq_hw_ctx *, struct blk_mq_ctx *);
1335:	bool blk_mq_dispatch_rq_list(struct blk_mq_hw_ctx *, struct list_head *, unsigned int);
577:	void blk_mq_end_request(struct request *, blk_status_t);
3339:	void blk_mq_exit_queue(struct request_queue *);
1036:	void blk_mq_flush_busy_ctxs(struct blk_mq_hw_ctx *, struct list_head *);
1902:	void blk_mq_flush_plug_list(struct blk_plug *, bool);
521:	void blk_mq_free_request(struct request *);
2359:	void blk_mq_free_rq_map(struct blk_mq_tags *, unsigned int);
2327:	void blk_mq_free_rqs(struct blk_mq_tag_set *, struct blk_mq_tags *, unsigned int);
3565:	void blk_mq_free_tag_set(struct blk_mq_tag_set *);
180:	void blk_mq_freeze_queue(struct request_queue *);
148:	void blk_mq_freeze_queue_wait(struct request_queue *);
154:	int blk_mq_freeze_queue_wait_timeout(struct request_queue *, unsigned long);
115:	unsigned int blk_mq_in_flight(struct request_queue *, struct hd_struct *);
124:	void blk_mq_in_flight_rw(struct request_queue *, struct hd_struct *, unsigned int *);
3267:	struct request_queue *blk_mq_init_allocated_queue(struct blk_mq_tag_set *, struct request_queue *, bool);
3118:	struct request_queue *blk_mq_init_queue(struct blk_mq_tag_set *);
3096:	struct request_queue *blk_mq_init_queue_data(struct blk_mq_tag_set *, void *);
3128:	struct request_queue *blk_mq_init_sq_queue(struct blk_mq_tag_set *, const struct blk_mq_ops *, unsigned int, unsigned int);
1866:	void blk_mq_insert_requests(struct blk_mq_hw_ctx *, struct blk_mq_ctx *, struct list_head *);
858:	void blk_mq_kick_requeue_list(struct request_queue *);
944:	void blk_mq_put_rq_ref(struct request *);
900:	bool blk_mq_queue_inflight(struct request_queue *);
1711:	bool blk_mq_queue_stopped(struct request_queue *);
227:	void blk_mq_quiesce_queue(struct request_queue *);
207:	void blk_mq_quiesce_queue_nowait(struct request_queue *);
3073:	void blk_mq_release(struct request_queue *);
1850:	void blk_mq_request_bypass_insert(struct request *, bool, bool);
2068:	blk_status_t blk_mq_request_issue_directly(struct request *, bool);
785:	void blk_mq_requeue_request(struct request *, bool);
3991:	unsigned int blk_mq_rq_cpu(struct request *);
1643:	void blk_mq_run_hw_queue(struct blk_mq_hw_ctx *, bool);
1671:	void blk_mq_run_hw_queues(struct request_queue *, bool);
1760:	void blk_mq_start_hw_queue(struct blk_mq_hw_ctx *);
1768:	void blk_mq_start_hw_queues(struct request_queue *);
745:	void blk_mq_start_request(struct request *);
1778:	void blk_mq_start_stopped_hw_queue(struct blk_mq_hw_ctx *, bool);
1788:	void blk_mq_start_stopped_hw_queues(struct request_queue *, bool);
1733:	void blk_mq_stop_hw_queue(struct blk_mq_hw_ctx *);
1750:	void blk_mq_stop_hw_queues(struct request_queue *);
2159:	blk_qc_t blk_mq_submit_bio(struct bio *);
872:	struct request *blk_mq_tag_to_rq(struct blk_mq_tags *, unsigned int);
2082:	void blk_mq_try_issue_list_directly(struct blk_mq_hw_ctx *, struct list_head *);
190:	void blk_mq_unfreeze_queue(struct request_queue *);
253:	void blk_mq_unquiesce_queue(struct request_queue *);
3773:	void blk_mq_update_nr_hw_queues(struct blk_mq_tag_set *, int);
3585:	int blk_mq_update_nr_requests(struct request_queue *, unsigned int);
273:	void blk_mq_wake_waiters(struct request_queue *);
3937:	int blk_poll(struct request_queue *, blk_qc_t, bool);
2834:	static bool __blk_mq_alloc_map_and_request(struct blk_mq_tag_set *, int);
363:	static struct request *__blk_mq_alloc_request(struct blk_mq_alloc_data *);
642:	static void __blk_mq_complete_request_remote(void *);
1600:	static void __blk_mq_delay_run_hw_queue(struct blk_mq_hw_ctx *, bool, unsigned long);
503:	static void __blk_mq_free_request(struct request *);
1095:	static bool __blk_mq_get_driver_tag(struct request *);
1957:	static blk_status_t __blk_mq_issue_directly(struct blk_mq_hw_ctx *, struct request *, blk_qc_t *, bool);
770:	static void __blk_mq_requeue_request(struct request *);
1494:	static void __blk_mq_run_hw_queue(struct blk_mq_hw_ctx *);
1996:	static blk_status_t __blk_mq_try_issue_directly(struct blk_mq_hw_ctx *, struct request *, blk_qc_t *, bool, bool);
3702:	static void __blk_mq_update_nr_hw_queues(struct blk_mq_tag_set *, int);
2118:	static void blk_add_rq_to_plug(struct blk_plug *, struct request *);
589:	static void blk_done_softirq(struct softirq_action *);
3158:	static struct blk_mq_hw_ctx *blk_mq_alloc_and_init_hctx(struct blk_mq_tag_set *, struct request_queue *, int, int);
2737:	static struct blk_mq_hw_ctx *blk_mq_alloc_hctx(struct request_queue *, struct blk_mq_tag_set *, int);
3373:	static int blk_mq_alloc_map_and_requests(struct blk_mq_tag_set *);
952:	static bool blk_mq_check_expired(struct blk_mq_hw_ctx *, struct request *, void *, bool);
102:	static bool blk_mq_check_inflight(struct blk_mq_hw_ctx *, struct request *, void *, bool);
2294:	static void blk_mq_clear_rq_mapping(struct blk_mq_tag_set *, struct blk_mq_tags *, unsigned int);
1135:	static int blk_mq_dispatch_wake(wait_queue_entry_t *, unsigned int, int, void *);
2654:	static void blk_mq_exit_hctx(struct request_queue *, struct blk_mq_tag_set *, struct blk_mq_hw_ctx *, unsigned int);
2855:	static void blk_mq_free_map_and_requests(struct blk_mq_tag_set *, unsigned int);
1119:	static bool blk_mq_get_driver_tag(struct request *);
2503:	static bool blk_mq_has_request(struct request *, void *, bool);
80:	static void blk_mq_hctx_mark_pending(struct blk_mq_hw_ctx *, struct blk_mq_ctx *);
1551:	static int blk_mq_hctx_next_cpu(struct blk_mq_hw_ctx *);
2583:	static int blk_mq_hctx_notify_dead(unsigned int, struct hlist_node *);
2535:	static int blk_mq_hctx_notify_offline(unsigned int, struct hlist_node *);
2568:	static int blk_mq_hctx_notify_online(unsigned int, struct hlist_node *);
4010:	static int blk_mq_init(void);
2804:	static void blk_mq_init_cpu_queues(struct request_queue *, unsigned int);
2706:	static int blk_mq_init_hctx(struct blk_mq_tag_set *, struct blk_mq_hw_ctx *, unsigned int, struct request_queue *);
2867:	static void blk_mq_map_swqueue(struct request_queue *);
1162:	static bool blk_mq_mark_tag_wait(struct blk_mq_hw_ctx *, struct request *);
3847:	static bool blk_mq_poll_hybrid_sleep(struct request_queue *, struct request *);
49:	static int blk_mq_poll_stats_bkt(const struct request *);
3804:	static void blk_mq_poll_stats_fn(struct blk_stat_callback *);
3192:	static void blk_mq_realloc_hw_ctxs(struct blk_mq_tag_set *, struct request_queue *);
3440:	static int blk_mq_realloc_tag_set_tags(struct blk_mq_tag_set *, int, int);
796:	static void blk_mq_requeue_work(struct work_struct *);
292:	static struct request *blk_mq_rq_ctx_init(struct blk_mq_alloc_data *, unsigned int, u64);
883:	static bool blk_mq_rq_inflight(struct blk_mq_hw_ctx *, struct request *, void *, bool);
1798:	static void blk_mq_run_work_fn(struct work_struct *);
969:	static void blk_mq_timeout_work(struct work_struct *);
607:	static void blk_mq_trigger_softirq(struct request *);
2049:	static void blk_mq_try_issue_directly(struct blk_mq_hw_ctx *, struct request *, blk_qc_t *);
3403:	static int blk_mq_update_queue_map(struct blk_mq_tag_set *);
626:	static int blk_softirq_cpu_dead(unsigned int);
1052:	static bool dispatch_rq_from_ctx(struct sbitmap *, unsigned int, void *);
1018:	static bool flush_busy_ctx(struct sbitmap *, unsigned int, void *);
717:	static void hctx_unlock(struct blk_mq_hw_ctx *, int);
1888:	static int plug_rq_cmp(void *, const struct list_head *, const struct list_head *);
2973:	static void queue_set_hctx_shared(struct request_queue *, bool);

File block/blk-pm.c:
31:	void blk_pm_runtime_init(struct request_queue *, struct device *);
176:	void blk_post_runtime_resume(struct request_queue *, int);
122:	void blk_post_runtime_suspend(struct request_queue *, int);
152:	void blk_pre_runtime_resume(struct request_queue *);
61:	int blk_pre_runtime_suspend(struct request_queue *);
207:	void blk_set_runtime_active(struct request_queue *);

File block/blk-rq-qos.c:
32:	void __rq_qos_cleanup(struct rq_qos *, struct bio *);
41:	void __rq_qos_done(struct rq_qos *, struct request *);
95:	void __rq_qos_done_bio(struct rq_qos *, struct bio *);
50:	void __rq_qos_issue(struct rq_qos *, struct request *);
86:	void __rq_qos_merge(struct rq_qos *, struct request *, struct bio *);
104:	void __rq_qos_queue_depth_changed(struct rq_qos *);
59:	void __rq_qos_requeue(struct rq_qos *, struct request *);
68:	void __rq_qos_throttle(struct rq_qos *, struct bio *);
77:	void __rq_qos_track(struct rq_qos *, struct request *, struct bio *);
116:	bool rq_depth_calc_max_depth(struct rq_depth *);
183:	bool rq_depth_scale_down(struct rq_depth *, bool);
164:	bool rq_depth_scale_up(struct rq_depth *);
295:	void rq_qos_exit(struct request_queue *);
249:	void rq_qos_wait(struct rq_wait *, void *, acquire_inflight_cb_t *, cleanup_cb_t *);
27:	bool rq_wait_inc_below(struct rq_wait *, unsigned int);
212:	static int rq_qos_wake_function(struct wait_queue_entry *, unsigned int, int, void *);

File block/blk-settings.c:
399:	void blk_limits_io_min(struct queue_limits *, unsigned int);
444:	void blk_limits_io_opt(struct queue_limits *, unsigned int);
367:	void blk_queue_alignment_offset(struct request_queue *, unsigned int);
102:	void blk_queue_bounce_limit(struct request_queue *, u64);
820:	bool blk_queue_can_use_dma_map_merging(struct request_queue *, struct device *);
180:	void blk_queue_chunk_sectors(struct request_queue *, unsigned int);
732:	void blk_queue_dma_alignment(struct request_queue *, int);
425:	void blk_queue_io_min(struct request_queue *, unsigned int);
463:	void blk_queue_io_opt(struct request_queue *, unsigned int);
322:	void blk_queue_logical_block_size(struct request_queue *, unsigned int);
191:	void blk_queue_max_discard_sectors(struct request_queue *, unsigned int);
281:	void blk_queue_max_discard_segments(struct request_queue *, unsigned short);
149:	void blk_queue_max_hw_sectors(struct request_queue *, unsigned int);
297:	void blk_queue_max_segment_size(struct request_queue *, unsigned int);
260:	void blk_queue_max_segments(struct request_queue *, unsigned short);
204:	void blk_queue_max_write_same_sectors(struct request_queue *, unsigned int);
217:	void blk_queue_max_write_zeroes_sectors(struct request_queue *, unsigned int);
229:	void blk_queue_max_zone_append_sectors(struct request_queue *, unsigned int);
344:	void blk_queue_physical_block_size(struct request_queue *, unsigned int);
806:	void blk_queue_required_elevator_features(struct request_queue *, unsigned int);
25:	void blk_queue_rq_timeout(struct request_queue *, unsigned int);
690:	void blk_queue_segment_boundary(struct request_queue *, unsigned long);
847:	void blk_queue_set_zoned(struct gendisk *, enum blk_zoned_model);
752:	void blk_queue_update_dma_alignment(struct request_queue *, int);
678:	void blk_queue_update_dma_pad(struct request_queue *, unsigned int);
375:	void blk_queue_update_readahead(struct request_queue *);
707:	void blk_queue_virt_boundary(struct request_queue *, unsigned long);
782:	void blk_queue_write_cache(struct request_queue *, bool, bool);
38:	void blk_set_default_limits(struct queue_limits *);
767:	void blk_set_queue_depth(struct request_queue *, unsigned int);
74:	void blk_set_stacking_limits(struct queue_limits *);
500:	int blk_stack_limits(struct queue_limits *, struct queue_limits *, sector_t);
648:	void disk_stack_limits(struct gendisk *, struct block_device *, sector_t);
881:	static int blk_settings_init(void);

File block/blk-stat.c:
198:	struct blk_queue_stats *blk_alloc_queue_stats(void);
213:	void blk_free_queue_stats(struct blk_queue_stats *);
43:	void blk_rq_stat_add(struct blk_rq_stat *, u64);
21:	void blk_rq_stat_init(struct blk_rq_stat *);
29:	void blk_rq_stat_sum(struct blk_rq_stat *, struct blk_rq_stat *);
51:	void blk_stat_add(struct request *, u64);
136:	void blk_stat_add_callback(struct request_queue *, struct blk_stat_callback *);
103:	struct blk_stat_callback *blk_stat_alloc_callback(void (*)(struct blk_stat_callback *), int (*)(const struct request *), unsigned int, void *);
187:	void blk_stat_enable_accounting(struct request_queue *);
181:	void blk_stat_free_callback(struct blk_stat_callback *);
157:	void blk_stat_remove_callback(struct request_queue *, struct blk_stat_callback *);
171:	static void blk_stat_free_callback_rcu(struct callback_head *);
80:	static void blk_stat_timer_fn(struct timer_list *);

File block/blk-sysfs.c:
838:	int blk_register_queue(struct gendisk *);
937:	void blk_unregister_queue(struct gendisk *);
725:	static void blk_free_queue_rcu(struct callback_head *);
780:	static void blk_release_queue(struct kobject *);
692:	static ssize_t queue_attr_show(struct kobject *, struct attribute *, char *);
708:	static ssize_t queue_attr_store(struct kobject *, struct attribute *, const char *, size_t);
665:	static umode_t queue_attr_visible(struct kobject *, struct attribute *, int);
149:	static ssize_t queue_chunk_sectors_show(struct request_queue *, char *);
546:	static ssize_t queue_dax_show(struct request_queue *, char *);
164:	static ssize_t queue_discard_granularity_show(struct request_queue *, char *);
169:	static ssize_t queue_discard_max_hw_show(struct request_queue *, char *);
176:	static ssize_t queue_discard_max_show(struct request_queue *, char *);
182:	static ssize_t queue_discard_max_store(struct request_queue *, const char *, size_t);
205:	static ssize_t queue_discard_zeroes_data_show(struct request_queue *, char *);
541:	static ssize_t queue_fua_show(struct request_queue *, char *);
154:	static ssize_t queue_io_min_show(struct request_queue *, char *);
159:	static ssize_t queue_io_opt_show(struct request_queue *, char *);
439:	static ssize_t queue_io_timeout_show(struct request_queue *, char *);
444:	static ssize_t queue_io_timeout_store(struct request_queue *, const char *, size_t);
289:	static ssize_t queue_iostats_show(struct request_queue *, char *);
289:	static ssize_t queue_iostats_store(struct request_queue *, const char *, size_t);
139:	static ssize_t queue_logical_block_size_show(struct request_queue *, char *);
315:	static ssize_t queue_max_active_zones_show(struct request_queue *, char *);
123:	static ssize_t queue_max_discard_segments_show(struct request_queue *, char *);
254:	static ssize_t queue_max_hw_sectors_show(struct request_queue *, char *);
129:	static ssize_t queue_max_integrity_segments_show(struct request_queue *, char *);
310:	static ssize_t queue_max_open_zones_show(struct request_queue *, char *);
111:	static ssize_t queue_max_sectors_show(struct request_queue *, char *);
230:	static ssize_t queue_max_sectors_store(struct request_queue *, const char *, size_t);
134:	static ssize_t queue_max_segment_size_show(struct request_queue *, char *);
118:	static ssize_t queue_max_segments_show(struct request_queue *, char *);
320:	static ssize_t queue_nomerges_show(struct request_queue *, char *);
326:	static ssize_t queue_nomerges_store(struct request_queue *, const char *, size_t);
287:	static ssize_t queue_nonrot_show(struct request_queue *, char *);
287:	static ssize_t queue_nonrot_store(struct request_queue *, const char *, size_t);
305:	static ssize_t queue_nr_zones_show(struct request_queue *, char *);
144:	static ssize_t queue_physical_block_size_show(struct request_queue *, char *);
378:	static ssize_t queue_poll_delay_show(struct request_queue *, char *);
390:	static ssize_t queue_poll_delay_store(struct request_queue *, const char *, size_t);
412:	static ssize_t queue_poll_show(struct request_queue *, char *);
417:	static ssize_t queue_poll_store(struct request_queue *, const char *, size_t);
89:	static ssize_t queue_ra_show(struct request_queue *, char *);
98:	static ssize_t queue_ra_store(struct request_queue *, const char *, size_t);
288:	static ssize_t queue_random_show(struct request_queue *, char *);
288:	static ssize_t queue_random_store(struct request_queue *, const char *, size_t);
61:	static ssize_t queue_requests_show(struct request_queue *, char *);
67:	static ssize_t queue_requests_store(struct request_queue *, const char *, size_t);
345:	static ssize_t queue_rq_affinity_show(struct request_queue *, char *);
354:	static ssize_t queue_rq_affinity_store(struct request_queue *, const char *, size_t);
290:	static ssize_t queue_stable_writes_show(struct request_queue *, char *);
290:	static ssize_t queue_stable_writes_store(struct request_queue *, const char *, size_t);
459:	static ssize_t queue_wb_lat_show(struct request_queue *, char *);
467:	static ssize_t queue_wb_lat_store(struct request_queue *, const char *, size_t);
511:	static ssize_t queue_wc_show(struct request_queue *, char *);
519:	static ssize_t queue_wc_store(struct request_queue *, const char *, size_t);
210:	static ssize_t queue_write_same_max_show(struct request_queue *, char *);
216:	static ssize_t queue_write_zeroes_max_show(struct request_queue *, char *);
222:	static ssize_t queue_zone_append_max_show(struct request_queue *, char *);
293:	static ssize_t queue_zoned_show(struct request_queue *, char *);

File block/blk-throttle.c:
2260:	bool blk_throtl_bio(struct bio *);
2241:	void blk_throtl_charge_bio_split(struct bio *);
2507:	void blk_throtl_exit(struct request_queue *);
2464:	int blk_throtl_init(struct request_queue *);
2518:	void blk_throtl_register_queue(struct request_queue *);
1361:	static void blk_throtl_dispatch_work_fn(struct work_struct *);
49:	static int setup_global_limit(char *);
1158:	static void start_parent_slice_with_credit(struct throtl_grp *, struct throtl_grp *, bool);
313:	static uint64_t tg_bps_limit(struct throtl_grp *, int);
1424:	static void tg_conf_updated(struct throtl_grp *, bool);
1168:	static void tg_dispatch_one_bio(struct throtl_grp *, bool);
343:	static unsigned int tg_iops_limit(struct throtl_grp *, int);
1869:	static unsigned long tg_last_low_overflow_time(struct throtl_grp *);
1017:	static bool tg_may_dispatch(struct throtl_grp *, struct bio *, unsigned long *);
1388:	static u64 tg_prfill_conf_u64(struct seq_file *, struct blkg_policy_data *, int);
1399:	static u64 tg_prfill_conf_uint(struct seq_file *, struct blkg_policy_data *, int);
1629:	static u64 tg_prfill_limit(struct seq_file *, struct blkg_policy_data *, int);
1563:	static u64 tg_prfill_rwstat_recursive(struct seq_file *, struct blkg_policy_data *, int);
1410:	static int tg_print_conf_u64(struct seq_file *, void *);
1417:	static int tg_print_conf_uint(struct seq_file *, void *);
1692:	static int tg_print_limit(struct seq_file *, void *);
1555:	static int tg_print_rwstat(struct seq_file *, void *);
1573:	static int tg_print_rwstat_recursive(struct seq_file *, void *);
1505:	static ssize_t tg_set_conf(struct kernfs_open_file *, char *, size_t, bool, loff_t);
1543:	static ssize_t tg_set_conf_u64(struct kernfs_open_file *, char *, size_t, loff_t);
1549:	static ssize_t tg_set_conf_uint(struct kernfs_open_file *, char *, size_t, loff_t);
1699:	static ssize_t tg_set_limit(struct kernfs_open_file *, char *, size_t, loff_t);
1132:	static void tg_update_disptime(struct throtl_grp *);
585:	static void tg_update_has_rules(struct throtl_grp *);
1108:	static void throtl_add_bio_tg(struct bio *, struct throtl_qnode *, struct throtl_grp *);
1961:	static bool throtl_can_upgrade(struct throtl_data *, struct throtl_grp *);
1078:	static void throtl_charge_bio(struct throtl_grp *, struct bio *);
1210:	static int throtl_dispatch_tg(struct throtl_grp *);
2078:	static void throtl_downgrade_check(struct throtl_grp *);
2034:	static void throtl_downgrade_state(struct throtl_data *);
718:	static void throtl_enqueue_tg(struct throtl_grp *);
2066:	static bool throtl_hierarchy_can_downgrade(struct throtl_grp *);
2573:	static int throtl_init(void);
504:	static struct blkg_policy_data *throtl_pd_alloc(gfp_t, struct request_queue *, struct blkcg *);
651:	static void throtl_pd_free(struct blkg_policy_data *);
553:	static void throtl_pd_init(struct blkg_policy_data *);
636:	static void throtl_pd_offline(struct blkg_policy_data *);
598:	static void throtl_pd_online(struct blkg_policy_data *);
1293:	static void throtl_pending_timer_fn(struct timer_list *);
469:	static struct bio *throtl_pop_queued(struct list_head *, struct throtl_grp **);
427:	static void throtl_qnode_add_bio(struct bio *, struct throtl_qnode *, struct list_head *);
773:	static bool throtl_schedule_next_dispatch(struct throtl_service_queue *, bool);
736:	static void throtl_schedule_pending_timer(struct throtl_service_queue *, unsigned long);
1243:	static int throtl_select_dispatch(struct throtl_service_queue *);
1922:	static bool throtl_tg_can_upgrade(struct throtl_grp *);
1896:	static bool throtl_tg_is_idle(struct throtl_grp *);
2010:	static void throtl_upgrade_state(struct throtl_data *);

File block/blk-timeout.c:
79:	void blk_abort_request(struct request *);
128:	void blk_add_timer(struct request *);
109:	unsigned long blk_rq_timeout(unsigned long);
93:	static int blk_timeout_init(void);

File block/blk-wbt.c:
657:	u64 wbt_default_latency_nsec(struct request_queue *);
701:	void wbt_disable_default(struct request_queue *);
637:	void wbt_enable_default(struct request_queue *);
422:	u64 wbt_get_min_lat(struct request_queue *);
817:	int wbt_init(struct request_queue *);
430:	void wbt_set_min_lat(struct request_queue *, u64);
627:	void wbt_set_write_cache(struct request_queue *, bool);
235:	static int latency_exceeded(struct rq_wb *, struct blk_rq_stat *);
329:	static void rwb_arm_timer(struct rq_wb *);
288:	static void rwb_trace_step(struct rq_wb *, const char *);
310:	static void scale_up(struct rq_wb *);
353:	static void wb_timer_fn(struct blk_stat_callback *);
781:	static int wbt_background_show(void *, struct seq_file *);
559:	static void wbt_cleanup(struct rq_qos *, struct bio *);
499:	static void wbt_cleanup_cb(struct rq_wait *, void *);
716:	static int wbt_curr_win_nsec_show(void *, struct seq_file *);
669:	static int wbt_data_dir(const struct request *);
186:	static void wbt_done(struct rq_qos *, struct request *);
725:	static int wbt_enabled_show(void *, struct seq_file *);
688:	static void wbt_exit(struct rq_qos *);
734:	static int wbt_id_show(void *, struct seq_file *);
493:	static bool wbt_inflight_cb(struct rq_wait *, void *);
742:	static int wbt_inflight_show(void *, struct seq_file *);
596:	static void wbt_issue(struct rq_qos *, struct request *);
754:	static int wbt_min_lat_nsec_show(void *, struct seq_file *);
772:	static int wbt_normal_show(void *, struct seq_file *);
682:	static void wbt_queue_depth_changed(struct rq_qos *);
616:	static void wbt_requeue(struct rq_qos *, struct request *);
128:	static void wbt_rqw_done(struct rq_wb *, struct rq_wait *, enum wbt_flags);
590:	static void wbt_track(struct rq_qos *, struct request *, struct bio *);
763:	static int wbt_unknown_cnt_show(void *, struct seq_file *);
409:	static void wbt_update_limits(struct rq_wb *);
572:	static void wbt_wait(struct rq_qos *, struct bio *);

File block/blk-zoned.c:
99:	void __blk_req_zone_write_lock(struct request *);
110:	void __blk_req_zone_write_unlock(struct request *);
408:	void blk_queue_free_zone_bitmaps(struct request_queue *);
66:	bool blk_req_needs_zone_write_lock(struct request *);
85:	bool blk_req_zone_write_trylock(struct request *);
514:	int blk_revalidate_disk_zones(struct gendisk *, void (*)(struct gendisk *));
44:	const char *blk_zone_cond_str(enum blk_zone_cond);
126:	unsigned int blkdev_nr_zones(struct gendisk *);
155:	int blkdev_report_zones(struct block_device *, sector_t, unsigned int, report_zones_cb, void *);
280:	int blkdev_report_zones_ioctl(struct block_device *, fmode_t, unsigned int, unsigned long);
202:	int blkdev_zone_mgmt(struct block_device *, enum req_opf, sector_t, sector_t, gfp_t);
338:	int blkdev_zone_mgmt_ioctl(struct block_device *, fmode_t, unsigned int, unsigned long);
428:	static int blk_revalidate_zone_cb(struct blk_zone *, unsigned int, void *);
266:	static int blkdev_copy_zone_to_user(struct blk_zone *, unsigned int, void *);

File block/bounce.c:
361:	void blk_queue_bounce(struct request_queue *, struct bio **);
106:	int init_emergency_isa_pool(void);
287:	static void __blk_queue_bounce(struct request_queue *, struct bio **, mempool_t *);
217:	static struct bio *bounce_clone_bio(struct bio *, struct bio_set *, gfp_t);
162:	static void bounce_end_io(struct bio *, mempool_t *);
207:	static void bounce_end_io_read(struct bio *);
212:	static void bounce_end_io_read_isa(struct bio *);
186:	static void bounce_end_io_write(struct bio *);
191:	static void bounce_end_io_write_isa(struct bio *);
132:	static void copy_to_high_bio_irq(struct bio *, struct bio *);
34:	static void init_bounce_bioset(void);
95:	static void *mempool_alloc_pages_isa(gfp_t, void *);

File block/bsg-lib.c:
181:	void bsg_job_done(struct bsg_job *, int, unsigned int);
167:	int bsg_job_get(struct bsg_job *);
161:	void bsg_job_put(struct bsg_job *);
324:	void bsg_remove_queue(struct request_queue *);
365:	struct request_queue *bsg_setup_queue(struct device *, const char *, bsg_job_fn *, bsg_timeout_fn *, int);
197:	static void bsg_complete(struct request *);
316:	static void bsg_exit_rq(struct blk_mq_tag_set *, struct request *, unsigned int);
293:	static int bsg_init_rq(struct blk_mq_tag_set *, struct request *, unsigned int, unsigned int);
305:	static void bsg_initialize_rq(struct request *);
204:	static int bsg_map_buffer(struct bsg_buffer *, struct request *);
264:	static blk_status_t bsg_queue_rq(struct blk_mq_hw_ctx *, const struct blk_mq_queue_data *);
338:	static enum blk_eh_timer_return bsg_timeout(struct request *, bool);
26:	static int bsg_transport_check_proto(struct sg_io_v4 *);
76:	static int bsg_transport_complete_rq(struct request *, struct sg_io_v4 *);
36:	static int bsg_transport_fill_hdr(struct request *, struct sg_io_v4 *, fmode_t);
125:	static void bsg_transport_free_rq(struct request *);

File block/bsg.c:
412:	int bsg_register_queue(struct request_queue *, struct device *, const char *, const struct bsg_ops *);
469:	int bsg_scsi_register_queue(struct request_queue *, struct device *);
395:	void bsg_unregister_queue(struct request_queue *);
236:	static struct bsg_device *bsg_add_device(struct inode *, struct request_queue *, struct file *);
482:	static char *bsg_devnode(struct device *, umode_t *);
487:	static int bsg_init(void);
349:	static long bsg_ioctl(struct file *, unsigned int, unsigned long);
308:	static int bsg_open(struct inode *, struct file *);
212:	static int bsg_put_device(struct bsg_device *);
321:	static int bsg_release(struct inode *, struct file *);
57:	static int bsg_scsi_check_proto(struct sg_io_v4 *);
89:	static int bsg_scsi_complete_rq(struct request *, struct sg_io_v4 *);
65:	static int bsg_scsi_fill_hdr(struct request *, struct sg_io_v4 *, fmode_t);
123:	static void bsg_scsi_free_rq(struct request *);
135:	static int bsg_sg_io(struct request_queue *, fmode_t, void *);

File block/elevator.c:
191:	void __elevator_exit(struct request_queue *, struct elevator_queue *);
164:	struct elevator_queue *elevator_alloc(struct request_queue *, struct elevator_type *);
670:	void elevator_init_mq(struct request_queue *);
580:	int elevator_switch_mq(struct request_queue *, struct elevator_type *);
359:	bool elv_attempt_insert_merge(struct request_queue *, struct request *, struct list_head *);
74:	bool elv_bio_merge_ok(struct request *, struct bio *);
433:	struct request *elv_former_request(struct request_queue *, struct request *);
785:	ssize_t elv_iosched_show(struct request_queue *, char *);
770:	ssize_t elv_iosched_store(struct request_queue *, const char *, size_t);
423:	struct request *elv_latter_request(struct request_queue *, struct request *);
303:	enum elv_merge elv_merge(struct request_queue *, struct request **, struct bio *);
411:	void elv_merge_requests(struct request_queue *, struct request *, struct request *);
397:	void elv_merged_request(struct request_queue *, struct request *, enum elv_merge);
254:	void elv_rb_add(struct rb_root *, struct request *);
275:	void elv_rb_del(struct rb_root *, struct request *);
283:	struct request *elv_rb_find(struct rb_root *, sector_t);
820:	struct request *elv_rb_former_request(struct request_queue *, struct request *);
832:	struct request *elv_rb_latter_request(struct request_queue *, struct request *);
529:	int elv_register(struct elevator_type *);
490:	int elv_register_queue(struct request_queue *, bool);
213:	void elv_rqhash_add(struct request_queue *, struct request *);
206:	void elv_rqhash_del(struct request_queue *, struct request *);
229:	struct request *elv_rqhash_find(struct request_queue *, sector_t);
223:	void elv_rqhash_reposition(struct request_queue *, struct request *);
561:	void elv_unregister(struct elevator_type *);
515:	void elv_unregister_queue(struct request_queue *);
738:	static int __elevator_change(struct request_queue *, const char *);
122:	static struct elevator_type *elevator_find(const char *, unsigned int);
140:	static struct elevator_type *elevator_get(struct request_queue *, const char *, bool);
643:	static struct elevator_type *elevator_get_by_features(struct request_queue *);
182:	static void elevator_release(struct kobject *);
844:	static int elevator_setup(char *);
446:	static ssize_t elv_attr_show(struct kobject *, struct attribute *, char *);
463:	static ssize_t elv_attr_store(struct kobject *, struct attribute *, const char *, size_t);

File block/genhd.c:
1723:	struct gendisk *__alloc_disk_node(int, int);
146:	struct hd_struct *__disk_get_part(struct gendisk *, int);
2124:	bool bdev_check_media_change(struct block_device *);
1897:	int bdev_read_only(struct block_device *);
89:	const char *bdevname(struct block_device *, char *);
1056:	struct block_device *bdget_disk(struct gendisk *, int);
574:	int blk_alloc_devt(struct hd_struct *, dev_t *);
666:	void blk_delete_region(dev_t, unsigned long, struct kobject *(*)(dev_t, int *, void *));
609:	void blk_free_devt(dev_t);
624:	void blk_invalidate_devt(dev_t);
1689:	dev_t blk_lookup_devt(const char *, int);
650:	void blk_register_region(dev_t, unsigned long, struct module *, struct kobject *(*)(dev_t, int *, void *), int (*)(dev_t, void *), void *);
659:	void blk_unregister_region(dev_t, unsigned long);
408:	void blkdev_show(struct seq_file *, off_t);
900:	void del_gendisk(struct gendisk *);
848:	void device_add_disk(struct device *, struct gendisk *, const struct attribute_group **);
856:	void device_add_disk_no_queue_reg(struct device *, struct gendisk *);
1972:	void disk_block_events(struct gendisk *);
1507:	int disk_expand_part_tbl(struct gendisk *, int);
2050:	void disk_flush_events(struct gendisk *, unsigned int);
169:	struct hd_struct *disk_get_part(struct gendisk *, int);
367:	bool disk_has_partitions(struct gendisk *);
319:	struct hd_struct *disk_map_sector_rcu(struct gendisk *, sector_t);
77:	char *disk_name(struct gendisk *, int, char *);
289:	void disk_part_iter_exit(struct disk_part_iter *);
193:	void disk_part_iter_init(struct disk_part_iter *, struct gendisk *, unsigned int);
226:	struct hd_struct *disk_part_iter_next(struct disk_part_iter *);
2032:	void disk_unblock_events(struct gendisk *);
1790:	struct kobject *get_disk_and_module(struct gendisk *);
1000:	struct gendisk *get_gendisk(dev_t, int *);
1865:	bool get_user_ro(struct gendisk *, unsigned int);
1340:	ssize_t part_inflight_show(struct device *, struct device_attribute *, char *);
1287:	ssize_t part_size_show(struct device *, struct device_attribute *, char *);
1296:	ssize_t part_stat_show(struct device *, struct device_attribute *, char *);
1075:	void printk_all_partitions(void);
1820:	void put_disk(struct gendisk *);
1837:	void put_disk_and_module(struct gendisk *);
440:	int register_blkdev(unsigned int, const char *);
52:	bool set_capacity_revalidate_and_notify(struct gendisk *, sector_t, bool);
1858:	void set_device_ro(struct block_device *, bool);
1878:	void set_disk_ro(struct gendisk *, bool);
504:	void unregister_blkdev(unsigned int, const char *);
778:	static void __device_add_disk(struct device *, struct gendisk *, const struct attribute_group **, bool);
1997:	static void __disk_unblock_events(struct gendisk *, bool);
1216:	static struct kobject *base_probe(dev_t, int *, void *);
1582:	static char *block_devnode(struct device *, umode_t *, kuid_t *, kgid_t *);
1363:	static ssize_t disk_alignment_offset_show(struct device *, struct device_attribute *, char *);
966:	static ssize_t disk_badblocks_show(struct device *, struct device_attribute *, char *);
978:	static ssize_t disk_badblocks_store(struct device *, struct device_attribute *, const char *, size_t);
1355:	static ssize_t disk_capability_show(struct device *, struct device_attribute *, char *);
2153:	static void disk_check_events(struct disk_events *, unsigned int *);
1372:	static ssize_t disk_discard_alignment_show(struct device *, struct device_attribute *, char *);
2232:	static ssize_t disk_events_async_show(struct device *, struct device_attribute *, char *);
2238:	static ssize_t disk_events_poll_msecs_show(struct device *, struct device_attribute *, char *);
2250:	static ssize_t disk_events_poll_msecs_store(struct device *, struct device_attribute *, const char *, size_t);
2292:	static int disk_events_set_dfl_poll_msecs(const char *, const struct kernel_param *);
2221:	static ssize_t disk_events_show(struct device *, struct device_attribute *, char *);
2145:	static void disk_events_workfn(struct work_struct *);
1253:	static ssize_t disk_ext_range_show(struct device *, struct device_attribute *, char *);
1270:	static ssize_t disk_hidden_show(struct device *, struct device_attribute *, char *);
1245:	static ssize_t disk_range_show(struct device *, struct device_attribute *, char *);
1563:	static void disk_release(struct device *);
1261:	static ssize_t disk_removable_show(struct device *, struct device_attribute *, char *);
1279:	static ssize_t disk_ro_show(struct device *, struct device_attribute *, char *);
1147:	static void *disk_seqf_next(struct seq_file *, void *, loff_t *);
1126:	static void *disk_seqf_start(struct seq_file *, loff_t *);
1159:	static void disk_seqf_stop(struct seq_file *, void *);
1447:	static umode_t disk_visible(struct kobject *, struct attribute *, int);
1607:	static int diskstats_show(struct seq_file *, void *);
681:	static int exact_lock(dev_t, void *);
674:	static struct kobject *exact_match(dev_t, int *, void *);
1224:	static int genhd_device_init(void);
862:	static void invalidate_partition(struct gendisk *, int);
115:	static unsigned int part_in_flight(struct hd_struct *);
95:	static void part_stat_read_all(struct hd_struct *, struct disk_stats *);
1680:	static int proc_genhd_init(void);
703:	static void register_disk(struct device *, struct gendisk *, const struct attribute_group **);
1181:	static int show_partition(struct seq_file *, void *);
1171:	static void *show_partition_start(struct seq_file *, loff_t *);

File block/ioctl.c:
231:	int __blkdev_driver_ioctl(struct block_device *, fmode_t, unsigned int, unsigned long);
254:	int blkdev_compat_ptr_ioctl(struct block_device *, fmode_t, unsigned int, unsigned long);
593:	int blkdev_ioctl(struct block_device *, fmode_t, unsigned int, unsigned long);
651:	long compat_blkdev_ioctl(struct file *, unsigned int, unsigned long);
118:	static int blk_ioctl_discard(struct block_device *, fmode_t, unsigned long, unsigned long);
482:	static int blkdev_bszset(struct block_device *, fmode_t, int *);
510:	static int blkdev_common_ioctl(struct block_device *, fmode_t, unsigned int, unsigned long, void *);
322:	static int blkdev_pr_preempt(struct block_device *, struct pr_preempt *, bool);
395:	static int blkdev_roset(struct block_device *, fmode_t, unsigned int, unsigned long);
16:	static int blkpg_do_ioctl(struct block_device *, struct blkpg_partition *, int);

File block/ioprio.c:
193:	long __ia32_sys_ioprio_get(const struct pt_regs *);
101:	long __ia32_sys_ioprio_set(const struct pt_regs *);
193:	long __x64_sys_ioprio_get(const struct pt_regs *);
101:	long __x64_sys_ioprio_set(const struct pt_regs *);
183:	int ioprio_best(unsigned short, unsigned short);
65:	int ioprio_check_cap(int);
36:	int set_task_ioprio(struct task_struct *, int);
193:	static long __se_sys_ioprio_get(long, long);
101:	static long __se_sys_ioprio_set(long, long, long);
167:	static int get_task_ioprio(struct task_struct *);

File block/kyber-iosched.c:
225:	static int calculate_percentile(struct kyber_queue_data *, unsigned int, unsigned int, unsigned int);
660:	static bool flush_busy_kcq(struct sbitmap *, unsigned int, void *);
953:	static int kyber_async_depth_show(void *, struct seq_file *);
971:	static int kyber_batching_show(void *, struct seq_file *);
561:	static bool kyber_bio_merge(struct request_queue *, struct bio *, unsigned int);
632:	static void kyber_completed_request(struct request *, u64);
962:	static int kyber_cur_domain_show(void *, struct seq_file *);
448:	static void kyber_depth_updated(struct blk_mq_hw_ctx *);
949:	static void *kyber_discard_rqs_next(struct seq_file *, void *, loff_t *);
949:	static void *kyber_discard_rqs_start(struct seq_file *, loff_t *);
949:	static int kyber_discard_tokens_show(void *, struct seq_file *);
949:	static int kyber_discard_waiting_show(void *, struct seq_file *);
747:	static struct request *kyber_dispatch_cur_domain(struct kyber_queue_data *, struct kyber_hctx_data *, struct blk_mq_hw_ctx *);
796:	static struct request *kyber_dispatch_request(struct blk_mq_hw_ctx *);
688:	static int kyber_domain_wake(wait_queue_entry_t *, unsigned int, int, void *);
1038:	static void kyber_exit(void);
513:	static void kyber_exit_hctx(struct blk_mq_hw_ctx *, unsigned int);
426:	static void kyber_exit_sched(struct elevator_queue *);
607:	static void kyber_finish_request(struct request *);
674:	static void kyber_flush_busy_kcqs(struct kyber_hctx_data *, unsigned int, struct list_head *);
699:	static int kyber_get_domain_token(struct kyber_queue_data *, struct kyber_hctx_data *, struct blk_mq_hw_ctx *);
842:	static bool kyber_has_work(struct blk_mq_hw_ctx *);
1033:	static int kyber_init(void);
459:	static int kyber_init_hctx(struct blk_mq_hw_ctx *, unsigned int);
403:	static int kyber_init_sched(struct request_queue *, struct elevator_type *);
584:	static void kyber_insert_requests(struct blk_mq_hw_ctx *, struct list_head *, bool);
548:	static void kyber_limit_depth(unsigned int, struct blk_mq_alloc_data *);
950:	static void *kyber_other_rqs_next(struct seq_file *, void *, loff_t *);
950:	static void *kyber_other_rqs_start(struct seq_file *, loff_t *);
950:	static int kyber_other_tokens_show(void *, struct seq_file *);
950:	static int kyber_other_waiting_show(void *, struct seq_file *);
579:	static void kyber_prepare_request(struct request *);
356:	static struct kyber_queue_data *kyber_queue_data_alloc(struct request_queue *);
880:	static ssize_t kyber_read_lat_show(struct elevator_queue *, char *);
880:	static ssize_t kyber_read_lat_store(struct elevator_queue *, const char *, size_t);
947:	static void *kyber_read_rqs_next(struct seq_file *, void *, loff_t *);
947:	static void *kyber_read_rqs_start(struct seq_file *, loff_t *);
947:	static void kyber_read_rqs_stop(struct seq_file *, void *);
947:	static int kyber_read_tokens_show(void *, struct seq_file *);
947:	static int kyber_read_waiting_show(void *, struct seq_file *);
265:	static void kyber_resize_domain(struct kyber_queue_data *, unsigned int, unsigned int);
276:	static void kyber_timer_fn(struct timer_list *);
881:	static ssize_t kyber_write_lat_show(struct elevator_queue *, char *);
881:	static ssize_t kyber_write_lat_store(struct elevator_queue *, const char *, size_t);
948:	static void *kyber_write_rqs_next(struct seq_file *, void *, loff_t *);
948:	static void *kyber_write_rqs_start(struct seq_file *, loff_t *);
948:	static int kyber_write_tokens_show(void *, struct seq_file *);
948:	static int kyber_write_waiting_show(void *, struct seq_file *);

File block/mq-deadline.c:
271:	static struct request *__dd_dispatch_request(struct deadline_data *);
466:	static bool dd_bio_merge(struct request_queue *, struct bio *, unsigned int);
381:	static struct request *dd_dispatch_request(struct blk_mq_hw_ctx *);
395:	static void dd_exit_queue(struct elevator_queue *);
569:	static void dd_finish_request(struct request *);
585:	static bool dd_has_work(struct blk_mq_hw_ctx *);
408:	static int dd_init_queue(struct request_queue *, struct elevator_type *);
486:	static void dd_insert_request(struct blk_mq_hw_ctx *, struct request *, bool);
529:	static void dd_insert_requests(struct blk_mq_hw_ctx *, struct list_head *, bool);
140:	static void dd_merged_requests(struct request_queue *, struct request *, struct request *);
551:	static void dd_prepare_request(struct request *);
441:	static int dd_request_merge(struct request_queue *, struct request **, struct bio *);
126:	static void dd_request_merged(struct request_queue *, struct request *, enum elv_merge);
718:	static int deadline_batching_show(void *, struct seq_file *);
746:	static void *deadline_dispatch_next(struct seq_file *, void *, loff_t *);
736:	static void *deadline_dispatch_start(struct seq_file *, loff_t *);
817:	static void deadline_exit(void);
627:	static ssize_t deadline_fifo_batch_show(struct elevator_queue *, char *);
650:	static ssize_t deadline_fifo_batch_store(struct elevator_queue *, const char *, size_t);
201:	static struct request *deadline_fifo_request(struct deadline_data *, int);
626:	static ssize_t deadline_front_merges_show(struct elevator_queue *, char *);
649:	static ssize_t deadline_front_merges_store(struct elevator_queue *, const char *, size_t);
812:	static int deadline_init(void);
237:	static struct request *deadline_next_request(struct deadline_data *, int);
623:	static ssize_t deadline_read_expire_show(struct elevator_queue *, char *);
646:	static ssize_t deadline_read_expire_store(struct elevator_queue *, const char *, size_t);
714:	static void *deadline_read_fifo_next(struct seq_file *, void *, loff_t *);
714:	static void *deadline_read_fifo_start(struct seq_file *, loff_t *);
714:	static void deadline_read_fifo_stop(struct seq_file *, void *);
714:	static int deadline_read_next_rq_show(void *, struct seq_file *);
109:	static void deadline_remove_request(struct request_queue *, struct request *);
727:	static int deadline_starved_show(void *, struct seq_file *);
624:	static ssize_t deadline_write_expire_show(struct elevator_queue *, char *);
647:	static ssize_t deadline_write_expire_store(struct elevator_queue *, const char *, size_t);
715:	static void *deadline_write_fifo_next(struct seq_file *, void *, loff_t *);
715:	static void *deadline_write_fifo_start(struct seq_file *, loff_t *);
715:	static int deadline_write_next_rq_show(void *, struct seq_file *);
625:	static ssize_t deadline_writes_starved_show(struct elevator_queue *, char *);
648:	static ssize_t deadline_writes_starved_store(struct elevator_queue *, const char *, size_t);

File block/partitions/amiga.c:
28:	int amiga_partition(struct parsed_partitions *);

File block/partitions/core.c:
518:	int bdev_add_partition(struct block_device *, int, sector_t, sector_t);
546:	int bdev_del_partition(struct block_device *, int);
584:	int bdev_resize_partition(struct block_device *, int, sector_t, sector_t);
713:	int blk_add_partitions(struct gendisk *, struct block_device *);
640:	int blk_drop_partitions(struct block_device *);
327:	void delete_partition(struct hd_struct *);
316:	int hd_ref_init(struct hd_struct *);
783:	void *read_part_sector(struct parsed_partitions *, sector_t, Sector *);
363:	static struct hd_struct *add_partition(struct gendisk *, int, sector_t, sector_t, int, struct partition_meta_info *);
663:	static bool blk_add_partition(struct gendisk *, struct parsed_partitions *, int, struct block_device *);
115:	static struct parsed_partitions *check_partition(struct gendisk *, struct block_device *);
624:	static bool disk_unlock_native_capacity(struct gendisk *);
303:	static void hd_struct_free(struct percpu_ref *);
283:	static void hd_struct_free_work(struct work_struct *);
198:	static ssize_t part_alignment_offset_show(struct device *, struct device_attribute *, char *);
208:	static ssize_t part_discard_alignment_show(struct device *, struct device_attribute *, char *);
175:	static ssize_t part_partition_show(struct device *, struct device_attribute *, char *);
258:	static void part_release(struct device *);
191:	static ssize_t part_ro_show(struct device *, struct device_attribute *, char *);
183:	static ssize_t part_start_show(struct device *, struct device_attribute *, char *);
266:	static int part_uevent(struct device *, struct kobj_uevent_env *);
497:	static bool partition_overlaps(struct gendisk *, sector_t, sector_t, int);
352:	static ssize_t whole_disk_show(struct device *, struct device_attribute *, char *);

File block/partitions/efi.c:
703:	int efi_partition(struct parsed_partitions *);
273:	static gpt_entry *alloc_read_gpt_entries(struct parsed_partitions *, gpt_header *);
308:	static gpt_header *alloc_read_gpt_header(struct parsed_partitions *, u64);
483:	static void compare_gpts(gpt_header *, gpt_header *, u64);
583:	static int find_valid_gpt(struct parsed_partitions *, gpt_header **, gpt_entry **);
99:	static int force_gpt_fn(char *);
337:	static int is_gpt_valid(struct parsed_partitions *, u64, gpt_header **, gpt_entry **);
237:	static size_t read_lba(struct parsed_partitions *, u64, u8 *, size_t);

File block/partitions/karma.c:
15:	int karma_partition(struct parsed_partitions *);

File block/partitions/mac.c:
31:	int mac_partition(struct parsed_partitions *);

File block/partitions/msdos.c:
580:	int msdos_partition(struct parsed_partitions *);
72:	static int aix_magic_present(struct parsed_partitions *, unsigned char *);
354:	static void parse_bsd(struct parsed_partitions *, sector_t, sector_t, int, char *, int);
130:	static void parse_extended(struct parsed_partitions *, sector_t, sector_t, u32);
408:	static void parse_freebsd(struct parsed_partitions *, sector_t, sector_t, int);
528:	static void parse_minix(struct parsed_partitions *, sector_t, sector_t, int);
416:	static void parse_netbsd(struct parsed_partitions *, sector_t, sector_t, int);
424:	static void parse_openbsd(struct parsed_partitions *, sector_t, sector_t, int);
249:	static void parse_solaris_x86(struct parsed_partitions *, sector_t, sector_t, int);
482:	static void parse_unixware(struct parsed_partitions *, sector_t, sector_t, int);

File block/partitions/osf.c:
16:	int osf_partition(struct parsed_partitions *);

File block/partitions/sgi.c:
36:	int sgi_partition(struct parsed_partitions *);

File block/partitions/sun.c:
21:	int sun_partition(struct parsed_partitions *);

File block/scsi_ioctl.c:
200:	int blk_verify_command(unsigned char *, fmode_t);
591:	int get_sg_io_hdr(struct sg_io_hdr *, const void *);
548:	int put_sg_io_hdr(const struct sg_io_hdr *, void *);
858:	int scsi_cmd_blk_ioctl(struct block_device *, fmode_t, unsigned int, void *);
767:	int scsi_cmd_ioctl(struct request_queue *, struct gendisk *, fmode_t, unsigned int, void *);
877:	void scsi_req_init(struct scsi_request *);
846:	int scsi_verify_blk_ioctl(struct block_device *, unsigned int);
407:	int sg_scsi_ioctl(struct request_queue *, struct gendisk *, fmode_t, struct scsi_ioctl_command *);
522:	static int __blk_send_generic(struct request_queue *, struct gendisk *, int, int);
246:	static int blk_complete_sghdr_rq(struct request *, struct sg_io_hdr *, struct bio *);
220:	static int blk_fill_sghdr_rq(struct request_queue *, struct request *, struct sg_io_hdr *, fmode_t);
886:	static int blk_scsi_ioctl_init(void);
110:	static void blk_set_cmd_filter_defaults(struct blk_cmd_filter *);
710:	static int scsi_cdrom_send_packet(struct request_queue *, struct gendisk *, fmode_t, void *);
651:	static int scsi_get_cdrom_generic_arg(struct cdrom_generic_command *, const void *);
681:	static int scsi_put_cdrom_generic_arg(const struct cdrom_generic_command *, void *);
282:	static int sg_io(struct request_queue *, struct gendisk *, struct sg_io_hdr *, fmode_t);

File certs/blacklist.c:
159:	int add_key_to_revocation_list(const char *, size_t);
144:	int is_binary_blacklisted(const u8 *, size_t);
115:	int is_hash_blacklisted(const u8 *, size_t, const char *);
183:	int is_key_on_revocation_list(struct pkcs7_message *);
89:	int mark_hash_blacklisted(const char *);
71:	static void blacklist_describe(const struct key *, struct seq_file *);
67:	static void blacklist_free_preparse(struct key_preparsed_payload *);
199:	static int blacklist_init(void);
60:	static int blacklist_preparse(struct key_preparsed_payload *);
32:	static int blacklist_vet_description(const char *);
234:	static int load_revocation_certificate_list(void);

File certs/common.c:
7:	int load_certificate_list(const u8 *, const unsigned long, const struct key *);

File certs/system_keyring.c:
56:	int restrict_link_by_builtin_and_secondary_trusted(struct key *, const struct key_type *, const union key_payload *, struct key *);
38:	int restrict_link_by_builtin_trusted(struct key *, const struct key_type *, const union key_payload *, struct key *);
292:	struct key *search_trusted_key(struct key *, struct key_type *, char *);
182:	int verify_pkcs7_message_sig(const void *, size_t, struct pkcs7_message *, struct key *, enum key_being_used_for, int (*)(void *, const void *, size_t, size_t), void *);
267:	int verify_pkcs7_signature(const void *, size_t, const void *, size_t, struct key *, enum key_being_used_for, int (*)(void *, const void *, size_t, size_t), void *);
155:	static int load_pgp_public_keyring(void);
139:	static int load_system_certificate_list(void);
97:	static int system_trusted_keyring_init(void);

File crypto/acompress.c:
120:	struct acomp_req *acomp_request_alloc(struct crypto_acomp *);
133:	void acomp_request_free(struct acomp_req *);
105:	struct crypto_acomp *crypto_alloc_acomp(const char *, u32, u32);
112:	struct crypto_acomp *crypto_alloc_acomp_node(const char *, u32, u32, int);
150:	int crypto_register_acomp(struct acomp_alg *);
168:	int crypto_register_acomps(struct acomp_alg *, int);
162:	void crypto_unregister_acomp(struct acomp_alg *);
188:	void crypto_unregister_acomps(struct acomp_alg *, int);
52:	static void crypto_acomp_exit_tfm(struct crypto_tfm *);
82:	static unsigned int crypto_acomp_extsize(struct crypto_alg *);
60:	static int crypto_acomp_init_tfm(struct crypto_tfm *);
27:	static int crypto_acomp_report(struct sk_buff *, struct crypto_alg *);
47:	static void crypto_acomp_show(struct seq_file *, struct crypto_alg *);

File crypto/aead.c:
286:	int aead_register_instance(struct crypto_template *, struct aead_instance *);
100:	int crypto_aead_decrypt(struct aead_request *);
83:	int crypto_aead_encrypt(struct aead_request *);
64:	int crypto_aead_setauthsize(struct crypto_aead *, unsigned int);
43:	int crypto_aead_setkey(struct crypto_aead *, const u8 *, unsigned int);
214:	struct crypto_aead *crypto_alloc_aead(const char *, u32, u32);
205:	int crypto_grab_aead(struct crypto_aead_spawn *, struct crypto_instance *, const char *, u32, u32);
238:	int crypto_register_aead(struct aead_alg *);
257:	int crypto_register_aeads(struct aead_alg *, int);
251:	void crypto_unregister_aead(struct aead_alg *);
277:	void crypto_unregister_aeads(struct aead_alg *, int);
119:	static void crypto_aead_exit_tfm(struct crypto_tfm *);
184:	static void crypto_aead_free_instance(struct crypto_instance *);
127:	static int crypto_aead_init_tfm(struct crypto_tfm *);
146:	static int crypto_aead_report(struct sk_buff *, struct crypto_alg *);
171:	static void crypto_aead_show(struct seq_file *, struct crypto_alg *);
22:	static int setkey_unaligned(struct crypto_aead *, const u8 *, unsigned int);

File crypto/aes_generic.c:
1136:	int crypto_aes_set_key(struct crypto_tfm *, const u8 *, unsigned int);
1309:	static void aes_fini(void);
1304:	static int aes_init(void);
1246:	static void crypto_aes_decrypt(struct crypto_tfm *, u8 *, const u8 *);
1176:	static void crypto_aes_encrypt(struct crypto_tfm *, u8 *, const u8 *);

File crypto/af_alg.c:
277:	int af_alg_accept(struct sock *, struct socket *, bool);
1105:	struct af_alg_async_req *af_alg_alloc_areq(struct sock *, unsigned int);
1057:	void af_alg_async_cb(struct crypto_async_request *, int);
538:	unsigned int af_alg_count_tsgl(struct sock *, size_t, size_t);
1039:	void af_alg_free_resources(struct af_alg_async_req *);
442:	void af_alg_free_sg(struct af_alg_sgl *);
1136:	int af_alg_get_rsgl(struct sock *, struct msghdr *, int, struct af_alg_async_req *, size_t, size_t *);
404:	int af_alg_make_sg(struct af_alg_sgl *, struct iov_iter *, int);
1077:	__poll_t af_alg_poll(struct file *, struct socket *, poll_table *);
594:	void af_alg_pull_tsgl(struct sock *, size_t, struct scatterlist *, size_t);
59:	int af_alg_register_type(const struct af_alg_type *);
119:	int af_alg_release(struct socket *);
129:	void af_alg_release_parent(struct sock *);
830:	int af_alg_sendmsg(struct socket *, struct msghdr *, size_t, unsigned int);
983:	ssize_t af_alg_sendpage(struct socket *, struct page *, int, size_t, int);
89:	int af_alg_unregister_type(const struct af_alg_type *);
756:	int af_alg_wait_for_data(struct sock *, unsigned int, unsigned int);
730:	void af_alg_wmem_wakeup(struct sock *);
497:	static int af_alg_alloc_tsgl(struct sock *);
451:	static int af_alg_cmsg_send(struct msghdr *, struct af_alg_control *);
795:	static void af_alg_data_wakeup(struct sock *);
1209:	static void af_alg_exit(void);
662:	static void af_alg_free_areq_sgls(struct af_alg_async_req *);
1190:	static int af_alg_init(void);
699:	static int af_alg_wait_for_wmem(struct sock *, unsigned int);
338:	static int alg_accept(struct socket *, struct socket *, int, bool);
145:	static int alg_bind(struct socket *, struct sockaddr *, int);
372:	static int alg_create(struct net *, struct socket *, int, int);
40:	static const struct af_alg_type *alg_get_type(const char *);
205:	static int alg_setkey(struct sock *, sockptr_t, unsigned int);
228:	static int alg_setsockopt(struct socket *, int, int, sockptr_t, unsigned int);
365:	static void alg_sock_destruct(struct sock *);

File crypto/ahash.c:
632:	int ahash_register_instance(struct crypto_template *, struct ahash_instance *);
368:	int crypto_ahash_digest(struct ahash_request *);
340:	int crypto_ahash_final(struct ahash_request *);
354:	int crypto_ahash_finup(struct ahash_request *);
172:	int crypto_ahash_setkey(struct crypto_ahash *, const u8 *, unsigned int);
555:	struct crypto_ahash *crypto_alloc_ahash(const char *, u32, u32);
546:	int crypto_grab_ahash(struct crypto_ahash_spawn *, struct crypto_instance *, const char *, u32, u32);
562:	int crypto_has_ahash(const char *, u32, u32);
648:	bool crypto_hash_alg_has_setkey(struct hash_alg_common *);
79:	int crypto_hash_walk_done(struct crypto_hash_walk *, int);
119:	int crypto_hash_walk_first(struct ahash_request *, struct crypto_hash_walk *);
584:	int crypto_register_ahash(struct ahash_alg *);
603:	int crypto_register_ahashes(struct ahash_alg *, int);
597:	void crypto_unregister_ahash(struct ahash_alg *);
623:	void crypto_unregister_ahashes(struct ahash_alg *, int);
431:	static int ahash_def_finup(struct ahash_request *);
413:	static void ahash_def_finup_done1(struct crypto_async_request *, int);
385:	static void ahash_def_finup_done2(struct crypto_async_request *, int);
157:	static int ahash_nosetkey(struct crypto_ahash *, const u8 *, unsigned int);
285:	static void ahash_op_unaligned_done(struct crypto_async_request *, int);
256:	static void ahash_restore_req(struct ahash_request *, int);
199:	static int ahash_save_req(struct ahash_request *, crypto_completion_t);
137:	static int ahash_setkey_unaligned(struct crypto_ahash *, const u8 *, unsigned int);
447:	static void crypto_ahash_exit_tfm(struct crypto_tfm *);
484:	static unsigned int crypto_ahash_extsize(struct crypto_alg *);
492:	static void crypto_ahash_free_instance(struct crypto_instance *);
455:	static int crypto_ahash_init_tfm(struct crypto_tfm *);
500:	static int crypto_ahash_report(struct sk_buff *, struct crypto_alg *);
522:	static void crypto_ahash_show(struct seq_file *, struct crypto_alg *);
62:	static int hash_walk_new_entry(struct crypto_hash_walk *);
41:	static int hash_walk_next(struct crypto_hash_walk *);

File crypto/akcipher.c:
147:	int akcipher_register_instance(struct crypto_template *, struct akcipher_instance *);
102:	struct crypto_akcipher *crypto_alloc_akcipher(const char *, u32, u32);
93:	int crypto_grab_akcipher(struct crypto_akcipher_spawn *, struct crypto_instance *, const char *, u32, u32);
123:	int crypto_register_akcipher(struct akcipher_alg *);
141:	void crypto_unregister_akcipher(struct akcipher_alg *);
118:	static int akcipher_default_op(struct akcipher_request *);
50:	static void crypto_akcipher_exit_tfm(struct crypto_tfm *);
72:	static void crypto_akcipher_free_instance(struct crypto_instance *);
58:	static int crypto_akcipher_init_tfm(struct crypto_tfm *);
24:	static int crypto_akcipher_report(struct sk_buff *, struct crypto_alg *);
45:	static void crypto_akcipher_show(struct seq_file *, struct crypto_alg *);

File crypto/algapi.c:
994:	void __crypto_xor(u8 *, const u8 *, const u8 *, unsigned int);
1047:	unsigned int crypto_alg_extsize(struct crypto_alg *);
283:	void crypto_alg_tested(const char *, int);
853:	const char *crypto_attr_alg_name(struct rtattr *);
871:	int crypto_attr_u32(struct rtattr *, u32 *);
837:	int crypto_check_attr_type(struct rtattr **, u32, u32 *);
944:	struct crypto_async_request *crypto_dequeue_request(struct crypto_queue *);
704:	void crypto_drop_spawn(struct crypto_spawn *);
913:	int crypto_enqueue_request(struct crypto_queue *, struct crypto_async_request *);
936:	void crypto_enqueue_request_head(struct crypto_queue *, struct crypto_async_request *);
803:	struct crypto_attr_type *crypto_get_attr_type(struct rtattr **);
669:	int crypto_grab_spawn(struct crypto_spawn *, struct crypto_instance *, const char *, u32, u32);
976:	void crypto_inc(u8 *, unsigned int);
904:	void crypto_init_queue(struct crypto_queue *, unsigned int);
889:	int crypto_inst_setname(struct crypto_instance *, const char *, struct crypto_alg *);
593:	struct crypto_template *crypto_lookup_template(const char *);
412:	int crypto_register_alg(struct crypto_alg *);
467:	int crypto_register_algs(struct crypto_alg *, int);
600:	int crypto_register_instance(struct crypto_template *, struct crypto_instance *);
791:	int crypto_register_notifier(struct notifier_block *);
496:	int crypto_register_template(struct crypto_template *);
518:	int crypto_register_templates(struct crypto_template *, int);
380:	void crypto_remove_final(struct list_head *);
139:	void crypto_remove_spawns(struct crypto_alg *, struct list_head *, struct crypto_alg *);
744:	struct crypto_tfm *crypto_spawn_tfm(struct crypto_spawn *, u32, u32);
770:	void *crypto_spawn_tfm2(struct crypto_spawn *);
1054:	int crypto_type_has_alg(const char *, const struct crypto_type *, u32, u32);
447:	void crypto_unregister_alg(struct crypto_alg *);
487:	void crypto_unregister_algs(struct crypto_alg *, int);
654:	void crypto_unregister_instance(struct crypto_instance *);
797:	int crypto_unregister_notifier(struct notifier_block *);
536:	void crypto_unregister_template(struct crypto_template *);
565:	void crypto_unregister_templates(struct crypto_template *, int);
574:	static struct crypto_template *__crypto_lookup_template(const char *);
219:	static struct crypto_larval *__crypto_register_alg(struct crypto_alg *);
1288:	static void crypto_algapi_exit(void);
1282:	static int crypto_algapi_init(void);
31:	static int crypto_check_alg(struct crypto_alg *);
71:	static void crypto_destroy_instance(struct crypto_alg *);
113:	static void crypto_remove_instance(struct crypto_instance *, struct list_head *);
719:	static struct crypto_alg *crypto_spawn_alg(struct crypto_spawn *);
392:	static void crypto_wait_for_test(struct crypto_larval *);

File crypto/algboss.c:
276:	static void cryptomgr_exit(void);
271:	static int cryptomgr_init(void);
252:	static int cryptomgr_notify(struct notifier_block *, unsigned long, void *);
57:	static int cryptomgr_probe(void *);
80:	static int cryptomgr_schedule_probe(struct crypto_larval *);
215:	static int cryptomgr_schedule_test(struct crypto_alg *);
193:	static int cryptomgr_test(void *);

File crypto/algif_aead.c:
88:	static int _aead_recvmsg(struct msghdr *, int, size_t, struct socket *, struct socket *);
567:	static int aead_accept_parent(void *, struct sock *);
535:	static int aead_accept_parent_nokey(void *, struct sock *);
467:	static void *aead_bind(const char *, u32, u32);
376:	static int aead_check_key(struct socket *, struct socket *);
323:	static int aead_recvmsg(struct socket *, struct msghdr *, size_t, int);
435:	static int aead_recvmsg_nokey(struct socket *, struct msghdr *, size_t, int);
496:	static void aead_release(void *);
61:	static int aead_sendmsg(struct socket *, struct msghdr *, size_t);
411:	static int aead_sendmsg_nokey(struct socket *, struct msghdr *, size_t);
423:	static ssize_t aead_sendpage_nokey(struct socket *, struct page *, int, size_t, int);
505:	static int aead_setauthsize(void *, unsigned int);
512:	static int aead_setkey(void *, const u8 *, unsigned int);
519:	static void aead_sock_destruct(struct sock *);
595:	static void algif_aead_exit(void);
590:	static int algif_aead_init(void);
74:	static int crypto_aead_copy_sgl(struct crypto_sync_skcipher *, struct scatterlist *, struct scatterlist *, unsigned int);

File crypto/algif_hash.c:
473:	static void algif_hash_exit(void);
468:	static int algif_hash_init(void);
230:	static int hash_accept(struct socket *, struct socket *, int, bool);
363:	static int hash_accept_nokey(struct socket *, struct socket *, int, bool);
446:	static int hash_accept_parent(void *, struct sock *);
419:	static int hash_accept_parent_nokey(void *, struct sock *);
32:	static int hash_alloc_result(struct sock *, struct hash_ctx *);
394:	static void *hash_bind(const char *, u32, u32);
292:	static int hash_check_key(struct socket *, struct socket *);
183:	static int hash_recvmsg(struct socket *, struct msghdr *, size_t, int);
351:	static int hash_recvmsg_nokey(struct socket *, struct msghdr *, size_t, int);
399:	static void hash_release(void *);
63:	static int hash_sendmsg(struct socket *, struct msghdr *, size_t);
327:	static int hash_sendmsg_nokey(struct socket *, struct msghdr *, size_t);
131:	static ssize_t hash_sendpage(struct socket *, struct page *, int, size_t, int);
339:	static ssize_t hash_sendpage_nokey(struct socket *, struct page *, int, size_t, int);
404:	static int hash_setkey(void *, const u8 *, unsigned int);
409:	static void hash_sock_destruct(struct sock *);

File crypto/algif_rng.c:
73:	static int _rng_recvmsg(struct crypto_rng *, struct msghdr *, size_t, size_t, u8 *);
242:	static int rng_accept_parent(void *, struct sock *);
202:	static void *rng_bind(const char *, u32, u32);
335:	static void rng_exit(void);
330:	static int rng_init(void);
107:	static int rng_recvmsg(struct socket *, struct msghdr *, size_t, int);
221:	static void rng_release(void *);
277:	static int rng_setkey(void *, const u8 *, unsigned int);
232:	static void rng_sock_destruct(struct sock *);

File crypto/algif_skcipher.c:
50:	static int _skcipher_recvmsg(struct msghdr *, int, size_t, struct socket *, struct socket *);
380:	static void algif_skcipher_exit(void);
375:	static int algif_skcipher_init(void);
353:	static int skcipher_accept_parent(void *, struct sock *);
322:	static int skcipher_accept_parent_nokey(void *, struct sock *);
293:	static void *skcipher_bind(const char *, u32, u32);
202:	static int skcipher_check_key(struct socket *, struct socket *);
149:	static int skcipher_recvmsg(struct socket *, struct msghdr *, size_t, int);
261:	static int skcipher_recvmsg_nokey(struct socket *, struct msghdr *, size_t, int);
298:	static void skcipher_release(void *);
37:	static int skcipher_sendmsg(struct socket *, struct msghdr *, size_t);
237:	static int skcipher_sendmsg_nokey(struct socket *, struct msghdr *, size_t);
249:	static ssize_t skcipher_sendpage_nokey(struct socket *, struct page *, int, size_t, int);
303:	static int skcipher_setkey(void *, const u8 *, unsigned int);
308:	static void skcipher_sock_destruct(struct sock *);

File crypto/api.c:
344:	struct crypto_tfm *__crypto_alloc_tfm(struct crypto_alg *, u32, u32);
261:	struct crypto_alg *crypto_alg_mod_lookup(const char *, u32, u32);
402:	struct crypto_tfm *crypto_alloc_base(const char *, u32, u32);
517:	void *crypto_alloc_tfm_node(const char *, const struct crypto_type *, u32, u32, int);
436:	void *crypto_create_tfm_node(struct crypto_alg *, const struct crypto_type *, int);
561:	void crypto_destroy_tfm(void *, struct crypto_tfm *);
479:	struct crypto_alg *crypto_find_alg(const char *, const struct crypto_type *, u32, u32);
578:	int crypto_has_alg(const char *, u32, u32);
105:	struct crypto_larval *crypto_larval_alloc(const char *, u32, u32);
154:	void crypto_larval_kill(struct crypto_alg *);
35:	struct crypto_alg *crypto_mod_get(struct crypto_alg *);
41:	void crypto_mod_put(struct crypto_alg *);
247:	int crypto_probing_notify(unsigned long, void *);
592:	void crypto_req_done(struct crypto_async_request *, int);
336:	void crypto_shoot_alg(struct crypto_alg *);
55:	static struct crypto_alg *__crypto_alg_lookup(const char *, u32, u32);
193:	static struct crypto_alg *crypto_alg_lookup(const char *, u32, u32);
125:	static struct crypto_alg *crypto_larval_add(const char *, u32, u32);
95:	static void crypto_larval_destroy(struct crypto_alg *);
166:	static struct crypto_alg *crypto_larval_wait(struct crypto_alg *);

File crypto/asymmetric_keys/asymmetric_type.c:
208:	int __asymmetric_key_hex_to_key_id(const char *, struct asymmetric_key_id *, size_t);
538:	int asymmetric_key_eds_op(struct kernel_pkey_params *, const void *, void *);
135:	struct asymmetric_key_id *asymmetric_key_generate_id(const void *, size_t, const void *, size_t);
220:	struct asymmetric_key_id *asymmetric_key_hex_to_key_id(const char *);
173:	bool asymmetric_key_id_partial(const struct asymmetric_key_id *, const struct asymmetric_key_id *);
157:	bool asymmetric_key_id_same(const struct asymmetric_key_id *, const struct asymmetric_key_id *);
46:	struct key *find_asymmetric_key(struct key *, const struct asymmetric_key_id *, const struct asymmetric_key_id *, bool);
597:	int register_asymmetric_key_parser(struct asymmetric_key_parser *);
628:	void unregister_asymmetric_key_parser(struct asymmetric_key_parser *);
646:	static void asymmetric_key_cleanup(void);
247:	static bool asymmetric_key_cmp(const struct key *, const struct key_match_data *);
260:	static bool asymmetric_key_cmp_partial(const struct key *, const struct key_match_data *);
330:	static void asymmetric_key_describe(const struct key *, struct seq_file *);
434:	static void asymmetric_key_destroy(struct key *);
415:	static void asymmetric_key_free_preparse(struct key_preparsed_payload *);
641:	static int asymmetric_key_init(void);
322:	static void asymmetric_key_match_free(struct key_match_data *);
283:	static int asymmetric_key_match_preparse(struct key_match_data *);
369:	static int asymmetric_key_preparse(struct key_preparsed_payload *);
562:	static int asymmetric_key_verify_signature(struct kernel_pkey_params *, const void *, const void *);
474:	static struct key_restriction *asymmetric_lookup_restriction(const char *);

File crypto/asymmetric_keys/mscode_parser.c:
36:	int mscode_note_content_type(void *, size_t, unsigned char, const void *, size_t);
116:	int mscode_note_digest(void *, size_t, unsigned char, const void *, size_t);
68:	int mscode_note_digest_algo(void *, size_t, unsigned char, const void *, size_t);
20:	int mscode_parse(void *, const void *, size_t, size_t);

File crypto/asymmetric_keys/pgp_library.c:
186:	int pgp_parse_packets(const u8 *, size_t, struct pgp_parse_context *);
227:	int pgp_parse_public_key(const u8 **, size_t *, struct pgp_parse_pubkey *);
54:	static ssize_t pgp_parse_packet_header(const u8 **, size_t *, enum pgp_packet_tag *, u8 *);

File crypto/asymmetric_keys/pgp_preload.c:
99:	int preload_pgp_keys(const u8 *, size_t, struct key *);
33:	static int create_pgp_key(struct preload_pgp_keys_context *);
60:	static int found_pgp_key(struct pgp_parse_context *, enum pgp_packet_tag, u8, const u8 *, size_t);

File crypto/asymmetric_keys/pgp_public_key.c:
47:	static int pgp_calc_pkey_keyid(struct shash_desc *, struct pgp_parse_pubkey *, struct public_key *, struct public_key *);
120:	static int pgp_generate_fingerprint(struct pgp_key_data_parse_context *, struct pgp_parse_pubkey *, struct public_key *);
377:	static void pgp_key_exit(void);
265:	static struct asymmetric_key_ids *pgp_key_generate_id(struct pgp_key_data_parse_context *);
372:	static int pgp_key_init(void);
298:	static int pgp_key_parse(struct key_preparsed_payload *);
192:	static int pgp_process_public_key(struct pgp_parse_context *, enum pgp_packet_tag, u8, const u8 *, size_t);

File crypto/asymmetric_keys/pkcs7_parser.c:
282:	int pkcs7_check_content_type(void *, size_t, unsigned char, const void *, size_t);
376:	int pkcs7_extract_cert(void *, size_t, unsigned char, const void *, size_t);
57:	void pkcs7_free_message(struct pkcs7_message *);
185:	int pkcs7_get_content_data(const struct pkcs7_message *, const void **, size_t *, size_t *);
204:	int pkcs7_note_OID(void *, size_t, unsigned char, const void *, size_t);
416:	int pkcs7_note_certificate_list(void *, size_t, unsigned char, const void *, size_t);
434:	int pkcs7_note_content(void *, size_t, unsigned char, const void *, size_t);
454:	int pkcs7_note_data(void *, size_t, unsigned char, const void *, size_t);
641:	int pkcs7_note_signed_info(void *, size_t, unsigned char, const void *, size_t);
299:	int pkcs7_note_signeddata_version(void *, size_t, unsigned char, const void *, size_t);
333:	int pkcs7_note_signerinfo_version(void *, size_t, unsigned char, const void *, size_t);
115:	struct pkcs7_message *pkcs7_parse_message(const void *, size_t);
471:	int pkcs7_sig_note_authenticated_attr(void *, size_t, unsigned char, const void *, size_t);
223:	int pkcs7_sig_note_digest_algo(void *, size_t, unsigned char, const void *, size_t);
595:	int pkcs7_sig_note_issuer(void *, size_t, unsigned char, const void *, size_t);
261:	int pkcs7_sig_note_pkey_algo(void *, size_t, unsigned char, const void *, size_t);
582:	int pkcs7_sig_note_serial(void *, size_t, unsigned char, const void *, size_t);
554:	int pkcs7_sig_note_set_of_authattrs(void *, size_t, unsigned char, const void *, size_t);
624:	int pkcs7_sig_note_signature(void *, size_t, unsigned char, const void *, size_t);
608:	int pkcs7_sig_note_skid(void *, size_t, unsigned char, const void *, size_t);

File crypto/asymmetric_keys/pkcs7_trust.c:
158:	int pkcs7_validate_trust(struct pkcs7_message *, struct key *);
22:	static int pkcs7_validate_trust_one(struct pkcs7_signed_info *, struct key *, struct pkcs7_message *);

File crypto/asymmetric_keys/pkcs7_verify.c:
125:	int pkcs7_get_digest(struct pkcs7_message *, const u8 **, u32 *, enum hash_algo *);
487:	int pkcs7_supply_detached_data(struct pkcs7_message *, const void *, size_t);
404:	int pkcs7_verify(struct pkcs7_message *, enum key_being_used_for);
22:	static int pkcs7_digest(struct pkcs7_message *, struct pkcs7_signed_info *);
159:	static int pkcs7_find_key(struct pkcs7_signed_info *, struct pkcs7_message *, struct pkcs7_message *);
326:	static int pkcs7_verify_one(struct pkcs7_message *, struct pkcs7_signed_info *);
200:	static int pkcs7_verify_sig_chain(struct pkcs7_message *, struct pkcs7_signed_info *);

File crypto/asymmetric_keys/public_key.c:
42:	void public_key_free(struct public_key *);
309:	int public_key_verify_signature(const struct public_key *, const struct public_key_signature *);
30:	static void public_key_describe(const struct key *, struct seq_file *);
55:	static void public_key_destroy(void *, void *);
390:	static int public_key_verify_signature_2(const struct key *, const struct public_key_signature *);
65:	static int software_key_determine_akcipher(const char *, const char *, const struct public_key *, char *);
166:	static int software_key_eds_op(struct kernel_pkey_params *, const void *, void *);
105:	static int software_key_query(const struct kernel_pkey_params *, struct kernel_pkey_query *);

File crypto/asymmetric_keys/restrict.c:
230:	int restrict_link_by_key_or_keyring(struct key *, const struct key_type *, const union key_payload *, struct key *);
257:	int restrict_link_by_key_or_keyring_chain(struct key *, const struct key_type *, const union key_payload *, struct key *);
70:	int restrict_link_by_signature(struct key *, const struct key_type *, const union key_payload *, struct key *);
24:	static int ca_keys_setup(char *);
118:	static int key_or_keyring_common(struct key *, const struct key_type *, const union key_payload *, struct key *, bool);

File crypto/asymmetric_keys/signature.c:
122:	int create_signature(struct kernel_pkey_params *, const void *, void *);
101:	int decrypt_blob(struct kernel_pkey_params *, const void *, void *);
80:	int encrypt_blob(struct kernel_pkey_params *, const void *, void *);
23:	void public_key_signature_free(struct public_key_signature *);
42:	int query_asymmetric_key(const struct kernel_pkey_params *, struct kernel_pkey_query *);
137:	int verify_signature(const struct key *, const struct public_key_signature *);

File crypto/asymmetric_keys/verify_pefile.c:
416:	int verify_pefile_signature(const void *, unsigned int, struct key *, enum key_being_used_for);
318:	static int pefile_digest_pe(const void *, unsigned int, struct pefile_context *);
241:	static int pefile_digest_pe_contents(const void *, unsigned int, struct pefile_context *, struct shash_desc *);
22:	static int pefile_parse_binary(const void *, unsigned int, struct pefile_context *);
122:	static int pefile_strip_sig_wrapper(const void *, struct pefile_context *);

File crypto/asymmetric_keys/x509_cert_parser.c:
656:	int x509_akid_note_kid(void *, size_t, unsigned char, const void *, size_t);
679:	int x509_akid_note_name(void *, size_t, unsigned char, const void *, size_t);
695:	int x509_akid_note_serial(void *, size_t, unsigned char, const void *, size_t);
63:	struct x509_certificate *x509_cert_parse(const void *, size_t);
560:	int x509_decode_time(time64_t *, size_t, unsigned char, const unsigned char *, size_t);
457:	int x509_extract_key_data(void *, size_t, unsigned char, const void *, size_t);
309:	int x509_extract_name_segment(void *, size_t, unsigned char, const void *, size_t);
46:	void x509_free_certificate(struct x509_certificate *);
155:	int x509_note_OID(void *, size_t, unsigned char, const void *, size_t);
413:	int x509_note_issuer(void *, size_t, unsigned char, const void *, size_t);
645:	int x509_note_not_after(void *, size_t, unsigned char, const void *, size_t);
637:	int x509_note_not_before(void *, size_t, unsigned char, const void *, size_t);
436:	int x509_note_params(void *, size_t, unsigned char, const void *, size_t);
192:	int x509_note_pkey_algo(void *, size_t, unsigned char, const void *, size_t);
296:	int x509_note_serial(void *, size_t, unsigned char, const void *, size_t);
263:	int x509_note_signature(void *, size_t, unsigned char, const void *, size_t);
423:	int x509_note_subject(void *, size_t, unsigned char, const void *, size_t);
175:	int x509_note_tbs_certificate(void *, size_t, unsigned char, const void *, size_t);
503:	int x509_process_extension(void *, size_t, unsigned char, const void *, size_t);
338:	static int x509_fabricate_name(struct x509_parse_context *, char **, size_t, unsigned char, size_t);

File crypto/asymmetric_keys/x509_public_key.c:
104:	int x509_check_for_self_signed(struct x509_certificate *);
23:	int x509_get_sig_params(struct x509_certificate *);
263:	static void x509_key_exit(void);
258:	static int x509_key_init(void);
159:	static int x509_key_preparse(struct key_preparsed_payload *);

File crypto/blake2b_generic.c:
98:	static void blake2b_compress(struct blake2b_state *, const u8 *);
216:	static int blake2b_final(struct shash_desc *, u8 *);
161:	static int blake2b_init(struct shash_desc *);
302:	static void blake2b_mod_fini(void);
297:	static int blake2b_mod_init(void);
147:	static int blake2b_setkey(struct crypto_shash *, const u8 *, unsigned int);
184:	static int blake2b_update(struct shash_desc *, const u8 *, unsigned int);

File crypto/cbc.c:
173:	static int crypto_cbc_create(struct crypto_template *, struct rtattr **);
154:	static int crypto_cbc_decrypt(struct skcipher_request *);
121:	static int crypto_cbc_decrypt_inplace(struct skcipher_walk *, struct crypto_skcipher *);
91:	static int crypto_cbc_decrypt_segment(struct skcipher_walk *, struct crypto_skcipher *);
72:	static int crypto_cbc_encrypt(struct skcipher_request *);
44:	static int crypto_cbc_encrypt_inplace(struct skcipher_walk *, struct crypto_skcipher *);
16:	static int crypto_cbc_encrypt_segment(struct skcipher_walk *, struct crypto_skcipher *);
212:	static void crypto_cbc_module_exit(void);
207:	static int crypto_cbc_module_init(void);

File crypto/cfb.c:
200:	static int crypto_cfb_create(struct crypto_template *, struct rtattr **);
178:	static int crypto_cfb_decrypt(struct skcipher_request *);
150:	static int crypto_cfb_decrypt_inplace(struct skcipher_walk *, struct crypto_skcipher *);
127:	static int crypto_cfb_decrypt_segment(struct skcipher_walk *, struct crypto_skcipher *);
102:	static int crypto_cfb_encrypt(struct skcipher_request *);
80:	static int crypto_cfb_encrypt_inplace(struct skcipher_walk *, struct crypto_skcipher *);
57:	static int crypto_cfb_encrypt_segment(struct skcipher_walk *, struct crypto_skcipher *);
42:	static void crypto_cfb_final(struct skcipher_walk *, struct crypto_skcipher *);
242:	static void crypto_cfb_module_exit(void);
237:	static int crypto_cfb_module_init(void);

File crypto/cipher.c:
86:	void crypto_cipher_decrypt_one(struct crypto_cipher *, u8 *, const u8 *);
79:	void crypto_cipher_encrypt_one(struct crypto_cipher *, u8 *, const u8 *);
42:	int crypto_cipher_setkey(struct crypto_cipher *, const u8 *, unsigned int);
19:	static int setkey_unaligned(struct crypto_cipher *, const u8 *, unsigned int);

File crypto/compress.c:
12:	int crypto_comp_compress(struct crypto_comp *, const u8 *, unsigned int, u8 *, unsigned int *);
23:	int crypto_comp_decompress(struct crypto_comp *, const u8 *, unsigned int, u8 *, unsigned int *);

File crypto/crc32c_generic.c:
114:	static int chksum_digest(struct shash_desc *, const u8 *, unsigned int, u8 *);
92:	static int chksum_final(struct shash_desc *, u8 *);
106:	static int chksum_finup(struct shash_desc *, const u8 *, unsigned int, u8 *);
57:	static int chksum_init(struct shash_desc *);
72:	static int chksum_setkey(struct crypto_shash *, const u8 *, unsigned int);
83:	static int chksum_update(struct shash_desc *, const u8 *, unsigned int);
122:	static int crc32c_cra_init(struct crypto_tfm *);
156:	static void crc32c_mod_fini(void);
151:	static int crc32c_mod_init(void);

File crypto/crct10dif_common.c:
70:	__u16 crc_t10dif_generic(__u16, const unsigned char *, size_t);

File crypto/crct10dif_generic.c:
82:	static int chksum_digest(struct shash_desc *, const u8 *, unsigned int, u8 *);
60:	static int chksum_final(struct shash_desc *, u8 *);
74:	static int chksum_finup(struct shash_desc *, const u8 *, unsigned int, u8 *);
42:	static int chksum_init(struct shash_desc *);
51:	static int chksum_update(struct shash_desc *, const u8 *, unsigned int);
110:	static void crct10dif_mod_fini(void);
105:	static int crct10dif_mod_init(void);

File crypto/cryptd.c:
1038:	struct crypto_aead *cryptd_aead_child(struct cryptd_aead *);
981:	struct crypto_shash *cryptd_ahash_child(struct cryptd_ahash *);
996:	bool cryptd_ahash_queued(struct cryptd_ahash *);
1013:	struct cryptd_aead *cryptd_alloc_aead(const char *, u32, u32);
956:	struct cryptd_ahash *cryptd_alloc_ahash(const char *, u32, u32);
904:	struct cryptd_skcipher *cryptd_alloc_skcipher(const char *, u32, u32);
1054:	void cryptd_free_aead(struct cryptd_aead *);
1004:	void cryptd_free_ahash(struct cryptd_ahash *);
947:	void cryptd_free_skcipher(struct cryptd_skcipher *);
989:	struct shash_desc *cryptd_shash_desc(struct ahash_request *);
931:	struct crypto_skcipher *cryptd_skcipher_child(struct cryptd_skcipher *);
939:	bool cryptd_skcipher_queued(struct cryptd_skcipher *);
713:	static void cryptd_aead_crypt(struct aead_request *, struct crypto_aead *, int, int (*)(struct aead_request *));
756:	static void cryptd_aead_decrypt(struct crypto_async_request *, int);
783:	static int cryptd_aead_decrypt_enqueue(struct aead_request *);
746:	static void cryptd_aead_encrypt(struct crypto_async_request *, int);
778:	static int cryptd_aead_encrypt_enqueue(struct aead_request *);
807:	static void cryptd_aead_exit_tfm(struct crypto_aead *);
813:	static void cryptd_aead_free(struct aead_instance *);
788:	static int cryptd_aead_init_tfm(struct crypto_aead *);
704:	static int cryptd_aead_setauthsize(struct crypto_aead *, unsigned int);
695:	static int cryptd_aead_setkey(struct crypto_aead *, const u8 *, unsigned int);
878:	static int cryptd_create(struct crypto_template *, struct rtattr **);
821:	static int cryptd_create_aead(struct crypto_template *, struct rtattr **, struct crypto_attr_type *, struct cryptd_queue *);
635:	static int cryptd_create_hash(struct crypto_template *, struct rtattr **, struct crypto_attr_type *, struct cryptd_queue *);
368:	static int cryptd_create_skcipher(struct crypto_template *, struct rtattr **, struct crypto_attr_type *, struct cryptd_queue *);
125:	static int cryptd_enqueue_request(struct cryptd_queue *, struct crypto_async_request *);
1089:	static void cryptd_exit(void);
113:	static void cryptd_fini_queue(struct cryptd_queue *);
477:	static void cryptd_hash_complete(struct ahash_request *, int);
583:	static void cryptd_hash_digest(struct crypto_async_request *, int);
604:	static int cryptd_hash_digest_enqueue(struct ahash_request *);
444:	static void cryptd_hash_exit_tfm(struct crypto_tfm *);
609:	static int cryptd_hash_export(struct ahash_request *, void *);
541:	static void cryptd_hash_final(struct crypto_async_request *, int);
557:	static int cryptd_hash_final_enqueue(struct ahash_request *);
562:	static void cryptd_hash_finup(struct crypto_async_request *, int);
578:	static int cryptd_hash_finup_enqueue(struct ahash_request *);
627:	static void cryptd_hash_free(struct ahash_instance *);
616:	static int cryptd_hash_import(struct ahash_request *, const void *);
492:	static void cryptd_hash_init(struct crypto_async_request *, int);
513:	static int cryptd_hash_init_enqueue(struct ahash_request *);
425:	static int cryptd_hash_init_tfm(struct crypto_tfm *);
451:	static int cryptd_hash_setkey(struct crypto_ahash *, const u8 *, unsigned int);
518:	static void cryptd_hash_update(struct crypto_async_request *, int);
536:	static int cryptd_hash_update_enqueue(struct ahash_request *);
1063:	static int cryptd_init(void);
210:	static int cryptd_init_instance(struct crypto_instance *, struct crypto_alg *);
157:	static void cryptd_queue_worker(struct work_struct *);
240:	static void cryptd_skcipher_complete(struct skcipher_request *, int);
283:	static void cryptd_skcipher_decrypt(struct crypto_async_request *, int);
330:	static int cryptd_skcipher_decrypt_enqueue(struct skcipher_request *);
255:	static void cryptd_skcipher_encrypt(struct crypto_async_request *, int);
325:	static int cryptd_skcipher_encrypt_enqueue(struct skcipher_request *);
353:	static void cryptd_skcipher_exit_tfm(struct crypto_skcipher *);
360:	static void cryptd_skcipher_free(struct skcipher_instance *);
335:	static int cryptd_skcipher_init_tfm(struct crypto_skcipher *);
227:	static int cryptd_skcipher_setkey(struct crypto_skcipher *, const u8 *, unsigned int);

File crypto/crypto_null.c:
153:	struct crypto_sync_skcipher *crypto_get_default_null_skcipher(void);
177:	void crypto_put_default_null_skcipher(void);
214:	static void crypto_null_mod_fini(void);
188:	static int crypto_null_mod_init(void);
27:	static int null_compress(struct crypto_tfm *, const u8 *, unsigned int, u8 *, unsigned int *);
71:	static void null_crypt(struct crypto_tfm *, u8 *, const u8 *);
53:	static int null_digest(struct shash_desc *, const u8 *, unsigned int, u8 *);
48:	static int null_final(struct shash_desc *, u8 *);
37:	static int null_init(struct shash_desc *);
76:	static int null_skcipher_crypt(struct skcipher_request *);
42:	static int null_update(struct shash_desc *, const u8 *, unsigned int);

File crypto/ctr.c:
126:	static int crypto_ctr_create(struct crypto_template *, struct rtattr **);
98:	static int crypto_ctr_crypt(struct skcipher_request *);
71:	static int crypto_ctr_crypt_inplace(struct skcipher_walk *, struct crypto_cipher *);
348:	static void crypto_ctr_module_exit(void);
342:	static int crypto_ctr_module_init(void);
256:	static int crypto_rfc3686_create(struct crypto_template *, struct rtattr **);
189:	static int crypto_rfc3686_crypt(struct skcipher_request *);
241:	static void crypto_rfc3686_exit_tfm(struct crypto_skcipher *);
248:	static void crypto_rfc3686_free(struct skcipher_instance *);
217:	static int crypto_rfc3686_init_tfm(struct crypto_skcipher *);
168:	static int crypto_rfc3686_setkey(struct crypto_skcipher *, const u8 *, unsigned int);

File crypto/deflate.c:
140:	static void *deflate_alloc_ctx(struct crypto_scomp *);
42:	static int deflate_comp_init(struct deflate_ctx *, int);
205:	static int deflate_compress(struct crypto_tfm *, const u8 *, unsigned int, u8 *, unsigned int *);
71:	static int deflate_decomp_init(struct deflate_ctx *, int);
261:	static int deflate_decompress(struct crypto_tfm *, const u8 *, unsigned int, u8 *, unsigned int *);
169:	static void deflate_exit(struct crypto_tfm *);
163:	static void deflate_free_ctx(struct crypto_scomp *, void *);
150:	static int deflate_init(struct crypto_tfm *);
328:	static void deflate_mod_fini(void);
311:	static int deflate_mod_init(void);
213:	static int deflate_scompress(struct crypto_scomp *, const u8 *, unsigned int, u8 *, unsigned int *, void *);
269:	static int deflate_sdecompress(struct crypto_scomp *, const u8 *, unsigned int, u8 *, unsigned int *, void *);
122:	static void *gen_deflate_alloc_ctx(int, struct crypto_scomp *);
145:	static void *zlib_deflate_alloc_ctx(struct crypto_scomp *);

File crypto/drbg.c:
1068:	static void drbg_async_seed(struct work_struct *);
318:	static int drbg_ctr_bcc(struct drbg_state *, unsigned char *, struct list_head *, const unsigned char *);
396:	static int drbg_ctr_df(struct drbg_state *, unsigned char *, size_t, struct list_head *);
593:	static int drbg_ctr_generate(struct drbg_state *, unsigned char *, unsigned int, struct list_head *);
530:	static int drbg_ctr_update(struct drbg_state *, struct list_head *, int);
2140:	static void drbg_exit(void);
1699:	static int drbg_fini_hash_kernel(struct drbg_state *);
1732:	static int drbg_fini_sym_kernel(struct drbg_state *);
241:	static int drbg_fips_continuous_test(struct drbg_state *, const unsigned char *);
1345:	static int drbg_generate(struct drbg_state *, unsigned char *, unsigned int, struct drbg_string *);
820:	static int drbg_hash_df(struct drbg_state *, unsigned char *, size_t, struct list_head *);
975:	static int drbg_hash_generate(struct drbg_state *, unsigned char *, unsigned int, struct list_head *);
934:	static int drbg_hash_hashgen(struct drbg_state *, unsigned char *, unsigned int);
902:	static int drbg_hash_process_addtl(struct drbg_state *, struct list_head *);
859:	static int drbg_hash_update(struct drbg_state *, struct list_head *, int);
705:	static int drbg_hmac_generate(struct drbg_state *, unsigned char *, unsigned int, struct list_head *);
653:	static int drbg_hmac_update(struct drbg_state *, struct list_head *, int);
2107:	static int drbg_init(void);
1674:	static int drbg_init_hash_kernel(struct drbg_state *);
1754:	static int drbg_init_sym_kernel(struct drbg_state *);
1557:	static int drbg_instantiate(struct drbg_state *, struct drbg_string *, int, bool);
1931:	static void drbg_kcapi_cleanup(struct crypto_tfm *);
1718:	static int drbg_kcapi_hash(unsigned char *, const struct list_head *, struct drbg_state *, struct drbg_state *);
1922:	static int drbg_kcapi_init(struct crypto_tfm *);
1945:	static int drbg_kcapi_random(struct crypto_rng *, const u8 *, unsigned int, u8 *, unsigned int);
1965:	static int drbg_kcapi_seed(struct crypto_rng *, const u8 *, unsigned int);
1654:	static void drbg_kcapi_set_entropy(struct crypto_rng *, const u8 *, unsigned int);
1822:	static int drbg_kcapi_sym(struct drbg_state *, unsigned char *, const struct drbg_string *, const struct drbg_string *);
1834:	static int drbg_kcapi_sym_ctr(struct drbg_state *, u8 *, u32, u8 *, u32);
1493:	static void drbg_schedule_async_seed(struct random_ready_callback *);
1117:	static int drbg_seed(struct drbg_state *, struct drbg_string *, bool);
1629:	static int drbg_uninstantiate(struct drbg_state *);

File crypto/ecb.c:
61:	static int crypto_ecb_create(struct crypto_template *, struct rtattr **);
15:	static int crypto_ecb_crypt(struct skcipher_request *, struct crypto_cipher *, void (*)(struct crypto_tfm *, u8 *, const u8 *));
52:	static int crypto_ecb_decrypt(struct skcipher_request *);
43:	static int crypto_ecb_encrypt(struct skcipher_request *);
93:	static void crypto_ecb_module_exit(void);
88:	static int crypto_ecb_module_init(void);

File crypto/fips.c:
65:	void fips_fail_notify(void);
23:	static int fips_enable(char *);
78:	static void fips_exit(void);
72:	static int fips_init(void);

File crypto/gcm.c:
674:	static int crypto_gcm_base_create(struct crypto_template *, struct rtattr **);
658:	static int crypto_gcm_create(struct crypto_template *, struct rtattr **);
576:	static int crypto_gcm_create_common(struct crypto_template *, struct rtattr **, const char *, const char *);
501:	static int crypto_gcm_decrypt(struct aead_request *);
451:	static int crypto_gcm_encrypt(struct aead_request *);
559:	static void crypto_gcm_exit_tfm(struct crypto_aead *);
567:	static void crypto_gcm_free(struct aead_instance *);
152:	static void crypto_gcm_init_common(struct aead_request *);
521:	static int crypto_gcm_init_tfm(struct crypto_aead *);
1152:	static void crypto_gcm_module_exit(void);
1134:	static int crypto_gcm_module_init(void);
146:	static int crypto_gcm_setauthsize(struct crypto_aead *, unsigned int);
92:	static int crypto_gcm_setkey(struct crypto_aead *, const u8 *, unsigned int);
465:	static int crypto_gcm_verify(struct aead_request *);
827:	static int crypto_rfc4106_create(struct crypto_template *, struct rtattr **);
722:	static struct aead_request *crypto_rfc4106_crypt(struct aead_request *);
776:	static int crypto_rfc4106_decrypt(struct aead_request *);
763:	static int crypto_rfc4106_encrypt(struct aead_request *);
814:	static void crypto_rfc4106_exit_tfm(struct crypto_aead *);
821:	static void crypto_rfc4106_free(struct aead_instance *);
789:	static int crypto_rfc4106_init_tfm(struct crypto_aead *);
709:	static int crypto_rfc4106_setauthsize(struct crypto_aead *, unsigned int);
691:	static int crypto_rfc4106_setkey(struct crypto_aead *, const u8 *, unsigned int);
959:	static int crypto_rfc4543_copy_src_to_dst(struct aead_request *, bool);
1042:	static int crypto_rfc4543_create(struct crypto_template *, struct rtattr **);
928:	static int crypto_rfc4543_crypt(struct aead_request *, bool);
981:	static int crypto_rfc4543_decrypt(struct aead_request *);
975:	static int crypto_rfc4543_encrypt(struct aead_request *);
1025:	static void crypto_rfc4543_exit_tfm(struct crypto_aead *);
987:	static int crypto_rfc4543_init_tfm(struct crypto_aead *);
917:	static int crypto_rfc4543_setauthsize(struct crypto_aead *, unsigned int);
899:	static int crypto_rfc4543_setkey(struct crypto_aead *, const u8 *, unsigned int);
490:	static int gcm_dec_hash_continue(struct aead_request *, u32);
480:	static void gcm_decrypt_done(struct crypto_async_request *, int);
411:	static int gcm_enc_copy_hash(struct aead_request *, u32);
424:	static int gcm_encrypt_continue(struct aead_request *, u32);
436:	static void gcm_encrypt_done(struct crypto_async_request *, int);
398:	static int gcm_hash(struct aead_request *, u32);
345:	static int gcm_hash_assoc_continue(struct aead_request *, u32);
358:	static void gcm_hash_assoc_done(struct crypto_async_request *, int);
316:	static int gcm_hash_assoc_remain_continue(struct aead_request *, u32);
329:	static void gcm_hash_assoc_remain_done(struct crypto_async_request *, int);
286:	static int gcm_hash_crypt_continue(struct aead_request *, u32);
301:	static void gcm_hash_crypt_done(struct crypto_async_request *, int);
264:	static int gcm_hash_crypt_remain_continue(struct aead_request *, u32);
270:	static void gcm_hash_crypt_remain_done(struct crypto_async_request *, int);
373:	static int gcm_hash_init_continue(struct aead_request *, u32);
383:	static void gcm_hash_init_done(struct crypto_async_request *, int);
223:	static int gcm_hash_len(struct aead_request *, u32);
249:	static void gcm_hash_len_done(struct crypto_async_request *, int);

File crypto/geniv.c:
153:	void aead_exit_geniv(struct crypto_aead *);
41:	struct aead_instance *aead_geniv_alloc(struct crypto_template *, struct rtattr **);
109:	int aead_init_geniv(struct crypto_aead *);
35:	static void aead_geniv_free(struct aead_instance *);
27:	static int aead_geniv_setauthsize(struct crypto_aead *, unsigned int);
19:	static int aead_geniv_setkey(struct crypto_aead *, const u8 *, unsigned int);

File crypto/gf128mul.c:
400:	void gf128mul_4k_bbe(be128 *, const struct gf128mul_4k *);
385:	void gf128mul_4k_lle(be128 *, const struct gf128mul_4k *);
312:	void gf128mul_64k_bbe(be128 *, const struct gf128mul_64k *);
208:	void gf128mul_bbe(be128 *, const be128 *);
302:	void gf128mul_free_64k(struct gf128mul_64k *);
363:	struct gf128mul_4k *gf128mul_init_4k_bbe(const be128 *);
341:	struct gf128mul_4k *gf128mul_init_4k_lle(const be128 *);
260:	struct gf128mul_64k *gf128mul_init_64k_bbe(const be128 *);
170:	void gf128mul_lle(be128 *, const be128 *);
159:	void gf128mul_x8_ble(le128 *, const le128 *);

File crypto/ghash-generic.c:
143:	static void ghash_exit_tfm(struct crypto_tfm *);
131:	static int ghash_final(struct shash_desc *, u8 *);
46:	static int ghash_init(struct shash_desc *);
173:	static void ghash_mod_exit(void);
168:	static int ghash_mod_init(void);
55:	static int ghash_setkey(struct crypto_shash *, const u8 *, unsigned int);
78:	static int ghash_update(struct shash_desc *, const u8 *, unsigned int);

File crypto/hmac.c:
165:	static int hmac_create(struct crypto_template *, struct rtattr **);
159:	static void hmac_exit_tfm(struct crypto_shash *);
83:	static int hmac_export(struct shash_desc *, void *);
113:	static int hmac_final(struct shash_desc *, u8 *);
126:	static int hmac_finup(struct shash_desc *, const u8 *, unsigned int, u8 *);
90:	static int hmac_import(struct shash_desc *, const void *);
100:	static int hmac_init(struct shash_desc *);
141:	static int hmac_init_tfm(struct crypto_shash *);
249:	static void hmac_module_exit(void);
244:	static int hmac_module_init(void);
40:	static int hmac_setkey(struct crypto_shash *, const u8 *, unsigned int);
105:	static int hmac_update(struct shash_desc *, const u8 *, unsigned int);

File crypto/jitterentropy-kcapi.c:
63:	int jent_fips_enabled(void);
87:	void jent_get_nstime(__u64 *);
73:	void jent_memcpy(void *, const void *, unsigned int);
68:	void jent_panic(char *);
53:	void *jent_zalloc(unsigned int);
58:	void jent_zfree(void *);
127:	static void jent_kcapi_cleanup(struct crypto_tfm *);
114:	static int jent_kcapi_init(struct crypto_tfm *);
138:	static int jent_kcapi_random(struct crypto_rng *, const u8 *, unsigned int, u8 *, unsigned int);
178:	static int jent_kcapi_reset(struct crypto_rng *, const u8 *, unsigned int);
212:	static void jent_mod_exit(void);
200:	static int jent_mod_init(void);

File crypto/jitterentropy.c:
657:	struct rand_data *jent_entropy_collector_alloc(unsigned int, unsigned int);
691:	void jent_entropy_collector_free(struct rand_data *);
698:	int jent_entropy_init(void);
592:	int jent_read_entropy(struct rand_data *, unsigned char *, unsigned int);
147:	static void jent_apt_insert(struct rand_data *, unsigned int);
133:	static void jent_apt_reset(struct rand_data *, unsigned int);
548:	static void jent_gen_entropy(struct rand_data *);
300:	static int jent_health_failure(struct rand_data *);
381:	static void jent_lfsr_time(struct rand_data *, __u64, __u64, int);
325:	static __u64 jent_loop_shuffle(struct rand_data *, unsigned int, unsigned int);
516:	static int jent_measure_jitter(struct rand_data *);
462:	static void jent_memaccess(struct rand_data *, __u64);
235:	static int jent_rct_failure(struct rand_data *);
191:	static void jent_rct_insert(struct rand_data *, int);
264:	static int jent_stuck(struct rand_data *, __u64);

File crypto/kpp.c:
84:	struct crypto_kpp *crypto_alloc_kpp(const char *, u32, u32);
99:	int crypto_register_kpp(struct kpp_alg *);
108:	void crypto_unregister_kpp(struct kpp_alg *);
49:	static void crypto_kpp_exit_tfm(struct crypto_tfm *);
57:	static int crypto_kpp_init_tfm(struct crypto_tfm *);
24:	static int crypto_kpp_report(struct sk_buff *, struct crypto_alg *);
44:	static void crypto_kpp_show(struct seq_file *, struct crypto_alg *);

File crypto/lzo-rle.c:
18:	static void *lzorle_alloc_ctx(struct crypto_scomp *);
67:	static int lzorle_compress(struct crypto_tfm *, const u8 *, unsigned int, u8 *, unsigned int *);
97:	static int lzorle_decompress(struct crypto_tfm *, const u8 *, unsigned int, u8 *, unsigned int *);
45:	static void lzorle_exit(struct crypto_tfm *);
40:	static void lzorle_free_ctx(struct crypto_scomp *, void *);
29:	static int lzorle_init(struct crypto_tfm *);
152:	static void lzorle_mod_fini(void);
135:	static int lzorle_mod_init(void);
75:	static int lzorle_scompress(struct crypto_scomp *, const u8 *, unsigned int, u8 *, unsigned int *, void *);
103:	static int lzorle_sdecompress(struct crypto_scomp *, const u8 *, unsigned int, u8 *, unsigned int *, void *);

File crypto/lzo.c:
18:	static void *lzo_alloc_ctx(struct crypto_scomp *);
67:	static int lzo_compress(struct crypto_tfm *, const u8 *, unsigned int, u8 *, unsigned int *);
97:	static int lzo_decompress(struct crypto_tfm *, const u8 *, unsigned int, u8 *, unsigned int *);
45:	static void lzo_exit(struct crypto_tfm *);
40:	static void lzo_free_ctx(struct crypto_scomp *, void *);
29:	static int lzo_init(struct crypto_tfm *);
152:	static void lzo_mod_fini(void);
135:	static int lzo_mod_init(void);
75:	static int lzo_scompress(struct crypto_scomp *, const u8 *, unsigned int, u8 *, unsigned int *, void *);
103:	static int lzo_sdecompress(struct crypto_scomp *, const u8 *, unsigned int, u8 *, unsigned int *, void *);

File crypto/md5.c:
202:	static int md5_export(struct shash_desc *, void *);
174:	static int md5_final(struct shash_desc *, u8 *);
210:	static int md5_import(struct shash_desc *, const void *);
129:	static int md5_init(struct shash_desc *);
240:	static void md5_mod_fini(void);
235:	static int md5_mod_init(void);
40:	static void md5_transform(__u32 *, const __u32 *);
142:	static int md5_update(struct shash_desc *, const u8 *, unsigned int);

File crypto/memneq.c:
156:	unsigned long __crypto_memneq(const void *, const void *, size_t);

File crypto/proc.c:
97:	void crypto_exit_proc(void);
92:	void crypto_init_proc(void);
26:	static void *c_next(struct seq_file *, void *, loff_t *);
36:	static int c_show(struct seq_file *, void *);
20:	static void *c_start(struct seq_file *, loff_t *);
31:	static void c_stop(struct seq_file *, void *);

File crypto/rng.c:
110:	struct crypto_rng *crypto_alloc_rng(const char *, u32, u32);
156:	int crypto_del_default_rng(void);
116:	int crypto_get_default_rng(void);
147:	void crypto_put_default_rng(void);
177:	int crypto_register_rng(struct rng_alg *);
198:	int crypto_register_rngs(struct rng_alg *, int);
31:	int crypto_rng_reset(struct crypto_rng *, const u8 *, unsigned int);
192:	void crypto_unregister_rng(struct rng_alg *);
218:	void crypto_unregister_rngs(struct rng_alg *, int);
57:	static int crypto_rng_init_tfm(struct crypto_tfm *);
70:	static int crypto_rng_report(struct sk_buff *, struct crypto_alg *);
91:	static void crypto_rng_show(struct seq_file *, struct crypto_alg *);

File crypto/rsa-pkcs1pad.c:
598:	static int pkcs1pad_create(struct crypto_template *, struct rtattr **);
346:	static int pkcs1pad_decrypt(struct akcipher_request *);
277:	static int pkcs1pad_decrypt_complete(struct akcipher_request *, int);
331:	static void pkcs1pad_decrypt_complete_cb(struct crypto_async_request *, int);
229:	static int pkcs1pad_encrypt(struct akcipher_request *);
174:	static int pkcs1pad_encrypt_sign_complete(struct akcipher_request *, int);
213:	static void pkcs1pad_encrypt_sign_complete_cb(struct crypto_async_request *, int);
582:	static void pkcs1pad_exit_tfm(struct crypto_akcipher *);
589:	static void pkcs1pad_free(struct akcipher_instance *);
149:	static unsigned int pkcs1pad_get_max_size(struct crypto_akcipher *);
567:	static int pkcs1pad_init_tfm(struct crypto_akcipher *);
128:	static int pkcs1pad_set_priv_key(struct crypto_akcipher *, const void *, unsigned int);
107:	static int pkcs1pad_set_pub_key(struct crypto_akcipher *, const void *, unsigned int);
162:	static void pkcs1pad_sg_set_buf(struct scatterlist *, void *, size_t, struct scatterlist *);
379:	static int pkcs1pad_sign(struct akcipher_request *);
532:	static int pkcs1pad_verify(struct akcipher_request *);
436:	static int pkcs1pad_verify_complete(struct akcipher_request *, int);
509:	static void pkcs1pad_verify_complete_cb(struct crypto_async_request *, int);

File crypto/rsa.c:
93:	static int rsa_dec(struct akcipher_request *);
54:	static int rsa_enc(struct akcipher_request *);
281:	static void rsa_exit(void);
241:	static void rsa_exit_tfm(struct crypto_akcipher *);
264:	static int rsa_init(void);
234:	static unsigned int rsa_max_size(struct crypto_akcipher *);
193:	static int rsa_set_priv_key(struct crypto_akcipher *, const void *, unsigned int);
156:	static int rsa_set_pub_key(struct crypto_akcipher *, const void *, unsigned int);

File crypto/rsa_helper.c:
62:	int rsa_get_d(void *, size_t, unsigned char, const void *, size_t);
107:	int rsa_get_dp(void *, size_t, unsigned char, const void *, size_t);
122:	int rsa_get_dq(void *, size_t, unsigned char, const void *, size_t);
47:	int rsa_get_e(void *, size_t, unsigned char, const void *, size_t);
17:	int rsa_get_n(void *, size_t, unsigned char, const void *, size_t);
77:	int rsa_get_p(void *, size_t, unsigned char, const void *, size_t);
92:	int rsa_get_q(void *, size_t, unsigned char, const void *, size_t);
137:	int rsa_get_qinv(void *, size_t, unsigned char, const void *, size_t);
229:	int rsa_parse_priv_key(struct rsa_key *, const void *, unsigned int);
247:	int rsa_parse_priv_key_raw(struct rsa_key *, const void *, unsigned int);
189:	int rsa_parse_pub_key(struct rsa_key *, const void *, unsigned int);
207:	int rsa_parse_pub_key_raw(struct rsa_key *, const void *, unsigned int);

File crypto/scatterwalk.c:
26:	void scatterwalk_copychunks(void *, struct scatter_walk *, size_t, int);
72:	struct scatterlist *scatterwalk_ffwd(struct scatterlist *, struct scatterlist *, unsigned int);
55:	void scatterwalk_map_and_copy(void *, struct scatterlist *, unsigned int, unsigned int, int);

File crypto/scompress.c:
213:	struct acomp_req *crypto_acomp_scomp_alloc_ctx(struct acomp_req *);
232:	void crypto_acomp_scomp_free_ctx(struct acomp_req *);
186:	int crypto_init_scomp_ops_async(struct crypto_tfm *);
257:	int crypto_register_scomp(struct scomp_alg *);
275:	int crypto_register_scomps(struct scomp_alg *, int);
269:	void crypto_unregister_scomp(struct scomp_alg *);
295:	void crypto_unregister_scomps(struct scomp_alg *, int);
174:	static void crypto_exit_scomp_ops_async(struct crypto_tfm *);
83:	static int crypto_scomp_alloc_scratches(void);
68:	static void crypto_scomp_free_scratches(void);
108:	static int crypto_scomp_init_tfm(struct crypto_tfm *);
42:	static int crypto_scomp_report(struct sk_buff *, struct crypto_alg *);
63:	static void crypto_scomp_show(struct seq_file *, struct crypto_alg *);
120:	static int scomp_acomp_comp_decomp(struct acomp_req *, int);
164:	static int scomp_acomp_compress(struct acomp_req *);
169:	static int scomp_acomp_decompress(struct acomp_req *);

File crypto/seqiv.c:
136:	static int seqiv_aead_create(struct crypto_template *, struct rtattr **);
109:	static int seqiv_aead_decrypt(struct aead_request *);
48:	static int seqiv_aead_encrypt(struct aead_request *);
39:	static void seqiv_aead_encrypt_complete(struct crypto_async_request *, int);
21:	static void seqiv_aead_encrypt_complete2(struct aead_request *, int);
178:	static void seqiv_module_exit(void);
173:	static int seqiv_module_init(void);

File crypto/sha1_generic.c:
55:	int crypto_sha1_finup(struct shash_desc *, const u8 *, unsigned int, u8 *);
42:	int crypto_sha1_update(struct shash_desc *, const u8 *, unsigned int);
49:	static int sha1_final(struct shash_desc *, u8 *);
84:	static void sha1_generic_mod_fini(void);
79:	static int sha1_generic_mod_init(void);

File crypto/sha256_generic.c:
65:	int crypto_sha256_finup(struct shash_desc *, const u8 *, unsigned int, u8 *);
48:	int crypto_sha256_update(struct shash_desc *, const u8 *, unsigned int);
42:	static int crypto_sha224_init(struct shash_desc *);
56:	static int crypto_sha256_final(struct shash_desc *, u8 *);
36:	static int crypto_sha256_init(struct shash_desc *);
108:	static void sha256_generic_mod_fini(void);
103:	static int sha256_generic_mod_init(void);

File crypto/shash.c:
517:	struct crypto_shash *crypto_alloc_shash(const char *, u32, u32);
508:	int crypto_grab_shash(struct crypto_shash_spawn *, struct crypto_instance *, const char *, u32, u32);
377:	int crypto_init_shash_ops_async(struct crypto_tfm *);
555:	int crypto_register_shash(struct shash_alg *);
574:	int crypto_register_shashes(struct shash_alg *, int);
36:	bool crypto_shash_alg_has_setkey(struct shash_alg *);
204:	int crypto_shash_digest(struct shash_desc *, const u8 *, unsigned int, u8 *);
163:	int crypto_shash_final(struct shash_desc *, u8 *);
183:	int crypto_shash_finup(struct shash_desc *, const u8 *, unsigned int, u8 *);
69:	int crypto_shash_setkey(struct crypto_shash *, const u8 *, unsigned int);
221:	int crypto_shash_tfm_digest(struct crypto_shash *, const u8 *, unsigned int, u8 *);
121:	int crypto_shash_update(struct shash_desc *, const u8 *, unsigned int);
568:	void crypto_unregister_shash(struct shash_alg *);
594:	void crypto_unregister_shashes(struct shash_alg *, int);
321:	int shash_ahash_digest(struct ahash_request *, struct shash_desc *);
290:	int shash_ahash_finup(struct ahash_request *, struct shash_desc *);
267:	int shash_ahash_update(struct ahash_request *, struct shash_desc *);
619:	void shash_free_singlespawn_instance(struct shash_instance *);
603:	int shash_register_instance(struct crypto_template *, struct shash_instance *);
370:	static void crypto_exit_shash_ops_async(struct crypto_tfm *);
416:	static void crypto_shash_exit_tfm(struct crypto_tfm *);
454:	static void crypto_shash_free_instance(struct crypto_instance *);
424:	static int crypto_shash_init_tfm(struct crypto_tfm *);
462:	static int crypto_shash_report(struct sk_buff *, struct crypto_alg *);
485:	static void crypto_shash_show(struct seq_file *, struct crypto_alg *);
345:	static int shash_async_digest(struct ahash_request *);
355:	static int shash_async_export(struct ahash_request *, void *);
285:	static int shash_async_final(struct ahash_request *);
311:	static int shash_async_finup(struct ahash_request *);
360:	static int shash_async_import(struct ahash_request *, const void *);
257:	static int shash_async_init(struct ahash_request *);
249:	static int shash_async_setkey(struct crypto_ahash *, const u8 *, unsigned int);
280:	static int shash_async_update(struct ahash_request *);
237:	static int shash_default_export(struct shash_desc *, void *);
243:	static int shash_default_import(struct shash_desc *, const void *);
197:	static int shash_digest_unaligned(struct shash_desc *, const u8 *, unsigned int, u8 *);
135:	static int shash_final_unaligned(struct shash_desc *, u8 *);
176:	static int shash_finup_unaligned(struct shash_desc *, const u8 *, unsigned int, u8 *);
23:	static int shash_no_setkey(struct crypto_shash *, const u8 *, unsigned int);
524:	static int shash_prepare_alg(struct shash_alg *);
42:	static int shash_setkey_unaligned(struct crypto_shash *, const u8 *, unsigned int);
91:	static int shash_update_unaligned(struct shash_desc *, const u8 *, unsigned int);

File crypto/simd.c:
456:	struct simd_aead_alg *simd_aead_create(const char *, const char *);
386:	struct simd_aead_alg *simd_aead_create_compat(const char *, const char *, const char *);
469:	void simd_aead_free(struct simd_aead_alg *);
476:	int simd_register_aeads_compat(struct aead_alg *, int, struct simd_aead_alg **);
229:	int simd_register_skciphers_compat(struct skcipher_alg *, int, struct simd_skcipher_alg **);
209:	struct simd_skcipher_alg *simd_skcipher_create(const char *, const char *);
139:	struct simd_skcipher_alg *simd_skcipher_create_compat(const char *, const char *, const char *);
222:	void simd_skcipher_free(struct simd_skcipher_alg *);
510:	void simd_unregister_aeads(struct aead_alg *, int, struct simd_aead_alg **);
263:	void simd_unregister_skciphers(struct skcipher_alg *, int, struct simd_skcipher_alg **);
331:	static int simd_aead_decrypt(struct aead_request *);
310:	static int simd_aead_encrypt(struct aead_request *);
352:	static void simd_aead_exit(struct crypto_aead *);
359:	static int simd_aead_init(struct crypto_aead *);
302:	static int simd_aead_setauthsize(struct crypto_aead *, unsigned int);
290:	static int simd_aead_setkey(struct crypto_aead *, const u8 *, unsigned int);
83:	static int simd_skcipher_decrypt(struct skcipher_request *);
62:	static int simd_skcipher_encrypt(struct skcipher_request *);
104:	static void simd_skcipher_exit(struct crypto_skcipher *);
111:	static int simd_skcipher_init(struct crypto_skcipher *);
50:	static int simd_skcipher_setkey(struct crypto_skcipher *, const u8 *, unsigned int);

File crypto/skcipher.c:
758:	struct crypto_skcipher *crypto_alloc_skcipher(const char *, u32, u32);
765:	struct crypto_sync_skcipher *crypto_alloc_sync_skcipher(const char *, u32, u32);
749:	int crypto_grab_skcipher(struct crypto_skcipher_spawn *, struct crypto_instance *, const char *, u32, u32);
789:	int crypto_has_skcipher(const char *, u32, u32);
815:	int crypto_register_skcipher(struct skcipher_alg *);
834:	int crypto_register_skciphers(struct skcipher_alg *, int);
641:	int crypto_skcipher_decrypt(struct skcipher_request *);
624:	int crypto_skcipher_encrypt(struct skcipher_request *);
599:	int crypto_skcipher_setkey(struct crypto_skcipher *, const u8 *, unsigned int);
828:	void crypto_unregister_skcipher(struct skcipher_alg *);
854:	void crypto_unregister_skciphers(struct skcipher_alg *, int);
934:	struct skcipher_instance *skcipher_alloc_instance_simple(struct crypto_template *, struct rtattr **);
863:	int skcipher_register_instance(struct crypto_template *, struct skcipher_instance *);
561:	int skcipher_walk_aead_decrypt(struct skcipher_walk *, struct aead_request *, bool);
552:	int skcipher_walk_aead_encrypt(struct skcipher_walk *, struct aead_request *, bool);
499:	int skcipher_walk_async(struct skcipher_walk *, struct skcipher_request *);
493:	void skcipher_walk_atomise(struct skcipher_walk *);
181:	void skcipher_walk_complete(struct skcipher_walk *, int);
104:	int skcipher_walk_done(struct skcipher_walk *, int);
476:	int skcipher_walk_virt(struct skcipher_walk *, struct skcipher_request *, bool);
658:	static void crypto_skcipher_exit_tfm(struct crypto_tfm *);
682:	static void crypto_skcipher_free_instance(struct crypto_instance *);
666:	static int crypto_skcipher_init_tfm(struct crypto_tfm *);
709:	static int crypto_skcipher_report(struct sk_buff *, struct crypto_alg *);
692:	static void crypto_skcipher_show(struct seq_file *, struct crypto_alg *);
396:	static int skcipher_copy_iv(struct skcipher_walk *);
905:	static void skcipher_exit_tfm_simple(struct crypto_skcipher *);
912:	static void skcipher_free_instance_simple(struct skcipher_instance *);
890:	static int skcipher_init_tfm_simple(struct crypto_skcipher *);
285:	static int skcipher_next_copy(struct skcipher_walk *);
224:	static int skcipher_next_slow(struct skcipher_walk *, unsigned int);
879:	static int skcipher_setkey_simple(struct crypto_skcipher *, const u8 *, unsigned int);
578:	static int skcipher_setkey_unaligned(struct crypto_skcipher *, const u8 *, unsigned int);
510:	static int skcipher_walk_aead_common(struct skcipher_walk *, struct aead_request *, bool);
431:	static int skcipher_walk_first(struct skcipher_walk *);
343:	static int skcipher_walk_next(struct skcipher_walk *);

File crypto/testmgr.c:
5691:	int alg_test(const char *, const char *, u32, u32);
1797:	static int __alg_test_hash(const struct hash_testvec *, unsigned int, const char *, u32, u32, unsigned int, const char *);
165:	static int __testmgr_alloc_buf(char **, int);
5622:	static void alg_check_test_descs_order(void);
2558:	static int alg_test_aead(const struct alg_test_desc *, const char *, u32, u32);
4132:	static int alg_test_akcipher(const struct alg_test_desc *, const char *, u32, u32);
3542:	static int alg_test_comp(const struct alg_test_desc *, const char *, u32, u32);
3632:	static int alg_test_cprng(const struct alg_test_desc *, const char *, u32, u32);
3580:	static int alg_test_crc32c(const char *, u32, u32, const struct alg_test_desc *);
3721:	static int alg_test_drbg(const struct alg_test_desc *, const char *, u32, u32);
1883:	static int alg_test_hash(const struct alg_test_desc *, const char *, u32, u32);
3904:	static int alg_test_kpp(const struct alg_test_desc *, const char *, u32, u32);
4152:	static int alg_test_null(const struct alg_test_desc *, const char *, u32, u32);
3129:	static int alg_test_skcipher(const struct alg_test_desc *, const char *, u32, u32);
707:	static struct cipher_test_sglists *alloc_cipher_test_sglists(void);
1764:	static int alloc_shash(const char *, u32, u32, struct crypto_shash **, struct shash_desc **);
739:	static int build_cipher_test_sglists(struct cipher_test_sglists *, const struct testvec_config *, unsigned int, unsigned int, unsigned int, const struct kvec *, unsigned int);
554:	static int build_test_sglist(struct test_sglist *, const struct test_sg_division *, const unsigned int, const unsigned int, struct iov_iter *, const struct test_sg_division **);
1138:	static int check_hash_result(const char *, const u8 *, unsigned int, const char *, const char *, const struct testvec_config *, const struct hash_testvec *, const struct hash_testvec *);
1339:	static int check_nonfinal_ahash_op(const char *, int, u8 *, unsigned int, const char *, const char *, const struct testvec_config *);
3746:	static int do_test_kpp(struct crypto_kpp *, const struct kpp_testvec *, const char *);
3653:	static int drbg_cavs_test(const struct drbg_testvec *, int, const char *, u32, u32);
158:	static void hexdump(unsigned char *, unsigned int);
687:	static bool is_test_sglist_corrupted(const struct test_sglist *);
776:	static int prepare_keybuf(const u8 *, unsigned int, const struct testvec_config *, unsigned int, const u8 **, const u8 **);
3289:	static int test_acomp(struct crypto_acomp *, const struct comp_testvec *, const struct comp_testvec *, int, int);
2540:	static int test_aead(const char *, int, const struct aead_test_suite *, struct aead_request *, struct cipher_test_sglists *);
1926:	static int test_aead_vec_cfg(const char *, int, const struct aead_testvec *, const char *, const struct testvec_config *, struct aead_request *, struct cipher_test_sglists *);
1358:	static int test_ahash_vec_cfg(const char *, const struct hash_testvec *, const char *, const struct testvec_config *, struct ahash_request *, struct test_sglist *, u8 *);
3930:	static int test_akcipher_one(struct crypto_akcipher *, const struct akcipher_testvec *);
2611:	static int test_cipher(struct crypto_cipher *, int, const struct cipher_testvec *, unsigned int);
3183:	static int test_comp(struct crypto_comp *, const struct comp_testvec *, const struct comp_testvec *, int, int);
3458:	static int test_cprng(struct crypto_rng *, const struct cprng_testvec *, unsigned int);
1174:	static int test_shash_vec_cfg(const char *, const struct hash_testvec *, const char *, const struct testvec_config *, struct shash_desc *, struct test_sglist *, u8 *);
3111:	static int test_skcipher(const char *, int, const struct cipher_test_suite *, struct skcipher_request *, struct cipher_test_sglists *);
2698:	static int test_skcipher_vec_cfg(const char *, int, const struct cipher_testvec *, const char *, const struct testvec_config *, struct skcipher_request *, struct cipher_test_sglists *);
456:	static bool valid_sg_divisions(const struct test_sg_division *, int *, unsigned int);
481:	static bool valid_testvec_config(const struct testvec_config *);
649:	static int verify_correct_output(const struct test_sglist *, const char *, unsigned int, unsigned int, bool);

File crypto/xxhash_generic.c:
60:	static int xxhash64_digest(struct shash_desc *, const u8 *, unsigned int, u8 *);
51:	static int xxhash64_final(struct shash_desc *, u8 *);
31:	static int xxhash64_init(struct shash_desc *);
20:	static int xxhash64_setkey(struct crypto_shash *, const u8 *, unsigned int);
41:	static int xxhash64_update(struct shash_desc *, const u8 *, unsigned int);
94:	static void xxhash_mod_fini(void);
89:	static int xxhash_mod_init(void);

File crypto/zstd.c:
106:	static void *zstd_alloc_ctx(struct crypto_scomp *);
32:	static int zstd_comp_init(struct zstd_ctx *);
164:	static int zstd_compress(struct crypto_tfm *, const u8 *, unsigned int, u8 *, unsigned int *);
192:	static int zstd_decompress(struct crypto_tfm *, const u8 *, unsigned int, u8 *, unsigned int *);
143:	static void zstd_exit(struct crypto_tfm *);
137:	static void zstd_free_ctx(struct crypto_scomp *, void *);
124:	static int zstd_init(struct crypto_tfm *);
247:	static void zstd_mod_fini(void);
232:	static int zstd_mod_init(void);
172:	static int zstd_scompress(struct crypto_scomp *, const u8 *, unsigned int, u8 *, unsigned int *, void *);
200:	static int zstd_sdecompress(struct crypto_scomp *, const u8 *, unsigned int, u8 *, unsigned int *, void *);

File drivers/acpi/ac.c:
215:	static int ac_do_not_check_pmic_quirk(const struct dmi_system_id *);
221:	static int ac_only_quirk(const struct dmi_system_id *);
263:	static int acpi_ac_add(struct acpi_device *);
189:	static int acpi_ac_battery_notify(struct notifier_block *, unsigned long, void *);
384:	static void acpi_ac_exit(void);
96:	static int acpi_ac_get_state(struct acpi_ac *);
356:	static int acpi_ac_init(void);
153:	static void acpi_ac_notify(struct acpi_device *, u32);
338:	static int acpi_ac_remove(struct acpi_device *);
315:	static int acpi_ac_resume(struct device *);
123:	static int get_ac_property(struct power_supply *, enum power_supply_property, union power_supply_propval *);
209:	static int thinkpad_e530_quirk(const struct dmi_system_id *);

File drivers/acpi/acpi_adxl.c:
103:	int adxl_decode(u64, u64 *);
86:	const char * const *adxl_get_component_names(void);
39:	static union acpi_object *adxl_dsm(int, union acpi_object *);
138:	static int adxl_init(void);

File drivers/acpi/acpi_apd.c:
253:	void acpi_apd_init(void);
183:	static int acpi_apd_create_device(struct acpi_device *, const struct acpi_device_id *);
46:	static int acpi_apd_setup(struct apd_private_data *);
70:	static int fch_misc_setup(struct apd_private_data *);
63:	static int misc_check_res(struct acpi_resource *, void *);

File drivers/acpi/acpi_cmos_rtc.c:
82:	void acpi_cmos_rtc_init(void);
26:	static acpi_status acpi_cmos_rtc_space_handler(u32, acpi_physical_address, u32, u64 *, void *, void *);
52:	static int acpi_install_cmos_rtc_space_handler(struct acpi_device *, const struct acpi_device_id *);
69:	static void acpi_remove_cmos_rtc_space_handler(struct acpi_device *);

File drivers/acpi/acpi_lpat.c:
143:	void acpi_lpat_free_conversion_table(struct acpi_lpat_conversion_table *);
89:	struct acpi_lpat_conversion_table *acpi_lpat_get_conversion_table(acpi_handle);
23:	int acpi_lpat_raw_to_temp(struct acpi_lpat_conversion_table *, int);
57:	int acpi_lpat_temp_to_raw(struct acpi_lpat_conversion_table *, int);

File drivers/acpi/acpi_lpit.c:
148:	void acpi_init_lpit(void);
86:	int lpit_read_residency_count_address(u64 *);
71:	static ssize_t low_power_idle_cpu_residency_us_show(struct device *, struct device_attribute *, char *);
56:	static ssize_t low_power_idle_system_residency_us_show(struct device *, struct device_attribute *, char *);
24:	static int lpit_read_residency_counter_us(u64 *, bool);
97:	static void lpit_update_residency(struct lpit_residency_info *, struct acpi_lpit_native *);

File drivers/acpi/acpi_lpss.c:
1334:	void acpi_lpss_init(void);
877:	static int acpi_lpss_activate(struct device *);
1309:	static void acpi_lpss_bind(struct device *);
618:	static int acpi_lpss_create_device(struct acpi_device *, const struct acpi_device_id *);
546:	static bool acpi_lpss_dep(struct acpi_device *, acpi_handle);
905:	static void acpi_lpss_dismiss(struct device *);
1052:	static int acpi_lpss_do_suspend_late(struct device *);
570:	static void acpi_lpss_link_consumer(struct device *, const struct lpss_device_links *);
586:	static void acpi_lpss_link_supplier(struct device *, const struct lpss_device_links *);
1254:	static int acpi_lpss_platform_notify(struct notifier_block *, unsigned long, void *);
1180:	static int acpi_lpss_poweroff_late(struct device *);
1193:	static int acpi_lpss_poweroff_noirq(struct device *);
1147:	static int acpi_lpss_restore_early(struct device *);
1157:	static int acpi_lpss_restore_noirq(struct device *);
1027:	static int acpi_lpss_resume(struct device *);
1101:	static int acpi_lpss_resume_early(struct device *);
1114:	static int acpi_lpss_resume_noirq(struct device *);
1218:	static int acpi_lpss_runtime_resume(struct device *);
1211:	static int acpi_lpss_runtime_suspend(struct device *);
826:	static void acpi_lpss_save_ctx(struct device *, struct lpss_private_data *);
785:	static void acpi_lpss_set_ltr(struct device *, s32);
1005:	static int acpi_lpss_suspend(struct device *, bool);
1063:	static int acpi_lpss_suspend_late(struct device *);
1073:	static int acpi_lpss_suspend_noirq(struct device *);
1322:	static void acpi_lpss_unbind(struct device *);
212:	static void bsw_pwm_setup(struct lpss_private_data *);
180:	static void byt_i2c_setup(struct lpss_private_data *);
167:	static void byt_pwm_setup(struct lpss_private_data *);
377:	static int is_memory(struct acpi_resource *, void *);
146:	static void lpss_deassert_reset(struct lpss_private_data *);
929:	static void lpss_iosf_enter_d3_state(void);
754:	static ssize_t lpss_ltr_mode_show(struct device *, struct device_attribute *, char *);
739:	static ssize_t lpss_ltr_show(struct device *, struct device_attribute *, char *);
711:	static int lpss_reg_read(struct device *, unsigned int, u32 *);
128:	static void lpss_uart_setup(struct lpss_private_data *);
519:	static int match_hid_uid(struct device *, const void *);
391:	static int register_device_clock(struct acpi_device *, struct lpss_private_data *);

File drivers/acpi/acpi_memhotplug.c:
325:	void acpi_memory_hotplug_init(void);
145:	static int acpi_bind_memblk(struct memory_block *, void *);
267:	static int acpi_memory_device_add(struct acpi_device *, const struct acpi_device_id *);
257:	static void acpi_memory_device_free(struct acpi_memory_device *);
311:	static void acpi_memory_device_remove(struct acpi_device *);
169:	static int acpi_memory_enable_device(struct acpi_memory_device *);
60:	static acpi_status acpi_memory_get_resource(struct acpi_resource *, void *);
237:	static void acpi_memory_remove_memory(struct acpi_memory_device *);
157:	static int acpi_unbind_memblk(struct memory_block *, void *);
335:	static int disable_acpi_memory_hotplug(char *);

File drivers/acpi/acpi_platform.c:
97:	struct platform_device *acpi_create_platform_device(struct acpi_device *, struct property_entry *);
170:	void acpi_platform_init(void);
40:	static int acpi_platform_device_remove_notify(struct notifier_block *, unsigned long, void *);

File drivers/acpi/acpi_pnp.c:
381:	bool acpi_is_pnp_device(struct acpi_device *);
387:	void acpi_pnp_init(void);
353:	static int acpi_pnp_attach(struct acpi_device *, const struct acpi_device_id *);
338:	static bool acpi_pnp_match(const char *, const struct acpi_device_id **);
318:	static bool matching_id(const char *, const char *);

File drivers/acpi/acpi_processor.c:
686:	bool acpi_duplicate_processor_id(int);
529:	void acpi_early_processor_osc(void);
165:	int acpi_map_cpu(acpi_handle, phys_cpuid_t, u32, int *);
712:	bool acpi_processor_claim_cst_control(void);
746:	int acpi_processor_evaluate_cst(acpi_handle, u32, struct acpi_processor_power *);
701:	void acpi_processor_init(void);
171:	int acpi_unmap_cpu(int);
181:	void arch_unregister_cpu(int);
493:	static acpi_status acpi_hwp_native_thermal_lvt_osc(acpi_handle, u32, void *, void **);
367:	static int acpi_processor_add(struct acpi_device *, const struct acpi_device_id *);
566:	static int acpi_processor_container_attach(struct acpi_device *, const struct acpi_device_id *);
229:	static int acpi_processor_get_info(struct acpi_device *);
633:	static acpi_status acpi_processor_ids_walk(acpi_handle, u32, void *, void **);
447:	static void acpi_processor_remove(struct acpi_device *);

File drivers/acpi/acpi_watchdog.c:
88:	bool acpi_has_watchdog(void);
102:	void acpi_watchdog_init(void);
60:	static const struct acpi_table_wdat *acpi_watchdog_get_wdat(void);
95:	static int disable_acpi_watchdog(char *);

File drivers/acpi/acpica/dsargs.c:
191:	acpi_status acpi_ds_get_bank_field_arguments(union acpi_operand_object *);
242:	acpi_status acpi_ds_get_buffer_arguments(union acpi_operand_object *);
146:	acpi_status acpi_ds_get_buffer_field_arguments(union acpi_operand_object *);
286:	acpi_status acpi_ds_get_package_arguments(union acpi_operand_object *);
332:	acpi_status acpi_ds_get_region_arguments(union acpi_operand_object *);
43:	static acpi_status acpi_ds_execute_arguments(struct acpi_namespace_node *, struct acpi_namespace_node *, u32, u8 *);

File drivers/acpi/acpica/dscontrol.c:
35:	acpi_status acpi_ds_exec_begin_control_op(struct acpi_walk_state *, union acpi_parse_object *);
134:	acpi_status acpi_ds_exec_end_control_op(struct acpi_walk_state *, union acpi_parse_object *);

File drivers/acpi/acpica/dsdebug.c:
198:	void acpi_ds_dump_method_stack(acpi_status, struct acpi_walk_state *, union acpi_parse_object *);

File drivers/acpi/acpica/dsfield.c:
673:	acpi_status acpi_ds_create_bank_field(union acpi_parse_object *, struct acpi_namespace_node *, struct acpi_walk_state *);
120:	acpi_status acpi_ds_create_buffer_field(union acpi_parse_object *, struct acpi_walk_state *);
473:	acpi_status acpi_ds_create_field(union acpi_parse_object *, struct acpi_namespace_node *, struct acpi_walk_state *);
766:	acpi_status acpi_ds_create_index_field(union acpi_parse_object *, struct acpi_namespace_node *, struct acpi_walk_state *);
553:	acpi_status acpi_ds_init_field_objects(union acpi_parse_object *, struct acpi_walk_state *);
260:	static acpi_status acpi_ds_get_field_names(struct acpi_create_field_info *, struct acpi_walk_state *, union acpi_parse_object *);

File drivers/acpi/acpica/dsinit.c:
157:	acpi_status acpi_ds_initialize_objects(u32, struct acpi_namespace_node *);
46:	static acpi_status acpi_ds_init_one_object(acpi_handle, void *, void **, u32);

File drivers/acpi/acpica/dsmethod.c:
55:	acpi_status acpi_ds_auto_serialize_method(struct acpi_namespace_node *, union acpi_operand_object *);
292:	acpi_status acpi_ds_begin_method_execution(struct acpi_namespace_node *, union acpi_operand_object *, struct acpi_walk_state *);
456:	acpi_status acpi_ds_call_control_method(struct acpi_thread_state *, struct acpi_walk_state *, union acpi_parse_object *);
178:	acpi_status acpi_ds_method_error(acpi_status, struct acpi_walk_state *);
603:	acpi_status acpi_ds_restart_control_method(struct acpi_walk_state *, union acpi_operand_object *);
693:	void acpi_ds_terminate_control_method(union acpi_operand_object *, struct acpi_walk_state *);
122:	static acpi_status acpi_ds_detect_named_opcodes(struct acpi_walk_state *, union acpi_parse_object **);

File drivers/acpi/acpica/dsmthdat.c:
102:	void acpi_ds_method_data_delete_all(struct acpi_walk_state *);
213:	acpi_status acpi_ds_method_data_get_node(u8, u32, struct acpi_walk_state *, struct acpi_namespace_node **);
333:	acpi_status acpi_ds_method_data_get_value(u8, u32, struct acpi_walk_state *, union acpi_operand_object **);
55:	void acpi_ds_method_data_init(struct acpi_walk_state *);
158:	acpi_status acpi_ds_method_data_init_args(union acpi_operand_object **, u32, struct acpi_walk_state *);
498:	acpi_status acpi_ds_store_object_to_local(u8, u32, union acpi_operand_object *, struct acpi_walk_state *);
279:	static acpi_status acpi_ds_method_data_set_value(u8, u32, union acpi_operand_object *, struct acpi_walk_state *);

File drivers/acpi/acpica/dsobject.c:
151:	acpi_status acpi_ds_build_internal_buffer_obj(struct acpi_walk_state *, union acpi_parse_object *, u32, union acpi_operand_object **);
36:	acpi_status acpi_ds_build_internal_object(struct acpi_walk_state *, union acpi_parse_object *, union acpi_operand_object **);
253:	acpi_status acpi_ds_create_node(struct acpi_walk_state *, struct acpi_namespace_node *, union acpi_parse_object *);
319:	acpi_status acpi_ds_init_object_from_op(struct acpi_walk_state *, union acpi_parse_object *, u16, union acpi_operand_object **);

File drivers/acpi/acpica/dsopcode.c:
680:	acpi_status acpi_ds_eval_bank_field_operands(struct acpi_walk_state *, union acpi_parse_object *);
268:	acpi_status acpi_ds_eval_buffer_field_operands(struct acpi_walk_state *, union acpi_parse_object *);
568:	acpi_status acpi_ds_eval_data_object_operands(struct acpi_walk_state *, union acpi_parse_object *, union acpi_operand_object *);
353:	acpi_status acpi_ds_eval_region_operands(struct acpi_walk_state *, union acpi_parse_object *);
460:	acpi_status acpi_ds_eval_table_region_operands(struct acpi_walk_state *, union acpi_parse_object *);
44:	acpi_status acpi_ds_initialize_region(acpi_handle);
75:	static acpi_status acpi_ds_init_buffer_field(u16, union acpi_operand_object *, union acpi_operand_object *, union acpi_operand_object *, union acpi_operand_object *, union acpi_operand_object *);

File drivers/acpi/acpica/dspkginit.c:
55:	acpi_status acpi_ds_build_internal_package_obj(struct acpi_walk_state *, union acpi_parse_object *, u32, union acpi_operand_object **);
324:	acpi_status acpi_ds_init_package_element(u8, union acpi_operand_object *, union acpi_generic_state *, void *);
381:	static void acpi_ds_resolve_package_element(union acpi_operand_object **);

File drivers/acpi/acpica/dsutils.c:
34:	void acpi_ds_clear_implicit_return(struct acpi_walk_state *);
383:	void acpi_ds_clear_operands(struct acpi_walk_state *);
422:	acpi_status acpi_ds_create_operand(struct acpi_walk_state *, union acpi_parse_object *, u32);
663:	acpi_status acpi_ds_create_operands(struct acpi_walk_state *, union acpi_parse_object *);
302:	void acpi_ds_delete_result_if_not_used(union acpi_parse_object *, union acpi_operand_object *, struct acpi_walk_state *);
79:	u8 acpi_ds_do_implicit_return(union acpi_operand_object *, struct acpi_walk_state *, u8);
752:	acpi_status acpi_ds_evaluate_name_path(struct acpi_walk_state *);
133:	u8 acpi_ds_is_result_used(union acpi_parse_object *, struct acpi_walk_state *);
347:	acpi_status acpi_ds_resolve_operands(struct acpi_walk_state *);

File drivers/acpi/acpica/dswexec.c:
183:	acpi_status acpi_ds_exec_begin_op(struct acpi_walk_state *, union acpi_parse_object **);
327:	acpi_status acpi_ds_exec_end_op(struct acpi_walk_state *);
58:	acpi_status acpi_ds_get_predicate_value(struct acpi_walk_state *, union acpi_operand_object *);

File drivers/acpi/acpica/dswload.c:
37:	acpi_status acpi_ds_init_callbacks(struct acpi_walk_state *, u32);
103:	acpi_status acpi_ds_load1_begin_op(struct acpi_walk_state *, union acpi_parse_object **);
396:	acpi_status acpi_ds_load1_end_op(struct acpi_walk_state *);

File drivers/acpi/acpica/dswload2.c:
38:	acpi_status acpi_ds_load2_begin_op(struct acpi_walk_state *, union acpi_parse_object **);
369:	acpi_status acpi_ds_load2_end_op(struct acpi_walk_state *);

File drivers/acpi/acpica/dswscope.c:
29:	void acpi_ds_scope_stack_clear(struct acpi_walk_state *);
144:	acpi_status acpi_ds_scope_stack_pop(struct acpi_walk_state *);
67:	acpi_status acpi_ds_scope_stack_push(struct acpi_namespace_node *, acpi_object_type, struct acpi_walk_state *);

File drivers/acpi/acpica/dswstate.c:
506:	struct acpi_walk_state *acpi_ds_create_walk_state(acpi_owner_id, union acpi_parse_object *, union acpi_operand_object *, struct acpi_thread_state *);
670:	void acpi_ds_delete_walk_state(struct acpi_walk_state *);
412:	struct acpi_walk_state *acpi_ds_get_current_walk_state(struct acpi_thread_state *);
565:	acpi_status acpi_ds_init_aml_walk(struct acpi_walk_state *, union acpi_parse_object *, struct acpi_namespace_node *, u8 *, u32, struct acpi_evaluate_info *, u8);
323:	acpi_status acpi_ds_obj_stack_pop(u32, struct acpi_walk_state *);
368:	void acpi_ds_obj_stack_pop_and_delete(u32, struct acpi_walk_state *);
276:	acpi_status acpi_ds_obj_stack_push(void *, struct acpi_walk_state *);
466:	struct acpi_walk_state *acpi_ds_pop_walk_state(struct acpi_thread_state *);
441:	void acpi_ds_push_walk_state(struct acpi_walk_state *, struct acpi_thread_state *);
38:	acpi_status acpi_ds_result_pop(union acpi_operand_object **, struct acpi_walk_state *);
112:	acpi_status acpi_ds_result_push(union acpi_operand_object *, struct acpi_walk_state *);

File drivers/acpi/acpica/evevent.c:
280:	u32 acpi_any_fixed_event_status_set(void);
167:	u32 acpi_ev_fixed_event_detect(void);
34:	acpi_status acpi_ev_initialize_events(void);
80:	acpi_status acpi_ev_install_xrupt_handlers(void);

File drivers/acpi/acpica/evglock.c:
170:	acpi_status acpi_ev_acquire_global_lock(u16);
33:	acpi_status acpi_ev_init_global_lock_handler(void);
266:	acpi_status acpi_ev_release_global_lock(void);
87:	acpi_status acpi_ev_remove_global_lock_handler(void);
115:	static u32 acpi_ev_global_lock_handler(void *);

File drivers/acpi/acpica/evgpe.c:
159:	acpi_status acpi_ev_add_gpe_reference(struct acpi_gpe_event_info *, u8);
626:	u32 acpi_ev_detect_gpe(struct acpi_namespace_node *, struct acpi_gpe_event_info *, u32);
78:	acpi_status acpi_ev_enable_gpe(struct acpi_gpe_event_info *);
578:	acpi_status acpi_ev_finish_gpe(struct acpi_gpe_event_info *);
291:	struct acpi_gpe_event_info *acpi_ev_get_gpe_event_info(acpi_handle, u32);
347:	u32 acpi_ev_gpe_detect(struct acpi_gpe_xrupt_info *);
748:	u32 acpi_ev_gpe_dispatch(struct acpi_namespace_node *, struct acpi_gpe_event_info *, u32);
251:	struct acpi_gpe_event_info *acpi_ev_low_get_gpe_info(u32, struct acpi_gpe_block_info *);
104:	acpi_status acpi_ev_mask_gpe(struct acpi_gpe_event_info *, u8);
206:	acpi_status acpi_ev_remove_gpe_reference(struct acpi_gpe_event_info *);
37:	acpi_status acpi_ev_update_gpe_enable_mask(struct acpi_gpe_event_info *);
552:	static void acpi_ev_asynch_enable_gpe(void *);
455:	static void acpi_ev_asynch_execute_gpe_method(void *);

File drivers/acpi/acpica/evgpeblk.c:
296:	acpi_status acpi_ev_create_gpe_block(struct acpi_namespace_node *, u64, u8, u32, u16, u32, struct acpi_gpe_block_info **);
97:	acpi_status acpi_ev_delete_gpe_block(struct acpi_gpe_block_info *);
418:	acpi_status acpi_ev_initialize_gpe_block(struct acpi_gpe_xrupt_info *, struct acpi_gpe_block_info *, void *);
169:	static acpi_status acpi_ev_create_gpe_info_blocks(struct acpi_gpe_block_info *);

File drivers/acpi/acpica/evgpeinit.c:
56:	acpi_status acpi_ev_gpe_initialize(void);
292:	acpi_status acpi_ev_match_gpe_method(acpi_handle, u32, void *, void **);
203:	void acpi_ev_update_gpes(acpi_owner_id);

File drivers/acpi/acpica/evgpeutil.c:
270:	acpi_status acpi_ev_delete_gpe_handlers(struct acpi_gpe_xrupt_info *, struct acpi_gpe_block_info *, void *);
210:	acpi_status acpi_ev_delete_gpe_xrupt(struct acpi_gpe_xrupt_info *);
89:	acpi_status acpi_ev_get_gpe_device(struct acpi_gpe_xrupt_info *, struct acpi_gpe_block_info *, void *);
131:	acpi_status acpi_ev_get_gpe_xrupt_block(u32, struct acpi_gpe_xrupt_info **);
31:	acpi_status acpi_ev_walk_gpe_list(acpi_gpe_callback, void *);

File drivers/acpi/acpica/evhandler.c:
286:	union acpi_operand_object *acpi_ev_find_region_handler(acpi_adr_space_type, union acpi_operand_object *);
118:	u8 acpi_ev_has_default_handler(struct acpi_namespace_node *, acpi_adr_space_type);
45:	acpi_status acpi_ev_install_region_handlers(void);
328:	acpi_status acpi_ev_install_space_handler(struct acpi_namespace_node *, acpi_adr_space_type, acpi_adr_space_handler, acpi_adr_space_setup, void *);
165:	static acpi_status acpi_ev_install_handler(acpi_handle, void *, void **, u32);

File drivers/acpi/acpica/evmisc.c:
35:	u8 acpi_ev_is_notify_object(struct acpi_namespace_node *);
68:	acpi_status acpi_ev_queue_notify_request(struct acpi_namespace_node *, u32);
206:	void acpi_ev_terminate(void);
161:	static void acpi_ev_notify_dispatch(void *);

File drivers/acpi/acpica/evregion.c:
102:	acpi_status acpi_ev_address_space_dispatch(union acpi_operand_object *, union acpi_operand_object *, u32, u32, u32, u64 *);
503:	acpi_status acpi_ev_attach_region(union acpi_operand_object *, union acpi_operand_object *, u8);
336:	void acpi_ev_detach_region(union acpi_operand_object *, u8);
547:	acpi_status acpi_ev_execute_reg_method(union acpi_operand_object *, u32);
679:	void acpi_ev_execute_reg_methods(struct acpi_namespace_node *, acpi_adr_space_type, u32);
43:	acpi_status acpi_ev_initialize_op_regions(void);
742:	static acpi_status acpi_ev_reg_run(acpi_handle, u32, void *, void **);

File drivers/acpi/acpica/evrgnini.c:
400:	acpi_status acpi_ev_cmos_region_setup(acpi_handle, u32, void *, void **);
476:	acpi_status acpi_ev_initialize_region(union acpi_operand_object *);
98:	acpi_status acpi_ev_io_space_region_setup(acpi_handle, u32, void *, void **);
313:	u8 acpi_ev_is_pci_root_bridge(struct acpi_namespace_node *);
131:	acpi_status acpi_ev_pci_config_region_setup(acpi_handle, u32, void *, void **);
34:	acpi_status acpi_ev_system_memory_region_setup(acpi_handle, u32, void *, void **);

File drivers/acpi/acpica/evsci.c:
120:	u32 acpi_ev_gpe_xrupt_handler(void *);
150:	u32 acpi_ev_install_sci_handler(void);
182:	acpi_status acpi_ev_remove_all_sci_handlers(void);
31:	u32 acpi_ev_sci_dispatch(void);
76:	static u32 acpi_ev_sci_xrupt_handler(void *);

File drivers/acpi/acpica/evxface.c:
1026:	acpi_status acpi_acquire_global_lock(u16, u32 *);
584:	acpi_status acpi_install_fixed_event_handler(u32, acpi_event_handler, void *);
534:	acpi_status acpi_install_global_event_handler(acpi_gbl_event_handler, void *);
840:	acpi_status acpi_install_gpe_handler(acpi_handle, u32, u32, acpi_gpe_handler, void *);
874:	acpi_status acpi_install_gpe_raw_handler(acpi_handle, u32, u32, acpi_gpe_handler, void *);
57:	acpi_status acpi_install_notify_handler(acpi_handle, u32, acpi_notify_handler, void *);
389:	acpi_status acpi_install_sci_handler(acpi_sci_handler, void *);
1066:	acpi_status acpi_release_global_lock(u32);
653:	acpi_status acpi_remove_fixed_event_handler(u32, acpi_event_handler);
905:	acpi_status acpi_remove_gpe_handler(acpi_handle, u32, acpi_gpe_handler);
211:	acpi_status acpi_remove_notify_handler(acpi_handle, u32, acpi_notify_handler);
463:	acpi_status acpi_remove_sci_handler(acpi_sci_handler);
716:	static acpi_status acpi_ev_install_gpe_handler(acpi_handle, u32, u32, u8, acpi_gpe_handler, void *);

File drivers/acpi/acpica/evxfevnt.c:
265:	acpi_status acpi_clear_event(u32);
96:	acpi_status acpi_disable(void);
205:	acpi_status acpi_disable_event(u32, u32);
31:	acpi_status acpi_enable(void);
142:	acpi_status acpi_enable_event(u32, u32);
309:	acpi_status acpi_get_event_status(u32, acpi_event_status *);

File drivers/acpi/acpica/evxfgpe.c:
811:	u32 acpi_any_gpe_status_set(u32);
568:	acpi_status acpi_clear_gpe(acpi_handle, u32);
717:	acpi_status acpi_disable_all_gpes(void);
148:	acpi_status acpi_disable_gpe(acpi_handle, u32);
653:	u32 acpi_dispatch_gpe(acpi_handle, u32);
748:	acpi_status acpi_enable_all_runtime_gpes(void);
779:	acpi_status acpi_enable_all_wakeup_gpes(void);
92:	acpi_status acpi_enable_gpe(acpi_handle, u32);
678:	acpi_status acpi_finish_gpe(acpi_handle, u32);
1017:	acpi_status acpi_get_gpe_device(u32, acpi_handle *);
610:	acpi_status acpi_get_gpe_status(acpi_handle, u32, acpi_event_status *);
853:	acpi_status acpi_install_gpe_block(acpi_handle, struct acpi_generic_address *, u32, u32);
306:	acpi_status acpi_mark_gpe_for_wake(acpi_handle, u32);
259:	acpi_status acpi_mask_gpe(acpi_handle, u32, u8);
952:	acpi_status acpi_remove_gpe_block(acpi_handle);
199:	acpi_status acpi_set_gpe(acpi_handle, u32, u8);
492:	acpi_status acpi_set_gpe_wake_mask(acpi_handle, u32, u8);
352:	acpi_status acpi_setup_gpe_for_wake(acpi_handle, acpi_handle, u32);
43:	acpi_status acpi_update_all_gpes(void);

File drivers/acpi/acpica/evxfregn.c:
43:	acpi_status acpi_install_address_space_handler(acpi_handle, acpi_adr_space_type, acpi_adr_space_handler, acpi_adr_space_setup, void *);
106:	acpi_status acpi_remove_address_space_handler(acpi_handle, acpi_adr_space_type, acpi_adr_space_handler);

File drivers/acpi/acpica/exconcat.c:
338:	acpi_status acpi_ex_concat_template(union acpi_operand_object *, union acpi_operand_object *, union acpi_operand_object **, struct acpi_walk_state *);
47:	acpi_status acpi_ex_do_concatenate(union acpi_operand_object *, union acpi_operand_object *, union acpi_operand_object **, struct acpi_walk_state *);
301:	static acpi_status acpi_ex_convert_to_object_type_string(union acpi_operand_object **, union acpi_operand_object *, union acpi_operand_object *);

File drivers/acpi/acpica/exconfig.c:
268:	acpi_status acpi_ex_load_op(union acpi_operand_object *, union acpi_operand_object *, struct acpi_walk_state *);
82:	acpi_status acpi_ex_load_table_op(struct acpi_walk_state *, union acpi_operand_object **);
475:	acpi_status acpi_ex_unload_table(union acpi_operand_object *);
46:	static acpi_status acpi_ex_add_table(u32, union acpi_operand_object **);
221:	static acpi_status acpi_ex_region_read(union acpi_operand_object *, u32, u8 *);

File drivers/acpi/acpica/exconvrt.c:
174:	acpi_status acpi_ex_convert_to_buffer(union acpi_operand_object *, union acpi_operand_object **);
38:	acpi_status acpi_ex_convert_to_integer(union acpi_operand_object *, union acpi_operand_object **, u32);
373:	acpi_status acpi_ex_convert_to_string(union acpi_operand_object *, union acpi_operand_object **, u32);
573:	acpi_status acpi_ex_convert_to_target_type(acpi_object_type, union acpi_operand_object *, union acpi_operand_object **, struct acpi_walk_state *);
260:	static u32 acpi_ex_convert_to_ascii(u64, u16, u8 *, u8);

File drivers/acpi/acpica/excreate.c:
29:	acpi_status acpi_ex_create_alias(struct acpi_walk_state *);
104:	acpi_status acpi_ex_create_event(struct acpi_walk_state *);
408:	acpi_status acpi_ex_create_method(u8 *, u32, struct acpi_walk_state *);
156:	acpi_status acpi_ex_create_mutex(struct acpi_walk_state *);
361:	acpi_status acpi_ex_create_power_resource(struct acpi_walk_state *);
314:	acpi_status acpi_ex_create_processor(struct acpi_walk_state *);
213:	acpi_status acpi_ex_create_region(u8 *, u32, u8, struct acpi_walk_state *);

File drivers/acpi/acpica/exdebug.c:
40:	void acpi_ex_do_debug_object(union acpi_operand_object *, u32, u32);

File drivers/acpi/acpica/exfield.c:
72:	acpi_status acpi_ex_get_protocol_buffer_length(u32, u32 *);
105:	acpi_status acpi_ex_read_data_from_field(struct acpi_walk_state *, union acpi_operand_object *, union acpi_operand_object **);
262:	acpi_status acpi_ex_write_data_to_field(union acpi_operand_object *, union acpi_operand_object *, union acpi_operand_object **);

File drivers/acpi/acpica/exfldio.c:
198:	acpi_status acpi_ex_access_region(union acpi_operand_object *, u32, u64 *, u32);
648:	acpi_status acpi_ex_extract_from_field(union acpi_operand_object *, void *, u32);
806:	acpi_status acpi_ex_insert_into_field(union acpi_operand_object *, void *, u32);
544:	acpi_status acpi_ex_write_with_update_rule(union acpi_operand_object *, u64, u64, u32);
338:	static acpi_status acpi_ex_field_datum_io(union acpi_operand_object *, u32, u64 *, u32);
290:	static u8 acpi_ex_register_overflow(u64, union acpi_operand_object *, union acpi_operand_object *);
49:	static acpi_status acpi_ex_setup_region(union acpi_operand_object *, u32);

File drivers/acpi/acpica/exmisc.c:
209:	acpi_status acpi_ex_do_logical_numeric_op(u16, u64, u64, u8 *);
273:	acpi_status acpi_ex_do_logical_op(u16, union acpi_operand_object *, union acpi_operand_object *, u8 *);
122:	u64 acpi_ex_do_math_op(u16, u64, u64);
33:	acpi_status acpi_ex_get_object_reference(union acpi_operand_object *, union acpi_operand_object **, struct acpi_walk_state *);

File drivers/acpi/acpica/exmutex.c:
191:	acpi_status acpi_ex_acquire_mutex(union acpi_operand_object *, union acpi_operand_object *, struct acpi_walk_state *);
126:	acpi_status acpi_ex_acquire_mutex_object(u16, union acpi_operand_object *, u64);
461:	void acpi_ex_release_all_mutexes(struct acpi_thread_state *);
339:	acpi_status acpi_ex_release_mutex(union acpi_operand_object *, struct acpi_walk_state *);
283:	acpi_status acpi_ex_release_mutex_object(union acpi_operand_object *);
35:	void acpi_ex_unlink_mutex(union acpi_operand_object *);

File drivers/acpi/acpica/exnames.c:
207:	acpi_status acpi_ex_get_name_string(acpi_object_type, u8 *, char **, u32 *);
39:	static char *acpi_ex_allocate_name_string(u32, u32);
123:	static acpi_status acpi_ex_name_segment(u8 **, char *);

File drivers/acpi/acpica/exoparg1.c:
53:	acpi_status acpi_ex_opcode_0A_0T_1R(struct acpi_walk_state *);
113:	acpi_status acpi_ex_opcode_1A_0T_0R(struct acpi_walk_state *);
557:	acpi_status acpi_ex_opcode_1A_0T_1R(struct acpi_walk_state *);
179:	acpi_status acpi_ex_opcode_1A_1T_0R(struct acpi_walk_state *);
221:	acpi_status acpi_ex_opcode_1A_1T_1R(struct acpi_walk_state *);

File drivers/acpi/acpica/exoparg2.c:
55:	acpi_status acpi_ex_opcode_2A_0T_0R(struct acpi_walk_state *);
465:	acpi_status acpi_ex_opcode_2A_0T_1R(struct acpi_walk_state *);
221:	acpi_status acpi_ex_opcode_2A_1T_1R(struct acpi_walk_state *);
122:	acpi_status acpi_ex_opcode_2A_2T_1R(struct acpi_walk_state *);

File drivers/acpi/acpica/exoparg3.c:
51:	acpi_status acpi_ex_opcode_3A_0T_0R(struct acpi_walk_state *);
125:	acpi_status acpi_ex_opcode_3A_1T_1R(struct acpi_walk_state *);

File drivers/acpi/acpica/exoparg6.c:
176:	acpi_status acpi_ex_opcode_6A_0T_1R(struct acpi_walk_state *);
63:	static u8 acpi_ex_do_match(u32, union acpi_operand_object *, union acpi_operand_object *);

File drivers/acpi/acpica/exprep.c:
293:	acpi_status acpi_ex_prep_common_field_object(union acpi_operand_object *, u8, u8, u32, u32);
378:	acpi_status acpi_ex_prep_field_value(struct acpi_create_field_info *);

File drivers/acpi/acpica/exregion.c:
440:	acpi_status acpi_ex_cmos_space_handler(u32, acpi_physical_address, u32, u64 *, void *, void *);
506:	acpi_status acpi_ex_data_table_space_handler(u32, acpi_physical_address, u32, u64 *, void *, void *);
362:	acpi_status acpi_ex_pci_config_space_handler(u32, acpi_physical_address, u32, u64 *, void *, void *);
302:	acpi_status acpi_ex_system_io_space_handler(u32, acpi_physical_address, u32, u64 *, void *, void *);
35:	acpi_status acpi_ex_system_memory_space_handler(u32, acpi_physical_address, u32, u64 *, void *, void *);

File drivers/acpi/acpica/exresnte.c:
45:	acpi_status acpi_ex_resolve_node_to_value(struct acpi_namespace_node **, struct acpi_walk_state *);

File drivers/acpi/acpica/exresolv.c:
302:	acpi_status acpi_ex_resolve_multiple(struct acpi_walk_state *, union acpi_operand_object *, acpi_object_type *, union acpi_operand_object **);
41:	acpi_status acpi_ex_resolve_to_value(union acpi_operand_object **, struct acpi_walk_state *);
103:	static acpi_status acpi_ex_resolve_object_to_value(union acpi_operand_object **, struct acpi_walk_state *);

File drivers/acpi/acpica/exresop.c:
99:	acpi_status acpi_ex_resolve_operands(u16, union acpi_operand_object **, struct acpi_walk_state *);
40:	static acpi_status acpi_ex_check_object_type(acpi_object_type, acpi_object_type, void *);

File drivers/acpi/acpica/exserial.c:
32:	acpi_status acpi_ex_read_gpio(union acpi_operand_object *, void *);
135:	acpi_status acpi_ex_read_serial_bus(union acpi_operand_object *, union acpi_operand_object **);
78:	acpi_status acpi_ex_write_gpio(union acpi_operand_object *, union acpi_operand_object *, union acpi_operand_object **);
241:	acpi_status acpi_ex_write_serial_bus(union acpi_operand_object *, union acpi_operand_object *, union acpi_operand_object **);

File drivers/acpi/acpica/exstore.c:
52:	acpi_status acpi_ex_store(union acpi_operand_object *, union acpi_operand_object *, struct acpi_walk_state *);
361:	acpi_status acpi_ex_store_object_to_node(union acpi_operand_object *, struct acpi_namespace_node *, struct acpi_walk_state *, u8);
560:	static acpi_status acpi_ex_store_direct_to_node(union acpi_operand_object *, struct acpi_namespace_node *, struct acpi_walk_state *);

File drivers/acpi/acpica/exstoren.c:
34:	acpi_status acpi_ex_resolve_object(union acpi_operand_object **, acpi_object_type, struct acpi_walk_state *);
157:	acpi_status acpi_ex_store_object_to_object(union acpi_operand_object *, union acpi_operand_object *, union acpi_operand_object **, struct acpi_walk_state *);

File drivers/acpi/acpica/exstorob.c:
30:	acpi_status acpi_ex_store_buffer_to_buffer(union acpi_operand_object *, union acpi_operand_object *);
127:	acpi_status acpi_ex_store_string_to_string(union acpi_operand_object *, union acpi_operand_object *);

File drivers/acpi/acpica/exsystem.c:
159:	acpi_status acpi_ex_system_do_sleep(u64);
123:	acpi_status acpi_ex_system_do_stall(u32);
255:	acpi_status acpi_ex_system_reset_event(union acpi_operand_object *);
196:	acpi_status acpi_ex_system_signal_event(union acpi_operand_object *);
226:	acpi_status acpi_ex_system_wait_event(union acpi_operand_object *, union acpi_operand_object *);
76:	acpi_status acpi_ex_system_wait_mutex(void *, u16);
31:	acpi_status acpi_ex_system_wait_semaphore(void *, u16);

File drivers/acpi/acpica/extrace.c:
166:	void acpi_ex_start_trace_method(struct acpi_namespace_node *, union acpi_operand_object *, struct acpi_walk_state *);
279:	void acpi_ex_start_trace_opcode(union acpi_parse_object *, struct acpi_walk_state *);
223:	void acpi_ex_stop_trace_method(struct acpi_namespace_node *, union acpi_operand_object *, struct acpi_walk_state *);
131:	void acpi_ex_trace_point(acpi_trace_event_type, u8, u8 *, char *);

File drivers/acpi/acpica/exutils.c:
167:	void acpi_ex_acquire_global_lock(u32);
289:	void acpi_ex_eisa_id_to_string(char *, u64);
51:	void acpi_ex_enter_interpreter(void);
93:	void acpi_ex_exit_interpreter(void);
338:	void acpi_ex_integer_to_string(char *, u64);
371:	void acpi_ex_pci_cls_to_string(char *, u8 *);
206:	void acpi_ex_release_global_lock(u32);
125:	u8 acpi_ex_truncate_for32bit_table(union acpi_operand_object *);
399:	u8 acpi_is_valid_space_id(u8);

File drivers/acpi/acpica/hwacpi.c:
114:	u32 acpi_hw_get_mode(void);
28:	acpi_status acpi_hw_set_mode(u32);

File drivers/acpi/acpica/hwesleep.c:
30:	void acpi_hw_execute_sleep_method(char *, u32);
68:	acpi_status acpi_hw_extended_sleep(u8);
179:	acpi_status acpi_hw_extended_wake(u8);
148:	acpi_status acpi_hw_extended_wake_prep(u8);

File drivers/acpi/acpica/hwgpe.c:
657:	u8 acpi_hw_check_all_gpes(acpi_handle, u32);
210:	acpi_status acpi_hw_clear_gpe(struct acpi_gpe_event_info *);
403:	acpi_status acpi_hw_clear_gpe_block(struct acpi_gpe_xrupt_info *, struct acpi_gpe_block_info *, void *);
588:	acpi_status acpi_hw_disable_all_gpes(void);
366:	acpi_status acpi_hw_disable_gpe_block(struct acpi_gpe_xrupt_info *, struct acpi_gpe_block_info *, void *);
610:	acpi_status acpi_hw_enable_all_runtime_gpes(void);
632:	acpi_status acpi_hw_enable_all_wakeup_gpes(void);
440:	acpi_status acpi_hw_enable_runtime_gpe_block(struct acpi_gpe_xrupt_info *, struct acpi_gpe_block_info *, void *);
110:	u32 acpi_hw_get_gpe_register_bit(struct acpi_gpe_event_info *);
250:	acpi_status acpi_hw_get_gpe_status(struct acpi_gpe_event_info *, acpi_event_status *);
43:	acpi_status acpi_hw_gpe_read(u64 *, struct acpi_gpe_address *);
81:	acpi_status acpi_hw_gpe_write(u64, struct acpi_gpe_address *);
134:	acpi_status acpi_hw_low_set_gpe(struct acpi_gpe_event_info *, u32);
488:	static acpi_status acpi_hw_enable_wakeup_gpe_block(struct acpi_gpe_xrupt_info *, struct acpi_gpe_block_info *, void *);
538:	static acpi_status acpi_hw_get_gpe_block_status(struct acpi_gpe_xrupt_info *, struct acpi_gpe_block_info *, void *);
340:	static acpi_status acpi_hw_gpe_enable_write(u8, struct acpi_gpe_register_info *);

File drivers/acpi/acpica/hwpci.c:
86:	acpi_status acpi_hw_derive_pci_id(struct acpi_pci_id *, acpi_handle, acpi_handle);
262:	static void acpi_hw_delete_pci_list(struct acpi_pci_device *);
296:	static acpi_status acpi_hw_get_pci_device_info(struct acpi_pci_id *, acpi_handle, u16 *, u8 *);

File drivers/acpi/acpica/hwregs.c:
382:	acpi_status acpi_hw_clear_acpi_status(void);
426:	struct acpi_bit_register_info *acpi_hw_get_bit_register_info(u32);
195:	acpi_status acpi_hw_read(u64 *, struct acpi_generic_address *);
488:	acpi_status acpi_hw_register_read(u32, u32 *);
591:	acpi_status acpi_hw_register_write(u32, u32);
122:	acpi_status acpi_hw_validate_register(struct acpi_generic_address *, u8, u64 *);
290:	acpi_status acpi_hw_write(u64, struct acpi_generic_address *);
456:	acpi_status acpi_hw_write_pm1_control(u32, u32);
50:	static u8 acpi_hw_get_access_bit_width(u64, struct acpi_generic_address *, u8);
714:	static acpi_status acpi_hw_read_multiple(u32 *, struct acpi_generic_address *, struct acpi_generic_address *);
770:	static acpi_status acpi_hw_write_multiple(u32, struct acpi_generic_address *, struct acpi_generic_address *);

File drivers/acpi/acpica/hwsleep.c:
30:	acpi_status acpi_hw_legacy_sleep(u8);
244:	acpi_status acpi_hw_legacy_wake(u8);
180:	acpi_status acpi_hw_legacy_wake_prep(u8);

File drivers/acpi/acpica/hwvalid.c:
186:	acpi_status acpi_hw_read_port(acpi_io_address, u32 *, u32);
310:	acpi_status acpi_hw_validate_io_block(u64, u32, u32);
250:	acpi_status acpi_hw_write_port(acpi_io_address, u32, u32);
90:	static acpi_status acpi_hw_validate_io_request(acpi_io_address, u32);

File drivers/acpi/acpica/hwxface.c:
335:	acpi_status acpi_get_sleep_type_data(u8, u8 *, u8 *);
92:	acpi_status acpi_read(u64 *, struct acpi_generic_address *);
153:	acpi_status acpi_read_bit_register(u32, u32 *);
32:	acpi_status acpi_reset(void);
116:	acpi_status acpi_write(u64, struct acpi_generic_address *);
214:	acpi_status acpi_write_bit_register(u32, u32);

File drivers/acpi/acpica/hwxfsleep.c:
288:	acpi_status acpi_enter_sleep_state(u8);
204:	acpi_status acpi_enter_sleep_state_prep(u8);
130:	acpi_status acpi_enter_sleep_state_s4bios(void);
355:	acpi_status acpi_leave_sleep_state(u8);
326:	acpi_status acpi_leave_sleep_state_prep(u8);
101:	acpi_status acpi_set_firmware_waking_vector(acpi_physical_address, acpi_physical_address);

File drivers/acpi/acpica/nsaccess.c:
280:	acpi_status acpi_ns_lookup(union acpi_generic_state *, char *, acpi_object_type, acpi_interpreter_mode, u32, struct acpi_walk_state *, struct acpi_namespace_node **);
34:	acpi_status acpi_ns_root_initialize(void);

File drivers/acpi/acpica/nsalloc.c:
26:	struct acpi_namespace_node *acpi_ns_create_node(u32);
267:	void acpi_ns_delete_children(struct acpi_namespace_node *);
406:	void acpi_ns_delete_namespace_by_owner(acpi_owner_id);
318:	void acpi_ns_delete_namespace_subtree(struct acpi_namespace_node *);
70:	void acpi_ns_delete_node(struct acpi_namespace_node *);
191:	void acpi_ns_install_node(struct acpi_walk_state *, struct acpi_namespace_node *, struct acpi_namespace_node *, acpi_object_type);
132:	void acpi_ns_remove_node(struct acpi_namespace_node *);

File drivers/acpi/acpica/nsarguments.c:
94:	void acpi_ns_check_acpi_compliance(char *, struct acpi_namespace_node *, const union acpi_predefined_info *);
187:	void acpi_ns_check_argument_count(char *, struct acpi_namespace_node *, u32, const union acpi_predefined_info *);
30:	void acpi_ns_check_argument_types(struct acpi_evaluate_info *);

File drivers/acpi/acpica/nsconvert.c:
182:	acpi_status acpi_ns_convert_to_buffer(union acpi_operand_object *, union acpi_operand_object **);
34:	acpi_status acpi_ns_convert_to_integer(union acpi_operand_object *, union acpi_operand_object **);
432:	acpi_status acpi_ns_convert_to_reference(struct acpi_namespace_node *, union acpi_operand_object *, union acpi_operand_object **);
353:	acpi_status acpi_ns_convert_to_resource(struct acpi_namespace_node *, union acpi_operand_object *, union acpi_operand_object **);
99:	acpi_status acpi_ns_convert_to_string(union acpi_operand_object *, union acpi_operand_object **);
286:	acpi_status acpi_ns_convert_to_unicode(struct acpi_namespace_node *, union acpi_operand_object *, union acpi_operand_object **);

File drivers/acpi/acpica/nseval.c:
42:	acpi_status acpi_ns_evaluate(struct acpi_evaluate_info *);

File drivers/acpi/acpica/nsinit.c:
260:	acpi_status acpi_ns_init_one_package(acpi_handle, u32, void *, void **);
105:	acpi_status acpi_ns_initialize_devices(u32);
46:	acpi_status acpi_ns_initialize_objects(void);
450:	static acpi_status acpi_ns_find_ini_methods(acpi_handle, u32, void *, void **);
515:	static acpi_status acpi_ns_init_one_device(acpi_handle, u32, void *, void **);
316:	static acpi_status acpi_ns_init_one_object(acpi_handle, u32, void *, void **);

File drivers/acpi/acpica/nsload.c:
41:	acpi_status acpi_ns_load_table(u32, struct acpi_namespace_node *);

File drivers/acpi/acpica/nsnames.c:
193:	u32 acpi_ns_build_normalized_path(struct acpi_namespace_node *, char *, u32, u8);
338:	char *acpi_ns_build_prefixed_pathname(union acpi_generic_state *, const char *);
30:	char *acpi_ns_get_external_pathname(struct acpi_namespace_node *);
289:	char *acpi_ns_get_normalized_pathname(struct acpi_namespace_node *, u8);
52:	acpi_size acpi_ns_get_pathname_length(struct acpi_namespace_node *);
84:	acpi_status acpi_ns_handle_to_name(acpi_handle, struct acpi_buffer *);
131:	acpi_status acpi_ns_handle_to_pathname(acpi_handle, struct acpi_buffer *, u8);
410:	void acpi_ns_normalize_pathname(char *);

File drivers/acpi/acpica/nsobject.c:
313:	acpi_status acpi_ns_attach_data(struct acpi_namespace_node *, acpi_object_handler, void *);
37:	acpi_status acpi_ns_attach_object(struct acpi_namespace_node *, union acpi_operand_object *, acpi_object_type);
370:	acpi_status acpi_ns_detach_data(struct acpi_namespace_node *, acpi_object_handler);
168:	void acpi_ns_detach_object(struct acpi_namespace_node *);
415:	acpi_status acpi_ns_get_attached_data(struct acpi_namespace_node *, acpi_object_handler, void **);
246:	union acpi_operand_object *acpi_ns_get_attached_object(struct acpi_namespace_node *);
281:	union acpi_operand_object *acpi_ns_get_secondary_object(union acpi_operand_object *);

File drivers/acpi/acpica/nsparse.c:
44:	acpi_status acpi_ns_execute_table(u32, struct acpi_namespace_node *);
148:	acpi_status acpi_ns_one_complete_parse(u32, u32, struct acpi_namespace_node *);
250:	acpi_status acpi_ns_parse_table(u32, struct acpi_namespace_node *);

File drivers/acpi/acpica/nspredef.c:
189:	acpi_status acpi_ns_check_object_type(struct acpi_evaluate_info *, union acpi_operand_object **, u32, u32);
65:	acpi_status acpi_ns_check_return_value(struct acpi_namespace_node *, struct acpi_evaluate_info *, u32, acpi_status, union acpi_operand_object **);

File drivers/acpi/acpica/nsprepkg.c:
51:	acpi_status acpi_ns_check_package(struct acpi_evaluate_info *, union acpi_operand_object **);
701:	static acpi_status acpi_ns_check_package_elements(struct acpi_evaluate_info *, union acpi_operand_object **, u8, u32, u8, u32, u32);
386:	static acpi_status acpi_ns_check_package_list(struct acpi_evaluate_info *, const union acpi_predefined_info *, union acpi_operand_object **, u32);
623:	static acpi_status acpi_ns_custom_package(struct acpi_evaluate_info *, union acpi_operand_object **, u32);

File drivers/acpi/acpica/nsrepair.c:
438:	void acpi_ns_remove_null_elements(struct acpi_evaluate_info *, u8, union acpi_operand_object *);
358:	acpi_status acpi_ns_repair_null_element(struct acpi_evaluate_info *, u32, u32, union acpi_operand_object **);
120:	acpi_status acpi_ns_simple_repair(struct acpi_evaluate_info *, u32, u32, union acpi_operand_object **);
531:	acpi_status acpi_ns_wrap_with_package(struct acpi_evaluate_info *, union acpi_operand_object *, union acpi_operand_object **);

File drivers/acpi/acpica/nsrepair2.c:
150:	acpi_status acpi_ns_complex_repairs(struct acpi_evaluate_info *, struct acpi_namespace_node *, acpi_status, union acpi_operand_object **);
759:	static acpi_status acpi_ns_check_sorted_list(struct acpi_evaluate_info *, union acpi_operand_object *, u32, u32, u32, u8, char *);
217:	static acpi_status acpi_ns_repair_ALR(struct acpi_evaluate_info *, union acpi_operand_object **);
337:	static acpi_status acpi_ns_repair_CID(struct acpi_evaluate_info *, union acpi_operand_object **);
405:	static acpi_status acpi_ns_repair_CST(struct acpi_evaluate_info *, union acpi_operand_object **);
248:	static acpi_status acpi_ns_repair_FDE(struct acpi_evaluate_info *, union acpi_operand_object **);
490:	static acpi_status acpi_ns_repair_HID(struct acpi_evaluate_info *, union acpi_operand_object **);
573:	static acpi_status acpi_ns_repair_PRT(struct acpi_evaluate_info *, union acpi_operand_object **);
642:	static acpi_status acpi_ns_repair_PSS(struct acpi_evaluate_info *, union acpi_operand_object **);
710:	static acpi_status acpi_ns_repair_TSS(struct acpi_evaluate_info *, union acpi_operand_object **);

File drivers/acpi/acpica/nssearch.c:
251:	acpi_status acpi_ns_search_and_enter(u32, struct acpi_walk_state *, struct acpi_namespace_node *, acpi_interpreter_mode, acpi_object_type, u32, struct acpi_namespace_node **);
59:	acpi_status acpi_ns_search_one_scope(u32, struct acpi_namespace_node *, acpi_object_type, struct acpi_namespace_node **);

File drivers/acpi/acpica/nsutils.c:
200:	acpi_status acpi_ns_build_internal_name(struct acpi_namestring_info *);
367:	acpi_status acpi_ns_externalize_name(u32, const char *, u32 *, char **);
129:	void acpi_ns_get_internal_name_length(struct acpi_namestring_info *);
713:	acpi_status acpi_ns_get_node(struct acpi_namespace_node *, const char *, u32, struct acpi_namespace_node **);
635:	acpi_status acpi_ns_get_node_unlocked(struct acpi_namespace_node *, const char *, u32, struct acpi_namespace_node **);
75:	acpi_object_type acpi_ns_get_type(struct acpi_namespace_node *);
312:	acpi_status acpi_ns_internalize_name(const char *, char **);
100:	u32 acpi_ns_local(acpi_object_type);
597:	u32 acpi_ns_opens_scope(acpi_object_type);
37:	void acpi_ns_print_node_pathname(struct acpi_namespace_node *, const char *);
560:	void acpi_ns_terminate(void);
528:	struct acpi_namespace_node *acpi_ns_validate_handle(acpi_handle);

File drivers/acpi/acpica/nswalk.c:
34:	struct acpi_namespace_node *acpi_ns_get_next_node(struct acpi_namespace_node *, struct acpi_namespace_node *);
72:	struct acpi_namespace_node *acpi_ns_get_next_node_typed(acpi_object_type, struct acpi_namespace_node *, struct acpi_namespace_node *);
150:	acpi_status acpi_ns_walk_namespace(acpi_object_type, acpi_handle, u32, u32, acpi_walk_callback, acpi_walk_callback, void *, void **);

File drivers/acpi/acpica/nsxfeval.c:
830:	acpi_status acpi_attach_data(acpi_handle, acpi_object_handler, void *);
877:	acpi_status acpi_detach_data(acpi_handle, acpi_object_handler);
163:	acpi_status acpi_evaluate_object(acpi_handle, acpi_string, struct acpi_object_list *, struct acpi_buffer *);
44:	acpi_status acpi_evaluate_object_typed(acpi_handle, acpi_string, struct acpi_object_list *, struct acpi_buffer *, acpi_object_type);
977:	acpi_status acpi_get_data(acpi_handle, acpi_object_handler, void **);
926:	acpi_status acpi_get_data_full(acpi_handle, acpi_object_handler, void **, void (*)(void *));
771:	acpi_status acpi_get_devices(const char *, acpi_walk_callback, void *, void **);
554:	acpi_status acpi_walk_namespace(acpi_object_type, acpi_handle, u32, acpi_walk_callback, acpi_walk_callback, void *, void **);
635:	static acpi_status acpi_ns_get_device_callback(acpi_handle, u32, void *, void **);

File drivers/acpi/acpica/nsxfname.c:
46:	acpi_status acpi_get_handle(acpi_handle, acpi_string, acpi_handle *);
124:	acpi_status acpi_get_name(acpi_handle, u32, struct acpi_buffer *);
226:	acpi_status acpi_get_object_info(acpi_handle, struct acpi_device_info **);
475:	acpi_status acpi_install_method(u8 *);
182:	static char *acpi_ns_copy_device_id(struct acpi_pnp_device_id *, struct acpi_pnp_device_id *, char *);

File drivers/acpi/acpica/nsxfobj.c:
149:	acpi_status acpi_get_next_object(acpi_object_type, acpi_handle, acpi_handle, acpi_handle *);
83:	acpi_status acpi_get_parent(acpi_handle, acpi_handle *);
31:	acpi_status acpi_get_type(acpi_handle, acpi_object_type *);

File drivers/acpi/acpica/psargs.c:
703:	acpi_status acpi_ps_get_next_arg(struct acpi_walk_state *, struct acpi_parse_state *, u32, union acpi_parse_object **);
197:	acpi_status acpi_ps_get_next_namepath(struct acpi_walk_state *, struct acpi_parse_state *, union acpi_parse_object *, u8);
123:	char *acpi_ps_get_next_namestring(struct acpi_parse_state *);
94:	u8 *acpi_ps_get_next_package_end(struct acpi_parse_state *);
362:	void acpi_ps_get_next_simple_arg(struct acpi_parse_state *, u32, union acpi_parse_object *);
455:	static union acpi_parse_object *acpi_ps_get_next_field(struct acpi_parse_state *);
43:	static u32 acpi_ps_get_next_package_length(struct acpi_parse_state *);

File drivers/acpi/acpica/psloop.c:
221:	acpi_status acpi_ps_parse_loop(struct acpi_walk_state *);

File drivers/acpi/acpica/psobject.c:
154:	acpi_status acpi_ps_build_named_op(struct acpi_walk_state *, u8 *, union acpi_parse_object *, union acpi_parse_object **);
636:	acpi_status acpi_ps_complete_final_op(struct acpi_walk_state *, union acpi_parse_object *, acpi_status);
437:	acpi_status acpi_ps_complete_op(struct acpi_walk_state *, union acpi_parse_object **, acpi_status);
298:	acpi_status acpi_ps_create_op(struct acpi_walk_state *, u8 *, union acpi_parse_object **);
35:	static acpi_status acpi_ps_get_aml_opcode(struct acpi_walk_state *);

File drivers/acpi/acpica/psopinfo.c:
157:	u8 acpi_ps_get_argument_count(u32);
35:	const struct acpi_opcode_info *acpi_ps_get_opcode_info(u16);
127:	const char *acpi_ps_get_opcode_name(u16);

File drivers/acpi/acpica/psparse.c:
100:	acpi_status acpi_ps_complete_this_op(struct acpi_walk_state *, union acpi_parse_object *);
41:	u32 acpi_ps_get_opcode_size(u32);
297:	acpi_status acpi_ps_next_parse_state(struct acpi_walk_state *, union acpi_parse_object *, acpi_status);
408:	acpi_status acpi_ps_parse_aml(struct acpi_walk_state *);
67:	u16 acpi_ps_peek_opcode(struct acpi_parse_state *);

File drivers/acpi/acpica/psscope.c:
213:	void acpi_ps_cleanup_scope(struct acpi_parse_state *);
28:	union acpi_parse_object *acpi_ps_get_parent_scope(struct acpi_parse_state *);
49:	u8 acpi_ps_has_completed_scope(struct acpi_parse_state *);
71:	acpi_status acpi_ps_init_scope(struct acpi_parse_state *, union acpi_parse_object *);
165:	void acpi_ps_pop_scope(struct acpi_parse_state *, union acpi_parse_object **, u32 *, u32 *);
111:	acpi_status acpi_ps_push_scope(struct acpi_parse_state *, union acpi_parse_object *, u32, u32);

File drivers/acpi/acpica/pstree.c:
94:	void acpi_ps_append_arg(union acpi_parse_object *, union acpi_parse_object *);
37:	union acpi_parse_object *acpi_ps_get_arg(union acpi_parse_object *, u32);
169:	union acpi_parse_object *acpi_ps_get_depth_next(union acpi_parse_object *, union acpi_parse_object *);

File drivers/acpi/acpica/psutils.c:
85:	union acpi_parse_object *acpi_ps_alloc_op(u16, u8 *);
30:	union acpi_parse_object *acpi_ps_create_scope_op(u8 *);
151:	void acpi_ps_free_op(union acpi_parse_object *);
187:	u32 acpi_ps_get_name(union acpi_parse_object *);
56:	void acpi_ps_init_op(union acpi_parse_object *, u16);
179:	u8 acpi_ps_is_leading_char(u32);
204:	void acpi_ps_set_name(union acpi_parse_object *, u32);

File drivers/acpi/acpica/pswalk.c:
29:	void acpi_ps_delete_parse_tree(union acpi_parse_object *);

File drivers/acpi/acpica/psxface.c:
42:	acpi_status acpi_debug_trace(const char *, u32, u32, u32);
84:	acpi_status acpi_ps_execute_method(struct acpi_evaluate_info *);
239:	acpi_status acpi_ps_execute_table(struct acpi_evaluate_info *);
324:	static void acpi_ps_update_parameter_list(struct acpi_evaluate_info *, u16);

File drivers/acpi/acpica/rsaddr.c:
272:	u8 acpi_rs_get_address_common(struct acpi_resource *, union aml_resource *);
322:	void acpi_rs_set_address_common(union aml_resource *, struct acpi_resource *);

File drivers/acpi/acpica/rscalc.c:
154:	acpi_status acpi_rs_get_aml_length(struct acpi_resource *, acpi_size, acpi_size *);
441:	acpi_status acpi_rs_get_list_length(u8 *, u32, acpi_size *);
715:	acpi_status acpi_rs_get_pci_routing_table_length(union acpi_operand_object *, acpi_size *);
69:	static acpi_rs_length acpi_rs_struct_option_length(struct acpi_resource_source *);

File drivers/acpi/acpica/rscreate.c:
30:	acpi_status acpi_buffer_to_resource(u8 *, u16, struct acpi_resource **);
404:	acpi_status acpi_rs_create_aml_resources(struct acpi_buffer *, struct acpi_buffer *);
179:	acpi_status acpi_rs_create_pci_routing_table(union acpi_operand_object *, struct acpi_buffer *);
103:	acpi_status acpi_rs_create_resource_list(union acpi_operand_object *, struct acpi_buffer *);

File drivers/acpi/acpica/rslist.c:
30:	acpi_status acpi_rs_convert_aml_to_resources(u8 *, u32, u32, u8, void **);
123:	acpi_status acpi_rs_convert_resources_to_aml(struct acpi_resource *, acpi_size, u8 *);

File drivers/acpi/acpica/rsmisc.c:
35:	acpi_status acpi_rs_convert_aml_to_resource(struct acpi_resource *, union aml_resource *, struct acpi_rsconvert_info *);
434:	acpi_status acpi_rs_convert_resource_to_aml(struct acpi_resource *, union aml_resource *, struct acpi_rsconvert_info *);

File drivers/acpi/acpica/rsutils.c:
28:	u8 acpi_rs_decode_bitmask(u16, u8 *);
62:	u16 acpi_rs_encode_bitmask(u8 *, u8);
585:	acpi_status acpi_rs_get_aei_method_data(struct acpi_namespace_node *, struct acpi_buffer *);
483:	acpi_status acpi_rs_get_crs_method_data(struct acpi_namespace_node *, struct acpi_buffer *);
637:	acpi_status acpi_rs_get_method_data(acpi_handle, const char *, struct acpi_buffer *);
534:	acpi_status acpi_rs_get_prs_method_data(struct acpi_namespace_node *, struct acpi_buffer *);
433:	acpi_status acpi_rs_get_prt_method_data(struct acpi_namespace_node *, struct acpi_buffer *);
284:	acpi_rs_length acpi_rs_get_resource_source(acpi_rs_length, acpi_rs_length, struct acpi_resource_source *, union aml_resource *, char *);
96:	void acpi_rs_move_data(void *, void *, u16, u8);
217:	void acpi_rs_set_resource_header(u8, acpi_rsdesc_size, union aml_resource *);
167:	void acpi_rs_set_resource_length(acpi_rsdesc_size, union aml_resource *);
373:	acpi_rsdesc_size acpi_rs_set_resource_source(union aml_resource *, acpi_rs_length, struct acpi_resource_source *);
691:	acpi_status acpi_rs_set_srs_method_data(struct acpi_namespace_node *, struct acpi_buffer *);

File drivers/acpi/acpica/rsxface.c:
167:	acpi_status acpi_get_current_resources(acpi_handle, struct acpi_buffer *);
294:	acpi_status acpi_get_event_resources(acpi_handle, struct acpi_buffer *);
122:	acpi_status acpi_get_irq_routing_table(acpi_handle, struct acpi_buffer *);
209:	acpi_status acpi_get_possible_resources(acpi_handle, struct acpi_buffer *);
398:	acpi_status acpi_get_vendor_resource(acpi_handle, char *, struct acpi_vendor_uuid *, struct acpi_buffer *);
332:	acpi_status acpi_resource_to_address64(struct acpi_resource *, struct acpi_resource_address64 *);
248:	acpi_status acpi_set_current_resources(acpi_handle, struct acpi_buffer *);
506:	acpi_status acpi_walk_resource_buffer(struct acpi_buffer *, acpi_walk_resource_callback, void *);
594:	acpi_status acpi_walk_resources(acpi_handle, char *, acpi_walk_resource_callback, void *);
442:	static acpi_status acpi_rs_match_vendor_resource(struct acpi_resource *, void *);
57:	static acpi_status acpi_rs_validate_parameters(acpi_handle, struct acpi_buffer *, struct acpi_namespace_node **);

File drivers/acpi/acpica/tbdata.c:
119:	acpi_status acpi_tb_acquire_table(struct acpi_table_desc *, struct acpi_table_header **, u32 *, u8 *);
210:	acpi_status acpi_tb_acquire_temp_table(struct acpi_table_desc *, acpi_physical_address, u8);
771:	acpi_status acpi_tb_allocate_owner_id(u32);
717:	acpi_status acpi_tb_delete_namespace_by_owner(u32);
632:	acpi_status acpi_tb_get_next_table_descriptor(u32 *, struct acpi_table_desc **);
832:	acpi_status acpi_tb_get_owner_id(u32, acpi_owner_id *);
86:	void acpi_tb_init_table_descriptor(struct acpi_table_desc *, acpi_physical_address, u8, struct acpi_table_header *);
972:	acpi_status acpi_tb_install_and_load_table(acpi_physical_address, u8, u8, u32 *);
325:	void acpi_tb_invalidate_table(struct acpi_table_desc *);
859:	u8 acpi_tb_is_table_loaded(u32);
918:	acpi_status acpi_tb_load_table(u32, struct acpi_namespace_node *);
1056:	void acpi_tb_notify_table(u32, void *);
801:	acpi_status acpi_tb_release_owner_id(u32);
174:	void acpi_tb_release_table(struct acpi_table_header *, u32, u8);
268:	void acpi_tb_release_temp_table(struct acpi_table_desc *);
558:	acpi_status acpi_tb_resize_root_table_list(void);
887:	void acpi_tb_set_table_loaded_flag(u32, u8);
673:	void acpi_tb_terminate(void);
1009:	acpi_status acpi_tb_unload_table(u32);
292:	acpi_status acpi_tb_validate_table(struct acpi_table_desc *);
356:	acpi_status acpi_tb_validate_temp_table(struct acpi_table_desc *);
467:	acpi_status acpi_tb_verify_temp_table(struct acpi_table_desc *, char *, u32 *);
41:	static u8 acpi_tb_compare_tables(struct acpi_table_desc *, u32);

File drivers/acpi/acpica/tbfadt.c:
354:	void acpi_tb_create_local_fadt(struct acpi_table_header *, u32);
276:	void acpi_tb_parse_fadt(void);
439:	static void acpi_tb_convert_fadt(void);
158:	static void acpi_tb_init_generic_address(struct acpi_generic_address *, u8, u8, u64, const char *, u8);
643:	static void acpi_tb_setup_fadt_registers(void);

File drivers/acpi/acpica/tbfind.c:
34:	acpi_status acpi_tb_find_table(char *, char *, char *, u32 *);

File drivers/acpi/acpica/tbinstal.c:
97:	acpi_status acpi_tb_install_standard_table(acpi_physical_address, u8, u8, u8, u32 *);
34:	void acpi_tb_install_table_with_override(struct acpi_table_desc *, u8, u32 *);
197:	void acpi_tb_override_table(struct acpi_table_desc *);
277:	void acpi_tb_uninstall_table(struct acpi_table_desc *);

File drivers/acpi/acpica/tbprint.c:
200:	u8 acpi_tb_checksum(u8 *, u32);
92:	void acpi_tb_print_table_header(acpi_physical_address, struct acpi_table_header *);
152:	acpi_status acpi_tb_verify_checksum(struct acpi_table_header *, u32);
38:	static void acpi_tb_fix_string(char *, acpi_size);

File drivers/acpi/acpica/tbutils.c:
80:	void acpi_tb_check_dsdt_header(void);
120:	struct acpi_table_header *acpi_tb_copy_dsdt(u32);
368:	acpi_status acpi_tb_get_table(struct acpi_table_desc *, struct acpi_table_header **);
35:	acpi_status acpi_tb_initialize_facs(void);
222:	acpi_status acpi_tb_parse_root_table(acpi_physical_address);
418:	void acpi_tb_put_table(struct acpi_table_desc *);

File drivers/acpi/acpica/tbxface.c:
32:	acpi_status acpi_allocate_root_table(u32);
297:	acpi_status acpi_get_table(char *, u32, struct acpi_table_header **);
405:	acpi_status acpi_get_table_by_index(u32, struct acpi_table_header **);
216:	acpi_status acpi_get_table_header(char *, u32, struct acpi_table_header *);
68:	acpi_status acpi_initialize_tables(struct acpi_table_desc *, u32, u8);
457:	acpi_status acpi_install_table_handler(acpi_table_handler, void *);
359:	void acpi_put_table(struct acpi_table_header *);
133:	acpi_status acpi_reallocate_root_table(void);
503:	acpi_status acpi_remove_table_handler(acpi_table_handler);

File drivers/acpi/acpica/tbxfload.c:
243:	acpi_status acpi_install_table(acpi_physical_address, u8);
283:	acpi_status acpi_load_table(struct acpi_table_header *, u32 *);
32:	acpi_status acpi_load_tables(void);
101:	acpi_status acpi_tb_load_namespace(void);
333:	acpi_status acpi_unload_parent_table(acpi_handle);
413:	acpi_status acpi_unload_table(u32);

File drivers/acpi/acpica/tbxfroot.c:
112:	acpi_status acpi_find_root_pointer(acpi_physical_address *);
28:	u32 acpi_tb_get_rsdp_length(struct acpi_table_rsdp *);
228:	u8 *acpi_tb_scan_memory_for_rsdp(u8 *, u32);
59:	acpi_status acpi_tb_validate_rsdp(struct acpi_table_rsdp *);

File drivers/acpi/acpica/utaddress.c:
41:	acpi_status acpi_ut_add_address_range(acpi_adr_space_type, acpi_physical_address, u32, struct acpi_namespace_node *);
161:	u32 acpi_ut_check_address_range(acpi_adr_space_type, acpi_physical_address, u32, u8);
237:	void acpi_ut_delete_address_lists(void);
95:	void acpi_ut_remove_address_range(acpi_adr_space_type, struct acpi_namespace_node *);

File drivers/acpi/acpica/utalloc.c:
62:	acpi_status acpi_ut_create_caches(void);
183:	acpi_status acpi_ut_delete_caches(void);
291:	acpi_status acpi_ut_initialize_buffer(struct acpi_buffer *, acpi_size);
250:	acpi_status acpi_ut_validate_buffer(struct acpi_buffer *);

File drivers/acpi/acpica/utascii.c:
92:	void acpi_ut_check_and_repair_ascii(u8 *, char *, u32);
60:	u8 acpi_ut_valid_name_char(char, u32);
27:	u8 acpi_ut_valid_nameseg(char *);

File drivers/acpi/acpica/utbuffer.c:
170:	void acpi_ut_debug_dump_buffer(u8 *, u32, u32, u32);
34:	void acpi_ut_dump_buffer(u8 *, u32, u32, u32);

File drivers/acpi/acpica/utcopy.c:
603:	acpi_status acpi_ut_copy_eobject_to_iobject(union acpi_object *, union acpi_operand_object **);
359:	acpi_status acpi_ut_copy_iobject_to_eobject(union acpi_operand_object *, struct acpi_buffer *);
944:	acpi_status acpi_ut_copy_iobject_to_iobject(union acpi_operand_object *, union acpi_operand_object **, struct acpi_walk_state *);
418:	static acpi_status acpi_ut_copy_esimple_to_isimple(union acpi_object *, union acpi_operand_object **);
212:	static acpi_status acpi_ut_copy_ielement_to_eelement(u8, union acpi_operand_object *, union acpi_generic_state *, void *);
791:	static acpi_status acpi_ut_copy_ielement_to_ielement(u8, union acpi_operand_object *, union acpi_generic_state *, void *);
888:	static acpi_status acpi_ut_copy_ipackage_to_ipackage(union acpi_operand_object *, union acpi_operand_object *, struct acpi_walk_state *);
78:	static acpi_status acpi_ut_copy_isimple_to_esimple(union acpi_operand_object *, union acpi_object *, u8 *, acpi_size *);
640:	static acpi_status acpi_ut_copy_simple_object(union acpi_operand_object *, union acpi_operand_object *);

File drivers/acpi/acpica/utdecode.c:
305:	const char *acpi_ut_get_descriptor_name(void *);
123:	const char *acpi_ut_get_event_name(u32);
388:	const char *acpi_ut_get_mutex_name(u32);
239:	const char *acpi_ut_get_node_name(void *);
202:	const char *acpi_ut_get_object_type_name(union acpi_operand_object *);
343:	const char *acpi_ut_get_reference_name(union acpi_operand_object *);
85:	const char *acpi_ut_get_region_name(u8);
192:	const char *acpi_ut_get_type_name(acpi_object_type);
570:	u8 acpi_ut_valid_object_type(acpi_object_type);

File drivers/acpi/acpica/utdelete.c:
676:	void acpi_ut_add_reference(union acpi_operand_object *);
333:	void acpi_ut_delete_internal_object_list(union acpi_operand_object **);
709:	void acpi_ut_remove_reference(union acpi_operand_object *);
481:	acpi_status acpi_ut_update_object_reference(union acpi_operand_object *, u16);
36:	static void acpi_ut_delete_internal_obj(union acpi_operand_object *);
365:	static void acpi_ut_update_ref_count(union acpi_operand_object *, u32);

File drivers/acpi/acpica/uterror.c:
299:	void acpi_ut_method_error(const char *, u32, const char *, struct acpi_namespace_node *, const char *, acpi_status);
124:	void acpi_ut_predefined_bios_error(const char *, u32, char *, u16, const char *, ...);
82:	void acpi_ut_predefined_info(const char *, u32, char *, u16, const char *, ...);
39:	void acpi_ut_predefined_warning(const char *, u32, char *, u16, const char *, ...);
168:	void acpi_ut_prefixed_namespace_error(const char *, u32, union acpi_generic_state *, const char *, acpi_status);

File drivers/acpi/acpica/uteval.c:
173:	acpi_status acpi_ut_evaluate_numeric_object(const char *, struct acpi_namespace_node *, u64 *);
37:	acpi_status acpi_ut_evaluate_object(struct acpi_namespace_node *, const char *, u32, union acpi_operand_object **);
216:	acpi_status acpi_ut_execute_STA(struct acpi_namespace_node *, u32 *);
272:	acpi_status acpi_ut_execute_power_methods(struct acpi_namespace_node *, const char **, u8, u8 *);

File drivers/acpi/acpica/utexcep.c:
30:	const char *acpi_format_exception(acpi_status);
65:	const struct acpi_exception_info *acpi_ut_validate_exception(acpi_status);

File drivers/acpi/acpica/uthex.c:
88:	u8 acpi_ut_ascii_char_to_hex(int);
58:	acpi_status acpi_ut_ascii_to_hex_byte(char *, u8 *);
36:	char acpi_ut_hex_to_ascii_char(u64, u32);

File drivers/acpi/acpica/utids.c:
196:	acpi_status acpi_ut_execute_CID(struct acpi_namespace_node *, struct acpi_pnp_device_id_list **);
335:	acpi_status acpi_ut_execute_CLS(struct acpi_namespace_node *, struct acpi_pnp_device_id **);
35:	acpi_status acpi_ut_execute_HID(struct acpi_namespace_node *, struct acpi_pnp_device_id **);
113:	acpi_status acpi_ut_execute_UID(struct acpi_namespace_node *, struct acpi_pnp_device_id **);

File drivers/acpi/acpica/utinit.c:
85:	acpi_status acpi_ut_init_globals(void);
244:	void acpi_ut_subsystem_shutdown(void);

File drivers/acpi/acpica/utlock.c:
71:	acpi_status acpi_ut_acquire_read_lock(struct acpi_rw_lock *);
129:	acpi_status acpi_ut_acquire_write_lock(struct acpi_rw_lock *);
28:	acpi_status acpi_ut_create_rw_lock(struct acpi_rw_lock *);
42:	void acpi_ut_delete_rw_lock(struct acpi_rw_lock *);
93:	acpi_status acpi_ut_release_read_lock(struct acpi_rw_lock *);
137:	void acpi_ut_release_write_lock(struct acpi_rw_lock *);

File drivers/acpi/acpica/utmath.c:
470:	acpi_status acpi_ut_divide(u64, u64, u64 *, u64 *);
444:	acpi_status acpi_ut_short_divide(u64, u32, u64 *, u32 *);
165:	acpi_status acpi_ut_short_multiply(u64, u32, u64 *);
189:	acpi_status acpi_ut_short_shift_left(u64, u32, u64 *);
213:	acpi_status acpi_ut_short_shift_right(u64, u32, u64 *);

File drivers/acpi/acpica/utmisc.c:
158:	acpi_status acpi_ut_create_update_state_and_push(union acpi_operand_object *, u16, union acpi_generic_state **);
86:	u32 acpi_ut_dword_byte_swap(u32);
26:	u8 acpi_ut_is_pci_root_bridge(char *);
124:	void acpi_ut_set_integer_width(u8);
197:	acpi_status acpi_ut_walk_package_tree(union acpi_operand_object *, void *, acpi_pkg_callback, void *);

File drivers/acpi/acpica/utmutex.c:
187:	acpi_status acpi_ut_acquire_mutex(acpi_mutex_handle);
32:	acpi_status acpi_ut_mutex_initialize(void);
95:	void acpi_ut_mutex_terminate(void);
273:	acpi_status acpi_ut_release_mutex(acpi_mutex_handle);

File drivers/acpi/acpica/utnonansi.c:
90:	int acpi_ut_stricmp(char *, char *);
29:	void acpi_ut_strlwr(char *);
58:	void acpi_ut_strupr(char *);

File drivers/acpi/acpica/utobject.c:
352:	void *acpi_ut_allocate_object_desc_dbg(const char *, u32, u32);
201:	union acpi_operand_object *acpi_ut_create_buffer_object(acpi_size);
172:	union acpi_operand_object *acpi_ut_create_integer_object(u64);
53:	union acpi_operand_object *acpi_ut_create_internal_object_dbg(const char *, u32, u32, acpi_object_type);
130:	union acpi_operand_object *acpi_ut_create_package_object(u32);
256:	union acpi_operand_object *acpi_ut_create_string_object(acpi_size);
389:	void acpi_ut_delete_object_desc(union acpi_operand_object *);
664:	acpi_status acpi_ut_get_object_size(union acpi_operand_object *, acpi_size *);
305:	u8 acpi_ut_valid_internal_object(void *);
555:	static acpi_status acpi_ut_get_element_length(u8, union acpi_operand_object *, union acpi_generic_state *, void *);
424:	static acpi_status acpi_ut_get_simple_object_size(union acpi_operand_object *, acpi_size *);

File drivers/acpi/acpica/utosi.c:
342:	struct acpi_interface_info *acpi_ut_get_interface(acpi_string);
107:	acpi_status acpi_ut_initialize_interfaces(void);
195:	acpi_status acpi_ut_install_interface(acpi_string);
145:	acpi_status acpi_ut_interface_terminate(void);
383:	acpi_status acpi_ut_osi_implementation(struct acpi_walk_state *);
236:	acpi_status acpi_ut_remove_interface(acpi_string);
301:	acpi_status acpi_ut_update_interfaces(u8);

File drivers/acpi/acpica/utownerid.c:
28:	acpi_status acpi_ut_allocate_owner_id(acpi_owner_id *);
140:	void acpi_ut_release_owner_id(acpi_owner_id *);

File drivers/acpi/acpica/utpredef.c:
110:	void acpi_ut_get_expected_return_types(char *, u32);
43:	const union acpi_predefined_info *acpi_ut_get_next_predefined_method(const union acpi_predefined_info *);
73:	const union acpi_predefined_info *acpi_ut_match_predefined_method(char *);

File drivers/acpi/acpica/utresrc.c:
517:	u32 acpi_ut_get_descriptor_length(void *);
544:	acpi_status acpi_ut_get_resource_end_tag(union acpi_operand_object *, u8 **);
490:	u8 acpi_ut_get_resource_header_length(void *);
452:	u16 acpi_ut_get_resource_length(void *);
418:	u8 acpi_ut_get_resource_type(void *);
262:	acpi_status acpi_ut_validate_resource(struct acpi_walk_state *, void *, u8 *);
137:	acpi_status acpi_ut_walk_aml_resources(struct acpi_walk_state *, u8 *, acpi_size, acpi_walk_aml_callback, void **);

File drivers/acpi/acpica/utstate.c:
230:	union acpi_generic_state *acpi_ut_create_control_state(void);
84:	union acpi_generic_state *acpi_ut_create_generic_state(void);
191:	union acpi_generic_state *acpi_ut_create_pkg_state(void *, void *, u32);
113:	struct acpi_thread_state *acpi_ut_create_thread_state(void);
156:	union acpi_generic_state *acpi_ut_create_update_state(union acpi_operand_object *, u16);
264:	void acpi_ut_delete_generic_state(union acpi_generic_state *);
51:	union acpi_generic_state *acpi_ut_pop_generic_state(union acpi_generic_state **);
27:	void acpi_ut_push_generic_state(union acpi_generic_state **, union acpi_generic_state *);

File drivers/acpi/acpica/utstring.c:
29:	void acpi_ut_print_string(char *, u16);
132:	void acpi_ut_repair_name(char *);

File drivers/acpi/acpica/utstrsuppt.c:
94:	acpi_status acpi_ut_convert_decimal_string(char *, u64 *);
148:	acpi_status acpi_ut_convert_hex_string(char *, u64 *);
40:	acpi_status acpi_ut_convert_octal_string(char *, u64 *);
247:	u8 acpi_ut_detect_hex_prefix(char **);
292:	u8 acpi_ut_detect_octal_prefix(char **);
271:	void acpi_ut_remove_hex_prefix(char **);
200:	char acpi_ut_remove_leading_zeros(char **);
225:	char acpi_ut_remove_whitespace(char **);
331:	static acpi_status acpi_ut_insert_digit(u64 *, u32, int);

File drivers/acpi/acpica/utstrtoul64.c:
287:	u64 acpi_ut_explicit_strtoul64(char *);
206:	u64 acpi_ut_implicit_strtoul64(char *);
80:	acpi_status acpi_ut_strtoul64(char *, u64 *);

File drivers/acpi/acpica/utxface.c:
414:	u32 acpi_check_address_range(acpi_adr_space_type, acpi_physical_address, acpi_size, u8);
451:	acpi_status acpi_decode_pld_buffer(u8 *, acpi_size, struct acpi_pld_info **);
258:	acpi_status acpi_install_interface(acpi_string);
348:	acpi_status acpi_install_interface_handler(acpi_interface_handler);
233:	acpi_status acpi_purge_cached_objects(void);
311:	acpi_status acpi_remove_interface(acpi_string);
30:	acpi_status acpi_terminate(void);
382:	acpi_status acpi_update_interfaces(u8);

File drivers/acpi/acpica/utxferror.c:
170:	void acpi_bios_error(const char *, u32, const char *, ...);
204:	void acpi_bios_exception(const char *, u32, acpi_status, const char *, ...);
247:	void acpi_bios_warning(const char *, u32, const char *, ...);
35:	void acpi_error(const char *, u32, const char *, ...);
68:	void acpi_exception(const char *, u32, acpi_status, const char *, ...);
138:	void acpi_info(const char *, ...);
109:	void acpi_warning(const char *, u32, const char *, ...);

File drivers/acpi/acpica/utxfinit.c:
110:	acpi_status acpi_enable_subsystem(u32);
208:	acpi_status acpi_initialize_objects(u32);
38:	acpi_status acpi_initialize_subsystem(void);

File drivers/acpi/acpica/utxfmutex.c:
100:	acpi_status acpi_acquire_mutex(acpi_handle, acpi_string, u16);
136:	acpi_status acpi_release_mutex(acpi_handle, acpi_string);
38:	static acpi_status acpi_ut_get_mutex_object(acpi_handle, acpi_string, union acpi_operand_object **);

File drivers/acpi/apei/apei-base.c:
57:	int __apei_exec_read_register(struct acpi_whea_header *, u64 *);
148:	int __apei_exec_run(struct apei_exec_context *, u8, bool);
99:	int __apei_exec_write_register(struct acpi_whea_header *, u64);
747:	int apei_exec_collect_resources(struct apei_exec_context *, struct apei_resources *);
44:	void apei_exec_ctx_init(struct apei_exec_context *, struct apei_exec_ins_type *, u32, struct acpi_whea_header *, u32);
137:	int apei_exec_noop(struct apei_exec_context *, struct acpi_whea_header *);
273:	int apei_exec_post_unmap_gars(struct apei_exec_context *);
243:	int apei_exec_pre_map_gars(struct apei_exec_context *);
70:	int apei_exec_read_register(struct apei_exec_context *, struct acpi_whea_header *);
85:	int apei_exec_read_register_value(struct apei_exec_context *, struct acpi_whea_header *);
118:	int apei_exec_write_register(struct apei_exec_context *, struct acpi_whea_header *);
125:	int apei_exec_write_register_value(struct apei_exec_context *, struct acpi_whea_header *);
755:	struct dentry *apei_get_debugfs_dir(void);
626:	int apei_map_generic_address(struct acpi_generic_address *);
779:	int apei_osc_setup(void);
648:	int apei_read(u64 *, struct acpi_generic_address *);
412:	int apei_resources_add(struct apei_resources *, unsigned long, unsigned long, bool);
383:	void apei_resources_fini(struct apei_resources *);
555:	void apei_resources_release(struct apei_resources *);
464:	int apei_resources_request(struct apei_resources *, const char *);
428:	int apei_resources_sub(struct apei_resources *, struct apei_resources *);
682:	int apei_write(u64, struct acpi_generic_address *);
766:	int arch_apei_enable_cmcff(struct acpi_hest_header *, void *);
773:	void arch_apei_report_mem_error(int, struct cper_sec_mem_err *);
571:	static int apei_check_gar(struct acpi_generic_address *, u64 *, u32 *);
440:	static int apei_get_res_callback(__u64, __u64, void *);
295:	static int apei_res_add(struct list_head *, unsigned long, unsigned long);
373:	static void apei_res_clean(struct list_head *);
333:	static int apei_res_sub(struct list_head *, struct list_head *);
713:	static int collect_res_callback(struct apei_exec_context *, struct acpi_whea_header *, void *);

File drivers/acpi/apei/bert.c:
93:	static int bert_init(void);
35:	static void bert_print_all(struct acpi_bert_region *, unsigned int);
76:	static int setup_bert_disable(char *);

File drivers/acpi/apei/erst.c:
859:	int erst_clear(u64);
408:	ssize_t erst_get_record_count(void);
454:	int erst_get_record_id_begin(int *);
604:	void erst_get_record_id_end(void);
540:	int erst_get_record_id_next(int *, u64 *);
843:	ssize_t erst_read(u64, struct cper_record_header *, size_t);
767:	int erst_write(const struct cper_record_header *);
703:	static int __erst_clear_from_storage(u64);
660:	static int __erst_read_from_storage(u64, u64);
474:	static int __erst_record_id_cache_add_one(void);
585:	static void __erst_record_id_cache_compact(void);
621:	static int __erst_write_to_storage(u64);
1088:	static int erst_clearer(struct pstore_record *);
965:	static int erst_close_pstore(struct pstore_info *);
130:	static int erst_exec_add(struct apei_exec_context *, struct acpi_whea_header *);
144:	static int erst_exec_add_value(struct apei_exec_context *, struct acpi_whea_header *);
236:	static int erst_exec_goto(struct apei_exec_context *, struct acpi_whea_header *);
112:	static int erst_exec_load_var1(struct apei_exec_context *, struct acpi_whea_header *);
118:	static int erst_exec_load_var2(struct apei_exec_context *, struct acpi_whea_header *);
255:	static int erst_exec_move_data(struct apei_exec_context *, struct acpi_whea_header *);
249:	static int erst_exec_set_dst_address_base(struct apei_exec_context *, struct acpi_whea_header *);
243:	static int erst_exec_set_src_address_base(struct apei_exec_context *, struct acpi_whea_header *);
218:	static int erst_exec_skip_next_instruction_if_true(struct apei_exec_context *, struct acpi_whea_header *);
172:	static int erst_exec_stall(struct apei_exec_context *, struct acpi_whea_header *);
189:	static int erst_exec_stall_while_true(struct apei_exec_context *, struct acpi_whea_header *);
124:	static int erst_exec_store_var1(struct apei_exec_context *, struct acpi_whea_header *);
137:	static int erst_exec_subtract(struct apei_exec_context *, struct acpi_whea_header *);
158:	static int erst_exec_subtract_value(struct apei_exec_context *, struct acpi_whea_header *);
374:	static int erst_get_erange(struct erst_erange *);
1093:	static int erst_init(void);
953:	static int erst_open_pstore(struct pstore_info *);
972:	static ssize_t erst_reader(struct pstore_record *);
1040:	static int erst_writer(struct pstore_record *);
891:	static int setup_erst_disable(char *);

File drivers/acpi/apei/ghes.c:
169:	int ghes_estatus_pool_init(int);
580:	int ghes_register_vendor_record_notifier(struct notifier_block *);
586:	void ghes_unregister_vendor_record_notifier(struct notifier_block *);
322:	static int __ghes_check_estatus(struct ghes *, struct acpi_hest_generic_status *);
849:	static void __ghes_panic(struct ghes *, struct acpi_hest_generic_status *, u64, enum fixed_addresses);
346:	static int __ghes_peek_estatus(struct acpi_hest_generic_status *, u64 *, enum fixed_addresses, struct ghes *, struct ghes *);
680:	static void __ghes_print_estatus(const char *, const struct acpi_hest_generic *, const struct acpi_hest_generic_status *);
888:	static void ghes_add_timer(struct ghes *);
406:	static void ghes_clear_estatus(struct ghes *, struct acpi_hest_generic_status *, u64, enum fixed_addresses);
297:	static void ghes_copy_tofrom_phys(void *, u64, u32, int, enum fixed_addresses);
608:	static void ghes_defer_non_standard_event(struct acpi_hest_generic_data *, int);
447:	static bool ghes_do_memory_failure(u64, int);
628:	static bool ghes_do_proc(const struct acpi_hest_generic_status *, struct ghes *);
803:	static void ghes_estatus_cache_add(struct acpi_hest_generic *, struct acpi_hest_generic_status *);
755:	static struct ghes_estatus_cache *ghes_estatus_cache_alloc(struct acpi_hest_generic *, struct acpi_hest_generic_status *);
785:	static void ghes_estatus_cache_free(struct ghes_estatus_cache *);
795:	static void ghes_estatus_cache_rcu_free(struct callback_head *);
726:	static int ghes_estatus_cached(struct acpi_hest_generic_status *);
489:	static bool ghes_handle_arm_hw_error(struct acpi_hest_generic_data *, int);
1037:	static int ghes_in_nmi_queue_one_entry(struct ghes *, enum fixed_addresses);
1469:	static int ghes_init(void);
915:	static irqreturn_t ghes_irq_func(int, void *);
432:	static void ghes_kick_task_work(struct callback_head *);
226:	static struct ghes *ghes_new(struct acpi_hest_generic *);
930:	static int ghes_notify_hed(struct notifier_block *, unsigned long, void *);
1167:	static int ghes_notify_nmi(struct pt_regs *, unsigned int);
903:	static void ghes_poll_func(struct timer_list *);
1273:	static int ghes_probe(struct platform_device *);
863:	static int ghes_proc(struct ghes *);
967:	static void ghes_proc_in_irq(struct irq_work *);
1405:	static int ghes_remove(struct platform_device *);
592:	static void ghes_vendor_record_work_func(struct work_struct *);

File drivers/acpi/apei/hest.c:
227:	void acpi_hest_init(void);
83:	int apei_hest_parse(apei_hest_func_t, void *);
191:	static int hest_ghes_dev_register(unsigned int);
124:	static int hest_parse_cmc(struct acpi_hest_header *, void *);
150:	static int hest_parse_ghes(struct acpi_hest_header *, void *);
140:	static int hest_parse_ghes_count(struct acpi_hest_header *, void *);
219:	static int setup_hest_disable(char *);

File drivers/acpi/battery.c:
709:	void battery_hook_register(struct acpi_battery_hook *);
703:	void battery_hook_unregister(struct acpi_battery_hook *);
685:	static void __battery_hook_unregister(struct acpi_battery_hook *, int);
1177:	static int acpi_battery_add(struct acpi_device *);
645:	static ssize_t acpi_battery_alarm_show(struct device *, struct device_attribute *, char *);
653:	static ssize_t acpi_battery_alarm_store(struct device *, struct device_attribute *, const char *, size_t);
1305:	static void acpi_battery_exit(void);
517:	static int acpi_battery_get_info(struct acpi_battery *);
205:	static int acpi_battery_get_property(struct power_supply *, enum power_supply_property, union power_supply_propval *);
556:	static int acpi_battery_get_state(struct acpi_battery *);
1296:	static int acpi_battery_init(void);
632:	static int acpi_battery_init_alarm(struct acpi_battery *);
1275:	static void acpi_battery_init_async(void *, async_cookie_t);
1019:	static void acpi_battery_notify(struct acpi_device *, u32);
900:	static void acpi_battery_quirks(struct acpi_battery *);
1223:	static int acpi_battery_remove(struct acpi_device *);
1241:	static int acpi_battery_resume(struct device *);
612:	static int acpi_battery_set_alarm(struct acpi_battery *);
950:	static int acpi_battery_update(struct acpi_battery *, bool);
1095:	static int battery_ac_is_broken_quirk(const struct dmi_system_id *);
1081:	static int battery_bix_broken_package_quirk(const struct dmi_system_id *);
1102:	static int battery_do_not_check_pmic_quirk(const struct dmi_system_id *);
746:	static void battery_hook_add_battery(struct acpi_battery *);
791:	static void battery_hook_exit(void);
1088:	static int battery_notification_delay_quirk(const struct dmi_system_id *);
1047:	static int battery_notify(struct notifier_block *, unsigned long, void *);
434:	static int extract_package(struct acpi_battery *, union acpi_object *, const struct acpi_offsets *, int);
870:	static void find_battery(const struct dmi_header *, void *);
806:	static int sysfs_add_battery(struct acpi_battery *);
856:	static void sysfs_remove_battery(struct acpi_battery *);

File drivers/acpi/bgrt.c:
60:	int acpi_parse_bgrt(struct acpi_table_header *);
66:	static int bgrt_init(void);
32:	static ssize_t image_read(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t, size_t);
27:	static ssize_t status_show(struct kobject *, struct kobj_attribute *, char *);
28:	static ssize_t type_show(struct kobject *, struct kobj_attribute *, char *);
26:	static ssize_t version_show(struct kobject *, struct kobj_attribute *, char *);
29:	static ssize_t xoffset_show(struct kobject *, struct kobj_attribute *, char *);
30:	static ssize_t yoffset_show(struct kobject *, struct kobj_attribute *, char *);

File drivers/acpi/blacklist.c:
45:	int acpi_blacklisted(void);
74:	static int dmi_enable_rev_override(const struct dmi_system_id *);

File drivers/acpi/bus.c:
137:	int acpi_bus_attach_private_data(acpi_handle, void *);
169:	void acpi_bus_detach_private_data(acpi_handle);
152:	int acpi_bus_get_private_data(acpi_handle, void **);
96:	int acpi_bus_get_status(struct acpi_device *);
78:	acpi_status acpi_bus_get_status_handle(acpi_handle, unsigned long long *);
130:	void acpi_bus_private_data_handler(acpi_handle, void *);
853:	int acpi_bus_register_driver(struct acpi_driver *);
876:	void acpi_bus_unregister_driver(struct acpi_driver *);
606:	struct acpi_device *acpi_companion_match(const struct device *);
805:	const void *acpi_device_get_match_data(const struct device *);
579:	bool acpi_device_is_first_physical_node(struct acpi_device *, const struct device *);
827:	bool acpi_driver_match_device(struct device *, const struct device_driver *);
1023:	void acpi_early_init(void);
539:	struct device *acpi_get_first_physical_node(struct acpi_device *);
784:	const struct acpi_device_id *acpi_match_device(const struct acpi_device_id *, const struct device *);
820:	int acpi_match_device_ids(struct acpi_device *, const struct acpi_device_id *);
189:	acpi_status acpi_run_osc(acpi_handle, struct acpi_osc_context *);
700:	void acpi_set_modalias(struct acpi_device *, const char *, char *, size_t);
1096:	void acpi_subsystem_init(void);
731:	static bool __acpi_match_device(struct acpi_device *, const struct acpi_device_id *, const struct of_device_id *, const struct acpi_device_id **, const struct of_device_id **);
1125:	static int acpi_bus_init(void);
887:	static int acpi_bus_match(struct device *, struct device_driver *);
346:	static void acpi_bus_notify(acpi_handle, u32, void *);
285:	static void acpi_bus_osc_support(void);
1118:	static acpi_status acpi_bus_table_handler(u32, void *, void *);
435:	static u32 acpi_device_fixed_event(void *);
420:	static void acpi_device_notify(acpi_handle, u32, void *);
427:	static void acpi_device_notify_fixed(void *);
901:	static int acpi_device_probe(struct device *);
940:	static int acpi_device_remove(struct device *);
896:	static int acpi_device_uevent(struct device *, struct kobj_uevent_env *);
1231:	static int acpi_init(void);
630:	static bool acpi_of_match_device(struct acpi_device *, const struct of_device_id *, const struct of_device_id **);
175:	static void acpi_print_osc_error(acpi_handle, struct acpi_osc_context *, char *);
504:	static void acpi_sb_notify(acpi_handle, u32, void *);
484:	static void sb_notify_work(struct work_struct *);
48:	static int set_copy_dsdt(const struct dmi_system_id *);

File drivers/acpi/button.c:
359:	int acpi_lid_open(void);
480:	static int acpi_button_add(struct acpi_device *);
277:	static int acpi_button_add_fs(struct acpi_device *);
657:	static void acpi_button_driver_exit(void);
657:	static int acpi_button_driver_init(void);
402:	static void acpi_button_notify(struct acpi_device *, u32);
582:	static int acpi_button_remove(struct acpi_device *);
336:	static int acpi_button_remove_fs(struct acpi_device *);
453:	static int acpi_button_resume(struct device *);
265:	static int acpi_button_state_seq_show(struct seq_file *, void *);
444:	static int acpi_button_suspend(struct device *);
468:	static int acpi_lid_input_open(struct input_dev *);
183:	static int acpi_lid_notify_state(struct acpi_device *, int);
606:	static int param_get_lid_init_state(char *, const struct kernel_param *);
592:	static int param_set_lid_init_state(const char *, const struct kernel_param *);

File drivers/acpi/container.c:
100:	void acpi_container_init(void);
26:	static int acpi_container_offline(struct container_dev *);
39:	static void acpi_container_release(struct device *);
44:	static int container_device_attach(struct acpi_device *, const struct acpi_device_id *);
73:	static void container_device_detach(struct acpi_device *);
82:	static void container_device_online(struct acpi_device *);

File drivers/acpi/cppc_acpi.c:
955:	void acpi_cppc_processor_exit(struct acpi_processor *);
774:	int acpi_cppc_processor_probe(struct acpi_processor *);
554:	int acpi_get_psd_map(struct cppc_cpudata **);
662:	bool cpc_ffh_supported(void);
999:	int cpc_read_ffh(int, struct cpc_reg *, u64 *);
1014:	int cpc_write_ffh(int, struct cpc_reg *, u64);
1117:	int cppc_get_desired_perf(int, u64 *);
1159:	int cppc_get_perf_caps(int, struct cppc_perf_caps *);
1249:	int cppc_get_perf_ctrs(int, struct cppc_perf_fb_ctrs *);
1454:	unsigned int cppc_get_transition_latency(int);
1329:	int cppc_set_perf(int, struct cppc_perf_ctrls *);
414:	static int __acpi_get_psd_map(struct cppc_cpudata **, struct cpc_desc **);
350:	static int acpi_get_psd(struct cpc_desc *, acpi_handle);
513:	static acpi_status acpi_parse_cpc(acpi_handle, u32, void *, void **);
188:	static int check_pcc_chan(int, bool);
1025:	static int cpc_read(int, struct cpc_register_resource *, u64 *);
1070:	static int cpc_write(int, struct cpc_register_resource *, u64);
335:	static void cppc_chan_tx_done(struct mbox_client *, void *, int);
223:	static int send_pcc_cmd(int, u16);
154:	static ssize_t show_feedback_ctrs(struct kobject *, struct kobj_attribute *, char *);
144:	static ssize_t show_highest_perf(struct kobject *, struct kobj_attribute *, char *);
148:	static ssize_t show_lowest_freq(struct kobject *, struct kobj_attribute *, char *);
147:	static ssize_t show_lowest_nonlinear_perf(struct kobject *, struct kobj_attribute *, char *);
145:	static ssize_t show_lowest_perf(struct kobject *, struct kobj_attribute *, char *);
149:	static ssize_t show_nominal_freq(struct kobject *, struct kobj_attribute *, char *);
146:	static ssize_t show_nominal_perf(struct kobject *, struct kobj_attribute *, char *);
151:	static ssize_t show_reference_perf(struct kobject *, struct kobj_attribute *, char *);
152:	static ssize_t show_wraparound_time(struct kobject *, struct kobj_attribute *, char *);

File drivers/acpi/debugfs.c:
16:	void acpi_debugfs_init(void);

File drivers/acpi/device_pm.c:
486:	acpi_status acpi_add_pm_notifier(struct acpi_device *, struct device *, void (*)(struct acpi_device_wakeup_context *));
548:	bool acpi_bus_can_wakeup(acpi_handle);
303:	int acpi_bus_init_power(struct acpi_device *);
425:	bool acpi_bus_power_manageable(acpi_handle);
290:	int acpi_bus_set_power(acpi_handle, int);
415:	int acpi_bus_update_power(acpi_handle, int *);
1294:	int acpi_dev_pm_attach(struct device *, bool);
937:	int acpi_dev_resume(struct device *);
905:	int acpi_dev_suspend(struct device *, bool);
361:	int acpi_device_fix_up_power(struct acpi_device *);
76:	int acpi_device_get_power(struct acpi_device *, int *);
161:	int acpi_device_set_power(struct acpi_device *, int);
374:	int acpi_device_update_power(struct acpi_device *, int *);
558:	bool acpi_pm_device_can_wakeup(struct device *);
692:	int acpi_pm_device_sleep_state(struct device *, int *, int);
839:	int acpi_pm_set_device_wakeup(struct device *, bool);
439:	void acpi_pm_wakeup_event(struct device *);
31:	const char *acpi_power_state_string(int);
521:	acpi_status acpi_remove_pm_notifier(struct acpi_device *);
1028:	void acpi_subsys_complete(struct device *);
1143:	int acpi_subsys_freeze(struct device *);
1179:	int acpi_subsys_poweroff(struct device *);
1006:	int acpi_subsys_prepare(struct device *);
1163:	int acpi_subsys_restore_early(struct device *);
972:	int acpi_subsys_runtime_resume(struct device *);
958:	int acpi_subsys_runtime_suspend(struct device *);
1050:	int acpi_subsys_suspend(struct device *);
1067:	int acpi_subsys_suspend_late(struct device *);
1083:	int acpi_subsys_suspend_noirq(struct device *);
752:	static int __acpi_device_wakeup_enable(struct acpi_device *, u32);
980:	static bool acpi_dev_needs_resume(struct device *, struct acpi_device *);
1256:	static void acpi_dev_pm_detach(struct device *, bool);
586:	static int acpi_dev_pm_get_state(struct device *, struct acpi_device *, u32, int *, int *);
445:	static void acpi_pm_notify_handler(acpi_handle, void *, u32);
740:	static void acpi_pm_notify_work_func(struct acpi_device_wakeup_context *);
1196:	static int acpi_subsys_poweroff_late(struct device *);
1214:	static int acpi_subsys_poweroff_noirq(struct device *);
1128:	static int acpi_subsys_resume_early(struct device *);
1112:	static int acpi_subsys_resume_noirq(struct device *);

File drivers/acpi/device_sysfs.c:
240:	int __acpi_device_uevent_modalias(struct acpi_device *, struct kobj_uevent_env *);
321:	int acpi_device_modalias(struct device *, char *, int);
597:	void acpi_device_remove_files(struct acpi_device *);
505:	int acpi_device_setup_files(struct acpi_device *);
276:	int acpi_device_uevent_modalias(struct device *, struct kobj_uevent_env *);
282:	static int __acpi_device_modalias(struct acpi_device *, char *, int);
60:	static ssize_t acpi_data_node_attr_show(struct kobject *, struct attribute *, char *);
73:	static void acpi_data_node_release(struct kobject *);
85:	static void acpi_expose_nondev_subnodes(struct kobject *, struct acpi_device_data *);
107:	static void acpi_hide_nondev_subnodes(struct acpi_device_data *);
410:	static ssize_t adr_show(struct device *, struct device_attribute *, char *);
192:	static int create_of_modalias(struct acpi_device *, char *, int);
134:	static int create_pnp_modalias(struct acpi_device *, char *, int);
45:	static ssize_t data_node_show_path(struct acpi_data_node *, char *);
432:	static ssize_t description_show(struct device *, struct device_attribute *, char *);
361:	static ssize_t eject_store(struct device *, struct device_attribute *, const char *, size_t);
393:	static ssize_t hid_show(struct device *, struct device_attribute *, char *);
473:	static ssize_t hrv_show(struct device *, struct device_attribute *, char *);
328:	static ssize_t modalias_show(struct device *, struct device_attribute *, char *);
422:	static ssize_t path_show(struct device *, struct device_attribute *, char *);
350:	static ssize_t power_state_show(struct device *, struct device_attribute *, char *);
334:	static ssize_t real_power_state_show(struct device *, struct device_attribute *, char *);
487:	static ssize_t status_show(struct device *, struct device_attribute *, char *);
458:	static ssize_t sun_show(struct device *, struct device_attribute *, char *);
401:	static ssize_t uid_show(struct device *, struct device_attribute *, char *);

File drivers/acpi/dock.c:
585:	void acpi_dock_add(struct acpi_device *);
421:	int dock_notify(struct acpi_device *, u32);
182:	int is_dock_device(struct acpi_device *);
161:	void register_dock_dependent_device(struct acpi_device *, acpi_handle);
71:	static int add_dock_dependent_device(struct dock_station *, struct acpi_device *);
280:	static void dock_event(struct dock_station *, u32, int);
487:	static ssize_t docked_show(struct device *, struct device_attribute *, char *);
501:	static ssize_t flags_show(struct device *, struct device_attribute *, char *);
313:	static void handle_dock(struct dock_station *, int);
386:	static int handle_eject_request(struct dock_station *, u32);
251:	static void hotplug_dock_devices(struct dock_station *, u32);
547:	static ssize_t type_show(struct device *, struct device_attribute *, char *);
533:	static ssize_t uid_show(struct device *, struct device_attribute *, char *);
513:	static ssize_t undock_store(struct device *, struct device_attribute *, const char *, size_t);

File drivers/acpi/dptf/int340x_thermal.c:
58:	void acpi_int340x_thermal_init(void);
41:	static int int340x_thermal_handler_attach(struct acpi_device *, const struct acpi_device_id *);

File drivers/acpi/ec.c:
1073:	int acpi_ec_add_query_handler(struct acpi_ec *, u8, acpi_handle, acpi_ec_query_func, void *);
1017:	void acpi_ec_block_transactions(void);
2035:	bool acpi_ec_dispatch_gpe(void);
1709:	void acpi_ec_dsdt_probe(void);
1910:	void acpi_ec_ecdt_probe(void);
557:	void acpi_ec_flush_work(void);
2171:	void acpi_ec_init(void);
2022:	void acpi_ec_mark_gpe_for_wake(void);
1113:	void acpi_ec_remove_query_handler(struct acpi_ec *, u8);
2029:	void acpi_ec_set_gpe_wake_mask(u8);
1030:	void acpi_ec_unblock_transactions(void);
935:	acpi_handle ec_get_handle(void);
888:	int ec_read(u8, u8 *);
919:	int ec_transaction(u8, const u8 *, unsigned int, u8 *, unsigned int);
906:	int ec_write(u8, u8);
1584:	static int acpi_ec_add(struct acpi_device *);
1338:	static struct acpi_ec *acpi_ec_alloc(void);
855:	static int acpi_ec_burst_disable(struct acpi_ec *);
476:	static void acpi_ec_complete_query(struct acpi_ec *);
405:	static void acpi_ec_complete_request(struct acpi_ec *);
521:	static void acpi_ec_enable_event(struct acpi_ec *);
1226:	static void acpi_ec_event_handler(struct work_struct *);
1144:	static void acpi_ec_event_processor(struct work_struct *);
1329:	static void acpi_ec_free(struct acpi_ec *);
1267:	static u32 acpi_ec_gpe_handler(acpi_handle, u32, void *);
1274:	static irqreturn_t acpi_ec_irq_handler(int, void *);
418:	static void acpi_ec_mask_events(struct acpi_ec *);
1068:	static void acpi_ec_put_query_handler(struct acpi_ec_query_handler *);
1158:	static int acpi_ec_query(struct acpi_ec *, u8 *);
1358:	static acpi_status acpi_ec_register_query_methods(acpi_handle, u32, void *, void **);
1657:	static int acpi_ec_remove(struct acpi_device *);
1095:	static void acpi_ec_remove_query_handlers(struct acpi_ec *, bool, u8);
2013:	static int acpi_ec_resume(struct device *);
2000:	static int acpi_ec_resume_noirq(struct device *);
1559:	static int acpi_ec_setup(struct acpi_ec *, struct acpi_device *);
1285:	static acpi_status acpi_ec_space_handler(u32, acpi_physical_address, u32, u64 *, void *, void *);
943:	static void acpi_ec_start(struct acpi_ec *, bool);
971:	static void acpi_ec_stop(struct acpi_ec *, bool);
960:	static bool acpi_ec_stopped(struct acpi_ec *);
463:	static void acpi_ec_submit_query(struct acpi_ec *);
397:	static void acpi_ec_submit_request(struct acpi_ec *);
1973:	static int acpi_ec_suspend(struct device *);
1983:	static int acpi_ec_suspend_noirq(struct device *);
817:	static int acpi_ec_transaction(struct acpi_ec *, struct transaction *);
782:	static int acpi_ec_transaction_unlocked(struct acpi_ec *, struct transaction *);
431:	static void acpi_ec_unmask_events(struct acpi_ec *);
636:	static void advance_transaction(struct acpi_ec *);
1814:	static int ec_clear_on_resume(const struct dmi_system_id *);
1827:	static int ec_correct_ecdt(const struct dmi_system_id *);
724:	static int ec_guard(struct acpi_ec *);
1839:	static int ec_honor_dsdt_gpe(const struct dmi_system_id *);
1851:	static int ec_honor_ecdt_gpe(const struct dmi_system_id *);
1455:	static int ec_install_handlers(struct acpi_ec *, struct acpi_device *);
1375:	static acpi_status ec_parse_device(acpi_handle, u32, void *, void **);
1676:	static acpi_status ec_parse_io_ports(struct acpi_resource *, void *);
759:	static int ec_poll(struct acpi_ec *);
1520:	static void ec_remove_handlers(struct acpi_ec *);
1417:	static bool install_gpe_event_handler(struct acpi_ec *);
2088:	static int param_get_event_clearing(char *, const struct kernel_param *);
2069:	static int param_set_event_clearing(const char *, const struct kernel_param *);

File drivers/acpi/event.c:
92:	int acpi_bus_generate_netlink_event(const char *, const char *, u8, int);
25:	int acpi_notifier_call_chain(struct acpi_device *, u32, u32);
38:	int register_acpi_notifier(struct notifier_block *);
44:	int unregister_acpi_notifier(struct notifier_block *);
166:	static int acpi_event_init(void);

File drivers/acpi/evged.c:
56:	static irqreturn_t acpi_ged_irq_handler(int, void *);
68:	static acpi_status acpi_ged_request_interrupt(struct acpi_resource *, void *);
196:	static int ged_driver_init(void);
141:	static int ged_probe(struct platform_device *);
176:	static int ged_remove(struct platform_device *);
163:	static void ged_shutdown(struct platform_device *);

File drivers/acpi/fan.c:
496:	static void acpi_fan_driver_exit(void);
496:	static int acpi_fan_driver_init(void);
235:	static int acpi_fan_get_fif(struct acpi_device *);
306:	static int acpi_fan_get_fps(struct acpi_device *);
374:	static int acpi_fan_probe(struct platform_device *);
450:	static int acpi_fan_remove(struct platform_device *);
480:	static int acpi_fan_resume(struct device *);
266:	static int acpi_fan_speed_cmp(const void *, const void *);
469:	static int acpi_fan_suspend(struct device *);
165:	static int fan_get_cur_state(struct thermal_cooling_device *, unsigned long *);
86:	static int fan_get_max_state(struct thermal_cooling_device *, unsigned long *);
99:	static int fan_get_state_acpi4(struct acpi_device *, unsigned long *);
205:	static int fan_set_cur_state(struct thermal_cooling_device *, unsigned long);
273:	static ssize_t show_state(struct device *, struct device_attribute *, char *);

File drivers/acpi/glue.c:
174:	int acpi_bind_one(struct device *, struct acpi_device *);
114:	struct acpi_device *acpi_find_child_device(struct acpi_device *, u64, bool);
363:	int acpi_platform_notify(struct device *, enum kobject_action);
265:	int acpi_unbind_one(struct device *);
39:	int register_acpi_bus_type(struct acpi_bus_type *);
54:	int unregister_acpi_bus_type(struct acpi_bus_type *);
298:	static int acpi_device_notify(struct device *);
88:	static int find_child_checks(struct acpi_device *, bool);

File drivers/acpi/hed.c:
28:	int register_acpi_hed_notifier(struct notifier_block *);
34:	void unregister_acpi_hed_notifier(struct notifier_block *);
50:	static int acpi_hed_add(struct acpi_device *);
75:	static void acpi_hed_driver_exit(void);
75:	static int acpi_hed_driver_init(void);
45:	static void acpi_hed_notify(struct acpi_device *, u32);
59:	static int acpi_hed_remove(struct acpi_device *);

File drivers/acpi/ioapic.c:
201:	int acpi_ioapic_add(acpi_handle);
229:	int acpi_ioapic_remove(struct acpi_pci_root *);
212:	void pci_ioapic_remove(struct acpi_pci_root *);
67:	static bool acpi_is_ioapic(acpi_handle, char **);
96:	static acpi_status handle_ioapic_add(acpi_handle, u32, void *, void **);
40:	static acpi_status setup_res(struct acpi_resource *, void *);

File drivers/acpi/numa/hmat.c:
32:	void disable_hmat(void);
103:	static void alloc_memory_initiator(unsigned int);
123:	static void alloc_memory_target(unsigned int, resource_size_t, resource_size_t);
255:	static void hmat_add_locality(struct acpi_hmat_locality *);
752:	static int hmat_callback(struct notifier_block *, unsigned long, void *);
776:	static void hmat_free_structures(void);
813:	static int hmat_init(void);
494:	static u32 hmat_initiator_perf(struct memory_target *, struct memory_initiator *, struct acpi_hmat_locality *);
191:	static u32 hmat_normalize(u16, u64, u8);
357:	static int hmat_parse_cache(union acpi_subtable_headers *, const unsigned long);
294:	static int hmat_parse_locality(union acpi_subtable_headers *, const unsigned long);
420:	static int hmat_parse_proximity_domain(union acpi_subtable_headers *, const unsigned long);
461:	static int hmat_parse_subtable(union acpi_subtable_headers *, const unsigned long);
713:	static void hmat_register_target(struct memory_target *);
577:	static void hmat_register_target_initiators(struct memory_target *);
226:	static void hmat_update_target_access(struct memory_target *, u8, u32, int);
561:	static int initiator_cmp(void *, const struct list_head *, const struct list_head *);
481:	static int srat_parse_mem_affinity(union acpi_subtable_headers *, const unsigned long);

File drivers/acpi/numa/srat.c:
510:	int acpi_get_node(acpi_handle);
60:	int acpi_map_pxm_to_node(int);
448:	int acpi_numa_init(void);
242:	int acpi_numa_memory_affinity_init(struct acpi_srat_mem_affinity *);
215:	void acpi_numa_slit_init(struct acpi_table_slit *);
322:	void acpi_numa_x2apic_affinity_init(struct acpi_srat_x2apic_cpu_affinity *);
198:	void bad_srat(void);
32:	void disable_srat(void);
45:	int node_to_pxm(int);
37:	int pxm_to_node(int);
204:	int srat_disabled(void);
377:	static int acpi_parse_gi_affinity(union acpi_subtable_headers *, const unsigned long);
360:	static int acpi_parse_gicc_affinity(union acpi_subtable_headers *, const unsigned long);
413:	static int acpi_parse_memory_affinity(union acpi_subtable_headers *, const unsigned long);
344:	static int acpi_parse_processor_affinity(union acpi_subtable_headers *, const unsigned long);
308:	static int acpi_parse_slit(struct acpi_table_header *);
428:	static int acpi_parse_srat(struct acpi_table_header *);
328:	static int acpi_parse_x2apic_affinity(union acpi_subtable_headers *, const unsigned long);
82:	static void acpi_table_print_srat_entry(struct acpi_subtable_header *);

File drivers/acpi/nvs.c:
50:	int acpi_nvs_for_each_region(int (*)(__u64, __u64, void *), void *);
36:	int acpi_nvs_register(__u64, __u64);
152:	int suspend_nvs_alloc(void);
128:	void suspend_nvs_free(void);
201:	void suspend_nvs_restore(void);
169:	int suspend_nvs_save(void);
93:	static int suspend_nvs_register(unsigned long, unsigned long);

File drivers/acpi/osi.c:
507:	int acpi_osi_init(void);
266:	bool acpi_osi_is_win8(void);
93:	void acpi_osi_setup(char *);
500:	int early_acpi_osi_init(void);
143:	static void __acpi_osi_setup_darwin(bool);
192:	static void __acpi_osi_setup_linux(bool);
73:	static u32 acpi_osi_handler(acpi_string, u32);
216:	static void acpi_osi_setup_late(void);
294:	static int dmi_disable_osi_vista(const struct dmi_system_id *);
304:	static int dmi_disable_osi_win7(const struct dmi_system_id *);
312:	static int dmi_disable_osi_win8(const struct dmi_system_id *);
287:	static int dmi_enable_osi_linux(const struct dmi_system_id *);
249:	static int osi_setup(char *);

File drivers/acpi/osl.c:
1497:	int acpi_check_region(resource_size_t, resource_size_t, const char *);
1458:	int acpi_check_resource_conflict(const struct resource *);
1164:	acpi_status acpi_hotplug_schedule(struct acpi_device *, u32);
1619:	unsigned long acpi_os_acquire_lock(spinlock_t *);
1655:	acpi_status acpi_os_create_cache(char *, u16, u16, struct kmem_cache **);
1198:	acpi_status acpi_os_create_semaphore(u32, u32, acpi_handle *);
1695:	acpi_status acpi_os_delete_cache(struct kmem_cache *);
1608:	void acpi_os_delete_lock(spinlock_t *);
1223:	acpi_status acpi_os_delete_semaphore(acpi_handle);
1856:	acpi_status acpi_os_enter_sleep(u8, u32, u32);
1060:	acpi_status acpi_os_execute(acpi_execute_type, acpi_osd_exec_callback, void *);
247:	void *acpi_os_get_iomem(acpi_physical_address, unsigned int);
1308:	acpi_status acpi_os_get_line(char *, u32, u32 *);
184:	acpi_physical_address acpi_os_get_root_pointer(void);
638:	u64 acpi_os_get_timer(void);
1743:	acpi_status acpi_os_initialize(void);
1769:	acpi_status acpi_os_initialize1(void);
560:	acpi_status acpi_os_install_interrupt_handler(u32, acpi_osd_handler, void *);
450:	void *acpi_os_map_generic_address(struct acpi_generic_address *);
322:	void *acpi_os_map_iomem(acpi_physical_address, acpi_size);
374:	void *acpi_os_map_memory(acpi_physical_address, acpi_size);
523:	acpi_status acpi_os_predefined_override(const struct acpi_predefined_names *, acpi_string *);
1843:	acpi_status acpi_os_prepare_extended_sleep(u8, u32, u32);
1806:	acpi_status acpi_os_prepare_sleep(u8, u32, u32);
141:	void acpi_os_printf(const char *, ...);
1676:	acpi_status acpi_os_purge_cache(struct kmem_cache *);
684:	int acpi_os_read_iomem(void *, u64 *, u32);
708:	acpi_status acpi_os_read_memory(acpi_physical_address, u64 *, u32);
784:	acpi_status acpi_os_read_pci_configuration(struct acpi_pci_id *, u32, u64 *, u32);
644:	acpi_status acpi_os_read_port(acpi_io_address, u32 *, u32);
1631:	void acpi_os_release_lock(spinlock_t *, unsigned long);
1715:	acpi_status acpi_os_release_object(struct kmem_cache *, void *);
595:	acpi_status acpi_os_remove_interrupt_handler(u32, acpi_osd_handler);
1850:	void acpi_os_set_prepare_extended_sleep(int (*)(u8, u32, u32));
1821:	void acpi_os_set_prepare_sleep(int (*)(u8, u32, u32));
1354:	acpi_status acpi_os_signal(u32, void *);
1287:	acpi_status acpi_os_signal_semaphore(acpi_handle, u32);
611:	void acpi_os_sleep(u64);
616:	void acpi_os_stall(u32);
1781:	acpi_status acpi_os_terminate(void);
466:	void acpi_os_unmap_generic_address(struct acpi_generic_address *);
416:	void acpi_os_unmap_iomem(void *, acpi_size);
444:	void acpi_os_unmap_memory(void *, acpi_size);
150:	void acpi_os_vprintf(const char *, struct __va_list_tag *);
1334:	acpi_status acpi_os_wait_command_ready(void);
1136:	void acpi_os_wait_events_complete(void);
1242:	acpi_status acpi_os_wait_semaphore(acpi_handle, u32, u16);
741:	acpi_status acpi_os_write_memory(acpi_physical_address, u64, u32);
816:	acpi_status acpi_os_write_pci_configuration(struct acpi_pci_id *, u32, u64, u32);
667:	acpi_status acpi_os_write_port(acpi_io_address, u32, u32);
1192:	bool acpi_queue_hotplug_work(struct work_struct *);
1570:	acpi_status acpi_release_memory(acpi_handle, struct resource *, u32);
1599:	int acpi_resources_are_enforced(void);
508:	int acpi_rev_override_setup(char *);
1511:	static acpi_status acpi_deactivate_mem_region(acpi_handle, u32, void *, void **);
1732:	static int acpi_disable_return_repair(char *);
1439:	static int acpi_enforce_resources_setup(char *);
1155:	static void acpi_hotplug_work_fn(struct work_struct *);
544:	static irqreturn_t acpi_irq(int, void *);
1407:	static int acpi_no_auto_serialize_setup(char *);
1722:	static int acpi_no_static_ssdt_setup(char *);
843:	static void acpi_os_execute_deferred(struct work_struct *);
380:	static void acpi_os_map_remove(struct work_struct *);
1377:	static int acpi_os_name_setup(char *);
90:	static void acpi_request_region(struct acpi_generic_address *, unsigned int, char *);
107:	static int acpi_reserve_resources(void);
177:	static int setup_acpi_rsdp(char *);

File drivers/acpi/pci_irq.c:
489:	void acpi_pci_irq_disable(struct pci_dev *);
395:	int acpi_pci_irq_enable(struct pci_dev *);
140:	static int acpi_pci_irq_check_entry(acpi_handle, struct pci_dev *, int, struct acpi_pci_routing_table *, struct acpi_prt_entry **);
206:	static int acpi_pci_irq_find_prt_entry(struct pci_dev *, int, struct acpi_prt_entry **);
298:	static struct acpi_prt_entry *acpi_pci_irq_lookup(struct pci_dev *, int);
267:	static int acpi_reroute_boot_interrupt(struct pci_dev *, struct acpi_prt_entry *);
112:	static void do_prt_fixups(struct acpi_prt_entry *, struct acpi_pci_routing_table *);

File drivers/acpi/pci_link.c:
494:	int acpi_irq_penalty_init(void);
856:	bool acpi_isa_irq_available(int);
614:	int acpi_pci_link_allocate_irq(acpi_handle, int, int *, int *, char **);
669:	int acpi_pci_link_free_irq(acpi_handle);
917:	void acpi_pci_link_init(void);
849:	void acpi_penalize_isa_irq(int, int);
862:	void acpi_penalize_sci_irq(int, int, int);
905:	static int acpi_irq_balance_set(char *);
481:	static int acpi_irq_get_penalty(int);
878:	static int acpi_irq_isa(char *);
897:	static int acpi_irq_nobalance_set(char *);
890:	static int acpi_irq_pci(char *);
811:	static int acpi_irq_penalty_update(char *, int);
720:	static int acpi_pci_link_add(struct acpi_device *, const struct acpi_device_id *);
532:	static int acpi_pci_link_allocate(struct acpi_pci_link *);
172:	static acpi_status acpi_pci_link_check_current(struct acpi_resource *, void *);
84:	static acpi_status acpi_pci_link_check_possible(struct acpi_resource *, void *);
229:	static int acpi_pci_link_get_current(struct acpi_pci_link *);
795:	static void acpi_pci_link_remove(struct acpi_device *);
277:	static int acpi_pci_link_set(struct acpi_pci_link *, int);
786:	static void irqrouter_resume(void);

File drivers/acpi/pci_root.c:
266:	struct pci_dev *acpi_get_pci_dev(acpi_handle);
68:	int acpi_is_root_bridge(acpi_handle);
234:	struct acpi_pci_root *acpi_pci_find_root(acpi_handle);
356:	acpi_status acpi_pci_osc_control_set(acpi_handle, u32 *, u32);
775:	int acpi_pci_probe_root_resources(struct acpi_pci_root_info *);
879:	struct pci_bus *acpi_pci_root_create(struct acpi_pci_root *, struct acpi_pci_root_ops *, struct acpi_pci_root_info *, void *);
951:	void acpi_pci_root_init(void);
844:	static void __acpi_pci_root_release_info(struct acpi_pci_root_info *);
195:	static acpi_status acpi_pci_query_osc(struct acpi_pci_root *, u32, u32 *);
527:	static int acpi_pci_root_add(struct acpi_device *, const struct acpi_device_id *);
863:	static void acpi_pci_root_release_info(struct pci_host_bridge *);
654:	static void acpi_pci_root_remove(struct acpi_device *);
33:	static int acpi_pci_root_scan_dependent(struct acpi_device *);
681:	static void acpi_pci_root_validate_resources(struct device *, struct list_head *, unsigned long);
146:	static void decode_osc_bits(struct acpi_pci_root *, char *, u32, struct pci_osc_bit_struct *, int);
86:	static acpi_status get_root_bridge_busnr_callback(struct acpi_resource *, void *);
411:	static void negotiate_os_control(struct acpi_pci_root *, int *, bool);
813:	static void pci_acpi_root_add_resources(struct acpi_pci_root_info *);

File drivers/acpi/pci_slot.c:
130:	void acpi_pci_slot_enumerate(struct pci_bus *);
184:	void acpi_pci_slot_init(void);
142:	void acpi_pci_slot_remove(struct pci_bus *);
42:	static int check_slot(acpi_handle, unsigned long long *);
158:	static int do_sta_before_sun(const struct dmi_system_id *);
84:	static acpi_status register_slot(acpi_handle, u32, void *, void **);

File drivers/acpi/pmic/intel_pmic.c:
256:	int intel_pmic_install_opregion_handler(struct device *, acpi_handle, struct regmap *, struct intel_pmic_opregion_data *);
344:	int intel_soc_pmic_exec_mipi_pmic_seq_element(u16, u32, u32, u32);
50:	static acpi_status intel_pmic_power_handler(u32, acpi_physical_address, u32, u64 *, void *, void *);
209:	static acpi_status intel_pmic_regs_handler(u32, acpi_physical_address, u32, u64 *, void *, void *);
169:	static acpi_status intel_pmic_thermal_handler(u32, acpi_physical_address, u32, u64 *, void *, void *);
81:	static int pmic_read_temp(struct intel_pmic_opregion *, int, u64 *);

File drivers/acpi/power.c:
924:	int acpi_add_power_resource(acpi_handle);
302:	int acpi_device_power_add_dependent(struct acpi_device *, struct device *);
337:	void acpi_device_power_remove_dependent(struct acpi_device *, struct device *);
647:	int acpi_device_sleep_wake(struct acpi_device *, int, int, int);
749:	int acpi_disable_wakeup_device_power(struct acpi_device *);
697:	int acpi_enable_wakeup_device_power(struct acpi_device *, int);
142:	int acpi_extract_power_resources(union acpi_object *, unsigned int, struct list_head *);
578:	void acpi_power_add_remove_device(struct acpi_device *, bool);
799:	int acpi_power_get_inferred_state(struct acpi_device *, int *);
833:	int acpi_power_on_resources(struct acpi_device *, int);
115:	void acpi_power_resources_list_free(struct list_head *);
841:	int acpi_power_transition(struct acpi_device *, int);
595:	int acpi_power_wakeup_list_init(struct list_head *, int *);
985:	void acpi_resume_power_resources(void);
1014:	void acpi_turn_off_unused_power_resources(void);
407:	static int __acpi_power_off(struct acpi_power_resource *, struct acpi_power_resource *);
351:	static int __acpi_power_on(struct acpi_power_resource *);
905:	static void acpi_power_add_resource_to_list(struct acpi_power_resource *);
539:	static void acpi_power_expose_list(struct acpi_device *, struct list_head *, const struct attribute_group *);
180:	static int acpi_power_get_state(acpi_handle, int *);
520:	static void acpi_power_hide_list(struct acpi_device *, struct list_head *, const struct attribute_group *);
454:	static int acpi_power_off_list(struct list_head *);
473:	static int acpi_power_on_list(struct list_head *);
240:	static int acpi_power_resource_add_dependent(struct acpi_power_resource *, struct device *);
269:	static void acpi_power_resource_remove_dependent(struct acpi_power_resource *, struct device *);
88:	static int acpi_power_resources_list_add(acpi_handle, struct list_head *);
900:	static void acpi_power_sysfs_remove(struct acpi_device *);
874:	static void acpi_release_power_resource(struct device *);
889:	static ssize_t resource_in_use_show(struct device *, struct device_attribute *, char *);

File drivers/acpi/proc.c:
141:	void acpi_sleep_proc_init(void);
127:	static int acpi_system_wakeup_device_open_fs(struct inode *, struct file *);
19:	static int acpi_system_wakeup_device_seq_show(struct seq_file *, void *);
90:	static ssize_t acpi_system_write_wakeup_device(struct file *, const char *, size_t, loff_t *);

File drivers/acpi/processor_core.c:
256:	int acpi_get_cpuid(acpi_handle, int, u32);
361:	int acpi_get_ioapic_id(acpi_handle, u32, u64 *);
198:	phys_cpuid_t acpi_get_phys_id(acpi_handle, int, u32);
266:	phys_cpuid_t acpi_id_to_phys_cpuid(u32);
210:	int acpi_map_cpuid(phys_cpuid_t, u32);
147:	phys_cpuid_t acpi_map_madt_entry(u32);
111:	static phys_cpuid_t map_madt_entry(struct acpi_table_madt *, int, u32);
164:	static phys_cpuid_t map_mat_entry(acpi_handle, int, u32);

File drivers/acpi/processor_driver.c:
213:	static int __acpi_processor_start(struct acpi_device *);
348:	static void acpi_processor_driver_exit(void);
315:	static int acpi_processor_driver_init(void);
289:	static int acpi_processor_notifier(struct notifier_block *, unsigned long, void *);
56:	static void acpi_processor_notify(acpi_handle, u32, void *);
249:	static int acpi_processor_start(struct device *);
264:	static int acpi_processor_stop(struct device *);
142:	static int acpi_pss_perf_init(struct acpi_processor *, struct acpi_device *);
129:	static int acpi_soft_cpu_dead(unsigned int);
100:	static int acpi_soft_cpu_online(unsigned int);

File drivers/acpi/processor_idle.c:
1147:	int acpi_processor_ffh_lpi_enter(struct acpi_lpi_state *);
1142:	int acpi_processor_ffh_lpi_probe(unsigned int);
1264:	int acpi_processor_hotplug(struct acpi_processor *);
1396:	int acpi_processor_power_exit(struct acpi_processor *);
1346:	int acpi_processor_power_init(struct acpi_processor *);
1288:	int acpi_processor_power_state_has_changed(struct acpi_processor *);
149:	static void __lapic_timer_propagate_broadcast(void *);
393:	static int acpi_cst_latency_cmp(const void *, const void *);
405:	static void acpi_cst_latency_swap(void *, void *, int);
510:	static int acpi_idle_bm_check(void);
552:	static void acpi_idle_do_entry(struct acpi_processor_cx *);
669:	static int acpi_idle_enter(struct cpuidle_device *, struct cpuidle_driver *, int);
612:	static int acpi_idle_enter_bm(struct cpuidle_driver *, struct acpi_processor *, struct acpi_processor_cx *, int);
698:	static int acpi_idle_enter_s2idle(struct cpuidle_device *, struct cpuidle_driver *, int);
1160:	static int acpi_idle_lpi_enter(struct cpuidle_device *, struct cpuidle_driver *, int);
571:	static int acpi_idle_play_dead(struct cpuidle_device *, int);
880:	static int acpi_processor_evaluate_lpi(acpi_handle, struct acpi_lpi_states_array *);
470:	static int acpi_processor_get_cstate_info(struct acpi_processor *);
1083:	static int acpi_processor_get_lpi_info(struct acpi_processor *);
417:	static int acpi_processor_power_verify(struct acpi_processor *);
727:	static int acpi_processor_setup_cpuidle_cx(struct acpi_processor *, struct cpuidle_device *);
1213:	static int acpi_processor_setup_cpuidle_states(struct acpi_processor *);
766:	static int acpi_processor_setup_cstates(struct acpi_processor *);
1178:	static int acpi_processor_setup_lpi_states(struct acpi_processor *);
1038:	static int flatten_lpi_states(struct acpi_processor *, struct acpi_lpi_states_array *, struct acpi_lpi_states_array *);
75:	static int set_max_cstate(const struct dmi_system_id *);

File drivers/acpi/processor_pdc.c:
196:	void acpi_early_processor_set_pdc(void);
141:	void acpi_processor_set_pdc(acpi_handle);
71:	static struct acpi_object_list *acpi_processor_alloc_pdc(void);
160:	static acpi_status early_init_pdc(acpi_handle, u32, void *, void **);
22:	static bool processor_physically_present(acpi_handle);
169:	static int set_no_mwait(const struct dmi_system_id *);

File drivers/acpi/processor_perflib.c:
141:	int acpi_processor_get_bios_limit(int, unsigned int *);
396:	int acpi_processor_get_performance_info(struct acpi_processor *);
510:	int acpi_processor_get_psd(acpi_handle, struct acpi_psd_package *);
154:	void acpi_processor_ignore_ppc_init(void);
461:	int acpi_processor_notify_smm(struct module *);
180:	void acpi_processor_ppc_exit(struct cpufreq_policy *);
112:	void acpi_processor_ppc_has_changed(struct acpi_processor *, int);
160:	void acpi_processor_ppc_init(struct cpufreq_policy *);
573:	int acpi_processor_preregister_performance(struct acpi_processor_performance *);
439:	int acpi_processor_pstate_control(void);
726:	int acpi_processor_register_performance(struct acpi_processor_performance *, unsigned int);
763:	void acpi_processor_unregister_performance(unsigned int);
192:	static int acpi_processor_get_performance_control(struct acpi_processor *);
289:	static int acpi_processor_get_performance_states(struct acpi_processor *);
55:	static int acpi_processor_get_platform_limit(struct acpi_processor *);
259:	static void amd_fixup_frequency(struct acpi_processor_px *, int);

File drivers/acpi/processor_thermal.c:
146:	void acpi_thermal_cpufreq_exit(struct cpufreq_policy *);
126:	void acpi_thermal_cpufreq_init(struct cpufreq_policy *);
58:	static int cpu_has_cpufreq(unsigned int);
82:	static int cpufreq_set_cur_state(unsigned int, int);
47:	static int phys_package_first_cpu(int);
209:	static int processor_get_cur_state(struct thermal_cooling_device *, unsigned long *);
191:	static int processor_get_max_state(struct thermal_cooling_device *, unsigned long *);
229:	static int processor_set_cur_state(struct thermal_cooling_device *, unsigned long);

File drivers/acpi/processor_throttling.c:
1176:	int acpi_processor_get_throttling_info(struct acpi_processor *);
364:	void acpi_processor_reevaluate_tstate(struct acpi_processor *, bool);
1170:	int acpi_processor_set_throttling(struct acpi_processor *, int, bool);
198:	void acpi_processor_throttling_init(void);
299:	int acpi_processor_tstate_has_changed(struct acpi_processor *);
893:	static long __acpi_processor_get_throttling(void *);
1067:	static int __acpi_processor_set_throttling(struct acpi_processor *, int, bool, bool);
275:	static int acpi_processor_get_platform_limit(struct acpi_processor *);
900:	static int acpi_processor_get_throttling(struct acpi_processor *);
410:	static int acpi_processor_get_throttling_control(struct acpi_processor *);
654:	static int acpi_processor_get_throttling_fadt(struct acpi_processor *);
860:	static int acpi_processor_get_throttling_ptc(struct acpi_processor *);
494:	static int acpi_processor_get_throttling_states(struct acpi_processor *);
570:	static int acpi_processor_get_tsd(struct acpi_processor *);
954:	static int acpi_processor_set_throttling_fadt(struct acpi_processor *, int, bool);
1027:	static int acpi_processor_set_throttling_ptc(struct acpi_processor *, int, bool);
1058:	static long acpi_processor_throttling_fn(void *);
55:	static int acpi_processor_update_tsd_coord(void);
710:	static int acpi_throttling_rdmsr(u64 *);
732:	static int acpi_throttling_wrmsr(u64);

File drivers/acpi/property.c:
664:	int __acpi_node_get_property_reference(const struct fwnode_handle *, const char *, size_t, size_t, struct fwnode_reference_args *);
327:	struct acpi_device_properties *acpi_data_add_props(struct acpi_device_data *, const guid_t *, const union acpi_object *);
531:	int acpi_dev_get_property(const struct acpi_device *, const char *, acpi_object_type, const union acpi_object **);
998:	int acpi_dev_prop_read(const struct acpi_device *, const char *, enum dev_prop_type, void *, size_t);
844:	int acpi_dev_prop_read_single(struct acpi_device *, const char *, enum dev_prop_type, void *);
452:	void acpi_free_properties(struct acpi_device *);
1029:	struct fwnode_handle *acpi_get_next_subnode(const struct fwnode_handle *, struct fwnode_handle *);
384:	void acpi_init_properties(struct acpi_device *);
1107:	struct fwnode_handle *acpi_node_get_parent(const struct fwnode_handle *);
557:	int acpi_node_prop_get(const struct fwnode_handle *, const char *, void **);
1016:	int acpi_node_prop_read(const struct fwnode_handle *, const char *, enum dev_prop_type, void *, size_t);
1439:	bool is_acpi_data_node(const struct fwnode_handle *);
1432:	bool is_acpi_device_node(const struct fwnode_handle *);
158:	static int acpi_add_nondev_subnodes(acpi_handle, const union acpi_object *, struct list_head *, struct fwnode_handle *);
484:	static int acpi_data_get_property(const struct acpi_device_data *, const char *, acpi_object_type, const union acpi_object **);
934:	static int acpi_data_prop_read(const struct acpi_device_data *, const char *, enum dev_prop_type, void *, size_t);
783:	static int acpi_data_prop_read_single(const struct acpi_device_data *, const char *, enum dev_prop_type, void *);
436:	static void acpi_destroy_nondev_subnodes(struct list_head *);
539:	static const struct acpi_device_data *acpi_device_data_of_node(const struct fwnode_handle *);
206:	static bool acpi_enumerate_nondev_subnodes(acpi_handle, const union acpi_object *, struct acpi_device_data *, struct fwnode_handle *);
343:	static bool acpi_extract_properties(const union acpi_object *, struct acpi_device_data *);
1398:	static const void *acpi_fwnode_device_get_match_data(const struct fwnode_handle *, const struct device *);
1269:	static bool acpi_fwnode_device_is_available(const struct fwnode_handle *);
1330:	static const char *acpi_fwnode_get_name(const struct fwnode_handle *);
1356:	static const char *acpi_fwnode_get_name_prefix(const struct fwnode_handle *);
609:	static struct fwnode_handle *acpi_fwnode_get_named_child_node(const struct fwnode_handle *, const char *);
1377:	static struct fwnode_handle *acpi_fwnode_get_parent(struct fwnode_handle *);
1321:	static int acpi_fwnode_get_reference_args(const struct fwnode_handle *, const char *, const char *, unsigned int, unsigned int, struct fwnode_reference_args *);
1382:	static int acpi_fwnode_graph_parse_endpoint(const struct fwnode_handle *, struct fwnode_endpoint *);
1277:	static bool acpi_fwnode_property_present(const struct fwnode_handle *, const char *);
1284:	static int acpi_fwnode_property_read_int_array(const struct fwnode_handle *, const char *, unsigned int, void *, size_t);
1312:	static int acpi_fwnode_property_read_string_array(const struct fwnode_handle *, const char *, const char **, size_t);
1208:	static struct fwnode_handle *acpi_graph_get_child_prop_value(const struct fwnode_handle *, const char *, unsigned int);
1151:	static struct fwnode_handle *acpi_graph_get_next_endpoint(const struct fwnode_handle *, struct fwnode_handle *);
1236:	static struct fwnode_handle *acpi_graph_get_remote_endpoint(const struct fwnode_handle *);
118:	static bool acpi_nondev_subnode_data_ok(acpi_handle, const union acpi_object *, struct list_head *, struct fwnode_handle *);
65:	static bool acpi_nondev_subnode_extract(const union acpi_object *, acpi_handle, const union acpi_object *, struct list_head *, struct fwnode_handle *);
270:	static bool acpi_properties_format_valid(const union acpi_object *);
1126:	static bool is_acpi_graph_node(struct fwnode_handle *, const char *);

File drivers/acpi/reboot.c:
34:	void acpi_reboot(void);

File drivers/acpi/resource.c:
668:	int acpi_dev_filter_resource_type(struct acpi_resource *, unsigned long);
492:	void acpi_dev_free_resource_list(struct list_head *);
652:	int acpi_dev_get_dma_resources(struct acpi_device *, struct list_head *);
362:	unsigned int acpi_dev_get_irq_type(int, int);
615:	int acpi_dev_get_resources(struct acpi_device *, struct list_head *, int (*)(struct acpi_resource *, void *), void *);
339:	unsigned long acpi_dev_irq_flags(u8, u8, u8);
288:	bool acpi_dev_resource_address_space(struct acpi_resource *, struct resource_win *);
317:	bool acpi_dev_resource_ext_address_space(struct acpi_resource *, struct resource_win *);
445:	bool acpi_dev_resource_interrupt(struct acpi_resource *, int, struct resource *);
178:	bool acpi_dev_resource_io(struct acpi_resource *, struct resource *);
105:	bool acpi_dev_resource_memory(struct acpi_resource *, struct resource *);
763:	struct acpi_device *acpi_resource_consumer(struct resource *);
562:	static int __acpi_dev_get_resources(struct acpi_device *, struct list_head *, int (*)(struct acpi_resource *, void *), void *, char *);
205:	static bool acpi_decode_space(struct resource_win *, struct acpi_resource_address *, struct acpi_address64_attribute *);
714:	static int acpi_dev_consumes_res(struct acpi_device *, struct resource *);
383:	static void acpi_dev_get_irqresource(struct resource *, u32, u8, u8, u8, bool);
139:	static void acpi_dev_ioresource_flags(struct resource *, u64, u8, u8);
71:	static void acpi_dev_memresource_flags(struct resource *, u64, u8);
506:	static acpi_status acpi_dev_new_resource_entry(struct resource_win *, struct res_proc_context *);
523:	static acpi_status acpi_dev_process_resource(struct acpi_resource *, void *);
737:	static acpi_status acpi_res_consumer_cb(acpi_handle, u32, void *, void **);
624:	static int is_memory(struct acpi_resource *, void *);

File drivers/acpi/scan.c:
2308:	int __acpi_probe_device_table(struct acpi_probe_entry *, int);
1091:	bool acpi_ata_match(acpi_handle);
1105:	bool acpi_bay_match(acpi_handle);
612:	struct acpi_device *acpi_bus_get_acpi_device(acpi_handle);
600:	int acpi_bus_get_device(acpi_handle, struct acpi_device **);
778:	acpi_status acpi_bus_get_ejd(acpi_handle, acpi_handle *);
620:	void acpi_bus_put_acpi_device(struct acpi_device *);
2142:	int acpi_bus_register_early_device(int);
2093:	int acpi_bus_scan(acpi_handle);
2115:	void acpi_bus_trim(struct acpi_device *);
652:	int acpi_device_add(struct acpi_device *, void (*)(struct device *));
1644:	void acpi_device_add_finalize(struct acpi_device *);
1201:	const char *acpi_device_hid(struct acpi_device *);
389:	void acpi_device_hotplug(struct acpi_device *, u32);
1119:	bool acpi_device_is_battery(struct acpi_device *);
1773:	bool acpi_device_is_present(const struct acpi_device *);
1495:	int acpi_dma_configure_id(struct device *, enum dev_dma_attr, const u32 *);
1424:	int acpi_dma_get_range(struct device *, u64 *, u64 *, u64 *);
1374:	bool acpi_dma_supported(struct acpi_device *);
1143:	bool acpi_dock_match(acpi_handle);
1357:	void acpi_free_pnp_ids(struct acpi_device_pnp *);
1399:	enum dev_dma_attr acpi_get_dma_attr(struct acpi_device *);
1619:	void acpi_init_device_object(struct acpi_device *, acpi_handle, int, unsigned long long);
80:	void acpi_initialize_hp_context(struct acpi_device *, struct acpi_hotplug_context *, int (*)(struct acpi_device *, u32), void (*)(struct acpi_device *, u32));
1173:	long acpi_is_video_device(acpi_handle);
70:	void acpi_lock_hp_context(void);
2375:	int acpi_reconfig_notifier_register(struct notifier_block *);
2381:	int acpi_reconfig_notifier_unregister(struct notifier_block *);
93:	int acpi_scan_add_handler(struct acpi_scan_handler *);
102:	int acpi_scan_add_handler_with_hotplug(struct acpi_scan_handler *, const char *);
1810:	void acpi_scan_hotplug_enabled(struct acpi_hotplug_profile *, bool);
2215:	int acpi_scan_init(void);
115:	bool acpi_scan_is_offline(struct acpi_device *, bool);
58:	void acpi_scan_lock_acquire(void);
64:	void acpi_scan_lock_release(void);
2354:	void acpi_scan_table_handler(u32, void *, void *);
75:	void acpi_unlock_hp_context(void);
2056:	void acpi_walk_dep_device_list(acpi_handle);
1213:	static void acpi_add_id(struct acpi_device_pnp *, const char *);
1650:	static int acpi_add_single_object(struct acpi_device **, acpi_handle, int, unsigned long long);
1149:	static acpi_status acpi_backlight_cap_match(acpi_handle, u32, void *, void **);
1998:	static void acpi_bus_attach(struct acpi_device *);
1896:	static acpi_status acpi_bus_check_add(acpi_handle, u32, void *, void **);
800:	static int acpi_bus_extract_wakeup_device_power_package(struct acpi_device *);
973:	static void acpi_bus_get_power_flags(struct acpi_device *);
910:	static void acpi_bus_get_wakeup_device_flags(struct acpi_device *);
938:	static void acpi_bus_init_power_state(struct acpi_device *, int);
140:	static acpi_status acpi_bus_offline(acpi_handle, u32, void *, void **);
185:	static acpi_status acpi_bus_online(acpi_handle, u32, void *, void **);
2157:	static int acpi_bus_scan_fixed(void);
1552:	static int acpi_check_serial_bus_slave(struct acpi_resource *, void *);
474:	static void acpi_device_del(struct acpi_device *);
510:	static void acpi_device_del_work_fn(struct work_struct *);
1841:	static void acpi_device_dep_initialize(struct acpi_device *);
1576:	static bool acpi_device_enumeration_by_parent(struct acpi_device *);
1044:	static void acpi_device_get_busid(struct acpi_device *);
464:	static void acpi_device_release(struct device *);
1951:	static int acpi_generic_device_attach(struct acpi_device *, const struct acpi_device_id *);
580:	static int acpi_get_device_data(acpi_handle, struct acpi_device **, void (*)(void *));
1694:	static acpi_status acpi_get_resource_memory(struct acpi_resource *, void *);
1236:	static bool acpi_ibm_smbus_match(acpi_handle);
2298:	static int acpi_match_madt(union acpi_subtable_headers *, const unsigned long);
342:	static int acpi_scan_bus_check(struct acpi_device *);
553:	static void acpi_scan_drop_device(acpi_handle, void *);
253:	static int acpi_scan_hot_remove(struct acpi_device *);
1822:	static void acpi_scan_init_hotplug(struct acpi_device *);
1798:	static struct acpi_scan_handler *acpi_scan_match_handler(const char *, const struct acpi_device_id **);
207:	static int acpi_scan_try_to_offline(struct acpi_device *, struct acpi_device *);
1272:	static void acpi_set_pnp_ids(acpi_handle, struct acpi_device_pnp *, int);
2339:	static void acpi_table_events_fn(struct work_struct *);
606:	static void get_acpi_device(void *);

File drivers/acpi/sleep.c:
1159:	void acpi_no_s4_hw_signature(void);
118:	void acpi_nvs_nosave(void);
133:	void acpi_nvs_nosave_s3(void);
151:	void acpi_old_suspend_ordering(void);
1116:	bool acpi_s2idle_wakeup(void);
1316:	int acpi_sleep_init(void);
385:	void acpi_sleep_no_blacklist(void);
83:	bool acpi_sleep_state_supported(u8);
101:	u32 acpi_target_system_state(void);
1164:	static int acpi_hibernation_begin(pm_message_t);
1236:	static int acpi_hibernation_begin_old(pm_message_t);
1179:	static int acpi_hibernation_enter(void);
1193:	static void acpi_hibernation_leave(void);
509:	static void acpi_pm_end(void);
455:	static void acpi_pm_finish(void);
404:	static int acpi_pm_freeze(void);
415:	static int acpi_pm_pre_suspend(void);
440:	static int acpi_pm_prepare(void);
1212:	static void acpi_pm_thaw(void);
1308:	static void acpi_power_off(void);
1300:	static void acpi_power_off_prepare(void);
1130:	static void acpi_restore_bm_rld(void);
946:	static int acpi_s2idle_begin(void);
1080:	static void acpi_s2idle_end(void);
952:	static int acpi_s2idle_prepare(void);
969:	static int acpi_s2idle_prepare_late(void);
1058:	static void acpi_s2idle_restore(void);
1049:	static void acpi_s2idle_restore_early(void);
983:	static bool acpi_s2idle_wake(void);
1124:	static int acpi_save_bm_rld(void);
61:	static int acpi_sleep_prepare(u32);
879:	static void acpi_sleep_run_lps0_dsm(unsigned int);
539:	static int acpi_suspend_begin(suspend_state_t);
666:	static int acpi_suspend_begin_old(suspend_state_t);
567:	static int acpi_suspend_enter(suspend_state_t);
635:	static int acpi_suspend_state_valid(suspend_state_t);
170:	static int init_default_s3(const struct dmi_system_id *);
162:	static int init_nvs_nosave(const struct dmi_system_id *);
138:	static int init_nvs_save_s3(const struct dmi_system_id *);
156:	static int init_old_suspend_ordering(const struct dmi_system_id *);
849:	static void lpi_check_constraints(void);
739:	static void lpi_device_get_constraints(void);
893:	static int lps0_device_attach(struct acpi_device *, const struct acpi_device_id *);
48:	static int tts_notify_reboot(struct notifier_block *, unsigned long, void *);

File drivers/acpi/spcr.c:
87:	int acpi_parse_spcr(bool, bool);

File drivers/acpi/sysfs.c:
837:	void acpi_gpe_apply_masked_gpes(void);
852:	void acpi_irq_stats_init(void);
986:	void acpi_sysfs_add_hotplug_profile(struct acpi_hotplug_profile *, const char *);
1036:	int acpi_sysfs_init(void);
403:	acpi_status acpi_sysfs_table_handler(u32, void *, void *);
456:	static int acpi_bert_data_init(void *, struct acpi_data_attr *);
436:	static ssize_t acpi_data_show(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t, size_t);
637:	static void acpi_global_event_handler(u32, acpi_handle, u32, void *);
825:	static int acpi_gpe_set_masked_gpes(char *);
941:	static ssize_t acpi_show_profile(struct kobject *, struct kobj_attribute *, char *);
362:	static int acpi_table_attr_init(struct kobject *, struct acpi_table_attr *, struct acpi_table_header *);
341:	static ssize_t acpi_table_show(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t, size_t);
500:	static int acpi_tables_sysfs_init(void);
733:	static ssize_t counter_set(struct kobject *, struct kobj_attribute *, const char *, size_t);
676:	static ssize_t counter_show(struct kobject *, struct kobj_attribute *, char *);
587:	static void delete_gpe_attr_array(void);
1008:	static ssize_t force_remove_show(struct kobject *, struct kobj_attribute *, char *);
1014:	static ssize_t force_remove_store(struct kobject *, struct kobj_attribute *, const char *, size_t);
651:	static int get_status(u32, acpi_event_status *, acpi_handle *);
950:	static ssize_t hotplug_enabled_show(struct kobject *, struct kobj_attribute *, char *);
958:	static ssize_t hotplug_enabled_store(struct kobject *, struct kobj_attribute *, const char *, size_t);
931:	static void interrupt_stats_exit(void);
300:	static int param_get_acpica_version(char *, const struct kernel_param *);

File drivers/acpi/tables.c:
791:	int acpi_locate_initial_tables(void);
749:	acpi_status acpi_os_physical_table_override(struct acpi_table_header *, acpi_physical_address *, u32 *);
762:	acpi_status acpi_os_table_override(struct acpi_table_header *, struct acpi_table_header **);
810:	void acpi_reserve_initial_tables(void);
835:	int acpi_table_init(void);
829:	void acpi_table_init_complete(void);
412:	int acpi_table_parse(char *, acpi_tbl_table_handler);
379:	int acpi_table_parse_entries(char *, unsigned long, int, acpi_tbl_entry_handler, unsigned int);
345:	int acpi_table_parse_entries_array(char *, unsigned long, struct acpi_subtable_proc *, int, unsigned int);
394:	int acpi_table_parse_madt(enum acpi_madt_type, acpi_tbl_entry_handler, unsigned int);
55:	void acpi_table_print_madt_entry(struct acpi_subtable_header *);
503:	void acpi_table_upgrade(void);
870:	static int acpi_force_32bit_fadt_addr(char *);
862:	static int acpi_force_table_verification_setup(char *);
848:	static int acpi_parse_apic_instance(char *);
284:	static int acpi_parse_entries_array(char *, unsigned long, struct acpi_table_header *, struct acpi_subtable_proc *, int, unsigned int);
627:	static acpi_status acpi_table_initrd_override(struct acpi_table_header *, acpi_physical_address *, u32 *);
685:	static void acpi_table_initrd_scan(void);

File drivers/acpi/thermal.c:
1044:	static int acpi_thermal_add(struct acpi_device *);
946:	static void acpi_thermal_aml_dependency_fix(struct acpi_thermal *);
788:	static int acpi_thermal_bind_cooling_device(struct thermal_zone_device *, struct thermal_cooling_device *);
1019:	static void acpi_thermal_check_fn(struct work_struct *);
697:	static int acpi_thermal_cooling_device_cb(struct thermal_zone_device *, struct thermal_cooling_device *, bool);
1246:	static void acpi_thermal_exit(void);
1221:	static int acpi_thermal_init(void);
903:	static void acpi_thermal_notify(struct acpi_device *, u32);
812:	static int acpi_thermal_register_thermal_zone(struct acpi_thermal *);
1087:	static int acpi_thermal_remove(struct acpi_device *);
1110:	static int acpi_thermal_resume(struct device *);
1103:	static int acpi_thermal_suspend(struct device *);
265:	static int acpi_thermal_trips_update(struct acpi_thermal *, int);
795:	static int acpi_thermal_unbind_cooling_device(struct thermal_zone_device *, struct thermal_cooling_device *);
1146:	static int thermal_act(const struct dmi_system_id *);
617:	static int thermal_get_crit_temp(struct thermal_zone_device *, int *);
502:	static int thermal_get_temp(struct thermal_zone_device *, int *);
631:	static int thermal_get_trend(struct thermal_zone_device *, int, enum thermal_trend *);
564:	static int thermal_get_trip_temp(struct thermal_zone_device *, int, int *);
519:	static int thermal_get_trip_type(struct thermal_zone_device *, int, enum thermal_trip_type *);
1155:	static int thermal_nocrt(const struct dmi_system_id *);
675:	static int thermal_notify(struct thermal_zone_device *, int, enum thermal_trip_type);
1171:	static int thermal_psv(const struct dmi_system_id *);
1162:	static int thermal_tzp(const struct dmi_system_id *);

File drivers/acpi/utils.c:
514:	void __acpi_handle_debug(struct _ddebug *, acpi_handle, const char *, ...);
693:	bool acpi_check_dsm(acpi_handle, const guid_t *, u64, u64);
763:	bool acpi_dev_found(const char *);
859:	struct acpi_device *acpi_dev_get_first_match_dev(const char *, const char *, s64);
734:	bool acpi_dev_hid_uid_match(struct acpi_device *, const char *, const char *);
830:	bool acpi_dev_present(const char *, const char *, s64);
644:	union acpi_object *acpi_evaluate_dsm(acpi_handle, const guid_t *, u64, u64, union acpi_object *);
567:	acpi_status acpi_evaluate_ej0(acpi_handle);
266:	acpi_status acpi_evaluate_integer(acpi_handle, acpi_string, struct acpi_object_list *, unsigned long long *);
587:	acpi_status acpi_evaluate_lck(acpi_handle, int);
428:	acpi_status acpi_evaluate_ost(acpi_handle, u32, u32, struct acpi_buffer *);
300:	acpi_status acpi_evaluate_reference(acpi_handle, acpi_string, struct acpi_object_list *, struct acpi_handle_list *);
613:	acpi_status acpi_evaluate_reg(acpi_handle, u8, u32);
549:	acpi_status acpi_execute_simple_method(acpi_handle, char *, u64);
42:	acpi_status acpi_extract_package(union acpi_object *, struct acpi_buffer *, struct acpi_buffer *);
384:	acpi_status acpi_get_physical_device_location(acpi_handle, struct acpi_pld_info **);
483:	void acpi_handle_printk(const char *, acpi_handle, const char *, ...);
541:	bool acpi_has_method(acpi_handle, char *);
895:	int acpi_match_platform_list(const struct acpi_platform_list *);
880:	static int acpi_backlight(char *);
786:	static int acpi_dev_match_cb(struct device *, const void *);

File drivers/acpi/wakeup.c:
160:	bool acpi_check_wakeup_handlers(void);
63:	void acpi_disable_wakeup_devices(u8);
38:	void acpi_enable_wakeup_devices(u8);
111:	int acpi_register_wakeup_handler(int, bool (*)(void *), void *);
143:	void acpi_unregister_wakeup_handler(bool (*)(void *), void *);
83:	int acpi_wakeup_device_init(void);

File drivers/acpi/x86/apple.c:
27:	void acpi_extract_apple_properties(struct acpi_device *);

File drivers/acpi/x86/utils.c:
112:	bool acpi_device_always_present(struct acpi_device *);

File drivers/base/attribute_container.c:
417:	int attribute_container_add_attrs(struct device *);
452:	int attribute_container_add_class_device(struct device *);
468:	int attribute_container_add_class_device_adapter(struct attribute_container *, struct device *, struct device *);
141:	void attribute_container_add_device(struct device *, int (*)(struct attribute_container *, struct device *, struct device *));
510:	void attribute_container_class_device_del(struct device *);
54:	struct attribute_container *attribute_container_classdev_to_container(struct device *);
353:	void attribute_container_device_trigger(struct device *, int (*)(struct attribute_container *, struct device *, struct device *));
297:	int attribute_container_device_trigger_safe(struct device *, int (*)(struct attribute_container *, struct device *, struct device *), int (*)(struct attribute_container *, struct device *, struct device *));
526:	struct device *attribute_container_find_class_device(struct attribute_container *, struct device *);
73:	int attribute_container_register(struct attribute_container *);
482:	void attribute_container_remove_attrs(struct device *);
206:	void attribute_container_remove_device(struct device *, void (*)(struct attribute_container *, struct device *, struct device *));
394:	void attribute_container_trigger(struct device *, int (*)(struct attribute_container *, struct device *));
93:	int attribute_container_unregister(struct attribute_container *);
112:	static void attribute_container_release(struct device *);
240:	static int do_attribute_container_device_trigger_safe(struct device *, struct attribute_container *, int (*)(struct attribute_container *, struct device *, struct device *), int (*)(struct attribute_container *, struct device *, struct device *));
31:	static void internal_container_klist_get(struct klist_node *);
38:	static void internal_container_klist_put(struct klist_node *);

File drivers/base/bus.c:
445:	int bus_add_device(struct device *);
594:	int bus_add_driver(struct device_driver *);
131:	int bus_create_file(struct bus_type *, struct bus_attribute *);
326:	struct device *bus_find_device(struct bus_type *, struct device *, const void *, int (*)(struct device *, const void *));
292:	int bus_for_each_dev(struct bus_type *, struct device *, void *, int (*)(struct device *, void *));
418:	int bus_for_each_drv(struct bus_type *, struct device_driver *, void *, int (*)(struct device_driver *, void *));
919:	struct klist *bus_get_device_klist(struct bus_type *);
913:	struct kset *bus_get_kset(struct bus_type *);
482:	void bus_probe_device(struct device *);
802:	int bus_register(struct bus_type *);
901:	int bus_register_notifier(struct bus_type *, struct notifier_block *);
510:	void bus_remove_device(struct device *);
668:	void bus_remove_driver(struct device_driver *);
143:	void bus_remove_file(struct bus_type *, struct bus_attribute *);
709:	int bus_rescan_devices(struct bus_type *);
952:	void bus_sort_breadthfirst(struct bus_type *, int (*)(const struct device *, const struct device *));
887:	void bus_unregister(struct bus_type *);
907:	int bus_unregister_notifier(struct bus_type *, struct notifier_block *);
1188:	int buses_init(void);
724:	int device_reprobe(struct device *);
1034:	void subsys_dev_iter_exit(struct subsys_dev_iter *);
987:	void subsys_dev_iter_init(struct subsys_dev_iter *, struct bus_type *, struct device *, const struct device_type *);
1011:	struct device *subsys_dev_iter_next(struct subsys_dev_iter *);
356:	struct device *subsys_find_device_by_id(struct bus_type *, unsigned int, struct device *);
1040:	int subsys_interface_register(struct subsys_interface *);
1067:	void subsys_interface_unregister(struct subsys_interface *);
1157:	int subsys_system_register(struct bus_type *, const struct attribute_group **);
1175:	int subsys_virtual_register(struct bus_type *, const struct attribute_group **);
205:	static ssize_t bind_store(struct device_driver *, const char *, size_t);
102:	static ssize_t bus_attr_show(struct kobject *, struct attribute *, char *);
114:	static ssize_t bus_attr_store(struct kobject *, struct attribute *, const char *, size_t);
152:	static void bus_release(struct kobject *);
686:	static int bus_rescan_devices_helper(struct device *, void *);
166:	static int bus_uevent_filter(struct kset *, struct kobject *);
777:	static ssize_t bus_uevent_store(struct bus_type *, const char *, size_t);
932:	static void device_insertion_sort_klist(struct device *, struct list_head *, int (*)(const struct device *, const struct device *));
86:	static void driver_release(struct kobject *);
230:	static ssize_t drivers_autoprobe_show(struct bus_type *, char *);
235:	static ssize_t drivers_autoprobe_store(struct bus_type *, const char *, size_t);
245:	static ssize_t drivers_probe_store(struct bus_type *, const char *, size_t);
57:	static ssize_t drv_attr_show(struct kobject *, struct attribute *, char *);
69:	static ssize_t drv_attr_store(struct kobject *, struct attribute *, const char *, size_t);
761:	static void klist_devices_get(struct klist_node *);
769:	static void klist_devices_put(struct klist_node *);
1097:	static int subsys_register(struct bus_type *, const struct attribute_group **, struct kobject *);
1092:	static void system_root_device_release(struct device *);
580:	static ssize_t uevent_store(struct device_driver *, const char *, size_t);
182:	static ssize_t unbind_store(struct device_driver *, const char *, size_t);

File drivers/base/cacheinfo.c:
576:	const struct attribute_group *cache_get_priv_group(struct cacheinfo *);
211:	int cache_setup_acpi(unsigned int);
223:	struct cacheinfo *cacheinfo_shared_cpu_map_search(void *);
29:	struct cpu_cacheinfo *get_cpu_cacheinfo(unsigned int);
332:	int init_cache_level(unsigned int);
454:	static ssize_t allocation_policy_show(struct device *, struct device_attribute *, char *);
640:	static int cache_add_dev(unsigned int);
517:	static umode_t cache_default_attrs_is_visible(struct kobject *, struct attribute *, int);
294:	static void cache_shared_cpu_map_remove(unsigned int);
248:	static int cache_shared_cpu_map_setup(unsigned int);
677:	static int cacheinfo_cpu_online(unsigned int);
689:	static int cacheinfo_cpu_pre_down(unsigned int);
698:	static int cacheinfo_sysfs_init(void);
400:	static ssize_t coherency_line_size_show(struct device *, struct device_attribute *, char *);
597:	static void cpu_cache_sysfs_exit(unsigned int);
616:	static int cpu_cache_sysfs_init(unsigned int);
342:	static int detect_cache_attributes(unsigned int);
321:	static void free_cache_attributes(unsigned int);
398:	static ssize_t id_show(struct device *, struct device_attribute *, char *);
399:	static ssize_t level_show(struct device *, struct device_attribute *, char *);
401:	static ssize_t number_of_sets_show(struct device *, struct device_attribute *, char *);
402:	static ssize_t physical_line_partition_show(struct device *, struct device_attribute *, char *);
422:	static ssize_t shared_cpu_list_show(struct device *, struct device_attribute *, char *);
413:	static ssize_t shared_cpu_map_show(struct device *, struct device_attribute *, char *);
405:	static ssize_t size_show(struct device *, struct device_attribute *, char *);
431:	static ssize_t type_show(struct device *, struct device_attribute *, char *);
403:	static ssize_t ways_of_associativity_show(struct device *, struct device_attribute *, char *);
473:	static ssize_t write_policy_show(struct device *, struct device_attribute *, char *);

File drivers/base/class.c:
226:	struct class *__class_create(struct module *, const char *, struct lock_class_key *);
153:	int __class_register(struct class *, struct lock_class_key *);
531:	int class_compat_create_link(struct class_compat *, struct device *, struct device *);
497:	struct class_compat *class_compat_register(const char *);
564:	void class_compat_remove_link(struct class_compat *, struct device *, struct device *);
517:	void class_compat_unregister(struct class_compat *);
88:	int class_create_file_ns(struct class *, const struct class_attribute *, const void *);
261:	void class_destroy(struct class *);
328:	void class_dev_iter_exit(struct class_dev_iter *);
281:	void class_dev_iter_init(struct class_dev_iter *, struct class *, struct device *, const struct device_type *);
305:	struct device *class_dev_iter_next(struct class_dev_iter *);
399:	struct device *class_find_device(struct class *, struct device *, const void *, int (*)(struct device *, const void *));
352:	int class_for_each_device(struct class *, struct device *, void *, int (*)(struct device *, void *));
427:	int class_interface_register(struct class_interface *);
453:	void class_interface_unregister(struct class_interface *);
101:	void class_remove_file_ns(struct class *, const struct class_attribute *, const void *);
199:	void class_unregister(struct class *);
573:	int classes_init(void);
475:	ssize_t show_class_attr_string(struct class *, struct class_attribute *, char *);
25:	static ssize_t class_attr_show(struct kobject *, struct attribute *, char *);
37:	static ssize_t class_attr_store(struct kobject *, struct attribute *, const char *, size_t);
65:	static const struct kobj_ns_type_operations *class_child_ns_type(struct kobject *);
206:	static void class_create_release(struct class *);
49:	static void class_release(struct kobject *);
127:	static void klist_class_dev_get(struct klist_node *);
134:	static void klist_class_dev_put(struct klist_node *);

File drivers/base/component.c:
742:	int component_add(struct device *, const struct component_ops *);
717:	int component_add_typed(struct device *, const struct component_ops *, int);
632:	int component_bind_all(struct device *, void *);
757:	void component_del(struct device *, const struct component_ops *);
467:	int component_master_add_with_match(struct device *, const struct component_master_ops *, struct component_match *);
512:	void component_master_del(struct device *, const struct component_master_ops *);
400:	void component_match_add_release(struct device *, struct component_match **, void (*)(struct device *, void *), int (*)(struct device *, void *), void *);
427:	void component_match_add_typed(struct device *, struct component_match **, int (*)(struct device *, int, void *), void *);
549:	void component_unbind_all(struct device *, void *);
666:	static int __component_add(struct device *, const struct component_ops *, int);
336:	static void __component_match_add(struct device *, struct component_match **, void (*)(struct device *, void *), int (*)(struct device *, void *), int (*)(struct device *, int, void *), void *);
570:	static int component_bind(struct component *, struct master *, void *);
117:	static int component_debug_init(void);
115:	static int component_devices_open(struct inode *, struct file *);
89:	static int component_devices_show(struct seq_file *, void *);
313:	static int component_match_realloc(struct component_match *, size_t, struct device *);
527:	static void component_unbind(struct component *, struct master *, void *);
308:	static void devm_component_match_release(struct device *, void *);
161:	static struct component *find_component(struct master *, struct component_match_array *);
181:	static int find_components(struct master *);
436:	static void free_master(struct master *);
234:	static int try_to_bring_up_master(struct master *, struct component *);

File drivers/base/container.c:
34:	void container_dev_init(void);
20:	static int container_offline(struct device *);
15:	static int trivial_online(struct device *);

File drivers/base/core.c:
3520:	struct device *__root_device_register(const char *, struct module *);
4221:	void _dev_alert(const struct device *, const char *, ...);
4222:	void _dev_crit(const struct device *, const char *, ...);
4220:	void _dev_emerg(const struct device *, const char *, ...);
4223:	void _dev_err(const struct device *, const char *, ...);
4226:	void _dev_info(const struct device *, const char *, ...);
4225:	void _dev_notice(const struct device *, const char *, ...);
4224:	void _dev_warn(const struct device *, const char *, ...);
1676:	const char *dev_driver_string(const struct device *);
4257:	int dev_err_probe(const struct device *, int, const char *, ...);
4186:	void dev_printk(const char *, const struct device *, const char *, ...);
4161:	int dev_printk_emit(int, const struct device *, const char *, ...);
2745:	int dev_set_name(struct device *, const char *, ...);
4150:	int dev_vprintk_emit(int, const struct device *, const char *, struct __va_list_tag *);
2844:	int device_add(struct device *);
2056:	int device_add_groups(struct device *, const struct attribute_group **);
3967:	int device_change_owner(struct device *, kuid_t, kgid_t);
3650:	struct device *device_create(struct class *, struct device *, dev_t, void *, const char *, ...);
2380:	int device_create_bin_file(struct device *, const struct bin_attribute *);
2326:	int device_create_file(struct device *, const struct device_attribute *);
3691:	struct device *device_create_with_groups(struct class *, struct device *, dev_t, void *, const struct attribute_group **, const char *, ...);
3099:	void device_del(struct device *);
3716:	void device_destroy(struct class *, dev_t);
3330:	struct device *device_find_child(struct device *, void *, int (*)(struct device *, void *));
3358:	struct device *device_find_child_by_name(struct device *, const char *);
3265:	int device_for_each_child(struct device *, void *, int (*)(struct device *, void *));
3295:	int device_for_each_child_reverse(struct device *, void *, int (*)(struct device *, void *));
3221:	const char *device_get_devnode(struct device *, umode_t *, kuid_t *, kgid_t *, const char **);
2439:	void device_initialize(struct device *);
145:	int device_is_dependent(struct device *, void *);
547:	struct device_link *device_link_add(struct device *, struct device *, u32);
845:	void device_link_del(struct device_link *);
861:	void device_link_remove(void *, struct device *);
1328:	bool device_links_busy(struct device *);
914:	int device_links_check_suppliers(struct device *);
1115:	void device_links_driver_bound(struct device *);
1283:	void device_links_driver_cleanup(struct device *);
1246:	void device_links_no_driver(struct device *);
72:	int device_links_read_lock(void);
82:	int device_links_read_lock_held(void);
77:	void device_links_read_unlock(int);
1033:	void device_links_supplier_sync_state_pause(void);
1040:	void device_links_supplier_sync_state_resume(void);
1368:	void device_links_unbind_consumers(struct device *);
4379:	int device_match_acpi_dev(struct device *, const void *);
4385:	int device_match_any(struct device *, const void *);
4373:	int device_match_devt(struct device *, const void *);
4367:	int device_match_fwnode(struct device *, const void *);
4355:	int device_match_name(struct device *, const void *);
4361:	int device_match_of_node(struct device *, const void *);
3826:	int device_move(struct device *, struct device *, enum dpm_order);
3424:	int device_offline(struct device *);
3462:	int device_online(struct device *);
253:	void device_pm_move_to_tail(struct device *);
3035:	int device_register(struct device *);
2395:	void device_remove_bin_file(struct device *, const struct bin_attribute *);
2350:	void device_remove_file(struct device *, const struct device_attribute *);
2365:	bool device_remove_file_self(struct device *, const struct device_attribute *);
2062:	void device_remove_groups(struct device *, const struct attribute_group **);
3767:	int device_rename(struct device *, const char *);
4347:	void device_set_of_node_from_dev(struct device *, const struct device *);
1794:	ssize_t device_show_bool(struct device *, struct device_attribute *, char *);
1772:	ssize_t device_show_int(struct device *, struct device_attribute *, char *);
1743:	ssize_t device_show_ulong(struct device *, struct device_attribute *, char *);
4032:	void device_shutdown(void);
1782:	ssize_t device_store_bool(struct device *, struct device_attribute *, const char *, size_t);
1752:	ssize_t device_store_int(struct device *, struct device_attribute *, const char *, size_t);
1726:	ssize_t device_store_ulong(struct device *, struct device_attribute *, const char *, size_t);
3174:	void device_unregister(struct device *);
3376:	int devices_init(void);
2311:	void devices_kset_move_last(struct device *);
2107:	int devm_device_add_group(struct device *, const struct attribute_group *);
2159:	int devm_device_add_groups(struct device *, const struct attribute_group **);
2137:	void devm_device_remove_group(struct device *, const struct attribute_group *);
2190:	void devm_device_remove_groups(struct device *, const struct attribute_group **);
1462:	u32 fw_devlink_get_flags(void);
1563:	void fw_devlink_pause(void);
1575:	void fw_devlink_resume(void);
3050:	struct device *get_device(struct device *);
3068:	bool kill_device(struct device *);
1615:	void lock_device_hotplug(void);
1625:	int lock_device_hotplug_sysfs(void);
3060:	void put_device(struct device *);
3567:	void root_device_unregister(struct device *);
4292:	void set_primary_fwnode(struct device *, struct fwnode_handle *);
4327:	void set_secondary_fwnode(struct device *, struct fwnode_handle *);
1620:	void unlock_device_hotplug(void);
2465:	struct kobject *virtual_device_parent(struct device *);
4176:	static void __dev_printk(const char *, const struct device *, struct va_format *);
799:	static void __device_link_del(struct kref *);
1208:	static void __device_links_no_driver(struct device *);
969:	static void __device_links_queue_sync_state(struct device *, struct list_head *);
1075:	static void __device_links_supplier_defer_sync(struct device *);
299:	static ssize_t auto_remove_on_show(struct device *, struct device_attribute *, char *);
2490:	static const struct kobj_ns_type_operations *class_dir_child_ns_type(struct kobject *);
2483:	static void class_dir_release(struct kobject *);
2606:	static void cleanup_glue_dir(struct device *, struct kobject *);
1691:	static ssize_t dev_attr_show(struct kobject *, struct attribute *, char *);
1707:	static ssize_t dev_attr_store(struct kobject *, struct attribute *, const char *, size_t);
2265:	static ssize_t dev_show(struct device *, struct device_attribute *, char *);
1893:	static int dev_uevent(struct kset *, struct kobject *, struct kobj_uevent_env *);
1868:	static int dev_uevent_filter(struct kset *, struct kobject *);
1882:	static const char *dev_uevent_name(struct kset *, struct kobject *);
2199:	static int device_add_attrs(struct device *);
3402:	static int device_check_offline(struct device *, void *);
3586:	static struct device *device_create_groups_vargs(struct class *, struct device *, dev_t, void *, const struct attribute_group **, const char *, struct __va_list_tag *);
3579:	static void device_create_release(struct device *);
1852:	static void device_get_ownership(struct kobject *, kuid_t *, kgid_t *);
782:	static void device_link_add_missing_supplier_links(void);
1081:	static void device_link_drop_managed(struct device_link *);
176:	static void device_link_init_status(struct device_link *, struct device *, struct device *, struct device *);
828:	static void device_link_put_kref(struct device_link *);
344:	static void device_link_release_fn(struct work_struct *);
1010:	static void device_links_flush_sync_list(struct list_head *, struct device *);
1841:	static const void *device_namespace(struct kobject *);
1648:	static int device_platform_notify(struct device *, enum kobject_action);
1811:	static void device_release(struct kobject *);
2249:	static void device_remove_attrs(struct device *);
2722:	static void device_remove_class_symlinks(struct device *);
220:	static int device_reorder_to_tail(struct device *, void *);
2296:	static void devices_kset_move_after(struct device *, struct device *);
2280:	static void devices_kset_move_before(struct device *, struct device *);
380:	static int devlink_add_symlinks(struct device *, struct class_interface *);
467:	static int devlink_class_init(void);
359:	static void devlink_dev_release(struct device *);
430:	static void devlink_remove_symlinks(struct device *, struct class_interface *);
2074:	static int devm_attr_group_match(struct device *, void *, void *);
2079:	static void devm_attr_group_remove(struct device *, void *);
2088:	static void devm_attr_groups_remove(struct device *, void *);
1472:	static void fw_devlink_link_device(struct device *);
1443:	static int fw_devlink_setup(char *);
2527:	static struct kobject *get_device_parent(struct device *, struct device *);
2403:	static void klist_children_get(struct klist_node *);
2411:	static void klist_children_put(struct klist_node *);
2025:	static ssize_t online_show(struct device *, struct device_attribute *, char *);
2036:	static ssize_t online_store(struct device *, struct device_attribute *, const char *, size_t);
316:	static ssize_t runtime_pm_show(struct device *, struct device_attribute *, char *);
4107:	static void set_dev_info(const struct device *, struct dev_printk_info *);
266:	static ssize_t status_show(struct device *, struct device_attribute *, char *);
325:	static ssize_t sync_state_only_show(struct device *, struct device_attribute *, char *);
1068:	static int sync_state_resume_initcall(void);
1966:	static ssize_t uevent_show(struct device *, struct device_attribute *, char *);
2009:	static ssize_t uevent_store(struct device *, struct device_attribute *, const char *, size_t);
1088:	static ssize_t waiting_for_supplier_show(struct device *, struct device_attribute *, char *);

File drivers/base/cpu.c:
608:	void cpu_dev_init(void);
442:	struct device *cpu_device_create(struct device *, void *, const struct attribute_group **, const char *, ...);
489:	bool cpu_is_hotpluggable(unsigned int);
514:	ssize_t cpu_show_meltdown(struct device *, struct device_attribute *, char *);
391:	struct device *get_cpu_device(unsigned int);
359:	int register_cpu(struct cpu *, int);
75:	void unregister_cpu(struct cpu *);
296:	static void cpu_device_release(struct device *);
28:	static int cpu_subsys_match(struct device *, struct device_driver *);
70:	static int cpu_subsys_offline(struct device *);
47:	static int cpu_subsys_online(struct device *);
339:	static int cpu_uevent(struct device *, struct kobj_uevent_env *);
142:	static ssize_t crash_notes_show(struct device *, struct device_attribute *, char *);
164:	static ssize_t crash_notes_size_show(struct device *, struct device_attribute *, char *);
400:	static void device_create_release(struct device *);
316:	static ssize_t print_cpu_modalias(struct device *, struct device_attribute *, char *);
268:	static ssize_t print_cpus_isolated(struct device *, struct device_attribute *, char *);
228:	static ssize_t print_cpus_kernel_max(struct device *, struct device_attribute *, char *);
288:	static ssize_t print_cpus_nohz_full(struct device *, struct device_attribute *, char *);
238:	static ssize_t print_cpus_offline(struct device *, struct device_attribute *, char *);
206:	static ssize_t show_cpus_attr(struct device *, struct device_attribute *, char *);

File drivers/base/dd.c:
962:	int device_attach(struct device *);
460:	int device_bind_driver(struct device *);
196:	void device_block_probing(void);
1013:	int device_driver_attach(struct device_driver *, struct device *);
1230:	void device_driver_detach(struct device *);
968:	void device_initial_probe(struct device *);
357:	bool device_is_bound(struct device *);
1212:	void device_release_driver(struct device *);
1189:	void device_release_driver_internal(struct device *, struct device_driver *, struct device *);
220:	void device_set_deferred_probe_reason(const struct device *, struct va_format *);
209:	void device_unblock_probing(void);
775:	bool driver_allows_async_probing(struct device_driver *);
1115:	int driver_attach(struct device_driver *);
127:	void driver_deferred_probe_add(struct device *);
278:	int driver_deferred_probe_check_state(struct device *);
137:	void driver_deferred_probe_del(struct device *);
1239:	void driver_detach(struct device_driver *);
731:	int driver_probe_device(struct device_driver *, struct device *);
690:	int driver_probe_done(void);
704:	void wait_for_device_probe(void);
894:	static int __device_attach(struct device *, bool);
858:	static void __device_attach_async_helper(void *, async_cookie_t);
828:	static int __device_attach_driver(struct device_driver *, void *);
1125:	static void __device_release_driver(struct device *, struct device *);
1055:	static int __driver_attach(struct device *, void *);
1031:	static void __driver_attach_async_helper(void *, async_cookie_t);
392:	static ssize_t coredump_store(struct device *, struct device_attribute *, const char *, size_t);
249:	static int deferred_devs_open(struct inode *, struct file *);
235:	static int deferred_devs_show(struct seq_file *, void *);
342:	static void deferred_probe_exit(void);
316:	static int deferred_probe_initcall(void);
255:	static int deferred_probe_timeout_setup(char *);
293:	static void deferred_probe_timeout_work_func(struct work_struct *);
75:	static void deferred_probe_work_func(struct work_struct *);
362:	static void driver_bound(struct device *);
168:	static void driver_deferred_probe_trigger(void);
403:	static int driver_sysfs_add(struct device *);
499:	static int really_probe(struct device *, struct device_driver *);
765:	static int save_async_options(char *);
486:	static ssize_t state_synced_show(struct device *, struct device_attribute *, char *);

File drivers/base/devcoredump.c:
252:	void dev_coredumpm(struct device *, struct module *, void *, size_t, gfp_t, ssize_t (*)(char *, loff_t, size_t, void *, size_t), void (*)(void *));
329:	void dev_coredumpsg(struct device *, struct scatterlist *, size_t, gfp_t);
185:	void dev_coredumpv(struct device *, void *, size_t, gfp_t);
74:	static ssize_t devcd_data_read(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t, size_t);
84:	static ssize_t devcd_data_write(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t, size_t);
64:	static void devcd_del(struct work_struct *);
45:	static void devcd_dev_release(struct device *);
115:	static int devcd_free(struct device *, void *);
207:	static void devcd_free_sgtable(void *);
170:	static void devcd_freev(void *);
192:	static int devcd_match_failing(struct device *, const void *);
222:	static ssize_t devcd_read_from_sgtable(char *, loff_t, size_t, void *, size_t);
164:	static ssize_t devcd_readv(char *, loff_t, size_t, void *, size_t);
343:	static void devcoredump_exit(void);
337:	static int devcoredump_init(void);
123:	static ssize_t disabled_show(struct class *, struct class_attribute *, char *);
129:	static ssize_t disabled_store(struct class *, struct class_attribute *, const char *, size_t);

File drivers/base/devres.c:
1197:	void *__devm_alloc_percpu(struct device *, size_t, size_t);
739:	int devm_add_action(struct device *, void (*)(void *), void *);
1161:	void devm_free_pages(struct device *, unsigned long);
1228:	void devm_free_percpu(struct device *, void *);
1127:	unsigned long devm_get_free_pages(struct device *, gfp_t, unsigned int);
1036:	char *devm_kasprintf(struct device *, gfp_t, const char *, ...);
1056:	void devm_kfree(struct device *, const void *);
826:	void *devm_kmalloc(struct device *, size_t, gfp_t);
1082:	void *devm_kmemdup(struct device *, const void *, size_t, gfp_t);
864:	void *devm_krealloc(struct device *, void *, size_t, gfp_t);
955:	char *devm_kstrdup(struct device *, const char *, gfp_t);
984:	const char *devm_kstrdup_const(struct device *, const char *, gfp_t);
1004:	char *devm_kvasprintf(struct device *, gfp_t, const char *, struct __va_list_tag *);
787:	void devm_release_action(struct device *, void (*)(void *), void *);
765:	void devm_remove_action(struct device *, void (*)(void *), void *);
245:	void devres_add(struct device *, void *);
165:	void *devres_alloc_node(dr_release_t, size_t, gfp_t, int);
619:	void devres_close_group(struct device *, void *);
392:	int devres_destroy(struct device *, dr_release_t, dr_match_t, void *);
288:	void *devres_find(struct device *, dr_release_t, dr_match_t, void *);
192:	void devres_for_each_res(struct device *, dr_release_t, dr_match_t, void *, void (*)(struct device *, void *, void *), void *);
225:	void devres_free(void *);
318:	void *devres_get(struct device *, void *, dr_match_t, void *);
562:	void *devres_open_group(struct device *, void *, gfp_t);
422:	int devres_release(struct device *, dr_release_t, dr_match_t, void *);
537:	int devres_release_all(struct device *);
678:	int devres_release_group(struct device *, void *);
354:	void *devres_remove(struct device *, dr_release_t, dr_match_t, void *);
645:	void devres_remove_group(struct device *, void *);
122:	static void add_dr(struct device *, struct devres_node *);
714:	static int devm_action_match(struct device *, void *, void *);
723:	static void devm_action_release(struct device *, void *);
808:	static int devm_kmalloc_match(struct device *, void *, void *);
1099:	static int devm_pages_match(struct device *, void *, void *);
1107:	static void devm_pages_release(struct device *, void *);
1178:	static int devm_percpu_match(struct device *, void *, void *);
1170:	static void devm_percpu_release(struct device *, void *);
73:	static void group_open_release(struct device *, void *);
506:	static int release_nodes(struct device *, struct list_head *, struct list_head *, unsigned long);
437:	static int remove_nodes(struct list_head *, struct list_head *, struct list_head *, struct device *);

File drivers/base/devtmpfs.c:
110:	int devtmpfs_create_node(struct device *);
137:	int devtmpfs_delete_node(struct device *);
442:	int devtmpfs_init(void);
353:	int devtmpfs_mount(void);
173:	static int create_path(const char *);
257:	static int delete_path(const char *);
93:	static int devtmpfs_submit_req(struct req *, const char *);
382:	static void devtmpfs_work_loop(void);
427:	static int devtmpfsd(void *);
200:	static int handle_create(const char *, umode_t, kuid_t, kgid_t, struct device *);
303:	static int handle_remove(const char *, struct device *);
49:	static int mount_param(char *);
58:	static struct dentry *public_dev_mount(struct file_system_type *, int, const char *, void *);

File drivers/base/driver.c:
127:	int driver_add_groups(struct device_driver *, const struct attribute_group **);
101:	int driver_create_file(struct device_driver *, const struct driver_attribute *);
214:	struct device_driver *driver_find(const char *, struct bus_type *);
76:	struct device *driver_find_device(struct device_driver *, struct device *, const void *, int (*)(struct device *, const void *));
42:	int driver_for_each_device(struct device_driver *, struct device *, void *, int (*)(struct device *, void *));
147:	int driver_register(struct device_driver *);
119:	void driver_remove_file(struct device_driver *, const struct driver_attribute *);
133:	void driver_remove_groups(struct device_driver *, const struct attribute_group **);
191:	void driver_unregister(struct device_driver *);

File drivers/base/firmware.c:
20:	int firmware_init(void);

File drivers/base/firmware_loader/main.c:
676:	int assign_fw(struct firmware *, struct device *);
971:	int firmware_request_cache(struct device *, const char *);
896:	int firmware_request_nowarn(const struct firmware **, const char *, struct device *);
945:	int firmware_request_platform(const struct firmware **, const char *, struct device *);
1050:	void release_firmware(const struct firmware *);
869:	int request_firmware(const struct firmware **, const char *, struct device *);
921:	int request_firmware_direct(const struct firmware **, const char *, struct device *);
999:	int request_firmware_into_buf(const struct firmware **, const char *, struct device *, void *, size_t);
1112:	int request_firmware_nowait(struct module *, bool, const char *, struct device *, gfp_t, void *, void (*)(const struct firmware *, void *));
1028:	int request_partial_firmware_into_buf(const struct firmware **, const char *, struct device *, void *, size_t, size_t);
1285:	static void __async_dev_cache_fw_image(void *, async_cookie_t);
1354:	static void __device_uncache_fw_images(void);
264:	static void __free_fw_priv(struct kref *);
791:	static int _request_firmware(const struct firmware **, const char *, struct device *, void *, size_t, size_t, u32);
723:	static int _request_firmware_prepare(struct firmware **, const char *, struct device *, void *, size_t, size_t, u32);
225:	static int alloc_lookup_fw_priv(const char *, struct fw_priv **, void *, size_t, size_t, u32, struct firmware_cache *);
1171:	static int cache_firmware(const char *);
1323:	static void dev_cache_fw_image(struct device *, void *);
1303:	static void dev_create_fw_entry(struct device *, void *, void *);
1419:	static void device_uncache_fw_images_work(struct work_struct *);
1316:	static int devm_name_match(struct device *, void *, void *);
1564:	static void firmware_class_exit(void);
1542:	static int firmware_class_init(void);
286:	static void free_fw_priv(struct fw_priv *);
642:	static int fw_add_devm_name(struct device *, const char *);
1259:	static void fw_cache_piggyback_on_request(struct fw_priv *);
611:	static int fw_devm_match(struct device *, void *, void *);
113:	static bool fw_get_builtin_firmware(struct firmware *, const char *, void *, size_t);
484:	static int fw_get_filesystem_firmware(struct device *, struct fw_priv *, int (*)(struct device *, struct fw_priv *, size_t, const void *), const char *);
601:	static void fw_name_devm_release(struct device *, void *);
1437:	static int fw_pm_notify(struct notifier_block *, unsigned long, void *);
589:	static void fw_set_page_data(struct fw_priv *, struct firmware *);
1526:	static int fw_shutdown_notify(struct notifier_block *, unsigned long, void *);
1471:	static int fw_suspend(void);
1071:	static void request_firmware_work_func(struct work_struct *);

File drivers/base/hypervisor.c:
18:	int hypervisor_init(void);

File drivers/base/init.c:
20:	void driver_init(void);

File drivers/base/map.c:
95:	void kobj_delete(struct kobj_map *, dev_t, unsigned long, kobj_probe_t *);
123:	struct kobject *kobj_lookup(struct kobj_map *, dev_t, int *);
32:	int kobj_map(struct kobj_map *, dev_t, unsigned long, struct module *, kobj_probe_t *, int (*)(dev_t, void *), void *);
163:	struct kobj_map *kobj_map_init(kobj_probe_t *, struct mutex *);
68:	void kobj_unmap(struct kobj_map *, dev_t, unsigned long);

File drivers/base/memory.c:
492:	int arch_get_memory_phys_device(unsigned long);
628:	int create_memory_block_devices(unsigned long, unsigned long);
515:	struct memory_block *find_memory_block(struct mem_section *);
815:	int for_each_memory_block(void *, walk_memory_blocks_func_t);
686:	bool is_memblock_offlined(struct memory_block *);
38:	int memhp_online_type_from_str(const char *);
106:	unsigned long memory_block_size_bytes(void);
720:	void memory_dev_init(void);
167:	int memory_notify(unsigned long, void *);
87:	int register_memory_notifier(struct notifier_block *);
665:	void remove_memory_block_devices(unsigned long, unsigned long);
93:	void unregister_memory_notifier(struct notifier_block *);
765:	int walk_memory_blocks(unsigned long, unsigned long, void *, walk_memory_blocks_func_t);
386:	static ssize_t auto_online_blocks_show(struct device *, struct device_attribute *, char *);
393:	static ssize_t auto_online_blocks_store(struct device *, struct device_attribute *, const char *, size_t);
374:	static ssize_t block_size_bytes_show(struct device *, struct device_attribute *, char *);
795:	static int for_each_memory_block_cb(struct device *, void *);
472:	static ssize_t hard_offline_page_store(struct device *, struct device_attribute *, const char *, size_t);
570:	static int init_memory_block(unsigned long, unsigned long);
99:	static void memory_block_release(struct device *);
243:	static int memory_subsys_offline(struct device *);
222:	static int memory_subsys_online(struct device *);
299:	static ssize_t phys_device_show(struct device *, struct device_attribute *, char *);
115:	static ssize_t phys_index_show(struct device *, struct device_attribute *, char *);
130:	static ssize_t removable_show(struct device *, struct device_attribute *, char *);
456:	static ssize_t soft_offline_page_store(struct device *, struct device_attribute *, const char *, size_t);
139:	static ssize_t state_show(struct device *, struct device_attribute *, char *);
253:	static ssize_t state_store(struct device *, struct device_attribute *, const char *, size_t);
609:	static void unregister_memory(struct memory_block *);
323:	static ssize_t valid_zones_show(struct device *, struct device_attribute *, char *);

File drivers/base/module.c:
33:	void module_add_driver(struct module *, struct device_driver *);
72:	void module_remove_driver(struct device_driver *);

File drivers/base/node.c:
978:	int __register_one_node(int);
895:	void link_mem_sections(int, unsigned long, unsigned long, enum meminit_context);
292:	void node_add_cache(unsigned int, struct node_cache_attrs *);
189:	void node_set_perf_attrs(unsigned int, struct node_hmem_attrs *, unsigned int);
694:	int register_cpu_under_node(unsigned int, unsigned int);
617:	void register_hugetlbfs_with_node(node_registration_func_t, node_registration_func_t);
730:	int register_memory_node_under_compute_node(unsigned int, unsigned int, unsigned int);
767:	int unregister_cpu_under_node(unsigned int, unsigned int);
884:	void unregister_memory_block_under_nodes(struct memory_block *);
681:	void unregister_node(struct node *);
1003:	void unregister_one_node(int);
58:	static ssize_t cpulist_show(struct device *, struct device_attribute *, char *);
49:	static ssize_t cpumap_show(struct device *, struct device_attribute *, char *);
798:	static void do_register_memory_block_under_node(int, struct memory_block *);
787:	static int get_nid_for_pfn(unsigned long);
240:	static ssize_t indexing_show(struct device *, struct device_attribute *, char *);
239:	static ssize_t line_size_show(struct device *, struct device_attribute *, char *);
119:	static void node_access_release(struct device *);
629:	static void node_device_release(struct device *);
915:	static void node_hugetlb_work(struct work_struct *);
124:	static struct node_access_nodes *node_init_node_access(struct node *, unsigned int);
936:	static int node_memory_callback(struct notifier_block *, unsigned long, void *);
30:	static ssize_t node_read_cpumap(struct device *, bool, char *);
529:	static ssize_t node_read_distance(struct device *, struct device_attribute *, char *);
365:	static ssize_t node_read_meminfo(struct device *, struct device_attribute *, char *);
481:	static ssize_t node_read_numastat(struct device *, struct device_attribute *, char *);
500:	static ssize_t node_read_vmstat(struct device *, struct device_attribute *, char *);
170:	static ssize_t read_bandwidth_show(struct device *, struct device_attribute *, char *);
171:	static ssize_t read_latency_show(struct device *, struct device_attribute *, char *);
828:	static int register_mem_block_under_node_early(struct memory_block *, void *);
871:	static int register_mem_block_under_node_hotplug(struct memory_block *, void *);
1075:	static int register_node_type(void);
1021:	static ssize_t show_node_state(struct device *, struct device_attribute *, char *);
238:	static ssize_t size_show(struct device *, struct device_attribute *, char *);
552:	static ssize_t type_show(struct device *, struct device_attribute *, char *);
172:	static ssize_t write_bandwidth_show(struct device *, struct device_attribute *, char *);
173:	static ssize_t write_latency_show(struct device *, struct device_attribute *, char *);
241:	static ssize_t write_policy_show(struct device *, struct device_attribute *, char *);

File drivers/base/pinctrl.c:
21:	int pinctrl_bind_pins(struct device *);

File drivers/base/platform-msi.c:
324:	struct irq_domain *__platform_msi_create_device_domain(struct device *, unsigned int, bool, irq_write_msi_msg_t, const struct irq_domain_ops *, void *);
177:	struct irq_domain *platform_msi_create_irq_domain(struct fwnode_handle *, struct msi_domain_info *, struct irq_domain *);
396:	int platform_msi_domain_alloc(struct irq_domain *, unsigned int, unsigned int);
251:	int platform_msi_domain_alloc_irqs(struct device *, unsigned int, irq_write_msi_msg_t);
367:	void platform_msi_domain_free(struct irq_domain *, unsigned int, unsigned int);
284:	void platform_msi_domain_free_irqs(struct device *);
306:	void *platform_msi_get_host_data(struct irq_domain *);
122:	static int platform_msi_alloc_descs_with_irq(struct device *, int, int, struct platform_msi_priv_data *);
196:	static struct platform_msi_priv_data *platform_msi_alloc_priv_data(struct device *, unsigned int, irq_write_msi_msg_t);
109:	static void platform_msi_free_descs(struct device *, int, int);
89:	static void platform_msi_update_chip_ops(struct msi_domain_info *);
79:	static void platform_msi_write_msg(struct irq_data *, struct msi_msg *);

File drivers/base/platform.c:
1038:	struct platform_device *__platform_create_bundle(struct platform_driver *, int (*)(struct platform_device *), struct resource *, unsigned int, const void *, size_t, struct module *);
971:	int __platform_driver_probe(struct platform_driver *, int (*)(struct platform_device *), struct module *);
928:	int __platform_driver_register(struct platform_driver *, struct module *);
1093:	int __platform_register_drivers(struct platform_driver * const *, unsigned int, struct module *);
82:	void *devm_platform_get_and_ioremap_resource(struct platform_device *, unsigned int, struct resource **);
336:	int devm_platform_get_irqs_affinity(struct platform_device *, struct irq_affinity *, unsigned int, unsigned int, int **);
105:	void *devm_platform_ioremap_resource(struct platform_device *, unsigned int);
145:	void *devm_platform_ioremap_resource_byname(struct platform_device *, const char *);
123:	void *devm_platform_ioremap_resource_wc(struct platform_device *, unsigned int);
1510:	void early_platform_cleanup(void);
502:	int platform_add_devices(struct platform_device **, int);
1512:	int platform_bus_init(void);
671:	int platform_device_add(struct platform_device *);
631:	int platform_device_add_data(struct platform_device *, const void *, size_t);
657:	int platform_device_add_properties(struct platform_device *, const struct property_entry *);
603:	int platform_device_add_resources(struct platform_device *, const struct resource *, unsigned int);
575:	struct platform_device *platform_device_alloc(const char *, int);
761:	void platform_device_del(struct platform_device *);
547:	void platform_device_put(struct platform_device *);
786:	int platform_device_register(struct platform_device *);
817:	struct platform_device *platform_device_register_full(const struct platform_device_info *);
802:	void platform_device_unregister(struct platform_device *);
1460:	int platform_dma_configure(struct device *);
945:	void platform_driver_unregister(struct platform_driver *);
1502:	struct device *platform_find_device_by_driver(struct device *, const struct device_driver *);
262:	int platform_get_irq(struct platform_device *, unsigned int);
468:	int platform_get_irq_byname(struct platform_device *, const char *);
490:	int platform_get_irq_byname_optional(struct platform_device *, const char *);
174:	int platform_get_irq_optional(struct platform_device *, unsigned int);
53:	struct resource *platform_get_resource(struct platform_device *, unsigned int, unsigned int);
419:	struct resource *platform_get_resource_byname(struct platform_device *, unsigned int, const char *);
280:	int platform_irq_count(struct platform_device *);
1386:	int platform_pm_freeze(struct device *);
1422:	int platform_pm_poweroff(struct device *);
1440:	int platform_pm_restore(struct device *);
1364:	int platform_pm_resume(struct device *);
1346:	int platform_pm_suspend(struct device *);
1404:	int platform_pm_thaw(struct device *);
1131:	void platform_unregister_drivers(struct platform_driver * const *, unsigned int);
1491:	static int __platform_match(struct device *, const void *);
308:	static void devm_platform_get_irqs_affinity_release(struct device *, void *);
1199:	static ssize_t driver_override_show(struct device *, struct device_attribute *, char *);
1165:	static ssize_t driver_override_store(struct device *, struct device_attribute *, const char *, size_t);
1147:	static ssize_t modalias_show(struct device *, struct device_attribute *, char *);
1213:	static ssize_t numa_node_show(struct device *, struct device_attribute *, char *);
1220:	static umode_t platform_dev_attrs_visible(struct kobject *, struct attribute *, int);
554:	static void platform_device_release(struct device *);
867:	static int platform_drv_probe(struct device *);
896:	static int platform_drv_probe_fail(struct device *);
901:	static int platform_drv_remove(struct device *);
914:	static void platform_drv_shutdown(struct device *);
1291:	static int platform_match(struct device *, struct device_driver *);
1245:	static int platform_uevent(struct device *, struct kobj_uevent_env *);

File drivers/base/power/clock_ops.c:
156:	int of_pm_clk_add_clk(struct device *, const char *);
188:	int of_pm_clk_add_clks(struct device *);
123:	int pm_clk_add(struct device *, const char *);
139:	int pm_clk_add_clk(struct device *, struct clk *);
638:	void pm_clk_add_notifier(struct bus_type *, struct pm_clk_notifier_block *);
350:	int pm_clk_create(struct device *);
364:	void pm_clk_destroy(struct device *);
335:	void pm_clk_init(struct device *);
264:	void pm_clk_remove(struct device *, const char *);
302:	void pm_clk_remove_clk(struct device *, struct clk *);
426:	int pm_clk_resume(struct device *);
529:	int pm_clk_runtime_resume(struct device *);
506:	int pm_clk_runtime_suspend(struct device *);
395:	int pm_clk_suspend(struct device *);
80:	static int __pm_clk_add(struct device *, const char *, struct clk *);
237:	static void __pm_clk_remove(struct pm_clock_entry *);
464:	static int pm_clk_notify(struct notifier_block *, unsigned long, void *);

File drivers/base/power/common.c:
102:	int dev_pm_domain_attach(struct device *, bool);
143:	struct device *dev_pm_domain_attach_by_id(struct device *, unsigned int);
160:	struct device *dev_pm_domain_attach_by_name(struct device *, const char *);
183:	void dev_pm_domain_detach(struct device *, bool);
220:	void dev_pm_domain_set(struct device *, struct dev_pm_domain *);
201:	int dev_pm_domain_start(struct device *);
25:	int dev_pm_get_subsys_data(struct device *);
61:	void dev_pm_put_subsys_data(struct device *);

File drivers/base/power/domain.c:
1652:	int dev_pm_genpd_add_notifier(struct device *, struct notifier_block *);
1698:	int dev_pm_genpd_remove_notifier(struct device *);
376:	int dev_pm_genpd_set_performance_state(struct device *, unsigned int);
1565:	int pm_genpd_add_device(struct generic_pm_domain *, struct device *);
1792:	int pm_genpd_add_subdomain(struct generic_pm_domain *, struct generic_pm_domain *);
1891:	int pm_genpd_init(struct generic_pm_domain *, struct dev_power_governor *, bool);
2016:	int pm_genpd_remove(struct generic_pm_domain *);
1626:	int pm_genpd_remove_device(struct device *);
1810:	int pm_genpd_remove_subdomain(struct generic_pm_domain *, struct generic_pm_domain *);
1390:	void pm_genpd_syscore_poweroff(struct device *);
1396:	void pm_genpd_syscore_poweron(struct device *);
757:	static int __genpd_runtime_resume(struct device *);
460:	static int _genpd_power_off(struct generic_pm_domain *, bool);
411:	static int _genpd_power_on(struct generic_pm_domain *, bool);
285:	static int _genpd_set_performance_state(struct generic_pm_domain *, unsigned int, int);
3175:	static int active_time_open(struct inode *, struct file *);
3084:	static int active_time_show(struct seq_file *, void *);
3177:	static int devices_open(struct inode *, struct file *);
3132:	static int devices_show(struct seq_file *, void *);
1518:	static int genpd_add_device(struct generic_pm_domain *, struct device *, struct device *);
1732:	static int genpd_add_subdomain(struct generic_pm_domain *, struct generic_pm_domain *);
1415:	static struct generic_pm_domain_data *genpd_alloc_dev_data(struct device *);
1345:	static void genpd_complete(struct device *);
3214:	static void genpd_debug_exit(void);
3180:	static int genpd_debug_init(void);
675:	static int genpd_dev_pm_qos_notifier(struct notifier_block *, unsigned long, void *);
668:	static int genpd_dev_pm_start(struct device *);
1129:	static int genpd_finish_suspend(struct device *, bool);
1851:	static void genpd_free_default_power_state(struct genpd_power_state *, unsigned int);
1456:	static void genpd_free_dev_data(struct device *, struct generic_pm_domain_data *);
1226:	static int genpd_freeze_noirq(struct device *);
62:	static int genpd_lock_interruptible_mtx(struct generic_pm_domain *);
98:	static int genpd_lock_interruptible_spin(struct generic_pm_domain *);
51:	static void genpd_lock_mtx(struct generic_pm_domain *);
56:	static void genpd_lock_nested_mtx(struct generic_pm_domain *, int);
88:	static void genpd_lock_nested_spin(struct generic_pm_domain *, int);
79:	static void genpd_lock_spin(struct generic_pm_domain *);
532:	static int genpd_power_off(struct generic_pm_domain *, bool, unsigned int);
943:	static int genpd_power_off_unused(void);
719:	static void genpd_power_off_work_fn(struct work_struct *);
618:	static int genpd_power_on(struct generic_pm_domain *, unsigned int);
1284:	static int genpd_poweroff_noirq(struct device *);
1081:	static int genpd_prepare(struct device *);
1963:	static int genpd_remove(struct generic_pm_domain *);
1577:	static int genpd_remove_device(struct generic_pm_domain *, struct device *);
1298:	static int genpd_restore_noirq(struct device *);
1188:	static int genpd_resume_noirq(struct device *);
859:	static int genpd_runtime_resume(struct device *);
784:	static int genpd_runtime_suspend(struct device *);
196:	static bool genpd_sd_counter_dec(struct generic_pm_domain *);
2930:	static int genpd_summary_one(struct seq_file *, struct generic_pm_domain *);
1175:	static int genpd_suspend_noirq(struct device *);
978:	static void genpd_sync_power_off(struct generic_pm_domain *, bool, unsigned int);
1020:	static void genpd_sync_power_on(struct generic_pm_domain *, bool, unsigned int);
1255:	static int genpd_thaw_noirq(struct device *);
67:	static void genpd_unlock_mtx(struct generic_pm_domain *);
108:	static void genpd_unlock_spin(struct generic_pm_domain *);
1469:	static void genpd_update_cpumask(struct generic_pm_domain *, int, bool, unsigned int);
3174:	static int idle_states_open(struct inode *, struct file *);
3054:	static int idle_states_show(struct seq_file *, void *);
933:	static int pd_ignore_unused_setup(char *);
3178:	static int perf_state_open(struct inode *, struct file *);
3158:	static int perf_state_show(struct seq_file *, void *);
3172:	static int status_open(struct inode *, struct file *);
3010:	static int status_show(struct seq_file *, void *);
3173:	static int sub_domains_open(struct inode *, struct file *);
3037:	static int sub_domains_show(struct seq_file *, void *);
3171:	static int summary_open(struct inode *, struct file *);
2987:	static int summary_show(struct seq_file *, void *);
3176:	static int total_idle_time_open(struct inode *, struct file *);
3104:	static int total_idle_time_show(struct seq_file *, void *);

File drivers/base/power/domain_governor.c:
120:	static bool __default_power_down_ok(struct dev_pm_domain *, unsigned int);
246:	static bool always_on_power_down_ok(struct dev_pm_domain *);
252:	static bool cpu_power_down_ok(struct dev_pm_domain *);
209:	static bool default_power_down_ok(struct dev_pm_domain *);
50:	static bool default_suspend_ok(struct device *);
15:	static int dev_update_qos_constraint(struct device *, void *);

File drivers/base/power/generic_ops.c:
291:	void pm_generic_complete(struct device *);
133:	int pm_generic_freeze(struct device *);
121:	int pm_generic_freeze_late(struct device *);
109:	int pm_generic_freeze_noirq(struct device *);
169:	int pm_generic_poweroff(struct device *);
157:	int pm_generic_poweroff_late(struct device *);
145:	int pm_generic_poweroff_noirq(struct device *);
58:	int pm_generic_prepare(struct device *);
277:	int pm_generic_restore(struct device *);
265:	int pm_generic_restore_early(struct device *);
253:	int pm_generic_restore_noirq(struct device *);
241:	int pm_generic_resume(struct device *);
229:	int pm_generic_resume_early(struct device *);
217:	int pm_generic_resume_noirq(struct device *);
39:	int pm_generic_runtime_resume(struct device *);
20:	int pm_generic_runtime_suspend(struct device *);
97:	int pm_generic_suspend(struct device *);
85:	int pm_generic_suspend_late(struct device *);
73:	int pm_generic_suspend_noirq(struct device *);
205:	int pm_generic_thaw(struct device *);
193:	int pm_generic_thaw_early(struct device *);
181:	int pm_generic_thaw_noirq(struct device *);

File drivers/base/power/main.c:
1939:	void __suspend_report_result(const char *, void *, int);
573:	bool dev_pm_skip_resume(struct device *);
2009:	bool dev_pm_skip_suspend(struct device *);
129:	void device_pm_add(struct device *);
1995:	void device_pm_check_callbacks(struct device *);
112:	void device_pm_lock(void);
187:	void device_pm_move_after(struct device *, struct device *);
173:	void device_pm_move_before(struct device *, struct device *);
200:	void device_pm_move_last(struct device *);
151:	void device_pm_remove(struct device *);
97:	void device_pm_sleep_init(struct device *);
120:	void device_pm_unlock(void);
1951:	int device_pm_wait_for_dev(struct device *, struct device *);
1097:	void dpm_complete(pm_message_t);
1966:	void dpm_for_each_dev(void *, void (*)(struct device *, void *));
1862:	int dpm_prepare(pm_message_t);
999:	void dpm_resume(pm_message_t);
836:	void dpm_resume_early(pm_message_t);
1136:	void dpm_resume_end(pm_message_t);
746:	void dpm_resume_noirq(pm_message_t);
883:	void dpm_resume_start(pm_message_t);
1739:	int dpm_suspend(pm_message_t);
1518:	int dpm_suspend_end(pm_message_t);
1467:	int dpm_suspend_late(pm_message_t);
1338:	int dpm_suspend_noirq(pm_message_t);
1923:	int dpm_suspend_start(pm_message_t);
1591:	static int __device_suspend(struct device *, pm_message_t, bool);
1377:	static int __device_suspend_late(struct device *, pm_message_t, bool);
1192:	static int __device_suspend_noirq(struct device *, pm_message_t, bool);
981:	static void async_resume(void *, async_cookie_t);
820:	static void async_resume_early(void *, async_cookie_t);
683:	static void async_resume_noirq(void *, async_cookie_t);
1713:	static void async_suspend(void *, async_cookie_t);
1442:	static void async_suspend_late(void *, async_cookie_t);
1263:	static void async_suspend_noirq(void *, async_cookie_t);
1795:	static int device_prepare(struct device *, pm_message_t);
896:	static int device_resume(struct device *, pm_message_t, bool);
764:	static int device_resume_early(struct device *, pm_message_t, bool);
593:	static int device_resume_noirq(struct device *, pm_message_t, bool);
1563:	static void dpm_clear_superiors_direct_complete(struct device *);
695:	static void dpm_noirq_resume_devices(pm_message_t);
1285:	static int dpm_noirq_suspend_devices(pm_message_t);
1354:	static void dpm_propagate_wakeup_to_parent(struct device *);
476:	static int dpm_run_callback(pm_callback_t, struct device *, pm_message_t, const char *);
456:	static void dpm_show_time(ktime_t, pm_message_t, int, const char *);
248:	static int dpm_wait_fn(struct device *, void *);
337:	static void dpm_wait_for_subordinate(struct device *, bool);
280:	static bool dpm_wait_for_superior(struct device *, bool);
218:	static void initcall_debug_report(struct device *, ktime_t, void *, int);
207:	static ktime_t initcall_debug_start(struct device *, void *);
1544:	static int legacy_suspend(struct device *, pm_message_t, int (*)(struct device *, pm_message_t), const char *);
442:	static void pm_dev_dbg(struct device *, pm_message_t, const char *);
449:	static void pm_dev_err(struct device *, pm_message_t, const char *, int);
381:	static pm_callback_t pm_late_early_op(const struct dev_pm_ops *, pm_message_t);
416:	static pm_callback_t pm_noirq_op(const struct dev_pm_ops *, pm_message_t);
348:	static pm_callback_t pm_op(const struct dev_pm_ops *, pm_message_t);
1980:	static bool pm_ops_is_empty(const struct dev_pm_ops *);
69:	static const char *pm_verb(int);

File drivers/base/power/qos.c:
52:	enum pm_qos_flags_status __dev_pm_qos_flags(struct device *, s32);
98:	s32 __dev_pm_qos_resume_latency(struct device *);
628:	int dev_pm_qos_add_ancestor_request(struct device *, struct dev_pm_qos_request *, enum dev_pm_qos_req_type, s32);
535:	int dev_pm_qos_add_notifier(struct device *, struct notifier_block *, enum dev_pm_qos_req_type);
388:	int dev_pm_qos_add_request(struct device *, struct dev_pm_qos_request *, enum dev_pm_qos_req_type, s32);
246:	void dev_pm_qos_constraints_destroy(struct device *);
774:	int dev_pm_qos_expose_flags(struct device *, s32);
698:	int dev_pm_qos_expose_latency_limit(struct device *, s32);
951:	int dev_pm_qos_expose_latency_tolerance(struct device *);
79:	enum pm_qos_flags_status dev_pm_qos_flags(struct device *, s32);
886:	s32 dev_pm_qos_get_user_latency_tolerance(struct device *);
833:	void dev_pm_qos_hide_flags(struct device *);
755:	void dev_pm_qos_hide_latency_limit(struct device *);
970:	void dev_pm_qos_hide_latency_tolerance(struct device *);
110:	s32 dev_pm_qos_read_value(struct device *, enum dev_pm_qos_req_type);
585:	int dev_pm_qos_remove_notifier(struct device *, struct notifier_block *, enum dev_pm_qos_req_type);
510:	int dev_pm_qos_remove_request(struct dev_pm_qos_request *);
855:	int dev_pm_qos_update_flags(struct device *, s32, bool);
463:	int dev_pm_qos_update_request(struct dev_pm_qos_request *, s32);
904:	int dev_pm_qos_update_user_latency_tolerance(struct device *, s32);
328:	static int __dev_pm_qos_add_request(struct device *, struct dev_pm_qos_request *, enum dev_pm_qos_req_type, s32);
474:	static int __dev_pm_qos_remove_request(struct dev_pm_qos_request *);
405:	static int __dev_pm_qos_update_request(struct dev_pm_qos_request *, s32);
150:	static int apply_constraint(struct dev_pm_qos_request *, enum pm_qos_req_action, s32);
194:	static int dev_pm_qos_constraints_allocate(struct device *);

File drivers/base/power/runtime.c:
1383:	void __pm_runtime_disable(struct device *, bool);
1031:	int __pm_runtime_idle(struct device *, int);
1098:	int __pm_runtime_resume(struct device *, int);
1186:	int __pm_runtime_set_status(struct device *, unsigned int);
1065:	int __pm_runtime_suspend(struct device *, int);
1606:	void __pm_runtime_use_autosuspend(struct device *, bool);
114:	u64 pm_runtime_active_time(struct device *);
1481:	void pm_runtime_allow(struct device *);
163:	u64 pm_runtime_autosuspend_expiration(struct device *);
1347:	int pm_runtime_barrier(struct device *);
1752:	void pm_runtime_drop_link(struct device_link *);
1425:	void pm_runtime_enable(struct device *);
1460:	void pm_runtime_forbid(struct device *);
1835:	int pm_runtime_force_resume(struct device *);
1787:	int pm_runtime_force_suspend(struct device *);
1139:	int pm_runtime_get_if_active(struct device *, bool);
1683:	void pm_runtime_get_suppliers(struct device *);
1623:	void pm_runtime_init(struct device *);
1527:	void pm_runtime_irq_safe(struct device *);
1729:	void pm_runtime_new_link(struct device *);
1506:	void pm_runtime_no_callbacks(struct device *);
1705:	void pm_runtime_put_suppliers(struct device *);
1654:	void pm_runtime_reinit(struct device *);
1673:	void pm_runtime_remove(struct device *);
1585:	void pm_runtime_set_autosuspend_delay(struct device *, int);
217:	void pm_runtime_set_memalloc_noio(struct device *, bool);
119:	u64 pm_runtime_suspended_time(struct device *);
987:	int pm_schedule_suspend(struct device *, unsigned int);
1296:	static void __pm_runtime_barrier(struct device *);
345:	static int __rpm_callback(int (*)(struct device *), struct device *);
21:	static pm_callback_t __rpm_get_callback(struct device *, size_t);
308:	static void __rpm_put_suppliers(struct device *, bool);
184:	static int dev_memalloc_noio(struct device *, void *);
917:	static void pm_runtime_work(struct work_struct *);
958:	static enum hrtimer_restart pm_suspend_timer_fn(struct hrtimer *);
483:	static int rpm_callback(int (*)(struct device *), struct device *);
258:	static int rpm_check_suspend_allowed(struct device *);
286:	static int rpm_get_suppliers(struct device *);
418:	static int rpm_idle(struct device *, int);
735:	static int rpm_resume(struct device *, int);
534:	static int rpm_suspend(struct device *, int);
1548:	static void update_autosuspend(struct device *, int, int);

File drivers/base/power/sysfs.c:
694:	int dpm_sysfs_add(struct device *);
738:	int dpm_sysfs_change_owner(struct device *, kuid_t, kgid_t);
829:	void dpm_sysfs_remove(struct device *);
803:	int pm_qos_sysfs_add_flags(struct device *);
813:	int pm_qos_sysfs_add_latency_tolerance(struct device *);
793:	int pm_qos_sysfs_add_resume_latency(struct device *);
808:	void pm_qos_sysfs_remove_flags(struct device *);
819:	void pm_qos_sysfs_remove_latency_tolerance(struct device *);
798:	void pm_qos_sysfs_remove_resume_latency(struct device *);
824:	void rpm_sysfs_remove(struct device *);
777:	int wakeup_sysfs_add(struct device *);
787:	void wakeup_sysfs_remove(struct device *);
182:	static ssize_t autosuspend_delay_ms_show(struct device *, struct device_attribute *, char *);
192:	static ssize_t autosuspend_delay_ms_store(struct device *, struct device_attribute *, const char *, size_t);
101:	static ssize_t control_show(struct device *, struct device_attribute *, char *);
108:	static ssize_t control_store(struct device *, struct device_attribute *, const char *, size_t);
255:	static ssize_t pm_qos_latency_tolerance_us_show(struct device *, struct device_attribute *, char *);
269:	static ssize_t pm_qos_latency_tolerance_us_store(struct device *, struct device_attribute *, const char *, size_t);
294:	static ssize_t pm_qos_no_power_off_show(struct device *, struct device_attribute *, char *);
302:	static ssize_t pm_qos_no_power_off_store(struct device *, struct device_attribute *, const char *, size_t);
211:	static ssize_t pm_qos_resume_latency_us_show(struct device *, struct device_attribute *, char *);
225:	static ssize_t pm_qos_resume_latency_us_store(struct device *, struct device_attribute *, const char *, size_t);
124:	static ssize_t runtime_active_time_show(struct device *, struct device_attribute *, char *);
150:	static ssize_t runtime_status_show(struct device *, struct device_attribute *, char *);
137:	static ssize_t runtime_suspended_time_show(struct device *, struct device_attribute *, char *);
369:	static ssize_t wakeup_active_count_show(struct device *, struct device_attribute *, char *);
432:	static ssize_t wakeup_active_show(struct device *, struct device_attribute *, char *);
349:	static ssize_t wakeup_count_show(struct device *, struct device_attribute *, char *);
411:	static ssize_t wakeup_expire_count_show(struct device *, struct device_attribute *, char *);
493:	static ssize_t wakeup_last_time_ms_show(struct device *, struct device_attribute *, char *);
473:	static ssize_t wakeup_max_time_ms_show(struct device *, struct device_attribute *, char *);
324:	static ssize_t wakeup_show(struct device *, struct device_attribute *, char *);
332:	static ssize_t wakeup_store(struct device *, struct device_attribute *, const char *, size_t);
452:	static ssize_t wakeup_total_time_ms_show(struct device *, struct device_attribute *, char *);

File drivers/base/power/wakeirq.c:
316:	void dev_pm_arm_wake_irq(struct wake_irq *);
87:	void dev_pm_clear_wake_irq(struct device *);
247:	void dev_pm_disable_wake_irq(struct device *);
298:	void dev_pm_disable_wake_irq_check(struct device *);
337:	void dev_pm_disarm_wake_irq(struct wake_irq *);
230:	void dev_pm_enable_wake_irq(struct device *);
270:	void dev_pm_enable_wake_irq_check(struct device *, bool);
165:	int dev_pm_set_dedicated_wake_irq(struct device *, int);
53:	int dev_pm_set_wake_irq(struct device *, int);
21:	static int dev_pm_attach_wake_irq(struct device *, struct wake_irq *, int);
127:	static irqreturn_t handle_threaded_wake_irq(int, void *);

File drivers/base/power/wakeup.c:
753:	void __pm_relax(struct wakeup_source *);
636:	void __pm_stay_awake(struct wakeup_source *);
513:	int device_init_wakeup(struct device *, bool);
483:	void device_set_wakeup_capable(struct device *, bool);
536:	int device_set_wakeup_enable(struct device *, bool);
407:	void device_wakeup_arm_wake_irqs(void);
370:	void device_wakeup_attach_irq(struct device *, struct wake_irq *);
393:	void device_wakeup_detach_irq(struct device *);
458:	int device_wakeup_disable(struct device *);
423:	void device_wakeup_disarm_wake_irqs(void);
336:	int device_wakeup_enable(struct device *);
971:	bool pm_get_wakeup_count(unsigned int *, bool);
875:	void pm_print_active_wakeup_sources(void);
773:	void pm_relax(struct device *);
1005:	bool pm_save_wakeup_count(unsigned int);
664:	void pm_stay_awake(struct device *);
939:	void pm_system_cancel_wakeup(void);
951:	void pm_system_irq_wakeup(unsigned int);
932:	void pm_system_wakeup(void);
944:	void pm_wakeup_clear(bool);
862:	void pm_wakeup_dev_event(struct device *, unsigned int, bool);
909:	bool pm_wakeup_pending(void);
823:	void pm_wakeup_ws_event(struct wakeup_source *, unsigned int, bool);
171:	void wakeup_source_add(struct wakeup_source *);
84:	struct wakeup_source *wakeup_source_create(const char *);
156:	void wakeup_source_destroy(struct wakeup_source *);
218:	struct wakeup_source *wakeup_source_register(struct device *, const char *);
192:	void wakeup_source_remove(struct wakeup_source *);
243:	void wakeup_source_unregister(struct wakeup_source *);
261:	int wakeup_sources_read_lock(void);
271:	void wakeup_sources_read_unlock(int);
300:	struct wakeup_source *wakeup_sources_walk_next(struct wakeup_source *);
285:	struct wakeup_source *wakeup_sources_walk_start(void);
316:	static int device_wakeup_attach(struct device *, struct wakeup_source *);
794:	static void pm_wakeup_timer_fn(struct timer_list *);
1055:	static int print_wakeup_source_stats(struct seq_file *, struct wakeup_source *);
591:	static void wakeup_source_activate(struct wakeup_source *);
696:	static void wakeup_source_deactivate(struct wakeup_source *);
118:	static void wakeup_source_record(struct wakeup_source *);
1180:	static int wakeup_sources_debugfs_init(void);
1167:	static int wakeup_sources_stats_open(struct inode *, struct file *);
1120:	static void *wakeup_sources_stats_seq_next(struct seq_file *, void *, loff_t *);
1151:	static int wakeup_sources_stats_seq_show(struct seq_file *, void *);
1098:	static void *wakeup_sources_stats_seq_start(struct seq_file *, loff_t *);
1139:	static void wakeup_sources_stats_seq_stop(struct seq_file *, void *);

File drivers/base/power/wakeup_stats.c:
194:	int pm_wakeup_source_sysfs_add(struct device *);
177:	int wakeup_source_sysfs_add(struct device *, struct wakeup_source *);
206:	void wakeup_source_sysfs_remove(struct wakeup_source *);
33:	static ssize_t active_count_show(struct device *, struct device_attribute *, char *);
38:	static ssize_t active_time_ms_show(struct device *, struct device_attribute *, char *);
131:	static void device_create_release(struct device *);
34:	static ssize_t event_count_show(struct device *, struct device_attribute *, char *);
36:	static ssize_t expire_count_show(struct device *, struct device_attribute *, char *);
82:	static ssize_t last_change_ms_show(struct device *, struct device_attribute *, char *);
65:	static ssize_t max_time_ms_show(struct device *, struct device_attribute *, char *);
91:	static ssize_t name_show(struct device *, struct device_attribute *, char *);
100:	static ssize_t prevent_suspend_time_ms_show(struct device *, struct device_attribute *, char *);
49:	static ssize_t total_time_ms_show(struct device *, struct device_attribute *, char *);
35:	static ssize_t wakeup_count_show(struct device *, struct device_attribute *, char *);
136:	static struct device *wakeup_source_device_create(struct device *, struct wakeup_source *);
211:	static int wakeup_sources_sysfs_init(void);

File drivers/base/property.c:
21:	struct fwnode_handle *dev_fwnode(struct device *);
545:	int device_add_properties(struct device *, const struct property_entry *);
811:	bool device_dma_supported(struct device *);
799:	unsigned int device_get_child_node_count(struct device *);
824:	enum dev_dma_attr device_get_dma_attr(struct device *);
938:	void *device_get_mac_address(struct device *, char *, int);
1182:	const void *device_get_match_data(struct device *);
749:	struct fwnode_handle *device_get_named_child_node(struct device *, const char *);
707:	struct fwnode_handle *device_get_next_child_node(struct device *, struct fwnode_handle *);
876:	int device_get_phy_mode(struct device *);
222:	int device_property_match_string(struct device *, const char *, const char *);
35:	bool device_property_present(struct device *, const char *);
200:	int device_property_read_string(struct device *, const char *, const char **);
178:	int device_property_read_string_array(struct device *, const char *, const char **, size_t);
103:	int device_property_read_u16_array(struct device *, const char *, u16 *, size_t);
128:	int device_property_read_u32_array(struct device *, const char *, u32 *, size_t);
153:	int device_property_read_u64_array(struct device *, const char *, u64 *, size_t);
78:	int device_property_read_u8_array(struct device *, const char *, u8 *, size_t);
519:	void device_remove_properties(struct device *);
1244:	void *fwnode_connection_find_match(struct fwnode_handle *, const char *, void *, devcon_match_fn_t);
623:	unsigned int fwnode_count_parents(const struct fwnode_handle *);
789:	bool fwnode_device_is_available(const struct fwnode_handle *);
498:	struct fwnode_handle *fwnode_find_reference(const struct fwnode_handle *, const char *, unsigned int);
916:	void *fwnode_get_mac_address(struct fwnode_handle *, char *, int);
565:	const char *fwnode_get_name(const struct fwnode_handle *);
578:	const char *fwnode_get_name_prefix(const struct fwnode_handle *);
737:	struct fwnode_handle *fwnode_get_named_child_node(const struct fwnode_handle *, const char *);
683:	struct fwnode_handle *fwnode_get_next_available_child_node(const struct fwnode_handle *, struct fwnode_handle *);
669:	struct fwnode_handle *fwnode_get_next_child_node(const struct fwnode_handle *, struct fwnode_handle *);
607:	struct fwnode_handle *fwnode_get_next_parent(struct fwnode_handle *);
649:	struct fwnode_handle *fwnode_get_nth_parent(struct fwnode_handle *, unsigned int);
590:	struct fwnode_handle *fwnode_get_parent(const struct fwnode_handle *);
848:	int fwnode_get_phy_mode(struct fwnode_handle *);
1110:	struct fwnode_handle *fwnode_graph_get_endpoint_by_id(const struct fwnode_handle *, u32, u32, unsigned long);
978:	struct fwnode_handle *fwnode_graph_get_next_endpoint(const struct fwnode_handle *, struct fwnode_handle *);
992:	struct fwnode_handle *fwnode_graph_get_port_parent(const struct fwnode_handle *);
1045:	struct fwnode_handle *fwnode_graph_get_remote_endpoint(const struct fwnode_handle *);
1061:	struct fwnode_handle *fwnode_graph_get_remote_node(const struct fwnode_handle *, u32, u32);
1032:	struct fwnode_handle *fwnode_graph_get_remote_port(const struct fwnode_handle *);
1012:	struct fwnode_handle *fwnode_graph_get_remote_port_parent(const struct fwnode_handle *);
1173:	int fwnode_graph_parse_endpoint(const struct fwnode_handle *, struct fwnode_endpoint *);
762:	struct fwnode_handle *fwnode_handle_get(struct fwnode_handle *);
779:	void fwnode_handle_put(struct fwnode_handle *);
952:	int fwnode_irq_get(struct fwnode_handle *, unsigned int);
477:	int fwnode_property_get_reference_args(const struct fwnode_handle *, const char *, const char *, unsigned int, unsigned int, struct fwnode_reference_args *);
425:	int fwnode_property_match_string(const struct fwnode_handle *, const char *, const char *);
46:	bool fwnode_property_present(const struct fwnode_handle *, const char *);
401:	int fwnode_property_read_string(const struct fwnode_handle *, const char *, const char **);
369:	int fwnode_property_read_string_array(const struct fwnode_handle *, const char *, const char **, size_t);
291:	int fwnode_property_read_u16_array(const struct fwnode_handle *, const char *, u16 *, size_t);
317:	int fwnode_property_read_u32_array(const struct fwnode_handle *, const char *, u32 *, size_t);
343:	int fwnode_property_read_u64_array(const struct fwnode_handle *, const char *, u64 *, size_t);
265:	int fwnode_property_read_u8_array(const struct fwnode_handle *, const char *, u8 *, size_t);
229:	static int fwnode_property_read_int_array(const struct fwnode_handle *, const char *, unsigned int, void *, size_t);

File drivers/base/regmap/./trace.h:
226:	int __traceiter_regcache_drop_region(void *, struct regmap *, unsigned int, unsigned int);
118:	int __traceiter_regcache_sync(void *, struct regmap *, const char *, const char *);
218:	int __traceiter_regmap_async_complete_done(void *, struct regmap *);
210:	int __traceiter_regmap_async_complete_start(void *, struct regmap *);
202:	int __traceiter_regmap_async_io_complete(void *, struct regmap *);
195:	int __traceiter_regmap_async_write_start(void *, struct regmap *, unsigned int, int);
170:	int __traceiter_regmap_cache_bypass(void *, struct regmap *, bool);
162:	int __traceiter_regmap_cache_only(void *, struct regmap *, bool);
97:	int __traceiter_regmap_hw_read_done(void *, struct regmap *, unsigned int, int);
90:	int __traceiter_regmap_hw_read_start(void *, struct regmap *, unsigned int, int);
111:	int __traceiter_regmap_hw_write_done(void *, struct regmap *, unsigned int, int);
104:	int __traceiter_regmap_hw_write_start(void *, struct regmap *, unsigned int, int);
49:	int __traceiter_regmap_reg_read(void *, struct regmap *, unsigned int, unsigned int);
58:	int __traceiter_regmap_reg_read_cache(void *, struct regmap *, unsigned int, unsigned int);
40:	int __traceiter_regmap_reg_write(void *, struct regmap *, unsigned int, unsigned int);
118:	static void __bpf_trace_regcache_sync(void *, struct regmap *, const char *, const char *);
178:	static void __bpf_trace_regmap_async(void *, struct regmap *);
67:	static void __bpf_trace_regmap_block(void *, struct regmap *, unsigned int, int);
142:	static void __bpf_trace_regmap_bool(void *, struct regmap *, bool);
16:	static void __bpf_trace_regmap_reg(void *, struct regmap *, unsigned int, unsigned int);
226:	static void perf_trace_regcache_drop_region(void *, struct regmap *, unsigned int, unsigned int);
118:	static void perf_trace_regcache_sync(void *, struct regmap *, const char *, const char *);
178:	static void perf_trace_regmap_async(void *, struct regmap *);
67:	static void perf_trace_regmap_block(void *, struct regmap *, unsigned int, int);
142:	static void perf_trace_regmap_bool(void *, struct regmap *, bool);
16:	static void perf_trace_regmap_reg(void *, struct regmap *, unsigned int, unsigned int);
226:	static void trace_event_raw_event_regcache_drop_region(void *, struct regmap *, unsigned int, unsigned int);
118:	static void trace_event_raw_event_regcache_sync(void *, struct regmap *, const char *, const char *);
178:	static void trace_event_raw_event_regmap_async(void *, struct regmap *);
67:	static void trace_event_raw_event_regmap_block(void *, struct regmap *, unsigned int, int);
142:	static void trace_event_raw_event_regmap_bool(void *, struct regmap *, bool);
16:	static void trace_event_raw_event_regmap_reg(void *, struct regmap *, unsigned int, unsigned int);
226:	static enum print_line_t trace_raw_output_regcache_drop_region(struct trace_iterator *, int, struct trace_event *);
118:	static enum print_line_t trace_raw_output_regcache_sync(struct trace_iterator *, int, struct trace_event *);
178:	static enum print_line_t trace_raw_output_regmap_async(struct trace_iterator *, int, struct trace_event *);
67:	static enum print_line_t trace_raw_output_regmap_block(struct trace_iterator *, int, struct trace_event *);
142:	static enum print_line_t trace_raw_output_regmap_bool(struct trace_iterator *, int, struct trace_event *);
16:	static enum print_line_t trace_raw_output_regmap_reg(struct trace_iterator *, int, struct trace_event *);

File drivers/base/regmap/regcache-flat.c:
46:	static int regcache_flat_exit(struct regmap *);
21:	static int regcache_flat_init(struct regmap *);
54:	static int regcache_flat_read(struct regmap *, unsigned int, unsigned int *);
65:	static int regcache_flat_write(struct regmap *, unsigned int, unsigned int);

File drivers/base/regmap/regcache-rbtree.c:
178:	static void rbtree_debugfs_init(struct regmap *);
176:	static int rbtree_open(struct inode *, struct file *);
132:	static int rbtree_show(struct seq_file *, void *);
505:	static int regcache_rbtree_drop(struct regmap *, unsigned int, unsigned int);
213:	static int regcache_rbtree_exit(struct regmap *);
184:	static int regcache_rbtree_init(struct regmap *);
262:	static int regcache_rbtree_insert_to_block(struct regmap *, struct regcache_rbtree_node *, unsigned int, unsigned int, unsigned int, unsigned int);
62:	static struct regcache_rbtree_node *regcache_rbtree_lookup(unsigned int, struct regmap *, struct regmap *);
317:	static struct regcache_rbtree_node *regcache_rbtree_node_alloc(struct regmap *, unsigned int);
242:	static int regcache_rbtree_read(struct regmap *, unsigned int, unsigned int *);
54:	static void regcache_rbtree_set_register(struct regmap *, struct regcache_rbtree_node *, unsigned int, unsigned int);
464:	static int regcache_rbtree_sync(struct regmap *, unsigned int, unsigned int);
368:	static int regcache_rbtree_write(struct regmap *, unsigned int, unsigned int);

File drivers/base/regmap/regcache.c:
538:	void regcache_cache_bypass(struct regmap *, bool);
495:	void regcache_cache_only(struct regmap *, bool);
463:	int regcache_drop_region(struct regmap *, unsigned int, unsigned int);
206:	void regcache_exit(struct regmap *);
594:	unsigned int regcache_get_val(struct regmap *, const void *, unsigned int);
115:	int regcache_init(struct regmap *, const struct regmap_config *);
643:	int regcache_lookup_reg(struct regmap *, unsigned int);
518:	void regcache_mark_dirty(struct regmap *);
233:	int regcache_read(struct regmap *, unsigned int, unsigned int *);
548:	bool regcache_set_val(struct regmap *, void *, unsigned int, unsigned int);
339:	int regcache_sync(struct regmap *);
774:	int regcache_sync_block(struct regmap *, void *, unsigned long *, unsigned int, unsigned int, unsigned int);
408:	int regcache_sync_region(struct regmap *, unsigned int, unsigned int);
264:	int regcache_write(struct regmap *, unsigned int, unsigned int);
635:	static int regcache_default_cmp(const void *, const void *);
294:	static int regcache_default_sync(struct regmap *, unsigned int, unsigned int);
26:	static int regcache_hw_init(struct regmap *);
732:	static int regcache_sync_block_raw(struct regmap *, void *, unsigned long *, unsigned int, unsigned int, unsigned int);
704:	static int regcache_sync_block_raw_flush(struct regmap *, const void **, unsigned int, unsigned int);
668:	static int regcache_sync_block_single(struct regmap *, void *, unsigned long *, unsigned int, unsigned int, unsigned int);

File drivers/base/regmap/regmap-debugfs.c:
655:	void regmap_debugfs_exit(struct regmap *);
546:	void regmap_debugfs_init(struct regmap *);
679:	void regmap_debugfs_initcall(void);
457:	static int regmap_access_open(struct inode *, struct file *);
434:	static int regmap_access_show(struct seq_file *, void *);
506:	static ssize_t regmap_cache_bypass_write_file(struct file *, const char *, size_t, loff_t *);
459:	static ssize_t regmap_cache_only_write_file(struct file *, const char *, size_t, loff_t *);
67:	static void regmap_debugfs_free_dump_cache(struct regmap *);
95:	static unsigned int regmap_debugfs_get_dump_start(struct regmap *, loff_t, loff_t *, unsigned int);
284:	static ssize_t regmap_map_read_file(struct file *, char *, size_t, loff_t *);
34:	static ssize_t regmap_name_read_file(struct file *, char *, size_t, loff_t *);
344:	static ssize_t regmap_range_read_file(struct file *, char *, size_t, loff_t *);
215:	static ssize_t regmap_read_debugfs(struct regmap *, unsigned int, unsigned int, char *, size_t, loff_t *);
360:	static ssize_t regmap_reg_ranges_read_file(struct file *, char *, size_t, loff_t *);

File drivers/base/regmap/regmap.c:
1210:	struct regmap *__devm_regmap_init(struct device *, const struct regmap_bus *, void *, const struct regmap_config *, struct lock_class_key *, const char *);
701:	struct regmap *__regmap_init(struct device *, const struct regmap_bus *, void *, const struct regmap_config *, struct lock_class_key *, const char *);
1993:	int _regmap_raw_write(struct regmap *, unsigned int, const void *, size_t, bool);
1908:	int _regmap_write(struct regmap *, unsigned int, unsigned int);
1530:	struct regmap *dev_get_regmap(struct device *, const char *);
1258:	struct regmap_field *devm_regmap_field_alloc(struct device *, struct regmap *, struct reg_field);
1321:	int devm_regmap_field_bulk_alloc(struct device *, struct regmap *, struct regmap_field **, struct reg_field *, int);
1384:	void devm_regmap_field_free(struct device *, struct regmap_field *);
3152:	int regmap_async_complete(struct regmap *);
3111:	void regmap_async_complete_cb(struct regmap_async *, int);
611:	int regmap_attach_dev(struct device *, struct regmap *, const struct regmap_config *);
2948:	int regmap_bulk_read(struct regmap *, unsigned int, void *, size_t);
2204:	int regmap_bulk_write(struct regmap *, unsigned int, const void *, size_t);
104:	bool regmap_cached(struct regmap *, unsigned int);
1821:	bool regmap_can_raw_write(struct regmap *);
74:	bool regmap_check_range_table(struct regmap *, unsigned int, const struct regmap_access_table *);
1475:	void regmap_exit(struct regmap *);
1401:	struct regmap_field *regmap_field_alloc(struct regmap *, struct reg_field);
1286:	int regmap_field_bulk_alloc(struct regmap *, struct regmap_field **, struct reg_field *, int);
1421:	void regmap_field_free(struct regmap_field *);
2888:	int regmap_field_read(struct regmap_field *, unsigned int *);
2147:	int regmap_field_update_bits_base(struct regmap_field *, unsigned int, unsigned int, bool *, bool, bool);
2914:	int regmap_fields_read(struct regmap_field *, unsigned int, unsigned int *);
2174:	int regmap_fields_update_bits_base(struct regmap_field *, unsigned int, unsigned int, unsigned int, bool *, bool, bool);
1548:	struct device *regmap_get_device(struct regmap *);
3260:	int regmap_get_max_register(struct regmap *);
1833:	size_t regmap_get_raw_read_max(struct regmap *);
1844:	size_t regmap_get_raw_write_max(struct regmap *);
3274:	int regmap_get_reg_stride(struct regmap *);
3243:	int regmap_get_val_bytes(struct regmap *);
662:	enum regmap_endian regmap_get_val_endian(struct device *, const struct regmap_bus *, const struct regmap_config *);
2511:	int regmap_multi_reg_write(struct regmap *, const struct reg_sequence *, int);
2544:	int regmap_multi_reg_write_bypassed(struct regmap *, const struct reg_sequence *, int);
2837:	int regmap_noinc_read(struct regmap *, unsigned int, void *, size_t);
2088:	int regmap_noinc_write(struct regmap *, unsigned int, const void *, size_t);
3280:	int regmap_parse_val(struct regmap *, const void *, unsigned int *);
164:	bool regmap_precious(struct regmap *, unsigned int);
2741:	int regmap_raw_read(struct regmap *, unsigned int, void *, size_t);
2047:	int regmap_raw_write(struct regmap *, unsigned int, const void *, size_t);
2588:	int regmap_raw_write_async(struct regmap *, unsigned int, const void *, size_t);
2713:	int regmap_read(struct regmap *, unsigned int, unsigned int *);
127:	bool regmap_readable(struct regmap *, unsigned int);
189:	bool regmap_readable_noinc(struct regmap *, unsigned int);
60:	bool regmap_reg_in_ranges(unsigned int, const struct regmap_range *, unsigned int);
3193:	int regmap_register_patch(struct regmap *, const struct reg_sequence *, int);
1441:	int regmap_reinit_cache(struct regmap *, const struct regmap_config *);
3099:	int regmap_test_bits(struct regmap *, unsigned int, unsigned int);
3068:	int regmap_update_bits_base(struct regmap *, unsigned int, unsigned int, unsigned int, bool *, bool, bool);
147:	bool regmap_volatile(struct regmap *, unsigned int);
1945:	int regmap_write(struct regmap *, unsigned int, unsigned int);
1972:	int regmap_write_async(struct regmap *, unsigned int, unsigned int);
90:	bool regmap_writeable(struct regmap *, unsigned int);
178:	bool regmap_writeable_noinc(struct regmap *, unsigned int);
1850:	static int _regmap_bus_formatted_write(void *, unsigned int, unsigned int);
1886:	static int _regmap_bus_raw_write(void *, unsigned int, unsigned int);
2653:	static int _regmap_bus_read(void *, unsigned int, unsigned int *);
2645:	static int _regmap_bus_reg_read(void *, unsigned int, unsigned int *);
1878:	static int _regmap_bus_reg_write(void *, unsigned int, unsigned int);
2413:	static int _regmap_multi_reg_write(struct regmap *, const struct reg_sequence *, size_t);
2332:	static int _regmap_range_multi_paged_reg_write(struct regmap *, struct reg_sequence *, size_t);
2275:	static int _regmap_raw_multi_reg_write(struct regmap *, const struct reg_sequence *, size_t);
2612:	static int _regmap_raw_read(struct regmap *, unsigned int, void *, unsigned int, bool);
1617:	static int _regmap_raw_write_impl(struct regmap *, unsigned int, const void *, size_t, bool);
2671:	static int _regmap_read(struct regmap *, unsigned int, unsigned int *);
1554:	static int _regmap_select_page(struct regmap *, unsigned int *, struct regmap_range_node *, unsigned int);
3014:	static int _regmap_update_bits(struct regmap *, unsigned int, unsigned int, unsigned int, bool *, bool);
1503:	static int dev_get_regmap_match(struct device *, void *, void *);
526:	static void dev_get_regmap_release(struct device *, void *);
1205:	static void devm_regmap_release(struct device *, void *);
246:	static void regmap_format_10_14_write(struct regmap *, unsigned int, unsigned int);
212:	static void regmap_format_12_20_write(struct regmap *, unsigned int, unsigned int);
263:	static void regmap_format_16_be(void *, unsigned int, unsigned int);
268:	static void regmap_format_16_le(void *, unsigned int, unsigned int);
273:	static void regmap_format_16_native(void *, unsigned int, unsigned int);
281:	static void regmap_format_24(void *, unsigned int, unsigned int);
224:	static void regmap_format_2_6_write(struct regmap *, unsigned int, unsigned int);
292:	static void regmap_format_32_be(void *, unsigned int, unsigned int);
297:	static void regmap_format_32_le(void *, unsigned int, unsigned int);
302:	static void regmap_format_32_native(void *, unsigned int, unsigned int);
232:	static void regmap_format_4_12_write(struct regmap *, unsigned int, unsigned int);
311:	static void regmap_format_64_be(void *, unsigned int, unsigned int);
316:	static void regmap_format_64_le(void *, unsigned int, unsigned int);
321:	static void regmap_format_64_native(void *, unsigned int, unsigned int);
239:	static void regmap_format_7_9_write(struct regmap *, unsigned int, unsigned int);
256:	static void regmap_format_8(void *, unsigned int, unsigned int);
3292:	static int regmap_initcall(void);
449:	static void regmap_lock_hwlock(void *);
456:	static void regmap_lock_hwlock_irq(void *);
463:	static void regmap_lock_hwlock_irqsave(void *);
497:	static void regmap_lock_mutex(void *);
509:	static void regmap_lock_spinlock(void *);
341:	static unsigned int regmap_parse_16_be(const void *);
351:	static void regmap_parse_16_be_inplace(void *);
346:	static unsigned int regmap_parse_16_le(const void *);
358:	static void regmap_parse_16_le_inplace(void *);
365:	static unsigned int regmap_parse_16_native(const void *);
373:	static unsigned int regmap_parse_24(const void *);
383:	static unsigned int regmap_parse_32_be(const void *);
393:	static void regmap_parse_32_be_inplace(void *);
388:	static unsigned int regmap_parse_32_le(const void *);
400:	static void regmap_parse_32_le_inplace(void *);
407:	static unsigned int regmap_parse_32_native(const void *);
416:	static unsigned int regmap_parse_64_be(const void *);
426:	static void regmap_parse_64_be_inplace(void *);
421:	static unsigned int regmap_parse_64_le(const void *);
433:	static void regmap_parse_64_le_inplace(void *);
440:	static unsigned int regmap_parse_64_native(const void *);
334:	static unsigned int regmap_parse_8(const void *);
330:	static void regmap_parse_inplace_noop(void *);
471:	static void regmap_unlock_hwlock(void *);
478:	static void regmap_unlock_hwlock_irq(void *);
485:	static void regmap_unlock_hwlock_irqrestore(void *);
503:	static void regmap_unlock_mutex(void *);
519:	static void regmap_unlock_spinlock(void *);

File drivers/base/swnode.c:
811:	struct fwnode_handle *fwnode_create_software_node(const struct property_entry *, const struct fwnode_handle *);
842:	void fwnode_remove_software_node(struct fwnode_handle *);
36:	bool is_software_node(const struct fwnode_handle *);
296:	struct property_entry *property_entries_dup(const struct property_entry *);
333:	void property_entries_free(const struct property_entry *);
570:	const struct software_node *software_node_find_by_name(const struct software_node *, const char *);
82:	struct fwnode_handle *software_node_fwnode(const struct software_node *);
853:	int software_node_notify(struct device *, unsigned long);
782:	int software_node_register(const struct software_node *);
740:	int software_node_register_node_group(const struct software_node **);
697:	int software_node_register_nodes(const struct software_node *);
800:	void software_node_unregister(const struct software_node *);
766:	void software_node_unregister_node_group(const struct software_node **);
725:	void software_node_unregister_nodes(const struct software_node *);
74:	const struct software_node *to_software_node(const struct fwnode_handle *);
235:	static int property_entry_copy_data(struct property_entry *, const struct property_entry *);
114:	static const void *property_entry_find(const struct property_entry *, const char *, size_t);
199:	static void property_entry_free_data(const struct property_entry *);
144:	static int property_entry_read_int_array(const struct property_entry *, const char *, unsigned int, void *, size_t);
905:	static void software_node_exit(void);
350:	static struct fwnode_handle *software_node_get(struct fwnode_handle *);
396:	static const char *software_node_get_name(const struct fwnode_handle *);
407:	static const char *software_node_get_name_prefix(const struct fwnode_handle *);
461:	static struct fwnode_handle *software_node_get_named_child_node(const struct fwnode_handle *, const char *);
439:	static struct fwnode_handle *software_node_get_next_child(const struct fwnode_handle *, struct fwnode_handle *);
428:	static struct fwnode_handle *software_node_get_parent(const struct fwnode_handle *);
480:	static int software_node_get_reference_args(const struct fwnode_handle *, const char *, const char *, unsigned int, unsigned int, struct fwnode_reference_args *);
896:	static int software_node_init(void);
366:	static bool software_node_property_present(const struct fwnode_handle *, const char *);
359:	static void software_node_put(struct fwnode_handle *);
374:	static int software_node_read_int_array(const struct fwnode_handle *, const char *, unsigned int, void *, size_t);
385:	static int software_node_read_string_array(const struct fwnode_handle *, const char *, const char **, size_t);
611:	static void software_node_release(struct kobject *);
52:	static struct swnode *software_node_to_swnode(const struct software_node *);
636:	static struct fwnode_handle *swnode_register(const struct software_node *, struct swnode *, unsigned int);

File drivers/base/syscore.c:
21:	void register_syscore_ops(struct syscore_ops *);
91:	void syscore_resume(void);
114:	void syscore_shutdown(void);
47:	int syscore_suspend(void);
33:	void unregister_syscore_ops(struct syscore_ops *);

File drivers/base/topology.c:
67:	static ssize_t cluster_cpus_list_show(struct device *, struct device_attribute *, char *);
67:	static ssize_t cluster_cpus_show(struct device *, struct device_attribute *, char *);
49:	static ssize_t cluster_id_show(struct device *, struct device_attribute *, char *);
52:	static ssize_t core_id_show(struct device *, struct device_attribute *, char *);
63:	static ssize_t core_siblings_list_show(struct device *, struct device_attribute *, char *);
63:	static ssize_t core_siblings_show(struct device *, struct device_attribute *, char *);
71:	static ssize_t die_cpus_list_show(struct device *, struct device_attribute *, char *);
71:	static ssize_t die_cpus_show(struct device *, struct device_attribute *, char *);
46:	static ssize_t die_id_show(struct device *, struct device_attribute *, char *);
43:	static ssize_t physical_package_id_show(struct device *, struct device_attribute *, char *);
55:	static ssize_t thread_siblings_list_show(struct device *, struct device_attribute *, char *);
55:	static ssize_t thread_siblings_show(struct device *, struct device_attribute *, char *);
131:	static int topology_add_dev(unsigned int);
138:	static int topology_remove_dev(unsigned int);
146:	static int topology_sysfs_init(void);

File drivers/base/transport_class.c:
91:	int anon_transport_class_register(struct anon_transport_class *);
113:	void anon_transport_class_unregister(struct anon_transport_class *);
179:	int transport_add_device(struct device *);
51:	int transport_class_register(struct transport_class *);
65:	void transport_class_unregister(struct transport_class *);
212:	void transport_configure_device(struct device *);
280:	void transport_destroy_device(struct device *);
251:	void transport_remove_device(struct device *);
148:	void transport_setup_device(struct device *);
71:	static int anon_transport_dummy_function(struct transport_container *, struct device *, struct device *);
154:	static int transport_add_class_device(struct attribute_container *, struct device *, struct device *);
187:	static int transport_configure(struct attribute_container *, struct device *, struct device *);
257:	static void transport_destroy_classdev(struct attribute_container *, struct device *, struct device *);
218:	static int transport_remove_classdev(struct attribute_container *, struct device *, struct device *);
120:	static int transport_setup_classdev(struct attribute_container *, struct device *, struct device *);

File drivers/char/hpet.c:
835:	int hpet_alloc(struct hpet_data *);
1017:	static int hpet_acpi_add(struct acpi_device *);
690:	static long hpet_compat_ioctl(struct file *, unsigned int, unsigned long);
403:	static int hpet_fasync(int, struct file *, int);
1056:	static int hpet_init(void);
139:	static irqreturn_t hpet_interrupt(int, void *);
665:	static long hpet_ioctl(struct file *, unsigned int, unsigned long);
574:	static int hpet_ioctl_common(struct hpet_dev *, unsigned int, unsigned long, struct hpet_info *);
453:	static int hpet_ioctl_ieon(struct hpet_dev *);
379:	static int hpet_mmap(struct file *, struct vm_area_struct *);
371:	static int hpet_mmap_enable(char *);
257:	static int hpet_open(struct inode *, struct file *);
342:	static __poll_t hpet_poll(struct file *, poll_table *);
296:	static ssize_t hpet_read(struct file *, char *, size_t, loff_t *);
415:	static int hpet_release(struct inode *, struct file *);
959:	static acpi_status hpet_resources(struct acpi_resource *, void *);
198:	static void hpet_timer_set_irq(struct hpet_dev *);

File drivers/char/hw_random/core.c:
585:	int devm_hwrng_register(struct device *, struct hwrng *);
606:	void devm_hwrng_unregister(struct device *, struct hwrng *);
468:	int hwrng_register(struct hwrng *);
535:	void hwrng_unregister(struct hwrng *);
64:	static void add_early_randomness(struct hwrng *);
575:	static int devm_hwrng_match(struct device *, void *, void *);
570:	static void devm_hwrng_release(struct device *, void *);
102:	static void drop_current_rng(void);
299:	static int enable_best_rng(void);
114:	static struct hwrng *get_current_rng_nolock(void);
374:	static ssize_t hwrng_attr_available_show(struct device *, struct device_attribute *, char *);
357:	static ssize_t hwrng_attr_current_show(struct device *, struct device_attribute *, char *);
322:	static ssize_t hwrng_attr_current_store(struct device *, struct device_attribute *, const char *, size_t);
395:	static ssize_t hwrng_attr_selected_show(struct device *, struct device_attribute *, char *);
431:	static int hwrng_fillfn(void *);
147:	static int hwrng_init(struct hwrng *);
636:	static void hwrng_modexit(void);
612:	static int hwrng_modinit(void);
135:	static void put_rng(struct hwrng *);
176:	static int rng_dev_open(struct inode *, struct file *);
205:	static ssize_t rng_dev_read(struct file *, char *, size_t, loff_t *);
86:	static int set_current_rng(struct hwrng *);
421:	static void unregister_miscdev(void);

File drivers/char/hw_random/virtio-rng.c:
88:	static int probe_common(struct virtio_device *);
30:	static void random_recv_done(struct virtqueue *);
130:	static void remove_common(struct virtio_device *);
80:	static void virtio_cleanup(struct hwrng *);
54:	static int virtio_read(struct hwrng *, void *, size_t, bool);
216:	static void virtio_rng_driver_exit(void);
216:	static int virtio_rng_driver_init(void);
167:	static int virtrng_freeze(struct virtio_device *);
146:	static int virtrng_probe(struct virtio_device *);
151:	static void virtrng_remove(struct virtio_device *);
173:	static int virtrng_restore(struct virtio_device *);
156:	static void virtrng_scan(struct virtio_device *);

File drivers/char/ipmi/ipmi_dmi.c:
100:	int ipmi_dmi_get_slave_addr(enum si_type, unsigned int, unsigned long);
214:	static int scan_for_dmi_ipmi(void);

File drivers/char/ipmi/ipmi_plat_data.c:
11:	struct platform_device *ipmi_platform_add(const char *, unsigned int, struct ipmi_plat_data *);

File drivers/char/mem.c:
275:	int phys_mem_access_prot_allowed(struct file *, unsigned long, unsigned long, pgprot_t *);
1069:	static int chr_dev_init(void);
1027:	static int devmem_fs_init_fs_context(struct fs_context *);
767:	static unsigned long get_unmapped_area_zero(struct file *, unsigned long, unsigned long, unsigned long, unsigned long);
1018:	static char *mem_devnode(struct device *, umode_t *);
813:	static loff_t memory_lseek(struct file *, loff_t, int);
991:	static int memory_open(struct inode *, struct file *);
373:	static int mmap_mem(struct file *, struct vm_area_struct *);
756:	static int mmap_zero(struct file *, struct vm_area_struct *);
800:	static loff_t null_lseek(struct file *, loff_t, int);
875:	static int open_port(struct inode *, struct file *);
697:	static int pipe_to_null(struct pipe_inode_info *, struct pipe_buffer *, struct splice_desc *);
685:	static ssize_t read_iter_null(struct kiocb *, struct iov_iter *);
709:	static ssize_t read_iter_zero(struct kiocb *, struct iov_iter *);
115:	static ssize_t read_mem(struct file *, char *, size_t, loff_t *);
673:	static ssize_t read_null(struct file *, char *, size_t, loff_t *);
631:	static ssize_t read_port(struct file *, char *, size_t, loff_t *);
729:	static ssize_t read_zero(struct file *, char *, size_t, loff_t *);
703:	static ssize_t splice_write_null(struct pipe_inode_info *, struct file *, loff_t *, size_t, unsigned int);
789:	static ssize_t write_full(struct file *, const char *, size_t, loff_t *);
690:	static ssize_t write_iter_null(struct kiocb *, struct iov_iter *);
202:	static ssize_t write_mem(struct file *, const char *, size_t, loff_t *);
679:	static ssize_t write_null(struct file *, const char *, size_t, loff_t *);
649:	static ssize_t write_port(struct file *, const char *, size_t, loff_t *);

File drivers/char/misc.c:
239:	void misc_deregister(struct miscdevice *);
173:	int misc_register(struct miscdevice *);
255:	static char *misc_devnode(struct device *, umode_t *);
266:	static int misc_init(void);
100:	static int misc_open(struct inode *, struct file *);
73:	static void *misc_seq_next(struct seq_file *, void *, loff_t *);
83:	static int misc_seq_show(struct seq_file *, void *);
67:	static void *misc_seq_start(struct seq_file *, loff_t *);
78:	static void misc_seq_stop(struct seq_file *, void *);

File drivers/char/nvram.c:
120:	static int __nvram_check_checksum(void);
280:	static long nvram_misc_ioctl(struct file *, unsigned int, unsigned long);
222:	static loff_t nvram_misc_llseek(struct file *, loff_t, int);
350:	static int nvram_misc_open(struct inode *, struct file *);
228:	static ssize_t nvram_misc_read(struct file *, char *, size_t, loff_t *);
381:	static int nvram_misc_release(struct inode *, struct file *);
259:	static ssize_t nvram_misc_write(struct file *, const char *, size_t, loff_t *);
532:	static void nvram_module_exit(void);
506:	static int nvram_module_init(void);
474:	static int nvram_proc_read(struct seq_file *, void *);
164:	static ssize_t pc_nvram_get_size(void);
152:	static long pc_nvram_initialize(void);
411:	static void pc_nvram_proc_read(unsigned char *, struct seq_file *, void *);
169:	static ssize_t pc_nvram_read(char *, size_t, loff_t *);
89:	static unsigned char pc_nvram_read_byte(int);
144:	static long pc_nvram_set_checksum(void);
187:	static ssize_t pc_nvram_write(char *, size_t, loff_t *);
106:	static void pc_nvram_write_byte(unsigned char, int);

File drivers/char/random.c:
2008:	long __ia32_sys_getrandom(const struct pt_regs *);
2008:	long __x64_sys_getrandom(const struct pt_regs *);
2323:	void add_bootloader_randomness(const void *, unsigned int);
1124:	void add_device_randomness(const void *, unsigned int);
1323:	void add_disk_randomness(struct gendisk *);
2297:	void add_hwgenerator_randomness(const char *, size_t, size_t);
1201:	void add_input_randomness(unsigned int, unsigned int, unsigned int);
1255:	void add_interrupt_randomness(int, int);
1681:	int add_random_ready_callback(struct random_ready_callback *);
1715:	void del_random_ready_callback(struct random_ready_callback *);
1571:	void get_random_bytes(void *, int);
1743:	int get_random_bytes_arch(void *, int);
2215:	u32 get_random_u32(void);
2191:	u64 get_random_u64(void);
1800:	int rand_initialize(void);
1813:	void rand_initialize_disk(struct gendisk *);
2275:	unsigned long randomize_page(unsigned long, unsigned long);
1667:	bool rng_is_initialized(void);
1640:	int wait_for_random_bytes(void);
584:	static void __mix_pool_bytes(struct entropy_store *, const void *, int);
1033:	static void _crng_backtrack_protect(struct crng_state *, __u8 *, int);
998:	static void _extract_crng(struct crng_state *, __u8 *);
1448:	static ssize_t _extract_entropy(struct entropy_store *, void *, size_t, int);
1550:	static void _get_random_bytes(void *, int);
537:	static void _mix_pool_bytes(struct entropy_store *, const void *, int);
1517:	static void _warn_unseeded_randomness(const char *, void *, void **);
1344:	static size_t account(struct entropy_store *, int, int, size_t);
1152:	static void add_timer_randomness(struct timer_rand_state *, unsigned int);
661:	static void credit_entropy_bits(int, struct entropy_store *);
878:	static int crng_fast_load(const char *, size_t);
784:	static bool crng_init_try_arch(struct crng_state *);
802:	static bool crng_init_try_arch_early(struct crng_state *);
948:	static void crng_reseed(struct crng_state *, struct entropy_store *);
917:	static int crng_slow_load(const char *, size_t);
842:	static void do_numa_crng_init(struct work_struct *);
1594:	static void entropy_timer(struct timer_list *);
1394:	static void extract_buf(struct entropy_store *, __u8 *);
1066:	static ssize_t extract_crng_user(void *, size_t);
1487:	static ssize_t extract_entropy(struct entropy_store *, void *, int, int, size_t);
1774:	static void init_std_data(struct entropy_store *);
2240:	static void invalidate_batched_entropy(void);
591:	static void mix_pool_bytes(const void *, int, struct entropy_store *);
866:	static void numa_crng_init(void);
778:	static int parse_trust_cpu(char *);
2090:	static int proc_do_entropy(struct ctl_table *, int, void *, size_t *, loff_t *);
2060:	static int proc_do_uuid(struct ctl_table *, int, void *, size_t *, loff_t *);
1984:	static int random_fasync(int, struct file *, int);
1928:	static long random_ioctl(struct file *, unsigned int, unsigned long);
1872:	static __poll_t random_poll(struct file *, poll_table *);
1861:	static ssize_t random_read(struct file *, char *, size_t, loff_t *);
1916:	static ssize_t random_write(struct file *, const char *, size_t, loff_t *);
1603:	static void try_to_generate_entropy(void);
1842:	static ssize_t urandom_read(struct file *, char *, size_t, loff_t *);
1830:	static ssize_t urandom_read_nowarn(char *, size_t, loff_t *, struct file *);
1887:	static int write_pool(const char *, size_t, struct entropy_store *);

File drivers/char/raw.c:
136:	static int bind_set(int, u64, u64);
242:	static long raw_ctl_compat_ioctl(struct file *, unsigned int, unsigned long);
201:	static long raw_ctl_ioctl(struct file *, unsigned int, unsigned long);
301:	static char *raw_devnode(struct device *, umode_t *);
352:	static void raw_exit(void);
306:	static int raw_init(void);
130:	static long raw_ioctl(struct file *, unsigned int, unsigned long);
56:	static int raw_open(struct inode *, struct file *);
110:	static int raw_release(struct inode *, struct file *);

File drivers/char/tpm/eventlog/acpi.c:
66:	int tpm_read_log_acpi(struct tpm_chip *);

File drivers/char/tpm/eventlog/common.c:
103:	void tpm_bios_log_setup(struct tpm_chip *);
169:	void tpm_bios_log_teardown(struct tpm_chip *);
25:	static int tpm_bios_measurements_open(struct inode *, struct file *);
55:	static int tpm_bios_measurements_release(struct inode *, struct file *);

File drivers/char/tpm/eventlog/efi.c:
16:	int tpm_read_log_efi(struct tpm_chip *);

File drivers/char/tpm/eventlog/tpm1.c:
143:	static int get_event_name(char *, struct tcpa_event *, unsigned char *);
251:	static int tpm1_ascii_bios_measurements_show(struct seq_file *, void *);
222:	static int tpm1_binary_bios_measurements_show(struct seq_file *, void *);
108:	static void *tpm1_bios_measurements_next(struct seq_file *, void *, loff_t *);
70:	static void *tpm1_bios_measurements_start(struct seq_file *, loff_t *);
139:	static void tpm1_bios_measurements_stop(struct seq_file *, void *);

File drivers/char/tpm/eventlog/tpm2.c:
36:	static size_t calc_tpm2_event_size(struct tcg_pcr_event2_head *, struct tcg_pcr_event *);
128:	static int tpm2_binary_bios_measurements_show(struct seq_file *, void *);
85:	static void *tpm2_bios_measurements_next(struct seq_file *, void *, loff_t *);
42:	static void *tpm2_bios_measurements_start(struct seq_file *, loff_t *);
124:	static void tpm2_bios_measurements_stop(struct seq_file *, void *);

File drivers/char/tpm/tpm-chip.c:
321:	struct tpm_chip *tpm_chip_alloc(struct device *, const struct tpm_class_ops *);
574:	int tpm_chip_register(struct tpm_chip *);
100:	int tpm_chip_start(struct tpm_chip *);
133:	void tpm_chip_stop(struct tpm_chip *);
637:	void tpm_chip_unregister(struct tpm_chip *);
196:	struct tpm_chip *tpm_default_chip(void);
235:	struct tpm_chip *tpm_find_get_ops(struct tpm_chip *);
184:	void tpm_put_ops(struct tpm_chip *);
152:	int tpm_try_get_ops(struct tpm_chip *);
412:	struct tpm_chip *tpmm_chip_alloc(struct device *, const struct tpm_class_ops *);
434:	static int tpm_add_char_device(struct tpm_chip *);
294:	static int tpm_class_shutdown(struct device *);
262:	static void tpm_dev_release(struct device *);
277:	static void tpm_devs_release(struct device *);
530:	static int tpm_hwrng_read(struct hwrng *, void *, size_t, bool);
50:	static void tpm_relinquish_locality(struct tpm_chip *);

File drivers/char/tpm/tpm-dev-common.c:
105:	void tpm_common_open(struct file *, struct tpm_chip *, struct file_priv *, struct tpm_space *);
232:	__poll_t tpm_common_poll(struct file *, poll_table *);
120:	ssize_t tpm_common_read(struct file *, char *, size_t, loff_t *);
257:	void tpm_common_release(struct file *, struct file_priv *);
160:	ssize_t tpm_common_write(struct file *, const char *, size_t, loff_t *);
273:	void tpm_dev_common_exit(void);
266:	int tpm_dev_common_init(void);
56:	static void tpm_dev_async_work(struct work_struct *);
25:	static ssize_t tpm_dev_transmit(struct tpm_chip *, struct tpm_space *, u8 *, size_t);
92:	static void tpm_timeout_work(struct work_struct *);
82:	static void user_reader_timeout(struct timer_list *);

File drivers/char/tpm/tpm-dev.c:
18:	static int tpm_open(struct inode *, struct file *);
49:	static int tpm_release(struct inode *, struct file *);

File drivers/char/tpm/tpm-interface.c:
370:	int tpm_auto_startup(struct tpm_chip *);
52:	unsigned long tpm_calc_ordinal_duration(struct tpm_chip *, u32);
441:	int tpm_get_random(struct tpm_chip *, u8 *, size_t);
239:	int tpm_get_timeouts(struct tpm_chip *);
260:	int tpm_is_tpm2(struct tpm_chip *);
314:	int tpm_pcr_extend(struct tpm_chip *, u32, struct tpm_digest *);
284:	int tpm_pcr_read(struct tpm_chip *, u32, struct tpm_digest *);
422:	int tpm_pm_resume(struct device *);
389:	int tpm_pm_suspend(struct device *);
353:	int tpm_send(struct tpm_chip *, void *, size_t);
153:	ssize_t tpm_transmit(struct tpm_chip *, u8 *, size_t);
213:	ssize_t tpm_transmit_cmd(struct tpm_chip *, struct tpm_buf *, size_t, const char *);
503:	static void tpm_exit(void);
462:	static int tpm_init(void);
61:	static ssize_t tpm_try_transmit(struct tpm_chip *, void *, size_t);

File drivers/char/tpm/tpm-sysfs.c:
340:	void tpm_sysfs_add_device(struct tpm_chip *);
139:	static ssize_t active_show(struct device *, struct device_attribute *, char *);
256:	static ssize_t cancel_store(struct device *, struct device_attribute *, const char *, size_t);
205:	static ssize_t caps_show(struct device *, char *, struct device_attribute *);
270:	static ssize_t durations_show(struct device *, struct device_attribute *, char *);
117:	static ssize_t enabled_show(struct device *, struct device_attribute *, char *);
161:	static ssize_t owned_show(struct device *, struct device_attribute *, char *);
82:	static ssize_t pcrs_show(struct device *, char *, struct device_attribute *);
32:	static ssize_t pubek_show(struct device *, struct device_attribute *, char *);
183:	static ssize_t temp_deactivated_show(struct device *, struct device_attribute *, char *);
287:	static ssize_t timeouts_show(struct device *, struct device_attribute *, char *);
302:	static ssize_t tpm_version_major_show(struct device *, struct device_attribute *, char *);

File drivers/char/tpm/tpm1-cmd.c:
704:	int tpm1_auto_startup(struct tpm_chip *);
291:	unsigned long tpm1_calc_ordinal_duration(struct tpm_chip *, u32);
642:	int tpm1_do_selftest(struct tpm_chip *);
795:	int tpm1_get_pcr_allocation(struct tpm_chip *);
530:	int tpm1_get_random(struct tpm_chip *, u8 *, size_t);
342:	int tpm1_get_timeouts(struct tpm_chip *);
482:	ssize_t tpm1_getcap(struct tpm_chip *, u32, cap_t *, const char *, size_t);
463:	int tpm1_pcr_extend(struct tpm_chip *, u32, const u8 *, const char *);
584:	int tpm1_pcr_read(struct tpm_chip *, u32, u8 *);
737:	int tpm1_pm_suspend(struct tpm_chip *, u32);
324:	static int tpm1_startup(struct tpm_chip *);

File drivers/char/tpm/tpm2-cmd.c:
723:	int tpm2_auto_startup(struct tpm_chip *);
128:	unsigned long tpm2_calc_ordinal_duration(struct tpm_chip *, u32);
753:	int tpm2_find_cc(struct tpm_chip *, u32);
348:	void tpm2_flush_context(struct tpm_chip *, u32);
618:	int tpm2_get_cc_attrs_tbl(struct tpm_chip *);
539:	ssize_t tpm2_get_pcr_allocation(struct tpm_chip *);
288:	int tpm2_get_random(struct tpm_chip *, u8 *, size_t);
25:	int tpm2_get_timeouts(struct tpm_chip *);
386:	ssize_t tpm2_get_tpm_pt(struct tpm_chip *, u32, u32 *, const char *);
235:	int tpm2_pcr_extend(struct tpm_chip *, u32, struct tpm_digest *);
161:	int tpm2_pcr_read(struct tpm_chip *, u32, struct tpm_digest *, u16 *);
483:	int tpm2_probe(struct tpm_chip *);
420:	void tpm2_shutdown(struct tpm_chip *, u16);
446:	static int tpm2_do_selftest(struct tpm_chip *);
698:	static int tpm2_startup(struct tpm_chip *);

File drivers/char/tpm/tpm2-space.c:
534:	int tpm2_commit_space(struct tpm_chip *, struct tpm_space *, void *, size_t *);
59:	void tpm2_del_space(struct tpm_chip *, struct tpm_space *);
164:	void tpm2_flush_space(struct tpm_chip *);
41:	int tpm2_init_space(struct tpm_space *, unsigned int);
300:	int tpm2_prepare_space(struct tpm_chip *, struct tpm_space *, u8 *, size_t);
71:	static int tpm2_load_context(struct tpm_chip *, u8 *, unsigned int *, u32 *);
176:	static int tpm2_load_space(struct tpm_chip *);
374:	static int tpm2_map_response_header(struct tpm_chip *, u32, u8 *, size_t);
122:	static int tpm2_save_context(struct tpm_chip *, u32, u8 *, unsigned int, unsigned int *);
491:	static int tpm2_save_space(struct tpm_chip *);

File drivers/char/tpm/tpm_crb.c:
146:	static int __crb_go_idle(struct device *, struct crb_priv *);
659:	static int crb_acpi_add(struct acpi_device *);
748:	static void crb_acpi_driver_exit(void);
748:	static int crb_acpi_driver_init(void);
716:	static int crb_acpi_remove(struct acpi_device *);
400:	static void crb_cancel(struct tpm_chip *);
435:	static int crb_check_resource(struct acpi_resource *, void *);
208:	static int crb_cmd_ready(struct tpm_chip *);
166:	static int crb_go_idle(struct tpm_chip *);
502:	static int crb_map_io(struct acpi_device *, struct crb_priv *, struct acpi_table_tpm2 *);
456:	static void *crb_map_res(struct device *, struct resource *, void **, u64, u32);
281:	static int crb_recv(struct tpm_chip *, u8 *, size_t);
262:	static int crb_relinquish_locality(struct tpm_chip *, int);
412:	static bool crb_req_canceled(struct tpm_chip *, u8);
235:	static int crb_request_locality(struct tpm_chip *, int);
358:	static int crb_send(struct tpm_chip *, u8 *, size_t);
269:	static u8 crb_status(struct tpm_chip *);
111:	static bool crb_wait_for_reg_32(u32 *, u32, u32, unsigned long);

File drivers/char/tpm/tpm_ppi.c:
366:	void tpm_add_ppi(struct tpm_chip *);
282:	static ssize_t show_ppi_operations(acpi_handle, char *, u32, u32);
58:	static ssize_t tpm_show_ppi_request(struct device *, struct device_attribute *, char *);
221:	static ssize_t tpm_show_ppi_response(struct device *, struct device_attribute *, char *);
324:	static ssize_t tpm_show_ppi_tcg_operations(struct device *, struct device_attribute *, char *);
175:	static ssize_t tpm_show_ppi_transition_action(struct device *, struct device_attribute *, char *);
50:	static ssize_t tpm_show_ppi_version(struct device *, struct device_attribute *, char *);
334:	static ssize_t tpm_show_ppi_vs_operations(struct device *, struct device_attribute *, char *);
112:	static ssize_t tpm_store_ppi_request(struct device *, struct device_attribute *, const char *, size_t);

File drivers/char/tpm/tpm_tis.c:
123:	static int check_acpi_tpm2(struct device *);
419:	static void cleanup_tis(void);
389:	static int init_tis(void);
177:	static int tpm_tcg_read16(struct tpm_tis_data *, u32, u16 *);
186:	static int tpm_tcg_read32(struct tpm_tis_data *, u32, u32 *);
155:	static int tpm_tcg_read_bytes(struct tpm_tis_data *, u32, u16, u8 *);
195:	static int tpm_tcg_write32(struct tpm_tis_data *, u32, u32);
166:	static int tpm_tcg_write_bytes(struct tpm_tis_data *, u32, u16, const u8 *);
67:	static int tpm_tis_disable_irq(const struct dmi_system_id *);
212:	static int tpm_tis_init(struct device *, struct tpm_info *);
309:	static int tpm_tis_plat_probe(struct platform_device *);
333:	static int tpm_tis_plat_remove(struct platform_device *);
244:	static int tpm_tis_pnp_init(struct pnp_dev *, const struct pnp_device_id *);
284:	static void tpm_tis_pnp_remove(struct pnp_dev *);

File drivers/char/tpm/tpm_tis_core.c:
922:	int tpm_tis_core_init(struct device *, struct tpm_tis_data *, int, const struct tpm_tis_phy_ops *, acpi_handle);
832:	void tpm_tis_remove(struct tpm_chip *);
1137:	int tpm_tis_resume(struct device *);
119:	static bool check_locality(struct tpm_chip *, int);
409:	static void disable_interrupts(struct tpm_chip *);
232:	static int get_burstcount(struct tpm_chip *);
619:	static int probe_itpm(struct tpm_chip *);
257:	static int recv_data(struct tpm_chip *, u8 *, size_t);
139:	static int release_locality(struct tpm_chip *, int);
148:	static int request_locality(struct tpm_chip *, int);
682:	static irqreturn_t tis_int_handler(int, void *);
863:	static void tpm_tis_clkrun_enable(struct tpm_chip *, bool);
810:	static void tpm_tis_probe_irq(struct tpm_chip *, u32);
742:	static int tpm_tis_probe_irq_single(struct tpm_chip *, u32, int, int);
224:	static void tpm_tis_ready(struct tpm_chip *);
286:	static int tpm_tis_recv(struct tpm_chip *, u8 *, size_t);
1104:	static void tpm_tis_reenable_interrupts(struct tpm_chip *);
667:	static bool tpm_tis_req_canceled(struct tpm_chip *, u8);
468:	static int tpm_tis_send(struct tpm_chip *, u8 *, size_t);
341:	static int tpm_tis_send_data(struct tpm_chip *, const u8 *, size_t);
435:	static int tpm_tis_send_main(struct tpm_chip *, const u8 *, size_t);
189:	static u8 tpm_tis_status(struct tpm_chip *);
504:	static void tpm_tis_update_durations(struct tpm_chip *, unsigned long *);
580:	static void tpm_tis_update_timeouts(struct tpm_chip *, unsigned long *);
47:	static int wait_for_tpm_stat(struct tpm_chip *, u8, unsigned long, wait_queue_head_t *, bool);
32:	static bool wait_for_tpm_stat_cond(struct tpm_chip *, u8, bool, bool *);

File drivers/char/tpm/tpmrm-dev.c:
13:	static int tpmrm_open(struct inode *, struct file *);
35:	static int tpmrm_release(struct inode *, struct file *);

File drivers/clk/clk-bulk.c:
211:	void clk_bulk_disable(int, const struct clk_bulk_data *);
227:	int clk_bulk_enable(int, const struct clk_bulk_data *);
114:	int clk_bulk_get(struct device *, int, struct clk_bulk_data *);
139:	int clk_bulk_get_all(struct device *, struct clk_bulk_data **);
121:	int clk_bulk_get_optional(struct device *, int, struct clk_bulk_data *);
176:	int clk_bulk_prepare(int, const struct clk_bulk_data *);
72:	void clk_bulk_put(int, struct clk_bulk_data *);
128:	void clk_bulk_put_all(int, struct clk_bulk_data *);
161:	void clk_bulk_unprepare(int, const struct clk_bulk_data *);
81:	static int __clk_bulk_get(struct device *, int, struct clk_bulk_data *, bool);

File drivers/clk/clk-composite.c:
319:	struct clk_hw *clk_hw_register_composite(struct device *, const char *, const char * const *, int, struct clk_hw *, const struct clk_ops *, struct clk_hw *, const struct clk_ops *, struct clk_hw *, const struct clk_ops *, unsigned long);
333:	struct clk_hw *clk_hw_register_composite_pdata(struct device *, const char *, const struct clk_parent_data *, int, struct clk_hw *, const struct clk_ops *, struct clk_hw *, const struct clk_ops *, struct clk_hw *, const struct clk_ops *, unsigned long);
398:	void clk_hw_unregister_composite(struct clk_hw *);
348:	struct clk *clk_register_composite(struct device *, const char *, const char * const *, int, struct clk_hw *, const struct clk_ops *, struct clk_hw *, const struct clk_ops *, struct clk_hw *, const struct clk_ops *, unsigned long);
365:	struct clk *clk_register_composite_pdata(struct device *, const char *, const struct clk_parent_data *, int, struct clk_hw *, const struct clk_ops *, struct clk_hw *, const struct clk_ops *, struct clk_hw *, const struct clk_ops *, unsigned long);
383:	void clk_unregister_composite(struct clk *);
202:	static struct clk_hw *__clk_hw_register_composite(struct device *, const char *, const char * const *, const struct clk_parent_data *, int, struct clk_hw *, const struct clk_ops *, struct clk_hw *, const struct clk_ops *, struct clk_hw *, const struct clk_ops *, unsigned long);
44:	static int clk_composite_determine_rate(struct clk_hw *, struct clk_rate_request *);
191:	static void clk_composite_disable(struct clk_hw *);
180:	static int clk_composite_enable(struct clk_hw *);
10:	static u8 clk_composite_get_parent(struct clk_hw *);
169:	static int clk_composite_is_enabled(struct clk_hw *);
32:	static unsigned long clk_composite_recalc_rate(struct clk_hw *, unsigned long);
118:	static long clk_composite_round_rate(struct clk_hw *, unsigned long, unsigned long *);
21:	static int clk_composite_set_parent(struct clk_hw *, u8);
130:	static int clk_composite_set_rate(struct clk_hw *, unsigned long, unsigned long);
142:	static int clk_composite_set_rate_and_parent(struct clk_hw *, unsigned long, unsigned long, u8);

File drivers/clk/clk-devres.c:
81:	int devm_clk_bulk_get(struct device *, int, struct clk_bulk_data *);
102:	int devm_clk_bulk_get_all(struct device *, struct clk_bulk_data **);
88:	int devm_clk_bulk_get_optional(struct device *, int, struct clk_bulk_data *);
12:	struct clk *devm_clk_get(struct device *, const char *);
32:	struct clk *devm_clk_get_optional(struct device *, const char *);
136:	void devm_clk_put(struct device *, struct clk *);
146:	struct clk *devm_get_clk_from_child(struct device *, struct device_node *, const char *);
55:	static int __devm_clk_bulk_get(struct device *, int, struct clk_bulk_data *, bool);
48:	static void devm_clk_bulk_release(struct device *, void *);
95:	static void devm_clk_bulk_release_all(struct device *, void *);
126:	static int devm_clk_match(struct device *, void *, void *);
7:	static void devm_clk_release(struct device *, void *);

File drivers/clk/clk-divider.c:
466:	struct clk_hw *__clk_hw_register_divider(struct device *, struct device_node *, const char *, const char *, const struct clk_hw *, const struct clk_parent_data *, unsigned long, void *, u8, u8, u8, const struct clk_div_table *, spinlock_t *);
576:	void clk_hw_unregister_divider(struct clk_hw *);
539:	struct clk *clk_register_divider_table(struct device *, const char *, const char *, unsigned long, void *, u8, u8, u8, const struct clk_div_table *, spinlock_t *);
556:	void clk_unregister_divider(struct clk *);
401:	int divider_get_val(unsigned long, unsigned long, const struct clk_div_table *, u8, unsigned long);
129:	unsigned long divider_recalc_rate(struct clk_hw *, unsigned long, unsigned int, const struct clk_div_table *, unsigned long, unsigned long);
358:	long divider_ro_round_rate_parent(struct clk_hw *, struct clk_hw *, unsigned long, unsigned long *, const struct clk_div_table *, u8, unsigned long, unsigned int);
345:	long divider_round_rate_parent(struct clk_hw *, struct clk_hw *, unsigned long, unsigned long *, const struct clk_div_table *, u8, unsigned long);
90:	static unsigned int _get_div(const struct clk_div_table *, unsigned int, unsigned long, u8);
67:	static unsigned int _get_maxdiv(const struct clk_div_table *, u8, unsigned long);
288:	static int clk_divider_bestdiv(struct clk_hw *, struct clk_hw *, unsigned long, unsigned long *, const struct clk_div_table *, u8, unsigned long);
148:	static unsigned long clk_divider_recalc_rate(struct clk_hw *, unsigned long);
380:	static long clk_divider_round_rate(struct clk_hw *, unsigned long, unsigned long *);
418:	static int clk_divider_set_rate(struct clk_hw *, unsigned long, unsigned long);

File drivers/clk/clk-fixed-factor.c:
109:	struct clk_hw *clk_hw_register_fixed_factor(struct device *, const char *, const char *, unsigned long, unsigned int, unsigned int);
145:	void clk_hw_unregister_fixed_factor(struct clk_hw *);
118:	struct clk *clk_register_fixed_factor(struct device *, const char *, const char *, unsigned long, unsigned int, unsigned int);
132:	void clk_unregister_fixed_factor(struct clk *);
68:	static struct clk_hw *__clk_hw_register_fixed_factor(struct device *, const char *, const char *, unsigned long, unsigned int, unsigned int, int, struct device_node *);
22:	static unsigned long clk_factor_recalc_rate(struct clk_hw *, unsigned long);
33:	static long clk_factor_round_rate(struct clk_hw *, unsigned long, unsigned long *);
48:	static int clk_factor_set_rate(struct clk_hw *, unsigned long, unsigned long);

File drivers/clk/clk-fixed-rate.c:
52:	struct clk_hw *__clk_hw_register_fixed_rate(struct device *, struct device_node *, const char *, const char *, const struct clk_hw *, const struct clk_parent_data *, unsigned long, unsigned long, unsigned long, unsigned long);
128:	void clk_hw_unregister_fixed_rate(struct clk_hw *);
101:	struct clk *clk_register_fixed_rate(struct device *, const char *, const char *, unsigned long, unsigned long);
115:	void clk_unregister_fixed_rate(struct clk *);
35:	static unsigned long clk_fixed_rate_recalc_accuracy(struct clk_hw *, unsigned long);
29:	static unsigned long clk_fixed_rate_recalc_rate(struct clk_hw *, unsigned long);

File drivers/clk/clk-fractional-divider.c:
155:	struct clk_hw *clk_hw_register_fractional_divider(struct device *, const char *, const char *, unsigned long, void *, u8, u8, u8, u8, u8, spinlock_t *);
213:	void clk_hw_unregister_fractional_divider(struct clk_hw *);
197:	struct clk *clk_register_fractional_divider(struct device *, const char *, const char *, unsigned long, void *, u8, u8, u8, u8, u8, spinlock_t *);
33:	static unsigned long clk_fd_recalc_rate(struct clk_hw *, unsigned long);
92:	static long clk_fd_round_rate(struct clk_hw *, unsigned long, unsigned long *);
113:	static int clk_fd_set_rate(struct clk_hw *, unsigned long, unsigned long);

File drivers/clk/clk-gate.c:
126:	struct clk_hw *__clk_hw_register_gate(struct device *, struct device_node *, const char *, const char *, const struct clk_hw *, const struct clk_parent_data *, unsigned long, void *, u8, u8, spinlock_t *);
102:	int clk_gate_is_enabled(struct clk_hw *);
215:	void clk_hw_unregister_gate(struct clk_hw *);
184:	struct clk *clk_register_gate(struct device *, const char *, const char *, unsigned long, void *, u8, u8, spinlock_t *);
199:	void clk_unregister_gate(struct clk *);
97:	static void clk_gate_disable(struct clk_hw *);
90:	static int clk_gate_enable(struct clk_hw *);
55:	static void clk_gate_endisable(struct clk_hw *, int);

File drivers/clk/clk-gpio.c:
60:	static void clk_gpio_gate_disable(struct clk_hw *);
51:	static int clk_gpio_gate_enable(struct clk_hw *);
67:	static int clk_gpio_gate_is_enabled(struct clk_hw *);
139:	static struct clk_hw *clk_register_gpio(struct device *, struct gpio_desc *, const struct clk_ops *, u8);
96:	static int clk_sleeping_gpio_gate_is_prepared(struct clk_hw *);
80:	static int clk_sleeping_gpio_gate_prepare(struct clk_hw *);
89:	static void clk_sleeping_gpio_gate_unprepare(struct clk_hw *);
249:	static int gpio_clk_driver_init(void);
193:	static int gpio_clk_driver_probe(struct platform_device *);

File drivers/clk/clk-multiplier.c:
41:	static unsigned long clk_multiplier_recalc_rate(struct clk_hw *, unsigned long);
115:	static long clk_multiplier_round_rate(struct clk_hw *, unsigned long, unsigned long *);
125:	static int clk_multiplier_set_rate(struct clk_hw *, unsigned long, unsigned long);

File drivers/clk/clk-mux.c:
148:	struct clk_hw *__clk_hw_register_mux(struct device *, struct device_node *, const char *, u8, const char * const *, const struct clk_hw **, const struct clk_parent_data *, unsigned long, void *, u8, u32, u8, u32 *, spinlock_t *);
241:	void clk_hw_unregister_mux(struct clk_hw *);
69:	unsigned int clk_mux_index_to_val(u32 *, unsigned int, u8);
42:	int clk_mux_val_to_index(struct clk_hw *, u32 *, unsigned int, unsigned int);
209:	struct clk *clk_register_mux_table(struct device *, const char *, const char * const *, u8, unsigned long, void *, u8, u32, u8, u32 *, spinlock_t *);
225:	void clk_unregister_mux(struct clk *);
128:	static int clk_mux_determine_rate(struct clk_hw *, struct clk_rate_request *);
87:	static u8 clk_mux_get_parent(struct clk_hw *);
98:	static int clk_mux_set_parent(struct clk_hw *, u8);

File drivers/clk/clk.c:
1386:	int __clk_determine_rate(struct clk_hw *, struct clk_rate_request *);
468:	unsigned int __clk_get_enable_count(struct clk *);
276:	struct clk_hw *__clk_get_hw(struct clk *);
264:	const char *__clk_get_name(const struct clk *);
527:	bool __clk_is_enabled(struct clk *);
609:	struct clk *__clk_lookup(const char *);
653:	int __clk_mux_determine_rate(struct clk_hw *, struct clk_rate_request *);
660:	int __clk_mux_determine_rate_closest(struct clk_hw *, struct clk_rate_request *);
4203:	void __clk_put(struct clk *);
993:	void clk_disable(struct clk *);
1158:	int clk_enable(struct clk *);
1060:	void clk_gate_restore_context(struct clk_hw *);
1550:	long clk_get_accuracy(struct clk *);
2410:	struct clk *clk_get_parent(struct clk *);
2694:	int clk_get_phase(struct clk *);
1631:	unsigned long clk_get_rate(struct clk *);
2866:	int clk_get_scaled_duty_cycle(struct clk *, unsigned int);
2462:	bool clk_has_parent(struct clk *, struct clk *);
3653:	struct clk *clk_hw_create_clk(struct device *, struct clk_hw *, const char *, const char *);
503:	unsigned long clk_hw_get_flags(const struct clk_hw *);
270:	const char *clk_hw_get_name(const struct clk_hw *);
282:	unsigned int clk_hw_get_num_parents(const struct clk_hw *);
288:	struct clk_hw *clk_hw_get_parent(const struct clk_hw *);
458:	struct clk_hw *clk_hw_get_parent_by_index(const struct clk_hw *, unsigned int);
1696:	int clk_hw_get_parent_index(struct clk_hw *);
489:	unsigned long clk_hw_get_rate(const struct clk_hw *);
521:	bool clk_hw_is_enabled(const struct clk_hw *);
509:	bool clk_hw_is_prepared(const struct clk_hw *);
515:	bool clk_hw_rate_is_protected(const struct clk_hw *);
3909:	int clk_hw_register(struct device *, struct clk_hw *);
2444:	void clk_hw_reparent(struct clk_hw *, struct clk_hw *);
1412:	unsigned long clk_hw_round_rate(struct clk_hw *, unsigned long);
2551:	int clk_hw_set_parent(struct clk_hw *, struct clk_hw *);
634:	void clk_hw_set_rate_range(struct clk_hw *, unsigned long, unsigned long);
4074:	void clk_hw_unregister(struct clk_hw *);
2886:	bool clk_is_match(const struct clk *, const struct clk *);
545:	int clk_mux_determine_rate_flags(struct clk_hw *, struct clk_rate_request *, unsigned long);
4261:	int clk_notifier_register(struct clk *, struct notifier_block *);
4309:	int clk_notifier_unregister(struct clk *, struct notifier_block *);
936:	int clk_prepare(struct clk *);
789:	int clk_rate_exclusive_get(struct clk *);
723:	void clk_rate_exclusive_put(struct clk *);
3893:	struct clk *clk_register(struct device *, struct clk_hw *);
1133:	void clk_restore_context(void);
1437:	long clk_round_rate(struct clk *, unsigned long);
1106:	int clk_save_context(void);
2810:	int clk_set_duty_cycle(struct clk *, unsigned int, unsigned int);
2395:	int clk_set_max_rate(struct clk *, unsigned long);
2379:	int clk_set_min_rate(struct clk *, unsigned long);
2574:	int clk_set_parent(struct clk *, struct clk *);
2643:	int clk_set_phase(struct clk *, int);
2230:	int clk_set_rate(struct clk *, unsigned long);
2273:	int clk_set_rate_exclusive(struct clk *, unsigned long);
2309:	int clk_set_rate_range(struct clk *, unsigned long, unsigned long);
855:	void clk_unprepare(struct clk *);
4012:	void clk_unregister(struct clk *);
4130:	int devm_clk_hw_register(struct device *, struct clk_hw *);
4192:	void devm_clk_hw_unregister(struct device *, struct clk_hw *);
4100:	struct clk *devm_clk_register(struct device *, struct clk_hw *);
4177:	void devm_clk_unregister(struct device *, struct clk *);
3927:	int of_clk_hw_register(struct device_node *, struct clk_hw *);
3380:	static int __clk_core_init(struct clk_core *);
294:	static struct clk_core *__clk_lookup_subtree(const char *, struct clk_core *, struct clk_core *);
1481:	static int __clk_notify(struct clk_core *, unsigned long, unsigned long, unsigned long);
1513:	static void __clk_recalc_accuracies(struct clk_core *);
1589:	static void __clk_recalc_rates(struct clk_core *, unsigned long);
3775:	static struct clk *__clk_register(struct device *, struct device_node *, struct clk_hw *);
1812:	static int __clk_set_parent(struct clk_core *, struct clk_core *, u8);
1792:	static void __clk_set_parent_after(struct clk_core *, struct clk_core *, struct clk_core *);
1746:	static struct clk_core *__clk_set_parent_before(struct clk_core *, struct clk_core *);
1857:	static int __clk_speculate_rates(struct clk_core *, unsigned long);
1911:	static struct clk_core *clk_calc_new_rates(struct clk_core *, unsigned long);
1888:	static void clk_calc_subtree(struct clk_core *, unsigned long, struct clk_core *, u8);
2036:	static void clk_change_rate(struct clk_core *);
1301:	static int clk_core_determine_round_nolock(struct clk_core *, struct clk_rate_request *);
945:	static void clk_core_disable(struct clk_core *);
972:	static void clk_core_disable_lock(struct clk_core *);
1002:	static int clk_core_enable(struct clk_core *);
3980:	static void clk_core_evict_parent_cache_subtree(struct clk_core *, struct clk_core *);
3759:	static void clk_core_free_parent_map(struct clk_core *);
392:	static struct clk_core *clk_core_get(u8, struct clk_core *, struct clk_core *);
616:	static void clk_core_get_boundaries(struct clk_core *, unsigned long *, unsigned long *);
445:	static struct clk_core *clk_core_get_parent_by_index(struct clk_core *, u8);
1335:	static void clk_core_init_rate_req(struct clk_core * const, struct clk_rate_request *);
225:	static bool clk_core_is_enabled(struct clk_core *);
312:	static struct clk_core *clk_core_lookup(const char *);
3697:	static int clk_core_populate_parent_map(struct clk_core *, const struct clk_init_data *);
864:	static int clk_core_prepare(struct clk_core *);
1167:	static int clk_core_prepare_enable(struct clk_core *);
744:	static void clk_core_rate_protect(struct clk_core *);
669:	static void clk_core_rate_unprotect(struct clk_core *);
3345:	static void clk_core_reparent_orphans_nolock(void);
1088:	static void clk_core_restore_context(struct clk_core *);
1358:	static int clk_core_round_rate_nolock(struct clk_core *, struct clk_rate_request *);
1071:	static int clk_core_save_context(struct clk_core *);
2761:	static int clk_core_set_duty_cycle_nolock(struct clk_core *, struct clk_duty *);
2486:	static int clk_core_set_parent_nolock(struct clk_core *, struct clk_core *);
2598:	static int clk_core_set_phase_nolock(struct clk_core *, int);
2160:	static int clk_core_set_rate_nolock(struct clk_core *, unsigned long);
803:	static void clk_core_unprepare(struct clk_core *);
837:	static void clk_core_unprepare_lock(struct clk_core *);
2718:	static int clk_core_update_duty_cycle_nolock(struct clk_core *);
1710:	static void clk_core_update_orphan_status(struct clk_core *, bool);
3230:	static void clk_debug_create_one(struct clk_core *, struct dentry *);
3313:	static int clk_debug_init(void);
1272:	static int clk_disable_unused(void);
1218:	static void clk_disable_unused_subtree(struct clk_core *);
2969:	static void clk_dump_one(struct seq_file *, struct clk_core *, int);
3029:	static int clk_dump_open(struct inode *, struct file *);
3006:	static int clk_dump_show(struct seq_file *, void *);
2992:	static void clk_dump_subtree(struct seq_file *, struct clk_core *, int);
3200:	static int clk_duty_cycle_open(struct inode *, struct file *);
3191:	static int clk_duty_cycle_show(struct seq_file *, void *);
159:	static unsigned long clk_enable_lock(void);
187:	static void clk_enable_unlock(unsigned long);
1646:	static int clk_fetch_parent_index(struct clk_core *, struct clk_core *);
3130:	static int clk_flags_open(struct inode *, struct file *);
3111:	static int clk_flags_show(struct seq_file *, void *);
1265:	static int clk_ignore_unused_setup(char *);
3228:	static int clk_max_rate_open(struct inode *, struct file *);
3216:	static int clk_max_rate_show(struct seq_file *, void *);
3214:	static int clk_min_rate_open(struct inode *, struct file *);
3202:	static int clk_min_rate_show(struct seq_file *, void *);
3955:	static void clk_nodrv_disable_unprepare(struct clk_hw *);
3950:	static int clk_nodrv_prepare_enable(struct clk_hw *);
3966:	static int clk_nodrv_set_parent(struct clk_hw *, u8);
3960:	static int clk_nodrv_set_rate(struct clk_hw *, unsigned long, unsigned long);
109:	static int clk_pm_runtime_get(struct clk_core *);
124:	static void clk_pm_runtime_put(struct clk_core *, struct clk_core *);
133:	static void clk_prepare_lock(void);
148:	static void clk_prepare_unlock(void);
1998:	static struct clk_core *clk_propagate_rate_change(struct clk_core *, unsigned long);
3089:	static int clk_rate_fops_open(struct inode *, struct file *);
3081:	static int clk_rate_get(void *, u64 *);
1565:	static unsigned long clk_recalc(struct clk_core *, unsigned long);
1720:	static void clk_reparent(struct clk_core *, struct clk_core *);
2967:	static int clk_summary_open(struct inode *, struct file *);
2948:	static int clk_summary_show(struct seq_file *, void *);
2916:	static void clk_summary_show_one(struct seq_file *, struct clk_core *, int);
2937:	static void clk_summary_show_subtree(struct seq_file *, struct clk_core *, int);
1188:	static void clk_unprepare_unused_subtree(struct clk_core *);
3189:	static int current_parent_open(struct inode *, struct file *);
3180:	static int current_parent_show(struct seq_file *, void *);
4159:	static int devm_clk_hw_match(struct device *, void *, void *);
4085:	static void devm_clk_hw_release(struct device *, void *);
4151:	static int devm_clk_match(struct device *, void *, void *);
4080:	static void devm_clk_release(struct device *, void *);
3132:	static void possible_parent_show(struct seq_file *, struct clk_core *, unsigned int, char);
3178:	static int possible_parents_open(struct inode *, struct file *);
3166:	static int possible_parents_show(struct seq_file *, void *);

File drivers/clk/clkdev.c:
267:	int clk_add_alias(const char *, const char *, const char *, struct device *);
72:	struct clk_hw *clk_find_hw(const char *, const char *);
100:	struct clk *clk_get(struct device *, const char *);
94:	struct clk *clk_get_sys(const char *, const char *);
368:	int clk_hw_register_clkdev(struct clk_hw *, const char *, const char *);
115:	void clk_put(struct clk *);
341:	int clk_register_clkdev(struct clk *, const char *, const char *);
128:	void clkdev_add(struct clk_lookup *);
136:	void clkdev_add_table(struct clk_lookup *, size_t);
194:	struct clk_lookup *clkdev_alloc(struct clk *, const char *, const char *, ...);
230:	struct clk_lookup *clkdev_create(struct clk *, const char *, const char *, ...);
287:	void clkdev_drop(struct clk_lookup *);
208:	struct clk_lookup *clkdev_hw_alloc(struct clk_hw *, const char *, const char *, ...);
253:	struct clk_lookup *clkdev_hw_create(struct clk_hw *, const char *, const char *, ...);
431:	int devm_clk_hw_register_clkdev(struct device *, struct clk_hw *, const char *, const char *);
399:	void devm_clk_release_clkdev(struct device *, const char *, const char *);
36:	static struct clk_lookup *clk_find(const char *, const char *);
382:	static int devm_clk_match_clkdev(struct device *, void *, void *);
377:	static void devm_clkdev_release(struct device *, void *);
157:	static struct clk_lookup *vclkdev_alloc(struct clk_hw *, const char *, const char *, struct __va_list_tag *);

File drivers/clk/x86/clk-fch.c:
101:	static int fch_clk_driver_init(void);
36:	static int fch_clk_probe(struct platform_device *);
78:	static int fch_clk_remove(struct platform_device *);

File drivers/clk/x86/clk-lpt.c:
44:	int lpt_clk_init(void);
16:	static int lpt_clk_probe(struct platform_device *);

File drivers/clk/x86/clk-pmc-atom.c:
134:	static void plt_clk_disable(struct clk_hw *);
390:	static int plt_clk_driver_init(void);
125:	static int plt_clk_enable(struct clk_hw *);
115:	static u8 plt_clk_get_parent(struct clk_hw *);
141:	static int plt_clk_is_enabled(struct clk_hw *);
315:	static int plt_clk_probe(struct platform_device *);
160:	static struct clk_plt *plt_clk_register(struct platform_device *, int, const struct pmc_clk_data *, const char **, int);
266:	static const char **plt_clk_register_parents(struct platform_device *, struct clk_plt_data *, const struct pmc_clk *);
370:	static int plt_clk_remove(struct platform_device *);
106:	static int plt_clk_set_parent(struct clk_hw *, u8);

File drivers/clocksource/acpi_pm.c:
40:	u32 acpi_pm_read_verified(void);
104:	static void acpi_pm_check_blacklist(struct pci_dev *);
120:	static void acpi_pm_check_graylist(struct pci_dev *);
76:	static int acpi_pm_good_setup(char *);
60:	static u64 acpi_pm_read(struct clocksource *);
83:	static u64 acpi_pm_read_slow(struct clocksource *);
175:	static int init_acpi_pm_clocksource(void);
226:	static int parse_pmtmr(char *);

File drivers/clocksource/hyperv_timer.c:
323:	struct ms_hyperv_tsc_page *hv_get_tsc_page(void);
453:	void hv_init_clocksource(void);
55:	void hv_stimer0_isr(void);
173:	int hv_stimer_alloc(void);
141:	int hv_stimer_cleanup(unsigned int);
259:	void hv_stimer_free(void);
278:	void hv_stimer_global_cleanup(void);
249:	void hv_stimer_legacy_cleanup(unsigned int);
226:	void hv_stimer_legacy_init(unsigned int, int);
64:	static int hv_ce_set_next_event(unsigned long, struct clock_event_device *);
85:	static int hv_ce_set_oneshot(struct clock_event_device *);
75:	static int hv_ce_shutdown(struct clock_event_device *);
373:	static int hv_cs_enable(struct clocksource *);
421:	static bool hv_init_tsc_clocksource(void);
115:	static int hv_stimer_init(unsigned int);
390:	static u64 read_hv_clock_msr(void);
402:	static u64 read_hv_clock_msr_cs(struct clocksource *);
329:	static u64 read_hv_clock_tsc(void);
339:	static u64 read_hv_clock_tsc_cs(struct clocksource *);
407:	static u64 read_hv_sched_clock_msr(void);
344:	static u64 read_hv_sched_clock_tsc(void);
361:	static void resume_hv_clock_tsc(struct clocksource *);
350:	static void suspend_hv_clock_tsc(struct clocksource *);

File drivers/clocksource/i8253.c:
181:	void clockevent_i8253_init(bool);
155:	static int pit_next_event(unsigned long, struct clock_event_device *);
129:	static int pit_set_oneshot(struct clock_event_device *);
137:	static int pit_set_periodic(struct clock_event_device *);
111:	static int pit_shutdown(struct clock_event_device *);

File drivers/connector/cn_proc.c:
217:	void proc_comm_connector(struct task_struct *);
242:	void proc_coredump_connector(struct task_struct *);
99:	void proc_exec_connector(struct task_struct *);
275:	void proc_exit_connector(struct task_struct *);
69:	void proc_fork_connector(struct task_struct *);
123:	void proc_id_connector(struct task_struct *, int);
185:	void proc_ptrace_connector(struct task_struct *, int);
161:	void proc_sid_connector(struct task_struct *);
392:	static int cn_proc_init(void);
346:	static void cn_proc_mcast_ctl(struct cn_msg *, struct netlink_skb_parms *);

File drivers/connector/cn_queue.c:
54:	int cn_cb_equal(struct cb_id *, struct cb_id *);
59:	int cn_queue_add_callback(struct cn_queue_dev *, const char *, struct cb_id *, void (*)(struct cn_msg *, struct netlink_skb_parms *));
112:	struct cn_queue_dev *cn_queue_alloc_dev(const char *, struct sock *);
93:	void cn_queue_del_callback(struct cn_queue_dev *, struct cb_id *);
130:	void cn_queue_free_dev(struct cn_queue_dev *);
45:	void cn_queue_release_callback(struct cn_callback_entry *);

File drivers/connector/connector.c:
196:	int cn_add_callback(struct cb_id *, const char *, void (*)(struct cn_msg *, struct netlink_skb_parms *));
217:	void cn_del_callback(struct cb_id *);
121:	int cn_netlink_send(struct cn_msg *, u32, u32, gfp_t);
61:	int cn_netlink_send_mult(struct cn_msg *, u16, u32, u32, gfp_t);
131:	static int cn_call_callback(struct sk_buff *);
271:	static void cn_fini(void);
246:	static int cn_init(void);
225:	static int cn_proc_show(struct seq_file *, void *);
170:	static void cn_rx_skb(struct sk_buff *);

File drivers/cpufreq/cpufreq.c:
2188:	int __cpufreq_driver_target(struct cpufreq_policy *, unsigned int, unsigned int);
697:	unsigned int arch_freq_get_on_cpu(int);
2683:	int cpufreq_boost_enabled(void);
2609:	int cpufreq_boost_trigger_state(int);
280:	struct cpufreq_policy *cpufreq_cpu_acquire(unsigned int);
218:	struct cpufreq_policy *cpufreq_cpu_get(unsigned int);
185:	struct cpufreq_policy *cpufreq_cpu_get_raw(unsigned int);
246:	void cpufreq_cpu_put(struct cpufreq_policy *);
256:	void cpufreq_cpu_release(struct cpufreq_policy *);
516:	void cpufreq_disable_fast_switch(struct cpufreq_policy *);
2079:	unsigned int cpufreq_driver_fast_switch(struct cpufreq_policy *, unsigned int);
539:	unsigned int cpufreq_driver_resolve_freq(struct cpufreq_policy *, unsigned int);
2229:	int cpufreq_driver_target(struct cpufreq_policy *, unsigned int, unsigned int);
1925:	bool cpufreq_driver_test_flags(u16);
2668:	int cpufreq_enable_boost_support(void);
492:	void cpufreq_enable_fast_switch(struct cpufreq_policy *);
2245:	struct cpufreq_governor *cpufreq_fallback_governor(void);
407:	void cpufreq_freq_transition_begin(struct cpufreq_policy *, struct cpufreq_freqs *);
441:	void cpufreq_freq_transition_end(struct cpufreq_policy *, struct cpufreq_freqs *, int);
193:	unsigned int cpufreq_generic_get(unsigned int);
170:	void cpufreq_generic_init(struct cpufreq_policy *, struct cpufreq_frequency_table *, unsigned int);
1820:	int cpufreq_generic_suspend(struct cpufreq_policy *);
1791:	unsigned int cpufreq_get(unsigned int);
1936:	const char *cpufreq_get_current_driver(void);
1951:	void *cpufreq_get_driver_data(void);
1763:	unsigned int cpufreq_get_hw_max_freq(unsigned int);
2421:	int cpufreq_get_policy(struct cpufreq_policy *, unsigned int);
561:	unsigned int cpufreq_policy_transition_delay_us(struct cpufreq_policy *);
1711:	unsigned int cpufreq_quick_get(unsigned int);
1743:	unsigned int cpufreq_quick_get_max(unsigned int);
2718:	int cpufreq_register_driver(struct cpufreq_driver *);
2358:	int cpufreq_register_governor(struct cpufreq_governor *);
1977:	int cpufreq_register_notifier(struct notifier_block *, unsigned int);
1884:	void cpufreq_resume(void);
839:	ssize_t cpufreq_show_cpus(const struct cpumask *, char *);
2309:	int cpufreq_start_governor(struct cpufreq_policy *);
2336:	void cpufreq_stop_governor(struct cpufreq_policy *);
65:	bool cpufreq_supports_freq_invariance(void);
1850:	void cpufreq_suspend(void);
2821:	int cpufreq_unregister_driver(struct cpufreq_driver *);
2381:	void cpufreq_unregister_governor(struct cpufreq_governor *);
2021:	int cpufreq_unregister_notifier(struct notifier_block *, unsigned int);
2577:	void cpufreq_update_limits(unsigned int);
2548:	void cpufreq_update_policy(unsigned int);
102:	void disable_cpufreq(void);
150:	u64 get_cpu_idle_time(unsigned int, u64 *, int);
116:	struct kobject *get_governor_parent_kobj(struct cpufreq_policy *);
108:	bool have_governor_per_policy(void);
1131:	void refresh_frequency_limits(struct cpufreq_policy *);
1777:	static unsigned int __cpufreq_get(struct cpufreq_policy *);
2131:	static int __target_index(struct cpufreq_policy *, int);
2106:	static int __target_intermediate(struct cpufreq_policy *, struct cpufreq_freqs *, int);
1007:	static void add_cpu_dev_symlink(struct cpufreq_policy *, unsigned int, struct device *);
1538:	static int cpufreq_add_dev(struct device *, struct subsys_interface *);
1028:	static int cpufreq_add_dev_interface(struct cpufreq_policy *);
1108:	static int cpufreq_add_policy_cpu(struct cpufreq_policy *, unsigned int);
2589:	static int cpufreq_boost_set_sw(struct cpufreq_policy *, int);
2848:	static int cpufreq_core_init(void);
2296:	static void cpufreq_exit_governor(struct cpufreq_policy *);
2250:	static int cpufreq_init_governor(struct cpufreq_policy *);
1060:	static int cpufreq_init_policy(struct cpufreq_policy *);
1161:	static int cpufreq_notifier_max(struct notifier_block *, unsigned long, void *);
1152:	static int cpufreq_notifier_min(struct notifier_block *, unsigned long, void *);
343:	static void cpufreq_notify_transition(struct cpufreq_policy *, struct cpufreq_freqs *, unsigned int);
1560:	static int cpufreq_offline(unsigned int);
1316:	static int cpufreq_online(unsigned int);
1192:	static struct cpufreq_policy *cpufreq_policy_alloc(unsigned int);
1275:	static void cpufreq_policy_free(struct cpufreq_policy *);
1170:	static void cpufreq_policy_put_kobj(struct cpufreq_policy *);
1633:	static void cpufreq_remove_dev(struct device *, struct subsys_interface *);
2453:	static int cpufreq_set_policy(struct cpufreq_policy *, struct cpufreq_governor *, unsigned int);
989:	static void cpufreq_sysfs_release(struct kobject *);
1680:	static unsigned int cpufreq_verify_current_freq(struct cpufreq_policy *, bool);
2701:	static int cpuhp_cpufreq_offline(unsigned int);
2694:	static int cpuhp_cpufreq_online(unsigned int);
629:	static struct cpufreq_governor *get_governor(const char *);
1141:	static void handle_update(struct work_struct *);
1021:	static void remove_cpu_dev_symlink(struct device *, struct cpufreq_policy *);
945:	static ssize_t show(struct kobject *, struct attribute *, char *);
868:	static ssize_t show_affected_cpus(struct cpufreq_policy *, char *);
902:	static ssize_t show_bios_limit(struct cpufreq_policy *, char *);
590:	static ssize_t show_boost(struct kobject *, struct kobj_attribute *, char *);
741:	static ssize_t show_cpuinfo_cur_freq(struct cpufreq_policy *, char *);
692:	static ssize_t show_cpuinfo_max_freq(struct cpufreq_policy *, char *);
691:	static ssize_t show_cpuinfo_min_freq(struct cpufreq_policy *, char *);
693:	static ssize_t show_cpuinfo_transition_latency(struct cpufreq_policy *, char *);
860:	static ssize_t show_related_cpus(struct cpufreq_policy *, char *);
815:	static ssize_t show_scaling_available_governors(struct cpufreq_policy *, char *);
702:	static ssize_t show_scaling_cur_freq(struct cpufreq_policy *, char *);
807:	static ssize_t show_scaling_driver(struct cpufreq_policy *, char *);
755:	static ssize_t show_scaling_governor(struct cpufreq_policy *, char *);
695:	static ssize_t show_scaling_max_freq(struct cpufreq_policy *, char *);
694:	static ssize_t show_scaling_min_freq(struct cpufreq_policy *, char *);
891:	static ssize_t show_scaling_setspeed(struct cpufreq_policy *, char *);
961:	static ssize_t store(struct kobject *, struct attribute *, const char *, size_t);
596:	static ssize_t store_boost(struct kobject *, struct kobj_attribute *, const char *, size_t);
770:	static ssize_t store_scaling_governor(struct cpufreq_policy *, const char *, size_t);
736:	static ssize_t store_scaling_max_freq(struct cpufreq_policy *, const char *, size_t);
735:	static ssize_t store_scaling_min_freq(struct cpufreq_policy *, const char *, size_t);
873:	static ssize_t store_scaling_setspeed(struct cpufreq_policy *, const char *, size_t);

File drivers/cpufreq/cpufreq_conservative.c:
341:	static void CPU_FREQ_GOV_CONSERVATIVE_exit(void);
340:	static int CPU_FREQ_GOV_CONSERVATIVE_init(void);
270:	static struct policy_dbs_info *cs_alloc(void);
58:	static unsigned int cs_dbs_update(struct cpufreq_policy *);
301:	static void cs_exit(struct dbs_data *);
278:	static void cs_free(struct policy_dbs_info *);
283:	static int cs_init(struct dbs_data *);
306:	static void cs_start(struct cpufreq_policy *);
248:	static ssize_t show_down_threshold(struct gov_attr_set *, char *);
249:	static ssize_t show_freq_step(struct gov_attr_set *, char *);
247:	static ssize_t show_ignore_nice_load(struct gov_attr_set *, char *);
245:	static ssize_t show_sampling_down_factor(struct gov_attr_set *, char *);
244:	static ssize_t show_sampling_rate(struct gov_attr_set *, char *);
246:	static ssize_t show_up_threshold(struct gov_attr_set *, char *);
178:	static ssize_t store_down_threshold(struct gov_attr_set *, const char *, size_t);
221:	static ssize_t store_freq_step(struct gov_attr_set *, const char *, size_t);
196:	static ssize_t store_ignore_nice_load(struct gov_attr_set *, const char *, size_t);
147:	static ssize_t store_sampling_down_factor(struct gov_attr_set *, const char *, size_t);
162:	static ssize_t store_up_threshold(struct gov_attr_set *, const char *, size_t);

File drivers/cpufreq/cpufreq_governor.c:
477:	void cpufreq_dbs_governor_exit(struct cpufreq_policy *);
391:	int cpufreq_dbs_governor_init(struct cpufreq_policy *);
555:	void cpufreq_dbs_governor_limits(struct cpufreq_policy *);
505:	int cpufreq_dbs_governor_start(struct cpufreq_policy *);
543:	void cpufreq_dbs_governor_stop(struct cpufreq_policy *);
114:	unsigned int dbs_update(struct cpufreq_policy *);
95:	void gov_update_cpu_data(struct dbs_data *);
44:	ssize_t store_sampling_rate(struct gov_attr_set *, const char *, size_t);
261:	static void dbs_irq_work(struct irq_work *);
269:	static void dbs_update_util_handler(struct update_util_data *, u64, unsigned int);
232:	static void dbs_work_handler(struct work_struct *);
375:	static void free_policy_dbs_info(struct policy_dbs_info *, struct dbs_governor *);

File drivers/cpufreq/cpufreq_governor_attr_set.c:
57:	void gov_attr_set_get(struct gov_attr_set *, struct list_head *);
48:	void gov_attr_set_init(struct gov_attr_set *, struct list_head *);
66:	unsigned int gov_attr_set_put(struct gov_attr_set *, struct list_head *);
21:	static ssize_t governor_show(struct kobject *, struct attribute *, char *);
29:	static ssize_t governor_store(struct kobject *, struct attribute *, const char *, size_t);

File drivers/cpufreq/cpufreq_ondemand.c:
448:	void od_register_powersave_bias_handler(unsigned int (*)(struct cpufreq_policy *, unsigned int, unsigned int), unsigned int);
457:	void od_unregister_powersave_bias_handler(void);
478:	static void CPU_FREQ_GOV_ONDEMAND_exit(void);
477:	static int CPU_FREQ_GOV_ONDEMAND_init(void);
61:	static unsigned int generic_powersave_bias_target(struct cpufreq_policy *, unsigned int, unsigned int);
341:	static struct policy_dbs_info *od_alloc(void);
170:	static unsigned int od_dbs_update(struct cpufreq_policy *);
383:	static void od_exit(struct dbs_data *);
349:	static void od_free(struct policy_dbs_info *);
354:	static int od_init(struct dbs_data *);
413:	static void od_set_powersave_bias(unsigned int);
388:	static void od_start(struct cpufreq_policy *);
134:	static void od_update(struct cpufreq_policy *);
318:	static ssize_t show_ignore_nice_load(struct gov_attr_set *, char *);
319:	static ssize_t show_io_is_busy(struct gov_attr_set *, char *);
320:	static ssize_t show_powersave_bias(struct gov_attr_set *, char *);
317:	static ssize_t show_sampling_down_factor(struct gov_attr_set *, char *);
315:	static ssize_t show_sampling_rate(struct gov_attr_set *, char *);
316:	static ssize_t show_up_threshold(struct gov_attr_set *, char *);
266:	static ssize_t store_ignore_nice_load(struct gov_attr_set *, const char *, size_t);
203:	static ssize_t store_io_is_busy(struct gov_attr_set *, const char *, size_t);
291:	static ssize_t store_powersave_bias(struct gov_attr_set *, const char *, size_t);
238:	static ssize_t store_sampling_down_factor(struct gov_attr_set *, const char *, size_t);
221:	static ssize_t store_up_threshold(struct gov_attr_set *, const char *, size_t);

File drivers/cpufreq/cpufreq_performance.c:
28:	struct cpufreq_governor *cpufreq_default_governor(void);
45:	static void cpufreq_gov_performance_exit(void);
44:	static int cpufreq_gov_performance_init(void);
14:	static void cpufreq_gov_performance_limits(struct cpufreq_policy *);

File drivers/cpufreq/cpufreq_powersave.c:
39:	static void cpufreq_gov_powersave_exit(void);
38:	static int cpufreq_gov_powersave_init(void);
14:	static void cpufreq_gov_powersave_limits(struct cpufreq_policy *);

File drivers/cpufreq/cpufreq_stats.c:
212:	void cpufreq_stats_create_table(struct cpufreq_policy *);
196:	void cpufreq_stats_free_table(struct cpufreq_policy *);
267:	void cpufreq_stats_record_transition(struct cpufreq_policy *, unsigned int);
69:	static ssize_t show_time_in_state(struct cpufreq_policy *, char *);
58:	static ssize_t show_total_trans(struct cpufreq_policy *, char *);
124:	static ssize_t show_trans_table(struct cpufreq_policy *, char *);
103:	static ssize_t store_reset(struct cpufreq_policy *, const char *, size_t);

File drivers/cpufreq/cpufreq_userspace.c:
142:	static void cpufreq_gov_userspace_exit(void);
141:	static int cpufreq_gov_userspace_init(void);
28:	static int cpufreq_set(struct cpufreq_policy *, unsigned int);
64:	static void cpufreq_userspace_policy_exit(struct cpufreq_policy *);
52:	static int cpufreq_userspace_policy_init(struct cpufreq_policy *);
98:	static void cpufreq_userspace_policy_limits(struct cpufreq_policy *);
72:	static int cpufreq_userspace_policy_start(struct cpufreq_policy *);
86:	static void cpufreq_userspace_policy_stop(struct cpufreq_policy *);
47:	static ssize_t show_speed(struct cpufreq_policy *, char *);

File drivers/cpufreq/freq_table.c:
32:	int cpufreq_frequency_table_cpuinfo(struct cpufreq_policy *, struct cpufreq_frequency_table *);
211:	int cpufreq_frequency_table_get_index(struct cpufreq_policy *, unsigned int);
69:	int cpufreq_frequency_table_verify(struct cpufreq_policy_data *, struct cpufreq_frequency_table *);
109:	int cpufreq_generic_frequency_table_verify(struct cpufreq_policy_data *);
118:	int cpufreq_table_index_unsorted(struct cpufreq_policy *, unsigned int, unsigned int);
354:	int cpufreq_table_validate_and_sort(struct cpufreq_policy *);
17:	bool policy_has_boost_freq(struct cpufreq_policy *);
273:	static ssize_t scaling_available_frequencies_show(struct cpufreq_policy *, char *);
285:	static ssize_t scaling_boost_frequencies_show(struct cpufreq_policy *, char *);
299:	static int set_freq_table_sorted(struct cpufreq_policy *);
233:	static ssize_t show_available_freqs(char *, bool, struct cpufreq_policy *, struct cpufreq_policy *);

File drivers/cpufreq/intel_pstate.c:
2415:	static int __intel_pstate_cpu_init(struct cpufreq_policy *);
1535:	static int airmont_get_scaling(void);
1481:	static int atom_get_max_pstate(void);
1473:	static int atom_get_min_pstate(void);
1489:	static int atom_get_turbo_pstate(void);
1497:	static u64 atom_get_val(struct cpudata *, int);
1551:	static void atom_get_vid(struct cpudata *);
2858:	static void copy_cpu_funcs(struct pstate_funcs *);
1616:	static int core_get_max_pstate(void);
1575:	static int core_get_max_pstate_physical(void);
1567:	static int core_get_min_pstate(void);
1664:	static int core_get_scaling(void);
1583:	static int core_get_tdp_ratio(u64);
1651:	static int core_get_turbo_pstate(void);
1669:	static u64 core_get_val(struct cpudata *, int);
2723:	static int intel_cpufreq_cpu_exit(struct cpufreq_policy *);
2650:	static int intel_cpufreq_cpu_init(struct cpufreq_policy *);
2635:	static unsigned int intel_cpufreq_fast_switch(struct cpufreq_policy *, unsigned int);
2599:	static int intel_cpufreq_target(struct cpufreq_policy *, unsigned int, unsigned int);
2519:	static void intel_cpufreq_trace(struct cpudata *, unsigned int, int);
2577:	static int intel_cpufreq_update_pstate(struct cpufreq_policy *, int, bool);
2493:	static int intel_cpufreq_verify_policy(struct cpufreq_policy_data *);
1975:	static void intel_pstate_adjust_pstate(struct cpudata *);
2406:	static int intel_pstate_cpu_exit(struct cpufreq_policy *);
2456:	static int intel_pstate_cpu_init(struct cpufreq_policy *);
2354:	static int intel_pstate_cpu_offline(struct cpufreq_policy *);
2379:	static int intel_pstate_cpu_online(struct cpufreq_policy *);
2753:	static void intel_pstate_driver_cleanup(void);
470:	static void intel_pstate_exit_perf_limits(struct cpufreq_policy *, struct cpufreq_policy *);
1724:	static void intel_pstate_get_cpu_pstates(struct cpudata *);
538:	static s16 intel_pstate_get_epp(struct cpudata *, u64);
2919:	static bool intel_pstate_has_acpi_ppc(void);
1462:	static void intel_pstate_hwp_enable(struct cpudata *);
847:	static void intel_pstate_hwp_set(unsigned int);
3031:	static int intel_pstate_init(void);
400:	static void intel_pstate_init_acpi_perf_limits(struct cpufreq_policy *);
2126:	static int intel_pstate_init_cpu(unsigned int);
1716:	static void intel_pstate_max_within_limits(struct cpudata *);
2872:	static bool intel_pstate_no_acpi_pss(void);
2962:	static bool intel_pstate_platform_pwr_mgmt_exists(void);
2772:	static int intel_pstate_register_driver(struct cpufreq_driver *);
981:	static int intel_pstate_resume(struct cpufreq_policy *);
562:	static int intel_pstate_set_epb(int, s16);
2272:	static int intel_pstate_set_policy(struct cpufreq_policy *);
1698:	static void intel_pstate_set_pstate(struct cpudata *, int);
3137:	static int intel_pstate_setup(char *);
2399:	static void intel_pstate_stop_cpu(struct cpufreq_policy *);
970:	static int intel_pstate_suspend(struct cpufreq_policy *);
1391:	static void intel_pstate_sysfs_expose_params(void);
1423:	static void intel_pstate_sysfs_remove(void);
1032:	static void intel_pstate_update_limits(unsigned int);
2208:	static void intel_pstate_update_perf_limits(struct cpudata *, unsigned int, unsigned int);
2000:	static void intel_pstate_update_util(struct update_util_data *, u64, unsigned int);
1852:	static void intel_pstate_update_util_hwp(struct update_util_data *, u64, unsigned int);
2328:	static void intel_pstate_verify_cpu_policy(struct cpudata *, struct cpufreq_policy_data *);
2347:	static int intel_pstate_verify_policy(struct cpufreq_policy_data *);
336:	static void intel_pstste_sched_itmt_work_fn(struct work_struct *);
1680:	static int knl_get_aperf_mperf_shift(void);
1685:	static int knl_get_turbo_pstate(void);
945:	static void set_power_ctl_ee_state(bool);
806:	static ssize_t show_base_frequency(struct cpufreq_policy *, char *);
1337:	static ssize_t show_energy_efficiency(struct kobject *, struct kobj_attribute *, char *);
704:	static ssize_t show_energy_performance_available_preferences(struct cpufreq_policy *, char *);
788:	static ssize_t show_energy_performance_preference(struct cpufreq_policy *, char *);
1312:	static ssize_t show_hwp_dynamic_boost(struct kobject *, struct kobj_attribute *, char *);
1363:	static ssize_t show_max_perf_pct(struct kobject *, struct kobj_attribute *, char *);
1364:	static ssize_t show_min_perf_pct(struct kobject *, struct kobj_attribute *, char *);
1136:	static ssize_t show_no_turbo(struct kobject *, struct kobj_attribute *, char *);
1115:	static ssize_t show_num_pstates(struct kobject *, struct kobj_attribute *, char *);
1064:	static ssize_t show_status(struct kobject *, struct kobj_attribute *, char *);
1089:	static ssize_t show_turbo_pct(struct kobject *, struct kobj_attribute *, char *);
1520:	static int silvermont_get_scaling(void);
1348:	static ssize_t store_energy_efficiency(struct kobject *, struct kobj_attribute *, const char *, size_t);
722:	static ssize_t store_energy_performance_preference(struct cpufreq_policy *, const char *, size_t);
1318:	static ssize_t store_hwp_dynamic_boost(struct kobject *, struct kobj_attribute *, const char *, size_t);
1245:	static ssize_t store_max_perf_pct(struct kobject *, struct kobj_attribute *, const char *, size_t);
1278:	static ssize_t store_min_perf_pct(struct kobject *, struct kobj_attribute *, const char *, size_t);
1159:	static ssize_t store_no_turbo(struct kobject *, struct kobj_attribute *, const char *, size_t);
1076:	static ssize_t store_status(struct kobject *, struct kobj_attribute *, const char *, size_t);
1206:	static void update_qos_request(enum freq_qos_req_type);

File drivers/cpuidle/cpuidle-haltpoll.c:
28:	static int default_enter_idle(struct cpuidle_device *, struct cpuidle_driver *, int);
74:	static int haltpoll_cpu_offline(unsigned int);
57:	static int haltpoll_cpu_online(unsigned int);
140:	static void haltpoll_exit(void);
102:	static int haltpoll_init(void);
87:	static void haltpoll_uninit(void);

File drivers/cpuidle/cpuidle.c:
530:	void cpuidle_disable_device(struct cpuidle_device *);
40:	int cpuidle_disabled(void);
476:	int cpuidle_enable_device(struct cpuidle_device *);
335:	int cpuidle_enter(struct cpuidle_driver *, struct cpuidle_device *, int);
176:	int cpuidle_enter_s2idle(struct cpuidle_driver *, struct cpuidle_device *);
200:	int cpuidle_enter_state(struct cpuidle_device *, struct cpuidle_driver *, int);
129:	int cpuidle_find_deepest_state(struct cpuidle_driver *, struct cpuidle_device *, u64);
405:	void cpuidle_install_idle_handler(void);
49:	bool cpuidle_not_available(struct cpuidle_driver *, struct cpuidle_device *);
454:	void cpuidle_pause(void);
434:	void cpuidle_pause_and_lock(void);
60:	int cpuidle_play_dead(void);
379:	u64 cpuidle_poll_time(struct cpuidle_driver *, struct cpuidle_device *);
365:	void cpuidle_reflect(struct cpuidle_device *, int);
706:	int cpuidle_register(struct cpuidle_driver *, const struct cpumask * const);
608:	int cpuidle_register_device(struct cpuidle_device *);
462:	void cpuidle_resume(void);
445:	void cpuidle_resume_and_unlock(void);
319:	int cpuidle_select(struct cpuidle_driver *, struct cpuidle_device *, bool *);
417:	void cpuidle_uninstall_idle_handler(void);
681:	void cpuidle_unregister(struct cpuidle_driver *);
654:	void cpuidle_unregister_device(struct cpuidle_device *);
110:	void cpuidle_use_deepest_state(u64);
44:	void disable_cpuidle(void);
576:	static int __cpuidle_register_device(struct cpuidle_device *);
551:	static void __cpuidle_unregister_device(struct cpuidle_device *);
748:	static int cpuidle_init(void);
137:	static void enter_s2idle_proper(struct cpuidle_driver *, struct cpuidle_device *, int);

File drivers/cpuidle/driver.c:
353:	void cpuidle_driver_state_disabled(struct cpuidle_driver *, int, bool);
338:	struct cpuidle_driver *cpuidle_get_cpu_driver(struct cpuidle_device *);
318:	struct cpuidle_driver *cpuidle_get_driver(void);
260:	int cpuidle_register_driver(struct cpuidle_driver *);
293:	void cpuidle_unregister_driver(struct cpuidle_driver *);
142:	static void cpuidle_setup_broadcast_timer(void *);

File drivers/cpuidle/governor.c:
31:	struct cpuidle_governor *cpuidle_find_governor(const char *);
110:	s64 cpuidle_governor_latency_req(unsigned int);
80:	int cpuidle_register_governor(struct cpuidle_governor *);
47:	int cpuidle_switch_governor(struct cpuidle_governor *);

File drivers/cpuidle/governors/haltpoll.c:
129:	static int haltpoll_enable_device(struct cpuidle_driver *, struct cpuidle_device *);
116:	static void haltpoll_reflect(struct cpuidle_device *, int);
52:	static int haltpoll_select(struct cpuidle_driver *, struct cpuidle_device *, bool *);
145:	static int init_haltpoll(void);

File drivers/cpuidle/governors/menu.c:
169:	static unsigned int get_typical_interval(struct menu_device *, unsigned int);
569:	static int init_menu(void);
540:	static int menu_enable_device(struct cpuidle_driver *, struct cpuidle_device *);
431:	static void menu_reflect(struct cpuidle_device *, int);
265:	static int menu_select(struct cpuidle_driver *, struct cpuidle_device *, bool *);
445:	static void menu_update(struct cpuidle_driver *, struct cpuidle_device *);

File drivers/cpuidle/governors/teo.c:
467:	static int teo_enable_device(struct cpuidle_driver *, struct cpuidle_device *);
489:	static int teo_governor_init(void);
443:	static void teo_reflect(struct cpuidle_device *, int);
240:	static int teo_select(struct cpuidle_driver *, struct cpuidle_device *, bool *);
117:	static void teo_update(struct cpuidle_driver *, struct cpuidle_device *);

File drivers/cpuidle/poll_state.c:
47:	void cpuidle_poll_state_init(struct cpuidle_driver *);
16:	static int poll_idle(struct cpuidle_device *, struct cpuidle_driver *, int);

File drivers/cpuidle/sysfs.c:
660:	int cpuidle_add_device_sysfs(struct cpuidle_device *);
124:	int cpuidle_add_interface(struct device *);
688:	int cpuidle_add_sysfs(struct cpuidle_device *);
678:	void cpuidle_remove_device_sysfs(struct cpuidle_device *);
133:	void cpuidle_remove_interface(struct device *);
731:	void cpuidle_remove_sysfs(struct cpuidle_device *);
468:	static int cpuidle_add_state_sysfs(struct cpuidle_device *);
160:	static ssize_t cpuidle_show(struct kobject *, struct attribute *, char *);
405:	static ssize_t cpuidle_state_show(struct kobject *, struct attribute *, char *);
419:	static ssize_t cpuidle_state_store(struct kobject *, struct attribute *, const char *, size_t);
442:	static void cpuidle_state_sysfs_release(struct kobject *);
175:	static ssize_t cpuidle_store(struct kobject *, struct attribute *, const char *, size_t);
195:	static void cpuidle_sysfs_release(struct kobject *);
21:	static ssize_t show_available_governors(struct device *, struct device_attribute *, char *);
42:	static ssize_t show_current_driver(struct device *, struct device_attribute *, char *);
60:	static ssize_t show_current_governor(struct device *, struct device_attribute *, char *);
262:	static ssize_t show_state_above(struct cpuidle_state *, struct cpuidle_state_usage *, char *);
263:	static ssize_t show_state_below(struct cpuidle_state *, struct cpuidle_state_usage *, char *);
302:	static ssize_t show_state_default_status(struct cpuidle_state *, struct cpuidle_state_usage *, char *);
261:	static ssize_t show_state_desc(struct cpuidle_state *, struct cpuidle_state_usage *, char *);
272:	static ssize_t show_state_disable(struct cpuidle_state *, struct cpuidle_state_usage *, char *);
255:	static ssize_t show_state_exit_latency(struct cpuidle_state *, struct cpuidle_state_usage *, char *);
260:	static ssize_t show_state_name(struct cpuidle_state *, struct cpuidle_state_usage *, char *);
257:	static ssize_t show_state_power_usage(struct cpuidle_state *, struct cpuidle_state_usage *, char *);
259:	static ssize_t show_state_rejected(struct cpuidle_state *, struct cpuidle_state_usage *, char *);
357:	static ssize_t show_state_s2idle_time(struct cpuidle_state *, struct cpuidle_state_usage *, char *);
356:	static ssize_t show_state_s2idle_usage(struct cpuidle_state *, struct cpuidle_state_usage *, char *);
256:	static ssize_t show_state_target_residency(struct cpuidle_state *, struct cpuidle_state_usage *, char *);
265:	static ssize_t show_state_time(struct cpuidle_state *, struct cpuidle_state_usage *, char *);
258:	static ssize_t show_state_usage(struct cpuidle_state *, struct cpuidle_state_usage *, char *);
76:	static ssize_t store_current_governor(struct device *, struct device_attribute *, const char *, size_t);
280:	static ssize_t store_state_disable(struct cpuidle_state *, struct cpuidle_state_usage *, const char *, size_t);

File drivers/dax/bus.c:
1404:	int __dax_driver_register(struct dax_device_driver *, struct module *, const char *);
543:	struct dax_region *alloc_dax_region(struct device *, int, struct range *, int, unsigned int, unsigned long);
1463:	void dax_bus_exit(void);
1447:	int dax_bus_init(void);
1431:	void dax_driver_unregister(struct dax_device_driver *);
528:	void dax_region_put(struct dax_region *);
1285:	struct dev_dax *devm_create_dev_dax(struct dev_dax_data *);
360:	void kill_dev_dax(struct dev_dax *);
822:	static int adjust_dev_dax_range(struct dev_dax *, struct resource *, resource_size_t);
1106:	static ssize_t align_show(struct device *, struct device_attribute *, char *);
1139:	static ssize_t align_store(struct device *, struct device_attribute *, const char *, size_t);
753:	static int alloc_dev_dax_range(struct dev_dax *, u64, resource_size_t);
258:	static ssize_t available_size_show(struct device *, struct device_attribute *, char *);
291:	static ssize_t create_show(struct device *, struct device_attribute *, char *);
309:	static ssize_t create_store(struct device *, struct device_attribute *, const char *, size_t);
194:	static int dax_bus_match(struct device *, struct device_driver *);
152:	static int dax_bus_probe(struct device *);
177:	static int dax_bus_remove(struct device *);
23:	static int dax_bus_uevent(struct device *, struct kobj_uevent_env *);
592:	static void dax_mapping_release(struct device *);
534:	static void dax_region_unregister(void *);
483:	static umode_t dax_region_visible(struct kobject *, struct attribute *, int);
433:	static ssize_t delete_store(struct device *, struct device_attribute *, const char *, size_t);
1267:	static void dev_dax_release(struct device *);
941:	static ssize_t dev_dax_resize(struct dax_region *, struct dev_dax *, resource_size_t);
875:	static int dev_dax_shrink(struct dev_dax *, resource_size_t);
1114:	static ssize_t dev_dax_validate_align(struct dev_dax *);
1228:	static umode_t dev_dax_visible(struct kobject *, struct attribute *, int);
712:	static int devm_register_dax_mapping(struct dev_dax *, int);
66:	static ssize_t do_id_store(struct device_driver *, const char *, size_t, enum id_action);
659:	static ssize_t end_show(struct device *, struct device_attribute *, char *);
213:	static ssize_t id_show(struct device *, struct device_attribute *, char *);
1075:	static ssize_t mapping_store(struct device *, struct device_attribute *, const char *, size_t);
1210:	static ssize_t modalias_show(struct device *, struct device_attribute *, char *);
111:	static ssize_t new_id_store(struct device_driver *, const char *, size_t);
1221:	static ssize_t numa_node_show(struct device *, struct device_attribute *, char *);
675:	static ssize_t pgoff_show(struct device *, struct device_attribute *, char *);
1045:	static ssize_t range_parse(const char *, struct range *, size_t);
233:	static ssize_t region_align_show(struct device *, struct device_attribute *, char *);
222:	static ssize_t region_size_show(struct device *, struct device_attribute *, char *);
118:	static ssize_t remove_id_store(struct device_driver *, const char *, size_t);
1194:	static ssize_t resource_show(struct device *, struct device_attribute *, char *);
272:	static ssize_t seed_show(struct device *, struct device_attribute *, char *);
853:	static ssize_t size_show(struct device *, struct device_attribute *, char *);
1014:	static ssize_t size_store(struct device *, struct device_attribute *, const char *, size_t);
643:	static ssize_t start_show(struct device *, struct device_attribute *, char *);
1185:	static ssize_t target_node_show(struct device *, struct device_attribute *, char *);
370:	static void trim_dev_dax_range(struct dev_dax *);
601:	static void unregister_dax_mapping(void *);
394:	static void unregister_dev_dax(void *);

File drivers/dax/hmem/device.c:
11:	void hmem_register_device(int, struct resource *);
89:	static int hmem_init(void);
73:	static int hmem_register_one(struct resource *, void *);

File drivers/dax/super.c:
168:	bool __bdev_dax_supported(struct block_device *, int);
407:	bool __dax_synchronous(struct dax_device *);
70:	bool __generic_fsdax_supported(struct dax_device *, struct block_device *, int, sector_t, sector_t);
413:	void __set_dax_synchronous(struct dax_device *);
575:	struct dax_device *alloc_dax(void *, const char *, const struct dax_operations *, unsigned long);
46:	int bdev_dax_pgoff(struct block_device *, sector_t, size_t, unsigned long *);
419:	bool dax_alive(struct dax_device *);
339:	size_t dax_copy_from_iter(struct dax_device *, unsigned long, void *, size_t, struct iov_iter *);
349:	size_t dax_copy_to_iter(struct dax_device *, unsigned long, void *, size_t, struct iov_iter *);
304:	long dax_direct_access(struct dax_device *, unsigned long, long, void **, pfn_t *);
378:	void dax_flush(struct dax_device *, void *, size_t);
631:	struct dax_device *dax_get_by_host(const char *);
680:	void *dax_get_private(struct dax_device *);
674:	struct inode *dax_inode(struct dax_device *);
31:	int dax_read_lock(void);
37:	void dax_read_unlock(int);
326:	bool dax_supported(struct dax_device *, struct block_device *, int, sector_t, sector_t);
392:	void dax_write_cache(struct dax_device *, bool);
401:	bool dax_write_cache_enabled(struct dax_device *);
359:	int dax_zero_page_range(struct dax_device *, unsigned long, size_t);
61:	struct dax_device *fs_dax_get_by_bdev(struct block_device *);
666:	struct dax_device *inode_dax(struct inode *);
437:	void kill_dax(struct dax_device *);
619:	void put_dax(struct dax_device *);
452:	void run_dax(struct dax_device *);
458:	static struct inode *dax_alloc_inode(struct super_block *);
753:	static void dax_core_exit(void);
729:	static int dax_core_init(void);
487:	static void dax_destroy_inode(struct inode *);
477:	static void dax_free_inode(struct inode *);
723:	static void dax_fs_exit(void);
502:	static int dax_init_fs_context(struct fs_context *);
524:	static int dax_set(struct inode *, void *);
517:	static int dax_test(struct inode *, void *);
265:	static umode_t dax_visible(struct kobject *, struct attribute *, int);
688:	static void init_once(void *);
229:	static ssize_t write_cache_show(struct device *, struct device_attribute *, char *);
244:	static ssize_t write_cache_store(struct device *, struct device_attribute *, const char *, size_t);

File drivers/dma-buf/dma-buf.c:
778:	struct dma_buf_attachment *dma_buf_attach(struct dma_buf *, struct device *);
1096:	int dma_buf_begin_cpu_access(struct dma_buf *, enum dma_data_direction);
793:	void dma_buf_detach(struct dma_buf *, struct dma_buf_attachment *);
690:	struct dma_buf_attachment *dma_buf_dynamic_attach(struct dma_buf *, struct device *, const struct dma_buf_attach_ops *, void *);
1130:	int dma_buf_end_cpu_access(struct dma_buf *, enum dma_data_direction);
520:	struct dma_buf *dma_buf_export(const struct dma_buf_export_info *);
607:	int dma_buf_fd(struct dma_buf *, int);
632:	struct dma_buf *dma_buf_get(int);
873:	struct sg_table *dma_buf_map_attachment(struct dma_buf_attachment *, enum dma_data_direction);
1159:	int dma_buf_mmap(struct dma_buf *, struct vm_area_struct *, unsigned long);
969:	void dma_buf_move_notify(struct dma_buf *);
828:	int dma_buf_pin(struct dma_buf_attachment *);
660:	void dma_buf_put(struct dma_buf *);
935:	void dma_buf_unmap_attachment(struct dma_buf_attachment *, struct sg_table *, enum dma_data_direction);
847:	void dma_buf_unpin(struct dma_buf_attachment *);
1213:	void *dma_buf_vmap(struct dma_buf *);
1253:	void dma_buf_vunmap(struct dma_buf *, void *);
1363:	static int dma_buf_debug_open(struct inode *, struct file *);
1273:	static int dma_buf_debug_show(struct seq_file *, void *);
1417:	static void dma_buf_deinit(void);
88:	static int dma_buf_file_release(struct inode *, struct file *);
111:	static int dma_buf_fs_init_context(struct fs_context *);
1404:	static int dma_buf_init(void);
1367:	static int dma_buf_init_debugfs(void);
366:	static long dma_buf_ioctl(struct file *, unsigned int, unsigned long);
149:	static loff_t dma_buf_llseek(struct file *, loff_t, int);
128:	static int dma_buf_mmap_internal(struct file *, struct vm_area_struct *);
208:	static __poll_t dma_buf_poll(struct file *, poll_table *);
197:	static void dma_buf_poll_cb(struct dma_fence *, struct dma_fence_cb *);
57:	static void dma_buf_release(struct dentry *);
342:	static long dma_buf_set_name(struct dma_buf *, const char *);
414:	static void dma_buf_show_fdinfo(struct seq_file *, struct file *);
41:	static char *dmabuffs_dname(struct dentry *, char *, int);

File drivers/dma-buf/dma-fence-array.c:
150:	struct dma_fence_array *dma_fence_array_create(int, struct dma_fence **, u64, unsigned int, bool);
188:	bool dma_fence_match_context(struct dma_fence *, u64);
55:	static void dma_fence_array_cb_func(struct dma_fence *, struct dma_fence_cb *);
70:	static bool dma_fence_array_enable_signaling(struct dma_fence *);
18:	static const char *dma_fence_array_get_driver_name(struct dma_fence *);
23:	static const char *dma_fence_array_get_timeline_name(struct dma_fence *);
110:	static void dma_fence_array_release(struct dma_fence *);
103:	static bool dma_fence_array_signaled(struct dma_fence *);
45:	static void irq_dma_fence_array_work(struct irq_work *);

File drivers/dma-buf/dma-fence-chain.c:
90:	int dma_fence_chain_find_seqno(struct dma_fence **, uint64_t);
230:	void dma_fence_chain_init(struct dma_fence_chain *, struct dma_fence *, struct dma_fence *, uint64_t);
39:	struct dma_fence *dma_fence_chain_walk(struct dma_fence *);
135:	static void dma_fence_chain_cb(struct dma_fence *, struct dma_fence_cb *);
144:	static bool dma_fence_chain_enable_signaling(struct dma_fence *);
112:	static const char *dma_fence_chain_get_driver_name(struct dma_fence *);
21:	static struct dma_fence *dma_fence_chain_get_prev(struct dma_fence_chain *);
117:	static const char *dma_fence_chain_get_timeline_name(struct dma_fence *);
122:	static void dma_fence_chain_irq_work(struct irq_work *);
179:	static void dma_fence_chain_release(struct dma_fence *);
164:	static bool dma_fence_chain_signaled(struct dma_fence *);

File drivers/dma-buf/dma-fence.c:
556:	int dma_fence_add_callback(struct dma_fence *, struct dma_fence_cb *, dma_fence_func_t);
152:	u64 dma_fence_context_alloc(unsigned int);
674:	long dma_fence_default_wait(struct dma_fence *, bool, long);
518:	void dma_fence_enable_sw_signaling(struct dma_fence *);
480:	void dma_fence_free(struct dma_fence *);
598:	int dma_fence_get_status(struct dma_fence *);
128:	struct dma_fence *dma_fence_get_stub(void);
848:	void dma_fence_init(struct dma_fence *, const struct dma_fence_ops *, spinlock_t *, u64, u64);
438:	void dma_fence_release(struct kref *);
630:	bool dma_fence_remove_callback(struct dma_fence *, struct dma_fence_cb *);
370:	int dma_fence_signal(struct dma_fence *);
330:	int dma_fence_signal_locked(struct dma_fence *);
764:	long dma_fence_wait_any_timeout(struct dma_fence **, uint32_t, bool, long, uint32_t *);
410:	long dma_fence_wait_timeout(struct dma_fence *, bool, long);
486:	static bool __dma_fence_enable_signaling(struct dma_fence *);
653:	static void dma_fence_default_wait_cb(struct dma_fence *, struct dma_fence_cb *);
113:	static const char *dma_fence_stub_get_name(struct dma_fence *);

File drivers/dma-buf/dma-resv.c:
308:	void dma_resv_add_excl_fence(struct dma_resv *, struct dma_fence *);
263:	void dma_resv_add_shared_fence(struct dma_resv *, struct dma_fence *);
346:	int dma_resv_copy_fences(struct dma_resv *, struct dma_resv *);
156:	void dma_resv_fini(struct dma_resv *);
432:	int dma_resv_get_fences_rcu(struct dma_resv *, struct dma_fence **, unsigned int *, struct dma_fence ***);
142:	void dma_resv_init(struct dma_resv *);
187:	int dma_resv_reserve_shared(struct dma_resv *, unsigned int);
634:	bool dma_resv_test_signaled_rcu(struct dma_resv *, bool);
532:	long dma_resv_wait_timeout_rcu(struct dma_resv *, bool, bool, unsigned long);
62:	static struct dma_resv_list *dma_resv_list_alloc(unsigned int);
82:	static void dma_resv_list_free(struct dma_resv_list *);

File drivers/dma-buf/seqno-fence.c:
30:	static bool seqno_enable_signaling(struct dma_fence *);
16:	static const char *seqno_fence_get_driver_name(struct dma_fence *);
23:	static const char *seqno_fence_get_timeline_name(struct dma_fence *);
44:	static void seqno_release(struct dma_fence *);
37:	static bool seqno_signaled(struct dma_fence *);
55:	static long seqno_wait(struct dma_fence *, bool, long);

File drivers/dma-buf/sync_file.c:
64:	struct sync_file *sync_file_create(struct dma_fence *);
102:	struct dma_fence *sync_file_get_fence(int);
131:	char *sync_file_get_name(struct sync_file *, char *, int);
189:	static void add_fence(int *, struct dma_fence *, struct dma_fence **);
46:	static void fence_check_cb_func(struct dma_fence *, struct dma_fence_cb *);
22:	static struct sync_file *sync_file_alloc(void);
463:	static long sync_file_ioctl(struct file *, unsigned int, unsigned long);
399:	static long sync_file_ioctl_fence_info(struct sync_file *, unsigned long);
324:	static long sync_file_ioctl_merge(struct sync_file *, unsigned long);
210:	static struct sync_file *sync_file_merge(const char *, struct sync_file *, struct sync_file *);
308:	static __poll_t sync_file_poll(struct file *, poll_table *);
296:	static int sync_file_release(struct inode *, struct file *);
379:	static int sync_fill_fence_info(struct dma_fence *, struct sync_fence_info *);

File drivers/dma/acpi-dma.c:
209:	int acpi_dma_controller_free(struct device *);
165:	int acpi_dma_controller_register(struct device *, struct dma_chan *(*)(struct acpi_dma_spec *, struct acpi_dma *), void *);
362:	struct dma_chan *acpi_dma_request_slave_chan_by_index(struct device *, size_t);
432:	struct dma_chan *acpi_dma_request_slave_chan_by_name(struct device *, const char *);
463:	struct dma_chan *acpi_dma_simple_xlate(struct acpi_dma_spec *, struct acpi_dma *);
280:	void devm_acpi_dma_controller_free(struct device *);
249:	int devm_acpi_dma_controller_register(struct device *, struct dma_chan *(*)(struct acpi_dma_spec *, struct acpi_dma *), void *);
337:	static int acpi_dma_parse_fixed_dma(struct acpi_resource *, void *);
41:	static int acpi_dma_parse_resource_group(const struct acpi_csrt_group *, struct acpi_device *, struct acpi_dma *);
231:	static void devm_acpi_dma_release(struct device *, void *);

File drivers/dma/dmaengine.c:
755:	struct dma_chan *__dma_request_channel(const dma_cap_mask_t *, dma_filter_fn, void *, struct device_node *);
1093:	int dma_async_device_channel_register(struct dma_device *, struct dma_chan *);
1124:	void dma_async_device_channel_unregister(struct dma_device *, struct dma_chan *);
1140:	int dma_async_device_register(struct dma_device *);
1311:	void dma_async_device_unregister(struct dma_device *);
1497:	void dma_async_tx_descriptor_init(struct dma_async_tx_descriptor *, struct dma_chan *);
544:	struct dma_chan *dma_find_channel(enum dma_transaction_type);
727:	struct dma_chan *dma_get_any_slave_channel(struct dma_device *);
570:	int dma_get_slave_caps(struct dma_chan *, struct dma_slave_caps *);
696:	struct dma_chan *dma_get_slave_channel(struct dma_chan *);
553:	void dma_issue_pending_all(void);
903:	void dma_release_channel(struct dma_chan *);
813:	struct dma_chan *dma_request_chan(struct device *, const char *);
882:	struct dma_chan *dma_request_chan_by_mask(const dma_cap_mask_t *);
1612:	void dma_run_dependencies(struct dma_async_tx_descriptor *);
519:	enum dma_status dma_sync_wait(struct dma_chan *, dma_cookie_t);
1585:	enum dma_status dma_wait_for_async_tx(struct dma_async_tx_descriptor *);
1523:	int dmaengine_desc_attach_metadata(struct dma_async_tx_descriptor *, void *, size_t);
1542:	void *dmaengine_desc_get_metadata_ptr(struct dma_async_tx_descriptor *, size_t *, size_t *);
1561:	int dmaengine_desc_set_metadata_len(struct dma_async_tx_descriptor *, size_t);
932:	void dmaengine_get(void);
1480:	struct dmaengine_unmap_data *dmaengine_get_unmap_data(struct device *, int, gfp_t);
971:	void dmaengine_put(void);
1431:	void dmaengine_unmap_put(struct dmaengine_unmap_data *);
1347:	int dmaenginem_async_device_register(struct dma_device *);
1039:	static int __dma_async_device_channel_register(struct dma_device *, struct dma_chan *);
1107:	static void __dma_async_device_channel_unregister(struct dma_device *, struct dma_chan *);
184:	static ssize_t bytes_transferred_show(struct device *, struct device_attribute *, char *);
232:	static void chan_dev_release(struct device *);
1646:	static int dma_bus_init(void);
446:	static int dma_chan_get(struct dma_chan *);
493:	static void dma_chan_put(struct dma_chan *);
361:	static void dma_channel_rebalance(void);
262:	static int dma_channel_table_init(void);
434:	static void dma_device_put(struct dma_device *);
83:	static void dmaengine_dbg_summary_show(struct seq_file *, struct dma_device *);
1452:	static int dmaengine_init_unmap_pool(void);
124:	static int dmaengine_summary_open(struct inode *, struct file *);
102:	static int dmaengine_summary_show(struct seq_file *, void *);
1406:	static void dmaengine_unmap(struct kref *);
1333:	static void dmam_device_release(struct device *, void *);
655:	static struct dma_chan *find_candidate(struct dma_device *, const dma_cap_mask_t *, dma_filter_fn, void *);
206:	static ssize_t in_use_show(struct device *, struct device_attribute *, char *);
162:	static ssize_t memcpy_count_show(struct device *, struct device_attribute *, char *);
320:	static struct dma_chan *min_chan(enum dma_transaction_type, int);
618:	static struct dma_chan *private_candidate(const dma_cap_mask_t *, struct dma_device *, dma_filter_fn, void *);

File drivers/dma/dw/acpi.c:
46:	void dw_dma_acpi_controller_free(struct dw_dma *);
23:	void dw_dma_acpi_controller_register(struct dw_dma *);
9:	static bool dw_dma_acpi_filter(struct dma_chan *, void *);

File drivers/dma/dw/core.c:
1068:	int do_dma_probe(struct dw_dma_chip *);
1279:	int do_dma_remove(struct dw_dma_chip *);
1302:	int do_dw_dma_disable(struct dw_dma_chip *);
1311:	int do_dw_dma_enable(struct dw_dma_chip *);
959:	void do_dw_dma_off(struct dw_dma *);
973:	void do_dw_dma_on(struct dw_dma *);
767:	bool dw_dma_filter(struct dma_chan *, void *);
494:	static irqreturn_t dw_dma_interrupt(void *, int);
466:	static void dw_dma_tasklet(struct tasklet_struct *);
978:	static int dwc_alloc_chan_resources(struct dma_chan *);
1049:	static void dwc_caps(struct dma_chan *, struct dma_slave_caps *);
804:	static void dwc_chan_pause(struct dw_dma_chan *, bool);
262:	static void dwc_complete_all(struct dw_dma *, struct dw_dma_chan *);
786:	static int dwc_config(struct dma_chan *, struct dma_slave_config *);
80:	static struct dw_desc *dwc_desc_get(struct dw_dma_chan *);
99:	static void dwc_desc_put(struct dw_dma_chan *, struct dw_desc *);
235:	static void dwc_descriptor_complete(struct dw_dma_chan *, struct dw_desc *, bool);
174:	static void dwc_dostart(struct dw_dma_chan *, struct dw_desc *);
219:	static void dwc_dostart_first_queued(struct dw_dma_chan *);
1015:	static void dwc_free_chan_resources(struct dma_chan *);
895:	static u32 dwc_get_residue(struct dw_dma_chan *, dma_cookie_t);
423:	static void dwc_handle_error(struct dw_dma *, struct dw_dma_chan *);
946:	static void dwc_issue_pending(struct dma_chan *);
817:	static int dwc_pause(struct dma_chan *);
540:	static struct dma_async_tx_descriptor *dwc_prep_dma_memcpy(struct dma_chan *, dma_addr_t, dma_addr_t, size_t, unsigned long);
617:	static struct dma_async_tx_descriptor *dwc_prep_slave_sg(struct dma_chan *, struct scatterlist *, unsigned int, enum dma_transfer_direction, unsigned long, void *);
838:	static int dwc_resume(struct dma_chan *);
300:	static void dwc_scan_descriptors(struct dw_dma *, struct dw_dma_chan *);
853:	static int dwc_terminate_all(struct dma_chan *);
921:	static enum dma_status dwc_tx_status(struct dma_chan *, dma_cookie_t, struct dma_tx_state *);
56:	static dma_cookie_t dwc_tx_submit(struct dma_async_tx_descriptor *);

File drivers/dma/dw/dw.c:
106:	int dw_dma_probe(struct dw_dma_chip *);
133:	int dw_dma_remove(struct dw_dma_chip *);
62:	static size_t dw_dma_block2bytes(struct dw_dma_chan *, u32, u32);
46:	static u32 dw_dma_bytes2block(struct dw_dma_chan *, size_t, unsigned int, size_t *);
96:	static void dw_dma_disable(struct dw_dma *);
101:	static void dw_dma_enable(struct dw_dma *);
82:	static void dw_dma_encode_maxburst(struct dw_dma_chan *, u32 *);
14:	static void dw_dma_initialize_chan(struct dw_dma_chan *);
67:	static u32 dw_dma_prepare_ctllo(struct dw_dma_chan *);
39:	static void dw_dma_resume_chan(struct dw_dma_chan *, bool);
91:	static void dw_dma_set_device_name(struct dw_dma *, int);
32:	static void dw_dma_suspend_chan(struct dw_dma_chan *, bool);

File drivers/dma/dw/idma32.c:
128:	int idma32_dma_probe(struct dw_dma_chip *);
155:	int idma32_dma_remove(struct dw_dma_chip *);
68:	static size_t idma32_block2bytes(struct dw_dma_chan *, u32, u32);
52:	static u32 idma32_bytes2block(struct dw_dma_chan *, size_t, unsigned int, size_t *);
116:	static void idma32_disable(struct dw_dma *);
122:	static void idma32_enable(struct dw_dma *);
83:	static void idma32_encode_maxburst(struct dw_dma_chan *, u32 *);
12:	static void idma32_initialize_chan(struct dw_dma_chan *);
73:	static u32 idma32_prepare_ctllo(struct dw_dma_chan *);
42:	static void idma32_resume_chan(struct dw_dma_chan *, bool);
88:	static void idma32_set_device_name(struct dw_dma *, int);
32:	static void idma32_suspend_chan(struct dw_dma_chan *, bool);

File drivers/dma/dw/pci.c:
147:	static void dw_pci_driver_exit(void);
147:	static int dw_pci_driver_init(void);
15:	static int dw_pci_probe(struct pci_dev *, const struct pci_device_id *);
70:	static void dw_pci_remove(struct pci_dev *);
93:	static int dw_pci_resume_early(struct device *);
85:	static int dw_pci_suspend_late(struct device *);

File drivers/dma/hsu/hsu.c:
202:	int hsu_dma_do_irq(struct hsu_dma_chip *, unsigned short, u32);
143:	int hsu_dma_get_status(struct hsu_dma_chip *, unsigned short, u32 *);
416:	int hsu_dma_probe(struct hsu_dma_chip *);
482:	int hsu_dma_remove(struct hsu_dma_chip *);
233:	static struct hsu_dma_desc *hsu_dma_alloc_desc(unsigned int);
54:	static void hsu_dma_chan_start(struct hsu_dma_chan *);
250:	static void hsu_dma_desc_free(struct virt_dma_desc *);
404:	static void hsu_dma_free_chan_resources(struct dma_chan *);
287:	static void hsu_dma_issue_pending(struct dma_chan *);
353:	static int hsu_dma_pause(struct dma_chan *);
258:	static struct dma_async_tx_descriptor *hsu_dma_prep_slave_sg(struct dma_chan *, struct scatterlist *, unsigned int, enum dma_transfer_direction, unsigned long, void *);
368:	static int hsu_dma_resume(struct dma_chan *);
343:	static int hsu_dma_slave_config(struct dma_chan *, struct dma_slave_config *);
108:	static void hsu_dma_start_transfer(struct hsu_dma_chan *);
409:	static void hsu_dma_synchronize(struct dma_chan *);
383:	static int hsu_dma_terminate_all(struct dma_chan *);
315:	static enum dma_status hsu_dma_tx_status(struct dma_chan *, dma_cookie_t, struct dma_tx_state *);

File drivers/dma/virt-dma.c:
112:	void vchan_dma_desc_free_list(struct virt_dma_chan *, struct list_head *);
66:	struct virt_dma_desc *vchan_find_desc(struct virt_dma_chan *, dma_cookie_t);
123:	void vchan_init(struct virt_dma_chan *, struct dma_device *);
49:	int vchan_tx_desc_free(struct dma_async_tx_descriptor *);
19:	dma_cookie_t vchan_tx_submit(struct dma_async_tx_descriptor *);
83:	static void vchan_complete(struct tasklet_struct *);

File drivers/edac/edac_device.c:
448:	int edac_device_add_device(struct edac_device_ctl_info *);
50:	struct edac_device_ctl_info *edac_device_alloc_ctl_info(unsigned int, char *, unsigned int, char *, unsigned int, unsigned int, struct edac_dev_sysfs_block_attribute *, unsigned int, int);
440:	int edac_device_alloc_index(void);
504:	struct edac_device_ctl_info *edac_device_del_device(struct device *);
229:	void edac_device_free_ctl_info(struct edac_device_ctl_info *);
558:	void edac_device_handle_ce_count(struct edac_device_ctl_info *, unsigned int, int, int, const char *);
604:	void edac_device_handle_ue_count(struct edac_device_ctl_info *, unsigned int, int, int, const char *);
426:	void edac_device_reset_delay_period(struct edac_device_ctl_info *, unsigned long);
273:	static int add_edac_dev_to_global_list(struct edac_device_ctl_info *);
319:	static void del_edac_device_from_global_list(struct edac_device_ctl_info *);
343:	static void edac_device_workq_function(struct work_struct *);

File drivers/edac/edac_device_sysfs.c:
802:	int edac_device_create_sysfs(struct edac_device_ctl_info *);
231:	int edac_device_register_sysfs_main_kobj(struct edac_device_ctl_info *);
859:	void edac_device_remove_sysfs(struct edac_device_ctl_info *);
289:	void edac_device_unregister_sysfs_main_kobj(struct edac_device_ctl_info *);
422:	static ssize_t block_ce_count_show(struct kobject *, struct attribute *, char *);
414:	static ssize_t block_ue_count_show(struct kobject *, struct attribute *, char *);
448:	static ssize_t edac_dev_block_show(struct kobject *, struct attribute *, char *);
460:	static ssize_t edac_dev_block_store(struct kobject *, struct attribute *, const char *, size_t);
117:	static ssize_t edac_dev_ctl_info_show(struct kobject *, struct attribute *, char *);
129:	static ssize_t edac_dev_ctl_info_store(struct kobject *, struct attribute *, const char *, size_t);
346:	static ssize_t edac_dev_instance_show(struct kobject *, struct attribute *, char *);
358:	static ssize_t edac_dev_instance_store(struct kobject *, struct attribute *, const char *, size_t);
508:	static int edac_device_create_block(struct edac_device_ctl_info *, struct edac_device_instance *, struct edac_device_block *);
609:	static int edac_device_create_instance(struct edac_device_ctl_info *, int);
49:	static ssize_t edac_device_ctl_log_ce_show(struct edac_device_ctl_info *, char *);
55:	static ssize_t edac_device_ctl_log_ce_store(struct edac_device_ctl_info *, const char *, size_t);
32:	static ssize_t edac_device_ctl_log_ue_show(struct edac_device_ctl_info *, char *);
38:	static ssize_t edac_device_ctl_log_ue_store(struct edac_device_ctl_info *, const char *, size_t);
66:	static ssize_t edac_device_ctl_panic_on_ue_show(struct edac_device_ctl_info *, char *);
72:	static ssize_t edac_device_ctl_panic_on_ue_store(struct edac_device_ctl_info *, const char *, size_t);
83:	static ssize_t edac_device_ctl_poll_msec_show(struct edac_device_ctl_info *, char *);
89:	static ssize_t edac_device_ctl_poll_msec_store(struct edac_device_ctl_info *, const char *, size_t);
431:	static void edac_device_ctrl_block_release(struct kobject *);
325:	static void edac_device_ctrl_instance_release(struct kobject *);
201:	static void edac_device_ctrl_master_release(struct kobject *);
315:	static ssize_t instance_ce_count_show(struct edac_device_instance *, char *);
309:	static ssize_t instance_ue_count_show(struct edac_device_instance *, char *);

File drivers/edac/edac_mc.c:
186:	void *edac_align_ptr(void **, unsigned int, int);
61:	unsigned int edac_dimm_info_location(struct dimm_info *, char *, unsigned int);
662:	const char *edac_get_owner(void);
482:	bool edac_has_mcs(void);
669:	int edac_mc_add_mc_with_groups(struct mem_ctl_info *, const struct attribute_group **);
386:	struct mem_ctl_info *edac_mc_alloc(unsigned int, unsigned int, struct edac_mc_layer *, unsigned int);
753:	struct mem_ctl_info *edac_mc_del_mc(struct device *);
642:	struct mem_ctl_info *edac_mc_find(int);
822:	int edac_mc_find_csrow_by_page(struct mem_ctl_info *, unsigned long);
474:	void edac_mc_free(struct mem_ctl_info *);
1012:	void edac_mc_handle_error(const enum hw_event_mc_err_type, struct mem_ctl_info *, const u16, const unsigned long, const unsigned long, const unsigned long, const int, const int, const int, const char *, const char *);
564:	void edac_mc_reset_delay_period(unsigned long);
986:	void edac_raw_mc_handle_error(struct edac_raw_error_desc *);
521:	struct mem_ctl_info *find_mci_by_dev(struct device *);
590:	static int add_mc_to_global_list(struct mem_ctl_info *);
629:	static int del_mc_from_global_list(struct mem_ctl_info *);
900:	static void edac_ce_error(struct edac_raw_error_desc *);
258:	static int edac_mc_alloc_csrows(struct mem_ctl_info *);
303:	static int edac_mc_alloc_dimms(struct mem_ctl_info *);
790:	static void edac_mc_scrub_block(unsigned long, unsigned long, u32);
537:	static void edac_mc_workq_function(struct work_struct *);
938:	static void edac_ue_error(struct edac_raw_error_desc *);
228:	static void mci_release(struct device *);

File drivers/edac/edac_mc_sysfs.c:
909:	int edac_create_sysfs_mci_device(struct mem_ctl_info *, const struct attribute_group **);
37:	int edac_mc_get_log_ce(void);
32:	int edac_mc_get_log_ue(void);
42:	int edac_mc_get_panic_on_ue(void);
48:	unsigned int edac_mc_get_poll_msec(void);
1028:	void edac_mc_sysfs_exit(void);
1004:	int edac_mc_sysfs_init(void);
963:	void edac_remove_sysfs_mci_device(struct mem_ctl_info *);
239:	static ssize_t channel_ce_count_show(struct device *, struct device_attribute *, char *);
198:	static ssize_t channel_dimm_label_show(struct device *, struct device_attribute *, char *);
214:	static ssize_t channel_dimm_label_store(struct device *, struct device_attribute *, const char *, size_t);
152:	static ssize_t csrow_ce_count_show(struct device *, struct device_attribute *, char *);
346:	static umode_t csrow_dev_is_visible(struct kobject *, struct attribute *, int);
180:	static ssize_t csrow_dev_type_show(struct device *, struct device_attribute *, char *);
188:	static ssize_t csrow_edac_mode_show(struct device *, struct device_attribute *, char *);
172:	static ssize_t csrow_mem_type_show(struct device *, struct device_attribute *, char *);
384:	static void csrow_release(struct device *);
160:	static ssize_t csrow_size_show(struct device *, struct device_attribute *, char *);
144:	static ssize_t csrow_ue_count_show(struct device *, struct device_attribute *, char *);
553:	static ssize_t dimmdev_ce_count_show(struct device *, struct device_attribute *, char *);
536:	static ssize_t dimmdev_dev_type_show(struct device *, struct device_attribute *, char *);
544:	static ssize_t dimmdev_edac_mode_show(struct device *, struct device_attribute *, char *);
485:	static ssize_t dimmdev_label_show(struct device *, struct device_attribute *, char *);
497:	static ssize_t dimmdev_label_store(struct device *, struct device_attribute *, const char *, size_t);
473:	static ssize_t dimmdev_location_show(struct device *, struct device_attribute *, char *);
528:	static ssize_t dimmdev_mem_type_show(struct device *, struct device_attribute *, char *);
520:	static ssize_t dimmdev_size_show(struct device *, struct device_attribute *, char *);
562:	static ssize_t dimmdev_ue_count_show(struct device *, struct device_attribute *, char *);
430:	static int edac_create_csrow_objects(struct mem_ctl_info *);
53:	static int edac_set_poll_msec(const char *, const struct kernel_param *);
990:	static void mc_attr_release(struct device *);
871:	static umode_t mci_attr_is_visible(struct kobject *, struct attribute *, int);
750:	static ssize_t mci_ce_count_show(struct device *, struct device_attribute *, char *);
759:	static ssize_t mci_ce_noinfo_show(struct device *, struct device_attribute *, char *);
786:	static ssize_t mci_ctl_name_show(struct device *, struct device_attribute *, char *);
815:	static ssize_t mci_max_location_show(struct device *, struct device_attribute *, char *);
659:	static ssize_t mci_reset_counters_store(struct device *, struct device_attribute *, const char *, size_t);
724:	static ssize_t mci_sdram_scrub_rate_show(struct device *, struct device_attribute *, char *);
700:	static ssize_t mci_sdram_scrub_rate_store(struct device *, struct device_attribute *, const char *, size_t);
777:	static ssize_t mci_seconds_show(struct device *, struct device_attribute *, char *);
795:	static ssize_t mci_size_mb_show(struct device *, struct device_attribute *, char *);
741:	static ssize_t mci_ue_count_show(struct device *, struct device_attribute *, char *);
768:	static ssize_t mci_ue_noinfo_show(struct device *, struct device_attribute *, char *);

File drivers/edac/edac_module.c:
93:	struct bus_type *edac_get_sysfs_subsys(void);
50:	char *edac_op_state_to_string(int);
149:	static void edac_exit(void);
102:	static int edac_init(void);

File drivers/edac/edac_pci.c:
204:	int edac_pci_add_device(struct edac_pci_ctl_info *, int);
31:	struct edac_pci_ctl_info *edac_pci_alloc_ctl_info(unsigned int, const char *);
198:	int edac_pci_alloc_index(void);
302:	struct edac_pci_ctl_info *edac_pci_create_generic_ctl(struct device *, const char *);
249:	struct edac_pci_ctl_info *edac_pci_del_device(struct device *);
61:	void edac_pci_free_ctl_info(struct edac_pci_ctl_info *);
334:	void edac_pci_release_generic_ctl(struct edac_pci_ctl_info *);
100:	static int add_edac_pci_to_global_list(struct edac_pci_ctl_info *);
150:	static void del_edac_pci_from_global_list(struct edac_pci_ctl_info *);
288:	static void edac_pci_generic_check(struct edac_pci_ctl_info *);
167:	static void edac_pci_workq_function(struct work_struct *);

File drivers/edac/edac_pci_sysfs.c:
672:	void edac_pci_clear_parity_errors(void);
421:	int edac_pci_create_sysfs(struct edac_pci_ctl_info *);
639:	void edac_pci_do_parity_check(void);
33:	int edac_pci_get_check_errors(void);
53:	int edac_pci_get_poll_msec(void);
710:	void edac_pci_handle_npe(struct edac_pci_ctl_info *, const char *);
685:	void edac_pci_handle_pe(struct edac_pci_ctl_info *, const char *);
456:	void edac_pci_remove_sysfs(struct edac_pci_ctl_info *);
529:	static void edac_pci_dev_parity_test(struct pci_dev *);
238:	static ssize_t edac_pci_dev_show(struct kobject *, struct attribute *, char *);
249:	static ssize_t edac_pci_dev_store(struct kobject *, struct attribute *, const char *, size_t);
74:	static void edac_pci_instance_release(struct kobject *);
97:	static ssize_t edac_pci_instance_show(struct kobject *, struct attribute *, char *);
109:	static ssize_t edac_pci_instance_store(struct kobject *, struct attribute *, const char *, size_t);
214:	static ssize_t edac_pci_int_show(void *, char *);
220:	static ssize_t edac_pci_int_store(void *, const char *, size_t);
336:	static int edac_pci_main_kobj_setup(void);
314:	static void edac_pci_release_main_kobj(struct kobject *);
475:	static u16 get_pci_parity_status(struct pci_dev *, int);
64:	static ssize_t instance_npe_count_show(struct edac_pci_ctl_info *, char *);
59:	static ssize_t instance_pe_count_show(struct edac_pci_ctl_info *, char *);

File drivers/edac/ghes_edac.c:
508:	int ghes_edac_register(struct ghes *, struct device *);
238:	void ghes_edac_report_mem_error(int, struct cper_sec_mem_err *);
641:	void ghes_edac_unregister(struct ghes *);
109:	static void assign_dmi_dimm_info(struct dimm_info *, struct memdev_dmi_entry *);
197:	static void enumerate_dimms(const struct dmi_header *, void *);

File drivers/edac/wq.c:
12:	bool edac_mod_work(struct delayed_work *, unsigned long);
6:	bool edac_queue_work(struct delayed_work *, unsigned long);
18:	bool edac_stop_work(struct delayed_work *);
29:	int edac_workqueue_setup(void);
38:	void edac_workqueue_teardown(void);

File drivers/firewire/init_ohci1394_dma.c:
257:	void init_ohci1394_dma_on_all_controllers(void);
288:	static int setup_ohci1394_dma(char *);

File drivers/firmware/dmi-id.c:
153:	static int dmi_dev_uevent(struct device *, struct kobj_uevent_env *);
216:	static int dmi_id_init(void);
183:	static void dmi_id_init_attr_table(void);
74:	static ssize_t get_modalias(char *, size_t);
22:	static ssize_t sys_dmi_field_show(struct device *, struct device_attribute *, char *);
129:	static ssize_t sys_dmi_modalias_show(struct device *, struct device_attribute *, char *);

File drivers/firmware/dmi-sysfs.c:
639:	static void cleanup_entry_list(void);
215:	static ssize_t dmi_entry_attr_show(struct kobject *, struct attribute *, char *);
203:	static ssize_t dmi_entry_attr_show_helper(struct dmi_sysfs_entry *, const struct dmi_header *, void *);
83:	static void dmi_entry_free(struct kobject *);
535:	static ssize_t dmi_entry_raw_read(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t, size_t);
522:	static ssize_t dmi_entry_raw_read_helper(struct dmi_sysfs_entry *, const struct dmi_header *, void *);
430:	static ssize_t dmi_sel_raw_read(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t, size_t);
399:	static ssize_t dmi_sel_raw_read_helper(struct dmi_sysfs_entry *, const struct dmi_header *, void *);
98:	static ssize_t dmi_sysfs_attr_show(struct kobject *, struct attribute *, char *);
485:	static ssize_t dmi_sysfs_entry_handle(struct dmi_sysfs_entry *, char *);
495:	static ssize_t dmi_sysfs_entry_instance(struct dmi_sysfs_entry *, char *);
480:	static ssize_t dmi_sysfs_entry_length(struct dmi_sysfs_entry *, char *);
501:	static ssize_t dmi_sysfs_entry_position(struct dmi_sysfs_entry *, char *);
555:	static void dmi_sysfs_entry_release(struct kobject *);
490:	static ssize_t dmi_sysfs_entry_type(struct dmi_sysfs_entry *, char *);
686:	static void dmi_sysfs_exit(void);
650:	static int dmi_sysfs_init(void);
579:	static void dmi_sysfs_register_handle(const struct dmi_header *, void *);
284:	static ssize_t dmi_sysfs_sel_access_method(struct dmi_sysfs_entry *, const struct dmi_header *, char *);
287:	static ssize_t dmi_sysfs_sel_access_method_address(struct dmi_sysfs_entry *, const struct dmi_header *, char *);
281:	static ssize_t dmi_sysfs_sel_area_length(struct dmi_sysfs_entry *, const struct dmi_header *, char *);
286:	static ssize_t dmi_sysfs_sel_change_token(struct dmi_sysfs_entry *, const struct dmi_header *, char *);
283:	static ssize_t dmi_sysfs_sel_data_start_offset(struct dmi_sysfs_entry *, const struct dmi_header *, char *);
288:	static ssize_t dmi_sysfs_sel_header_format(struct dmi_sysfs_entry *, const struct dmi_header *, char *);
282:	static ssize_t dmi_sysfs_sel_header_start_offset(struct dmi_sysfs_entry *, const struct dmi_header *, char *);
290:	static ssize_t dmi_sysfs_sel_per_log_type_descriptor_length(struct dmi_sysfs_entry *, const struct dmi_header *, char *);
285:	static ssize_t dmi_sysfs_sel_status(struct dmi_sysfs_entry *, const struct dmi_header *, char *);
289:	static ssize_t dmi_sysfs_sel_type_descriptors_supported_count(struct dmi_sysfs_entry *, const struct dmi_header *, char *);
126:	static void find_dmi_entry_helper(const struct dmi_header *, void *);
343:	static u8 read_sel_16bit_indexed_io(const struct dmi_system_event_log *, loff_t);
330:	static u8 read_sel_2x8bit_indexed_io(const struct dmi_system_event_log *, loff_t);
318:	static u8 read_sel_8bit_indexed_io(const struct dmi_system_event_log *, loff_t);

File drivers/firmware/dmi_scan.c:
885:	int dmi_check_system(const struct dmi_system_id *);
981:	const struct dmi_device *dmi_find_device(int, const char *, const struct dmi_device *);
915:	const struct dmi_system_id *dmi_first_match(const struct dmi_system_id *);
1079:	int dmi_get_bios_year(void);
1018:	bool dmi_get_date(int, int *, int *, int *);
934:	const char *dmi_get_system_info(int);
1126:	bool dmi_match(enum dmi_field, const char *);
1196:	u16 dmi_memdev_handle(int);
1137:	void dmi_memdev_name(u16, const char **, const char **);
1154:	u64 dmi_memdev_size(u16);
1175:	u8 dmi_memdev_type(u16);
944:	int dmi_name_in_serial(const char *);
956:	int dmi_name_in_vendors(const char *);
813:	void dmi_setup(void);
1100:	int dmi_walk(void (*)(const struct dmi_header *, void *), void *);
413:	static void count_mem_devices(const struct dmi_header *, void *);
155:	static int dmi_checksum(const u8 *, u8);
468:	static void dmi_decode(const struct dmi_header *, void *);
87:	static void dmi_decode_table(u8 *, void (*)(const struct dmi_header *, void *), void *);
534:	static void dmi_format_ids(size_t, char *);
753:	static int dmi_init(void);
827:	static bool dmi_matches(const struct dmi_system_id *);
565:	static int dmi_present(const u8 *);
356:	static void dmi_save_dev_pciaddr(int, int, int, int, const char *, int);
173:	static void dmi_save_ident(const struct dmi_header *, int, int);
334:	static void dmi_save_ipmi_device(const struct dmi_header *);
273:	static void dmi_save_one_device(int, const char *);
189:	static void dmi_save_release(const struct dmi_header *, int, int);
217:	static void dmi_save_uuid(const struct dmi_header *, int, int);
651:	static void dmi_scan_machine(void);
628:	static int dmi_smbios3_present(const u8 *);
66:	static const char *dmi_string(const struct dmi_header *, u8);
46:	static const char *dmi_string_nosave(const struct dmi_header *, u8);
137:	static int dmi_walk_early(void (*)(const struct dmi_header *, void *));
518:	static int print_filtered(char *, size_t, const char *);
742:	static ssize_t raw_table_read(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t, size_t);
420:	static void save_mem_devices(const struct dmi_header *, void *);

File drivers/firmware/efi/apple-properties.c:
24:	static int dump_properties_enable(char *);
176:	static int map_properties(void);
118:	static int unmarshal_devices(struct properties_header *);
49:	static void unmarshal_key_value_pairs(struct dev_header *, struct device *, const void *, struct property_entry *);

File drivers/firmware/efi/capsule.c:
50:	bool efi_capsule_pending(int *);
85:	int efi_capsule_supported(efi_guid_t, u32, size_t, int *);
215:	int efi_capsule_update(efi_capsule_header_t *, phys_addr_t *);
286:	static int capsule_reboot_notify(struct notifier_block *, unsigned long, void *);
299:	static int capsule_reboot_register(void);

File drivers/firmware/efi/cper-x86.c:
256:	void cper_print_proc_ia(const char *, const struct cper_sec_proc_ia *);
86:	static enum err_types cper_get_err_type(const guid_t *);
183:	static void print_err_info(const char *, u8, u64);

File drivers/firmware/efi/cper.c:
623:	int cper_estatus_check(const struct acpi_hest_generic_status *);
610:	int cper_estatus_check_header(const struct acpi_hest_generic_status *);
587:	void cper_estatus_print(const char *, const struct acpi_hest_generic_status *);
289:	void cper_mem_err_pack(const struct cper_sec_mem_err *, struct cper_mem_err_compact *);
207:	const char *cper_mem_err_type_str(unsigned int);
310:	const char *cper_mem_err_unpack(struct trace_seq *, struct cper_mem_err_compact *);
33:	u64 cper_next_record_id(void);
82:	void cper_print_bits(const char *, unsigned int, const char * const *, unsigned int);
64:	const char *cper_severity_str(unsigned int);
269:	static int cper_dimm_err_location(struct cper_mem_err_compact *, char *);
496:	static void cper_estatus_print_section(const char *, struct acpi_hest_generic_data *, int);
214:	static int cper_mem_err_location(struct cper_mem_err_compact *, char *);
428:	static void cper_print_fw_err(const char *, struct acpi_hest_generic_data *, const struct cper_sec_fw_err_rec_ref *);
325:	static void cper_print_mem(const char *, const struct cper_sec_mem_err *, int);
371:	static void cper_print_pcie(const char *, const struct cper_sec_pcie *, const struct acpi_hest_generic_data *);
143:	static void cper_print_proc_generic(const char *, const struct cper_sec_proc_generic *);

File drivers/firmware/efi/dev-path-parser.c:
159:	struct device *efi_get_device_by_path(const struct efi_dev_path **, size_t *);
20:	static int match_acpi_dev(struct device *, const void *);
65:	static int match_pci_dev(struct device *, void *);

File drivers/firmware/efi/earlycon.c:
52:	static void *efi_earlycon_map(unsigned long, unsigned long);
30:	static int efi_earlycon_remap_fb(void);
85:	static void efi_earlycon_scroll_up(void);
207:	static int efi_earlycon_setup(struct earlycon_device *, const char *);
63:	static void efi_earlycon_unmap(void *, unsigned long);
43:	static int efi_earlycon_unmap_fb(void);
135:	static void efi_earlycon_write(struct console *, const char *, unsigned int);

File drivers/firmware/efi/efi-bgrt.c:
27:	void efi_bgrt_init(struct acpi_table_header *);

File drivers/firmware/efi/efi-pstore.c:
363:	static int efi_pstore_callback(efi_char16_t *, efi_guid_t, unsigned long, void *);
333:	static int efi_pstore_erase(struct pstore_record *);
281:	static int efi_pstore_erase_func(struct efivar_entry *, void *);
308:	static int efi_pstore_erase_name(const char *);
26:	static int efi_pstore_open(struct pstore_info *);
224:	static ssize_t efi_pstore_read(struct pstore_record *);
43:	static int efi_pstore_read_func(struct efivar_entry *, struct pstore_record *);
150:	static int efi_pstore_scan_sysfs_exit(struct efivar_entry *, struct efivar_entry *, bool, struct list_head *);
173:	static int efi_pstore_sysfs_entry_iter(struct pstore_record *);
397:	static void efi_pstore_update_entries(struct work_struct *);
383:	static int efi_pstore_update_entry(efi_char16_t *, efi_guid_t, unsigned long, void *);
247:	static int efi_pstore_write(struct pstore_record *);
451:	static void efivars_pstore_exit(void);
420:	static int efivars_pstore_init(void);

File drivers/firmware/efi/efi.c:
82:	bool __efi_soft_reserve_enabled(void);
482:	void efi_arch_mem_reserve(phys_addr_t, u64);
166:	umode_t efi_attr_is_visible(struct kobject *, struct attribute *, int);
551:	int efi_config_parse_tables(const efi_config_table_t *, int, const efi_config_table_type_t *);
742:	char *efi_md_typeattr_format(char *, size_t, const efi_memory_desc_t *);
803:	u64 efi_mem_attributes(unsigned long);
475:	u64 efi_mem_desc_end(efi_memory_desc_t *);
444:	int efi_mem_desc_lookup(u64, efi_memory_desc_t *);
496:	void efi_mem_reserve(phys_addr_t, u64);
925:	int efi_mem_reserve_persistent(phys_addr_t, u64);
827:	int efi_mem_type(unsigned long);
77:	bool efi_runtime_disabled(void);
844:	int efi_status_to_err(efi_status_t);
664:	int efi_systab_check_header(const efi_table_hdr_t *, int);
702:	void efi_systab_report_header(const efi_table_hdr_t *, unsigned long);
304:	static void efi_debugfs_init(void);
896:	static int efi_mem_reserve_iomem(phys_addr_t, u64);
883:	static int efi_memreserve_map_root(void);
985:	static int efi_memreserve_root_init(void);
356:	static int efisubsys_init(void);
216:	static int efivar_ssdt_iter(efi_char16_t *, efi_guid_t, unsigned long, void *);
240:	static int efivar_ssdt_load(void);
201:	static int efivar_ssdt_setup(char *);
145:	static ssize_t fw_platform_size_show(struct kobject *, struct kobj_attribute *, char *);
532:	static int match_config_table(const efi_guid_t *, unsigned long, const efi_config_table_type_t *);
87:	static int parse_efi_cmdline(char *);
1030:	static int register_update_efi_random_seed(void);
70:	static int setup_noefi(char *);
115:	static ssize_t systab_show(struct kobject *, struct kobj_attribute *, char *);
996:	static int update_efi_random_seed(void *, unsigned long, struct notifier_block *);

File drivers/firmware/efi/esrt.c:
239:	void efi_esrt_init(void);
135:	static ssize_t capsule_flags_show(struct esre_entry *, char *);
92:	static ssize_t esre_attr_show(struct kobject *, struct attribute *, char *);
167:	static int esre_create_sysfs_entry(void *, int);
149:	static void esre_release(struct kobject *);
223:	static umode_t esrt_attr_is_visible(struct kobject *, struct attribute *, int);
377:	static int esrt_sysfs_init(void);
110:	static ssize_t fw_class_show(struct esre_entry *, char *);
204:	static ssize_t fw_resource_count_max_show(struct kobject *, struct kobj_attribute *, char *);
203:	static ssize_t fw_resource_count_show(struct kobject *, struct kobj_attribute *, char *);
205:	static ssize_t fw_resource_version_show(struct kobject *, struct kobj_attribute *, char *);
132:	static ssize_t fw_type_show(struct esre_entry *, char *);
133:	static ssize_t fw_version_show(struct esre_entry *, char *);
137:	static ssize_t last_attempt_status_show(struct esre_entry *, char *);
136:	static ssize_t last_attempt_version_show(struct esre_entry *, char *);
134:	static ssize_t lowest_supported_fw_version_show(struct esre_entry *, char *);

File drivers/firmware/efi/memattr.c:
128:	int efi_memattr_apply_permissions(struct mm_struct *, efi_memattr_perm_setter);
22:	int efi_memattr_init(void);
56:	static bool entry_is_valid(const efi_memory_desc_t *, efi_memory_desc_t *);

File drivers/firmware/efi/memmap.c:
32:	void __efi_memmap_free(u64, unsigned long, unsigned long);
65:	int efi_memmap_alloc(unsigned int, struct efi_memory_map_data *);
150:	int efi_memmap_init_early(struct efi_memory_map_data *);
200:	int efi_memmap_init_late(phys_addr_t, unsigned long);
290:	void efi_memmap_insert(struct efi_memory_map *, void *, struct efi_mem_range *);
235:	int efi_memmap_install(struct efi_memory_map_data *);
250:	int efi_memmap_split_count(efi_memory_desc_t *, struct range *);
159:	void efi_memmap_unmap(void);
21:	static phys_addr_t __efi_memmap_alloc_late(unsigned long);
105:	static int __efi_memmap_init(struct efi_memory_map_data *);

File drivers/firmware/efi/reboot.c:
49:	bool efi_poweroff_required(void);
13:	void efi_reboot(enum reboot_mode, const char *);
54:	static void efi_power_off(void);
65:	static int efi_shutdown_init(void);

File drivers/firmware/efi/runtime-map.c:
143:	int efi_get_runtime_map_desc_size(void);
138:	int efi_get_runtime_map_size(void);
148:	int efi_runtime_map_copy(void *, size_t);
159:	int efi_runtime_map_init(struct kobject *);
104:	static struct efi_runtime_map_entry *add_sysfs_runtime_map_entry(struct kobject *, int, efi_memory_desc_t *);
49:	static ssize_t attribute_show(struct efi_runtime_map_entry *, char *);
56:	static ssize_t map_attr_show(struct kobject *, struct attribute *, char *);
87:	static void map_release(struct kobject *);
48:	static ssize_t num_pages_show(struct efi_runtime_map_entry *, char *);
46:	static ssize_t phys_addr_show(struct efi_runtime_map_entry *, char *);
33:	static ssize_t type_show(struct efi_runtime_map_entry *, char *);
47:	static ssize_t virt_addr_show(struct efi_runtime_map_entry *, char *);

File drivers/firmware/efi/runtime-wrappers.c:
104:	void efi_call_virt_check_flags(unsigned long, const char *);
96:	unsigned long efi_call_virt_save_flags(void);
462:	void efi_native_runtime_setup(void);
178:	static void efi_call_rts(struct work_struct *);
400:	static efi_status_t virt_efi_get_next_high_mono_count(u32 *);
315:	static efi_status_t virt_efi_get_next_variable(unsigned long *, efi_char16_t *, efi_guid_t *);
251:	static efi_status_t virt_efi_get_time(efi_time_t *, efi_time_cap_t *);
299:	static efi_status_t virt_efi_get_variable(efi_char16_t *, efi_guid_t *, u32 *, unsigned long *, void *);
273:	static efi_status_t virt_efi_get_wakeup_time(efi_bool_t *, efi_bool_t *, efi_time_t *);
444:	static efi_status_t virt_efi_query_capsule_caps(efi_capsule_header_t **, unsigned long, u64 *, int *);
362:	static efi_status_t virt_efi_query_variable_info(u32, u64 *, u64 *, u64 *);
381:	static efi_status_t virt_efi_query_variable_info_nonblocking(u32, u64 *, u64 *, u64 *);
412:	static void virt_efi_reset_system(int, efi_status_t, unsigned long, efi_char16_t *);
262:	static efi_status_t virt_efi_set_time(efi_time_t *);
329:	static efi_status_t virt_efi_set_variable(efi_char16_t *, efi_guid_t *, u32, unsigned long, void *);
346:	static efi_status_t virt_efi_set_variable_nonblocking(efi_char16_t *, efi_guid_t *, u32, unsigned long, void *);
287:	static efi_status_t virt_efi_set_wakeup_time(efi_bool_t, efi_time_t *);
427:	static efi_status_t virt_efi_update_capsule(efi_capsule_header_t **, unsigned long, unsigned long);

File drivers/firmware/efi/tpm.c:
39:	int efi_tpm_eventlog_init(void);
19:	static int tpm2_calc_event_log_size(void *, int, void *);

File drivers/firmware/efi/vars.c:
578:	int __efivar_entry_delete(struct efivar_entry *);
883:	int __efivar_entry_get(struct efivar_entry *, u32 *, unsigned long *, void *);
1077:	int __efivar_entry_iter(int (*)(struct efivar_entry *, void *), struct list_head *, void *, struct efivar_entry **);
518:	int efivar_entry_add(struct efivar_entry *, struct list_head *);
604:	int efivar_entry_delete(struct efivar_entry *);
806:	struct efivar_entry *efivar_entry_find(efi_char16_t *, efi_guid_t, struct list_head *, bool);
906:	int efivar_entry_get(struct efivar_entry *, u32 *, unsigned long *, void *);
1122:	int efivar_entry_iter(int (*)(struct efivar_entry *, void *), struct list_head *, void *);
1038:	int efivar_entry_iter_begin(void);
1049:	void efivar_entry_iter_end(void);
535:	int efivar_entry_remove(struct efivar_entry *);
651:	int efivar_entry_set(struct efivar_entry *, u32, unsigned long, void *, struct list_head *);
950:	int efivar_entry_set_get_size(struct efivar_entry *, u32, unsigned long *, void *, bool *);
740:	int efivar_entry_set_safe(efi_char16_t *, efi_guid_t, u32, bool, unsigned long, void *);
847:	int efivar_entry_size(struct efivar_entry *, unsigned long *);
414:	int efivar_init(int (*)(efi_char16_t *, efi_guid_t, unsigned long, void *), void *, bool, struct list_head *);
1215:	int efivar_supports_writes(void);
237:	bool efivar_validate(efi_guid_t, efi_char16_t *, u8 *, unsigned long);
273:	bool efivar_variable_is_removable(efi_guid_t, const char *, size_t);
1143:	struct kobject *efivars_kobject(void);
1160:	int efivars_register(struct efivars *, const struct efivar_operations *, struct kobject *);
1187:	int efivars_unregister(struct efivars *);
384:	static void dup_variable_bug(efi_char16_t *, efi_guid_t *, unsigned long);
694:	static int efivar_entry_set_nonblocking(efi_char16_t *, efi_guid_t, u32, unsigned long, void *);
142:	static bool validate_ascii_string(efi_char16_t *, int, u8 *, unsigned long);
69:	static bool validate_boot_order(efi_char16_t *, int, u8 *, unsigned long);
36:	static bool validate_device_path(u8 *, unsigned long, int, efi_char16_t *);
80:	static bool validate_load_option(efi_char16_t *, int, u8 *, unsigned long);
131:	static bool validate_uint16(efi_char16_t *, int, u8 *, unsigned long);
333:	static bool variable_is_present(efi_char16_t *, efi_guid_t *, struct list_head *);

File drivers/firmware/iscsi_ibft_find.c:
87:	unsigned long find_ibft_region(unsigned long *);
50:	static int find_ibft_in_mem(void);

File drivers/firmware/memmap.c:
323:	int firmware_map_add_early(u64, u64, const char *);
281:	int firmware_map_add_hotplug(u64, u64, const char *);
345:	int firmware_map_remove(u64, u64, const char *);
175:	static int add_sysfs_fw_map_entry(struct firmware_map_entry *);
375:	static ssize_t end_show(struct firmware_map_entry *, char *);
141:	static int firmware_map_add_entry(u64, u64, const char *, struct firmware_map_entry *);
218:	static struct firmware_map_entry *firmware_map_find_entry_in_list(u64, u64, const char *, struct list_head *);
408:	static int firmware_memmap_init(void);
391:	static ssize_t memmap_attr_show(struct kobject *, struct attribute *, char *);
97:	static void release_firmware_map_entry(struct kobject *);
369:	static ssize_t start_show(struct firmware_map_entry *, char *);
381:	static ssize_t type_show(struct firmware_map_entry *, char *);

File drivers/firmware/qemu_fw_cfg.c:
493:	static int fw_cfg_build_symlink(struct kset *, struct kobject *, const char *);
91:	static ssize_t fw_cfg_dma_transfer(void *, u32, u32);
234:	static int fw_cfg_do_platform_probe(struct platform_device *);
201:	static void fw_cfg_io_cleanup(void);
563:	static void fw_cfg_kset_unregister_recursive(struct kset *);
131:	static ssize_t fw_cfg_read_blob(u16, void *, loff_t, size_t);
633:	static int fw_cfg_register_dir_entries(void);
582:	static int fw_cfg_register_file(const struct fw_cfg_file *);
302:	static ssize_t fw_cfg_showrev(struct kobject *, struct kobj_attribute *, char *);
433:	static ssize_t fw_cfg_sysfs_attr_show(struct kobject *, struct attribute *, char *);
929:	static void fw_cfg_sysfs_exit(void);
913:	static int fw_cfg_sysfs_init(void);
676:	static int fw_cfg_sysfs_probe(struct platform_device *);
463:	static ssize_t fw_cfg_sysfs_read_raw(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t, size_t);
447:	static void fw_cfg_sysfs_release_entry(struct kobject *);
736:	static int fw_cfg_sysfs_remove(struct platform_device *);
411:	static ssize_t fw_cfg_sysfs_show_key(struct fw_cfg_sysfs_entry *, char *);
416:	static ssize_t fw_cfg_sysfs_show_name(struct fw_cfg_sysfs_entry *, char *);
406:	static ssize_t fw_cfg_sysfs_show_size(struct fw_cfg_sysfs_entry *, char *);
323:	static ssize_t fw_cfg_write_vmcoreinfo(const struct fw_cfg_file *);

File drivers/gpio/gpiolib-acpi.c:
453:	int acpi_dev_add_driver_gpios(struct acpi_device *, const struct acpi_gpio_mapping *);
936:	int acpi_dev_gpio_irq_get_by(struct acpi_device *, const char *, int);
464:	void acpi_dev_remove_driver_gpios(struct acpi_device *);
824:	struct gpio_desc *acpi_find_gpio(struct device *, const char *, unsigned int, enum gpiod_flags *, unsigned long *);
1306:	int acpi_gpio_count(struct device *, const char *);
154:	bool acpi_gpio_get_irq_resource(struct acpi_resource *, struct acpi_resource_gpio **);
594:	int acpi_gpio_update_gpiod_flags(enum gpiod_flags *, struct acpi_gpio_info *);
613:	int acpi_gpio_update_gpiod_lookup_flags(unsigned long *, struct acpi_gpio_info *);
1202:	void acpi_gpiochip_add(struct gpio_chip *);
414:	void acpi_gpiochip_free_interrupts(struct gpio_chip *);
1238:	void acpi_gpiochip_remove(struct gpio_chip *);
372:	void acpi_gpiochip_request_interrupts(struct gpio_chip *);
889:	struct gpio_desc *acpi_node_get_gpiod(struct fwnode_handle *, const char *, int, struct acpi_gpio_info *);
476:	int devm_acpi_dev_add_driver_gpios(struct device *, const struct acpi_gpio_mapping *);
496:	void devm_acpi_dev_remove_driver_gpios(struct device *);
1287:	static int acpi_find_gpio_count(struct acpi_resource *, void *);
781:	static struct gpio_desc *acpi_get_gpiod_by_index(struct acpi_device *, const char *, int, struct acpi_gpio_info *);
986:	static acpi_status acpi_gpio_adr_space_handler(u32, acpi_physical_address, u32, u64 *, void *, void *);
149:	static void acpi_gpio_chip_dh(acpi_handle, void *);
1362:	static int acpi_gpio_handle_deferred_request_irqs(void);
208:	static bool acpi_gpio_in_ignore_list(const char *, int);
131:	static irqreturn_t acpi_gpio_irq_handler(int, void *);
140:	static irqreturn_t acpi_gpio_irq_handler_evt(int, void *);
719:	static int acpi_gpio_property_lookup(struct fwnode_handle *, const char *, int, struct acpi_gpio_lookup *);
694:	static int acpi_gpio_resource_lookup(struct acpi_gpio_lookup *, struct acpi_gpio_info *);
1478:	static int acpi_gpio_setup_params(void);
260:	static acpi_status acpi_gpiochip_alloc_event(struct acpi_resource *, void *);
96:	static int acpi_gpiochip_find(struct gpio_chip *, void *);
1109:	static void acpi_gpiochip_free_regions(struct acpi_gpio_chip *);
1132:	static struct gpio_desc *acpi_gpiochip_parse_own_gpio(struct fwnode_handle *, const char **, unsigned long *, enum gpiod_flags *, struct acpi_gpio_chip *, struct acpi_gpio_chip *);
171:	static void acpi_gpiochip_request_irq(struct acpi_gpio_chip *, struct acpi_gpio_event *);
200:	static void acpi_gpiochip_request_irqs(struct acpi_gpio_chip *);
1173:	static void acpi_gpiochip_scan_gpios(struct acpi_gpio_chip *, struct acpi_gpio_chip *);
642:	static int acpi_populate_gpio_lookup(struct acpi_resource *, void *);
471:	static void devm_acpi_dev_release_driver_gpios(struct device *, void *);

File drivers/gpio/gpiolib-cdev.c:
2338:	int gpiolib_cdev_register(struct gpio_device *, dev_t);
2356:	void gpiolib_cdev_unregister(struct gpio_device *);
621:	static irqreturn_t debounce_irq_handler(int, void *);
631:	static void debounce_work_func(struct work_struct *);
764:	static int edge_detector_setup(struct line *, struct gpio_v2_line_config *, unsigned int, u64);
584:	static irqreturn_t edge_irq_handler(int, void *);
532:	static irqreturn_t edge_irq_thread(int, void *);
2257:	static int gpio_chrdev_open(struct inode *, struct file *);
2311:	static int gpio_chrdev_release(struct inode *, struct file *);
1876:	static void gpio_desc_to_lineinfo(struct gpio_desc *, struct gpio_v2_line_info *);
2086:	static long gpio_ioctl(struct file *, unsigned int, unsigned long);
2122:	static long gpio_ioctl_compat(struct file *, unsigned int, unsigned long);
945:	static void gpio_v2_line_config_flags_to_desc_flags(u64, unsigned long *);
918:	static int gpio_v2_line_config_validate(struct gpio_v2_line_config *, unsigned int);
1832:	static void gpio_v2_line_info_to_v1(struct gpio_v2_line_info *, struct gpioline_info *);
1692:	static int lineevent_create(struct gpio_device *, void *);
1565:	static void lineevent_free(struct lineevent_state *);
1582:	static long lineevent_ioctl(struct file *, unsigned int, unsigned long);
1612:	static long lineevent_ioctl_compat(struct file *, unsigned int, unsigned long);
1679:	static irqreturn_t lineevent_irq_handler(int, void *);
1631:	static irqreturn_t lineevent_irq_thread(int, void *);
1470:	static __poll_t lineevent_poll(struct file *, struct poll_table_struct *);
1500:	static ssize_t lineevent_read(struct file *, char *, size_t, loff_t *);
1576:	static int lineevent_release(struct inode *, struct file *);
285:	static int linehandle_create(struct gpio_device *, void *);
134:	static void linehandle_flags_to_desc_flags(u32, unsigned long *);
193:	static long linehandle_ioctl(struct file *, unsigned int, unsigned long);
250:	static long linehandle_ioctl_compat(struct file *, unsigned int, unsigned long);
269:	static int linehandle_release(struct inode *, struct file *);
150:	static long linehandle_set_config(struct linehandle_state *, void *);
86:	static int linehandle_validate_flags(u32);
2135:	static int lineinfo_changed_notify(struct notifier_block *, unsigned long, void *);
2032:	static int lineinfo_get(struct gpio_chardev_data *, void *, bool);
1996:	static int lineinfo_get_v1(struct gpio_chardev_data *, void *, bool);
2160:	static __poll_t lineinfo_watch_poll(struct file *, struct poll_table_struct *);
2175:	static ssize_t lineinfo_watch_read(struct file *, char *, size_t, loff_t *);
1290:	static int linereq_create(struct gpio_device *, void *);
1255:	static void linereq_free(struct linereq *);
974:	static long linereq_get_values(struct linereq *, void *);
1162:	static long linereq_ioctl(struct file *, unsigned int, unsigned long);
1179:	static long linereq_ioctl_compat(struct file *, unsigned int, unsigned long);
1186:	static __poll_t linereq_poll(struct file *, struct poll_table_struct *);
514:	static void linereq_put_event(struct linereq *, struct gpio_v2_line_event *);
1201:	static ssize_t linereq_read(struct file *, char *, size_t, loff_t *);
1270:	static int linereq_release(struct inode *, struct file *);
1141:	static long linereq_set_config(struct linereq *, void *);
1094:	static long linereq_set_config_unlocked(struct linereq *, struct gpio_v2_line_config *);
1035:	static long linereq_set_values_unlocked(struct linereq *, struct gpio_v2_line_values *);

File drivers/gpio/gpiolib-devres.c:
202:	struct gpio_desc *devm_fwnode_gpiod_get_index(struct device *, struct fwnode_handle *, const char *, int, enum gpiod_flags, const char *);
474:	void devm_gpio_free(struct device *, unsigned int);
412:	int devm_gpio_request(struct device *, unsigned int, const char *);
441:	int devm_gpio_request_one(struct device *, unsigned int, unsigned long, const char *);
506:	int devm_gpiochip_add_data_with_key(struct device *, struct gpio_chip *, void *, struct lock_class_key *, struct lock_class_key *);
56:	struct gpio_desc *devm_gpiod_get(struct device *, const char *, enum gpiod_flags);
268:	struct gpio_descs *devm_gpiod_get_array(struct device *, const char *, enum gpiod_flags);
305:	struct gpio_descs *devm_gpiod_get_array_optional(struct device *, const char *, enum gpiod_flags);
147:	struct gpio_desc *devm_gpiod_get_from_of_node(struct device *, struct device_node *, const char *, int, enum gpiod_flags, const char *);
93:	struct gpio_desc *devm_gpiod_get_index(struct device *, const char *, unsigned int, enum gpiod_flags);
241:	struct gpio_desc *devm_gpiod_get_index_optional(struct device *, const char *, unsigned int, enum gpiod_flags);
74:	struct gpio_desc *devm_gpiod_get_optional(struct device *, const char *, enum gpiod_flags);
327:	void devm_gpiod_put(struct device *, struct gpio_desc *);
373:	void devm_gpiod_put_array(struct device *, struct gpio_descs *);
344:	void devm_gpiod_unhinge(struct device *, struct gpio_desc *);
482:	static void devm_gpio_chip_release(struct device *, void *);
390:	static int devm_gpio_match(struct device *, void *, void *);
383:	static void devm_gpio_release(struct device *, void *);
25:	static int devm_gpiod_match(struct device *, void *, void *);
39:	static int devm_gpiod_match_array(struct device *, void *, void *);
18:	static void devm_gpiod_release(struct device *, void *);
32:	static void devm_gpiod_release_array(struct device *, void *);

File drivers/gpio/gpiolib-legacy.c:
9:	void gpio_free(unsigned int);
108:	void gpio_free_array(const struct gpio *, size_t);
68:	int gpio_request(unsigned int, const char *);
85:	int gpio_request_array(const struct gpio *, size_t);
21:	int gpio_request_one(unsigned int, unsigned long, const char *);

File drivers/gpio/gpiolib-sysfs.c:
749:	int gpiochip_sysfs_register(struct gpio_device *);
787:	void gpiochip_sysfs_unregister(struct gpio_device *);
575:	int gpiod_export(struct gpio_desc *, bool);
678:	int gpiod_export_link(struct device *, const char *, struct gpio_desc *);
706:	void gpiod_unexport(struct gpio_desc *);
330:	static ssize_t active_low_show(struct device *, struct device_attribute *, char *);
347:	static ssize_t active_low_store(struct device *, struct device_attribute *, const char *, size_t);
413:	static ssize_t base_show(struct device *, struct device_attribute *, char *);
59:	static ssize_t direction_show(struct device *, struct device_attribute *, char *);
78:	static ssize_t direction_store(struct device *, struct device_attribute *, const char *, size_t);
242:	static ssize_t edge_show(struct device *, struct device_attribute *, char *);
263:	static ssize_t edge_store(struct device *, struct device_attribute *, const char *, size_t);
454:	static ssize_t export_store(struct class *, struct class_attribute *, const char *, size_t);
366:	static umode_t gpio_is_visible(struct kobject *, struct attribute *, int);
221:	static void gpio_sysfs_free_irq(struct device *, struct device *);
155:	static irqreturn_t gpio_sysfs_irq(int, void *);
165:	static int gpio_sysfs_request_irq(struct device *, unsigned char);
811:	static int gpiolib_sysfs_init(void);
422:	static ssize_t label_show(struct device *, struct device_attribute *, char *);
660:	static int match_export(struct device *, const void *);
431:	static ssize_t ngpio_show(struct device *, struct device_attribute *, char *);
509:	static ssize_t unexport_store(struct class *, struct class_attribute *, const char *, size_t);
102:	static ssize_t value_show(struct device *, struct device_attribute *, char *);
124:	static ssize_t value_store(struct device *, struct device_attribute *, const char *, size_t);

File drivers/gpio/gpiolib.c:
160:	int desc_to_gpio(const struct gpio_desc *);
4045:	struct gpio_desc *fwnode_get_named_gpiod(struct fwnode_handle *, const char *, int, enum gpiod_flags, const char *);
3782:	struct gpio_desc *fwnode_gpiod_get_index(struct fwnode_handle *, const char *, int, enum gpiod_flags, const char *);
104:	struct gpio_desc *gpio_to_desc(unsigned int);
567:	int gpiochip_add_data_with_key(struct gpio_chip *, void *, struct lock_class_key *, struct lock_class_key *);
1917:	int gpiochip_add_pin_range(struct gpio_chip *, const char *, unsigned int, unsigned int, unsigned int);
1859:	int gpiochip_add_pingroup_range(struct gpio_chip *, struct pinctrl_dev *, unsigned int, const char *);
3301:	void gpiochip_disable_irq(struct gpio_chip *, unsigned int);
3311:	void gpiochip_enable_irq(struct gpio_chip *, unsigned int);
869:	struct gpio_chip *gpiochip_find(void *, int (*)(struct gpio_chip *, void *));
2242:	void gpiochip_free_own_desc(struct gpio_desc *);
1838:	int gpiochip_generic_config(struct gpio_chip *, unsigned int, unsigned long);
1821:	void gpiochip_generic_free(struct gpio_chip *, unsigned int);
1805:	int gpiochip_generic_request(struct gpio_chip *, unsigned int);
802:	void *gpiochip_get_data(struct gpio_chip *);
138:	struct gpio_desc *gpiochip_get_desc(struct gpio_chip *, unsigned int);
1383:	int gpiochip_irq_domain_activate(struct irq_domain *, struct irq_data *, bool);
1401:	void gpiochip_irq_domain_deactivate(struct irq_domain *, struct irq_data *);
1310:	int gpiochip_irq_map(struct irq_domain *, unsigned int, irq_hw_number_t);
1350:	void gpiochip_irq_unmap(struct irq_domain *, unsigned int);
1763:	int gpiochip_irqchip_add_domain(struct gpio_chip *, struct irq_domain *);
1691:	int gpiochip_irqchip_add_key(struct gpio_chip *, struct irq_chip *, unsigned int, irq_flow_handler_t, unsigned int, bool, struct lock_class_key *, struct lock_class_key *);
940:	bool gpiochip_irqchip_irq_valid(const struct gpio_chip *, unsigned int);
2168:	const char *gpiochip_is_requested(struct gpio_chip *, unsigned int);
3328:	bool gpiochip_line_is_irq(struct gpio_chip *, unsigned int);
3361:	bool gpiochip_line_is_open_drain(struct gpio_chip *, unsigned int);
3370:	bool gpiochip_line_is_open_source(struct gpio_chip *, unsigned int);
3379:	bool gpiochip_line_is_persistent(struct gpio_chip *, unsigned int);
458:	bool gpiochip_line_is_valid(const struct gpio_chip *, unsigned int);
3230:	int gpiochip_lock_as_irq(struct gpio_chip *, unsigned int);
1265:	void *gpiochip_populate_parent_fwspec_fourcell(struct gpio_chip *, unsigned int, unsigned int);
1246:	void *gpiochip_populate_parent_fwspec_twocell(struct gpio_chip *, unsigned int, unsigned int);
3354:	void gpiochip_relres_irq(struct gpio_chip *, unsigned int);
814:	void gpiochip_remove(struct gpio_chip *);
1961:	void gpiochip_remove_pin_ranges(struct gpio_chip *);
3337:	int gpiochip_reqres_irq(struct gpio_chip *, unsigned int);
2206:	struct gpio_desc *gpiochip_request_own_desc(struct gpio_chip *, unsigned int, const char *, enum gpio_lookup_flags, enum gpiod_flags);
1005:	void gpiochip_set_nested_irqchip(struct gpio_chip *, struct irq_chip *, unsigned int);
3284:	void gpiochip_unlock_as_irq(struct gpio_chip *, unsigned int);
3620:	void gpiod_add_hogs(struct gpiod_hog *);
3592:	void gpiod_add_lookup_table(struct gpiod_lookup_table *);
3550:	void gpiod_add_lookup_tables(struct gpiod_lookup_table **, size_t);
3159:	int gpiod_cansleep(const struct gpio_desc *);
3879:	int gpiod_configure_flags(struct gpio_desc *, const char *, unsigned long, enum gpiod_flags);
3815:	int gpiod_count(struct device *, const char *);
2317:	int gpiod_direction_input(struct gpio_desc *);
2436:	int gpiod_direction_output(struct gpio_desc *, int);
2417:	int gpiod_direction_output_raw(struct gpio_desc *, int);
2145:	void gpiod_free(struct gpio_desc *);
3841:	struct gpio_desc *gpiod_get(struct device *, const char *, enum gpiod_flags);
4186:	struct gpio_descs *gpiod_get_array(struct device *, const char *, enum gpiod_flags);
4310:	struct gpio_descs *gpiod_get_array_optional(struct device *, const char *, enum gpiod_flags);
2846:	int gpiod_get_array_value(unsigned int, struct gpio_desc **, struct gpio_array *, unsigned long *);
3470:	int gpiod_get_array_value_cansleep(unsigned int, struct gpio_desc **, struct gpio_array *, unsigned long *);
2656:	int gpiod_get_array_value_complex(bool, bool, unsigned int, struct gpio_desc **, struct gpio_array *, unsigned long *);
211:	int gpiod_get_direction(struct gpio_desc *);
3949:	struct gpio_desc *gpiod_get_index(struct device *, const char *, unsigned int, enum gpiod_flags);
4104:	struct gpio_desc *gpiod_get_index_optional(struct device *, const char *, unsigned int, enum gpiod_flags);
3858:	struct gpio_desc *gpiod_get_optional(struct device *, const char *, enum gpiod_flags);
2820:	int gpiod_get_raw_array_value(unsigned int, struct gpio_desc **, struct gpio_array *, unsigned long *);
3444:	int gpiod_get_raw_array_value_cansleep(unsigned int, struct gpio_desc **, struct gpio_array *, unsigned long *);
2768:	int gpiod_get_raw_value(const struct gpio_desc *);
3397:	int gpiod_get_raw_value_cansleep(const struct gpio_desc *);
2787:	int gpiod_get_value(const struct gpio_desc *);
3414:	int gpiod_get_value_cansleep(const struct gpio_desc *);
4129:	int gpiod_hog(struct gpio_desc *, const char *, unsigned long, enum gpiod_flags);
2583:	int gpiod_is_active_low(const struct gpio_desc *);
4330:	void gpiod_put(struct gpio_desc *);
4341:	void gpiod_put_array(struct gpio_descs *);
3606:	void gpiod_remove_lookup_table(struct gpiod_lookup_table *);
2075:	int gpiod_request(struct gpio_desc *, const char *);
3141:	int gpiod_set_array_value(unsigned int, struct gpio_desc **, struct gpio_array *, unsigned long *);
3574:	int gpiod_set_array_value_cansleep(unsigned int, struct gpio_desc **, struct gpio_array *, unsigned long *);
2942:	int gpiod_set_array_value_complex(bool, bool, unsigned int, struct gpio_desc **, struct gpio_array *, unsigned long *);
2507:	int gpiod_set_config(struct gpio_desc *, unsigned long);
3171:	int gpiod_set_consumer_name(struct gpio_desc *, const char *);
2527:	int gpiod_set_debounce(struct gpio_desc *, unsigned int);
3116:	int gpiod_set_raw_array_value(unsigned int, struct gpio_desc **, struct gpio_array *, unsigned long *);
3532:	int gpiod_set_raw_array_value_cansleep(unsigned int, struct gpio_desc **, struct gpio_array *, unsigned long *);
3053:	void gpiod_set_raw_value(struct gpio_desc *, int);
3494:	void gpiod_set_raw_value_cansleep(struct gpio_desc *, int);
2544:	int gpiod_set_transitory(struct gpio_desc *, bool);
3094:	void gpiod_set_value(struct gpio_desc *, int);
3512:	void gpiod_set_value_cansleep(struct gpio_desc *, int);
171:	struct gpio_chip *gpiod_to_chip(const struct gpio_desc *);
3194:	int gpiod_to_irq(const struct gpio_desc *);
2594:	void gpiod_toggle_active_low(struct gpio_desc *);
370:	static int devprop_gpiochip_set_names(struct gpio_chip *, struct gpio_chip *);
2637:	static int gpio_chip_get_multiple(struct gpio_chip *, unsigned long *, unsigned long *);
2928:	static void gpio_chip_set_multiple(struct gpio_chip *, unsigned long *, unsigned long *);
299:	static struct gpio_desc *gpio_name_to_desc(const char * const);
2268:	static int gpio_set_config(struct gpio_desc *, enum pin_config_param);
2864:	static void gpio_set_open_drain_value_commit(struct gpio_desc *, bool);
2889:	static void gpio_set_open_source_value_commit(struct gpio_desc *, bool);
1527:	static int gpiochip_add_irqchip(struct gpio_chip *, struct lock_class_key *, struct lock_class_key *);
408:	static unsigned long *gpiochip_allocate_mask(struct gpio_chip *);
1186:	static unsigned int gpiochip_child_offset_to_irq_noop(struct gpio_chip *, unsigned int);
1114:	static int gpiochip_hierarchy_irq_domain_alloc(struct irq_domain *, unsigned int, unsigned int, void *);
1091:	static int gpiochip_hierarchy_irq_domain_translate(struct irq_domain *, struct irq_fwspec *, unsigned long *, unsigned int *);
1473:	static void gpiochip_irq_disable(struct irq_data *);
1465:	static void gpiochip_irq_enable(struct irq_data *);
1447:	static void gpiochip_irq_mask(struct irq_data *);
1440:	static void gpiochip_irq_relres(struct irq_data *);
1433:	static int gpiochip_irq_reqres(struct irq_data *);
1456:	static void gpiochip_irq_unmask(struct irq_data *);
1616:	static void gpiochip_irqchip_remove(struct gpio_chip *);
519:	static void gpiochip_machine_hog(struct gpio_chip *, struct gpiod_hog *);
1022:	static void gpiochip_set_hierarchical_irqchip(struct gpio_chip *, struct irq_chip *);
1481:	static void gpiochip_set_irq_hooks(struct gpio_chip *);
495:	static int gpiochip_setup_dev(struct gpio_device *);
1410:	static int gpiochip_to_irq(struct gpio_chip *, unsigned int);
2363:	static int gpiod_direction_output_raw_commit(struct gpio_desc *, int);
3674:	static struct gpio_desc *gpiod_find(struct device *, const char *, unsigned int, unsigned long *);
3643:	static struct gpiod_lookup_table *gpiod_find_lookup_table(struct device *);
2097:	static bool gpiod_free_commit(struct gpio_desc *);
2623:	static int gpiod_get_raw_value_commit(const struct gpio_desc *);
1981:	static int gpiod_request_commit(struct gpio_desc *, const char *);
2909:	static void gpiod_set_raw_value_commit(struct gpio_desc *, bool);
3071:	static void gpiod_set_value_nocheck(struct gpio_desc *, int);
252:	static int gpiodev_add_to_list(struct gpio_device *);
468:	static void gpiodevice_release(struct device *);
4383:	static void gpiolib_dbg_show(struct seq_file *, struct gpio_device *);
4500:	static int gpiolib_debugfs_init(void);
4352:	static int gpiolib_dev_init(void);
4498:	static int gpiolib_open(struct inode *, struct file *);
4435:	static void *gpiolib_seq_next(struct seq_file *, void *, loff_t *);
4458:	static int gpiolib_seq_show(struct seq_file *, void *);
4416:	static void *gpiolib_seq_start(struct seq_file *, loff_t *);
4454:	static void gpiolib_seq_stop(struct seq_file *, void *);
2043:	static int validate_desc(const struct gpio_desc *, const char *);

File drivers/gpu/drm/drm_mipi_dsi.c:
322:	int mipi_dsi_attach(struct mipi_dsi_device *);
561:	ssize_t mipi_dsi_compression_mode(struct mipi_dsi_device *, bool);
441:	int mipi_dsi_create_packet(struct mipi_dsi_packet *, const struct mipi_dsi_msg *);
894:	int mipi_dsi_dcs_enter_sleep_mode(struct mipi_dsi_device *);
913:	int mipi_dsi_dcs_exit_sleep_mode(struct mipi_dsi_device *);
1127:	int mipi_dsi_dcs_get_display_brightness(struct mipi_dsi_device *, u16 *);
870:	int mipi_dsi_dcs_get_pixel_format(struct mipi_dsi_device *, u8 *);
845:	int mipi_dsi_dcs_get_power_mode(struct mipi_dsi_device *, u8 *);
807:	int mipi_dsi_dcs_nop(struct mipi_dsi_device *);
785:	ssize_t mipi_dsi_dcs_read(struct mipi_dsi_device *, u8, void *, size_t);
972:	int mipi_dsi_dcs_set_column_address(struct mipi_dsi_device *, u16, u16);
1104:	int mipi_dsi_dcs_set_display_brightness(struct mipi_dsi_device *, u16);
932:	int mipi_dsi_dcs_set_display_off(struct mipi_dsi_device *);
951:	int mipi_dsi_dcs_set_display_on(struct mipi_dsi_device *);
996:	int mipi_dsi_dcs_set_page_address(struct mipi_dsi_device *, u16, u16);
1061:	int mipi_dsi_dcs_set_pixel_format(struct mipi_dsi_device *, u8);
1018:	int mipi_dsi_dcs_set_tear_off(struct mipi_dsi_device *);
1038:	int mipi_dsi_dcs_set_tear_on(struct mipi_dsi_device *, enum mipi_dsi_dcs_tear_mode);
1082:	int mipi_dsi_dcs_set_tear_scanline(struct mipi_dsi_device *, u16);
825:	int mipi_dsi_dcs_soft_reset(struct mipi_dsi_device *);
745:	ssize_t mipi_dsi_dcs_write(struct mipi_dsi_device *, u8, const void *, size_t);
702:	ssize_t mipi_dsi_dcs_write_buffer(struct mipi_dsi_device *, const void *, size_t);
337:	int mipi_dsi_detach(struct mipi_dsi_device *);
201:	struct mipi_dsi_device *mipi_dsi_device_register_full(struct mipi_dsi_host *, const struct mipi_dsi_device_info *);
243:	void mipi_dsi_device_unregister(struct mipi_dsi_device *);
1176:	int mipi_dsi_driver_register_full(struct mipi_dsi_driver *, struct module *);
1199:	void mipi_dsi_driver_unregister(struct mipi_dsi_driver *);
658:	ssize_t mipi_dsi_generic_read(struct mipi_dsi_device *, const void *, size_t, void *, size_t);
613:	ssize_t mipi_dsi_generic_write(struct mipi_dsi_device *, const void *, size_t);
280:	int mipi_dsi_host_register(struct mipi_dsi_host *);
308:	void mipi_dsi_host_unregister(struct mipi_dsi_host *);
407:	bool mipi_dsi_packet_format_is_long(u8);
369:	bool mipi_dsi_packet_format_is_short(u8);
586:	ssize_t mipi_dsi_picture_parameter_set(struct mipi_dsi_device *, const struct drm_dsc_picture_parameter_set *);
535:	int mipi_dsi_set_maximum_return_packet_size(struct mipi_dsi_device *, u16);
492:	int mipi_dsi_shutdown_peripheral(struct mipi_dsi_device *);
512:	int mipi_dsi_turn_on_peripheral(struct mipi_dsi_device *);
106:	struct mipi_dsi_device *of_find_mipi_dsi_device_by_node(struct device_node *);
261:	struct mipi_dsi_host *of_find_mipi_dsi_host_by_node(struct device_node *);
1205:	static int mipi_dsi_bus_init(void);
116:	static void mipi_dsi_dev_release(struct device *);
50:	static int mipi_dsi_device_match(struct device *, struct device_driver *);
348:	static ssize_t mipi_dsi_device_transfer(struct mipi_dsi_device *, struct mipi_dsi_msg *);
1145:	static int mipi_dsi_drv_probe(struct device *);
1153:	static int mipi_dsi_drv_remove(struct device *);
1161:	static void mipi_dsi_drv_shutdown(struct device *);
299:	static int mipi_dsi_remove_device_fn(struct device *, void *);
65:	static int mipi_dsi_uevent(struct device *, struct kobj_uevent_env *);

File drivers/gpu/drm/drm_panel_orientation_quirks.c:
300:	int drm_get_panel_orientation_quirk(int, int);

File drivers/gpu/vga/vga_switcheroo.c:
527:	void vga_switcheroo_client_fb_set(struct pci_dev *, struct fb_info *);
438:	bool vga_switcheroo_client_probe_defer(struct pci_dev *);
1079:	void vga_switcheroo_fini_domain_pm_ops(struct device *);
476:	enum vga_switcheroo_state vga_switcheroo_get_client_state(struct pci_dev *);
285:	enum vga_switcheroo_handler_flags_t vga_switcheroo_handler_flags(void);
1062:	int vga_switcheroo_init_domain_pm_ops(struct device *, struct dev_pm_domain *);
559:	int vga_switcheroo_lock_ddc(struct pci_dev *);
936:	int vga_switcheroo_process_delayed_switch(void);
362:	int vga_switcheroo_register_audio_client(struct pci_dev *, const struct vga_switcheroo_client_ops *, struct pci_dev *);
339:	int vga_switcheroo_register_client(struct pci_dev *, const struct vga_switcheroo_client_ops *, bool);
235:	int vga_switcheroo_register_handler(const struct vga_switcheroo_handler *, enum vga_switcheroo_handler_flags_t);
591:	int vga_switcheroo_unlock_ddc(struct pci_dev *);
498:	void vga_switcheroo_unregister_client(struct pci_dev *);
261:	void vga_switcheroo_unregister_handler(void);
761:	static bool check_can_switch(void);
291:	static int register_client(struct pci_dev *, const struct vga_switcheroo_client_ops *, enum vga_switcheroo_client_id, struct pci_dev *, bool, bool);
696:	static void set_audio_state(enum vga_switcheroo_client_id, enum vga_switcheroo_state);
667:	static int vga_switcheroo_debugfs_open(struct inode *, struct file *);
775:	static ssize_t vga_switcheroo_debugfs_write(struct file *, const char *, size_t, loff_t *);
186:	static void vga_switcheroo_enable(void);
995:	static void vga_switcheroo_power_switch(struct pci_dev *, enum vga_switcheroo_state);
1034:	static int vga_switcheroo_runtime_resume(struct device *);
1014:	static int vga_switcheroo_runtime_suspend(struct device *);
646:	static int vga_switcheroo_show(struct seq_file *, void *);
684:	static int vga_switchoff(struct vga_switcheroo_client *);
672:	static int vga_switchon(struct vga_switcheroo_client *);
707:	static int vga_switchto_stage1(struct vga_switcheroo_client *);
723:	static int vga_switchto_stage2(struct vga_switcheroo_client *);

File drivers/gpu/vga/vgaarb.c:
879:	int vga_client_register(struct pci_dev *, void *, void (*)(void *, bool), unsigned int (*)(void *, bool));
158:	struct pci_dev *vga_default_device(void);
465:	int vga_get(struct pci_dev *, unsigned int, int);
568:	void vga_put(struct pci_dev *, unsigned int);
194:	int vga_remove_vgacon(struct pci_dev *);
164:	void vga_set_default_device(struct pci_dev *);
842:	void vga_set_legacy_decoding(struct pci_dev *, unsigned int);
391:	static void __vga_put(struct vga_device *, unsigned int);
813:	static void __vga_set_legacy_decoding(struct pci_dev *, unsigned int, bool);
241:	static struct vga_device *__vga_tryget(struct vga_device *, unsigned int);
1414:	static int pci_notify(struct notifier_block *, unsigned long, void *);
1533:	static int vga_arb_device_init(void);
1317:	static __poll_t vga_arb_fpoll(struct file *, poll_table *);
1325:	static int vga_arb_open(struct inode *, struct file *);
1002:	static ssize_t vga_arb_read(struct file *, char *, size_t, loff_t *);
1352:	static int vga_arb_release(struct inode *, struct file *);
1453:	static void vga_arb_select_default_device(void);
1069:	static ssize_t vga_arb_write(struct file *, const char *, size_t, loff_t *);
653:	static bool vga_arbiter_add_pci_device(struct pci_dev *);
742:	static bool vga_arbiter_del_pci_device(struct pci_dev *);
1389:	static void vga_arbiter_notify_clients(void);
87:	static const char *vga_iostate_to_str(unsigned int);
102:	static int vga_str_to_iostate(char *, int *, int);

File drivers/hid/hid-core.c:
2542:	int __hid_register_driver(struct hid_driver *, struct module *, const char *);
1709:	int __hid_request(struct hid_device *, struct hid_report *, int);
2388:	int hid_add_device(struct hid_device *);
1642:	u8 *hid_alloc_report_buf(struct hid_report *, gfp_t);
2458:	struct hid_device *hid_allocate_device(void);
2574:	int hid_check_keys_pressed(struct hid_device *);
2231:	bool hid_compare_device_paths(struct hid_device *, struct hid_device *, char);
1931:	int hid_connect(struct hid_device *, unsigned int);
2504:	void hid_destroy_device(struct hid_device *);
2028:	void hid_disconnect(struct hid_device *);
1372:	__u32 hid_field_extract(const struct hid_device *, u8 *, unsigned int, unsigned int);
2120:	void hid_hw_close(struct hid_device *);
2092:	int hid_hw_open(struct hid_device *);
2050:	int hid_hw_start(struct hid_device *, unsigned int);
2077:	void hid_hw_stop(struct hid_device *);
1810:	int hid_input_report(struct hid_device *, int, u8 *, u32, int);
2195:	const struct hid_device_id *hid_match_device(struct hid_device *, struct hid_driver *);
1870:	const struct hid_device_id *hid_match_id(const struct hid_device *, const struct hid_device_id *);
1861:	bool hid_match_one_id(const struct hid_device *, const struct hid_device_id *);
1190:	int hid_open_report(struct hid_device *);
1626:	void hid_output_report(struct hid_report *, __u8 *);
937:	int hid_parse_report(struct hid_device *, __u8 *, unsigned int);
57:	struct hid_report *hid_register_report(struct hid_device *, unsigned int, unsigned int, unsigned int);
1743:	int hid_report_raw_event(struct hid_device *, int, u8 *, u32, int);
1661:	int hid_set_field(struct hid_field *, unsigned int, __s32);
1153:	void hid_setup_resolution_multiplier(struct hid_device *);
1321:	s32 hid_snto32(__u32, unsigned int);
2565:	void hid_unregister_driver(struct hid_driver *);
964:	struct hid_report *hid_validate_values(struct hid_device *, unsigned int, unsigned int, unsigned int, unsigned int);
2537:	static int __bus_removed_driver(struct device_driver *, void *);
2525:	static int __hid_bus_driver_added(struct device_driver *, void *);
2512:	static int __hid_bus_reprobe_drivers(struct device *, void *);
715:	static u8 *fetch_item(__u8 *, __u8 *, struct hid_item *);
257:	static int hid_add_field(struct hid_parser *, unsigned int, unsigned int);
230:	static int hid_add_usage(struct hid_parser *, unsigned int, u8);
1084:	static void hid_apply_multiplier(struct hid_device *, struct hid_field *);
2213:	static int hid_bus_match(struct device *, struct device_driver *);
668:	static void hid_close_report(struct hid_device *);
572:	static void hid_concatenate_last_usage_page(struct hid_parser *);
2244:	static int hid_device_probe(struct device *);
701:	static void hid_device_release(struct device *);
2305:	static int hid_device_remove(struct device *);
2620:	static void hid_exit(void);
2183:	static void hid_free_dynids(struct hid_driver *);
2593:	static int hid_init(void);
1533:	static void hid_input_field(struct hid_device *, struct hid_field *, __u8 *, int);
367:	static int hid_parser_global(struct hid_parser *, struct hid_item *);
473:	static int hid_parser_local(struct hid_parser *, struct hid_item *);
604:	static int hid_parser_main(struct hid_parser *, struct hid_item *);
643:	static int hid_parser_reserved(struct hid_parser *, struct hid_item *);
1502:	static void hid_process_event(struct hid_device *, struct hid_field *, struct hid_usage *, __s32, int);
93:	static struct hid_field *hid_register_field(struct hid_report *, unsigned int);
796:	static void hid_scan_collection(struct hid_parser *, unsigned int);
826:	static int hid_scan_main(struct hid_parser *, struct hid_item *);
867:	static int hid_scan_report(struct hid_device *);
2353:	static int hid_uevent(struct device *, struct kobj_uevent_env *);
1418:	static void implement(const struct hid_device *, u8 *, unsigned int, unsigned int, u32);
2329:	static ssize_t modalias_show(struct device *, struct device_attribute *, char *);
2143:	static ssize_t new_id_store(struct device_driver *, const char *, size_t);
121:	static int open_collection(struct hid_parser *, unsigned int);
1893:	static ssize_t read_report_descriptor(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t, size_t);
1912:	static ssize_t show_country(struct device *, struct device_attribute *, char *);
1308:	static s32 snto32(__u32, unsigned int);

File drivers/hid/hid-debug.c:
651:	void hid_debug_event(struct hid_device *, char *);
1214:	void hid_debug_exit(void);
1209:	void hid_debug_init(void);
1190:	void hid_debug_register(struct hid_device *, const char *);
1200:	void hid_debug_unregister(struct hid_device *);
620:	void hid_dump_device(struct hid_device *, struct seq_file *);
522:	void hid_dump_field(struct hid_field *, int, struct seq_file *);
695:	void hid_dump_input(struct hid_device *, struct hid_usage *, __s32);
665:	void hid_dump_report(struct hid_device *, int, u8 *, int);
473:	char *hid_resolv_usage(unsigned int, struct seq_file *);
1064:	static int hid_debug_events_open(struct inode *, struct file *);
1152:	static __poll_t hid_debug_events_poll(struct file *, poll_table *);
1092:	static ssize_t hid_debug_events_read(struct file *, char *, size_t, loff_t *);
1164:	static int hid_debug_events_release(struct inode *, struct file *);
1178:	static int hid_debug_rdesc_open(struct inode *, struct file *);
1034:	static int hid_debug_rdesc_show(struct seq_file *, void *);
1012:	static void hid_dump_input_mapping(struct hid_device *, struct seq_file *);

File drivers/hid/hid-generic.c:
26:	static int __check_hid_generic(struct device_driver *, void *);
82:	static void hid_generic_exit(void);
82:	static int hid_generic_init(void);
37:	static bool hid_generic_match(struct hid_device *, bool);
56:	static int hid_generic_probe(struct hid_device *, const struct hid_device_id *);

File drivers/hid/hid-input.c:
199:	__s32 hidinput_calc_abs_res(const struct hid_field *, __u16);
1876:	int hidinput_connect(struct hid_device *, unsigned int);
1460:	unsigned int hidinput_count_leds(struct hid_device *);
1979:	void hidinput_disconnect(struct hid_device *);
1423:	int hidinput_find_field(struct hid_device *, unsigned int, unsigned int, struct hid_field **);
1440:	struct hid_field *hidinput_get_led_field(struct hid_device *);
1273:	void hidinput_hid_event(struct hid_device *, struct hid_field *, struct hid_usage *, __s32);
1411:	void hidinput_report_event(struct hid_device *, struct hid_report *);
1568:	static bool __hidinput_change_resolution_multipliers(struct hid_device *, struct hid_report *, bool);
1678:	static struct hid_input *hidinput_allocate(struct hid_device *, unsigned int);
1805:	static void hidinput_cleanup_hidinput(struct hid_device *, struct hid_input *);
1561:	static void hidinput_close(struct input_dev *);
562:	static void hidinput_configure_usage(struct hid_input *, struct hid_field *, struct hid_usage *);
374:	static int hidinput_get_battery_property(struct power_supply *, enum power_supply_property, union power_supply_propval *);
131:	static int hidinput_getkeycode(struct input_dev *, struct input_keymap_entry *);
1770:	static bool hidinput_has_been_populated(struct hid_input *);
1530:	static int hidinput_input_event(struct input_dev *, unsigned int, unsigned int, int);
1482:	static void hidinput_led_worker(struct work_struct *);
114:	static struct hid_usage *hidinput_locate_usage(struct hid_device *, const struct input_keymap_entry *, unsigned int *);
1554:	static int hidinput_open(struct input_dev *);
353:	static int hidinput_query_battery_capacity(struct hid_device *);
152:	static int hidinput_setkeycode(struct input_dev *, const struct input_keymap_entry *, unsigned int *);
434:	static int hidinput_setup_battery(struct hid_device *, unsigned int, struct hid_field *);
1649:	static void report_features(struct hid_device *);

File drivers/hid/hid-magicmouse.c:
717:	static void magicmouse_driver_exit(void);
717:	static int magicmouse_driver_init(void);
155:	static void magicmouse_emit_buttons(struct magicmouse_sc *, int);
192:	static void magicmouse_emit_touch(struct magicmouse_sc *, int, u8 *);
565:	static int magicmouse_input_configured(struct hid_device *, struct hid_input *);
547:	static int magicmouse_input_mapping(struct hid_device *, struct hid_input *, struct hid_field *, struct hid_usage *, unsigned long **, int *);
584:	static int magicmouse_probe(struct hid_device *, const struct hid_device_id *);
308:	static int magicmouse_raw_event(struct hid_device *, struct hid_report *, u8 *, int);
411:	static int magicmouse_setup_input(struct input_dev *, struct hid_device *);
34:	static int param_set_scroll_speed(const char *, const struct kernel_param *);

File drivers/hid/hid-ntrig.c:
1030:	static void ntrig_driver_exit(void);
1030:	static int ntrig_driver_init(void);
566:	static int ntrig_event(struct hid_device *, struct hid_field *, struct hid_usage *, __s32);
858:	static int ntrig_input_configured(struct hid_device *, struct hid_input *);
545:	static int ntrig_input_mapped(struct hid_device *, struct hid_input *, struct hid_field *, struct hid_usage *, unsigned long **, int *);
454:	static int ntrig_input_mapping(struct hid_device *, struct hid_input *, struct hid_field *, struct hid_usage *, unsigned long **, int *);
893:	static int ntrig_probe(struct hid_device *, const struct hid_device_id *);
963:	static void ntrig_remove(struct hid_device *);
140:	static void ntrig_report_version(struct hid_device *);
297:	static ssize_t set_activate_slack(struct device *, struct device_attribute *, const char *, size_t);
368:	static ssize_t set_activation_height(struct device *, struct device_attribute *, const char *, size_t);
332:	static ssize_t set_activation_width(struct device *, struct device_attribute *, const char *, size_t);
402:	static ssize_t set_deactivate_slack(struct device *, struct device_attribute *, const char *, size_t);
263:	static ssize_t set_min_height(struct device *, struct device_attribute *, const char *, size_t);
228:	static ssize_t set_min_width(struct device *, struct device_attribute *, const char *, size_t);
287:	static ssize_t show_activate_slack(struct device *, struct device_attribute *, char *);
356:	static ssize_t show_activation_height(struct device *, struct device_attribute *, char *);
320:	static ssize_t show_activation_width(struct device *, struct device_attribute *, char *);
392:	static ssize_t show_deactivate_slack(struct device *, struct device_attribute *, char *);
204:	static ssize_t show_log_height(struct device *, struct device_attribute *, char *);
192:	static ssize_t show_log_width(struct device *, struct device_attribute *, char *);
251:	static ssize_t show_min_height(struct device *, struct device_attribute *, char *);
216:	static ssize_t show_min_width(struct device *, struct device_attribute *, char *);
180:	static ssize_t show_phys_height(struct device *, struct device_attribute *, char *);
168:	static ssize_t show_phys_width(struct device *, struct device_attribute *, char *);

File drivers/hid/hid-quirks.c:
935:	bool hid_ignore(struct hid_device *);
1239:	unsigned long hid_lookup_quirk(const struct hid_device *);
1193:	void hid_quirks_exit(__u16);
1154:	int hid_quirks_init(char **, __u16, int);
1078:	static int hid_modify_dquirk(const struct hid_device_id *, const unsigned long);

File drivers/hid/hid-sensor-hub.c:
353:	int hid_sensor_get_usage_index(struct hid_sensor_hub_device *, u32, int, u32);
570:	void sensor_hub_device_close(struct hid_sensor_hub_device *);
549:	int sensor_hub_device_open(struct hid_sensor_hub_device *);
239:	int sensor_hub_get_feature(struct hid_sensor_hub_device *, u32, u32, int, void *);
291:	int sensor_hub_input_attr_get_raw_value(struct hid_sensor_hub_device *, u32, u32, u32, enum sensor_hub_read_flags, bool);
375:	int sensor_hub_input_get_attribute_info(struct hid_sensor_hub_device *, u8, u32, u32, struct hid_sensor_hub_attribute_info *);
128:	int sensor_hub_register_callback(struct hid_sensor_hub_device *, u32, struct hid_sensor_hub_callbacks *);
170:	int sensor_hub_remove_callback(struct hid_sensor_hub_device *, u32);
191:	int sensor_hub_set_feature(struct hid_sensor_hub_device *, u32, u32, int, void *);
774:	static void sensor_hub_driver_exit(void);
774:	static int sensor_hub_driver_init(void);
604:	static int sensor_hub_probe(struct hid_device *, const struct hid_device_id *);
471:	static int sensor_hub_raw_event(struct hid_device *, struct hid_report *, u8 *, int);
733:	static void sensor_hub_remove(struct hid_device *);
582:	static __u8 *sensor_hub_report_fixup(struct hid_device *, __u8 *, unsigned int *);
462:	static int sensor_hub_reset_resume(struct hid_device *);
444:	static int sensor_hub_resume(struct hid_device *);
426:	static int sensor_hub_suspend(struct hid_device *, pm_message_t);

File drivers/hid/hidraw.c:
514:	int hidraw_connect(struct hid_device *);
571:	void hidraw_disconnect(struct hid_device *);
619:	void hidraw_exit(void);
583:	int hidraw_init(void);
485:	int hidraw_report_event(struct hid_device *, u8 *, int);
319:	static void drop_ref(struct hidraw *, int);
312:	static int hidraw_fasync(int, struct file *, int);
177:	static ssize_t hidraw_get_report(char *, size_t, unsigned char, struct file *, struct file *);
363:	static long hidraw_ioctl(struct file *, unsigned int, unsigned long);
262:	static int hidraw_open(struct inode *, struct file *);
249:	static __poll_t hidraw_poll(struct file *, poll_table *);
39:	static ssize_t hidraw_read(struct file *, char *, size_t, loff_t *);
344:	static int hidraw_release(struct inode *, struct file *);
103:	static ssize_t hidraw_send_report(const char *, size_t, unsigned char, struct file *, struct file *);
160:	static ssize_t hidraw_write(struct file *, const char *, size_t, loff_t *);

File drivers/hid/usbhid/hid-core.c:
1674:	struct usb_interface *usbhid_find_interface(int);
769:	void usbhid_init_reports(struct hid_device *);
523:	static void __usbhid_submit_report(struct hid_device *, struct hid_report *, unsigned char);
853:	static int hid_alloc_buffers(struct usb_device *, struct hid_device *, struct hid_device *);
476:	static void hid_ctrl(struct urb *);
1698:	static void hid_exit(void);
971:	static void hid_free_buffers(struct usb_device *, struct hid_device *, struct hid_device *);
664:	static int hid_get_class_descriptor(struct usb_device *, int, void *, int, unsigned char);
1679:	static int hid_init(void);
143:	static void hid_io_error(struct hid_device *, struct hid_device *);
271:	static void hid_irq_in(struct urb *);
429:	static void hid_irq_out(struct urb *);
1509:	static int hid_post_reset(struct usb_interface *);
1495:	static int hid_pre_reset(struct usb_interface *);
116:	static void hid_reset(struct work_struct *);
1635:	static int hid_reset_resume(struct usb_interface *);
1463:	static void hid_restart_io(struct hid_device *, struct hid_device *);
1625:	static int hid_resume(struct usb_interface *);
105:	static void hid_retry_timeout(struct timer_list *);
80:	static int hid_start_in(struct hid_device *, struct hid_device *);
365:	static int hid_submit_ctrl(struct hid_device *);
335:	static int hid_submit_out(struct hid_device *);
1565:	static int hid_suspend(struct usb_interface *, pm_message_t);
739:	static void usbhid_close(struct hid_device *);
1433:	static void usbhid_disconnect(struct usb_interface *);
1302:	static int usbhid_idle(struct hid_device *, int, int, int);
680:	static int usbhid_open(struct hid_device *);
941:	static int usbhid_output_report(struct hid_device *, __u8 *, size_t);
981:	static int usbhid_parse(struct hid_device *);
1258:	static int usbhid_power(struct hid_device *, int);
1331:	static int usbhid_probe(struct usb_interface *, const struct usb_device_id *);
1288:	static int usbhid_raw_request(struct hid_device *, unsigned char, __u8 *, size_t, unsigned char, int);
1276:	static void usbhid_request(struct hid_device *, struct hid_report *, int);
228:	static int usbhid_restart_ctrl_queue(struct usbhid_device *);
190:	static int usbhid_restart_out_queue(struct usbhid_device *);
826:	static void usbhid_set_leds(struct hid_device *);
1062:	static int usbhid_start(struct hid_device *);
1209:	static void usbhid_stop(struct hid_device *);
642:	static int usbhid_wait_io(struct hid_device *);

File drivers/hid/usbhid/hid-pidff.c:
1226:	int hid_pidff_init(struct hid_device *);
719:	static void pidff_autocenter(struct pidff_device *, u16);
533:	static int pidff_erase_effect(struct input_dev *, int);
1003:	static int pidff_find_effects(struct pidff_device *, struct input_dev *);
758:	static int pidff_find_fields(struct pidff_usage *, const u8 *, struct hid_report *, int, int);
812:	static void pidff_find_reports(struct hid_device *, int, struct pidff_device *);
920:	static int pidff_find_special_fields(struct pidff_device *);
1063:	static int pidff_init_fields(struct pidff_device *, struct input_dev *);
398:	static int pidff_needs_set_condition(struct ff_effect *, struct ff_effect *);
511:	static int pidff_playback(struct input_dev *, int, int);
491:	static void pidff_playback_pid(struct pidff_device *, int, int);
451:	static int pidff_request_effect_upload(struct pidff_device *, int);
1148:	static void pidff_reset(struct pidff_device *);
208:	static void pidff_set(struct pidff_usage *, u16);
748:	static void pidff_set_autocenter(struct input_dev *, u16);
368:	static void pidff_set_condition_report(struct pidff_device *, struct ff_effect *);
297:	static void pidff_set_effect_report(struct pidff_device *, struct ff_effect *);
232:	static void pidff_set_envelope_report(struct pidff_device *, struct ff_envelope *);
710:	static void pidff_set_gain(struct input_dev *, u16);
214:	static void pidff_set_signed(struct pidff_usage *, s16);
552:	static int pidff_upload_effect(struct input_dev *, struct ff_effect *, struct ff_effect *);

File drivers/hid/usbhid/hiddev.c:
875:	int hiddev_connect(struct hid_device *, unsigned int);
927:	void hiddev_disconnect(struct hid_device *);
166:	void hiddev_hid_event(struct hid_device *, struct hid_field *, struct hid_usage *, __s32);
186:	void hiddev_report_event(struct hid_device *, struct hid_report *);
244:	static int __hiddev_open(struct hiddev *, struct file *);
860:	static char *hiddev_devnode(struct device *, umode_t *);
205:	static int hiddev_fasync(int, struct file *, int);
594:	static long hiddev_ioctl(struct file *, unsigned int, unsigned long);
566:	static int hiddev_ioctl_string(void *, unsigned int, struct hiddev *, struct hiddev *);
427:	static int hiddev_ioctl_usage(unsigned int, void *, struct hiddev *, struct hiddev *);
56:	static struct hid_report *hiddev_lookup_report(struct hid_device *, struct hiddev_report_info *);
287:	static int hiddev_open(struct inode *, struct file *);
412:	static __poll_t hiddev_poll(struct file *, poll_table *);
319:	static ssize_t hiddev_read(struct file *, char *, size_t, loff_t *);
216:	static int hiddev_release(struct inode *, struct file *);
140:	static void hiddev_send_event(struct hiddev_usage_ref *, struct hid_device *, struct hid_device *);
311:	static ssize_t hiddev_write(struct file *, const char *, size_t, loff_t *);

File drivers/hwmon/hwmon.c:
903:	struct device *devm_hwmon_device_register_with_groups(struct device *, const char *, void *, const struct attribute_group **);
942:	struct device *devm_hwmon_device_register_with_info(struct device *, const char *, void *, const struct hwmon_chip_info *, const struct attribute_group **);
984:	void devm_hwmon_device_unregister(struct device *);
858:	struct device *hwmon_device_register(struct device *);
806:	struct device *hwmon_device_register_with_groups(struct device *, const char *, void *, const struct attribute_group **);
831:	struct device *hwmon_device_register_with_info(struct device *, const char *, void *, const struct hwmon_chip_info *, const struct attribute_group **);
872:	void hwmon_device_unregister(struct device *);
587:	int hwmon_notify_event(struct device *, enum hwmon_sensor_types, u32, int);
666:	static struct attribute **__hwmon_create_attrs(const void *, const struct hwmon_chip_info *);
695:	static struct device *__hwmon_device_register(struct device *, const char *, void *, const struct hwmon_chip_info *, const struct attribute_group **);
972:	static int devm_hwmon_match(struct device *, void *, void *);
885:	static void devm_hwmon_release(struct device *, void *);
261:	static ssize_t hwmon_attr_show(struct device *, struct device_attribute *, char *);
279:	static ssize_t hwmon_attr_show_string(struct device *, struct device_attribute *, char *);
299:	static ssize_t hwmon_attr_store(struct device *, struct device_attribute *, const char *, size_t);
79:	static umode_t hwmon_dev_name_is_visible(struct kobject *, struct attribute *, int);
113:	static void hwmon_dev_release(struct device *);
1032:	static void hwmon_exit(void);
626:	static int hwmon_genattrs(const void *, struct attribute **, const struct hwmon_ops *, const struct hwmon_channel_info *);
1018:	static int hwmon_init(void);
616:	static int hwmon_num_channel_attrs(const struct hwmon_channel_info *, const struct hwmon_channel_info *);
990:	static void hwmon_pci_quirks(void);
68:	static ssize_t name_show(struct device *, struct device_attribute *, char *);

File drivers/hwspinlock/hwspinlock_core.c:
206:	int __hwspin_lock_timeout(struct hwspinlock *, unsigned int, int, unsigned long *);
91:	int __hwspin_trylock(struct hwspinlock *, int, unsigned long *);
265:	void __hwspin_unlock(struct hwspinlock *, int, unsigned long *);
870:	int devm_hwspin_lock_free(struct device *, struct hwspinlock *);
612:	int devm_hwspin_lock_register(struct device *, struct hwspinlock_device *, const struct hwspinlock_ops *, int, int);
896:	struct hwspinlock *devm_hwspin_lock_request(struct device *);
931:	struct hwspinlock *devm_hwspin_lock_request_specific(struct device *, unsigned int);
583:	int devm_hwspin_lock_unregister(struct device *, struct hwspinlock_device *);
800:	int hwspin_lock_free(struct hwspinlock *);
685:	int hwspin_lock_get_id(struct hwspinlock *);
486:	int hwspin_lock_register(struct hwspinlock_device *, struct device *, const struct hwspinlock_ops *, int, int);
709:	struct hwspinlock *hwspin_lock_request(void);
752:	struct hwspinlock *hwspin_lock_request_specific(unsigned int);
534:	int hwspin_lock_unregister(struct hwspinlock_device *);
339:	int of_hwspin_lock_get_id(struct device_node *, int);
406:	int of_hwspin_lock_get_id_byname(struct device_node *, const char *);
646:	static int __hwspin_lock_request(struct hwspinlock *);
559:	static int devm_hwspin_lock_device_match(struct device *, void *, void *);
842:	static int devm_hwspin_lock_match(struct device *, void *, void *);
852:	static void devm_hwspin_lock_release(struct device *, void *);
554:	static void devm_hwspin_lock_unreg(struct device *, void *);
446:	static struct hwspinlock *hwspin_lock_unregister_single(unsigned int);

File drivers/i2c/i2c-boardinfo.c:
52:	int i2c_register_board_info(int, const struct i2c_board_info *, unsigned int);

File drivers/i2c/i2c-core-acpi.c:
383:	struct i2c_adapter *i2c_acpi_find_adapter_by_handle(acpi_handle);
335:	u32 i2c_acpi_find_bus_speed(struct device *);
55:	bool i2c_acpi_get_i2c_resource(struct acpi_resource *, struct acpi_resource_i2c_serialbus **);
155:	int i2c_acpi_get_irq(struct i2c_client *);
695:	int i2c_acpi_install_space_handler(struct i2c_adapter *);
469:	struct i2c_client *i2c_acpi_new_device(struct device *, int, struct i2c_board_info *);
264:	void i2c_acpi_register_devices(struct i2c_adapter *);
736:	void i2c_acpi_remove_space_handler(struct i2c_adapter *);
502:	static int acpi_gsb_i2c_read_bytes(struct i2c_client *, u8, u8 *, u8);
545:	static int acpi_gsb_i2c_write_bytes(struct i2c_client *, u8, u8 *, u8);
236:	static acpi_status i2c_acpi_add_device(acpi_handle, u32, void *, void **);
136:	static int i2c_acpi_add_resource(struct acpi_resource *, void *);
108:	static int i2c_acpi_do_lookup(struct acpi_device *, struct i2c_acpi_lookup *);
72:	static int i2c_acpi_fill_info(struct acpi_resource *, void *);
373:	static int i2c_acpi_find_match_adapter(struct device *, const void *);
177:	static int i2c_acpi_get_info(struct acpi_device *, struct i2c_board_info *, struct i2c_adapter *, acpi_handle *);
302:	static acpi_status i2c_acpi_lookup_speed(acpi_handle, u32, void *, void **);
410:	static int i2c_acpi_notify(struct notifier_block *, unsigned long, void *);
221:	static void i2c_acpi_register_device(struct i2c_adapter *, struct acpi_device *, struct i2c_board_info *);
579:	static acpi_status i2c_acpi_space_handler(u32, acpi_physical_address, u32, u64 *, void *, void *);

File drivers/i2c/i2c-core-base.c:
2065:	int __i2c_transfer(struct i2c_adapter *, struct i2c_msg *, int);
1743:	int devm_i2c_add_adapter(struct device *, struct i2c_adapter *);
1063:	struct i2c_client *devm_i2c_new_dummy_device(struct device *, struct i2c_adapter *, u16);
1137:	unsigned int i2c_adapter_depth(struct i2c_adapter *);
1550:	int i2c_add_adapter(struct i2c_adapter *);
1599:	int i2c_add_numbered_adapter(struct i2c_adapter *);
723:	int i2c_check_7bit_addr_validity_strict(unsigned short);
1908:	void i2c_clients_command(struct i2c_adapter *, unsigned int, void *);
1654:	void i2c_del_adapter(struct i2c_adapter *);
1877:	void i2c_del_driver(struct i2c_driver *);
850:	int i2c_dev_irq_from_resources(const struct resource *, unsigned int);
1812:	int i2c_for_each_dev(void *, int (*)(struct device *, void *));
80:	const char *i2c_freq_mode_string(u32);
200:	int i2c_generic_scl_recovery(struct i2c_adapter *);
2430:	struct i2c_adapter *i2c_get_adapter(int);
2206:	int i2c_get_device_id(const struct i2c_client *, struct i2c_device_identity *);
2472:	u8 *i2c_get_dma_safe_msg_buf(struct i2c_msg *, unsigned int);
1402:	int i2c_handle_smbus_host_notify(struct i2c_adapter *, unsigned short);
101:	const struct i2c_device_id *i2c_match_id(const struct i2c_device_id *, const struct i2c_client *);
1108:	struct i2c_client *i2c_new_ancillary_device(struct i2c_client *, const char *, u16);
893:	struct i2c_client *i2c_new_client_device(struct i2c_adapter *, const struct i2c_board_info *);
1032:	struct i2c_client *i2c_new_dummy_device(struct i2c_adapter *, u16);
2389:	struct i2c_client *i2c_new_scanned_device(struct i2c_adapter *, struct i2c_board_info *, const unsigned short *, int (*)(struct i2c_adapter *, unsigned short));
1783:	void i2c_parse_fw_timings(struct device *, struct i2c_timings *, bool);
2381:	int i2c_probe_func_quick_read(struct i2c_adapter *, unsigned short);
2450:	void i2c_put_adapter(struct i2c_adapter *);
2500:	void i2c_put_dma_safe_msg_buf(u8 *, struct i2c_msg *, bool);
271:	int i2c_recover_bus(struct i2c_adapter *);
1836:	int i2c_register_driver(struct module *, struct i2c_driver *);
2132:	int i2c_transfer(struct i2c_adapter *, struct i2c_msg *, int);
2178:	int i2c_transfer_buffer_flags(const struct i2c_client *, char *, int, u16);
69:	int i2c_transfer_trace_reg(void);
75:	void i2c_transfer_trace_unreg(void);
974:	void i2c_unregister_device(struct i2c_client *);
1299:	struct i2c_adapter *i2c_verify_adapter(struct device *);
679:	struct i2c_client *i2c_verify_client(struct device *);
740:	static int __i2c_check_addr_busy(struct device *, void *);
1335:	static int __process_new_adapter(struct device_driver *, void *);
1824:	static int __process_new_driver(struct device *, void *);
1640:	static int __process_removed_adapter(struct device_driver *, void *);
1865:	static int __process_removed_driver(struct device *, void *);
1625:	static int __unregister_client(struct device *, void *);
1633:	static int __unregister_dummy(struct device *, void *);
1230:	static ssize_t delete_device_store(struct device *, struct device_attribute *, const char *, size_t);
1729:	static void devm_i2c_del_adapter(void *);
1046:	static void devm_i2c_release_dummy(struct device *, void *);
996:	static int dummy_probe(struct i2c_client *, const struct i2c_device_id *);
1002:	static int dummy_remove(struct i2c_client *);
156:	static int get_scl_gpio_value(struct i2c_adapter *);
166:	static int get_sda_gpio_value(struct i2c_adapter *);
1131:	static void i2c_adapter_dev_release(struct device *);
800:	static void i2c_adapter_lock_bus(struct i2c_adapter *, unsigned int);
812:	static int i2c_adapter_trylock_bus(struct i2c_adapter *, unsigned int);
824:	static void i2c_adapter_unlock_bus(struct i2c_adapter *, unsigned int);
779:	static int i2c_check_addr_busy(struct i2c_adapter *, int);
1999:	static int i2c_check_for_quirks(struct i2c_adapter *, struct i2c_msg *, int);
766:	static int i2c_check_mux_children(struct device *, void *);
751:	static int i2c_check_mux_parents(struct i2c_adapter *, int);
614:	static void i2c_client_dev_release(struct device *);
1893:	static int i2c_cmd(struct device *, void *);
2248:	static int i2c_default_probe(struct i2c_adapter *, unsigned short);
2338:	static int i2c_detect(struct i2c_adapter *, struct i2c_driver *);
2276:	static int i2c_detect_address(struct i2c_client *, struct i2c_driver *);
116:	static int i2c_device_match(struct device *, struct device_driver *);
462:	static int i2c_device_probe(struct device *);
573:	static int i2c_device_remove(struct device *);
600:	static void i2c_device_shutdown(struct device *);
139:	static int i2c_device_uevent(struct device *, struct kobj_uevent_env *);
1608:	static void i2c_do_del_adapter(struct i2c_driver *, struct i2c_adapter *);
1963:	static void i2c_exit(void);
326:	static int i2c_gpio_init_generic_recovery(struct i2c_adapter *);
281:	static void i2c_gpio_init_pinctrl_recovery(struct i2c_adapter *);
1361:	static int i2c_host_notify_irq_map(struct irq_domain *, unsigned int, irq_hw_number_t);
1918:	static int i2c_init(void);
1755:	static void i2c_parse_timing(struct device *, char *, u32 *, u32, bool);
1991:	static int i2c_quirk_error(struct i2c_adapter *, char *, struct i2c_msg *, struct i2c_msg *);
1419:	static int i2c_register_adapter(struct i2c_adapter *);
628:	static ssize_t modalias_show(struct device *, struct device_attribute *, char *);
620:	static ssize_t name_show(struct device *, struct device_attribute *, char *);
1162:	static ssize_t new_device_store(struct device *, struct device_attribute *, const char *, size_t);
161:	static void set_scl_gpio_value(struct i2c_adapter *, int);
171:	static void set_sda_gpio_value(struct i2c_adapter *, int);

File drivers/i2c/i2c-core-smbus.c:
550:	s32 __i2c_smbus_xfer(struct i2c_adapter *, u16, unsigned short, char, u8, int, union i2c_smbus_data *);
690:	struct i2c_client *i2c_new_smbus_alert_device(struct i2c_adapter *, struct i2c_smbus_alert_setup *);
215:	s32 i2c_smbus_read_block_data(const struct i2c_client *, u8, u8 *);
93:	s32 i2c_smbus_read_byte(const struct i2c_client *);
128:	s32 i2c_smbus_read_byte_data(const struct i2c_client *, u8);
258:	s32 i2c_smbus_read_i2c_block_data(const struct i2c_client *, u8, u8, u8 *);
637:	s32 i2c_smbus_read_i2c_block_data_or_emulated(const struct i2c_client *, u8, u8, u8 *);
168:	s32 i2c_smbus_read_word_data(const struct i2c_client *, u8);
242:	s32 i2c_smbus_write_block_data(const struct i2c_client *, u8, u8, const u8 *);
113:	s32 i2c_smbus_write_byte(const struct i2c_client *, u8);
149:	s32 i2c_smbus_write_byte_data(const struct i2c_client *, u8, u8);
278:	s32 i2c_smbus_write_i2c_block_data(const struct i2c_client *, u8, u8, const u8 *);
189:	s32 i2c_smbus_write_word_data(const struct i2c_client *, u8, u16);
532:	s32 i2c_smbus_xfer(struct i2c_adapter *, u16, unsigned short, char, u8, int, union i2c_smbus_data *);
51:	static u8 i2c_smbus_msg_pec(u8, struct i2c_msg *, struct i2c_msg *);
293:	static void i2c_smbus_try_get_dmabuf(struct i2c_msg *, u8);
313:	static s32 i2c_smbus_xfer_emulated(struct i2c_adapter *, u16, unsigned short, char, u8, int, union i2c_smbus_data *);

File drivers/idle/intel_idle.c:
1541:	static void auto_demotion_disable(void);
1363:	static void bxt_idle_state_table_update(void);
1550:	static void c1e_promotion_disable(void);
123:	static int intel_idle(struct cpuidle_device *, struct cpuidle_driver *, int);
1193:	static bool intel_idle_acpi_cst_extract(void);
1587:	static int intel_idle_cpu_online(unsigned int);
1617:	static int intel_idle_init(void);
1227:	static void intel_idle_init_cstates_acpi(struct cpuidle_driver *);
1463:	static void intel_idle_init_cstates_icpu(struct cpuidle_driver *);
1134:	static bool intel_idle_max_cstate_reached(int);
147:	static int intel_idle_s2idle(struct cpuidle_device *, struct cpuidle_driver *, int);
1143:	static bool intel_idle_state_needs_timer_stop(struct cpuidle_state *, struct cpuidle_state *);
1342:	static unsigned long long irtl_2_usec(unsigned long long);
1410:	static void sklh_idle_state_table_update(void);

File drivers/input/evdev.c:
143:	static void __evdev_queue_syn_dropped(struct evdev_client *);
702:	static int bits_to_user(unsigned long *, unsigned int, unsigned int, void *, int);
461:	static unsigned int evdev_compute_buffer_size(struct input_dev *, struct input_dev *);
1337:	static int evdev_connect(struct input_handler *, struct input_dev *, const struct input_device_id *);
380:	static void evdev_detach_client(struct evdev *, struct evdev_client *);
1402:	static void evdev_disconnect(struct input_handle *);
1029:	static long evdev_do_ioctl(struct file *, unsigned int, void *, int);
314:	static void evdev_event(struct input_handle *, unsigned int, unsigned int, int);
291:	static void evdev_events(struct input_handle *, const struct input_value *, unsigned int);
1436:	static void evdev_exit(void);
322:	static int evdev_fasync(int, struct file *, int);
329:	static void evdev_free(struct device *);
802:	static int evdev_handle_get_keycode(struct input_dev *, void *);
825:	static int evdev_handle_get_keycode_v2(struct input_dev *, void *);
886:	static int evdev_handle_get_val(struct evdev_client *, struct input_dev *, unsigned int, unsigned long *, unsigned int, unsigned int, void *, int);
843:	static int evdev_handle_set_keycode(struct input_dev *, void *);
860:	static int evdev_handle_set_keycode_v2(struct input_dev *, void *);
423:	static void evdev_hangup(struct evdev *);
1431:	static int evdev_init(void);
1279:	static long evdev_ioctl(struct file *, unsigned int, unsigned long);
1285:	static long evdev_ioctl_compat(struct file *, unsigned int, unsigned long);
470:	static int evdev_open(struct inode *, struct file *);
244:	static void evdev_pass_values(struct evdev_client *, const struct input_value *, unsigned int, ktime_t *);
610:	static __poll_t evdev_poll(struct file *, poll_table *);
558:	static ssize_t evdev_read(struct file *, char *, size_t, loff_t *);
435:	static int evdev_release(struct inode *, struct file *);
502:	static ssize_t evdev_write(struct file *, const char *, size_t, loff_t *);
764:	static int str_to_user(const char *, unsigned int, void *);

File drivers/input/ff-core.c:
305:	int input_ff_create(struct input_dev *, unsigned int);
365:	void input_ff_destroy(struct input_dev *);
211:	int input_ff_erase(struct input_dev *, int, struct file *);
261:	int input_ff_event(struct input_dev *, unsigned int, unsigned int, int);
236:	int input_ff_flush(struct input_dev *, struct file *);
92:	int input_ff_upload(struct input_dev *, struct ff_effect *, struct file *);
172:	static int erase_effect(struct input_dev *, int, struct file *);

File drivers/input/input-compat.c:
14:	int input_event_from_user(const char *, struct input_event *);
38:	int input_event_to_user(char *, const struct input_event *);
62:	int input_ff_effect_from_user(const char *, size_t, struct ff_effect *);

File drivers/input/input-leds.c:
50:	static enum led_brightness input_leds_brightness_get(struct led_classdev *);
58:	static void input_leds_brightness_set(struct led_classdev *, enum led_brightness);
83:	static int input_leds_connect(struct input_handler *, struct input_dev *, const struct input_device_id *);
170:	static void input_leds_disconnect(struct input_handle *);
66:	static void input_leds_event(struct input_handle *, unsigned int, unsigned int, int);
211:	static void input_leds_exit(void);
205:	static int input_leds_init(void);

File drivers/input/input-mt.c:
440:	int input_mt_assign_slots(struct input_dev *, int *, const struct input_mt_pos *, int, int);
110:	void input_mt_destroy_slots(struct input_dev *);
276:	void input_mt_drop_unused(struct input_dev *);
475:	int input_mt_get_slot_by_key(struct input_dev *, int);
38:	int input_mt_init_slots(struct input_dev *, unsigned int, unsigned int);
174:	void input_mt_report_finger_count(struct input_dev *, int);
195:	void input_mt_report_pointer_emulation(struct input_dev *, bool);
134:	bool input_mt_report_slot_state(struct input_dev *, unsigned int, bool);
295:	void input_mt_sync_frame(struct input_dev *);
258:	static void __input_mt_drop_unused(struct input_dev *, struct input_mt *);
315:	static int adjust_dual(int *, int, int *, int, int);
14:	static void copy_abs(struct input_dev *, unsigned int, unsigned int);
386:	static void input_mt_set_slots(struct input_mt *, int *, int);

File drivers/input/input-poller.c:
46:	void input_dev_poller_finalize(struct input_dev_poller *);
54:	void input_dev_poller_start(struct input_dev_poller *);
63:	void input_dev_poller_stop(struct input_dev_poller *);
126:	int input_get_poll_interval(struct input_dev *);
119:	void input_set_max_poll_interval(struct input_dev *, unsigned int);
112:	void input_set_min_poll_interval(struct input_dev *, unsigned int);
105:	void input_set_poll_interval(struct input_dev *, unsigned int);
68:	int input_setup_polling(struct input_dev *, void (*)(struct input_dev *));
94:	static bool input_dev_ensure_poller(struct input_dev *);
137:	static ssize_t input_dev_get_poll_interval(struct device *, struct device_attribute *, char *);
183:	static ssize_t input_dev_get_poll_max(struct device *, struct device_attribute *, char *);
193:	static ssize_t input_dev_get_poll_min(struct device *, struct device_attribute *, char *);
26:	static void input_dev_poller_queue_work(struct input_dev_poller *);
37:	static void input_dev_poller_work(struct work_struct *);
146:	static ssize_t input_dev_set_poll_interval(struct device *, struct device_attribute *, const char *, size_t);
203:	static umode_t input_poller_attrs_visible(struct kobject *, struct attribute *, int);

File drivers/input/input.c:
1878:	struct input_dev *devm_input_allocate_device(struct device *);
489:	void input_alloc_absinfo(struct input_dev *);
1813:	struct input_dev *input_allocate_device(void);
673:	void input_close_device(struct input_handle *);
2125:	void input_enable_softrepeat(struct input_dev *, int, int);
436:	void input_event(struct input_dev *, unsigned int, unsigned int, int);
649:	int input_flush_device(struct input_handle *, struct file *);
1918:	void input_free_device(struct input_dev *);
2489:	void input_free_minor(unsigned int);
908:	int input_get_keycode(struct input_dev *, struct input_keymap_entry *);
2459:	int input_get_new_minor(int, unsigned int, bool);
1960:	ktime_t *input_get_timestamp(struct input_dev *);
536:	int input_grab_device(struct input_handle *);
2350:	int input_handler_for_each_handle(struct input_handler *, void *, int (*)(struct input_handle *, void *));
461:	void input_inject_event(struct input_handle *, unsigned int, unsigned int, int);
974:	bool input_match_device_id(const struct input_dev *, const struct input_device_id *);
602:	int input_open_device(struct input_handle *);
2156:	int input_register_device(struct input_dev *);
2381:	int input_register_handle(struct input_handle *);
2290:	int input_register_handler(struct input_handler *);
585:	void input_release_device(struct input_handle *);
1694:	void input_reset_device(struct input_dev *);
766:	int input_scancode_to_scalar(const struct input_keymap_entry *, unsigned int *);
507:	void input_set_abs_params(struct input_dev *, unsigned int, int, int, int, int);
1980:	void input_set_capability(struct input_dev *, unsigned int, unsigned int);
929:	int input_set_keycode(struct input_dev *, const struct input_keymap_entry *);
1945:	void input_set_timestamp(struct input_dev *, ktime_t);
2263:	void input_unregister_device(struct input_dev *);
2431:	void input_unregister_handle(struct input_handle *);
2320:	void input_unregister_handler(struct input_handler *);
558:	static void __input_release_device(struct input_handle *);
2085:	static void __input_unregister_device(struct input_dev *);
1843:	static int devm_input_device_match(struct device *, void *, void *);
1850:	static void devm_input_device_release(struct device *, void *);
2107:	static void devm_input_device_unregister(struct device *, void *);
1559:	static int input_add_uevent_bm_var(struct kobj_uevent_env *, const char *, unsigned long *, int);
1025:	static int input_attach_handler(struct input_dev *, struct input_handler *);
1044:	static int input_bits_to_string(char *, int, unsigned long, bool);
2073:	static void input_cleanse_bitmasks(struct input_dev *);
810:	static int input_default_getkeycode(struct input_dev *, struct input_keymap_entry *);
838:	static int input_default_setkeycode(struct input_dev *, const struct input_keymap_entry *, unsigned int *);
1744:	static int input_dev_freeze(struct device *);
1761:	static int input_dev_poweroff(struct device *);
1541:	static void input_dev_release(struct device *);
706:	static void input_dev_release_keys(struct input_dev *);
1730:	static int input_dev_resume(struct device *);
1508:	static ssize_t input_dev_show_cap_abs(struct device *, struct device_attribute *, char *);
1505:	static ssize_t input_dev_show_cap_ev(struct device *, struct device_attribute *, char *);
1512:	static ssize_t input_dev_show_cap_ff(struct device *, struct device_attribute *, char *);
1506:	static ssize_t input_dev_show_cap_key(struct device *, struct device_attribute *, char *);
1510:	static ssize_t input_dev_show_cap_led(struct device *, struct device_attribute *, char *);
1509:	static ssize_t input_dev_show_cap_msc(struct device *, struct device_attribute *, char *);
1507:	static ssize_t input_dev_show_cap_rel(struct device *, struct device_attribute *, char *);
1511:	static ssize_t input_dev_show_cap_snd(struct device *, struct device_attribute *, char *);
1513:	static ssize_t input_dev_show_cap_sw(struct device *, struct device_attribute *, char *);
1445:	static ssize_t input_dev_show_id_bustype(struct device *, struct device_attribute *, char *);
1447:	static ssize_t input_dev_show_id_product(struct device *, struct device_attribute *, char *);
1446:	static ssize_t input_dev_show_id_vendor(struct device *, struct device_attribute *, char *);
1448:	static ssize_t input_dev_show_id_version(struct device *, struct device_attribute *, char *);
1395:	static ssize_t input_dev_show_modalias(struct device *, struct device_attribute *, char *);
1343:	static ssize_t input_dev_show_name(struct device *, struct device_attribute *, char *);
1344:	static ssize_t input_dev_show_phys(struct device *, struct device_attribute *, char *);
1411:	static ssize_t input_dev_show_properties(struct device *, struct device_attribute *, char *);
1345:	static ssize_t input_dev_show_uniq(struct device *, struct device_attribute *, char *);
1710:	static int input_dev_suspend(struct device *);
1672:	static void input_dev_toggle(struct input_dev *, bool);
1616:	static int input_dev_uevent(struct device *, struct kobj_uevent_env *);
1127:	static void *input_devices_seq_next(struct seq_file *, void *, loff_t *);
1166:	static int input_devices_seq_show(struct seq_file *, void *);
1108:	static void *input_devices_seq_start(struct seq_file *, loff_t *);
1793:	static char *input_devnode(struct device *, umode_t *);
727:	static void input_disconnect_device(struct input_dev *);
2033:	static unsigned int input_estimate_events_per_packet(struct input_dev *);
2523:	static void input_exit(void);
264:	static int input_get_disposition(struct input_dev *, unsigned int, unsigned int, int *);
214:	static int input_handle_abs_event(struct input_dev *, unsigned int, int *);
370:	static void input_handle_event(struct input_dev *, unsigned int, unsigned int, int);
1251:	static void *input_handlers_seq_next(struct seq_file *, void *, loff_t *);
1259:	static int input_handlers_seq_show(struct seq_file *, void *);
1231:	static void *input_handlers_seq_start(struct seq_file *, loff_t *);
2495:	static int input_init(void);
131:	static void input_pass_values(struct input_dev *, struct input_value *, unsigned int);
1463:	static int input_print_bitmap(char *, int, unsigned long *, int, int);
1360:	static int input_print_modalias(char *, int, struct input_dev *, int);
1218:	static int input_proc_devices_open(struct inode *, struct file *);
1089:	static __poll_t input_proc_devices_poll(struct file *, poll_table *);
1318:	static void input_proc_exit(void);
1281:	static int input_proc_handlers_open(struct inode *, struct file *);
182:	static void input_repeat_key(struct timer_list *);
1132:	static void input_seq_stop(struct seq_file *, void *);
96:	static unsigned int input_to_handler(struct input_handle *, struct input_value *, unsigned int);

File drivers/input/keyboard/atkbd.c:
959:	static void atkbd_apply_forced_release_keylist(struct atkbd *, const void *);
324:	static umode_t atkbd_attr_is_visible(struct kobject *, struct attribute *, int);
1412:	static ssize_t atkbd_attr_set_helper(const char *, size_t, ssize_t (*)(struct atkbd *, const char *, size_t), struct device *, struct device *);
920:	static void atkbd_cleanup(struct serio *);
1224:	static int atkbd_connect(struct serio *, struct serio_driver *);
1743:	static int atkbd_deactivate_fixup(const struct dmi_system_id *);
933:	static void atkbd_disconnect(struct serio *);
277:	static ssize_t atkbd_do_set_extra(struct device *, struct device_attribute *, const char *, size_t);
278:	static ssize_t atkbd_do_set_force_release(struct device *, struct device_attribute *, const char *, size_t);
279:	static ssize_t atkbd_do_set_scroll(struct device *, struct device_attribute *, const char *, size_t);
280:	static ssize_t atkbd_do_set_set(struct device *, struct device_attribute *, const char *, size_t);
282:	static ssize_t atkbd_do_set_softraw(struct device *, struct device_attribute *, const char *, size_t);
281:	static ssize_t atkbd_do_set_softrepeat(struct device *, struct device_attribute *, const char *, size_t);
294:	static ssize_t atkbd_do_show_err_count(struct device *, struct device_attribute *, char *);
277:	static ssize_t atkbd_do_show_extra(struct device *, struct device_attribute *, char *);
278:	static ssize_t atkbd_do_show_force_release(struct device *, struct device_attribute *, char *);
295:	static ssize_t atkbd_do_show_function_row_physmap(struct device *, struct device_attribute *, char *);
279:	static ssize_t atkbd_do_show_scroll(struct device *, struct device_attribute *, char *);
280:	static ssize_t atkbd_do_show_set(struct device *, struct device_attribute *, char *);
282:	static ssize_t atkbd_do_show_softraw(struct device *, struct device_attribute *, char *);
281:	static ssize_t atkbd_do_show_softrepeat(struct device *, struct device_attribute *, char *);
678:	static int atkbd_event(struct input_dev *, unsigned int, unsigned int, int);
629:	static void atkbd_event_work(struct work_struct *);
1908:	static void atkbd_exit(void);
1038:	static int atkbd_get_keymap_from_fwnode(struct atkbd *);
1901:	static int atkbd_init(void);
409:	static irqreturn_t atkbd_interrupt(struct serio *, unsigned char, unsigned int);
1026:	static unsigned int atkbd_oqo_01plus_scancode_fixup(struct atkbd *, unsigned int);
1201:	static void atkbd_parse_fwnode_data(struct serio *);
763:	static int atkbd_probe(struct atkbd *);
1312:	static int atkbd_reconnect(struct serio *);
659:	static void atkbd_schedule_event_work(struct atkbd *, int);
830:	static int atkbd_select_set(struct atkbd *, int, int);
1132:	static void atkbd_set_device_attrs(struct atkbd *);
1437:	static ssize_t atkbd_set_extra(struct atkbd *, const char *, size_t);
1504:	static ssize_t atkbd_set_force_release(struct atkbd *, const char *, size_t);
1076:	static void atkbd_set_keycode_table(struct atkbd *);
598:	static int atkbd_set_leds(struct atkbd *);
574:	static int atkbd_set_repeat_rate(struct atkbd *);
1525:	static ssize_t atkbd_set_scroll(struct atkbd *, const char *, size_t);
1573:	static ssize_t atkbd_set_set(struct atkbd *, const char *, size_t);
1682:	static ssize_t atkbd_set_softraw(struct atkbd *, const char *, size_t);
1628:	static ssize_t atkbd_set_softrepeat(struct atkbd *, const char *, size_t);
1728:	static int atkbd_setup_forced_release(const struct dmi_system_id *);
1736:	static int atkbd_setup_scancode_fixup(const struct dmi_system_id *);

File drivers/input/mouse/alps.c:
3173:	int alps_detect(struct psmouse *, bool);
3038:	int alps_init(struct psmouse *);
1853:	static int alps_absolute_mode_v1_v2(struct psmouse *);
1743:	static int alps_command_mode_read_reg(struct psmouse *, int);
1686:	static int alps_command_mode_send_nibble(struct psmouse *, int);
1706:	static int alps_command_mode_set_addr(struct psmouse *, int);
1759:	static int alps_command_mode_write_reg(struct psmouse *, int, u8);
688:	static int alps_decode_dolphin(struct alps_fields *, unsigned char *, struct psmouse *);
1026:	static int alps_decode_packet_v7(struct alps_fields *, unsigned char *, struct psmouse *);
634:	static int alps_decode_pinnacle(struct alps_fields *, unsigned char *, struct psmouse *);
660:	static int alps_decode_rushmore(struct alps_fields *, unsigned char *, struct psmouse *);
1177:	static int alps_decode_ss4_v2(struct alps_fields *, unsigned char *, struct psmouse *);
2968:	static void alps_disconnect(struct psmouse *);
2601:	static int alps_dolphin_get_device_area(struct psmouse *, struct alps_data *);
1806:	static int alps_enter_command_mode(struct psmouse *);
1577:	static void alps_flush_packet(struct timer_list *);
969:	static void alps_get_finger_coordinate_v7(struct input_mt_pos *, unsigned char *, unsigned char);
2461:	static int alps_get_otp_values_ss4_v2(struct psmouse *, unsigned char, unsigned char *);
1148:	static enum SS4_PACKET_ID alps_get_pkt_id_ss4_v2(unsigned char *);
2288:	static int alps_get_v3_v7_resolution(struct psmouse *, int);
2647:	static int alps_hw_init_dolphin_v1(struct psmouse *);
2327:	static int alps_hw_init_rushmore_v3(struct psmouse *);
2693:	static int alps_hw_init_ss4_v2(struct psmouse *);
2017:	static int alps_hw_init_v1_v2(struct psmouse *);
2217:	static int alps_hw_init_v3(struct psmouse *);
2388:	static int alps_hw_init_v4(struct psmouse *);
2065:	static int alps_hw_init_v6(struct psmouse *);
2664:	static int alps_hw_init_v7(struct psmouse *);
2882:	static int alps_identify(struct psmouse *, struct alps_data *);
1905:	static int alps_monitor_mode(struct psmouse *, bool);
1836:	static int alps_passthrough_mode_v2(struct psmouse *, bool);
2092:	static int alps_passthrough_mode_v3(struct psmouse *, int, bool);
1987:	static int alps_poll(struct psmouse *);
392:	static int alps_process_bitmap(struct alps_data *, struct alps_fields *);
1606:	static psmouse_ret_t alps_process_byte(struct psmouse *);
1314:	static void alps_process_packet_ss4_v2(struct psmouse *);
248:	static void alps_process_packet_v1_v2(struct psmouse *);
803:	static void alps_process_packet_v3(struct psmouse *);
889:	static void alps_process_packet_v4(struct psmouse *);
823:	static void alps_process_packet_v6(struct psmouse *);
1138:	static void alps_process_packet_v7(struct psmouse *);
725:	static void alps_process_touchpad_packet_v3_v5(struct psmouse *);
1116:	static void alps_process_touchpad_packet_v7(struct psmouse *);
555:	static void alps_process_trackstick_packet_v3(struct psmouse *);
1088:	static void alps_process_trackstick_packet_v7(struct psmouse *);
2956:	static int alps_reconnect(struct psmouse *);
1399:	static void alps_register_bare_ps2_mouse(struct work_struct *);
1466:	static void alps_report_bare_ps2_packet(struct psmouse *, unsigned char *, bool);
221:	static void alps_report_buttons(struct input_dev *, struct input_dev *, int, int, int);
510:	static void alps_report_mt_data(int, struct psmouse *, struct psmouse *);
524:	static void alps_report_semi_mt_data(int, struct psmouse *, struct psmouse *);
1767:	static int alps_rpt_cmd(struct psmouse *, int, int, unsigned char *);
2989:	static void alps_set_abs_params_mt_common(struct alps_data *, struct input_dev *);
3002:	static void alps_set_abs_params_semi_mt(struct alps_data *, struct input_dev *);
3026:	static void alps_set_abs_params_ss4_v2(struct alps_data *, struct input_dev *);
2981:	static void alps_set_abs_params_st(struct alps_data *, struct input_dev *);
3013:	static void alps_set_abs_params_v7(struct alps_data *, struct input_dev *);
2581:	static int alps_set_defaults_ss4_v2(struct psmouse *, struct alps_data *);
2722:	static int alps_set_protocol(struct psmouse *, struct alps_data *, const struct alps_protocol_info *);
2152:	static int alps_setup_trackstick_v3(struct psmouse *, int);
1964:	static int alps_tap_mode(struct psmouse *, int);
2051:	static int alps_trackstick_enter_extended_mode_v3_v6(struct psmouse *);

File drivers/input/mouse/byd.c:
435:	int byd_detect(struct psmouse *, bool);
464:	int byd_init(struct psmouse *);
252:	static void byd_clear_touch(struct timer_list *);
424:	static void byd_disconnect(struct psmouse *);
273:	static psmouse_ret_t byd_process_byte(struct psmouse *);
398:	static int byd_reconnect(struct psmouse *);
236:	static void byd_report_input(struct psmouse *, struct psmouse *);
339:	static int byd_reset_touchpad(struct psmouse *);

File drivers/input/mouse/cypress_ps2.c:
201:	int cypress_detect(struct psmouse *, bool);
658:	int cypress_init(struct psmouse *);
628:	static void cypress_disconnect(struct psmouse *);
443:	static int cypress_parse_packet(struct psmouse *, struct cytp_data *, struct cytp_report_data *);
513:	static void cypress_process_packet(struct psmouse *, bool);
600:	static psmouse_ret_t cypress_protocol_handler(struct psmouse *);
60:	static int cypress_ps2_ext_cmd(struct psmouse *, unsigned char, unsigned short);
98:	static int cypress_ps2_read_cmd_status(struct psmouse *, unsigned char, unsigned char *);
38:	static int cypress_ps2_sendbyte(struct psmouse *, int);
220:	static int cypress_read_fw_version(struct psmouse *);
249:	static int cypress_read_tp_metrics(struct psmouse *);
635:	static int cypress_reconnect(struct psmouse *);
356:	static void cypress_reset(struct psmouse *);
169:	static int cypress_send_ext_cmd(struct psmouse *, unsigned char, unsigned char *);
365:	static int cypress_set_input_params(struct input_dev *, struct cytp_data *);
612:	static void cypress_set_rate(struct psmouse *, unsigned int);

File drivers/input/mouse/elantech.c:
1401:	int elantech_detect(struct psmouse *, bool);
2148:	int elantech_init(struct psmouse *);
2127:	int elantech_init_ps2(struct psmouse *);
2009:	int elantech_init_smbus(struct psmouse *);
1896:	static int elantech_create_smbus(struct psmouse *, struct elantech_device_info *, bool);
1460:	static void elantech_disconnect(struct psmouse *);
637:	static void elantech_input_sync_v4(struct psmouse *);
803:	static int elantech_packet_check_v2(struct psmouse *);
835:	static int elantech_packet_check_v3(struct psmouse *);
873:	static int elantech_packet_check_v4(struct psmouse *);
264:	static void elantech_packet_dump(struct psmouse *);
922:	static psmouse_ret_t elantech_process_byte(struct psmouse *);
68:	static int elantech_ps2_command(struct psmouse *, unsigned char *, int);
1677:	static int elantech_query_info(struct psmouse *, struct elantech_device_info *);
136:	static int elantech_read_reg(struct psmouse *, unsigned char, unsigned char *);
95:	static int elantech_read_reg_params(struct psmouse *, u8 *, u8);
1481:	static int elantech_reconnect(struct psmouse *);
320:	static void elantech_report_absolute_v1(struct psmouse *);
408:	static void elantech_report_absolute_v2(struct psmouse *);
558:	static void elantech_report_absolute_v3(struct psmouse *, int);
395:	static void elantech_report_semi_mt_data(struct input_dev *, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int);
489:	static void elantech_report_trackpoint(struct psmouse *, int);
50:	static int elantech_send_cmd(struct psmouse *, unsigned char, unsigned char *);
1012:	static int elantech_set_absolute_mode(struct psmouse *);
1164:	static int elantech_set_input_params(struct psmouse *);
1287:	static ssize_t elantech_set_int_attr(struct psmouse *, void *, const char *, size_t);
999:	static void elantech_set_rate_restore_reg_07(struct psmouse *, unsigned int);
2035:	static int elantech_setup_ps2(struct psmouse *, struct elantech_device_info *);
1270:	static ssize_t elantech_show_int_attr(struct psmouse *, void *, char *);
192:	static int elantech_write_reg(struct psmouse *, unsigned char, unsigned char);
113:	static int elantech_write_reg_params(struct psmouse *, u8 *, u8);
672:	static void process_packet_head_v4(struct psmouse *);
701:	static void process_packet_motion_v4(struct psmouse *);
35:	static int synaptics_send_cmd(struct psmouse *, unsigned char, unsigned char *);

File drivers/input/mouse/focaltech.c:
35:	int focaltech_detect(struct psmouse *, bool);
406:	int focaltech_init(struct psmouse *);
299:	static void focaltech_disconnect(struct psmouse *);
251:	static psmouse_ret_t focaltech_process_byte(struct psmouse *);
226:	static void focaltech_process_packet(struct psmouse *);
195:	static void focaltech_process_rel_packet(struct psmouse *, unsigned char *);
347:	static int focaltech_read_register(struct ps2dev *, unsigned char *, int);
306:	static int focaltech_reconnect(struct psmouse *);
115:	static void focaltech_report_state(struct psmouse *, struct psmouse *);
293:	static void focaltech_reset(struct psmouse *);
321:	static void focaltech_set_input_params(struct psmouse *, struct psmouse *);
389:	static void focaltech_set_resolution(struct psmouse *, unsigned int);
265:	static int focaltech_switch_protocol(struct psmouse *);

File drivers/input/mouse/lifebook.c:
253:	int lifebook_detect(struct psmouse *, bool);
311:	int lifebook_init(struct psmouse *);
127:	void lifebook_module_init(void);
199:	static int lifebook_absolute_mode(struct psmouse *);
270:	static int lifebook_create_relative_device(struct psmouse *);
241:	static void lifebook_disconnect(struct psmouse *);
31:	static int lifebook_limit_serio3(const struct dmi_system_id *);
132:	static psmouse_ret_t lifebook_process_byte(struct psmouse *);
39:	static int lifebook_set_6byte_proto(const struct dmi_system_id *);
228:	static void lifebook_set_resolution(struct psmouse *, unsigned int);

File drivers/input/mouse/logips2pp.c:
357:	int ps2pp_detect(struct psmouse *, bool);
158:	static ssize_t ps2pp_attr_set_smartscroll(struct psmouse *, void *, const char *, size_t);
152:	static ssize_t ps2pp_attr_show_smartscroll(struct psmouse *, void *, char *);
201:	static void ps2pp_disconnect(struct psmouse *);
41:	static psmouse_ret_t ps2pp_process_byte(struct psmouse *);
270:	static void ps2pp_set_model_properties(struct psmouse *, const struct ps2pp_info *, bool);
185:	static void ps2pp_set_resolution(struct psmouse *, unsigned int);
136:	static void ps2pp_set_smartscroll(struct psmouse *, bool);

File drivers/input/mouse/psmouse-base.c:
1300:	int psmouse_activate(struct psmouse *);
1820:	ssize_t psmouse_attr_set_helper(struct device *, struct device_attribute *, const char *, size_t);
1806:	ssize_t psmouse_attr_show_helper(struct device *, struct device_attribute *, char *);
1316:	int psmouse_deactivate(struct psmouse *);
515:	bool psmouse_matches_pnp_id(struct psmouse *, const char * const *);
149:	psmouse_ret_t psmouse_process_byte(struct psmouse *);
239:	void psmouse_queue_work(struct psmouse *, struct delayed_work *, unsigned long);
121:	void psmouse_report_standard_buttons(struct input_dev *, u8);
128:	void psmouse_report_standard_motion(struct input_dev *, u8 *);
139:	void psmouse_report_standard_packet(struct input_dev *, u8 *);
435:	int psmouse_reset(struct psmouse *);
453:	void psmouse_set_resolution(struct psmouse *, unsigned int);
261:	void psmouse_set_state(struct psmouse *, enum psmouse_state);
1692:	static int __psmouse_reconnect(struct serio *, bool);
712:	static int cortron_detect(struct psmouse *, bool);
545:	static int genius_detect(struct psmouse *, bool);
610:	static int im_explorer_detect(struct psmouse *, bool);
577:	static int intellimouse_detect(struct psmouse *, bool);
690:	static int ps2bare_detect(struct psmouse *, bool);
963:	static void psmouse_apply_defaults(struct psmouse *);
1898:	static ssize_t psmouse_attr_set_protocol(struct psmouse *, void *, const char *, size_t);
1997:	static ssize_t psmouse_attr_set_rate(struct psmouse *, void *, const char *, size_t);
2010:	static ssize_t psmouse_attr_set_resolution(struct psmouse *, void *, const char *, size_t);
1893:	static ssize_t psmouse_attr_show_protocol(struct psmouse *, void *, char *);
1431:	static void psmouse_cleanup(struct serio *);
1582:	static int psmouse_connect(struct serio *, struct serio_driver *);
1479:	static void psmouse_disconnect(struct serio *);
2080:	static void psmouse_exit(void);
1047:	static int psmouse_extensions(struct psmouse *, unsigned int, bool);
1769:	static int psmouse_fast_reconnect(struct serio *);
2041:	static int psmouse_get_maxproto(char *, const struct kernel_param *);
272:	static int psmouse_handle_byte(struct psmouse *);
2048:	static int psmouse_init(void);
1285:	static void psmouse_initialize(struct psmouse *);
338:	static irqreturn_t psmouse_interrupt(struct serio *, u8, unsigned int);
495:	static int psmouse_poll(struct psmouse *);
1249:	static int psmouse_probe(struct psmouse *);
943:	static const struct psmouse_protocol *psmouse_protocol_by_name(const char *, size_t);
1764:	static int psmouse_reconnect(struct serio *);
1334:	static void psmouse_resync(struct work_struct *);
1878:	static ssize_t psmouse_set_int_attr(struct psmouse *, void *, const char *, size_t);
2024:	static int psmouse_set_maxproto(const char *, const struct kernel_param *);
469:	static void psmouse_set_rate(struct psmouse *, unsigned int);
485:	static void psmouse_set_scale(struct psmouse *, enum psmouse_scale);
1871:	static ssize_t psmouse_show_int_attr(struct psmouse *, void *, char *);
1522:	static int psmouse_switch_protocol(struct psmouse *, const struct psmouse_protocol *);
1012:	static bool psmouse_try_protocol(struct psmouse *, enum psmouse_type, unsigned int *, bool, bool);
656:	static int thinking_detect(struct psmouse *, bool);

File drivers/input/mouse/psmouse-smbus.c:
212:	void psmouse_smbus_cleanup(struct psmouse *);
228:	int psmouse_smbus_init(struct psmouse *, const struct i2c_board_info *, const void *, size_t, bool, bool);
307:	void psmouse_smbus_module_exit(void);
294:	int psmouse_smbus_module_init(void);
29:	static void psmouse_smbus_check_adapter(struct i2c_adapter *);
188:	static int psmouse_smbus_create_companion(struct device *, void *);
60:	static void psmouse_smbus_detach_i2c_client(struct i2c_client *);
166:	static void psmouse_smbus_disconnect(struct psmouse *);
88:	static int psmouse_smbus_notifier_call(struct notifier_block *, unsigned long, void *);
112:	static psmouse_ret_t psmouse_smbus_process_byte(struct psmouse *);
117:	static int psmouse_smbus_reconnect(struct psmouse *);
132:	static void psmouse_smbus_remove_i2c_device(struct work_struct *);

File drivers/input/mouse/sentelic.c:
962:	int fsp_detect(struct psmouse *, bool);
1012:	int fsp_init(struct psmouse *);
838:	static int fsp_activate_protocol(struct psmouse *);
588:	static ssize_t fsp_attr_set_flags(struct psmouse *, void *, const char *, size_t);
462:	static ssize_t fsp_attr_set_getreg(struct psmouse *, void *, const char *, size_t);
558:	static ssize_t fsp_attr_set_hscroll(struct psmouse *, void *, const char *, size_t);
499:	static ssize_t fsp_attr_set_pagereg(struct psmouse *, void *, const char *, size_t);
419:	static ssize_t fsp_attr_set_setreg(struct psmouse *, void *, const char *, size_t);
529:	static ssize_t fsp_attr_set_vscroll(struct psmouse *, void *, const char *, size_t);
579:	static ssize_t fsp_attr_show_flags(struct psmouse *, void *, char *);
449:	static ssize_t fsp_attr_show_getreg(struct psmouse *, void *, char *);
550:	static ssize_t fsp_attr_show_hscroll(struct psmouse *, void *, char *);
488:	static ssize_t fsp_attr_show_pagereg(struct psmouse *, void *, char *);
612:	static ssize_t fsp_attr_show_ver(struct psmouse *, void *, char *);
521:	static ssize_t fsp_attr_show_vscroll(struct psmouse *, void *, char *);
987:	static void fsp_disconnect(struct psmouse *);
293:	static int fsp_get_sn(struct psmouse *, int *);
383:	static int fsp_onpad_hscr(struct psmouse *, bool);
362:	static int fsp_onpad_vscr(struct psmouse *, bool);
332:	static int fsp_opc_tag_enable(struct psmouse *, bool);
201:	static int fsp_page_reg_read(struct psmouse *, int *);
239:	static int fsp_page_reg_write(struct psmouse *, int);
693:	static psmouse_ret_t fsp_process_byte(struct psmouse *);
996:	static int fsp_reconnect(struct psmouse *);
71:	static int fsp_reg_read(struct psmouse *, int, int *);
128:	static int fsp_reg_write(struct psmouse *, int, int);
181:	static int fsp_reg_write_enable(struct psmouse *, bool);
980:	static void fsp_reset(struct psmouse *);
920:	static int fsp_set_input_params(struct psmouse *);
682:	static void fsp_set_slot(struct input_dev *, int, bool, unsigned int, unsigned int);
37:	static unsigned char fsp_test_swap_cmd(unsigned char);

File drivers/input/mouse/synaptics.c:
96:	int synaptics_detect(struct psmouse *, bool);
1854:	int synaptics_init(struct psmouse *);
1675:	int synaptics_init_absolute(struct psmouse *);
1680:	int synaptics_init_relative(struct psmouse *);
1815:	int synaptics_init_smbus(struct psmouse *);
1545:	void synaptics_module_init(void);
118:	void synaptics_reset(struct psmouse *);
1231:	static void set_abs_position_params(struct input_dev *, struct synaptics_device_info *, int, int);
1248:	static int set_input_params(struct psmouse *, struct synaptics_data *);
526:	static void synaptics_apply_quirks(struct psmouse *, struct synaptics_device_info *);
304:	static int synaptics_capability(struct psmouse *, struct synaptics_device_info *);
1743:	static int synaptics_create_intertouch(struct psmouse *, struct synaptics_device_info *, bool);
1400:	static void synaptics_disconnect(struct psmouse *);
1552:	static int synaptics_init_ps2(struct psmouse *, struct synaptics_device_info *, bool);
774:	static int synaptics_parse_hw_state(const u8 *, struct synaptics_data *, struct synaptics_hw_state *);
1205:	static psmouse_ret_t synaptics_process_byte(struct psmouse *);
1062:	static void synaptics_process_packet(struct psmouse *);
687:	static void synaptics_pt_activate(struct psmouse *);
705:	static void synaptics_pt_create(struct psmouse *);
645:	static int synaptics_pt_start(struct serio *);
657:	static void synaptics_pt_stop(struct serio *);
628:	static int synaptics_pt_write(struct serio *, u8);
419:	static int synaptics_query_hardware(struct psmouse *, struct synaptics_device_info *);
1420:	static int synaptics_reconnect(struct psmouse *);
966:	static void synaptics_report_buttons(struct psmouse *, const struct synaptics_hw_state *);
920:	static void synaptics_report_ext_buttons(struct psmouse *, const struct synaptics_hw_state *);
986:	static void synaptics_report_mt_data(struct psmouse *, const struct synaptics_hw_state *, int);
361:	static int synaptics_resolution(struct psmouse *, struct synaptics_device_info *);
1366:	static ssize_t synaptics_set_disable_gesture(struct psmouse *, void *, const char *, size_t);
578:	static int synaptics_set_mode(struct psmouse *);
610:	static void synaptics_set_rate(struct psmouse *, unsigned int);
1777:	static int synaptics_setup_intertouch(struct psmouse *, struct synaptics_device_info *, bool);
1358:	static ssize_t synaptics_show_disable_gesture(struct psmouse *, void *, char *);

File drivers/input/mouse/trackpoint.c:
396:	int trackpoint_detect(struct psmouse *, bool);
367:	static void trackpoint_disconnect(struct psmouse *);
214:	static umode_t trackpoint_is_attr_visible(struct kobject *, struct attribute *, int);
376:	static int trackpoint_reconnect(struct psmouse *);
146:	static ssize_t trackpoint_set_bit_attr(struct psmouse *, void *, const char *, size_t);
117:	static ssize_t trackpoint_set_int_attr(struct psmouse *, void *, const char *, size_t);
104:	static ssize_t trackpoint_show_int_attr(struct psmouse *, void *, char *);
303:	static int trackpoint_sync(struct psmouse *, bool);
77:	static int trackpoint_update_bit(struct ps2dev *, u8, u8, u8);

File drivers/input/mouse/vmmouse.c:
343:	int vmmouse_detect(struct psmouse *, bool);
420:	int vmmouse_init(struct psmouse *);
247:	static void vmmouse_disable(struct psmouse *);
375:	static void vmmouse_disconnect(struct psmouse *);
271:	static int vmmouse_enable(struct psmouse *);
223:	static psmouse_ret_t vmmouse_process_byte(struct psmouse *);
393:	static int vmmouse_reconnect(struct psmouse *);
141:	static psmouse_ret_t vmmouse_report_events(struct psmouse *);

File drivers/input/mousedev.c:
484:	static void mixdev_close_devices(struct mousedev *);
454:	static int mixdev_open_devices(struct mousedev *);
439:	static void mousedev_close_device(struct mousedev *);
974:	static int mousedev_connect(struct input_handler *, struct input_dev *, const struct input_device_id *);
842:	static struct mousedev *mousedev_create(struct input_dev *, struct input_handler *, bool);
925:	static void mousedev_destroy(struct mousedev *);
511:	static void mousedev_detach_client(struct mousedev *, struct mousedev_client *);
994:	static void mousedev_disconnect(struct input_handle *);
346:	static void mousedev_event(struct input_handle *, unsigned int, unsigned int, int);
1117:	static void mousedev_exit(void);
404:	static int mousedev_fasync(int, struct file *, int);
411:	static void mousedev_free(struct device *);
800:	static void mousedev_hangup(struct mousedev *);
1096:	static int mousedev_init(void);
222:	static void mousedev_key_event(struct mousedev *, unsigned int, int);
261:	static void mousedev_notify_readers(struct mousedev *, struct mousedev_hw_data *);
533:	static int mousedev_open(struct inode *, struct file *);
419:	static int mousedev_open_device(struct mousedev *);
571:	static void mousedev_packet(struct mousedev_client *, u8 *);
758:	static __poll_t mousedev_poll(struct file *, poll_table *);
716:	static ssize_t mousedev_read(struct file *, char *, size_t, loff_t *);
520:	static int mousedev_release(struct inode *, struct file *);
674:	static ssize_t mousedev_write(struct file *, const char *, size_t, loff_t *);

File drivers/input/serio/i8042-x86ia64io.h:
1278:	static int i8042_platform_init(void);
1072:	static int i8042_pnp_aux_probe(struct pnp_dev *, const struct pnp_device_id *);
1151:	static void i8042_pnp_exit(void);
1034:	static void i8042_pnp_id_to_string(struct pnp_id *, char *, int);
1164:	static int i8042_pnp_init(void);
1045:	static int i8042_pnp_kbd_probe(struct pnp_dev *, const struct pnp_device_id *);

File drivers/input/serio/i8042.c:
346:	int i8042_command(unsigned char *, int);
193:	int i8042_install_filter(bool (*)(unsigned char, unsigned char, struct serio *));
181:	void i8042_lock_chip(void);
214:	int i8042_remove_filter(bool (*)(unsigned char, unsigned char, struct serio *));
187:	void i8042_unlock_chip(void);
302:	static int __i8042_command(unsigned char *, int);
750:	static irqreturn_t i8042_aux_test_irq(int, void *);
387:	static int i8042_aux_write(struct serio *, unsigned char);
805:	static int i8042_check_aux(void);
991:	static int i8042_controller_init(void);
1080:	static void i8042_controller_reset(bool);
1173:	static int i8042_controller_resume(bool);
946:	static int i8042_controller_selftest(void);
1356:	static int i8042_create_aux_port(int);
1327:	static int i8042_create_kbd_port(void);
635:	static int i8042_enable_aux_port(void);
616:	static int i8042_enable_kbd_port(void);
655:	static int i8042_enable_mux_ports(void);
1661:	static void i8042_exit(void);
268:	static int i8042_flush(void);
1440:	static void i8042_free_irqs(void);
1616:	static int i8042_init(void);
522:	static irqreturn_t i8042_interrupt(int, void *);
1519:	static int i8042_kbd_bind_notifier(struct notifier_block *, unsigned long, void *);
366:	static int i8042_kbd_write(struct serio *, unsigned char);
1131:	static long i8042_panic_blink(int);
1294:	static int i8042_pm_reset(struct device *);
1301:	static int i8042_pm_restore(struct device *);
1257:	static int i8042_pm_resume(struct device *);
1249:	static int i8042_pm_resume_noirq(struct device *);
1231:	static int i8042_pm_suspend(struct device *);
1287:	static int i8042_pm_thaw(struct device *);
402:	static void i8042_port_close(struct serio *);
1542:	static int i8042_probe(struct platform_device *);
1590:	static int i8042_remove(struct platform_device *);
674:	static int i8042_set_mux_mode(bool, unsigned char *);
59:	static int i8042_set_reset(const char *, const struct kernel_param *);
1450:	static int i8042_setup_aux(void);
1322:	static void i8042_shutdown(struct platform_device *);
441:	static int i8042_start(struct serio *);
471:	static void i8042_stop(struct serio *);
777:	static int i8042_toggle_aux(bool);

File drivers/input/serio/libps2.c:
226:	int __ps2_command(struct ps2dev *, u8 *, unsigned int);
101:	void ps2_begin_command(struct ps2dev *);
480:	void ps2_cmd_aborted(struct ps2dev *);
327:	int ps2_command(struct ps2dev *, u8 *, unsigned int);
122:	void ps2_drain(struct ps2dev *, size_t, unsigned int);
109:	void ps2_end_command(struct ps2dev *);
390:	bool ps2_handle_ack(struct ps2dev *, u8);
460:	bool ps2_handle_response(struct ps2dev *, u8);
376:	void ps2_init(struct ps2dev *, struct serio *);
149:	bool ps2_is_keyboard_id(u8);
86:	int ps2_sendbyte(struct ps2dev *, u8, unsigned int);
347:	int ps2_sliced_command(struct ps2dev *, u8);
25:	static int ps2_do_sendbyte(struct ps2dev *, u8, unsigned int, unsigned int);

File drivers/input/serio/serio.c:
814:	int __serio_register_driver(struct serio_driver *, struct module *, const char *);
695:	void __serio_register_port(struct serio *, struct module *);
984:	void serio_close(struct serio *);
993:	irqreturn_t serio_interrupt(struct serio *, unsigned char, unsigned int);
971:	int serio_open(struct serio *, struct serio_driver *);
685:	void serio_reconnect(struct serio *);
679:	void serio_rescan(struct serio *);
717:	void serio_unregister_child_port(struct serio *);
853:	void serio_unregister_driver(struct serio_driver *);
705:	void serio_unregister_port(struct serio *);
742:	static ssize_t bind_mode_show(struct device_driver *, char *);
748:	static ssize_t bind_mode_store(struct device_driver *, const char *, size_t);
735:	static ssize_t description_show(struct device_driver *, char *);
382:	static ssize_t drvctl_store(struct device *, struct device_attribute *, const char *, size_t);
376:	static ssize_t extra_show(struct device *, struct device_attribute *, char *);
436:	static ssize_t firmware_id_show(struct device *, struct device_attribute *, char *);
370:	static ssize_t id_show(struct device *, struct device_attribute *, char *);
350:	static ssize_t modalias_show(struct device *, struct device_attribute *, char *);
364:	static ssize_t proto_show(struct device *, struct device_attribute *, char *);
90:	static int serio_bind_driver(struct serio *, struct serio_driver *);
884:	static int serio_bus_match(struct device *, struct device_driver *);
553:	static void serio_destroy_port(struct serio *);
65:	static void serio_disconnect_driver(struct serio *);
644:	static void serio_disconnect_port(struct serio *);
773:	static int serio_driver_probe(struct device *);
781:	static int serio_driver_remove(struct device *);
1041:	static void serio_exit(void);
199:	static void serio_handle_event(struct work_struct *);
1028:	static int serio_init(void);
73:	static int serio_match_port(const struct serio_device_id *, struct serio *);
240:	static int serio_queue_event(void *, struct module *, enum serio_event_type);
602:	static void serio_reconnect_subtree(struct serio *);
486:	static void serio_release_port(struct device *);
173:	static void serio_remove_duplicate_events(void *, enum serio_event_type);
295:	static void serio_remove_pending_events(void *);
937:	static int serio_resume(struct device *);
419:	static ssize_t serio_set_bind_mode(struct device *, struct device_attribute *, const char *, size_t);
877:	static void serio_set_drv(struct serio *, struct serio_driver *);
413:	static ssize_t serio_show_bind_mode(struct device *, struct device_attribute *, char *);
344:	static ssize_t serio_show_description(struct device *, struct device_attribute *, char *);
797:	static void serio_shutdown(struct device *);
928:	static int serio_suspend(struct device *);
902:	static int serio_uevent(struct device *, struct kobj_uevent_env *);
358:	static ssize_t type_show(struct device *, struct device_attribute *, char *);

File drivers/input/serio/serport.c:
303:	static void serport_exit(void);
293:	static int serport_init(void);
104:	static void serport_ldisc_close(struct tty_struct *);
227:	static int serport_ldisc_compat_ioctl(struct tty_struct *, struct file *, unsigned int, unsigned long);
246:	static int serport_ldisc_hangup(struct tty_struct *);
209:	static int serport_ldisc_ioctl(struct tty_struct *, struct file *, unsigned int, unsigned long);
78:	static int serport_ldisc_open(struct tty_struct *);
159:	static ssize_t serport_ldisc_read(struct tty_struct *, struct file *, unsigned char *, size_t, void **, unsigned long);
117:	static void serport_ldisc_receive(struct tty_struct *, const unsigned char *, char *, int);
259:	static void serport_ldisc_write_wakeup(struct tty_struct *);
63:	static void serport_serio_close(struct serio *);
50:	static int serport_serio_open(struct serio *);
44:	static int serport_serio_write(struct serio *, unsigned char);

File drivers/input/touchscreen/of_touchscreen.c:
64:	void touchscreen_parse_properties(struct input_dev *, bool, struct touchscreen_properties *);
194:	void touchscreen_report_pos(struct input_dev *, const struct touchscreen_properties *, unsigned int, unsigned int, bool);
172:	void touchscreen_set_mt_pos(struct input_mt_pos *, const struct touchscreen_properties *, unsigned int, unsigned int);
32:	static void touchscreen_set_params(struct input_dev *, unsigned long, int, int, int);

File drivers/iommu/amd/init.c:
1075:	int add_special_device(u8, u8, u16 *, bool);
1031:	void amd_iommu_apply_erratum_63(u16);
2981:	int amd_iommu_detect(void);
2910:	void amd_iommu_disable(void);
2898:	int amd_iommu_enable(void);
2922:	int amd_iommu_enable_faulting(void);
296:	int amd_iommu_get_num_iommus(void);
3174:	u8 amd_iommu_pc_get_max_banks(unsigned int);
3191:	u8 amd_iommu_pc_get_max_counters(unsigned int);
3240:	int amd_iommu_pc_get_reg(struct amd_iommu *, u8, u8, u8, u64 *);
3249:	int amd_iommu_pc_set_reg(struct amd_iommu *, u8, u8, u8, u64 *);
3185:	bool amd_iommu_pc_supported(void);
2886:	int amd_iommu_prepare(void);
2915:	int amd_iommu_reenable(int);
662:	void amd_iommu_reset_cmd_buffer(struct amd_iommu *);
3149:	bool amd_iommu_v2_supported(void);
3155:	struct amd_iommu *get_amd_iommu(unsigned int);
262:	bool translation_pre_enabled(struct amd_iommu *);
2054:	static void _irq_notifier_notify(struct irq_affinity_notify *, const cpumask_t *);
2067:	static void _irq_notifier_release(struct kref *);
1112:	static int add_acpi_hid_device(u8 *, u8 *, u16 *, bool);
1148:	static int add_early_maps(void);
2753:	static int amd_iommu_enable_interrupts(void);
1480:	static void amd_iommu_erratum_746_workaround(struct amd_iommu *);
2934:	static int amd_iommu_init(void);
1948:	static int amd_iommu_init_pci(void);
2456:	static void amd_iommu_resume(void);
1748:	static ssize_t amd_iommu_show_cap(struct device *, struct device_attribute *, char *);
1757:	static ssize_t amd_iommu_show_features(struct device *, struct device_attribute *, char *);
2469:	static int amd_iommu_suspend(void);
2510:	static bool check_ioapic_information(void);
931:	static bool copy_device_table(void);
2438:	static void disable_iommus(void);
2600:	static int early_amd_iommu_init(void);
2369:	static void early_enable_iommus(void);
2421:	static void enable_iommus_v2(void);
613:	static int find_last_devid_acpi(struct acpi_table_header *);
796:	static void free_ga_log(struct amd_iommu *);
2482:	static void free_iommu_resources(void);
1691:	static int init_iommu_all(struct acpi_table_header *);
1186:	static int init_iommu_from_acpi(struct amd_iommu *, struct ivhd_header *);
1537:	static int init_iommu_one(struct amd_iommu *, struct ivhd_header *);
2151:	static int init_unity_map_range(struct ivmd_header *);
706:	static void *iommu_alloc_4k_pages(struct amd_iommu *, size_t, gfp_t);
2286:	static void iommu_apply_resume_quirks(struct amd_iommu *);
464:	static void iommu_disable(struct amd_iommu *);
678:	static void iommu_enable_command_buffer(struct amd_iommu *);
731:	static void iommu_enable_event_buffer(struct amd_iommu *);
2329:	static void iommu_enable_ga(struct amd_iommu *);
892:	static void iommu_enable_xt(struct amd_iommu *);
2870:	static int iommu_go_to_state(enum iommu_init_state);
2259:	static void iommu_init_flags(struct amd_iommu *);
834:	static int iommu_init_ga_log(struct amd_iommu *);
1811:	static int iommu_init_pci(struct amd_iommu *);
3202:	static int iommu_pc_get_set_reg(struct amd_iommu *, u8, u8, u8, u64 *, bool);
347:	static u32 iommu_read_l2(struct amd_iommu *, u8);
417:	static void iommu_set_device_table(struct amd_iommu *, struct amd_iommu *);
2028:	static void iommu_update_intcapxt(struct amd_iommu *);
3009:	static int parse_amd_iommu_dump(char *);
3016:	static int parse_amd_iommu_intr(char *);
3031:	static int parse_amd_iommu_options(char *);
3105:	static int parse_ivrs_acpihid(char *);
3075:	static int parse_ivrs_hpet(char *);
3045:	static int parse_ivrs_ioapic(char *);
1911:	static void print_iommu_info(void);
1052:	static void set_dev_entry_from_acpi(struct amd_iommu *, u16, u32, u32);
2796:	static int state_next(void);

File drivers/iommu/amd/iommu.c:
3904:	int amd_iommu_activate_guest_mode(void *);
3072:	int amd_iommu_complete_ppr(struct pci_dev *, u32, int, int);
4076:	int amd_iommu_create_irq_domain(struct amd_iommu *);
3931:	int amd_iommu_deactivate_guest_mode(void *);
3135:	int amd_iommu_device_info(struct pci_dev *, struct amd_iommu_device_info *);
3058:	int amd_iommu_domain_clear_gcr3(struct iommu_domain *, u32);
2802:	void amd_iommu_domain_direct_map(struct iommu_domain *);
2826:	int amd_iommu_domain_enable_v2(struct iommu_domain *, int);
3043:	int amd_iommu_domain_set_gcr3(struct iommu_domain *, u32, unsigned long);
3123:	void amd_iommu_enable_device_erratum(struct pci_dev *, u32);
2939:	int amd_iommu_flush_page(struct iommu_domain *, u32, u64);
2960:	int amd_iommu_flush_tlb(struct iommu_domain *, u32);
3089:	struct iommu_domain *amd_iommu_get_v2_domain(struct pci_dev *);
2341:	int amd_iommu_init_api(void);
2364:	int amd_iommu_init_dma_ops(void);
865:	irqreturn_t amd_iommu_int_handler(int, void *);
820:	irqreturn_t amd_iommu_int_thread(int, void *);
2711:	bool amd_iommu_is_attach_deferred(struct iommu_domain *, struct device *);
749:	int amd_iommu_register_ga_log_notifier(int (*)(u32));
2790:	int amd_iommu_register_ppr_notifier(struct notifier_block *);
2796:	int amd_iommu_unregister_ppr_notifier(struct notifier_block *);
4096:	int amd_iommu_update_ga(int, bool, void *);
1228:	void iommu_flush_all_caches(struct amd_iommu *);
3217:	static struct irq_remap_table *__alloc_irq_table(void);
1301:	static void __domain_flush_pages(struct protection_domain *, u64, size_t, int);
2872:	static int __flush_pasid(struct protection_domain *, u32, u64, bool);
2974:	static u64 *__get_gcr3_pte(u64 *, int, u32, bool);
1064:	static int __iommu_queue_command_sync(struct amd_iommu *, struct iommu_cmd *, bool);
3330:	static int alloc_irq_index(u16, int, bool, struct pci_dev *);
3262:	static struct irq_remap_table *alloc_irq_table(u16, struct pci_dev *);
1544:	static u64 *alloc_pte(struct protection_domain *, unsigned long, unsigned long, gfp_t, bool *, u64 **);
2544:	static int amd_iommu_attach_device(struct iommu_domain *, struct device *);
2643:	static bool amd_iommu_capable(enum iommu_cap);
2737:	static int amd_iommu_def_domain_type(struct device *);
2514:	static void amd_iommu_detach_device(struct iommu_domain *, struct device *);
2275:	static struct iommu_group *amd_iommu_device_group(struct device *);
2463:	static struct iommu_domain *amd_iommu_domain_alloc(unsigned int);
2491:	static void amd_iommu_domain_free(struct iommu_domain *);
2283:	static int amd_iommu_domain_get_attr(struct iommu_domain *, enum iommu_attr, void *);
2720:	static void amd_iommu_flush_iotlb_all(struct iommu_domain *);
2659:	static void amd_iommu_get_resv_regions(struct device *, struct list_head *);
2731:	static void amd_iommu_iotlb_sync(struct iommu_domain *, struct iommu_iotlb_gather *);
2620:	static phys_addr_t amd_iommu_iova_to_phys(struct iommu_domain *, dma_addr_t);
2581:	static int amd_iommu_map(struct iommu_domain *, unsigned long, phys_addr_t, size_t, int, gfp_t);
2217:	static struct iommu_device *amd_iommu_probe_device(struct device *);
2251:	static void amd_iommu_probe_finalize(struct device *);
2261:	static void amd_iommu_release_device(struct device *);
549:	static void amd_iommu_report_page_fault(u16, u16, u64, int);
518:	static void amd_iommu_report_rmp_fault(volatile u32 *);
488:	static void amd_iommu_report_rmp_hw_error(volatile u32 *);
2606:	static size_t amd_iommu_unmap(struct iommu_domain *, unsigned long, size_t, struct iommu_iotlb_gather *);
4033:	static int amd_ir_set_affinity(struct irq_data *, const struct cpumask *, bool);
3961:	static int amd_ir_set_vcpu_affinity(struct irq_data *, void *);
2109:	static int attach_device(struct device *, struct protection_domain *);
931:	static void build_inv_iommu_pages(struct iommu_cmd *, u64, size_t, u16, int);
350:	static bool check_device(struct device *);
219:	static int clone_alias(struct pci_dev *, u16, void *);
2177:	static void detach_device(struct device *);
1267:	static int device_flush_dte(struct iommu_dev_data *);
1257:	static int device_flush_dte_alias(struct pci_dev *, u16, void *);
1242:	static int device_flush_iotlb(u64, size_t, struct iommu_dev_data *, struct iommu_dev_data *);
1982:	static void do_attach(struct iommu_dev_data *, struct protection_domain *);
2009:	static void do_detach(struct iommu_dev_data *);
1344:	static void domain_flush_complete(struct protection_domain *);
1835:	static u16 domain_id_alloc(void);
1645:	static u64 *fetch_pte(struct protection_domain *, unsigned long, unsigned long *);
1859:	static void free_gcr3_tbl_level1(u64 *);
3448:	static void free_irte(u16, int);
1475:	static void free_pagetable(struct domain_pgtable *);
1437:	static struct page *free_pt_l2(unsigned long, struct page *);
1438:	static struct page *free_pt_l3(unsigned long, struct page *);
1439:	static struct page *free_pt_l4(unsigned long, struct page *);
1440:	static struct page *free_pt_l5(unsigned long, struct page *);
1443:	static struct page *free_sub_pt(unsigned long, int, struct page *);
3603:	static int get_devid(struct irq_alloc_info *);
3639:	static struct irq_domain *get_irq_domain(struct irq_alloc_info *);
3202:	static struct irq_remap_table *get_irq_table(u16);
1497:	static bool increase_address_space(struct protection_domain *, unsigned long, gfp_t);
1124:	static int iommu_completion_wait(struct amd_iommu *);
1151:	static int iommu_flush_dte(struct amd_iommu *, u16);
371:	static int iommu_init_device(struct device *);
1723:	static int iommu_map_page(struct protection_domain *, unsigned long, unsigned long, unsigned long, int, gfp_t);
573:	static void iommu_print_event(void *, struct amd_iommu *, struct amd_iommu *);
1792:	static unsigned long iommu_unmap_page(struct protection_domain *, unsigned long, unsigned long);
4061:	static void ir_compose_msi_msg(struct irq_data *, struct msi_msg *);
3868:	static int irq_remapping_activate(struct irq_domain *, struct irq_data *, bool);
3729:	static int irq_remapping_alloc(struct irq_domain *, unsigned int, unsigned int, void *);
3885:	static void irq_remapping_deactivate(struct irq_domain *, struct irq_data *);
3842:	static void irq_remapping_free(struct irq_domain *, unsigned int, unsigned int);
3661:	static void irq_remapping_prepare_irte(struct amd_ir_data *, struct irq_cfg *, struct irq_alloc_info *, int, int, int);
3500:	static void irte_activate(void *, u16, u16);
3589:	static void irte_clear_allocated(struct irq_remap_table *, int);
3516:	static void irte_deactivate(void *, u16, u16);
3508:	static void irte_ga_activate(void *, u16, u16);
3594:	static void irte_ga_clear_allocated(struct irq_remap_table *, int);
3524:	static void irte_ga_deactivate(void *, u16, u16);
3581:	static bool irte_ga_is_allocated(struct irq_remap_table *, int);
3484:	static void irte_ga_prepare(void *, u32, u32, u8, u32, int);
3542:	static void irte_ga_set_affinity(void *, u16, u16, u8, u32);
3563:	static void irte_ga_set_allocated(struct irq_remap_table *, int);
3573:	static bool irte_is_allocated(struct irq_remap_table *, int);
3470:	static void irte_prepare(void *, u32, u32, u8, u32, int);
3532:	static void irte_set_affinity(void *, u16, u16, u8, u32);
3558:	static void irte_set_allocated(struct irq_remap_table *, int);
3424:	static int modify_irte(u16, int, union irte *);
3380:	static int modify_irte_ga(u16, int, struct irte_ga *, struct amd_ir_data *);
2060:	static int pdev_iommuv2_enable(struct pci_dev *);
2404:	static void protection_domain_free(struct protection_domain *);
1901:	static void set_dte_entry(u16, struct protection_domain *, struct domain_pgtable *, bool, bool);
3188:	static void set_dte_irq_entry(u16, struct irq_remap_table *, struct irq_remap_table *);
3241:	static void set_remap_table_entry(struct amd_iommu *, u16, struct irq_remap_table *);
3249:	static int set_remap_table_entry_alias(struct pci_dev *, u16, void *);
250:	static struct pci_dev *setup_aliases(struct device *);
2309:	static void update_device_table(struct protection_domain *, struct domain_pgtable *);
2328:	static void update_domain(struct protection_domain *);

File drivers/iommu/amd/quirks.c:
101:	void amd_iommu_apply_ivrs_quirks(void);
47:	static int ivrs_ioapic_quirk_cb(const struct dmi_system_id *);

File drivers/iommu/dma-iommu.c:
186:	int iommu_dma_bind_guest_msi(struct iommu_domain *, dma_addr_t, phys_addr_t, size_t);
1439:	void iommu_dma_compose_msi_msg(struct msi_desc *, struct msi_msg *);
276:	void iommu_dma_get_resv_regions(struct device *, struct list_head *);
1411:	int iommu_dma_prepare_msi(struct msi_desc *, phys_addr_t);
233:	void iommu_dma_unbind_guest_msi(struct iommu_domain *, dma_addr_t);
84:	int iommu_get_dma_cookie(struct iommu_domain *);
111:	int iommu_get_msi_cookie(struct iommu_domain *, dma_addr_t);
145:	void iommu_put_dma_cookie(struct iommu_domain *);
1294:	void iommu_setup_dma_ops(struct device *, u64, u64);
874:	static int __finalise_sg(struct scatterlist *, int, dma_addr_t, struct device *, struct device *);
1065:	static void __iommu_dma_free(size_t, void *, struct device *);
598:	static dma_addr_t __iommu_dma_map(struct device *, phys_addr_t, size_t, int, u64);
576:	static void __iommu_dma_unmap(struct device *, dma_addr_t, size_t);
285:	static int cookie_init_hw_msi_region(struct iommu_dma_cookie *, phys_addr_t, phys_addr_t);
1140:	static void *iommu_dma_alloc(struct device *, size_t, dma_addr_t *, gfp_t, unsigned long);
520:	static dma_addr_t iommu_dma_alloc_iova(struct iommu_domain *, size_t, u64, struct device *);
1103:	static void *iommu_dma_alloc_pages(size_t, struct page **, gfp_t, unsigned long, struct device *, struct device *);
476:	static int iommu_dma_deferred_attach(struct device *, struct iommu_domain *);
393:	static void iommu_dma_flush_iotlb_all(struct iova_domain *);
1096:	static void iommu_dma_free(struct device *, size_t, void *, dma_addr_t, unsigned long);
560:	static void iommu_dma_free_iova(struct iommu_dma_cookie *, dma_addr_t, size_t);
1261:	static unsigned long iommu_dma_get_merge_boundary(struct device *);
1369:	static struct iommu_dma_msi_page *iommu_dma_get_msi_page(struct device *, phys_addr_t, struct iommu_domain *);
1327:	static struct iommu_dma_msi_page *iommu_dma_get_nested_msi_page(struct iommu_domain *, phys_addr_t);
1234:	static int iommu_dma_get_sgtable(struct device *, struct sg_table *, void *, dma_addr_t, size_t, unsigned long);
1456:	static int iommu_dma_init(void);
843:	static dma_addr_t iommu_dma_map_page(struct device *, struct page *, unsigned long, size_t, enum dma_data_direction, unsigned long);
1051:	static dma_addr_t iommu_dma_map_resource(struct device *, phys_addr_t, size_t, enum dma_data_direction, unsigned long);
949:	static int iommu_dma_map_sg(struct device *, struct scatterlist *, int, enum dma_data_direction, unsigned long);
1203:	static int iommu_dma_mmap(struct device *, struct vm_area_struct *, void *, dma_addr_t, size_t, unsigned long);
815:	static void iommu_dma_sync_sg_for_cpu(struct device *, struct scatterlist *, int, enum dma_data_direction);
791:	static void iommu_dma_sync_single_for_cpu(struct device *, dma_addr_t, size_t, enum dma_data_direction);
859:	static void iommu_dma_unmap_page(struct device *, dma_addr_t, size_t, enum dma_data_direction, unsigned long);
1027:	static void iommu_dma_unmap_sg(struct device *, struct scatterlist *, int, enum dma_data_direction, unsigned long);
355:	static int iova_reserve_iommu_regions(struct device *, struct iommu_domain *, struct iommu_domain *);
310:	static int iova_reserve_pci_windows(struct pci_dev *, struct iova_domain *);

File drivers/iommu/hyperv-iommu.c:
180:	static int hyperv_enable_irq_remapping(void);
185:	static struct irq_domain *hyperv_get_irq_domain(struct irq_alloc_info *);
38:	static int hyperv_ir_set_affinity(struct irq_data *, const struct cpumask *, bool);
122:	static int hyperv_irq_remapping_activate(struct irq_domain *, struct irq_data *, bool);
68:	static int hyperv_irq_remapping_alloc(struct irq_domain *, unsigned int, unsigned int, void *);
116:	static void hyperv_irq_remapping_free(struct irq_domain *, unsigned int, unsigned int);
140:	static int hyperv_prepare_irq_remapping(void);

File drivers/iommu/intel/dmar.c:
921:	int detect_intel_iommu(void);
723:	bool dmar_acpi_insert_dev_scope(u8, struct acpi_device *, void *, void *, struct dmar_dev_scope *, int);
81:	void *dmar_alloc_dev_scope(void *, void *, int *);
808:	int dmar_dev_scope_init(void);
2301:	int dmar_device_add(acpi_handle);
2306:	int dmar_device_remove(acpi_handle);
1549:	void dmar_disable_qi(struct intel_iommu *);
1622:	int dmar_enable_qi(struct intel_iommu *);
1874:	irqreturn_t dmar_fault(int, void *);
694:	struct dmar_drhd_unit *dmar_find_matched_drhd_unit(struct pci_dev *);
104:	void dmar_free_dev_scope(struct dmar_dev_scope **, int *);
2034:	int dmar_ir_support(void);
1810:	void dmar_msi_mask(struct irq_data *);
1837:	void dmar_msi_read(int, struct msi_msg *);
1796:	void dmar_msi_unmask(struct irq_data *);
1824:	void dmar_msi_write(int, struct msi_msg *);
218:	int dmar_pci_insert_dev_scope(struct dmar_pci_notify_info *, void *, void *, u16, struct dmar_dev_scope *, int);
2318:	bool dmar_platform_optin(void);
2009:	int dmar_reenable_qi(struct intel_iommu *);
841:	void dmar_register_bus_notifier(void);
275:	int dmar_remove_dev_scope(struct dmar_pci_notify_info *, u16, struct dmar_dev_scope *, int);
1953:	int dmar_set_interrupt(struct intel_iommu *);
847:	int dmar_table_init(void);
1977:	int enable_drhd_fault_handling(void);
1391:	void qi_flush_context(struct intel_iommu *, u16, u16, u8, u64);
1429:	void qi_flush_dev_iotlb(struct intel_iommu *, u16, u16, u16, u64, unsigned int);
1493:	void qi_flush_dev_iotlb_pasid(struct intel_iommu *, u16, u16, u32, u16, u64, unsigned int);
1405:	void qi_flush_iotlb(struct intel_iommu *, u16, u64, unsigned int, u64);
1536:	void qi_flush_pasid_cache(struct intel_iommu *, u16, u64, u32);
1452:	void qi_flush_piotlb(struct intel_iommu *, u16, u32, u64, unsigned long, bool);
1378:	void qi_global_iec(struct intel_iommu *);
1287:	int qi_submit_sync(struct intel_iommu *, struct qi_desc *, unsigned int, unsigned long);
1584:	static void __dmar_enable_qi(struct intel_iommu *);
1057:	static int alloc_iommu(struct dmar_drhd_unit *);
776:	static int dmar_acpi_dev_scope_init(void);
123:	static struct dmar_pci_notify_info *dmar_alloc_pci_notify_info(struct pci_dev *, unsigned long);
2267:	static int dmar_device_hotplug(acpi_handle, bool);
1850:	static int dmar_fault_do_one(int, u8, u32, u16, unsigned long long, struct intel_iommu *);
458:	static void dmar_free_drhd(struct dmar_drhd_unit *);
1049:	static void dmar_free_seq_id(struct intel_iommu *);
2049:	static int dmar_free_unused_resources(void);
2254:	static acpi_status dmar_get_dsm_handle(acpi_handle, u32, void *, void **);
2184:	static int dmar_hotplug_insert(acpi_handle);
2230:	static int dmar_hotplug_remove(acpi_handle);
2128:	static int dmar_hp_add_drhd(struct acpi_dmar_header *, void *);
2170:	static int dmar_hp_release_drhd(struct acpi_dmar_header *, void *);
2144:	static int dmar_hp_remove_drhd(struct acpi_dmar_header *, void *);
467:	static int dmar_parse_one_andd(struct acpi_dmar_header *, void *);
410:	static int dmar_parse_one_drhd(struct acpi_dmar_header *, void *);
490:	static int dmar_parse_one_rhsa(struct acpi_dmar_header *, void *);
295:	static int dmar_pci_bus_add_dev(struct dmar_pci_notify_info *);
343:	static int dmar_pci_bus_notifier(struct notifier_block *, unsigned long, void *);
563:	static int dmar_table_detect(void);
884:	static int dmar_validate_one_drhd(struct acpi_dmar_header *, void *);
2096:	static int dmar_walk_dsm_resource(acpi_handle, int, dmar_res_handler_t, void *);
578:	static int dmar_walk_remapping_entries(struct acpi_dmar_header *, size_t, struct dmar_res_callback *);
1170:	static void free_iommu(struct intel_iommu *);
972:	static int map_iommu(struct intel_iommu *, u64);
630:	static int parse_dmar_table(void);
1214:	static int qi_check_fault(struct intel_iommu *, int, int);
871:	static void warn_invalid_dmar(u64, const char *);

File drivers/iommu/intel/iommu.c:
509:	void *alloc_pgtable_page(int);
236:	bool context_present(struct context_entry *);
880:	struct intel_iommu *device_to_iommu(struct device *, u8 *, u8 *);
4458:	int dmar_check_one_atsr(struct acpi_dmar_header *, void *);
4593:	int dmar_find_matched_atsr_unit(struct pci_dev *);
4556:	int dmar_iommu_hotplug(struct dmar_drhd_unit *, bool);
4656:	int dmar_iommu_notify_scope_dev(struct dmar_pci_notify_info *);
4396:	int dmar_parse_one_atsr(struct acpi_dmar_header *, void *);
4336:	int dmar_parse_one_rmrr(struct acpi_dmar_header *, void *);
4442:	int dmar_release_one_atsr(struct acpi_dmar_header *, void *);
4637:	int dmar_rmrr_add_acpi_dev(u8, struct acpi_device *);
597:	struct intel_iommu *domain_get_iommu(struct dmar_domain *);
2597:	struct dmar_domain *find_domain(struct device *);
392:	int for_each_device_domain(int (*)(struct device_domain_info *, void *), void *);
520:	void free_pgtable_page(void *);
368:	struct device_domain_info *get_domain_info(struct device *);
6016:	int intel_iommu_enable_pasid(struct intel_iommu *, struct device *);
5024:	int intel_iommu_init(void);
4792:	void intel_iommu_shutdown(void);
591:	int iommu_calculate_agaw(struct intel_iommu *);
581:	int iommu_calculate_max_sagaw(struct intel_iommu *);
767:	struct context_entry *iommu_context_addr(struct intel_iommu *, u8, u8, int);
1362:	void iommu_flush_write_buffer(struct intel_iommu *);
5187:	static void __dmar_remove_one_dev_info(struct device_domain_info *);
2370:	static int __domain_mapping(struct dmar_domain *, unsigned long, struct scatterlist *, unsigned long, unsigned long, int);
3553:	static dma_addr_t __intel_map_single(struct device *, phys_addr_t, size_t, int, u64);
1381:	static void __iommu_flush_context(struct intel_iommu *, u16, u16, u8, u64);
1415:	static void __iommu_flush_iotlb(struct intel_iommu *, u16, u64, unsigned int, u64);
4928:	static int acpi_device_create_direct_mappings(struct device *, struct device *);
1917:	static struct dmar_domain *alloc_domain(int);
5381:	static int aux_domain_add_dev(struct dmar_domain *, struct device *);
5458:	static void aux_domain_remove_dev(struct dmar_domain *, struct device *);
5337:	static int auxiliary_link_device(struct dmar_domain *, struct device *);
5360:	static int auxiliary_unlink_device(struct dmar_domain *, struct device *);
3971:	static dma_addr_t bounce_map_page(struct device *, struct page *, unsigned long, size_t, enum dma_data_direction, unsigned long);
3979:	static dma_addr_t bounce_map_resource(struct device *, phys_addr_t, size_t, enum dma_data_direction, unsigned long);
4013:	static int bounce_map_sg(struct device *, struct scatterlist *, int, enum dma_data_direction, unsigned long);
3857:	static dma_addr_t bounce_map_single(struct device *, phys_addr_t, size_t, enum dma_data_direction, unsigned long, u64);
4053:	static void bounce_sync_sg_for_cpu(struct device *, struct scatterlist *, int, enum dma_data_direction);
4065:	static void bounce_sync_sg_for_device(struct device *, struct scatterlist *, int, enum dma_data_direction);
3841:	static void bounce_sync_single(struct device *, dma_addr_t, size_t, enum dma_data_direction, enum dma_sync_target);
4039:	static void bounce_sync_single_for_cpu(struct device *, dma_addr_t, size_t, enum dma_data_direction);
4046:	static void bounce_sync_single_for_device(struct device *, dma_addr_t, size_t, enum dma_data_direction);
3987:	static void bounce_unmap_page(struct device *, dma_addr_t, size_t, enum dma_data_direction, unsigned long);
4001:	static void bounce_unmap_sg(struct device *, struct scatterlist *, int, enum dma_data_direction, unsigned long);
3947:	static void bounce_unmap_single(struct device *, dma_addr_t, size_t, enum dma_data_direction, unsigned long);
6455:	static void check_tylersburg_isoch(void);
3050:	static int copy_context_table(struct intel_iommu *, struct root_entry *, struct context_entry **, int, bool);
3152:	static int copy_translation_tables(struct intel_iommu *);
957:	static int device_context_mapped(struct intel_iommu *, u8, u8);
2993:	static int device_def_domain_type(struct device *);
2901:	static bool device_has_rmrr(struct device *);
1836:	static void disable_dmar_iommu(struct intel_iommu *);
1218:	static struct page *dma_pte_clear_level(struct dmar_domain *, int, struct dma_pte *, unsigned long, unsigned long, unsigned long, struct page *);
1092:	static void dma_pte_clear_range(struct dmar_domain *, unsigned long, unsigned long);
1123:	static void dma_pte_free_level(struct dmar_domain *, int, int, struct dma_pte *, unsigned long, unsigned long, unsigned long);
1166:	static void dma_pte_free_pagetable(struct dmar_domain *, unsigned long, unsigned long, int);
1194:	static struct page *dma_pte_list_pagetables(int, struct page *, struct dma_pte *, struct dmar_domain *, struct dma_pte *);
4377:	static struct dmar_atsr_unit *dmar_find_atsr(struct acpi_dmar_atsr *);
1997:	static int dmar_init_reserved_ranges(void);
2680:	static struct dmar_domain *dmar_insert_one_dev_info(struct intel_iommu *, int, int, struct device *, struct dmar_domain *);
5220:	static void dmar_remove_one_dev_info(struct device *);
1938:	static int domain_attach_iommu(struct dmar_domain *, struct intel_iommu *);
2530:	static void domain_context_clear_one(struct device_domain_info *, u8, u8);
5164:	static int domain_context_clear_one_cb(struct pci_dev *, u16, void *);
2310:	static int domain_context_mapped_cb(struct pci_dev *, u16, void *);
2274:	static int domain_context_mapping_cb(struct pci_dev *, u16, void *);
2119:	static int domain_context_mapping_one(struct dmar_domain *, struct intel_iommu *, struct pasid_table *, u8, u8);
1972:	static int domain_detach_iommu(struct dmar_domain *, struct intel_iommu *);
2050:	static void domain_exit(struct dmar_domain *);
1631:	static void domain_flush_piotlb(struct intel_iommu *, struct dmar_domain *, u64, unsigned long, bool);
2496:	static int domain_mapping(struct dmar_domain *, unsigned long, struct scatterlist *, unsigned long, unsigned long, int);
2638:	static int domain_setup_first_level(struct intel_iommu *, struct dmar_domain *, struct device *, u32);
1270:	static struct page *domain_unmap(struct dmar_domain *, unsigned long, unsigned long);
739:	static void domain_update_iommu_cap(struct dmar_domain *);
620:	static void domain_update_iommu_coherency(struct dmar_domain *);
650:	static int domain_update_iommu_snooping(struct intel_iommu *);
677:	static int domain_update_iommu_superpage(struct dmar_domain *, struct intel_iommu *);
1493:	static void domain_update_iotlb(struct dmar_domain *);
4754:	static void free_all_cpu_cached_iovas(unsigned int);
971:	static void free_context_table(struct intel_iommu *);
1860:	static void free_dmar_iommu(struct intel_iommu *);
3313:	static int init_dmars(void);
4195:	static int init_iommu_hw(void);
4158:	static void init_no_remapping_devices(void);
3688:	static void *intel_alloc_coherent(struct device *, size_t, dma_addr_t *, gfp_t, unsigned long);
3507:	static unsigned long intel_alloc_iova(struct device *, struct dmar_domain *, unsigned long, uint64_t);
4783:	static void intel_disable_iommus(void);
3725:	static void intel_free_coherent(struct device *, size_t, void *, dma_addr_t, unsigned long);
3818:	static u64 intel_get_required_mask(struct device *);
4479:	static int intel_iommu_add(struct dmar_drhd_unit *);
6067:	static void intel_iommu_apply_resv_region(struct device *, struct iommu_domain *, struct iommu_resv_region *);
5528:	static int intel_iommu_attach_device(struct iommu_domain *, struct device *);
5558:	static int intel_iommu_aux_attach_device(struct iommu_domain *, struct device *);
5579:	static void intel_iommu_aux_detach_device(struct iommu_domain *, struct device *);
6228:	static int intel_iommu_aux_get_pasid(struct iommu_domain *, struct device *);
5909:	static bool intel_iommu_capable(enum iommu_cap);
4777:	static int intel_iommu_cpu_dead(unsigned int);
5573:	static void intel_iommu_detach_device(struct iommu_domain *, struct device *);
6208:	static int intel_iommu_dev_disable_feat(struct device *, enum iommu_dev_features);
6186:	static int intel_iommu_dev_enable_feat(struct device *, enum iommu_dev_features);
6217:	static bool intel_iommu_dev_feat_enabled(struct device *, enum iommu_dev_features);
6156:	static bool intel_iommu_dev_has_feat(struct device *, enum iommu_dev_features);
6080:	static struct iommu_group *intel_iommu_device_group(struct device *);
5265:	static struct iommu_domain *intel_iommu_domain_alloc(unsigned int);
5303:	static void intel_iommu_domain_free(struct iommu_domain *);
6243:	static int intel_iommu_domain_set_attr(struct iommu_domain *, enum iommu_attr, void *);
4576:	static void intel_iommu_free_dmars(void);
5959:	static void intel_iommu_get_resv_regions(struct device *, struct list_head *);
3015:	static void intel_iommu_init_qi(struct intel_iommu *);
5838:	static phys_addr_t intel_iommu_iova_to_phys(struct iommu_domain *, dma_addr_t);
6236:	static bool intel_iommu_is_attach_deferred(struct iommu_domain *, struct device *);
5764:	static int intel_iommu_map(struct iommu_domain *, unsigned long, phys_addr_t, size_t, int, gfp_t);
4707:	static int intel_iommu_memory_notifier(struct notifier_block *, unsigned long, void *);
5919:	static struct iommu_device *intel_iommu_probe_device(struct device *);
5946:	static void intel_iommu_probe_finalize(struct device *);
5933:	static void intel_iommu_release_device(struct device *);
433:	static int intel_iommu_setup(char *);
4830:	static ssize_t intel_iommu_show_address(struct device *, struct device_attribute *, char *);
4839:	static ssize_t intel_iommu_show_cap(struct device *, struct device_attribute *, char *);
4848:	static ssize_t intel_iommu_show_ecap(struct device *, struct device_attribute *, char *);
4857:	static ssize_t intel_iommu_show_ndoms(struct device *, struct device_attribute *, char *);
4866:	static ssize_t intel_iommu_show_ndoms_used(struct device *, struct device_attribute *, char *);
4819:	static ssize_t intel_iommu_show_version(struct device *, struct device_attribute *, char *);
5802:	static size_t intel_iommu_unmap(struct iommu_domain *, unsigned long, size_t, struct iommu_iotlb_gather *);
3615:	static dma_addr_t intel_map_page(struct device *, struct page *, unsigned long, size_t, enum dma_data_direction, unsigned long);
3624:	static dma_addr_t intel_map_resource(struct device *, phys_addr_t, size_t, enum dma_data_direction, unsigned long);
3757:	static int intel_map_sg(struct device *, struct scatterlist *, int, enum dma_data_direction, unsigned long);
3631:	static void intel_unmap(struct device *, dma_addr_t, size_t);
3675:	static void intel_unmap_page(struct device *, dma_addr_t, size_t, enum dma_data_direction, unsigned long);
3739:	static void intel_unmap_sg(struct device *, struct scatterlist *, int, enum dma_data_direction, unsigned long);
1314:	static int iommu_alloc_root_entry(struct intel_iommu *);
1722:	static void iommu_disable_protect_mem_regions(struct intel_iommu *);
1758:	static void iommu_disable_translation(struct intel_iommu *);
2811:	static int iommu_domain_identity_map(struct dmar_domain *, unsigned long, unsigned long);
1521:	static void iommu_enable_dev_iotlb(struct device_domain_info *);
1742:	static void iommu_enable_translation(struct intel_iommu *);
1610:	static void iommu_flush_dev_iotlb(struct dmar_domain *, u64, unsigned int);
1645:	static void iommu_flush_iotlb_psi(struct intel_iommu *, struct dmar_domain *, unsigned long, unsigned int, int, int);
1699:	static void iommu_flush_iova(struct iova_domain *);
1778:	static int iommu_init_domains(struct intel_iommu *);
4277:	static void iommu_resume(void);
1335:	static void iommu_set_root_entry(struct intel_iommu *);
1472:	static struct device_domain_info *iommu_support_dev_iotlb(struct dmar_domain *, struct intel_iommu *, u8, u8);
4237:	static int iommu_suspend(void);
1306:	static void iova_entry_free(unsigned long);
1000:	static struct dma_pte *pfn_to_dma_pte(struct dmar_domain *, unsigned long, int *);
4907:	static int platform_optin_force_iommu(void);
5486:	static int prepare_domain_attach_device(struct iommu_domain *, struct device *);
4944:	static int probe_acpi_namespace_devices(void);
6403:	static void quirk_calpella_no_shadow_gtt(struct pci_dev *);
6427:	static void quirk_igfx_skip_te_disable(struct pci_dev *);
6328:	static void quirk_iommu_igfx(struct pci_dev *);
6372:	static void quirk_iommu_rwbf(struct pci_dev *);
6278:	static bool risky_device(struct pci_dev *);
491:	static void set_iommu_domain(struct intel_iommu *, u16, struct dmar_domain *);
2828:	static int si_domain_init(int);

File drivers/iommu/intel/irq_remapping.c:
1492:	int dmar_ir_hotplug(struct dmar_drhd_unit *, bool);
1103:	void intel_irq_remap_add_device(struct dmar_pci_notify_info *);
105:	static int alloc_irte(struct intel_iommu *, struct irq_2_iommu *, u16);
1036:	static void disable_irq_remapping(void);
1459:	static int dmar_ir_add(struct dmar_drhd_unit *, struct intel_iommu *);
710:	static void intel_cleanup_irq_remapping(void);
823:	static int intel_enable_irq_remapping(void);
1325:	static void intel_free_irq_resources(struct irq_domain *, unsigned int, unsigned int);
1131:	static struct irq_domain *intel_get_irq_domain(struct irq_alloc_info *);
1211:	static void intel_ir_compose_msi_msg(struct irq_data *, struct msi_msg *);
1156:	static void intel_ir_reconfigure_irte(struct irq_data *, bool);
1189:	static int intel_ir_set_affinity(struct irq_data *, const struct cpumask *, bool);
1219:	static int intel_ir_set_vcpu_affinity(struct irq_data *, void *);
1432:	static int intel_irq_remapping_activate(struct irq_domain *, struct irq_data *, bool);
1347:	static int intel_irq_remapping_alloc(struct irq_domain *, unsigned int, unsigned int, void *);
1439:	static void intel_irq_remapping_deactivate(struct irq_domain *, struct irq_data *);
1425:	static void intel_irq_remapping_free(struct irq_domain *, unsigned int, unsigned int);
1263:	static void intel_irq_remapping_prepare_irte(struct intel_ir_data *, struct irq_alloc_info *, int, int, struct irq_cfg *, struct irq_cfg *);
726:	static int intel_prepare_irq_remapping(void);
541:	static int intel_setup_irq_remapping(struct intel_iommu *);
641:	static void intel_teardown_irq_remapping(struct intel_iommu *);
671:	static void iommu_disable_irq_remapping(struct intel_iommu *);
507:	static void iommu_enable_irq_remapping(struct intel_iommu *);
438:	static int iommu_load_old_irte(struct intel_iommu *);
480:	static void iommu_set_irq_remapping(struct intel_iommu *, int);
1021:	static int ir_dev_scope_init(void);
944:	static int ir_parse_ioapic_hpet_scope(struct acpi_dmar_header *, struct intel_iommu *);
854:	static int ir_parse_one_hpet_scope(struct acpi_dmar_device_scope *, struct intel_iommu *, struct acpi_dmar_hardware_unit *);
899:	static int ir_parse_one_ioapic_scope(struct acpi_dmar_device_scope *, struct intel_iommu *, struct acpi_dmar_hardware_unit *);
968:	static void ir_remove_ioapic_hpet_scope(struct intel_iommu *);
218:	static struct intel_iommu *map_ioapic_to_iommu(int);
158:	static int modify_irte(struct irq_2_iommu *, struct irte *);
985:	static int parse_ioapics_under_ir(void);
1058:	static int reenable_irq_remapping(int);
395:	static int set_msi_sid(struct irte *, struct pci_dev *);
381:	static int set_msi_sid_cb(struct pci_dev *, u16, void *);

File drivers/iommu/intel/pasid.c:
143:	int intel_pasid_alloc_table(struct device *);
193:	void intel_pasid_free_table(struct device *);
234:	int intel_pasid_get_dev_max_id(struct device *);
245:	struct pasid_entry *intel_pasid_get_entry(struct device *, u32);
223:	struct pasid_table *intel_pasid_get_table(struct device *);
545:	int intel_pasid_setup_first_level(struct intel_iommu *, struct device *, pgd_t *, u32, u16, int);
770:	int intel_pasid_setup_nested(struct intel_iommu *, struct device *, pgd_t *, u32, struct iommu_gpasid_bind_data_vtd *, struct dmar_domain *, int);
683:	int intel_pasid_setup_pass_through(struct intel_iommu *, struct dmar_domain *, struct device *, u32);
621:	int intel_pasid_setup_second_level(struct intel_iommu *, struct dmar_domain *, struct device *, u32);
496:	void intel_pasid_tear_down_entry(struct intel_iommu *, struct device *, u32, bool);
30:	int vcmd_alloc_pasid(struct intel_iommu *, u32 *);
61:	void vcmd_free_pasid(struct intel_iommu *, u32);
128:	static int get_alias_pasid_table(struct pci_dev *, u16, void *);
526:	static void pasid_flush_caches(struct intel_iommu *, struct pasid_entry *, u32, u16);
113:	static int search_pasid_table(struct device_domain_info *, void *);

File drivers/iommu/ioasid.c:
305:	ioasid_t ioasid_alloc(struct ioasid_set *, ioasid_t, ioasid_t, void *);
419:	void *ioasid_find(struct ioasid_set *, ioasid_t, bool (*)(void *));
353:	void ioasid_get(ioasid_t);
376:	bool ioasid_put(ioasid_t);
139:	int ioasid_register_allocator(struct ioasid_allocator_ops *);
269:	int ioasid_set_data(ioasid_t, void *);
207:	void ioasid_unregister_allocator(struct ioasid_allocator_ops *);
78:	static ioasid_t default_alloc(ioasid_t, ioasid_t, void *);
90:	static void default_free(ioasid_t, void *);

File drivers/iommu/iommu-sysfs.c:
106:	int iommu_device_link(struct iommu_device *, struct device *);
54:	int iommu_device_sysfs_add(struct iommu_device *, struct device *, const struct attribute_group **, const char *, ...);
92:	void iommu_device_sysfs_remove(struct iommu_device *);
127:	void iommu_device_unlink(struct iommu_device *, struct device *);
43:	static int iommu_dev_init(void);
32:	static void release_device(struct device *);

File drivers/iommu/iommu.c:
817:	void __acpi_device_create_direct_mappings(struct iommu_group *, struct device *);
1918:	int bus_iommu_probe(struct bus_type *);
2008:	int bus_set_iommu(struct bus_type *, const struct iommu_ops *);
1627:	struct iommu_group *fsl_mc_device_group(struct device *);
1552:	struct iommu_group *generic_device_group(struct device *);
3219:	void generic_iommu_put_resv_regions(struct device *, struct list_head *);
3228:	struct iommu_resv_region *iommu_alloc_resv_region(phys_addr_t, size_t, int, enum iommu_resv_type);
2116:	int iommu_attach_device(struct iommu_domain *, struct device *);
2554:	int iommu_attach_group(struct iommu_domain *, struct iommu_group *);
2354:	int iommu_attach_pasid_table(struct iommu_domain *, struct iommu_pasid_table_config *);
3414:	int iommu_aux_attach_device(struct iommu_domain *, struct device *);
3428:	void iommu_aux_detach_device(struct iommu_domain *, struct device *);
3437:	int iommu_aux_get_pasid(struct iommu_domain *, struct device *);
2453:	int iommu_bind_guest_msi(struct iommu_domain *, dma_addr_t, phys_addr_t, size_t);
2037:	bool iommu_capable(struct bus_type *, enum iommu_cap);
3147:	int iommu_clear_dirty_log(struct iommu_domain *, unsigned long, size_t, unsigned long *, unsigned long, unsigned long);
3263:	bool iommu_default_passthrough(void);
2473:	void iommu_detach_device(struct iommu_domain *, struct device *);
2599:	void iommu_detach_group(struct iommu_domain *, struct iommu_group *);
2414:	void iommu_detach_pasid_table(struct iommu_domain *);
3378:	int iommu_dev_disable_feature(struct device *, enum iommu_dev_features);
3360:	int iommu_dev_enable_feature(struct device *, enum iommu_dev_features);
3391:	bool iommu_dev_feature_enabled(struct device *, enum iommu_dev_features);
3582:	int iommu_dev_get_config(struct device *, int, void *);
3349:	bool iommu_dev_has_feature(struct device *, enum iommu_dev_features);
3571:	int iommu_dev_set_config(struct device *, int, void *);
166:	int iommu_device_register(struct iommu_device *);
175:	void iommu_device_unregister(struct iommu_device *);
2090:	struct iommu_domain *iommu_domain_alloc(struct bus_type *);
2096:	void iommu_domain_free(struct iommu_domain *);
2946:	int iommu_domain_get_attr(struct iommu_domain *, enum iommu_attr, void *);
2974:	int iommu_domain_set_attr(struct iommu_domain *, enum iommu_attr, void *);
2883:	void iommu_domain_window_disable(struct iommu_domain *, u32);
2872:	int iommu_domain_window_enable(struct iommu_domain *, u32, phys_addr_t, u64, int);
3320:	int iommu_fwspec_add_ids(struct device *, u32 *, int);
3308:	void iommu_fwspec_free(struct device *);
3284:	int iommu_fwspec_init(struct device *, struct fwnode_handle *, const struct iommu_ops *);
2516:	struct iommu_domain *iommu_get_dma_domain(struct device *);
2495:	struct iommu_domain *iommu_get_domain_for_dev(struct device *);
488:	int iommu_get_group_resv_regions(struct iommu_group *, struct list_head *);
3191:	void iommu_get_resv_regions(struct device *, struct list_head *);
831:	int iommu_group_add_device(struct iommu_group *, struct device *);
599:	struct iommu_group *iommu_group_alloc(void);
1736:	struct iommu_domain *iommu_group_default_domain(struct iommu_group *);
992:	int iommu_group_for_each_dev(struct iommu_group *, void *, int (*)(struct device *, void *));
1013:	struct iommu_group *iommu_group_get(struct device *);
657:	struct iommu_group *iommu_group_get_by_id(int);
694:	void *iommu_group_get_iommudata(struct iommu_group *);
1434:	int iommu_group_id(struct iommu_group *);
1045:	void iommu_group_put(struct iommu_group *);
1031:	struct iommu_group *iommu_group_ref_get(struct iommu_group *);
1061:	int iommu_group_register_notifier(struct iommu_group *, struct notifier_block *);
916:	void iommu_group_remove_device(struct device *);
710:	void iommu_group_set_iommudata(struct iommu_group *, void *, void (*)(void *));
726:	int iommu_group_set_name(struct iommu_group *, const char *);
1075:	int iommu_group_unregister_notifier(struct iommu_group *, struct notifier_block *);
2607:	phys_addr_t iommu_iova_to_phys(struct iommu_domain *, dma_addr_t);
2719:	int iommu_map(struct iommu_domain *, unsigned long, phys_addr_t, size_t, int);
2727:	int iommu_map_atomic(struct iommu_domain *, unsigned long, phys_addr_t, size_t, int);
2857:	size_t iommu_map_sg(struct iommu_domain *, unsigned long, struct scatterlist *, unsigned int, int);
2865:	size_t iommu_map_sg_atomic(struct iommu_domain *, unsigned long, struct scatterlist *, unsigned int, int);
3269:	const struct iommu_ops *iommu_ops_from_fwnode(struct fwnode_handle *);
1356:	int iommu_page_response(struct device *, struct iommu_page_response *);
2616:	size_t iommu_pgsize(struct iommu_domain *, unsigned long, size_t);
2031:	bool iommu_present(struct bus_type *);
258:	int iommu_probe_device(struct device *);
3200:	void iommu_put_resv_regions(struct device *, struct list_head *);
1133:	int iommu_register_device_fault_handler(struct device *, iommu_dev_fault_handler_t, void *);
305:	void iommu_release_device(struct device *);
1299:	int iommu_report_device_fault(struct device *, struct iommu_fault_event *);
3247:	void iommu_set_default_passthrough(bool);
3255:	void iommu_set_default_translated(bool);
2058:	void iommu_set_fault_handler(struct iommu_domain *, iommu_fault_handler_t, void *);
2991:	bool iommu_support_dirty_log(struct iommu_domain *);
3513:	struct iommu_sva *iommu_sva_bind_device(struct device *, struct mm_struct *, void *);
3467:	struct iommu_sva *iommu_sva_bind_group(struct iommu_group *, struct mm_struct *, void *);
3560:	u32 iommu_sva_get_pasid(struct iommu_sva *);
3539:	void iommu_sva_unbind_device(struct iommu_sva *);
2327:	int iommu_sva_unbind_gpasid(struct iommu_domain *, struct device *, ioasid_t);
2999:	int iommu_switch_dirty_log(struct iommu_domain *, bool, unsigned long, size_t, int);
3059:	int iommu_sync_dirty_log(struct iommu_domain *, unsigned long, size_t, unsigned long *, unsigned long, unsigned long);
2364:	int iommu_uapi_attach_pasid_table(struct iommu_domain *, void *);
2200:	int iommu_uapi_cache_invalidate(struct iommu_domain *, struct device *, void *);
2310:	int iommu_uapi_sva_bind_gpasid(struct iommu_domain *, struct device *, void *);
2337:	int iommu_uapi_sva_unbind_gpasid(struct iommu_domain *, struct device *, void *);
2463:	void iommu_unbind_guest_msi(struct iommu_domain *, dma_addr_t);
2788:	size_t iommu_unmap(struct iommu_domain *, unsigned long, size_t);
2802:	size_t iommu_unmap_fast(struct iommu_domain *, unsigned long, size_t, struct iommu_iotlb_gather *);
1181:	int iommu_unregister_device_fault_handler(struct device *);
1562:	struct iommu_group *pci_device_group(struct device *);
2916:	int report_iommu_fault(struct iommu_domain *, struct device *, unsigned long, int);
2102:	static int __iommu_attach_device(struct iommu_domain *, struct device *);
3110:	static int __iommu_clear_dirty_log(struct iommu_domain *, unsigned long, size_t, unsigned long *, unsigned long, unsigned long);
2423:	static void __iommu_detach_device(struct iommu_domain *, struct device *);
2575:	static void __iommu_detach_group(struct iommu_domain *, struct iommu_group *);
2069:	static struct iommu_domain *__iommu_domain_alloc(struct bus_type *, unsigned int);
2649:	static int __iommu_map(struct iommu_domain *, unsigned long, phys_addr_t, size_t, int, gfp_t);
2810:	static size_t __iommu_map_sg(struct iommu_domain *, unsigned long, struct scatterlist *, unsigned int, int, gfp_t);
206:	static int __iommu_probe_device(struct device *, struct list_head *);
2734:	static size_t __iommu_unmap(struct iommu_domain *, unsigned long, size_t, struct iommu_iotlb_gather *);
1493:	static struct iommu_group *get_pci_alias_group(struct pci_dev *, unsigned long *);
1538:	static int get_pci_alias_or_group(struct pci_dev *, u16, void *);
1459:	static struct iommu_group *get_pci_function_alias_group(struct pci_dev *, unsigned long *);
1768:	static int iommu_bus_notifier(struct notifier_block *, unsigned long, void *);
753:	static int iommu_create_device_direct_mappings(struct device *, struct iommu_group *, struct iommu_group *);
1082:	static void iommu_dev_fault_timer_fn(struct timer_list *);
339:	static int iommu_dma_setup(char *);
1650:	static int iommu_group_alloc_default_domain(struct bus_type *, struct iommu_group *, unsigned int);
365:	static ssize_t iommu_group_attr_show(struct kobject *, struct attribute *, char *);
377:	static ssize_t iommu_group_attr_store(struct kobject *, struct attribute *, const char *, size_t);
565:	static void iommu_group_release(struct kobject *);
407:	static ssize_t iommu_group_show_name(struct iommu_group *, char *);
510:	static ssize_t iommu_group_show_resv_regions(struct iommu_group *, char *);
532:	static ssize_t iommu_group_show_type(struct iommu_group *, char *);
2934:	static int iommu_init(void);
421:	static int iommu_insert_resv_region(struct iommu_resv_region *, struct list_head *);
321:	static int iommu_set_def_domain_type(char *);
345:	static int iommu_set_prq_timeout(char *);
142:	static int iommu_subsys_init(void);
2278:	static int iommu_sva_prepare_bind_data(void *, struct iommu_gpasid_bind_data *);
1825:	static int probe_get_default_domain_type(struct device *, void *);
1741:	static int probe_iommu_group(struct device *, void *);
1761:	static int remove_iommu_group(struct device *, void *);

File drivers/iommu/iova.c:
392:	void __free_iova(struct iova_domain *, struct iova *);
313:	struct iova *alloc_iova(struct iova_domain *, unsigned long, unsigned long, bool);
431:	unsigned long alloc_iova_fast(struct iova_domain *, unsigned long, unsigned long, bool);
253:	struct iova *alloc_iova_mem(void);
716:	void copy_reserved_iova(struct iova_domain *, struct iova_domain *);
372:	struct iova *find_iova(struct iova_domain *, unsigned long);
1042:	void free_cpu_cached_iovas(unsigned int, struct iova_domain *);
410:	void free_iova(struct iova_domain *, unsigned long);
469:	void free_iova_fast(struct iova_domain *, unsigned long, unsigned long);
259:	void free_iova_mem(struct iova *);
57:	bool has_iova_flush_queue(struct iova_domain *);
30:	void init_iova_domain(struct iova_domain *, unsigned long, unsigned long);
97:	int init_iova_flush_queue(struct iova_domain *, iova_flush_cb, iova_entry_dtor);
266:	int iova_cache_get(void);
287:	void iova_cache_put(void);
603:	void put_iova_domain(struct iova_domain *);
559:	void queue_iova(struct iova_domain *, unsigned long, unsigned long, unsigned long);
671:	struct iova *reserve_iova(struct iova_domain *, unsigned long, unsigned long);
739:	struct iova *split_and_remove_iova(struct iova_domain *, struct iova *, unsigned long, unsigned long);
199:	static int __alloc_and_insert_iova_range(struct iova_domain *, unsigned long, unsigned long, struct iova *, bool);
154:	static void __cached_rbnode_delete_update(struct iova_domain *, struct iova *);
965:	static unsigned long __iova_rcache_get(struct iova_rcache *, unsigned long);
901:	static bool __iova_rcache_insert(struct iova_domain *, struct iova_rcache *, unsigned long);
549:	static void fq_flush_timeout(struct timer_list *);
498:	static void fq_ring_free(struct iova_domain *, struct iova_fq *);
1019:	static void free_iova_rcaches(struct iova_domain *);
80:	static void free_iova_work_func(struct work_struct *);
872:	static void init_iova_rcaches(struct iova_domain *);
521:	static void iova_domain_flush(struct iova_domain *);
173:	static void iova_insert_rbtree(struct rb_root *, struct iova *, struct rb_node *);
811:	static void iova_magazine_free_pfns(struct iova_magazine *, struct iova_domain *);
1004:	static unsigned long iova_rcache_get(struct iova_domain *, unsigned long, unsigned long);
949:	static bool iova_rcache_insert(struct iova_domain *, unsigned long, unsigned long);
357:	static void private_free_iova(struct iova_domain *, struct iova *);

File drivers/iommu/irq_remapping.c:
145:	int irq_remap_enable_fault_handling(void);
88:	bool irq_remapping_cap(enum irq_remap_cap);
131:	void irq_remapping_disable(void);
116:	int irq_remapping_enable(void);
168:	struct irq_domain *irq_remapping_get_irq_domain(struct irq_alloc_info *);
97:	int irq_remapping_prepare(void);
137:	int irq_remapping_reenable(int);
156:	void panic_if_irq_remap(const char *);
83:	void set_irq_remapping_broken(void);
30:	static void irq_remapping_restore_boot_irq_mode(void);
55:	static int setup_irqremap(char *);
48:	static int setup_nointremap(char *);

File drivers/leds/led-class.c:
477:	int devm_led_classdev_register_ext(struct device *, struct led_classdev *, struct led_init_data *);
516:	void devm_led_classdev_unregister(struct device *, struct led_classdev *);
280:	struct led_classdev *devm_of_led_get(struct device *, int);
336:	int led_classdev_register_ext(struct device *, struct led_classdev *, struct led_init_data *);
184:	void led_classdev_resume(struct led_classdev *);
172:	void led_classdev_suspend(struct led_classdev *);
431:	void led_classdev_unregister(struct led_classdev *);
256:	void led_put(struct led_classdev *);
227:	struct led_classdev *of_led_get(struct device_node *, int);
27:	static ssize_t brightness_show(struct device *, struct device_attribute *, char *);
38:	static ssize_t brightness_store(struct device *, struct device_attribute *, const char *, size_t);
501:	static int devm_led_classdev_match(struct device *, void *, void *);
465:	static void devm_led_classdev_release(struct device *, void *);
307:	static int led_classdev_next_name(const char *, char *, size_t);
206:	static int led_resume(struct device *);
196:	static int led_suspend(struct device *);
535:	static void leds_exit(void);
525:	static int leds_init(void);
68:	static ssize_t max_brightness_show(struct device *, struct device_attribute *, char *);

File drivers/leds/led-core.c:
199:	void led_blink_set(struct led_classdev *, unsigned long *, unsigned long *);
213:	void led_blink_set_oneshot(struct led_classdev *, unsigned long *, unsigned long *, int);
421:	int led_compose_name(struct device *, struct led_init_data *, char *);
327:	u32 *led_get_default_pattern(struct led_classdev *, unsigned int *);
191:	void led_init_core(struct led_classdev *);
243:	void led_set_brightness(struct led_classdev *, enum led_brightness);
271:	void led_set_brightness_nopm(struct led_classdev *, enum led_brightness);
284:	void led_set_brightness_nosleep(struct led_classdev *, enum led_brightness);
296:	int led_set_brightness_sync(struct led_classdev *, enum led_brightness);
234:	void led_stop_software_blink(struct led_classdev *);
353:	void led_sysfs_disable(struct led_classdev *);
362:	void led_sysfs_enable(struct led_classdev *);
311:	int led_update_brightness(struct led_classdev *);
175:	static void led_blink_setup(struct led_classdev *, unsigned long *, unsigned long *);
370:	static void led_parse_fwnode_props(struct device *, struct fwnode_handle *, struct led_properties *);
62:	static void led_timer_function(struct timer_list *);
119:	static void set_brightness_delayed(struct work_struct *);

File drivers/leds/led-triggers.c:
352:	int devm_led_trigger_register(struct device *, struct led_trigger *);
416:	void led_trigger_blink(struct led_trigger *, unsigned long *, unsigned long *);
424:	void led_trigger_blink_oneshot(struct led_trigger *, unsigned long *, unsigned long *, int);
377:	void led_trigger_event(struct led_trigger *, enum led_brightness);
125:	ssize_t led_trigger_read(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t, size_t);
283:	int led_trigger_register(struct led_trigger *);
433:	void led_trigger_register_simple(const char *, struct led_trigger **);
238:	void led_trigger_remove(struct led_classdev *);
268:	void led_trigger_rename_static(const char *, struct led_trigger *);
158:	int led_trigger_set(struct led_classdev *, struct led_trigger *);
246:	void led_trigger_set_default(struct led_classdev *);
323:	void led_trigger_unregister(struct led_trigger *);
457:	void led_trigger_unregister_simple(struct led_trigger *);
36:	ssize_t led_trigger_write(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t, size_t);
347:	static void devm_led_trigger_release(struct device *, void *);
94:	static int led_trigger_format(char *, size_t, struct led_classdev *);
79:	static int led_trigger_snprintf(char *, ssize_t, const char *, ...);

File drivers/leds/trigger/ledtrig-disk.c:
21:	void ledtrig_disk_activity(bool);
38:	static int ledtrig_disk_init(void);

File drivers/macintosh/mac_hid.c:
93:	static int mac_hid_emumouse_connect(struct input_handler *, struct input_dev *, const struct input_device_id *);
137:	static void mac_hid_emumouse_disconnect(struct input_handle *);
71:	static bool mac_hid_emumouse_filter(struct input_handle *, unsigned int, unsigned int, int);
276:	static void mac_hid_exit(void);
266:	static int mac_hid_init(void);
162:	static int mac_hid_start_emulation(void);
179:	static void mac_hid_stop_emulation(void);
185:	static int mac_hid_toggle_emumouse(struct ctl_table *, int, void *, size_t *, loff_t *);

File drivers/mailbox/mailbox.c:
579:	int devm_mbox_controller_register(struct device *, struct mbox_controller *);
613:	void devm_mbox_controller_unregister(struct device *, struct mbox_controller *);
152:	void mbox_chan_received_data(struct mbox_chan *, void *);
170:	void mbox_chan_txdone(struct mbox_chan *, int);
217:	bool mbox_client_peek_data(struct mbox_chan *);
191:	void mbox_client_txdone(struct mbox_chan *, int);
478:	int mbox_controller_register(struct mbox_controller *);
529:	void mbox_controller_unregister(struct mbox_controller *);
299:	int mbox_flush(struct mbox_chan *, unsigned long);
438:	void mbox_free_channel(struct mbox_chan *);
331:	struct mbox_chan *mbox_request_channel(struct mbox_client *, int);
402:	struct mbox_chan *mbox_request_channel_byname(struct mbox_client *, const char *);
250:	int mbox_send_message(struct mbox_chan *, void *);
550:	static void __devm_mbox_controller_unregister(struct device *, void *);
557:	static int devm_mbox_controller_match(struct device *, void *, void *);
53:	static void msg_submit(struct mbox_chan *);
461:	static struct mbox_chan *of_mbox_index_xlate(struct mbox_controller *, const struct of_phandle_args *);
93:	static void tx_tick(struct mbox_chan *, int);
117:	static enum hrtimer_restart txdone_hrtimer(struct hrtimer *);

File drivers/mailbox/pcc.c:
286:	void pcc_mbox_free_channel(struct mbox_chan *);
230:	struct mbox_chan *pcc_mbox_request_channel(struct mbox_client *, int);
429:	static int acpi_pcc_probe(void);
376:	static int parse_pcc_subspace(union acpi_subtable_headers *, const unsigned long);
584:	static int pcc_init(void);
178:	static irqreturn_t pcc_mbox_irq(int, void *);
557:	static int pcc_mbox_probe(struct platform_device *);
397:	static int pcc_parse_subspace_irq(int, struct acpi_pcct_hw_reduced *);
324:	static int pcc_send_data(struct mbox_chan *, void *);
99:	static int read_register(void *, u64 *, unsigned int);
125:	static int write_register(void *, u64, unsigned int);

File drivers/md/dm-builtin.c:
44:	void dm_kobject_release(struct kobject *);

File drivers/md/md-autodetect.c:
280:	void md_run_setup(void);
60:	static int md_setup(char *);
123:	static void md_setup_drive(struct md_setup_args *);
237:	static int raid_setup(char *);

File drivers/md/md-bitmap.c:
1956:	struct bitmap *get_bitmap_from_slot(struct mddev *, int);
1592:	void md_bitmap_close_sync(struct bitmap *);
1609:	void md_bitmap_cond_end_sync(struct bitmap *, sector_t, bool);
1980:	int md_bitmap_copy_from_slot(struct mddev *, int, sector_t *, sector_t *, bool);
1810:	struct bitmap *md_bitmap_create(struct mddev *, int);
1225:	void md_bitmap_daemon_work(struct mddev *);
1783:	void md_bitmap_destroy(struct mddev *);
1687:	void md_bitmap_dirty_bits(struct bitmap *, unsigned long, unsigned long);
1561:	void md_bitmap_end_sync(struct bitmap *, sector_t, sector_t *, int);
1456:	void md_bitmap_endwrite(struct bitmap *, sector_t, unsigned long, int, int);
1707:	void md_bitmap_flush(struct mddev *);
1733:	void md_bitmap_free(struct bitmap *);
1897:	int md_bitmap_load(struct mddev *);
480:	void md_bitmap_print_sb(struct bitmap *);
2053:	int md_bitmap_resize(struct bitmap *, sector_t, int, int);
1537:	int md_bitmap_start_sync(struct bitmap *, sector_t, sector_t *, int);
1392:	int md_bitmap_startwrite(struct bitmap *, sector_t, unsigned long, int);
2026:	void md_bitmap_status(struct seq_file *, struct bitmap *);
1639:	void md_bitmap_sync_with_cluster(struct mddev *, sector_t, sector_t, sector_t, sector_t);
1006:	void md_bitmap_unplug(struct bitmap *);
444:	void md_bitmap_update_sb(struct bitmap *);
1769:	void md_bitmap_wait_behind_writes(struct mddev *);
1178:	void md_bitmap_write_all(struct bitmap *);
2462:	static ssize_t backlog_show(struct mddev *, char *);
2468:	static ssize_t backlog_store(struct mddev *, const char *, size_t);
2597:	static ssize_t behind_writes_used_reset(struct mddev *, const char *, size_t);
2583:	static ssize_t behind_writes_used_show(struct mddev *, char *);
2551:	static ssize_t can_clear_show(struct mddev *, char *);
2564:	static ssize_t can_clear_store(struct mddev *, const char *, size_t);
2498:	static ssize_t chunksize_show(struct mddev *, char *);
2504:	static ssize_t chunksize_store(struct mddev *, const char *, size_t);
317:	static void end_bitmap_write(struct buffer_head *, int);
327:	static void free_buffers(struct page *);
2258:	static ssize_t location_show(struct mddev *, char *);
2272:	static ssize_t location_store(struct mddev *, const char *, size_t);
50:	static int md_bitmap_checkpage(struct bitmap_counts *, unsigned long, int, int);
1197:	static void md_bitmap_count_page(struct bitmap_counts *, sector_t, int);
953:	static void md_bitmap_file_clear_bit(struct bitmap *, sector_t);
863:	static void md_bitmap_file_kick(struct bitmap *);
924:	static void md_bitmap_file_set_bit(struct bitmap *, sector_t);
981:	static int md_bitmap_file_test_bit(struct bitmap *, sector_t);
831:	static void md_bitmap_file_unmap(struct bitmap_storage *);
1350:	static bitmap_counter_t *md_bitmap_get_counter(struct bitmap_counts *, sector_t, sector_t *, int);
1054:	static int md_bitmap_init_from_disk(struct bitmap *, sector_t);
519:	static int md_bitmap_new_disk_sb(struct bitmap *);
578:	static int md_bitmap_read_sb(struct bitmap *);
1660:	static void md_bitmap_set_memory_bits(struct bitmap *, sector_t, int);
775:	static int md_bitmap_storage_alloc(struct bitmap_storage *, unsigned long, int, int);
426:	static void md_bitmap_wait_writes(struct bitmap *);
2524:	static ssize_t metadata_show(struct mddev *, char *);
2532:	static ssize_t metadata_store(struct mddev *, const char *, size_t);
351:	static int read_page(unsigned long, struct bitmap *, unsigned long, struct page *, struct file *, struct file *);
149:	static int read_sb_page(struct mddev *, loff_t, struct page *, unsigned long, int);
2379:	static ssize_t space_show(struct mddev *, char *);
2385:	static ssize_t space_store(struct mddev *, const char *, size_t);
2412:	static ssize_t timeout_show(struct mddev *, char *);
2426:	static ssize_t timeout_store(struct mddev *, const char *, size_t);
288:	static void write_page(struct bitmap *, struct page *, int);
212:	static int write_sb_page(struct bitmap *, struct page *, int);

File drivers/md/md.c:
343:	struct bio *bio_alloc_mddev(gfp_t, int, struct mddev *);
6071:	int do_md_run(struct mddev *);
6704:	int md_add_new_disk(struct mddev *, struct mdu_disk_info_s *);
8583:	void md_allow_write(struct mddev *);
9762:	void md_autodetect_dev(dev_t);
9775:	void md_autostart_arrays(int);
1184:	int md_check_no_bitmap(struct mddev *);
9176:	void md_check_recovery(struct mddev *);
8421:	void md_cluster_stop(struct mddev *);
8614:	void md_do_sync(struct md_thread *);
8473:	void md_done_sync(struct mddev *, int, int);
7975:	void md_error(struct mddev *, struct md_rdev *);
861:	struct md_rdev *md_find_rdev_nr_rcu(struct mddev *, int);
884:	struct md_rdev *md_find_rdev_rcu(struct mddev *, dev_t);
9427:	void md_finish_reshape(struct mddev *);
624:	bool md_flush_request(struct mddev *, struct bio *);
431:	void md_handle_request(struct mddev *, struct bio *);
2377:	int md_integrity_add_rdev(struct md_rdev *, struct mddev *);
2330:	int md_integrity_register(struct mddev *);
2567:	void md_kick_rdev_from_array(struct md_rdev *);
373:	void md_new_event(struct mddev *);
923:	void md_rdev_clear(struct md_rdev *);
3671:	int md_rdev_init(struct md_rdev *);
9354:	void md_reap_sync_thread(struct mddev *);
7931:	struct md_thread *md_register_thread(void (*)(struct md_thread *), struct mddev *, const char *);
9718:	void md_reload_sb(struct mddev *, int);
5801:	int md_run(struct mddev *);
7122:	int md_set_array_info(struct mddev *, struct mdu_array_info_s *);
7196:	void md_set_array_sectors(struct mddev *, sector_t);
8401:	int md_setup_cluster(struct mddev *, int);
6107:	int md_start(struct mddev *);
6283:	void md_stop(struct mddev *);
6244:	void md_stop_writes(struct mddev *);
1001:	int md_super_wait(struct mddev *);
963:	void md_super_write(struct mddev *, struct md_rdev *, sector_t, int, struct page *);
7957:	void md_unregister_thread(struct md_thread **);
2676:	void md_update_sb(struct mddev *, int);
9416:	void md_wait_for_blocked_rdev(struct md_rdev *, struct mddev *);
7921:	void md_wakeup_thread(struct md_thread *);
8560:	void md_write_end(struct mddev *);
8551:	void md_write_inc(struct mddev *, struct bio *);
8494:	bool md_write_start(struct mddev *, struct bio *);
209:	void mddev_create_serial_pool(struct mddev *, struct md_rdev *, bool);
253:	void mddev_destroy_serial_pool(struct mddev *, struct md_rdev *, bool);
687:	void mddev_init(struct mddev *);
5626:	int mddev_init_writes_pending(struct mddev *);
521:	void mddev_resume(struct mddev *);
500:	void mddev_suspend(struct mddev *);
810:	void mddev_unlock(struct mddev *);
9469:	int rdev_clear_badblocks(struct md_rdev *, sector_t, int, int);
9445:	int rdev_set_badblocks(struct md_rdev *, sector_t, int, int);
8376:	int register_md_cluster_operations(struct md_cluster_operations *, struct module *);
8355:	int register_md_personality(struct md_personality *);
3844:	int strict_strtoul_scaled(const char *, unsigned long *, int);
1010:	int sync_page_io(struct md_rdev *, sector_t, int, struct page *, int, int, bool);
8392:	int unregister_md_cluster_operations(void);
8366:	int unregister_md_personality(struct md_personality *);
6264:	static void __md_stop(struct mddev *);
6213:	static void __md_stop_writes(struct mddev *);
4810:	static ssize_t action_show(struct mddev *, char *);
4836:	static ssize_t action_store(struct mddev *, const char *, size_t);
2870:	static int add_bound_rdev(struct md_rdev *);
5759:	static int add_named_array(const char *, const struct kernel_param *);
3769:	static int analyze_sbs(struct mddev *);
5310:	static ssize_t array_size_show(struct mddev *, char *);
5320:	static ssize_t array_size_store(struct mddev *, const char *, size_t);
4385:	static ssize_t array_state_show(struct mddev *, char *);
4428:	static ssize_t array_state_store(struct mddev *, const char *, size_t);
6481:	static void autorun_devices(int);
3507:	static ssize_t bb_show(struct md_rdev *, char *);
3511:	static ssize_t bb_store(struct md_rdev *, const char *, size_t);
2400:	static int bind_rdev_to_array(struct md_rdev *, struct mddev *);
4650:	static ssize_t bitmap_store(struct mddev *, const char *, size_t);
9572:	static void check_sb_changes(struct mddev *, struct md_rdev *, struct md_rdev *);
4241:	static ssize_t chunk_size_show(struct mddev *, char *);
4252:	static ssize_t chunk_size_store(struct mddev *, const char *, size_t);
2907:	static int cmd_match(const char *, const char *);
5367:	static ssize_t consistency_policy_show(struct mddev *, char *);
5390:	static ssize_t consistency_policy_store(struct mddev *, const char *, size_t);
4983:	static ssize_t degraded_show(struct mddev *, char *);
6357:	static int do_md_stop(struct mddev *, int, struct block_device *);
2637:	static bool does_sb_need_changing(struct mddev *);
3148:	static ssize_t errors_show(struct md_rdev *, char *);
3154:	static ssize_t errors_store(struct md_rdev *, const char *, size_t);
2574:	static void export_array(struct mddev *);
2553:	static void export_rdev(struct md_rdev *);
5412:	static ssize_t fail_last_dev_show(struct mddev *, char *);
5422:	static ssize_t fail_last_dev_store(struct mddev *, const char *, size_t);
6572:	static int get_array_info(struct mddev *, void *);
6632:	static int get_bitmap_file(struct mddev *, void *);
6664:	static int get_disk_info(struct mddev *, void *);
9862:	static int get_ro(char *, const struct kernel_param *);
6953:	static int hot_add_disk(struct mddev *, dev_t);
6911:	static int hot_remove_disk(struct mddev *, dev_t);
8429:	static int is_mddev_idle(struct mddev *, int);
4907:	static ssize_t last_sync_action_show(struct mddev *, char *);
4132:	static ssize_t layout_show(struct mddev *, char *);
4143:	static ssize_t layout_store(struct mddev *, const char *, size_t);
3906:	static ssize_t level_show(struct mddev *, char *);
3925:	static ssize_t level_store(struct mddev *, const char *, size_t);
2528:	static int lock_rdev(struct md_rdev *, dev_t, int);
2296:	static int match_mddev_units(struct mddev *, struct mddev *);
4542:	static ssize_t max_corrected_read_errors_show(struct mddev *, char *);
4548:	static ssize_t max_corrected_read_errors_store(struct mddev *, const char *, size_t);
5096:	static ssize_t max_sync_show(struct mddev *, char *);
5105:	static ssize_t max_sync_store(struct mddev *, const char *, size_t);
5639:	static int md_alloc(dev_t, char *);
5536:	static ssize_t md_attr_show(struct kobject *, struct attribute *, char *);
5558:	static ssize_t md_attr_store(struct kobject *, struct attribute *, const char *, size_t);
7853:	static unsigned int md_check_events(struct gendisk *, unsigned int);
7781:	static int md_compat_ioctl(struct block_device *, fmode_t, unsigned int, unsigned long);
541:	static void md_end_flush(struct bio *);
9817:	static void md_exit(void);
5581:	static void md_free(struct kobject *);
7454:	static int md_getgeo(struct block_device *, struct hd_geometry *);
3707:	static struct md_rdev *md_import_device(dev_t, int, int);
9526:	static int md_init(void);
7489:	static int md_ioctl(struct block_device *, fmode_t, unsigned int, unsigned long);
9484:	static int md_notify_reboot(struct notifier_block *, unsigned long, void *);
7800:	static int md_open(struct block_device *, fmode_t);
5752:	static struct kobject *md_probe(dev_t, int *, void *);
7844:	static void md_release(struct gendisk *, fmode_t);
5788:	static void md_safemode_timeout(struct timer_list *);
1065:	static int md_sb_equal(mdp_super_t *, mdp_super_t *);
8174:	static void *md_seq_next(struct seq_file *, void *, loff_t *);
8315:	static int md_seq_open(struct inode *, struct file *);
8210:	static int md_seq_show(struct seq_file *, void *);
8144:	static void *md_seq_start(struct seq_file *, loff_t *);
8202:	static void md_seq_stop(struct seq_file *, void *);
6295:	static int md_set_readonly(struct mddev *, struct block_device *);
9127:	static void md_start_sync(struct work_struct *);
462:	static blk_qc_t md_submit_bio(struct bio *);
592:	static void md_submit_flush_data(struct work_struct *);
7878:	static int md_thread(void *);
5615:	static void mddev_delayed_delete(struct work_struct *);
6252:	static void mddev_detach(struct mddev *);
723:	static struct mddev *mddev_find(dev_t);
739:	static struct mddev *mddev_find_or_alloc(dev_t);
664:	static void mddev_put(struct mddev *);
8330:	static __poll_t mdstat_poll(struct file *, poll_table *);
4732:	static ssize_t metadata_show(struct mddev *, char *);
4744:	static ssize_t metadata_store(struct mddev *, const char *, size_t);
5060:	static ssize_t min_sync_show(struct mddev *, char *);
5066:	static ssize_t min_sync_store(struct mddev *, const char *, size_t);
4915:	static ssize_t mismatch_cnt_show(struct mddev *, char *);
4585:	static ssize_t new_dev_store(struct mddev *, const char *, size_t);
3291:	static ssize_t new_offset_show(struct md_rdev *, char *);
3297:	static ssize_t new_offset_store(struct md_rdev *, const char *, size_t);
5624:	static void no_op(struct percpu_ref *);
4565:	static ssize_t null_show(struct mddev *, char *);
3266:	static ssize_t offset_show(struct md_rdev *, char *);
3272:	static ssize_t offset_store(struct md_rdev *, const char *, size_t);
3534:	static ssize_t ppl_sector_show(struct md_rdev *, char *);
3540:	static ssize_t ppl_sector_store(struct md_rdev *, const char *, size_t);
3573:	static ssize_t ppl_size_show(struct md_rdev *, char *);
3579:	static ssize_t ppl_size_store(struct md_rdev *, const char *, size_t);
4178:	static ssize_t raid_disks_show(struct mddev *, char *);
4192:	static ssize_t raid_disks_store(struct mddev *, const char *, size_t);
3620:	static ssize_t rdev_attr_show(struct kobject *, struct attribute *, char *);
3633:	static ssize_t rdev_attr_store(struct kobject *, struct attribute *, const char *, size_t);
2489:	static void rdev_delayed_delete(struct work_struct *);
3656:	static void rdev_free(struct kobject *);
146:	static int rdev_init_serial(struct md_rdev *);
3350:	static ssize_t rdev_size_show(struct md_rdev *, char *);
3385:	static ssize_t rdev_size_store(struct md_rdev *, const char *, size_t);
1039:	static int read_disk_sb(int, struct md_rdev *, struct md_rdev *);
9671:	static int read_rdev(struct mddev *, struct md_rdev *);
3461:	static ssize_t recovery_start_show(struct md_rdev *, char *);
3472:	static ssize_t recovery_start_store(struct md_rdev *, const char *, size_t);
9034:	static int remove_and_add_spares(struct mddev *, struct md_rdev *);
5269:	static ssize_t reshape_direction_show(struct mddev *, char *);
5276:	static ssize_t reshape_direction_store(struct mddev *, const char *, size_t);
5223:	static ssize_t reshape_position_show(struct mddev *, char *);
5233:	static ssize_t reshape_position_store(struct mddev *, const char *, size_t);
6122:	static int restart_array(struct mddev *);
4287:	static ssize_t resync_start_show(struct mddev *, char *);
4295:	static ssize_t resync_start_store(struct mddev *, const char *, size_t);
3871:	static ssize_t safe_delay_show(struct mddev *, char *);
3877:	static ssize_t safe_delay_store(struct mddev *, const char *, size_t);
5440:	static ssize_t serialize_policy_show(struct mddev *, char *);
5453:	static ssize_t serialize_policy_store(struct mddev *, const char *, size_t);
7025:	static int set_bitmap_file(struct mddev *, int);
2587:	static bool set_in_sync(struct mddev *);
9866:	static int set_ro(const char *, const struct kernel_param *);
4684:	static ssize_t size_show(struct mddev *, char *);
4693:	static ssize_t size_store(struct mddev *, const char *, size_t);
3169:	static ssize_t slot_show(struct md_rdev *, char *);
3180:	static ssize_t slot_store(struct md_rdev *, const char *, size_t);
2931:	static ssize_t state_show(struct md_rdev *, char *);
2973:	static ssize_t state_store(struct md_rdev *, const char *, size_t);
8016:	static int status_resync(struct seq_file *, struct mddev *);
557:	static void submit_flushes(struct work_struct *);
2231:	static int super_1_allow_new_offset(struct md_rdev *, unsigned long long);
1634:	static int super_1_load(struct md_rdev *, struct md_rdev *, int);
2181:	static unsigned long long super_1_rdev_size_change(struct md_rdev *, sector_t);
1994:	static void super_1_sync(struct mddev *, struct md_rdev *);
1821:	static int super_1_validate(struct mddev *, struct md_rdev *);
1602:	static int super_90_allow_new_offset(struct md_rdev *, unsigned long long);
1197:	static int super_90_load(struct md_rdev *, struct md_rdev *, int);
1580:	static unsigned long long super_90_rdev_size_change(struct md_rdev *, sector_t);
1435:	static void super_90_sync(struct mddev *, struct md_rdev *);
1306:	static int super_90_validate(struct mddev *, struct md_rdev *);
940:	static void super_written(struct bio *);
5186:	static ssize_t suspend_hi_show(struct mddev *, char *);
5192:	static ssize_t suspend_hi_store(struct mddev *, const char *, size_t);
5149:	static ssize_t suspend_lo_show(struct mddev *, char *);
5155:	static ssize_t suspend_lo_store(struct mddev *, const char *, size_t);
5035:	static ssize_t sync_completed_show(struct mddev *, char *);
4990:	static ssize_t sync_force_parallel_show(struct mddev *, char *);
4996:	static ssize_t sync_force_parallel_store(struct mddev *, const char *, size_t);
4954:	static ssize_t sync_max_show(struct mddev *, char *);
4961:	static ssize_t sync_max_store(struct mddev *, const char *, size_t);
4925:	static ssize_t sync_min_show(struct mddev *, char *);
4932:	static ssize_t sync_min_store(struct mddev *, const char *, size_t);
5020:	static ssize_t sync_speed_show(struct mddev *, char *);
3522:	static ssize_t ubb_show(struct md_rdev *, char *);
3526:	static ssize_t ubb_store(struct md_rdev *, const char *, size_t);
2496:	static void unbind_rdev_from_array(struct md_rdev *);
7300:	static int update_array_info(struct mddev *, mdu_array_info_t *);
7251:	static int update_raid_disks(struct mddev *, int);
7207:	static int update_size(struct mddev *, sector_t);
4233:	static ssize_t uuid_show(struct mddev *, char *);

File drivers/mfd/intel-lpss-acpi.c:
144:	static void intel_lpss_acpi_driver_exit(void);
144:	static int intel_lpss_acpi_driver_init(void);
101:	static int intel_lpss_acpi_probe(struct platform_device *);
124:	static int intel_lpss_acpi_remove(struct platform_device *);

File drivers/mfd/intel-lpss-pci.c:
402:	static void intel_lpss_pci_driver_exit(void);
402:	static int intel_lpss_pci_driver_init(void);
20:	static int intel_lpss_pci_probe(struct pci_dev *, const struct pci_device_id *);
54:	static void intel_lpss_pci_remove(struct pci_dev *);

File drivers/mfd/intel-lpss.c:
469:	int intel_lpss_prepare(struct device *);
374:	int intel_lpss_probe(struct device *, const struct intel_lpss_platform_info *);
449:	void intel_lpss_remove(struct device *);
501:	int intel_lpss_resume(struct device *);
480:	int intel_lpss_suspend(struct device *);
523:	static void intel_lpss_exit(void);
516:	static int intel_lpss_init(void);
161:	static void intel_lpss_ltr_set(struct device *, s32);
320:	static int intel_lpss_register_clock(struct intel_lpss *);
289:	static int intel_lpss_register_clock_divider(struct intel_lpss *, const char *, struct clk **);
365:	static void intel_lpss_unregister_clock(struct intel_lpss *);
461:	static int resume_lpss_device(struct device *, void *);

File drivers/mfd/mfd-core.c:
419:	int devm_mfd_add_devices(struct device *, int, const struct mfd_cell *, int, struct resource *, int, struct irq_domain *);
334:	int mfd_add_devices(struct device *, int, const struct mfd_cell *, int, struct resource *, int, struct irq_domain *);
49:	int mfd_cell_disable(struct platform_device *);
36:	int mfd_cell_enable(struct platform_device *);
389:	void mfd_remove_devices(struct device *);
381:	void mfd_remove_devices_late(struct device *);
397:	static void devm_mfd_dev_release(struct device *, void *);
63:	static void mfd_acpi_add_device(struct platform_device *, const struct mfd_cell *, const struct mfd_cell *);
165:	static int mfd_add_device(struct device *, int, const struct mfd_cell *, struct resource *, int, struct irq_domain *);
359:	static int mfd_remove_devices_fn(struct device *, void *);

File drivers/misc/kgdbts.c:
295:	static int check_and_rewind_pc(char *, char *);
332:	static int check_single_step(char *, char *);
1071:	static int configure_kgdbts(void);
428:	static int emul_reset(char *, char *);
439:	static void emul_sstep_get(char *);
474:	static int emul_sstep_put(char *, char *);
692:	static void fill_get_buf(char *);
526:	static int final_ack_set(char *, char *);
414:	static void get_cont_catch(char *);
285:	static int get_thread_id_continue(char *, char *);
403:	static int got_break(char *, char *);
265:	static void hw_access_break(char *);
245:	static void hw_break(char *);
270:	static void hw_rem_access_break(char *);
250:	static void hw_rem_break(char *);
260:	static void hw_rem_write_break(char *);
255:	static void hw_write_break(char *);
1098:	static int init_kgdbts(void);
820:	static void init_simple_test(void);
199:	static void kgdbts_break_test(void);
1108:	static int kgdbts_get_char(void);
1059:	static int kgdbts_option_setup(char *);
1161:	static void kgdbts_post_exp_handler(void);
1154:	static void kgdbts_pre_exp_handler(void);
1118:	static void kgdbts_put_char(u8);
968:	static void kgdbts_run_tests(void);
180:	static int kgdbts_unreg_thread(void *);
205:	static unsigned long lookup_addr(char *);
1124:	static int param_set_kgdbts_var(const char *, const struct kernel_param *);
420:	static int put_cont_catch(char *, char *);
852:	static void run_breakpoint_test(int);
877:	static void run_hw_break_test(int);
908:	static void run_nmi_sleep_test(int);
827:	static void run_plant_and_detach_test(int);
741:	static int run_simple_test(int, int);
387:	static void skip_back_repeat_test(char *);
235:	static void sw_break(char *);
240:	static void sw_rem_break(char *);
711:	static int validate_simple_test(char *);
378:	static void write_regs(char *);

File drivers/misc/pvpanic.c:
93:	static int pvpanic_add(struct acpi_device *);
188:	static void pvpanic_mmio_exit(void);
180:	static int pvpanic_mmio_init(void);
144:	static int pvpanic_mmio_probe(struct platform_device *);
156:	static int pvpanic_mmio_remove(struct platform_device *);
34:	static int pvpanic_panic_notify(struct notifier_block *, unsigned long, void *);
116:	static int pvpanic_remove(struct acpi_device *);
74:	static acpi_status pvpanic_walk_resources(struct acpi_resource *, void *);

File drivers/net/Space.c:
132:	static int net_olddevs_init(void);
42:	static int probe_list2(int, struct devprobe2 *, int);

File drivers/net/ethernet/cavium/common/cavium_ptp.c:
59:	struct cavium_ptp *cavium_ptp_get(void);
79:	void cavium_ptp_put(struct cavium_ptp *);
93:	static int cavium_ptp_adjfine(struct ptp_clock_info *, long);
140:	static int cavium_ptp_adjtime(struct ptp_clock_info *, s64);
212:	static u64 cavium_ptp_cc_read(const struct cyclecounter *);
343:	static void cavium_ptp_driver_exit(void);
343:	static int cavium_ptp_driver_init(void);
206:	static int cavium_ptp_enable(struct ptp_clock_info *, struct ptp_clock_request *, int);
161:	static int cavium_ptp_gettime(struct ptp_clock_info *, struct timespec64 *);
220:	static int cavium_ptp_probe(struct pci_dev *, const struct pci_device_id *);
311:	static void cavium_ptp_remove(struct pci_dev *);
183:	static int cavium_ptp_settime(struct ptp_clock_info *, const struct timespec64 *);

File drivers/net/loopback.c:
94:	void dev_lstats_read(struct net_device *, u64 *, u64 *);
131:	static u32 always_on(struct net_device *);
259:	static int blackhole_netdev_init(void);
253:	static void blackhole_netdev_setup(struct net_device *);
238:	static netdev_tx_t blackhole_netdev_xmit(struct sk_buff *, struct net_device *);
149:	static void loopback_dev_free(struct net_device *);
141:	static int loopback_dev_init(struct net_device *);
118:	static void loopback_get_stats64(struct net_device *, struct rtnl_link_stats64 *);
205:	static int loopback_net_init(struct net *);
198:	static void loopback_setup(struct net_device *);
68:	static netdev_tx_t loopback_xmit(struct sk_buff *, struct net_device *);

File drivers/net/phy/fixed_phy.c:
163:	int fixed_phy_add(unsigned int, int, struct fixed_phy_status *);
48:	int fixed_phy_change_carrier(struct net_device *, bool);
310:	struct phy_device *fixed_phy_register(unsigned int, struct fixed_phy_status *, struct device_node *);
319:	struct phy_device *fixed_phy_register_with_gpiod(unsigned int, struct fixed_phy_status *, struct gpio_desc *);
111:	int fixed_phy_set_link_update(struct phy_device *, int (*)(struct net_device *, struct fixed_phy_status *));
327:	void fixed_phy_unregister(struct phy_device *);
226:	static struct phy_device *__fixed_phy_register(unsigned int, struct fixed_phy_status *, struct device_node *, struct gpio_desc *);
371:	static void fixed_mdio_bus_exit(void);
335:	static int fixed_mdio_bus_init(void);
73:	static int fixed_mdio_read(struct mii_bus *, int, int);
100:	static int fixed_mdio_write(struct mii_bus *, int, int, u16);
133:	static int fixed_phy_add_gpiod(unsigned int, int, struct fixed_phy_status *, struct gpio_desc *);
172:	static void fixed_phy_del(int);

File drivers/net/phy/linkmode.c:
24:	void linkmode_resolve_pause(const unsigned long *, const unsigned long *, bool *, bool *);
89:	void linkmode_set_pause(unsigned long *, bool, bool);

File drivers/net/phy/mdio-boardinfo.c:
61:	int mdiobus_register_board_info(const struct mdio_board_info *, unsigned int);
24:	void mdiobus_setup_mdiodev_from_board_info(struct mii_bus *, int (*)(struct mii_bus *, struct mdio_board_info *));

File drivers/net/phy/mdio_bus.c:
800:	int __mdiobus_modify_changed(struct mii_bus *, int, u32, u16, u16);
746:	int __mdiobus_read(struct mii_bus *, int, u32);
518:	int __mdiobus_register(struct mii_bus *, struct module *);
772:	int __mdiobus_write(struct mii_bus *, int, u32, u16);
1014:	void mdio_bus_exit(void);
998:	int mdio_bus_init(void);
403:	struct mii_bus *mdio_find_bus(const char *);
137:	struct mii_bus *mdiobus_alloc_size(size_t);
650:	void mdiobus_free(struct mii_bus *);
109:	struct phy_device *mdiobus_get_phy(struct mii_bus *, int);
123:	bool mdiobus_is_registered_device(struct mii_bus *, int);
924:	int mdiobus_modify(struct mii_bus *, int, u32, u16, u16);
854:	int mdiobus_read(struct mii_bus *, int, u32);
70:	int mdiobus_register_device(struct mdio_device *);
677:	struct phy_device *mdiobus_scan(struct mii_bus *, int);
613:	void mdiobus_unregister(struct mii_bus *);
96:	int mdiobus_unregister_device(struct mdio_device *);
903:	int mdiobus_write(struct mii_bus *, int, u32, u16);
235:	static ssize_t mdio_bus_device_stat_field_show(struct device *, struct device_attribute *, char *);
947:	static int mdio_bus_match(struct device *, struct device_driver *);
214:	static ssize_t mdio_bus_stat_field_show(struct device *, struct device_attribute *, char *);
960:	static int mdio_uevent(struct device *, struct kobj_uevent_env *);
482:	static int mdiobus_create_device(struct mii_bus *, struct mdio_board_info *);
175:	static void mdiobus_release(struct device *);

File drivers/net/phy/mdio_device.c:
36:	int mdio_device_bus_match(struct device *, struct device_driver *);
47:	struct mdio_device *mdio_device_create(struct mii_bus *, int);
25:	void mdio_device_free(struct mdio_device *);
76:	int mdio_device_register(struct mdio_device *);
109:	void mdio_device_remove(struct mdio_device *);
116:	void mdio_device_reset(struct mdio_device *, int);
196:	int mdio_driver_register(struct mdio_driver *);
220:	void mdio_driver_unregister(struct mdio_driver *);
31:	static void mdio_device_release(struct device *);
146:	static int mdio_probe(struct device *);
167:	static int mdio_remove(struct device *);
182:	static void mdio_shutdown(struct device *);

File drivers/net/phy/mdio_devres.c:
73:	int __devm_mdiobus_register(struct device *, struct mii_bus *, struct module *);
30:	struct mii_bus *devm_mdiobus_alloc_size(struct device *, int);
12:	static void devm_mdiobus_free(struct device *, void *);
49:	static void devm_mdiobus_unregister(struct device *, void *);
56:	static int mdiobus_devres_match(struct device *, void *, void *);

File drivers/net/phy/mii_timestamper.c:
78:	struct mii_timestamper *register_mii_timestamper(struct device_node *, unsigned int);
26:	int register_mii_tstamp_controller(struct device *, struct mii_timestamping_ctrl *);
109:	void unregister_mii_timestamper(struct mii_timestamper *);
52:	void unregister_mii_tstamp_controller(struct device *);

File drivers/net/phy/phy-c45.c:
557:	int gen10g_config_aneg(struct phy_device *);
91:	int genphy_c45_an_config_aneg(struct phy_device *);
136:	int genphy_c45_an_disable_aneg(struct phy_device *);
200:	int genphy_c45_aneg_done(struct phy_device *);
168:	int genphy_c45_check_and_restart_aneg(struct phy_device *, bool);
537:	int genphy_c45_config_aneg(struct phy_device *);
407:	int genphy_c45_pma_read_abilities(struct phy_device *);
15:	int genphy_c45_pma_setup_forced(struct phy_device *);
216:	int genphy_c45_read_link(struct phy_device *);
277:	int genphy_c45_read_lpa(struct phy_device *);
367:	int genphy_c45_read_mdix(struct phy_device *);
323:	int genphy_c45_read_pma(struct phy_device *);
502:	int genphy_c45_read_status(struct phy_device *);
152:	int genphy_c45_restart_aneg(struct phy_device *);

File drivers/net/phy/phy-core.c:
609:	int __phy_modify(struct phy_device *, u32, u16, u16);
713:	int __phy_modify_mmd(struct phy_device *, int, u32, u16, u16);
655:	int __phy_modify_mmd_changed(struct phy_device *, int, u32, u16, u16);
468:	int __phy_read_mmd(struct phy_device *, int, u32);
524:	int __phy_write_mmd(struct phy_device *, int, u32, u16);
289:	void of_set_phy_supported(struct phy_device *);
388:	void phy_check_downshift(struct phy_device *);
65:	const char *phy_duplex_to_str(unsigned int);
199:	const struct phy_setting *phy_lookup_setting(int, int, const unsigned long *, bool);
630:	int phy_modify(struct phy_device *, u32, u16, u16);
586:	int phy_modify_changed(struct phy_device *, u32, u16, u16);
736:	int phy_modify_mmd(struct phy_device *, int, u32, u16, u16);
688:	int phy_modify_mmd_changed(struct phy_device *, int, u32, u16, u16);
922:	int phy_modify_paged(struct phy_device *, int, u32, u16, u16);
899:	int phy_modify_paged_changed(struct phy_device *, int, u32, u16, u16);
502:	int phy_read_mmd(struct phy_device *, int, u32);
856:	int phy_read_paged(struct phy_device *, int, u32);
361:	void phy_resolve_aneg_linkmode(struct phy_device *);
341:	void phy_resolve_aneg_pause(struct phy_device *);
825:	int phy_restore_page(struct phy_device *, int, int);
773:	int phy_save_page(struct phy_device *);
791:	int phy_select_page(struct phy_device *, int);
275:	int phy_set_max_speed(struct phy_device *, u32);
435:	int phy_speed_down_core(struct phy_device *);
14:	const char *phy_speed_to_str(int);
230:	size_t phy_speeds(unsigned int *, size_t, unsigned long *);
561:	int phy_write_mmd(struct phy_device *, int, u32, u16);
877:	int phy_write_paged(struct phy_device *, int, u32, u16);
757:	static int __phy_write_page(struct phy_device *, int);

File drivers/net/phy/phy.c:
177:	int phy_aneg_done(struct phy_device *);
971:	int phy_disable_interrupts(struct phy_device *);
401:	int phy_do_ioctl(struct net_device *, struct ifreq *, int);
420:	int phy_do_ioctl_running(struct net_device *, struct ifreq *, int);
1365:	int phy_ethtool_get_eee(struct phy_device *, struct ethtool_eee *);
1474:	int phy_ethtool_get_link_ksettings(struct net_device *, struct ethtool_link_ksettings *);
487:	int phy_ethtool_get_sset_count(struct phy_device *);
515:	int phy_ethtool_get_stats(struct phy_device *, struct ethtool_stats *, u64 *);
469:	int phy_ethtool_get_strings(struct phy_device *, u8 *);
1467:	void phy_ethtool_get_wol(struct phy_device *, struct ethtool_wolinfo *);
263:	void phy_ethtool_ksettings_get(struct phy_device *, struct ethtool_link_ksettings *);
786:	int phy_ethtool_ksettings_set(struct phy_device *, const struct ethtool_link_ksettings *);
1504:	int phy_ethtool_nway_reset(struct net_device *);
1404:	int phy_ethtool_set_eee(struct phy_device *, struct ethtool_eee *);
1488:	int phy_ethtool_set_link_ksettings(struct net_device *, const struct ethtool_link_ksettings *);
1452:	int phy_ethtool_set_wol(struct phy_device *, struct ethtool_wolinfo *);
1064:	void phy_free_interrupt(struct phy_device *);
1348:	int phy_get_eee_err(struct phy_device *);
1280:	int phy_init_eee(struct phy_device *, bool);
1239:	void phy_mac_interrupt(struct phy_device *);
299:	int phy_mii_ioctl(struct phy_device *, struct ifreq *, int);
101:	void phy_print_status(struct phy_device *);
435:	void phy_queue_state_machine(struct phy_device *, unsigned long);
1036:	void phy_request_interrupt(struct phy_device *);
156:	int phy_restart_aneg(struct phy_device *);
859:	int phy_speed_down(struct phy_device *, bool);
892:	int phy_speed_up(struct phy_device *);
1119:	void phy_start(struct phy_device *);
758:	int phy_start_aneg(struct phy_device *);
535:	int phy_start_cable_test(struct phy_device *, struct netlink_ext_ack *);
605:	int phy_start_cable_test_tdr(struct phy_device *, struct netlink_ext_ack *, const struct phy_tdr_config *);
1147:	void phy_state_machine(struct work_struct *);
1075:	void phy_stop(struct phy_device *);
937:	void phy_stop_machine(struct phy_device *);
217:	unsigned int phy_supported_speeds(struct phy_device *, unsigned int *, unsigned int);
727:	static int _phy_start_aneg(struct phy_device *);
1246:	static void mmd_eee_adv_to_linkmode(unsigned long *, u16);
690:	static int phy_check_link_status(struct phy_device *);
669:	static int phy_config_aneg(struct phy_device *);
956:	static void phy_error(struct phy_device *);
991:	static irqreturn_t phy_interrupt(int, void *);

File drivers/net/phy/phy_device.c:
2091:	int __genphy_config_aneg(struct phy_device *, bool);
1728:	int __phy_resume(struct phy_device *);
1617:	int devm_phy_package_join(struct device *, struct phy_device *, int, size_t);
2173:	int genphy_aneg_done(struct phy_device *);
2126:	int genphy_c37_config_aneg(struct phy_device *);
2366:	int genphy_c37_read_status(struct phy_device *);
2059:	int genphy_check_and_restart_aneg(struct phy_device *, bool);
1913:	int genphy_config_eee_advert(struct phy_device *);
2533:	int genphy_loopback(struct phy_device *, bool);
2463:	int genphy_read_abilities(struct phy_device *);
2234:	int genphy_read_lpa(struct phy_device *);
2508:	int genphy_read_mmd_unsupported(struct phy_device *, int, u16);
2320:	int genphy_read_status(struct phy_device *);
2288:	int genphy_read_status_fixed(struct phy_device *);
2044:	int genphy_restart_aneg(struct phy_device *);
2527:	int genphy_resume(struct phy_device *);
1936:	int genphy_setup_forced(struct phy_device *);
2424:	int genphy_soft_reset(struct phy_device *);
2521:	int genphy_suspend(struct phy_device *);
2189:	int genphy_update_link(struct phy_device *);
2514:	int genphy_write_mmd_unsupported(struct phy_device *, int, u16, u16);
838:	struct phy_device *get_phy_device(struct mii_bus *, int, bool);
2571:	void phy_advertise_supported(struct phy_device *);
1443:	struct phy_device *phy_attach(struct net_device *, const char *, phy_interface_t);
1298:	int phy_attach_direct(struct net_device *, struct phy_device *, u32, phy_interface_t);
1133:	void phy_attached_info(struct phy_device *);
1140:	char *phy_attached_info_irq(struct phy_device *);
1162:	void phy_attached_print(struct phy_device *, const char *, ...);
1013:	struct phy_device *phy_connect(struct net_device *, const char *, void (*)(struct net_device *), phy_interface_t);
977:	int phy_connect_direct(struct net_device *, struct phy_device *, void (*)(struct net_device *), phy_interface_t);
1648:	void phy_detach(struct phy_device *);
550:	struct phy_device *phy_device_create(struct mii_bus *, int, u32, bool, struct phy_c45_device_ids *);
201:	void phy_device_free(struct phy_device *);
864:	int phy_device_register(struct phy_device *);
907:	void phy_device_remove(struct phy_device *);
1045:	void phy_disconnect(struct phy_device *);
1489:	bool phy_driver_is_genphy(struct phy_device *);
1496:	bool phy_driver_is_genphy_10g(struct phy_device *);
2943:	int phy_driver_register(struct phy_driver *, struct module *);
2995:	void phy_driver_unregister(struct phy_driver *);
2978:	int phy_drivers_register(struct phy_driver *, int, struct module *);
3001:	void phy_drivers_unregister(struct phy_driver *, int);
925:	struct phy_device *phy_find_first(struct mii_bus *);
2741:	s32 phy_get_internal_delay(struct phy_device *, struct device *, const int *, int, bool);
2692:	void phy_get_pause(struct phy_device *, bool *, bool *);
1093:	int phy_init_hw(struct phy_device *);
1758:	int phy_loopback(struct phy_device *, bool);
1529:	int phy_package_join(struct phy_device *, int, size_t);
1582:	void phy_package_leave(struct phy_device *);
328:	int phy_register_fixup(const char *, u32, u32, int (*)(struct phy_device *));
358:	int phy_register_fixup_for_id(const char *, int (*)(struct phy_device *));
350:	int phy_register_fixup_for_uid(u32, u32, int (*)(struct phy_device *));
2549:	void phy_remove_link_mode(struct phy_device *, u32);
1800:	int phy_reset_after_clk_enable(struct phy_device *);
1746:	int phy_resume(struct phy_device *);
2642:	void phy_set_asym_pause(struct phy_device *, bool, bool);
2618:	void phy_set_sym_pause(struct phy_device *, bool, bool, bool);
1231:	void phy_sfp_attach(void *, struct sfp_bus *);
1248:	void phy_sfp_detach(void *, struct sfp_bus *);
1263:	int phy_sfp_probe(struct phy_device *, const struct sfp_upstream_ops *);
2601:	void phy_support_asym_pause(struct phy_device *);
2588:	void phy_support_sym_pause(struct phy_device *);
1702:	int phy_suspend(struct phy_device *);
371:	int phy_unregister_fixup(const char *, u32, u32);
406:	int phy_unregister_fixup_for_id(const char *);
399:	int phy_unregister_fixup_for_uid(u32, u32);
2664:	bool phy_validate_pause(struct phy_device *, struct ethtool_pauseparam *);
1601:	static void devm_phy_package_leave(struct device *, void *);
123:	static void features_init(void);
1826:	static int genphy_config_advert(struct phy_device *);
667:	static int get_phy_c45_devs_in_pkg(struct mii_bus *, int, int, u32 *);
698:	static int get_phy_c45_ids(struct mii_bus *, int, struct phy_c45_device_ids *);
292:	static int mdio_bus_phy_resume(struct device *);
272:	static int mdio_bus_phy_suspend(struct device *);
451:	static int phy_bus_match(struct device *, struct device_driver *);
645:	static int phy_c45_probe_present(struct mii_bus *, int, int);
215:	static void phy_device_release(struct device *);
3053:	static void phy_exit(void);
506:	static ssize_t phy_has_fixups_show(struct device *, struct device_attribute *, char *);
482:	static ssize_t phy_id_show(struct device *, struct device_attribute *, char *);
3028:	static int phy_init(void);
491:	static ssize_t phy_interface_show(struct device *, struct device_attribute *, char *);
939:	static void phy_link_change(struct phy_device *, bool);
220:	static void phy_mdio_device_remove(struct mdio_device *);
1077:	static int phy_poll_reset(struct phy_device *);
2817:	static int phy_probe(struct device *);
2914:	static int phy_remove(struct device *);
530:	static int phy_request_driver_module(struct phy_device *, u32);
430:	static int phy_scan_fixups(struct phy_device *);
1215:	static ssize_t phy_standalone_show(struct device *, struct device_attribute *, char *);

File drivers/net/phy/phy_led_triggers.c:
29:	void phy_led_trigger_change_speed(struct phy_device *);
84:	int phy_led_triggers_register(struct phy_device *);
146:	void phy_led_triggers_unregister(struct phy_device *);
20:	static void phy_led_trigger_no_link(struct phy_device *);

File drivers/net/phy/swphy.c:
115:	int swphy_read_reg(int, const struct fixed_phy_status *);
93:	int swphy_validate_state(const struct fixed_phy_status *);

File drivers/nvmem/core.c:
1142:	struct nvmem_cell *devm_nvmem_cell_get(struct device *, const char *);
1179:	void devm_nvmem_cell_put(struct device *, struct nvmem_cell *);
971:	struct nvmem_device *devm_nvmem_device_get(struct device *, const char *);
939:	void devm_nvmem_device_put(struct device *, struct nvmem_device *);
766:	struct nvmem_device *devm_nvmem_register(struct device *, const struct nvmem_config *);
804:	int devm_nvmem_unregister(struct device *, struct nvmem_device *);
1616:	void nvmem_add_cell_lookups(struct nvmem_cell_lookup *, size_t);
1589:	void nvmem_add_cell_table(struct nvmem_cell_table *);
1109:	struct nvmem_cell *nvmem_cell_get(struct device *, const char *);
1195:	void nvmem_cell_put(struct nvmem_cell *);
1267:	void *nvmem_cell_read(struct nvmem_cell *, size_t *);
1432:	int nvmem_cell_read_u16(struct device *, const char *, u16 *);
1447:	int nvmem_cell_read_u32(struct device *, const char *, u32 *);
1462:	int nvmem_cell_read_u64(struct device *, const char *, u64 *);
1417:	int nvmem_cell_read_u8(struct device *, const char *, u8 *);
1352:	int nvmem_cell_write(struct nvmem_cell *, void *, size_t);
1634:	void nvmem_del_cell_lookups(struct nvmem_cell_lookup *, size_t);
1602:	void nvmem_del_cell_table(struct nvmem_cell_table *);
1652:	const char *nvmem_dev_name(struct nvmem_device *);
1478:	ssize_t nvmem_device_cell_read(struct nvmem_device *, struct nvmem_cell_info *, void *);
1509:	int nvmem_device_cell_write(struct nvmem_device *, struct nvmem_cell_info *, void *);
910:	struct nvmem_device *nvmem_device_find(void *, int (*)(struct device *, const void *));
885:	struct nvmem_device *nvmem_device_get(struct device *, const char *);
955:	void nvmem_device_put(struct nvmem_device *);
1537:	int nvmem_device_read(struct nvmem_device *, unsigned int, size_t, void *);
1565:	int nvmem_device_write(struct nvmem_device *, unsigned int, size_t, void *);
605:	struct nvmem_device *nvmem_register(const struct nvmem_config *);
463:	int nvmem_register_notifier(struct notifier_block *);
744:	void nvmem_unregister(struct nvmem_device *);
476:	int nvmem_unregister_notifier(struct notifier_block *);
1236:	static int __nvmem_cell_read(struct nvmem_device *, struct nvmem_cell *, void *, size_t *);
810:	static struct nvmem_device *__nvmem_device_get(void *, int (*)(struct device *, const void *));
838:	static void __nvmem_device_put(struct nvmem_device *);
120:	static ssize_t bin_attr_nvmem_read(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t, size_t);
160:	static ssize_t bin_attr_nvmem_write(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t, size_t);
1162:	static int devm_nvmem_cell_match(struct device *, void *, void *);
1127:	static void devm_nvmem_cell_release(struct device *, void *);
917:	static int devm_nvmem_device_match(struct device *, void *, void *);
927:	static void devm_nvmem_device_release(struct device *, void *);
788:	static int devm_nvmem_match(struct device *, void *, void *);
750:	static void devm_nvmem_release(struct device *, void *);
416:	static int nvmem_add_cells(struct nvmem_device *, const struct nvmem_cell_info *, int);
482:	static int nvmem_add_cells_from_table(struct nvmem_device *);
219:	static umode_t nvmem_bin_attr_is_visible(struct kobject *, struct bin_attribute *, int);
356:	static void nvmem_cell_add(struct nvmem_cell *);
337:	static void nvmem_cell_drop(struct nvmem_cell *);
992:	static struct nvmem_cell *nvmem_cell_get_from_lookup(struct device *, const char *);
364:	static int nvmem_cell_info_to_nvmem_cell_nodup(struct nvmem_device *, const struct nvmem_cell_info *, struct nvmem_cell *);
1290:	static void *nvmem_cell_prepare_write_buffer(struct nvmem_cell *, u8 *, int);
1380:	static int nvmem_cell_read_common(struct device *, const char *, void *, size_t);
724:	static void nvmem_device_release(struct kref *);
1663:	static void nvmem_exit(void);
1658:	static int nvmem_init(void);
320:	static void nvmem_release(struct device *);
105:	static ssize_t type_show(struct device *, struct device_attribute *, char *);

File drivers/pci/access.c:
63:	int pci_bus_read_config_byte(struct pci_bus *, unsigned int, int, u8 *);
65:	int pci_bus_read_config_dword(struct pci_bus *, unsigned int, int, u32 *);
64:	int pci_bus_read_config_word(struct pci_bus *, unsigned int, int, u16 *);
183:	struct pci_ops *pci_bus_set_ops(struct pci_bus *, struct pci_ops *);
66:	int pci_bus_write_config_byte(struct pci_bus *, unsigned int, int, u8);
68:	int pci_bus_write_config_dword(struct pci_bus *, unsigned int, int, u32);
67:	int pci_bus_write_config_word(struct pci_bus *, unsigned int, int, u16);
269:	void pci_cfg_access_lock(struct pci_dev *);
289:	bool pci_cfg_access_trylock(struct pci_dev *);
311:	void pci_cfg_access_unlock(struct pci_dev *);
77:	int pci_generic_config_read(struct pci_bus *, unsigned int, int, int, u32 *);
119:	int pci_generic_config_read32(struct pci_bus *, unsigned int, int, int, u32 *);
99:	int pci_generic_config_write(struct pci_bus *, unsigned int, int, int, u32);
139:	int pci_generic_config_write32(struct pci_bus *, unsigned int, int, int, u32);
523:	int pci_read_config_byte(const struct pci_dev *, int, u8 *);
543:	int pci_read_config_dword(const struct pci_dev *, int, u32 *);
533:	int pci_read_config_word(const struct pci_dev *, int, u16 *);
254:	int pci_user_read_config_byte(struct pci_dev *, int, u8 *);
256:	int pci_user_read_config_dword(struct pci_dev *, int, u32 *);
255:	int pci_user_read_config_word(struct pci_dev *, int, u16 *);
257:	int pci_user_write_config_byte(struct pci_dev *, int, u8);
259:	int pci_user_write_config_dword(struct pci_dev *, int, u32);
258:	int pci_user_write_config_word(struct pci_dev *, int, u16);
554:	int pci_write_config_byte(const struct pci_dev *, int, u8);
570:	int pci_write_config_dword(const struct pci_dev *, int, u32);
562:	int pci_write_config_word(const struct pci_dev *, int, u16);
335:	bool pcie_cap_has_lnkctl(const struct pci_dev *);
354:	bool pcie_cap_has_rtctl(const struct pci_dev *);
506:	int pcie_capability_clear_and_set_dword(struct pci_dev *, int, u32, u32);
489:	int pcie_capability_clear_and_set_word(struct pci_dev *, int, u16, u16);
437:	int pcie_capability_read_dword(struct pci_dev *, int, u32 *);
402:	int pcie_capability_read_word(struct pci_dev *, int, u16 *);
477:	int pcie_capability_write_dword(struct pci_dev *, int, u32);
465:	int pcie_capability_write_word(struct pci_dev *, int, u16);
206:	static void pci_wait_cfg(struct pci_dev *);
362:	static bool pcie_capability_reg_implemented(struct pci_dev *, int);

File drivers/pci/ats.c:
19:	void pci_ats_init(struct pci_dev *);
159:	int pci_ats_page_aligned(struct pci_dev *);
134:	int pci_ats_queue_depth(struct pci_dev *);
40:	bool pci_ats_supported(struct pci_dev *);
94:	void pci_disable_ats(struct pci_dev *);
411:	void pci_disable_pasid(struct pci_dev *);
244:	void pci_disable_pri(struct pci_dev *);
56:	int pci_enable_ats(struct pci_dev *, int);
365:	int pci_enable_pasid(struct pci_dev *, int);
197:	int pci_enable_pri(struct pci_dev *, u32);
493:	int pci_max_pasids(struct pci_dev *);
464:	int pci_pasid_features(struct pci_dev *);
351:	void pci_pasid_init(struct pci_dev *);
325:	int pci_prg_resp_pasid_required(struct pci_dev *);
175:	void pci_pri_init(struct pci_dev *);
340:	bool pci_pri_supported(struct pci_dev *);
297:	int pci_reset_pri(struct pci_dev *);
109:	void pci_restore_ats_state(struct pci_dev *);
436:	void pci_restore_pasid_state(struct pci_dev *);
271:	void pci_restore_pri_state(struct pci_dev *);

File drivers/pci/bus.c:
93:	int devm_request_pci_bus_resources(struct device *, struct list_head *);
35:	void pci_add_resource(struct list_head *, struct resource *);
19:	void pci_add_resource_offset(struct list_head *, struct resource *, resource_size_t);
309:	void pci_bus_add_device(struct pci_dev *);
338:	void pci_bus_add_devices(const struct pci_bus *);
47:	void pci_bus_add_resource(struct pci_bus *, struct resource *, unsigned int);
224:	int pci_bus_alloc_resource(struct pci_bus *, struct resource *, resource_size_t, resource_size_t, resource_size_t, unsigned long, resource_size_t (*)(void *, const struct resource *, resource_size_t, resource_size_t), void *);
261:	bool pci_bus_clip_resource(struct pci_dev *, int);
410:	struct pci_bus *pci_bus_get(struct pci_bus *);
418:	void pci_bus_put(struct pci_bus *);
79:	void pci_bus_remove_resources(struct pci_bus *);
63:	struct resource *pci_bus_resource_n(const struct pci_bus *, int);
41:	void pci_free_resource_list(struct list_head *);
374:	void pci_walk_bus(struct pci_bus *, int (*)(struct pci_dev *, void *), void *);
299:	void pcibios_resource_survey_bus(struct pci_bus *);
154:	static int pci_bus_alloc_from_region(struct pci_bus *, struct resource *, resource_size_t, resource_size_t, resource_size_t, unsigned long, resource_size_t (*)(void *, const struct resource *, resource_size_t, resource_size_t), void *, struct pci_bus_region *);

File drivers/pci/controller/vmd.c:
544:	static int vmd_alloc_irqs(struct vmd_dev *);
128:	static void vmd_compose_msi_msg(struct irq_data *, struct msi_msg *);
841:	static void vmd_drv_exit(void);
841:	static int vmd_drv_init(void);
579:	static int vmd_enable_domain(struct vmd_dev *, unsigned long);
190:	static irq_hw_number_t vmd_get_hwirq(struct msi_domain_info *, msi_alloc_info_t *);
447:	static int vmd_get_phys_offsets(bool, resource_size_t *, resource_size_t *, struct vmd_dev *, struct vmd_dev *);
530:	static irqreturn_t vmd_irq(int, void *);
157:	static void vmd_irq_disable(struct irq_data *);
143:	static void vmd_irq_enable(struct irq_data *);
176:	static int vmd_irq_set_affinity(struct irq_data *, const struct cpumask *, bool);
252:	static void vmd_msi_free(struct irq_domain *, struct msi_domain_info *, unsigned int);
229:	static int vmd_msi_init(struct irq_domain *, struct msi_domain_info *, unsigned int, irq_hw_number_t, msi_alloc_info_t *);
268:	static int vmd_msi_prepare(struct irq_domain *, struct device *, int, msi_alloc_info_t *);
346:	static int vmd_pci_read(struct pci_bus *, unsigned int, int, int, u32 *);
381:	static int vmd_pci_write(struct pci_bus *, unsigned int, int, int, u32);
720:	static int vmd_probe(struct pci_dev *, const struct pci_device_id *);
769:	static void vmd_remove(struct pci_dev *);
318:	static void vmd_remove_irq_domain(struct vmd_dev *, struct vmd_dev *);
794:	static int vmd_resume(struct device *);
281:	static void vmd_set_desc(msi_alloc_info_t *, struct msi_desc *);
782:	static int vmd_suspend(struct device *);

File drivers/pci/host-bridge.c:
20:	struct pci_host_bridge *pci_find_host_bridge(struct pci_bus *);
27:	struct device *pci_get_host_bridge_device(struct pci_dev *);
36:	void pci_put_host_bridge_device(struct device *);
41:	void pci_set_host_bridge_release(struct pci_host_bridge *, void (*)(struct pci_host_bridge *), void *);
75:	void pcibios_bus_to_resource(struct pci_bus *, struct resource *, struct pci_bus_region *);
50:	void pcibios_resource_to_bus(struct pci_bus *, struct pci_bus_region *, struct resource *);

File drivers/pci/hotplug/../pci.h:
405:	static int pci_dev_set_disconnected(struct pci_dev *, void *);

File drivers/pci/hotplug/acpi_pcihp.c:
68:	int acpi_get_hp_hw_control_from_firmware(struct pci_dev *);
166:	int acpi_pci_check_ejectable(struct pci_bus *, acpi_handle);
198:	int acpi_pci_detect_ejectable(acpi_handle);
38:	static acpi_status acpi_run_oshp(acpi_handle);
182:	static acpi_status check_hotplug(acpi_handle, u32, void *, void **);
145:	static int pcihp_is_ejectable(acpi_handle);

File drivers/pci/hotplug/acpiphp_core.c:
307:	void acpiphp_init(void);
78:	int acpiphp_register_attention(struct acpiphp_attention_info *);
258:	int acpiphp_register_hotplug_slot(struct acpiphp_slot *, unsigned int);
100:	int acpiphp_unregister_attention(struct acpiphp_attention_info *);
296:	void acpiphp_unregister_hotplug_slot(struct acpiphp_slot *);
136:	static int disable_slot(struct hotplug_slot *);
119:	static int enable_slot(struct hotplug_slot *);
246:	static int get_adapter_status(struct hotplug_slot *, u8 *);
202:	static int get_attention_status(struct hotplug_slot *, u8 *);
226:	static int get_latch_status(struct hotplug_slot *, u8 *);
180:	static int get_power_status(struct hotplug_slot *, u8 *);
156:	static int set_attention_status(struct hotplug_slot *, u8);

File drivers/pci/hotplug/acpiphp_glue.c:
751:	void acpiphp_check_host_bridge(struct acpi_device *);
1018:	int acpiphp_disable_slot(struct acpiphp_slot *);
974:	int acpiphp_enable_slot(struct acpiphp_slot *);
848:	void acpiphp_enumerate_slots(struct pci_bus *);
1056:	u8 acpiphp_get_adapter_status(struct acpiphp_slot *);
1047:	u8 acpiphp_get_latch_status(struct acpiphp_slot *);
1038:	u8 acpiphp_get_power_status(struct acpiphp_slot *);
952:	void acpiphp_remove_slots(struct pci_bus *);
226:	static acpi_status acpiphp_add_context(acpi_handle, u32, void *, void **);
688:	static void acpiphp_check_bridge(struct acpiphp_bridge *);
995:	static int acpiphp_disable_and_eject_slot(struct acpiphp_slot *);
931:	static void acpiphp_drop_bridge(struct acpiphp_bridge *);
120:	static struct acpiphp_context *acpiphp_grab_context(struct acpi_device *);
828:	static int acpiphp_hotplug_notify(struct acpi_device *, u32);
144:	static void acpiphp_let_context_go(struct acpiphp_context *, struct acpiphp_context *);
189:	static void acpiphp_post_dock_fixup(struct acpi_device *);
100:	static void acpiphp_put_context(struct acpiphp_context *);
421:	static int acpiphp_rescan_slot(struct acpiphp_slot *);
338:	static void cleanup_bridge(struct acpiphp_bridge *);
544:	static void disable_slot(struct acpiphp_slot *);
473:	static void enable_slot(struct acpiphp_slot *, bool);
149:	static void free_bridge(struct kref *);
590:	static unsigned int get_slot_status(struct acpiphp_slot *);
774:	static void hotplug_event(u32, struct acpiphp_context *);
644:	static void trim_stale_devices(struct pci_dev *);

File drivers/pci/hotplug/pci_hotplug_core.c:
438:	int __pci_hp_initialize(struct hotplug_slot *, struct pci_bus *, int, const char *, struct module *, const char *);
404:	int __pci_hp_register(struct hotplug_slot *, struct pci_bus *, int, const char *, struct module *, const char *);
477:	int pci_hp_add(struct hotplug_slot *);
519:	void pci_hp_del(struct hotplug_slot *);
504:	void pci_hp_deregister(struct hotplug_slot *);
551:	void pci_hp_destroy(struct hotplug_slot *);
124:	static ssize_t attention_read_file(struct pci_slot *, char *);
136:	static ssize_t attention_write_file(struct pci_slot *, const char *, size_t);
292:	static int fs_add_slot(struct pci_slot *);
356:	static void fs_remove_slot(struct pci_slot *);
169:	static ssize_t latch_read_file(struct pci_slot *, char *);
561:	static int pci_hotplug_init(void);
67:	static ssize_t power_read_file(struct pci_slot *, char *);
79:	static ssize_t power_write_file(struct pci_slot *, const char *, size_t);
186:	static ssize_t presence_read_file(struct pci_slot *, char *);
203:	static ssize_t test_write_file(struct pci_slot *, const char *, size_t);

File drivers/pci/hotplug/pciehp_core.c:
356:	int pcie_hp_init(void);
138:	static int get_adapter_status(struct hotplug_slot *, u8 *);
127:	static int get_latch_status(struct hotplug_slot *, u8 *);
116:	static int get_power_status(struct hotplug_slot *, u8 *);
50:	static int init_slot(struct controller *);
165:	static void pciehp_check_presence(struct controller *);
183:	static int pciehp_probe(struct pcie_device *);
243:	static void pciehp_remove(struct pcie_device *);
302:	static int pciehp_resume(struct pcie_device *);
286:	static int pciehp_resume_noirq(struct pcie_device *);
320:	static int pciehp_runtime_resume(struct pcie_device *);
314:	static int pciehp_runtime_suspend(struct pcie_device *);
273:	static int pciehp_suspend(struct pcie_device *);
100:	static int set_attention_status(struct hotplug_slot *, u8);

File drivers/pci/hotplug/pciehp_ctrl.c:
172:	void pciehp_handle_button_press(struct controller *);
228:	void pciehp_handle_disable_request(struct controller *);
247:	void pciehp_handle_presence_or_link_change(struct controller *, u32);
142:	void pciehp_queue_pushbutton_work(struct work_struct *);
135:	void pciehp_request(struct controller *, int);
426:	int pciehp_sysfs_disable_slot(struct hotplug_slot *);
387:	int pciehp_sysfs_enable_slot(struct hotplug_slot *);
59:	static int board_added(struct controller *);
372:	static int pciehp_disable_slot(struct controller *, bool);
336:	static int pciehp_enable_slot(struct controller *);

File drivers/pci/hotplug/pciehp_hpc.c:
892:	void pcie_clear_hotplug_events(struct controller *);
906:	void pcie_disable_interrupt(struct controller *);
898:	void pcie_enable_interrupt(struct controller *);
995:	struct controller *pcie_init(struct pcie_device *);
963:	int pcie_init_notification(struct controller *);
972:	void pcie_shutdown_notification(struct controller *);
434:	int pciehp_card_present(struct controller *);
459:	int pciehp_card_present_or_link_active(struct controller *);
227:	int pciehp_check_link_active(struct controller *);
283:	int pciehp_check_link_status(struct controller *);
361:	int pciehp_get_attention_status(struct hotplug_slot *, u8 *);
413:	void pciehp_get_latch_status(struct controller *, u8 *);
391:	void pciehp_get_power_status(struct controller *, u8 *);
347:	int pciehp_get_raw_indicator_status(struct hotplug_slot *, u8 *);
553:	void pciehp_power_off_slot(struct controller *);
528:	int pciehp_power_on_slot(struct controller *);
470:	int pciehp_query_power_fault(struct controller *);
1082:	void pciehp_release_ctrl(struct controller *);
929:	int pciehp_reset_slot(struct hotplug_slot *, int);
507:	void pciehp_set_indicators(struct controller *, int, int);
479:	int pciehp_set_raw_indicator_status(struct hotplug_slot *, u8);
243:	static bool pci_bus_check_dev(struct pci_bus *, int);
879:	static void pcie_disable_notification(struct controller *);
149:	static void pcie_do_write_cmd(struct controller *, u16, u16, bool);
104:	static void pcie_wait_cmd(struct controller *);
561:	static void pciehp_ignore_dpc_link_change(struct controller *, struct pci_dev *, int);
587:	static irqreturn_t pciehp_isr(int, void *);
690:	static irqreturn_t pciehp_ist(int, void *);
820:	static int pciehp_poll(void *);
1088:	static void quirk_cmd_compl(struct pci_dev *);

File drivers/pci/hotplug/pciehp_pci.c:
32:	int pciehp_configure_device(struct controller *);
84:	void pciehp_unconfigure_device(struct controller *, bool);

File drivers/pci/hotplug/shpchp_core.c:
130:	void cleanup_slots(struct controller *);
169:	static int disable_slot(struct hotplug_slot *);
159:	static int enable_slot(struct hotplug_slot *);
224:	static int get_adapter_status(struct hotplug_slot *, u8 *);
194:	static int get_attention_status(struct hotplug_slot *, u8 *);
209:	static int get_latch_status(struct hotplug_slot *, u8 *);
179:	static int get_power_status(struct hotplug_slot *, u8 *);
64:	static int init_slots(struct controller *);
146:	static int set_attention_status(struct hotplug_slot *, u8);
255:	static int shpc_probe(struct pci_dev *, const struct pci_device_id *);
304:	static void shpc_remove(struct pci_dev *);
338:	static void shpcd_cleanup(void);
327:	static int shpcd_init(void);

File drivers/pci/hotplug/shpchp_ctrl.c:
45:	u8 shpchp_handle_attention_button(u8, struct controller *);
141:	u8 shpchp_handle_power_fault(u8, struct controller *);
106:	u8 shpchp_handle_presence_change(u8, struct controller *);
68:	u8 shpchp_handle_switch_change(u8, struct controller *);
416:	void shpchp_queue_pushbutton_work(struct work_struct *);
671:	int shpchp_sysfs_disable_slot(struct slot *);
635:	int shpchp_sysfs_enable_slot(struct slot *);
229:	static int board_added(struct slot *);
178:	static int change_bus_speed(struct controller *, struct slot *, enum pci_bus_speed);
458:	static void handle_button_press_event(struct slot *);
517:	static void interrupt_event_handler(struct work_struct *);
28:	static int queue_interrupt_event(struct slot *, u32);
337:	static int remove_board(struct slot *);
599:	static int shpchp_disable_slot(struct slot *);
542:	static int shpchp_enable_slot(struct slot *);
387:	static void shpchp_pushbutton_thread(struct work_struct *);
447:	static void update_slot_info(struct slot *);

File drivers/pci/hotplug/shpchp_hpc.c:
919:	int shpc_init(struct controller *, struct pci_dev *);
444:	static int hpc_get_adapter_speed(struct slot *, enum pci_bus_speed *);
424:	static int hpc_get_adapter_status(struct slot *, u8 *);
365:	static int hpc_get_attention_status(struct slot *, u8 *);
414:	static int hpc_get_latch_status(struct slot *, u8 *);
497:	static int hpc_get_mode1_ECC_cap(struct slot *, u8 *);
389:	static int hpc_get_power_status(struct slot *, u8 *);
435:	static int hpc_get_prog_int(struct slot *, u8 *);
600:	static int hpc_power_on_slot(struct slot *);
514:	static int hpc_query_power_fault(struct slot *);
560:	static void hpc_release_ctlr(struct controller *);
523:	static int hpc_set_attention_status(struct slot *, u8);
706:	static int hpc_set_bus_speed_mode(struct slot *, enum pci_bus_speed);
555:	static void hpc_set_green_led_blink(struct slot *);
550:	static void hpc_set_green_led_off(struct slot *);
545:	static void hpc_set_green_led_on(struct slot *);
624:	static int hpc_slot_disable(struct slot *);
611:	static int hpc_slot_enable(struct slot *);
218:	static void int_poll_timeout(struct timer_list *);
637:	static int shpc_get_cur_bus_speed(struct controller *);
851:	static int shpc_get_max_bus_speed(struct controller *);
772:	static irqreturn_t shpc_isr(int, void *);
293:	static int shpc_write_cmd(struct slot *, u8, u8);

File drivers/pci/hotplug/shpchp_pci.c:
23:	int shpchp_configure_device(struct slot *);
64:	void shpchp_unconfigure_device(struct slot *);

File drivers/pci/hotplug/shpchp_sysfs.c:
74:	int shpchp_create_ctrl_files(struct controller *);
79:	void shpchp_remove_ctrl_files(struct controller *);
24:	static ssize_t show_ctrl(struct device *, struct device_attribute *, char *);

File drivers/pci/iov.c:
943:	void pci_disable_sriov(struct pci_dev *);
928:	int pci_enable_sriov(struct pci_dev *, int);
160:	int pci_iov_add_virtfn(struct pci_dev *, int);
906:	int pci_iov_bus_range(struct pci_bus *);
759:	int pci_iov_init(struct pci_dev *);
777:	void pci_iov_release(struct pci_dev *);
787:	void pci_iov_remove(struct pci_dev *);
227:	void pci_iov_remove_virtfn(struct pci_dev *, int);
105:	resource_size_t pci_iov_resource_size(struct pci_dev *, int);
136:	int pci_iov_sysfs_link(struct pci_dev *, struct pci_dev *, int);
806:	void pci_iov_update_resource(struct pci_dev *, int);
19:	int pci_iov_virtfn_bus(struct pci_dev *, int);
27:	int pci_iov_virtfn_devfn(struct pci_dev *, int);
960:	int pci_num_vf(struct pci_dev *);
882:	void pci_restore_iov_state(struct pci_dev *);
1066:	int pci_sriov_configure_simple(struct pci_dev *, int);
1048:	int pci_sriov_get_totalvfs(struct pci_dev *);
873:	resource_size_t pci_sriov_resource_alignment(struct pci_dev *, int);
1023:	int pci_sriov_set_totalvfs(struct pci_dev *, u16);
893:	void pci_vf_drivers_autoprobe(struct pci_dev *, bool);
976:	int pci_vfs_assigned(struct pci_dev *);
857:	resource_size_t pcibios_iov_resource_alignment(struct pci_dev *, int);
434:	int pcibios_sriov_disable(struct pci_dev *);
429:	int pcibios_sriov_enable(struct pci_dev *, u16);
57:	static int compute_max_vf_buses(struct pci_dev *);
413:	static umode_t sriov_attrs_are_visible(struct kobject *, struct attribute *, int);
579:	static void sriov_disable(struct pci_dev *);
372:	static ssize_t sriov_drivers_autoprobe_show(struct device *, struct device_attribute *, char *);
381:	static ssize_t sriov_drivers_autoprobe_store(struct device *, struct device_attribute *, const char *, size_t);
460:	static int sriov_enable(struct pci_dev *, int);
602:	static int sriov_init(struct pci_dev *, int);
265:	static ssize_t sriov_numvfs_show(struct device *, struct device_attribute *, char *);
287:	static ssize_t sriov_numvfs_store(struct device *, struct device_attribute *, const char *, size_t);
345:	static ssize_t sriov_offset_show(struct device *, struct device_attribute *, char *);
725:	static void sriov_restore_state(struct pci_dev *);
354:	static ssize_t sriov_stride_show(struct device *, struct device_attribute *, char *);
256:	static ssize_t sriov_totalvfs_show(struct device *, struct device_attribute *, char *);
363:	static ssize_t sriov_vf_device_show(struct device *, struct device_attribute *, char *);

File drivers/pci/irq.c:
70:	void pci_free_irq(struct pci_dev *, unsigned int, void *);
33:	int pci_request_irq(struct pci_dev *, unsigned int, irq_handler_t, irq_handler_t, void *, const char *, ...);

File drivers/pci/mmap.c:
22:	int pci_mmap_page_range(struct pci_dev *, int, struct vm_area_struct *, enum pci_mmap_state, int);
43:	int pci_mmap_resource_range(struct pci_dev *, int, struct vm_area_struct *, enum pci_mmap_state, int);

File drivers/pci/msi.c:
174:	void __pci_msi_desc_mask_irq(struct msi_desc *, u32, u32);
211:	u32 __pci_msix_desc_mask_irq(struct msi_desc *, u32);
278:	void __pci_read_msi_msg(struct msi_desc *, struct msi_msg *);
313:	void __pci_write_msi_msg(struct msi_desc *, struct msi_msg *);
155:	void arch_restore_msi_irqs(struct pci_dev *);
270:	void default_restore_msi_irqs(struct pci_dev *);
1369:	struct pci_dev *msi_desc_to_pci_dev(struct msi_desc *);
1375:	void *msi_desc_to_pci_sysdata(struct msi_desc *);
1243:	int pci_alloc_irq_vectors_affinity(struct pci_dev *, unsigned int, unsigned int, unsigned int, struct irq_affinity *);
1619:	bool pci_dev_has_special_msi_domain(struct pci_dev *);
996:	void pci_disable_msi(struct pci_dev *);
1083:	void pci_disable_msix(struct pci_dev *);
1161:	int pci_enable_msi(struct pci_dev *);
1218:	int pci_enable_msix_range(struct pci_dev *, struct msix_entry *, int, int);
1296:	void pci_free_irq_vectors(struct pci_dev *);
1342:	const struct cpumask *pci_irq_get_affinity(struct pci_dev *, int);
1308:	int pci_irq_vector(struct pci_dev *, unsigned int);
1511:	struct irq_domain *pci_msi_create_irq_domain(struct fwnode_handle *, struct msi_domain_info *, struct irq_domain *);
1433:	int pci_msi_domain_check_cap(struct irq_domain *, struct msi_domain_info *, struct device *);
1575:	u32 pci_msi_domain_get_msi_rid(struct irq_domain *, struct pci_dev *);
1389:	void pci_msi_domain_write_msg(struct irq_data *, struct msi_msg *);
1104:	int pci_msi_enabled(void);
1598:	struct irq_domain *pci_msi_get_device_domain(struct pci_dev *);
254:	void pci_msi_mask_irq(struct irq_data *);
264:	void pci_msi_unmask_irq(struct irq_data *);
957:	int pci_msi_vec_count(struct pci_dev *);
1014:	int pci_msix_vec_count(struct pci_dev *);
1093:	void pci_no_msi(void);
476:	void pci_restore_msi_state(struct pci_dev *);
378:	void pci_write_msi_msg(unsigned int, struct msi_msg *);
1110:	static int __pci_enable_msi_range(struct pci_dev *, int, int, struct irq_affinity *);
1170:	static int __pci_enable_msix_range(struct pci_dev *, struct msix_entry *, int, int, struct irq_affinity *, int);
386:	static void free_msi_irqs(struct pci_dev *);
1554:	static int get_msi_id_cb(struct pci_dev *, u16, void *);
648:	static int msi_capability_init(struct pci_dev *, int, struct irq_affinity *);
483:	static ssize_t msi_mode_show(struct device *, struct device_attribute *, char *);
580:	static struct msi_desc *msi_setup_entry(struct pci_dev *, int, struct irq_affinity *);
818:	static int msix_capability_init(struct pci_dev *, struct msix_entry *, int, struct irq_affinity *);
699:	static void *msix_map_region(struct pci_dev *, unsigned int);
730:	static int msix_setup_entries(struct pci_dev *, void *, struct msix_entry *, int, struct irq_affinity *);
1448:	static int pci_msi_domain_handle_error(struct irq_domain *, struct msi_desc *, int);
1458:	static void pci_msi_domain_set_desc(msi_alloc_info_t *, struct msi_desc *);
502:	static int populate_msi_sysfs(struct pci_dev *);

File drivers/pci/pci-acpi.c:
1122:	void acpi_pci_add_bus(struct pci_bus *);
1152:	void acpi_pci_remove_bus(struct pci_bus *);
106:	phys_addr_t acpi_pci_root_get_mcfg_addr(acpi_handle);
869:	acpi_status pci_acpi_add_bus_pm_notifier(struct acpi_device *);
879:	acpi_status pci_acpi_add_pm_notifier(struct acpi_device *, struct pci_dev *);
745:	int pci_acpi_program_hp_params(struct pci_dev *);
1331:	struct irq_domain *pci_host_bridge_acpi_msi_domain(struct pci_bus *);
1317:	void pci_msi_register_fwnode_provider(struct fwnode_handle *(*)(struct device *));
791:	bool pciehp_is_native(struct pci_dev *);
817:	bool shpchp_is_native(struct pci_dev *);
937:	static bool acpi_pci_bridge_d3(struct pci_dev *);
908:	static pci_power_t acpi_pci_choose_state(struct pci_dev *);
1162:	static struct acpi_device *acpi_pci_find_companion(struct device *);
1029:	static pci_power_t acpi_pci_get_power_state(struct pci_dev *);
1345:	static int acpi_pci_init(void);
1084:	static bool acpi_pci_need_resume(struct pci_dev *);
985:	static bool acpi_pci_power_manageable(struct pci_dev *);
1051:	static void acpi_pci_refresh_power_state(struct pci_dev *);
991:	static int acpi_pci_set_power_state(struct pci_dev *, pci_power_t);
1076:	static int acpi_pci_wakeup(struct pci_dev *, bool);
699:	static acpi_status acpi_run_hpp(struct pci_dev *, acpi_handle);
624:	static acpi_status acpi_run_hpx(struct pci_dev *, acpi_handle);
1292:	static bool pci_acpi_bus_match(struct device *);
1273:	static void pci_acpi_cleanup(struct device *);
1195:	static void pci_acpi_optimize_delay(struct pci_dev *, acpi_handle);
1243:	static void pci_acpi_setup(struct device *);
826:	static void pci_acpi_wake_bus(struct acpi_device_wakeup_context *);
840:	static void pci_acpi_wake_dev(struct acpi_device_wakeup_context *);
137:	static void program_hpx_type0(struct pci_dev *, struct hpx_type0 *);
283:	static void program_hpx_type2(struct pci_dev *, struct hpx_type2 *);
497:	static void program_hpx_type3_register(struct pci_dev *, const struct hpx_type3 *);
586:	static acpi_status program_type3_hpx_record(struct pci_dev *, union acpi_object *, union acpi_object *);

File drivers/pci/pci-driver.c:
1378:	int __pci_register_driver(struct pci_driver *, struct module *, const char *);
52:	int pci_add_dynid(struct pci_driver *, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned long);
1424:	struct pci_driver *pci_dev_driver(const struct pci_dev *);
1476:	struct pci_dev *pci_dev_get(struct pci_dev *);
1491:	void pci_dev_put(struct pci_dev *);
223:	const struct pci_device_id *pci_match_id(const struct pci_device_id *, struct pci_dev *);
1536:	void pci_uevent_ers(struct pci_dev *, enum pci_ers_result);
1406:	void pci_unregister_driver(struct pci_driver *);
395:	int pcibios_alloc_irq(struct pci_dev *);
400:	void pcibios_free_irq(struct pci_dev *);
289:	static long local_pci_probe(void *);
100:	static ssize_t new_id_store(struct device_driver *, const char *, size_t);
1447:	static int pci_bus_match(struct device *, struct device_driver *);
1566:	static int pci_bus_num_vf(struct device *);
334:	static int pci_call_probe(struct pci_driver *, struct pci_dev *, const struct pci_device_id *);
417:	static int pci_device_probe(struct device *);
442:	static int pci_device_remove(struct device *);
481:	static void pci_device_shutdown(struct device *);
1578:	static int pci_dma_configure(struct device *);
1643:	static int pci_driver_init(void);
80:	static void pci_free_dynids(struct pci_driver *);
638:	static bool pci_has_legacy_pm_support(struct pci_dev *);
618:	static int pci_legacy_resume(struct device *);
577:	static int pci_legacy_suspend(struct device *, pm_message_t);
253:	static const struct pci_device_id *pci_match_device(struct pci_driver *, struct pci_dev *);
680:	static void pci_pm_complete(struct device *);
973:	static int pci_pm_freeze(struct device *);
1009:	static int pci_pm_freeze_noirq(struct device *);
1081:	static int pci_pm_poweroff(struct device *);
1115:	static int pci_pm_poweroff_late(struct device *);
1125:	static int pci_pm_poweroff_noirq(struct device *);
656:	static int pci_pm_prepare(struct device *);
1182:	static int pci_pm_restore(struct device *);
1165:	static int pci_pm_restore_noirq(struct device *);
933:	static int pci_pm_resume(struct device *);
925:	static int pci_pm_resume_early(struct device *);
891:	static int pci_pm_resume_noirq(struct device *);
1311:	static int pci_pm_runtime_idle(struct device *);
1280:	static int pci_pm_runtime_resume(struct device *);
1225:	static int pci_pm_runtime_suspend(struct device *);
725:	static int pci_pm_suspend(struct device *);
781:	static int pci_pm_suspend_late(struct device *);
791:	static int pci_pm_suspend_noirq(struct device *);
1060:	static int pci_pm_thaw(struct device *);
1034:	static int pci_pm_thaw_noirq(struct device *);
1498:	static int pci_uevent(struct device *, struct kobj_uevent_env *);
1615:	static int pcie_port_bus_match(struct device *, struct device_driver *);
168:	static ssize_t remove_id_store(struct device_driver *, const char *, size_t);

File drivers/pci/pci-label.c:
297:	void pci_create_firmware_label_files(struct pci_dev *);
305:	void pci_remove_firmware_label_files(struct pci_dev *);
224:	static umode_t acpi_index_string_exist(struct kobject *, struct attribute *, int);
243:	static ssize_t acpiindex_show(struct device *, struct device_attribute *, char *);
237:	static ssize_t acpilabel_show(struct device *, struct device_attribute *, char *);
212:	static bool device_has_dsm(struct device *, struct device *);
169:	static int dsm_get_label(char *, enum acpi_attr_enum, struct device *, struct device *);
43:	static size_t find_smbios_instance_string(char *, enum smbios_attr_enum, struct pci_dev *, struct pci_dev *);
79:	static umode_t smbios_instance_string_exist(struct kobject *, struct attribute *, int);
102:	static ssize_t smbiosinstance_show(struct device *, struct device_attribute *, char *);
92:	static ssize_t smbioslabel_show(struct device *, struct device_attribute *, char *);

File drivers/pci/pci-stub.c:
86:	static void pci_stub_exit(void);
41:	static int pci_stub_init(void);
29:	static int pci_stub_probe(struct pci_dev *, const struct pci_device_id *);

File drivers/pci/pci-sysfs.c:
1359:	int pci_create_sysfs_dev_files(struct pci_dev *);
999:	int pci_mmap_fits(struct pci_dev *, int, struct vm_area_struct *, enum pci_mmap_api);
1442:	void pci_remove_sysfs_dev_files(struct pci_dev *);
239:	static ssize_t ari_enabled_show(struct device *, struct device_attribute *, char *);
671:	static ssize_t boot_vga_show(struct device *, struct device_attribute *, char *);
54:	static ssize_t broken_parity_status_show(struct device *, struct device_attribute *, char *);
62:	static ssize_t broken_parity_status_store(struct device *, struct device_attribute *, const char *, size_t);
495:	static ssize_t bus_rescan_store(struct device *, struct device_attribute *, const char *, size_t);
51:	static ssize_t class_show(struct device *, struct device_attribute *, char *);
346:	static ssize_t consistent_dma_mask_bits_show(struct device *, struct device_attribute *, char *);
109:	static ssize_t cpuaffinity_show(struct device *, struct device_attribute *, char *);
118:	static ssize_t cpulistaffinity_show(struct device *, struct device_attribute *, char *);
173:	static ssize_t current_link_speed_show(struct device *, struct device_attribute *, char *);
191:	static ssize_t current_link_width_show(struct device *, struct device_attribute *, char *);
540:	static ssize_t d3cold_allowed_show(struct device *, struct device_attribute *, char *);
519:	static ssize_t d3cold_allowed_store(struct device *, struct device_attribute *, const char *, size_t);
433:	static ssize_t dev_rescan_store(struct device *, struct device_attribute *, const char *, size_t);
47:	static ssize_t device_show(struct device *, struct device_attribute *, char *);
337:	static ssize_t dma_mask_bits_show(struct device *, struct device_attribute *, char *);
597:	static ssize_t driver_override_show(struct device *, struct device_attribute *, char *);
563:	static ssize_t driver_override_store(struct device *, struct device_attribute *, const char *, size_t);
290:	static ssize_t enable_show(struct device *, struct device_attribute *, char *);
262:	static ssize_t enable_store(struct device *, struct device_attribute *, const char *, size_t);
52:	static ssize_t irq_show(struct device *, struct device_attribute *, char *);
99:	static ssize_t local_cpulist_show(struct device *, struct device_attribute *, char *);
92:	static ssize_t local_cpus_show(struct device *, struct device_attribute *, char *);
154:	static ssize_t max_link_speed_show(struct device *, struct device_attribute *, char *);
164:	static ssize_t max_link_width_show(struct device *, struct device_attribute *, char *);
249:	static ssize_t modalias_show(struct device *, struct device_attribute *, char *);
354:	static ssize_t msi_bus_show(struct device *, struct device_attribute *, char *);
365:	static ssize_t msi_bus_store(struct device *, struct device_attribute *, const char *, size_t);
329:	static ssize_t numa_node_show(struct device *, struct device_attribute *, char *);
301:	static ssize_t numa_node_store(struct device *, struct device_attribute *, const char *, size_t);
1519:	static umode_t pci_bridge_attrs_are_visible(struct kobject *, struct attribute *, int);
1155:	static int pci_create_attr(struct pci_dev *, int, int);
1203:	static int pci_create_resource_files(struct pci_dev *);
1488:	static umode_t pci_dev_attrs_are_visible(struct kobject *, struct attribute *, int);
1507:	static umode_t pci_dev_hp_attrs_are_visible(struct kobject *, struct attribute *, int);
1030:	static int pci_mmap_resource(struct kobject *, struct vm_area_struct *, int, struct bin_attribute *, struct bin_attribute *);
1054:	static int pci_mmap_resource_uc(struct file *, struct kobject *, struct bin_attribute *, struct vm_area_struct *);
1061:	static int pci_mmap_resource_wc(struct file *, struct kobject *, struct bin_attribute *, struct vm_area_struct *);
686:	static ssize_t pci_read_config(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t, size_t);
1107:	static ssize_t pci_read_resource_io(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t, size_t);
1269:	static ssize_t pci_read_rom(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t, size_t);
1134:	static void pci_remove_resource_files(struct pci_dev *);
1465:	static int pci_sysfs_init(void);
763:	static ssize_t pci_write_config(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t, size_t);
1114:	static ssize_t pci_write_resource_io(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t, size_t);
1243:	static ssize_t pci_write_rom(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t, size_t);
1531:	static umode_t pcie_dev_attrs_are_visible(struct kobject *, struct attribute *, int);
453:	static ssize_t remove_store(struct device *, struct device_attribute *, const char *, size_t);
401:	static ssize_t rescan_store(struct bus_type *, const char *, size_t);
1317:	static ssize_t reset_store(struct device *, struct device_attribute *, const char *, size_t);
128:	static ssize_t resource_show(struct device *, struct device_attribute *, char *);
50:	static ssize_t revision_show(struct device *, struct device_attribute *, char *);
207:	static ssize_t secondary_bus_number_show(struct device *, struct device_attribute *, char *);
223:	static ssize_t subordinate_bus_number_show(struct device *, struct device_attribute *, char *);
49:	static ssize_t subsystem_device_show(struct device *, struct device_attribute *, char *);
48:	static ssize_t subsystem_vendor_show(struct device *, struct device_attribute *, char *);
46:	static ssize_t vendor_show(struct device *, struct device_attribute *, char *);

File drivers/pci/pci.c:
5061:	int __pci_reset_function_locked(struct pci_dev *);
5947:	void __pcie_print_link_status(struct pci_dev *, bool);
4198:	void *devm_pci_remap_cfg_resource(struct device *, struct resource *);
4158:	void *devm_pci_remap_cfgspace(struct device *, resource_size_t, resource_size_t);
4127:	int devm_pci_remap_iospace(struct device *, const struct resource *, phys_addr_t);
3428:	bool pci_acs_enabled(struct pci_dev *, u16);
3525:	void pci_acs_init(struct pci_dev *);
3501:	bool pci_acs_path_enabled(struct pci_dev *, struct pci_dev *, u16);
3313:	int pci_add_cap_save_buffer(struct pci_dev *, char, unsigned int);
6107:	void pci_add_dma_alias(struct pci_dev *, u8, unsigned int);
3318:	int pci_add_ext_cap_save_buffer(struct pci_dev *, u16, unsigned int);
4047:	unsigned long pci_address_to_pio(phys_addr_t);
3327:	void pci_allocate_cap_save_buffers(struct pci_dev *);
139:	bool pci_ats_disabled(void);
2637:	int pci_back_from_sleep(struct pci_dev *);
2847:	bool pci_bridge_d3_possible(struct pci_dev *);
2927:	void pci_bridge_d3_update(struct pci_dev *);
4919:	int pci_bridge_secondary_bus_reset(struct pci_dev *);
4794:	void pci_bridge_wait_for_secondary_bus(struct pci_dev *);
5534:	int pci_bus_error_reset(struct pci_dev *);
505:	int pci_bus_find_capability(struct pci_bus *, unsigned int, int);
170:	unsigned char pci_bus_max_busnr(struct pci_bus *);
1283:	void pci_bus_set_current_state(struct pci_bus *, pci_power_t);
4524:	bool pci_check_and_mask_intx(struct pci_dev *);
4538:	bool pci_check_and_unmask_intx(struct pci_dev *);
2213:	bool pci_check_pme_status(struct pci_dev *);
1366:	pci_power_t pci_choose_state(struct pci_dev *, pm_message_t);
4305:	void pci_clear_master(struct pci_dev *);
4426:	void pci_clear_mwi(struct pci_dev *);
3768:	u8 pci_common_swizzle(struct pci_dev *, u8 *);
2789:	void pci_config_pm_runtime_get(struct pci_dev *);
2811:	void pci_config_pm_runtime_put(struct pci_dev *);
3364:	void pci_configure_ari(struct pci_dev *);
2997:	void pci_d3cold_disable(struct pci_dev *);
2980:	void pci_d3cold_enable(struct pci_dev *);
2753:	void pci_dev_adjust_pme(struct pci_dev *);
2774:	void pci_dev_complete_resume(struct pci_dev *);
2722:	bool pci_dev_need_resume(struct pci_dev *);
2682:	bool pci_dev_run_wake(struct pci_dev *);
6142:	bool pci_device_is_present(struct pci_dev *);
6132:	bool pci_devs_are_dma_aliases(struct pci_dev *, struct pci_dev *);
2141:	void pci_disable_device(struct pci_dev *);
2125:	void pci_disable_enabled_device(struct pci_dev *);
3245:	void pci_ea_init(struct pci_dev *);
3659:	int pci_enable_atomic_ops_to_root(struct pci_dev *, u32);
1948:	int pci_enable_device(struct pci_dev *);
1917:	int pci_enable_device_io(struct pci_dev *);
1931:	int pci_enable_device_mem(struct pci_dev *);
2505:	int pci_enable_wake(struct pci_dev *, pci_power_t, bool);
6506:	int pci_ext_cfg_avail(void);
480:	int pci_find_capability(struct pci_dev *, int);
586:	int pci_find_ext_capability(struct pci_dev *, int);
683:	int pci_find_ht_capability(struct pci_dev *, int);
434:	int pci_find_next_capability(struct pci_dev *, u8, int);
531:	int pci_find_next_ext_capability(struct pci_dev *, int, int);
666:	int pci_find_next_ht_capability(struct pci_dev *, int, int);
704:	struct resource *pci_find_parent_resource(const struct pci_dev *, struct resource *);
748:	struct resource *pci_find_resource(struct pci_dev *, struct resource *);
1409:	struct pci_cap_saved_state *pci_find_saved_cap(struct pci_dev *, char);
1414:	struct pci_cap_saved_state *pci_find_saved_ext_cap(struct pci_dev *, u16);
2651:	int pci_finish_runtime_suspend(struct pci_dev *);
6511:	void pci_fixup_cardbus(struct pci_bus *);
3348:	void pci_free_cap_save_buffers(struct pci_dev *);
601:	u64 pci_get_dsn(struct pci_dev *);
3744:	int pci_get_interrupt_pin(struct pci_dev *, struct pci_dev **);
6152:	void pci_ignore_hotplug(struct pci_dev *);
4447:	void pci_intx(struct pci_dev *, int);
209:	void *pci_ioremap_bar(struct pci_dev *, int);
224:	void *pci_ioremap_wc_bar(struct pci_dev *, int);
1788:	int pci_load_and_free_saved_state(struct pci_dev *, struct pci_saved_state **);
1751:	int pci_load_saved_state(struct pci_dev *, struct pci_saved_state *);
4032:	phys_addr_t pci_pio_to_address(unsigned long);
1159:	int pci_platform_power_transition(struct pci_dev *, pci_power_t);
3010:	void pci_pm_init(struct pci_dev *);
2367:	void pci_pme_active(struct pci_dev *, bool);
2276:	bool pci_pme_capable(struct pci_dev *, pci_power_t);
2341:	void pci_pme_restore(struct pci_dev *);
2264:	void pci_pme_wakeup_bus(struct pci_bus *);
1244:	int pci_power_up(struct pci_dev *);
6070:	bool pci_pr3_present(struct pci_dev *);
2610:	int pci_prepare_to_sleep(struct pci_dev *);
5567:	int pci_probe_reset_bus(struct pci_bus *);
5107:	int pci_probe_reset_function(struct pci_dev *);
5464:	int pci_probe_reset_slot(struct pci_slot *);
6173:	struct pci_dev *pci_real_dma_dev(struct pci_dev *);
6329:	void pci_reassigndev_resource_alignment(struct pci_dev *);
3608:	int pci_rebar_get_current_size(struct pci_dev *, int);
3580:	u32 pci_rebar_get_possible_sizes(struct pci_dev *, int);
3630:	int pci_rebar_set_size(struct pci_dev *, int, int);
1844:	int pci_reenable_device(struct pci_dev *);
1146:	void pci_refresh_power_state(struct pci_dev *);
4001:	int pci_register_io_range(struct fwnode_handle *, phys_addr_t, resource_size_t);
6002:	void pci_register_set_vga_state(arch_set_vga_state_t);
3791:	void pci_release_region(struct pci_dev *, int);
3949:	void pci_release_regions(struct pci_dev *);
3888:	void pci_release_selected_regions(struct pci_dev *, int);
4069:	int pci_remap_iospace(const struct resource *, phys_addr_t);
794:	void pci_request_acs(void);
3874:	int pci_request_region(struct pci_dev *, int, const char *);
3968:	int pci_request_regions(struct pci_dev *, const char *);
3990:	int pci_request_regions_exclusive(struct pci_dev *, const char *);
3924:	int pci_request_selected_regions(struct pci_dev *, int, const char *);
3931:	int pci_request_selected_regions_exclusive(struct pci_dev *, int, const char *);
5605:	int pci_reset_bus(struct pci_dev *);
5147:	int pci_reset_function(struct pci_dev *);
5183:	int pci_reset_function_locked(struct pci_dev *);
4880:	void pci_reset_secondary_bus(struct pci_dev *);
6187:	void pci_resource_to_user(const struct pci_dev *, int, const struct resource *, resource_size_t *, resource_size_t *);
1665:	void pci_restore_state(struct pci_dev *);
1547:	int pci_save_state(struct pci_dev *);
5989:	int pci_select_bars(struct pci_dev *, unsigned long);
4321:	int pci_set_cacheline_size(struct pci_dev *);
4294:	void pci_set_master(struct pci_dev *);
4357:	int pci_set_mwi(struct pci_dev *);
2182:	int pci_set_pcie_reset_state(struct pci_dev *, enum pcie_reset_state);
937:	int pci_set_platform_pm(const struct pci_platform_pm_ops *);
1306:	int pci_set_power_state(struct pci_dev *, pci_power_t);
6024:	int pci_set_vga_state(struct pci_dev *, bool, unsigned int, u32);
191:	int pci_status_get_and_clear_errors(struct pci_dev *);
1712:	struct pci_saved_state *pci_store_saved_state(struct pci_dev *);
3732:	u8 pci_swizzle_interrupt_pin(const struct pci_dev *, u8);
5206:	int pci_try_reset_function(struct pci_dev *);
4410:	int pci_try_set_mwi(struct pci_dev *);
4101:	void pci_unmap_iospace(struct resource *);
1124:	void pci_update_current_state(struct pci_dev *, pci_power_t);
771:	int pci_wait_for_pending(struct pci_dev *, int, u16);
4550:	int pci_wait_for_pending_transaction(struct pci_dev *);
2528:	int pci_wake_from_d3(struct pci_dev *, bool);
1193:	void pci_wakeup_bus(struct pci_bus *);
2068:	int pcibios_add_device(struct pci_dev *);
6178:	resource_size_t pcibios_default_alignment(void);
1798:	int pcibios_enable_device(struct pci_dev *, int);
2103:	void pcibios_penalize_isa_irq(int, int);
4907:	void pcibios_reset_secondary_bus(struct pci_dev *);
4268:	void pcibios_set_master(struct pci_dev *);
2169:	int pcibios_set_pcie_reset_state(struct pci_dev *, enum pcie_reset_state);
4255:	char *pcibios_setup(char *);
5816:	u32 pcie_bandwidth_available(struct pci_dev *, struct pci_dev **, enum pci_bus_speed *, enum pcie_link_width *);
5925:	u32 pcie_bandwidth_capable(struct pci_dev *, enum pci_bus_speed *, enum pcie_link_width *);
2188:	void pcie_clear_device_status(struct pci_dev *);
2200:	void pcie_clear_root_pme_status(struct pci_dev *);
4587:	int pcie_flr(struct pci_dev *);
5764:	int pcie_get_mps(struct pci_dev *);
5711:	int pcie_get_readrq(struct pci_dev *);
5867:	enum pci_bus_speed pcie_get_speed_cap(struct pci_dev *);
5903:	enum pcie_link_width pcie_get_width_cap(struct pci_dev *);
4567:	bool pcie_has_flr(struct pci_dev *);
5976:	void pcie_print_link_status(struct pci_dev *);
5782:	int pcie_set_mps(struct pci_dev *, int);
5729:	int pcie_set_readrq(struct pci_dev *, int);
4755:	bool pcie_wait_for_link(struct pci_dev *, bool);
2021:	int pcim_enable_device(struct pci_dev *);
2049:	void pcim_pin_device(struct pci_dev *);
4388:	int pcim_set_mwi(struct pci_dev *);
5619:	int pcix_get_max_mmrbc(struct pci_dev *);
5642:	int pcix_get_mmrbc(struct pci_dev *);
5667:	int pcix_set_mmrbc(struct pci_dev *, int);
1270:	static int __pci_dev_set_current_state(struct pci_dev *, void *);
2444:	static int __pci_enable_wake(struct pci_dev *, pci_power_t, bool);
402:	static int __pci_find_next_cap_ttl(struct pci_bus *, unsigned int, u8, int, int *);
626:	static int __pci_find_next_ht_cap(struct pci_dev *, int, int);
2321:	static void __pci_pme_active(struct pci_dev *, bool);
3829:	static int __pci_request_region(struct pci_dev *, int, const char *, int);
3898:	static int __pci_request_selected_regions(struct pci_dev *, int, const char *, int);
5485:	static int __pci_reset_slot(struct pci_slot *);
4231:	static void __pci_set_master(struct pci_dev *, bool);
3287:	static int _pci_add_cap_save_buffer(struct pci_dev *, u16, bool, unsigned int);
4111:	static void devm_pci_unmap_iospace(struct device *, void *);
1803:	static int do_pci_enable_device(struct pci_dev *, int);
3391:	static bool pci_acs_flags_enabled(struct pci_dev *, u16);
4608:	static int pci_af_flr(struct pci_dev *, int);
5244:	static void pci_bus_lock(struct pci_bus *);
5226:	static bool pci_bus_resetable(struct pci_bus *);
5392:	static void pci_bus_restore_locked(struct pci_bus *);
5376:	static void pci_bus_save_and_disable_locked(struct pci_bus *);
5268:	static int pci_bus_trylock(struct pci_bus *);
5256:	static void pci_bus_unlock(struct pci_bus *);
4472:	static bool pci_check_and_set_intx_mask(struct pci_dev *, bool);
2900:	static int pci_dev_check_d3cold(struct pci_dev *, void *);
5025:	static void pci_dev_restore(struct pci_dev *);
4994:	static void pci_dev_save_and_disable(struct pci_dev *);
352:	static int pci_dev_str_match(struct pci_dev *, const char *, const char **);
258:	static int pci_dev_str_match_path(struct pci_dev *, const char *, const char **);
1199:	static int pci_dev_wait(struct pci_dev *, char *, int);
807:	static void pci_disable_acs_redir(struct pci_dev *);
3123:	static int pci_ea_read(struct pci_dev *, int);
899:	static void pci_enable_acs(struct pci_dev *);
1852:	static void pci_enable_bridge(struct pci_dev *);
1874:	static int pci_enable_device_flags(struct pci_dev *, unsigned long);
4927:	static int pci_parent_bus_reset(struct pci_dev *, int);
2285:	static void pci_pme_list_scan(struct work_struct *);
2248:	static int pci_pme_wakeup(struct pci_dev *, void *);
1005:	static int pci_raw_set_power_state(struct pci_dev *, pci_power_t);
6593:	static int pci_realloc_setup_params(void);
3547:	static int pci_rebar_find_pos(struct pci_dev *, int);
4945:	static int pci_reset_hotplug_slot(struct hotplug_slot *, int);
6421:	static int pci_resource_alignment_sysfs_init(void);
1576:	static void pci_restore_config_dword(struct pci_dev *, int, u32, int, bool);
1446:	static void pci_restore_pcie_state(struct pci_dev *);
1634:	static void pci_restore_rebar_state(struct pci_dev *);
6516:	static int pci_setup(char *);
5438:	static int pci_slot_reset(struct pci_slot *, int);
5342:	static int pci_slot_trylock(struct pci_slot *);
5328:	static void pci_slot_unlock(struct pci_slot *);
6206:	static resource_size_t pci_specified_resource_alignment(struct pci_dev *, bool *);
2545:	static pci_power_t pci_target_state(struct pci_dev *, bool);
1182:	static int pci_wakeup(struct pci_dev *, void *);
150:	static int pcie_port_pm_setup(char *);
4705:	static bool pcie_wait_for_link_delay(struct pci_dev *, bool, int);
1969:	static void pcim_release(struct device *, void *);
6382:	static ssize_t resource_alignment_show(struct bus_type *, char *);
6404:	static ssize_t resource_alignment_store(struct bus_type *, const char *, size_t);

File drivers/pci/pcie/aer.c:
1035:	int aer_get_device_error_info(struct pci_dev *, struct aer_err_info *);
695:	void aer_print_error(struct pci_dev *, struct aer_err_info *);
1005:	void aer_recover_queue(int, unsigned int, unsigned int, int, struct aer_capability_regs *);
758:	void cper_print_aer(struct pci_dev *, int, struct aer_capability_regs *);
745:	int cper_severity_to_aer(int);
112:	bool pci_aer_available(void);
268:	void pci_aer_clear_fatal_status(struct pci_dev *);
249:	int pci_aer_clear_nonfatal_status(struct pci_dev *);
317:	int pci_aer_clear_status(struct pci_dev *);
391:	void pci_aer_exit(struct pci_dev *);
369:	void pci_aer_init(struct pci_dev *);
293:	int pci_aer_raw_clear_status(struct pci_dev *);
237:	int pci_disable_pcie_error_reporting(struct pci_dev *);
225:	int pci_enable_pcie_error_reporting(struct pci_dev *);
107:	void pci_no_aer(void);
347:	void pci_restore_aer_state(struct pci_dev *);
325:	void pci_save_aer_state(struct pci_dev *);
1399:	int pcie_aer_init(void);
215:	int pcie_aer_is_native(struct pci_dev *);
200:	void pcie_ecrc_get_policy(char *);
180:	void pcie_set_ecrc_checking(struct pci_dev *);
668:	static void __aer_print_error(struct pci_dev *, struct aer_err_info *);
661:	static void __print_tlp_header(struct pci_dev *, struct aer_header_log_regs *);
549:	static ssize_t aer_dev_correctable_show(struct device *, struct device_attribute *, char *);
552:	static ssize_t aer_dev_fatal_show(struct device *, struct device_attribute *, char *);
555:	static ssize_t aer_dev_nonfatal_show(struct device *, struct device_attribute *, char *);
1243:	static void aer_enable_rootport(struct aer_rpc *, struct aer_rpc *);
1181:	static irqreturn_t aer_irq(int, void *);
1160:	static irqreturn_t aer_isr(int, void *);
1107:	static void aer_isr_one_error(struct aer_err_source *, struct aer_rpc *, struct aer_rpc *);
732:	static void aer_print_port_info(struct pci_dev *, struct aer_err_info *);
1325:	static int aer_probe(struct pcie_device *);
972:	static void aer_recover_work_func(struct work_struct *);
1312:	static void aer_remove(struct pcie_device *);
1358:	static pci_ers_result_t aer_root_reset(struct pci_dev *);
569:	static ssize_t aer_rootport_total_err_cor_show(struct device *, struct device_attribute *, char *);
571:	static ssize_t aer_rootport_total_err_fatal_show(struct device *, struct device_attribute *, char *);
573:	static ssize_t aer_rootport_total_err_nonfatal_show(struct device *, struct device_attribute *, char *);
586:	static umode_t aer_stats_attrs_are_visible(struct kobject *, struct attribute *, int);
874:	static int find_device_iter(struct pci_dev *, void *);
905:	static bool find_source_device(struct pci_dev *, struct aer_err_info *);
935:	static void handle_error_source(struct pci_dev *, struct aer_err_info *);
1202:	static int set_device_error_reporting(struct pci_dev *, void *);

File drivers/pci/pcie/aspm.c:
1137:	int pci_disable_link_state(struct pci_dev *, int);
1122:	int pci_disable_link_state_locked(struct pci_dev *, int);
1193:	bool pcie_aspm_enabled(struct pci_dev *);
986:	void pcie_aspm_exit_link_state(struct pci_dev *);
897:	void pcie_aspm_init_link_state(struct pci_dev *);
1024:	void pcie_aspm_pm_state_change(struct pci_dev *);
1042:	void pcie_aspm_powersave_config_link(struct pci_dev *);
1373:	bool pcie_aspm_support_enabled(void);
1359:	void pcie_no_aspm(void);
1075:	static int __pci_disable_link_state(struct pci_dev *, int, bool);
843:	static struct pcie_link_state *alloc_pcie_link_state(struct pci_dev *);
1214:	static ssize_t aspm_attr_store_common(struct device *, const char *, size_t, u8, struct device_attribute *);
452:	static void aspm_calc_l1ss_info(struct pcie_link_state *, u32, u32);
1313:	static umode_t aspm_ctrl_attrs_are_visible(struct kobject *, struct attribute *, int);
1262:	static ssize_t clkpm_show(struct device *, struct device_attribute *, char *);
1271:	static ssize_t clkpm_store(struct device *, struct device_attribute *, const char *, size_t);
1255:	static ssize_t l0s_aspm_show(struct device *, struct device_attribute *, char *);
1255:	static ssize_t l0s_aspm_store(struct device *, struct device_attribute *, const char *, size_t);
1257:	static ssize_t l1_1_aspm_show(struct device *, struct device_attribute *, char *);
1257:	static ssize_t l1_1_aspm_store(struct device *, struct device_attribute *, const char *, size_t);
1259:	static ssize_t l1_1_pcipm_show(struct device *, struct device_attribute *, char *);
1259:	static ssize_t l1_1_pcipm_store(struct device *, struct device_attribute *, const char *, size_t);
1258:	static ssize_t l1_2_aspm_show(struct device *, struct device_attribute *, char *);
1258:	static ssize_t l1_2_aspm_store(struct device *, struct device_attribute *, const char *, size_t);
1260:	static ssize_t l1_2_pcipm_show(struct device *, struct device_attribute *, char *);
1260:	static ssize_t l1_2_pcipm_store(struct device *, struct device_attribute *, const char *, size_t);
1256:	static ssize_t l1_aspm_show(struct device *, struct device_attribute *, char *);
1256:	static ssize_t l1_aspm_store(struct device *, struct device_attribute *, const char *, size_t);
543:	static void pcie_aspm_cap_init(struct pcie_link_state *, int);
379:	static void pcie_aspm_check_latency(struct pci_dev *, struct pci_dev *);
230:	static void pcie_aspm_configure_common_clock(struct pcie_link_state *, struct pcie_link_state *);
1343:	static int pcie_aspm_disable(char *);
1061:	static struct pcie_link_state *pcie_aspm_get_link(struct pci_dev *);
1169:	static int pcie_aspm_get_policy(char *, const struct kernel_param *);
1143:	static int pcie_aspm_set_policy(const char *, const struct kernel_param *);
684:	static void pcie_config_aspm_l1ss(struct pcie_link_state *, u32);
743:	static void pcie_config_aspm_link(struct pcie_link_state *, u32);
195:	static bool pcie_retrain_link(struct pcie_link_state *, struct pcie_link_state *);
155:	static void pcie_set_clkpm(struct pcie_link_state *, int);
962:	static void pcie_update_aspm_capable(struct pcie_link_state *);

File drivers/pci/pcie/dpc.c:
263:	void dpc_process_error(struct pci_dev *);
144:	pci_ers_result_t dpc_reset_link(struct pci_dev *);
325:	void pci_dpc_init(struct pci_dev *);
99:	bool pci_dpc_recovered(struct pci_dev *);
58:	void pci_restore_dpc_state(struct pci_dev *);
42:	void pci_save_dpc_state(struct pci_dev *);
401:	int pcie_dpc_init(void);
296:	static irqreturn_t dpc_handler(int, void *);
308:	static irqreturn_t dpc_irq(int, void *);
347:	static int dpc_probe(struct pcie_device *);
187:	static void dpc_process_rp_pio_error(struct pci_dev *);
383:	static void dpc_remove(struct pcie_device *);

File drivers/pci/pcie/err.c:
149:	pci_ers_result_t pcie_do_recovery(struct pci_dev *, pci_channel_state_t, pci_ers_result_t (*)(struct pci_dev *));
48:	static int report_error_detected(struct pci_dev *, pci_channel_state_t, enum pci_ers_result *);
82:	static int report_frozen_detected(struct pci_dev *, void *);
92:	static int report_mmio_enabled(struct pci_dev *, void *);
87:	static int report_normal_detected(struct pci_dev *, void *);
130:	static int report_resume(struct pci_dev *, void *);
111:	static int report_slot_reset(struct pci_dev *, void *);

File drivers/pci/pcie/pme.c:
460:	int pcie_pme_init(void);
53:	void pcie_pme_interrupt_enable(struct pci_dev *, bool);
296:	static int pcie_pme_can_wakeup(struct pci_dev *, void *);
353:	static bool pcie_pme_check_wakeup(struct pci_bus *);
368:	static void pcie_pme_disable_interrupt(struct pci_dev *, struct pcie_pme_service_data *);
101:	static bool pcie_pme_from_pci_bridge(struct pci_bus *, u8);
129:	static void pcie_pme_handle_request(struct pci_dev *, u16);
264:	static irqreturn_t pcie_pme_irq(int, void *);
321:	static int pcie_pme_probe(struct pcie_device *);
436:	static void pcie_pme_remove(struct pcie_device *);
413:	static int pcie_pme_resume(struct pcie_device *);
32:	static int pcie_pme_setup(char *);
382:	static int pcie_pme_suspend(struct pcie_device *);
69:	static bool pcie_pme_walk_bus(struct pci_bus *);
213:	static void pcie_pme_work_fn(struct work_struct *);

File drivers/pci/pcie/portdrv_core.c:
321:	int pcie_port_device_register(struct pci_dev *);
495:	void pcie_port_device_remove(struct pci_dev *);
411:	int pcie_port_device_resume(struct device *);
401:	int pcie_port_device_resume_noirq(struct device *);
431:	int pcie_port_device_runtime_resume(struct device *);
421:	int pcie_port_device_runtime_suspend(struct device *);
395:	int pcie_port_device_suspend(struct device *);
473:	struct device *pcie_port_find_device(struct pci_dev *, u32);
573:	int pcie_port_service_register(struct pcie_port_service_driver *);
592:	void pcie_port_service_unregister(struct pcie_port_service_driver *);
445:	static int find_service_iter(struct device *, void *);
206:	static int get_port_device_capability(struct pci_dev *);
280:	static int pcie_device_init(struct pci_dev *, int, int);
101:	static int pcie_port_enable_irq_vec(struct pci_dev *, int *, int);
510:	static int pcie_port_probe_service(struct device *);
541:	static int pcie_port_remove_service(struct device *);
567:	static void pcie_port_shutdown_service(struct device *);
376:	static int pm_iter(struct device *, void *);
35:	static void release_pcie_device(struct device *);
438:	static int remove_iter(struct device *, void *);

File drivers/pci/pcie/portdrv_pci.c:
221:	static int dmi_pcie_pme_disable_msi(const struct dmi_system_id *);
62:	static int pcie_port_runtime_idle(struct device *);
54:	static int pcie_port_runtime_suspend(struct device *);
38:	static int pcie_port_setup(char *);
185:	static void pcie_portdrv_err_resume(struct pci_dev *);
148:	static pci_ers_result_t pcie_portdrv_error_detected(struct pci_dev *, pci_channel_state_t);
253:	static int pcie_portdrv_init(void);
162:	static pci_ers_result_t pcie_portdrv_mmio_enabled(struct pci_dev *);
101:	static int pcie_portdrv_probe(struct pci_dev *, const struct pci_device_id *);
137:	static void pcie_portdrv_remove(struct pci_dev *);
155:	static pci_ers_result_t pcie_portdrv_slot_reset(struct pci_dev *);
167:	static int resume_iter(struct device *, void *);

File drivers/pci/probe.c:
176:	int __pci_read_base(struct pci_dev *, enum pci_bar_type, struct resource *, unsigned int);
621:	struct pci_host_bridge *devm_pci_alloc_host_bridge(struct device *, size_t);
73:	int no_pci_devices(void);
1130:	struct pci_bus *pci_add_new_bus(struct pci_bus *, struct pci_dev *, int);
2252:	struct pci_dev *pci_alloc_dev(struct pci_bus *);
601:	struct pci_host_bridge *pci_alloc_host_bridge(size_t);
2317:	bool pci_bus_generic_read_dev_vendor_id(struct pci_bus *, int, u32 *, int);
3049:	int pci_bus_insert_busn_res(struct pci_bus *, int, int);
2334:	bool pci_bus_read_dev_vendor_id(struct pci_bus *, int, u32 *, int);
3097:	void pci_bus_release_busn_res(struct pci_bus *);
3076:	int pci_bus_update_busn_res_end(struct pci_bus *, int);
1644:	int pci_cfg_space_size(struct pci_dev *);
2029:	int pci_configure_extended_tags(struct pci_dev *, void *);
2987:	struct pci_bus *pci_create_root_bus(struct device *, int, struct pci_ops *, void *, struct list_head *);
2476:	void pci_device_add(struct pci_dev *, struct pci_bus *);
646:	void pci_free_host_bridge(struct pci_host_bridge *);
3016:	int pci_host_probe(struct pci_host_bridge *);
3290:	int pci_hp_add_bridge(struct pci_dev *);
3255:	void pci_lock_rescan_remove(void);
513:	void pci_read_bridge_bases(struct pci_bus *);
3237:	unsigned int pci_rescan_bus(struct pci_bus *);
3214:	unsigned int pci_rescan_bus_bridge_resize(struct pci_dev *);
1463:	int pci_scan_bridge(struct pci_bus *, struct pci_dev *, int, int);
3184:	struct pci_bus *pci_scan_bus(int, struct pci_ops *, void *);
2961:	unsigned int pci_scan_child_bus(struct pci_bus *);
3150:	struct pci_bus *pci_scan_root_bus(struct device *, int, struct pci_ops *, void *, struct list_head *);
3110:	int pci_scan_root_bus_bridge(struct pci_host_bridge *);
2527:	struct pci_dev *pci_scan_single_device(struct pci_bus *, int);
2608:	int pci_scan_slot(struct pci_bus *, int);
1793:	int pci_setup_device(struct pci_dev *);
3285:	void pci_sort_breadthfirst(void);
693:	const char *pci_speed_string(enum pci_bus_speed);
3261:	void pci_unlock_rescan_remove(void);
2979:	void pcibios_add_bus(struct pci_bus *);
2974:	int pcibios_root_bridge_prepare(struct pci_host_bridge *);
2769:	void pcie_bus_configure_settings(struct pci_bus *);
2081:	bool pcie_relaxed_ordering_enabled(struct pci_dev *);
2385:	void pcie_report_downtraining(struct pci_dev *);
730:	void pcie_update_link_speed(struct pci_bus *, u16);
1543:	void set_pcie_hotplug_bridge(struct pci_dev *);
1491:	void set_pcie_port_type(struct pci_dev *);
1769:	static void early_dump_pci_device(struct pci_dev *);
2547:	static unsigned int next_fn(struct pci_dev *, unsigned int, struct pci_bus *, struct pci_bus *);
546:	static struct pci_bus *pci_alloc_bus(struct pci_bus *);
1042:	static struct pci_bus *pci_alloc_child_bus(struct pci_bus *, struct pci_dev *, int);
1631:	static int pci_cfg_space_size_ext(struct pci_dev *);
2210:	static void pci_configure_device(struct pci_dev *);
2117:	static void pci_configure_ltr(struct pci_dev *);
1959:	static void pci_configure_mps(struct pci_dev *);
2404:	static void pci_init_capabilities(struct pci_dev *);
1725:	static void pci_msi_setup_pci_dev(struct pci_dev *);
321:	static void pci_read_bases(struct pci_dev *, unsigned int, int);
398:	static void pci_read_bridge_io(struct pci_bus *);
460:	static void pci_read_bridge_mmio_pref(struct pci_bus *);
347:	static void pci_read_bridge_windows(struct pci_dev *);
1473:	static void pci_read_irq(struct pci_dev *);
876:	static int pci_register_host_bridge(struct pci_host_bridge *);
2238:	static void pci_release_dev(struct device *);
568:	static void pci_release_host_bridge_dev(struct device *);
1218:	static int pci_scan_bridge_extend(struct pci_bus *, struct pci_dev *, int, unsigned int, int);
2820:	static unsigned int pci_scan_child_bus_extend(struct pci_bus *, unsigned int);
855:	static void pci_set_bus_msi_domain(struct pci_bus *);
767:	static void pci_set_bus_speed(struct pci_bus *);
3267:	static int pci_sort_bf_cmp(const struct device *, const struct device *);
104:	static int pcibus_class_init(void);
2740:	static int pcie_bus_configure_set(struct pci_dev *, void *);
2639:	static int pcie_find_smpss(struct pci_dev *, void *);
88:	static void release_pcibus_dev(struct device *);

File drivers/pci/proc.c:
405:	int pci_proc_attach_device(struct pci_dev *);
444:	int pci_proc_detach_bus(struct pci_bus *);
437:	int pci_proc_detach_device(struct pci_dev *);
450:	static int pci_proc_init(void);
340:	static void *pci_seq_next(struct seq_file *, void *, loff_t *);
328:	static void *pci_seq_start(struct seq_file *, loff_t *);
349:	static void pci_seq_stop(struct seq_file *, void *);
195:	static long proc_bus_pci_ioctl(struct file *, unsigned int, unsigned long);
22:	static loff_t proc_bus_pci_lseek(struct file *, loff_t, int);
244:	static int proc_bus_pci_mmap(struct file *, struct vm_area_struct *);
285:	static int proc_bus_pci_open(struct inode *, struct file *);
28:	static ssize_t proc_bus_pci_read(struct file *, char *, size_t, loff_t *);
300:	static int proc_bus_pci_release(struct inode *, struct file *);
112:	static ssize_t proc_bus_pci_write(struct file *, const char *, size_t, loff_t *);
357:	static int show_device(struct seq_file *, void *);

File drivers/pci/quirks.c:
4972:	int pci_dev_specific_acs_enabled(struct pci_dev *, u16);
5197:	int pci_dev_specific_disable_acs_redir(struct pci_dev *);
5176:	int pci_dev_specific_enable_acs(struct pci_dev *);
4062:	int pci_dev_specific_reset(struct pci_dev *, int);
100:	void pci_fixup_device(enum pci_fixup_pass, struct pci_dev *);
5515:	int pci_idt_bus_quirk(struct pci_bus *, int, u32 *, int);
2927:	static void __nv_msi_ht_cap_quirk(struct pci_dev *, int);
5809:	static void apex_pci_fixup_class(struct pci_dev *);
1674:	static void asus_hides_ac97_lpc(struct pci_dev *);
1397:	static void asus_hides_smbus_hostbridge(struct pci_dev *);
1530:	static void asus_hides_smbus_lpc(struct pci_dev *);
1604:	static void asus_hides_smbus_lpc_ich6(struct pci_dev *);
1594:	static void asus_hides_smbus_lpc_ich6_resume(struct pci_dev *);
1580:	static void asus_hides_smbus_lpc_ich6_resume_early(struct pci_dev *);
1565:	static void asus_hides_smbus_lpc_ich6_suspend(struct pci_dev *);
3963:	static int delay_250ms_after_flr(struct pci_dev *, int);
3391:	static void disable_igfx_irq(struct pci_dev *);
1938:	static int dmi_disable_ioapicreroute(const struct dmi_system_id *);
3272:	static void fixup_mpss_256(struct pci_dev *);
2392:	static void fixup_rev1_53c810(struct pci_dev *);
3256:	static void fixup_ti816x_class(struct pci_dev *);
2782:	static int ht_check_msi_mapping(struct pci_dev *);
2652:	static void ht_enable_msi_mapping(struct pci_dev *);
799:	static void ich6_lpc_acpi_gpio(struct pci_dev *);
3523:	static void mellanox_check_broken_intx_masking(struct pci_dev *);
2591:	static int msi_ht_cap_enabled(struct pci_dev *);
2868:	static void nv_ht_enable_msi_mapping(struct pci_dev *);
2978:	static void nv_msi_ht_cap_quirk_all(struct pci_dev *);
2985:	static void nv_msi_ht_cap_quirk_leaf(struct pci_dev *);
2760:	static void nvbridge_check_legacy_irq_routing(struct pci_dev *);
2682:	static void nvenet_msi_disable(struct pci_dev *);
5816:	static void nvidia_ion_ahci_fixup(struct pci_dev *);
3889:	static int nvme_disable_and_flr(struct pci_dev *, int);
155:	static int pci_apply_final_quirks(void);
5385:	static void pci_create_device_link(struct pci_dev *, unsigned int, unsigned int, unsigned int, unsigned int);
57:	static void pci_do_fixups(struct pci_dev *, struct pci_fixup *, struct pci_fixup *);
5780:	static void pci_fixup_no_d0_pme(struct pci_dev *);
5797:	static void pci_fixup_no_msi_no_pme(struct pci_dev *);
4669:	static int pci_quirk_al_acs(struct pci_dev *, u16);
4484:	static int pci_quirk_amd_sb_acs(struct pci_dev *, u16);
4529:	static int pci_quirk_cavium_acs(struct pci_dev *, u16);
5137:	static int pci_quirk_disable_intel_spt_pch_acs_redir(struct pci_dev *);
5088:	static int pci_quirk_enable_intel_pch_acs(struct pci_dev *);
5107:	static int pci_quirk_enable_intel_spt_pch_acs(struct pci_dev *);
5634:	static void pci_quirk_hisi_fixup_bar(struct pci_dev *);
5626:	static void pci_quirk_hisi_fixup_class(struct pci_dev *);
4629:	static int pci_quirk_intel_pch_acs(struct pci_dev *, u16);
4749:	static int pci_quirk_intel_spt_pch_acs(struct pci_dev *, u16);
4732:	static bool pci_quirk_intel_spt_pch_acs_match(struct pci_dev *);
4770:	static int pci_quirk_mf_endpoint_acs(struct pci_dev *, u16);
4786:	static int pci_quirk_rciep_acs(struct pci_dev *, u16);
4546:	static int pci_quirk_xgene_acs(struct pci_dev *, u16);
4562:	static int pci_quirk_zhaoxin_pcie_ports_acs(struct pci_dev *, u16);
662:	static void piix4_io_quirk(struct pci_dev *, const char *, unsigned int, unsigned int);
688:	static void piix4_mem_quirk(struct pci_dev *, const char *, unsigned int, unsigned int);
3094:	static void quirk_al_msi_disable(struct pci_dev *);
1794:	static void quirk_alder_ioapic(struct pci_dev *);
655:	static void quirk_ali7101_acpi(struct pci_dev *);
425:	static void quirk_alimagik(struct pci_dev *);
2573:	static void quirk_amd_780_apc_msi(struct pci_dev *);
1051:	static void quirk_amd_8131_mmrbc(struct pci_dev *);
5347:	static void quirk_amd_harvest_no_ats(struct pci_dev *);
1286:	static void quirk_amd_ide_mode(struct pci_dev *);
1026:	static void quirk_amd_ioapic(struct pci_dev *);
608:	static void quirk_amd_nl_class(struct pci_dev *);
1199:	static void quirk_amd_ordering(struct pci_dev *);
3693:	static void quirk_apple_poweroff_thunderbolt(struct pci_dev *);
588:	static void quirk_ati_exploding_mce(struct pci_dev *);
2496:	static void quirk_brcm_5719_limit_mrrs(struct pci_dev *);
4264:	static void quirk_bridge_cavm_thrx2_pcie_root(struct pci_dev *);
3456:	static void quirk_broken_intx_masking(struct pci_dev *);
1183:	static void quirk_cardbus_legacy(struct pci_dev *);
4427:	static void quirk_chelsio_T5_disable_root_port_attributes(struct pci_dev *);
454:	static void quirk_citrine(struct pci_dev *);
545:	static void quirk_cs5536_vsa(struct pci_dev *);
2541:	static void quirk_disable_all_msi(struct pci_dev *);
2156:	static void quirk_disable_amd_8111_boot_interrupt(struct pci_dev *);
2132:	static void quirk_disable_amd_813x_boot_interrupt(struct pci_dev *);
2342:	static void quirk_disable_aspm_l0s(struct pci_dev *);
2362:	static void quirk_disable_aspm_l0s_l1(struct pci_dev *);
2095:	static void quirk_disable_broadcom_boot_interrupt(struct pci_dev *);
2019:	static void quirk_disable_intel_boot_interrupt(struct pci_dev *);
2556:	static void quirk_disable_msi(struct pci_dev *);
1270:	static void quirk_disable_pxb(struct pci_dev *);
4407:	static void quirk_disable_root_port_attributes(struct pci_dev *);
4077:	static void quirk_dma_func0_alias(struct pci_dev *);
4091:	static void quirk_dma_func1_alias(struct pci_dev *);
1222:	static void quirk_dunord(struct pci_dev *);
2272:	static void quirk_e100_interrupt(struct pci_dev *);
1364:	static void quirk_eisa_bridge(struct pci_dev *);
2383:	static void quirk_enable_clear_retrain_link(struct pci_dev *);
474:	static void quirk_extend_bar_to_page(struct pci_dev *);
4176:	static void quirk_fixed_dma_alias(struct pci_dev *);
5370:	static void quirk_fsl_no_msi(struct pci_dev *);
5418:	static void quirk_gpu_hda(struct pci_dev *);
5433:	static void quirk_gpu_usb(struct pci_dev *);
5449:	static void quirk_gpu_usb_typec_ucsi(struct pci_dev *);
3110:	static void quirk_hotplug_bridge(struct pci_dev *);
1829:	static void quirk_huawei_pcie_sva(struct pci_dev *);
767:	static void quirk_ich4_lpc_acpi(struct pci_dev *);
846:	static void quirk_ich6_lpc(struct pci_dev *);
883:	static void quirk_ich7_lpc(struct pci_dev *);
1327:	static void quirk_ide_samemode(struct pci_dev *);
3292:	static void quirk_intel_mc_errata(struct pci_dev *);
3358:	static void quirk_intel_ntb(struct pci_dev *);
1875:	static void quirk_intel_pcie_pm(struct pci_dev *);
5225:	static void quirk_intel_qat_vf_cap(struct pci_dev *);
509:	static void quirk_io(struct pci_dev *, int, unsigned int, const char *);
559:	static void quirk_io_region(struct pci_dev *, int, unsigned int, int, const char *);
254:	static void quirk_isa_dma_hangs(struct pci_dev *);
1781:	static void quirk_jmicron_async_suspend(struct pci_dev *);
1707:	static void quirk_jmicron_ata(struct pci_dev *);
1250:	static void quirk_mediagx_master(struct pci_dev *);
214:	static void quirk_mellanox_tavor(struct pci_dev *);
4221:	static void quirk_mic_x200_dma_alias(struct pci_dev *);
202:	static void quirk_mmio_always_on(struct pci_dev *);
2614:	static void quirk_msi_ht_cap(struct pci_dev *);
2997:	static void quirk_msi_intx_disable_ati_bug(struct pci_dev *);
2992:	static void quirk_msi_intx_disable_bug(struct pci_dev *);
3016:	static void quirk_msi_intx_disable_qca_bug(struct pci_dev *);
436:	static void quirk_natoma(struct pci_dev *);
2235:	static void quirk_netmos(struct pci_dev *);
464:	static void quirk_nfp6000(struct pci_dev *);
1343:	static void quirk_no_ata_d3(struct pci_dev *);
3585:	static void quirk_no_bus_reset(struct pci_dev *);
5321:	static void quirk_no_ext_tags(struct pci_dev *);
5311:	static void quirk_no_flr(struct pci_dev *);
3633:	static void quirk_no_pm_reset(struct pci_dev *);
304:	static void quirk_nopciamd(struct pci_dev *);
294:	static void quirk_nopcipci(struct pci_dev *);
2628:	static void quirk_nvidia_ck804_msi_ht_cap(struct pci_dev *);
2428:	static void quirk_nvidia_ck804_pcie_aer_ext_cap(struct pci_dev *);
5464:	static void quirk_nvidia_hda(struct pci_dev *);
3594:	static void quirk_nvidia_no_bus_reset(struct pci_dev *);
2410:	static void quirk_p64h2_1k_io(struct pci_dev *);
225:	static void quirk_passive_release(struct pci_dev *);
1819:	static void quirk_pcie_mch(struct pci_dev *);
1860:	static void quirk_pcie_pxh(struct pci_dev *);
4244:	static void quirk_pex_vca_alias(struct pci_dev *);
720:	static void quirk_piix4_acpi(struct pci_dev *);
5709:	static void quirk_plx_ntb_dma_alias(struct pci_dev *);
2203:	static void quirk_plx_pci9050(struct pci_dev *);
1912:	static void quirk_radeon_pm(struct pci_dev *);
4300:	static void quirk_relaxedordering_disable(struct pci_dev *);
3420:	static void quirk_remove_d3hot_delay(struct pci_dev *);
1967:	static void quirk_reroute_to_boot_interrupts_intel(struct pci_dev *);
5734:	static void quirk_reset_lenovo_thinkpad_p50_nvgpu(struct pci_dev *);
1929:	static void quirk_ryzen_xhci_d3hot(struct pci_dev *);
496:	static void quirk_s3_64M(struct pci_dev *);
1644:	static void quirk_sis_503(struct pci_dev *);
1616:	static void quirk_sis_96x_smbus(struct pci_dev *);
1313:	static void quirk_svwks_csb5ide(struct pci_dev *);
5552:	static void quirk_switchtec_ntb_dma_alias(struct pci_dev *);
627:	static void quirk_synopsys_haps(struct pci_dev *);
2182:	static void quirk_tc86c001_ide(struct pci_dev *);
3659:	static void quirk_thunderbolt_hotplug_msi(struct pci_dev *);
277:	static void quirk_tigerpoint_bm_sts(struct pci_dev *);
1237:	static void quirk_transparent_bridge(struct pci_dev *);
317:	static void quirk_triton(struct pci_dev *);
4277:	static void quirk_tw686x_class(struct pci_dev *);
2519:	static void quirk_unhide_mch_dev6(struct pci_dev *);
4195:	static void quirk_use_pcie_bridge_dma_alias(struct pci_dev *);
1068:	static void quirk_via_acpi(struct pci_dev *);
1084:	static void quirk_via_bridge(struct pci_dev *);
2444:	static void quirk_via_cx700_pci_parking_caching(struct pci_dev *);
979:	static void quirk_via_ioapic(struct pci_dev *);
1132:	static void quirk_via_vlink(struct pci_dev *);
1003:	static void quirk_via_vt8237_bypass_apic_deassert(struct pci_dev *);
402:	static void quirk_viaetbf(struct pci_dev *);
339:	static void quirk_vialatency(struct pci_dev *);
411:	static void quirk_vsfx(struct pci_dev *);
942:	static void quirk_vt8235_acpi(struct pci_dev *);
912:	static void quirk_vt82c586_acpi(struct pci_dev *);
1170:	static void quirk_vt82c598_id(struct pci_dev *);
926:	static void quirk_vt82c686_acpi(struct pci_dev *);
953:	static void quirk_xio2000a(struct pci_dev *);
3811:	static int reset_chelsio_generic_dev(struct pci_dev *, int);
3986:	static int reset_hinic_vf_dev(struct pci_dev *, int);
3746:	static int reset_intel_82599_sfp_virtfn(struct pci_dev *, int);
3768:	static int reset_ivb_igd(struct pci_dev *, int);
3174:	static void ricoh_mmc_fixup_r5c832(struct pci_dev *);
3142:	static void ricoh_mmc_fixup_rl5c476(struct pci_dev *);
3245:	static void vtd_mask_spec_errors(struct pci_dev *);

File drivers/pci/remove.c:
47:	void pci_remove_bus(struct pci_bus *);
147:	void pci_remove_root_bus(struct pci_bus *);
114:	void pci_stop_and_remove_bus_device(struct pci_dev *);
121:	void pci_stop_and_remove_bus_device_locked(struct pci_dev *);
129:	void pci_stop_root_bus(struct pci_bus *);
85:	static void pci_remove_bus_device(struct pci_dev *);
65:	static void pci_stop_bus_device(struct pci_dev *);

File drivers/pci/rom.c:
58:	void pci_disable_rom(struct pci_dev *);
24:	int pci_enable_rom(struct pci_dev *);
136:	void *pci_map_rom(struct pci_dev *, size_t *);
187:	void pci_unmap_rom(struct pci_dev *, void *);
83:	static size_t pci_get_rom_size(struct pci_dev *, void *, size_t);

File drivers/pci/search.c:
380:	int pci_dev_present(const struct pci_device_id *);
141:	struct pci_bus *pci_find_bus(int, int);
166:	struct pci_bus *pci_find_next_bus(const struct pci_bus *);
28:	int pci_for_each_dma_alias(struct pci_dev *, int (*)(struct pci_dev *, u16, void *), void *);
354:	struct pci_dev *pci_get_class(unsigned int, struct pci_dev *);
333:	struct pci_dev *pci_get_device(unsigned int, unsigned int, struct pci_dev *);
230:	struct pci_dev *pci_get_domain_bus_and_slot(int, unsigned int, unsigned int);
195:	struct pci_dev *pci_get_slot(struct pci_bus *, unsigned int);
304:	struct pci_dev *pci_get_subsys(unsigned int, unsigned int, unsigned int, unsigned int, struct pci_dev *);
244:	static int match_pci_dev_by_id(struct device *, const void *);
116:	static struct pci_bus *pci_do_find_bus(struct pci_bus *, unsigned char);
270:	static struct pci_dev *pci_get_dev_by_id(const struct pci_device_id *, struct pci_dev *);

File drivers/pci/setup-bus.c:
1379:	void __pci_bus_assign_resources(const struct pci_bus *, struct list_head *, struct list_head *);
1203:	void __pci_bus_size_bridges(struct pci_bus *, struct list_head *);
2050:	void pci_assign_unassigned_bridge_resources(struct pci_dev *);
2228:	void pci_assign_unassigned_bus_resources(struct pci_bus *);
1848:	void pci_assign_unassigned_resources(void);
1753:	void pci_assign_unassigned_root_bus_resources(struct pci_bus *);
1415:	void pci_bus_assign_resources(const struct pci_bus *);
1481:	void pci_bus_claim_resources(struct pci_bus *);
1332:	void pci_bus_size_bridges(struct pci_bus *);
1101:	unsigned long pci_cardbus_resource_alignment(struct resource *);
698:	int pci_claim_bridge_resource(struct pci_dev *, int);
1685:	void pci_realloc_get_opt(char *);
2124:	int pci_reassign_bridge_resources(struct pci_dev *, unsigned long);
688:	void pci_setup_bridge(struct pci_bus *);
506:	void pci_setup_cardbus(struct pci_bus *);
684:	void pcibios_setup_bridge(struct pci_bus *, unsigned long);
834:	resource_size_t pcibios_window_alignment(struct pci_bus *, unsigned long);
345:	static void __assign_resources_sorted(struct list_head *, struct list_head *, struct list_head *);
178:	static void __dev_sort_resources(struct pci_dev *, struct list_head *);
1488:	static void __pci_bridge_assign_resources(const struct pci_dev *, struct list_head *, struct list_head *);
665:	static void __pci_setup_bridge(struct pci_bus *, unsigned long);
60:	static int add_to_list(struct list_head *, struct pci_dev *, struct resource *, resource_size_t, resource_size_t);
1861:	static void adjust_bridge_window(struct pci_dev *, struct resource *, struct list_head *, resource_size_t);
1338:	static void assign_fixed_resource_on_bus(struct pci_bus *, struct resource *);
275:	static void assign_requested_resources_sorted(struct list_head *, struct list_head *);
771:	static struct resource *find_bus_resource_of_type(struct pci_bus *, unsigned long, unsigned long);
42:	static void free_list(struct list_head *);
878:	static void pbus_size_io(struct pci_bus *, resource_size_t, resource_size_t, struct list_head *);
989:	static int pbus_size_mem(struct pci_bus *, unsigned long, unsigned long, unsigned long, unsigned long, resource_size_t, resource_size_t, struct list_head *);
2031:	static void pci_bridge_distribute_available_resources(struct pci_dev *, struct list_head *);
1449:	static void pci_bus_allocate_dev_resources(struct pci_bus *);
1463:	static void pci_bus_allocate_resources(struct pci_bus *);
1887:	static void pci_bus_distribute_available_resources(struct pci_bus *, struct list_head *, struct resource, struct resource, struct resource, struct resource, struct resource, struct resource);
1636:	static void pci_bus_dump_resources(struct pci_bus *);
1653:	static int pci_bus_get_depth(struct pci_bus *);
1591:	static void pci_bus_release_bridge_resources(struct pci_bus *, unsigned long, enum release_type);
1110:	static void pci_bus_size_cardbus(struct list_head *, struct pci_bus *, struct pci_bus *);
574:	static void pci_setup_bridge_io(struct pci_dev *);
611:	static void pci_setup_bridge_mmio(struct pci_dev *);
630:	static void pci_setup_bridge_mmio_pref(struct pci_dev *);
129:	static void pdev_sort_resources(struct pci_dev *, struct list_head *);
215:	static void reassign_resources_sorted(struct list_head *, struct list_head *);
83:	static void remove_from_list(struct list_head *, struct resource *);

File drivers/pci/setup-irq.c:
19:	void pci_assign_irq(struct pci_dev *);

File drivers/pci/setup-res.c:
310:	int pci_assign_resource(struct pci_dev *, int);
131:	int pci_claim_resource(struct pci_dev *, int);
170:	void pci_disable_bridge_window(struct pci_dev *);
463:	int pci_enable_resources(struct pci_dev *, int);
355:	int pci_reassign_resource(struct pci_dev *, int, resource_size_t, resource_size_t);
394:	void pci_release_resource(struct pci_dev *, int);
410:	int pci_resize_resource(struct pci_dev *, int, int);
121:	void pci_update_resource(struct pci_dev *, int);
238:	resource_size_t pcibios_align_resource(void *, const struct resource *, resource_size_t, resource_size_t);
190:	resource_size_t pcibios_retrieve_fw_addr(struct pci_dev *, int);
246:	static int __pci_assign_resource(struct pci_bus *, struct pci_dev *, int, resource_size_t, resource_size_t);
195:	static int pci_revert_fw_address(struct resource *, struct pci_dev *, int, resource_size_t);
25:	static void pci_std_update_resource(struct pci_dev *, int);

File drivers/pci/slot.c:
225:	struct pci_slot *pci_create_slot(struct pci_bus *, int, const char *, struct hotplug_slot *);
312:	void pci_destroy_slot(struct pci_slot *);
162:	void pci_dev_assign_slot(struct pci_dev *);
332:	void pci_hp_create_module_link(struct pci_slot *);
358:	void pci_hp_remove_module_link(struct pci_slot *);
39:	static ssize_t address_read_file(struct pci_slot *, char *);
62:	static ssize_t cur_speed_read_file(struct pci_slot *, char *);
106:	static char *make_slot_name(const char *);
57:	static ssize_t max_speed_read_file(struct pci_slot *, char *);
18:	static ssize_t pci_slot_attr_show(struct kobject *, struct attribute *, char *);
26:	static ssize_t pci_slot_attr_store(struct kobject *, struct attribute *, const char *, size_t);
365:	static int pci_slot_init(void);
67:	static void pci_slot_release(struct kobject *);

File drivers/pci/vc.c:
413:	void pci_allocate_vc_save_buffers(struct pci_dev *);
389:	void pci_restore_vc_state(struct pci_dev *);
352:	int pci_save_vc_state(struct pci_dev *);
184:	static int pci_vc_do_save_buffer(struct pci_dev *, int, struct pci_cap_saved_state *, bool);
103:	static void pci_vc_enable(struct pci_dev *, int, int);

File drivers/pci/vpd.c:
40:	ssize_t pci_read_vpd(struct pci_dev *, loff_t, size_t, void *);
68:	int pci_set_vpd_size(struct pci_dev *, size_t);
502:	int pci_vpd_find_info_keyword(const u8 *, unsigned int, unsigned int, const char *);
467:	int pci_vpd_find_tag(const u8 *, unsigned int, unsigned int, u8);
369:	int pci_vpd_init(struct pci_dev *);
395:	void pci_vpd_release(struct pci_dev *);
55:	ssize_t pci_write_vpd(struct pci_dev *, loff_t, size_t, const void *);
432:	void pcie_vpd_create_sysfs_dev_files(struct pci_dev *);
459:	void pcie_vpd_remove_sysfs_dev_files(struct pci_dev *);
319:	static ssize_t pci_vpd_f0_read(struct pci_dev *, loff_t, size_t, void *);
349:	static int pci_vpd_f0_set_size(struct pci_dev *, size_t);
334:	static ssize_t pci_vpd_f0_write(struct pci_dev *, loff_t, size_t, const void *);
175:	static ssize_t pci_vpd_read(struct pci_dev *, loff_t, size_t, void *);
300:	static int pci_vpd_set_size(struct pci_dev *, size_t);
83:	static size_t pci_vpd_size(struct pci_dev *, size_t);
138:	static int pci_vpd_wait(struct pci_dev *);
242:	static ssize_t pci_vpd_write(struct pci_dev *, loff_t, size_t, const void *);
553:	static void quirk_blacklist_vpd(struct pci_dev *);
591:	static void quirk_brcm_570x_limit_vpd(struct pci_dev *);
626:	static void quirk_chelsio_extend_vpd(struct pci_dev *);
526:	static void quirk_f0_vpd_link(struct pci_dev *);
400:	static ssize_t read_vpd_attr(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t, size_t);
416:	static ssize_t write_vpd_attr(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t, size_t);

File drivers/pcmcia/cardbus.c:
66:	int cb_alloc(struct pcmcia_socket *);
105:	void cb_free(struct pcmcia_socket *);
29:	static void cardbus_config_irq_and_cls(struct pci_bus *, int);

File drivers/pcmcia/cs.c:
741:	int pccard_register_pcmcia(struct pcmcia_socket *, struct pcmcia_callback *);
73:	struct pcmcia_socket *pcmcia_get_socket(struct pcmcia_socket *);
232:	struct pcmcia_socket *pcmcia_get_socket_by_nr(unsigned int);
700:	void pcmcia_parse_events(struct pcmcia_socket *, u_int);
725:	void pcmcia_parse_uevents(struct pcmcia_socket *, u_int);
83:	void pcmcia_put_socket(struct pcmcia_socket *);
103:	int pcmcia_register_socket(struct pcmcia_socket *);
774:	int pcmcia_reset_card(struct pcmcia_socket *);
206:	void pcmcia_unregister_socket(struct pcmcia_socket *);
912:	static void exit_pcmcia_cs(void);
906:	static int init_pcmcia_cs(void);
592:	static int pccardd(void *);
90:	static void pcmcia_release_socket(struct device *);
829:	static void pcmcia_release_socket_class(struct class *);
865:	static void pcmcia_socket_dev_complete(struct device *);
860:	static int pcmcia_socket_dev_resume(struct device *);
855:	static int pcmcia_socket_dev_resume_noirq(struct device *);
850:	static int pcmcia_socket_dev_suspend_noirq(struct device *);
815:	static int pcmcia_socket_uevent(struct device *, struct kobj_uevent_env *);
470:	static int socket_early_resume(struct pcmcia_socket *);
410:	static int socket_insert(struct pcmcia_socket *);
483:	static int socket_late_resume(struct pcmcia_socket *);
557:	static void socket_remove(struct pcmcia_socket *);
249:	static int socket_reset(struct pcmcia_socket *);
332:	static int socket_setup(struct pcmcia_socket *, int);
285:	static void socket_shutdown(struct pcmcia_socket *);
450:	static int socket_suspend(struct pcmcia_socket *);

File drivers/pcmcia/rsrc_mgr.c:
30:	struct resource *pcmcia_make_resource(resource_size_t, resource_size_t, unsigned long, const char *);
20:	int static_init(struct pcmcia_socket *);
45:	static int static_find_io(struct pcmcia_socket *, unsigned int, unsigned int *, unsigned int, unsigned int, struct resource **);

File drivers/pcmcia/socket_sysfs.c:
220:	int pccard_sysfs_add_socket(struct device *);
225:	void pccard_sysfs_remove_socket(struct device *);
96:	static ssize_t pccard_show_card_pm_state(struct device *, struct device_attribute *, char *);
143:	static ssize_t pccard_show_irq_mask(struct device *, struct device_attribute *, char *);
176:	static ssize_t pccard_show_resource(struct device *, struct device_attribute *, char *);
33:	static ssize_t pccard_show_type(struct device *, struct device_attribute *, char *);
70:	static ssize_t pccard_show_vcc(struct device *, struct device_attribute *, char *);
46:	static ssize_t pccard_show_voltage(struct device *, struct device_attribute *, char *);
60:	static ssize_t pccard_show_vpp(struct device *, struct device_attribute *, char *);
104:	static ssize_t pccard_store_card_pm_state(struct device *, struct device_attribute *, const char *, size_t);
127:	static ssize_t pccard_store_eject(struct device *, struct device_attribute *, const char *, size_t);
81:	static ssize_t pccard_store_insert(struct device *, struct device_attribute *, const char *, size_t);
151:	static ssize_t pccard_store_irq_mask(struct device *, struct device_attribute *, const char *, size_t);
183:	static ssize_t pccard_store_resource(struct device *, struct device_attribute *, const char *, size_t);

File drivers/pinctrl/core.c:
1339:	struct pinctrl *devm_pinctrl_get(struct device *);
1374:	void devm_pinctrl_put(struct pinctrl *);
2227:	struct pinctrl_dev *devm_pinctrl_register(struct device *, struct pinctrl_desc *, void *);
2261:	int devm_pinctrl_register_and_init(struct device *, struct pinctrl_desc *, void *, struct pinctrl_dev **);
2291:	void devm_pinctrl_unregister(struct device *, struct pinctrl_dev *);
100:	struct pinctrl_dev *get_pinctrl_dev_from_devname(const char *);
122:	struct pinctrl_dev *get_pinctrl_dev_from_of_node(struct device_node *);
144:	int pin_get_from_name(struct pinctrl_dev *, const char *);
167:	const char *pin_get_name(struct pinctrl_dev *, const unsigned int);
403:	void pinctrl_add_gpio_range(struct pinctrl_dev *, struct pinctrl_gpio_range *);
412:	void pinctrl_add_gpio_ranges(struct pinctrl_dev *, struct pinctrl_gpio_range *, unsigned int);
81:	const char *pinctrl_dev_get_devname(struct pinctrl_dev *);
87:	void *pinctrl_dev_get_drvdata(struct pinctrl_dev *);
74:	const char *pinctrl_dev_get_name(struct pinctrl_dev *);
2072:	int pinctrl_enable(struct pinctrl_dev *);
423:	struct pinctrl_dev *pinctrl_find_and_add_gpio_range(const char *, struct pinctrl_gpio_range *);
491:	struct pinctrl_gpio_range *pinctrl_find_gpio_range_from_pin(struct pinctrl_dev *, unsigned int);
462:	struct pinctrl_gpio_range *pinctrl_find_gpio_range_from_pin_nolock(struct pinctrl_dev *, unsigned int);
1491:	int pinctrl_force_default(struct pinctrl_dev *);
1479:	int pinctrl_force_sleep(struct pinctrl_dev *);
1114:	struct pinctrl *pinctrl_get(struct device *);
444:	int pinctrl_get_group_pins(struct pinctrl_dev *, const char *, const unsigned int **, unsigned int *);
714:	int pinctrl_get_group_selector(struct pinctrl_dev *, const char *);
741:	bool pinctrl_gpio_can_use_line(unsigned int);
865:	int pinctrl_gpio_direction_input(unsigned int);
879:	int pinctrl_gpio_direction_output(unsigned int);
812:	void pinctrl_gpio_free(unsigned int);
777:	int pinctrl_gpio_request(unsigned int);
894:	int pinctrl_gpio_set_config(unsigned int, unsigned long);
1507:	int pinctrl_init_done(struct device *);
1205:	struct pinctrl_state *pinctrl_lookup_state(struct pinctrl *, const char *);
1565:	int pinctrl_pm_select_default_state(struct device *);
1588:	int pinctrl_pm_select_idle_state(struct device *);
1575:	int pinctrl_pm_select_sleep_state(struct device *);
69:	void pinctrl_provide_dummies(void);
1194:	void pinctrl_put(struct pinctrl *);
2109:	struct pinctrl_dev *pinctrl_register(struct pinctrl_desc *, struct device *, void *);
2137:	int pinctrl_register_and_init(struct pinctrl_desc *, struct device *, void *, struct pinctrl_dev **);
1388:	int pinctrl_register_mappings(const struct pinctrl_map *, unsigned int);
509:	void pinctrl_remove_gpio_range(struct pinctrl_dev *, struct pinctrl_gpio_range *);
1550:	int pinctrl_select_default_state(struct device *);
1318:	int pinctrl_select_state(struct pinctrl *, struct pinctrl_state *);
2165:	void pinctrl_unregister(struct pinctrl_dev *);
1458:	void pinctrl_unregister_mappings(const struct pinctrl_map *);
943:	static int add_setting(struct pinctrl *, struct pinctrl_dev *, const struct pinctrl_map *);
1025:	static struct pinctrl *create_pinctrl(struct device *, struct pinctrl_dev *);
926:	static struct pinctrl_state *create_state(struct pinctrl *, const char *);
2206:	static int devm_pinctrl_dev_match(struct device *, void *, void *);
2199:	static void devm_pinctrl_dev_release(struct device *, void *);
1359:	static int devm_pinctrl_match(struct device *, void *, void *);
1327:	static void devm_pinctrl_release(struct device *, void *);
2034:	static int pinctrl_claim_hogs(struct pinctrl_dev *);
1239:	static int pinctrl_commit_state(struct pinctrl *, struct pinctrl_state *);
1764:	static int pinctrl_devices_open(struct inode *, struct file *);
1739:	static int pinctrl_devices_show(struct seq_file *, void *);
1155:	static void pinctrl_free(struct pinctrl *, bool);
183:	static void pinctrl_free_pindescs(struct pinctrl_dev *, const struct pinctrl_pin_desc *, unsigned int);
369:	static int pinctrl_get_device_gpio_range(unsigned int, struct pinctrl_dev **, struct pinctrl_gpio_range **);
834:	static int pinctrl_gpio_direction(unsigned int, bool);
1737:	static int pinctrl_gpioranges_open(struct inode *, struct file *);
1705:	static int pinctrl_gpioranges_show(struct seq_file *, void *);
1703:	static int pinctrl_groups_open(struct inode *, struct file *);
1659:	static int pinctrl_groups_show(struct seq_file *, void *);
2298:	static int pinctrl_init(void);
1964:	static struct pinctrl_dev *pinctrl_init_controller(struct pinctrl_desc *, struct device *, void *);
1912:	static void pinctrl_init_debugfs(void);
1868:	static void pinctrl_init_device_debugfs(struct pinctrl_dev *);
1818:	static int pinctrl_maps_open(struct inode *, struct file *);
1782:	static int pinctrl_maps_show(struct seq_file *, void *);
1864:	static int pinctrl_open(struct inode *, struct file *);
1657:	static int pinctrl_pins_open(struct inode *, struct file *);
1600:	static int pinctrl_pins_show(struct seq_file *, void *);
323:	static bool pinctrl_ready_for_gpio_range(unsigned int);
204:	static int pinctrl_register_one_pin(struct pinctrl_dev *, const struct pinctrl_pin_desc *);
1820:	static int pinctrl_show(struct seq_file *, void *);

File drivers/pinctrl/intel/pinctrl-baytrail.c:
632:	static int byt_get_function_groups(struct pinctrl_dev *, unsigned int, const char * const **, unsigned int *);
624:	static const char *byt_get_function_name(struct pinctrl_dev *, unsigned int);
617:	static int byt_get_functions_count(struct pinctrl_dev *);
722:	static u32 byt_get_gpio_mux(unsigned int, struct intel_pinctrl *, struct intel_pinctrl *);
590:	static const char *byt_get_group_name(struct pinctrl_dev *, unsigned int);
598:	static int byt_get_group_pins(struct pinctrl_dev *, unsigned int, const unsigned int **, unsigned int *);
583:	static int byt_get_groups_count(struct pinctrl_dev *);
1537:	static int byt_gpio_add_pin_ranges(struct gpio_chip *);
1229:	static void byt_gpio_dbg_show(struct seq_file *, struct gpio_chip *);
1180:	static int byt_gpio_direction_input(struct gpio_chip *, unsigned int);
1204:	static int byt_gpio_direction_output(struct gpio_chip *, unsigned int, int);
793:	static void byt_gpio_disable_free(struct pinctrl_dev *, struct pinctrl_gpio_range *, unsigned int);
1125:	static int byt_gpio_get(struct gpio_chip *, unsigned int);
1158:	static int byt_gpio_get_direction(struct gpio_chip *, unsigned int);
1796:	static int byt_gpio_init(void);
1439:	static void byt_gpio_irq_handler(struct irq_desc *);
1507:	static int byt_gpio_irq_init_hw(struct gpio_chip *);
1550:	static int byt_gpio_probe(struct intel_pinctrl *);
558:	static void *byt_gpio_reg(unsigned int, int, struct intel_pinctrl *, struct intel_pinctrl *);
756:	static int byt_gpio_request_enable(struct pinctrl_dev *, struct pinctrl_gpio_range *, unsigned int);
1718:	static int byt_gpio_resume(struct device *);
1769:	static int byt_gpio_runtime_suspend(struct device *);
1139:	static void byt_gpio_set(struct gpio_chip *, unsigned int, int);
818:	static int byt_gpio_set_direction(struct pinctrl_dev *, struct pinctrl_gpio_range *, unsigned int, bool);
1686:	static int byt_gpio_suspend(struct device *);
1471:	static void byt_init_irq_valid_mask(struct gpio_chip *, unsigned long *, unsigned int);
1338:	static void byt_irq_ack(struct irq_data *);
1354:	static void byt_irq_mask(struct irq_data *);
1401:	static int byt_irq_type(struct irq_data *, unsigned int);
1362:	static void byt_irq_unmask(struct irq_data *);
896:	static int byt_pin_config_get(struct pinctrl_dev *, unsigned int, unsigned long *);
979:	static int byt_pin_config_set(struct pinctrl_dev *, unsigned int, unsigned long *, unsigned int);
1642:	static int byt_pinctrl_probe(struct platform_device *);
645:	static void byt_set_group_simple_mux(struct intel_pinctrl *, unsigned int, const struct intel_pingroup, const struct intel_pingroup);
705:	static int byt_set_mux(struct pinctrl_dev *, unsigned int, unsigned int);
1609:	static int byt_set_soc_data(struct intel_pinctrl *, const struct intel_pinctrl_soc_data *);

File drivers/pinctrl/intel/pinctrl-intel.c:
1544:	const struct intel_pinctrl_soc_data *intel_pinctrl_get_soc_data(struct platform_device *);
1520:	int intel_pinctrl_probe_by_hid(struct platform_device *);
1532:	int intel_pinctrl_probe_by_uid(struct platform_device *);
1728:	int intel_pinctrl_resume_noirq(struct device *);
1598:	int intel_pinctrl_suspend_noirq(struct device *);
624:	static int intel_config_get(struct pinctrl_dev *, unsigned int, unsigned long *);
797:	static int intel_config_set(struct pinctrl_dev *, unsigned int, unsigned long *, unsigned int);
752:	static int intel_config_set_debounce(struct intel_pinctrl *, unsigned int, unsigned int);
358:	static int intel_get_function_groups(struct pinctrl_dev *, unsigned int, const char * const **, unsigned int * const);
350:	static const char *intel_get_function_name(struct pinctrl_dev *, unsigned int);
343:	static int intel_get_functions_count(struct pinctrl_dev *);
267:	static const char *intel_get_group_name(struct pinctrl_dev *, unsigned int);
275:	static int intel_get_group_pins(struct pinctrl_dev *, unsigned int, const unsigned int **, unsigned int *);
260:	static int intel_get_groups_count(struct pinctrl_dev *);
124:	static void *intel_get_padcfg(struct intel_pinctrl *, unsigned int, unsigned int);
1231:	static int intel_gpio_add_pin_ranges(struct gpio_chip *);
1156:	static int intel_gpio_community_irq_handler(struct intel_pinctrl *, const struct intel_community *);
989:	static int intel_gpio_direction_input(struct gpio_chip *, unsigned int);
994:	static int intel_gpio_direction_output(struct gpio_chip *, unsigned int, int);
912:	static int intel_gpio_get(struct gpio_chip *, unsigned int);
961:	static int intel_gpio_get_direction(struct gpio_chip *, unsigned int);
1194:	static irqreturn_t intel_gpio_irq(int, void *);
1013:	static void intel_gpio_irq_ack(struct irq_data *);
1071:	static void intel_gpio_irq_mask(struct irq_data *);
1035:	static void intel_gpio_irq_mask_unmask(struct irq_data *, bool);
1081:	static int intel_gpio_irq_type(struct irq_data *, unsigned int);
1076:	static void intel_gpio_irq_unmask(struct irq_data *);
1141:	static int intel_gpio_irq_wake(struct irq_data *, unsigned int);
1271:	static int intel_gpio_probe(struct intel_pinctrl *, int);
455:	static int intel_gpio_request_enable(struct pinctrl_dev *, struct pinctrl_gpio_range *, unsigned int);
934:	static void intel_gpio_set(struct gpio_chip *, unsigned int, int);
498:	static int intel_gpio_set_direction(struct pinctrl_dev *, struct pinctrl_gpio_range *, unsigned int, bool);
855:	static int intel_gpio_to_pin(unsigned int, const struct intel_community **, const struct intel_padgroup **, struct intel_pinctrl *, struct intel_pinctrl *);
169:	static bool intel_pad_acpi_mode(struct intel_pinctrl *, unsigned int);
212:	static int intel_pad_locked(struct intel_pinctrl *, unsigned int);
144:	static bool intel_pad_owned_by_host(struct intel_pinctrl *, unsigned int);
285:	static void intel_pin_dbg_show(struct pinctrl_dev *, struct seq_file *, unsigned int);
1324:	static int intel_pinctrl_add_padgroups(struct intel_community *, struct intel_pinctrl *, struct intel_pinctrl *);
1387:	static int intel_pinctrl_pm_init(struct intel_pinctrl *);
1431:	static int intel_pinctrl_probe(struct platform_device *, const struct intel_pinctrl_soc_data *);
1578:	static bool intel_pinctrl_should_save(struct intel_pinctrl *, unsigned int);
370:	static int intel_pinmux_set_mux(struct pinctrl_dev *, unsigned int, unsigned int);
1677:	static void intel_restore_hostown(struct intel_pinctrl *, unsigned int, void *, unsigned int, u32);
1710:	static void intel_restore_padcfg(struct intel_pinctrl *, unsigned int, unsigned int, u32);

File drivers/pinctrl/pinconf-generic.c:
130:	void pinconf_generic_dump_config(struct pinctrl_dev *, struct seq_file *, unsigned long);
109:	void pinconf_generic_dump_pins(struct pinctrl_dev *, struct seq_file *, const char *, unsigned int);
55:	static void pinconf_generic_dump_one(struct pinctrl_dev *, struct seq_file *, const char *, unsigned int, const struct pin_config_item *, int, int *);

File drivers/pinctrl/pinconf.c:
56:	int pin_config_get_for_pin(struct pinctrl_dev *, unsigned int, unsigned long *);
70:	int pin_config_group_get(const char *, const char *, unsigned long *);
148:	int pinconf_apply_setting(const struct pinctrl_setting *);
25:	int pinconf_check_ops(struct pinctrl_dev *);
144:	void pinconf_free_setting(const struct pinctrl_setting *);
370:	void pinconf_init_device_debugfs(struct dentry *, struct pinctrl_dev *);
107:	int pinconf_map_to_setting(const struct pinctrl_map *, struct pinctrl_setting *);
200:	int pinconf_set_config(struct pinctrl_dev *, unsigned int, unsigned long *, size_t);
236:	void pinconf_show_map(struct seq_file *, const struct pinctrl_map *);
259:	void pinconf_show_setting(struct seq_file *, const struct pinctrl_setting *);
38:	int pinconf_validate_map(const struct pinctrl_map *, int);
368:	static int pinconf_groups_open(struct inode *, struct file *);
345:	static int pinconf_groups_show(struct seq_file *, void *);
367:	static int pinconf_pins_open(struct inode *, struct file *);
302:	static int pinconf_pins_show(struct seq_file *, void *);
214:	static void pinconf_show_config(struct seq_file *, struct pinctrl_dev *, unsigned long *, unsigned int);

File drivers/pinctrl/pinctrl-utils.c:
99:	int pinctrl_utils_add_config(struct pinctrl_dev *, unsigned long **, unsigned int *, unsigned long);
73:	int pinctrl_utils_add_map_configs(struct pinctrl_dev *, struct pinctrl_map **, unsigned int *, unsigned int *, const char *, unsigned long *, unsigned int, enum pinctrl_map_type);
56:	int pinctrl_utils_add_map_mux(struct pinctrl_dev *, struct pinctrl_map **, unsigned int *, unsigned int *, const char *, const char *);
123:	void pinctrl_utils_free_map(struct pinctrl_dev *, struct pinctrl_map *, unsigned int);
31:	int pinctrl_utils_reserve_map(struct pinctrl_dev *, struct pinctrl_map **, unsigned int *, unsigned int *, unsigned int);

File drivers/pinctrl/pinmux.c:
83:	bool pinmux_can_be_used_for_gpio(struct pinctrl_dev *, unsigned int);
31:	int pinmux_check_ops(struct pinctrl_dev *);
485:	void pinmux_disable_setting(const struct pinctrl_setting *);
404:	int pinmux_enable_setting(const struct pinctrl_setting *);
286:	void pinmux_free_gpio(struct pinctrl_dev *, unsigned int, struct pinctrl_gpio_range *);
399:	void pinmux_free_setting(const struct pinctrl_setting *);
302:	int pinmux_gpio_direction(struct pinctrl_dev *, struct pinctrl_gpio_range *, unsigned int, bool);
676:	void pinmux_init_device_debugfs(struct dentry *, struct pinctrl_dev *);
339:	int pinmux_map_to_setting(const struct pinctrl_map *, struct pinctrl_setting *);
261:	int pinmux_request_gpio(struct pinctrl_dev *, struct pinctrl_gpio_range *, unsigned int, unsigned int);
652:	void pinmux_show_map(struct seq_file *, const struct pinctrl_map *);
659:	void pinmux_show_setting(struct seq_file *, const struct pinctrl_setting *);
62:	int pinmux_validate_map(const struct pinctrl_map *, int);
206:	static const char *pin_free(struct pinctrl_dev *, int, struct pinctrl_gpio_range *);
107:	static int pin_request(struct pinctrl_dev *, int, const char *, struct pinctrl_gpio_range *);
673:	static int pinmux_functions_open(struct inode *, struct file *);
538:	static int pinmux_functions_show(struct seq_file *, void *);
674:	static int pinmux_pins_open(struct inode *, struct file *);
580:	static int pinmux_pins_show(struct seq_file *, void *);

File drivers/platform/x86/intel_turbo_max_3.c:
35:	static int get_oc_core_priority(unsigned int);
90:	static int itmt_legacy_cpu_online(unsigned int);
122:	static int itmt_legacy_init(void);
83:	static void itmt_legacy_work_fn(struct work_struct *);

File drivers/platform/x86/pmc_atom.c:
213:	int pmc_atom_read(int, u32 *);
225:	int pmc_atom_write(int, u32);
510:	static int pmc_atom_init(void);
304:	static int pmc_dev_state_open(struct inode *, struct file *);
268:	static void pmc_dev_state_print(struct seq_file *, int, u32, const struct pmc_bit_map *, u32, const struct pmc_bit_map *);
283:	static int pmc_dev_state_show(struct seq_file *, void *);
237:	static void pmc_power_off(void);
321:	static int pmc_pss_state_open(struct inode *, struct file *);
306:	static int pmc_pss_state_show(struct seq_file *, void *);
427:	static int pmc_setup_clks(struct pci_dev *, void *, const struct pmc_data *);
458:	static int pmc_setup_dev(struct pci_dev *, const struct pci_device_id *, const struct pci_device_id *);
342:	static int pmc_sleep_tmr_open(struct inode *, struct file *);
323:	static int pmc_sleep_tmr_show(struct seq_file *, void *);

File drivers/pnp/card.c:
234:	int pnp_add_card(struct pnp_card *);
296:	int pnp_add_card_device(struct pnp_card *, struct pnp_dev *);
157:	struct pnp_card *pnp_alloc_card(struct pnp_protocol *, int, char *);
414:	int pnp_register_card_driver(struct pnp_card_driver *);
377:	void pnp_release_card_device(struct pnp_dev *);
276:	void pnp_remove_card(struct pnp_card *);
313:	void pnp_remove_card_device(struct pnp_dev *);
328:	struct pnp_dev *pnp_request_card_device(struct pnp_card_link *, const char *, struct pnp_dev *);
447:	void pnp_unregister_card_driver(struct pnp_card_driver *);
71:	static int card_probe(struct pnp_card *, struct pnp_card_driver *);
53:	static void card_remove(struct pnp_dev *);
58:	static void card_remove_first(struct pnp_dev *);
399:	static int card_resume(struct pnp_dev *);
389:	static int card_suspend(struct pnp_dev *, pm_message_t);
107:	static struct pnp_id *pnp_add_card_id(struct pnp_card *, char *);
149:	static void pnp_release_card(struct device *);
196:	static ssize_t pnp_show_card_ids(struct device *, struct device_attribute *, char *);
184:	static ssize_t pnp_show_card_name(struct device *, struct device_attribute *, char *);

File drivers/pnp/core.c:
182:	int __pnp_add_device(struct pnp_dev *);
236:	void __pnp_remove_device(struct pnp_dev *);
212:	int pnp_add_device(struct pnp_dev *);
34:	void *pnp_alloc(long);
141:	struct pnp_dev *pnp_alloc_dev(struct pnp_protocol *, int, const char *);
116:	void pnp_free_resource(struct pnp_resource *);
122:	void pnp_free_resources(struct pnp_dev *);
59:	int pnp_register_protocol(struct pnp_protocol *);
97:	void pnp_unregister_protocol(struct pnp_protocol *);
174:	static void pnp_delist_device(struct pnp_dev *);
242:	static int pnp_init(void);
131:	static void pnp_release_device(struct device *);

File drivers/pnp/driver.c:
29:	int compare_pnp_id(struct pnp_id *, const char *);
285:	struct pnp_id *pnp_add_id(struct pnp_dev *, const char *);
60:	int pnp_device_attach(struct pnp_dev *);
72:	void pnp_device_detach(struct pnp_dev *);
267:	int pnp_register_driver(struct pnp_driver *);
275:	void pnp_unregister_driver(struct pnp_driver *);
162:	static int __pnp_bus_suspend(struct device *, pm_message_t);
200:	static int pnp_bus_freeze(struct device *);
152:	static int pnp_bus_match(struct device *, struct device_driver *);
205:	static int pnp_bus_poweroff(struct device *);
210:	static int pnp_bus_resume(struct device *);
195:	static int pnp_bus_suspend(struct device *);
80:	static int pnp_device_probe(struct device *);
124:	static int pnp_device_remove(struct device *);
143:	static void pnp_device_shutdown(struct device *);

File drivers/pnp/interface.c:
440:	static ssize_t id_show(struct device *, struct device_attribute *, char *);
207:	static ssize_t options_show(struct device *, struct device_attribute *, char *);
302:	static char *pnp_get_resource_value(char *, resource_size_t *, resource_size_t *, unsigned long *, unsigned long);
100:	static void pnp_print_dma(pnp_info_buffer_t *, char *, struct pnp_dma *);
67:	static void pnp_print_irq(pnp_info_buffer_t *, char *, struct pnp_irq *);
152:	static void pnp_print_mem(pnp_info_buffer_t *, char *, struct pnp_mem *);
36:	static int pnp_printf(pnp_info_buffer_t *, char *, ...);
247:	static ssize_t resources_show(struct device *, struct device_attribute *, char *);
335:	static ssize_t resources_store(struct device *, struct device_attribute *, const char *, size_t);

File drivers/pnp/manager.c:
381:	int pnp_activate_dev(struct pnp_dev *);
308:	int pnp_auto_config_dev(struct pnp_dev *);
406:	int pnp_disable_dev(struct pnp_dev *);
236:	void pnp_init_resources(struct pnp_dev *);
337:	int pnp_start_dev(struct pnp_dev *);
360:	int pnp_stop_dev(struct pnp_dev *);
191:	static int pnp_assign_dma(struct pnp_dev *, struct pnp_dma *, int);
132:	static int pnp_assign_irq(struct pnp_dev *, struct pnp_irq *, int);
81:	static int pnp_assign_mem(struct pnp_dev *, struct pnp_mem *, int);
38:	static int pnp_assign_port(struct pnp_dev *, struct pnp_port *, int);
256:	static int pnp_assign_resources(struct pnp_dev *, int);

File drivers/pnp/pnpacpi/core.c:
29:	static int ispnpidacpi(const char *);
209:	static int pnpacpi_add_device(struct acpi_device *);
286:	static acpi_status pnpacpi_add_device_handler(acpi_handle, u32, void *, void **);
116:	static bool pnpacpi_can_wakeup(struct pnp_dev *);
90:	static int pnpacpi_disable_resources(struct pnp_dev *);
43:	static int pnpacpi_get_resources(struct pnp_dev *);
300:	static int pnpacpi_init(void);
164:	static int pnpacpi_resume(struct pnp_dev *);
49:	static int pnpacpi_set_resources(struct pnp_dev *);
316:	static int pnpacpi_setup(char *);
128:	static int pnpacpi_suspend(struct pnp_dev *, pm_message_t);

File drivers/pnp/pnpacpi/rsparser.c:
621:	int pnpacpi_build_resource_template(struct pnp_dev *, struct acpi_buffer *);
876:	int pnpacpi_encode_resources(struct pnp_dev *, struct acpi_buffer *);
270:	int pnpacpi_parse_allocated_resource(struct pnp_dev *);
549:	int pnpacpi_parse_resource_option_data(struct pnp_dev *);
18:	static void decode_irq_flags(struct pnp_dev *, int, u8 *, u8 *, u8 *);
53:	static int dma_flags(struct pnp_dev *, int, int, int);
164:	static acpi_status pnpacpi_allocated_resource(struct acpi_resource *, void *);
595:	static acpi_status pnpacpi_count_resources(struct acpi_resource *, void *);
453:	static acpi_status pnpacpi_option_resource(struct acpi_resource *, void *);
402:	static void pnpacpi_parse_address_option(struct pnp_dev *, unsigned int, struct acpi_resource *);
151:	static void pnpacpi_parse_allocated_vendor(struct pnp_dev *, struct acpi_resource_vendor_typed *);
605:	static acpi_status pnpacpi_type_resources(struct acpi_resource *, void *);

File drivers/pnp/quirks.c:
452:	void pnp_fixup_device(struct pnp_dev *);
138:	static struct pnp_option *pnp_clone_dependent_set(struct pnp_dev *, unsigned int);
208:	static void quirk_ad1815_mpu_resources(struct pnp_dev *);
180:	static void quirk_add_irq_optional_dependent_sets(struct pnp_dev *);
304:	static void quirk_amd_mmconfig_area(struct pnp_dev *);
26:	static void quirk_awe32_add_ports(struct pnp_dev *, struct pnp_option *, unsigned int);
50:	static void quirk_awe32_resources(struct pnp_dev *);
69:	static void quirk_cmi8330_resources(struct pnp_dev *);
362:	static void quirk_intel_mch(struct pnp_dev *);
103:	static void quirk_sb16audio_resources(struct pnp_dev *);
229:	static void quirk_system_pci_resources(struct pnp_dev *);

File drivers/pnp/resource.c:
616:	struct pnp_resource *pnp_add_bus_resource(struct pnp_dev *, resource_size_t, resource_size_t);
547:	struct pnp_resource *pnp_add_dma_resource(struct pnp_dev *, int, int);
568:	struct pnp_resource *pnp_add_io_resource(struct pnp_dev *, resource_size_t, resource_size_t, int);
526:	struct pnp_resource *pnp_add_irq_resource(struct pnp_dev *, int, int);
592:	struct pnp_resource *pnp_add_mem_resource(struct pnp_dev *, resource_size_t, resource_size_t, int);
509:	struct pnp_resource *pnp_add_resource(struct pnp_dev *, struct resource *);
416:	int pnp_check_dma(struct pnp_dev *, struct resource *);
352:	int pnp_check_irq(struct pnp_dev *, struct resource *);
229:	int pnp_check_mem(struct pnp_dev *, struct resource *);
166:	int pnp_check_port(struct pnp_dev *, struct resource *);
143:	void pnp_free_options(struct pnp_dev *);
482:	struct resource *pnp_get_resource(struct pnp_dev *, unsigned long, unsigned int);
644:	int pnp_possible_config(struct pnp_dev *, int, resource_size_t, resource_size_t);
686:	int pnp_range_reserved(resource_size_t, resource_size_t);
79:	int pnp_register_dma_resource(struct pnp_dev *, unsigned int, unsigned char, unsigned char);
51:	int pnp_register_irq_resource(struct pnp_dev *, unsigned int, pnp_irq_mask_t *, unsigned char);
120:	int pnp_register_mem_resource(struct pnp_dev *, unsigned int, resource_size_t, resource_size_t, resource_size_t, resource_size_t, unsigned char);
97:	int pnp_register_port_resource(struct pnp_dev *, unsigned int, resource_size_t, resource_size_t, resource_size_t, resource_size_t, unsigned char);
475:	unsigned long pnp_resource_type(struct resource *);
35:	static struct pnp_option *pnp_build_option(struct pnp_dev *, unsigned long, unsigned int);
497:	static struct pnp_resource *pnp_new_resource(struct pnp_dev *);
718:	static int pnp_setup_reserve_dma(char *);
731:	static int pnp_setup_reserve_io(char *);
705:	static int pnp_setup_reserve_irq(char *);
744:	static int pnp_setup_reserve_mem(char *);
292:	static irqreturn_t pnp_test_handler(int, void *);

File drivers/pnp/support.c:
105:	void dbg_pnp_show_option(struct pnp_dev *, struct pnp_option *);
79:	void dbg_pnp_show_resources(struct pnp_dev *, char *);
40:	void pnp_eisa_id_to_string(u32, char *);
20:	int pnp_is_active(struct pnp_dev *);
92:	char *pnp_option_priority_name(struct pnp_option *);
62:	char *pnp_resource_type_name(struct resource *);

File drivers/pnp/system.c:
104:	static int pnp_system_init(void);
26:	static void reserve_range(struct pnp_dev *, struct resource *, int);
56:	static void reserve_resources_of_dev(struct pnp_dev *);
90:	static int system_pnp_probe(struct pnp_dev *, const struct pnp_device_id *);

File drivers/power/supply/power_supply_core.c:
1280:	struct power_supply *devm_power_supply_register(struct device *, const struct power_supply_desc *, const struct power_supply_config *);
1316:	struct power_supply *devm_power_supply_register_no_ws(struct device *, const struct power_supply_desc *, const struct power_supply_config *);
327:	int power_supply_am_i_supplied(struct power_supply *);
854:	int power_supply_batinfo_ocv2cap(struct power_supply_battery_info *, int, int);
114:	void power_supply_changed(struct power_supply *);
904:	void power_supply_external_power_changed(struct power_supply *);
827:	struct power_supply_battery_ocv_table *power_supply_find_ocv2cap_table(struct power_supply_battery_info *, int, int *);
565:	int power_supply_get_battery_info(struct power_supply *, struct power_supply_battery_info *);
451:	struct power_supply *power_supply_get_by_name(const char *);
1360:	void *power_supply_get_drvdata(struct power_supply *);
868:	int power_supply_get_property(struct power_supply *, enum power_supply_property, union power_supply_propval *);
359:	int power_supply_is_system_supplied(void);
802:	int power_supply_ocv2cap_simple(struct power_supply_battery_ocv_table *, int, int);
914:	int power_supply_powers(struct power_supply *, struct device *);
893:	int power_supply_property_is_writeable(struct power_supply *, enum power_supply_property);
473:	void power_supply_put(struct power_supply *);
735:	void power_supply_put_battery_info(struct power_supply *, struct power_supply_battery_info *);
927:	int power_supply_reg_notifier(struct notifier_block *);
1227:	struct power_supply *power_supply_register(struct device *, const struct power_supply_desc *, const struct power_supply_config *);
1250:	struct power_supply *power_supply_register_no_ws(struct device *, const struct power_supply_desc *, const struct power_supply_config *);
419:	int power_supply_set_battery_charged(struct power_supply *);
394:	int power_supply_set_input_current_limit_from_supplier(struct power_supply *);
882:	int power_supply_set_property(struct power_supply *, enum power_supply_property, const union power_supply_propval *);
764:	int power_supply_temp2resist_simple(struct power_supply_resistance_temp_table *, int, int);
933:	void power_supply_unreg_notifier(struct notifier_block *);
1344:	void power_supply_unregister(struct power_supply *);
311:	static int __power_supply_am_i_supplied(struct device *, void *);
63:	static int __power_supply_changed_work(struct device *, void *);
378:	static int __power_supply_get_supplier_max_current(struct device *, void *);
37:	static bool __power_supply_is_supplied_by(struct power_supply *, struct power_supply *);
344:	static int __power_supply_is_system_supplied(struct device *, void *);
1095:	static struct power_supply *__power_supply_register(struct device *, const struct power_supply_desc *, const struct power_supply_config *, bool);
1258:	static void devm_power_supply_release(struct device *, void *);
76:	static void power_supply_changed_work(struct work_struct *);
1379:	static void power_supply_class_exit(void);
1366:	static int power_supply_class_init(void);
138:	static void power_supply_deferred_register_work(struct work_struct *);
920:	static void power_supply_dev_release(struct device *);
432:	static int power_supply_match_device_by_name(struct device *, const void *);
940:	static int power_supply_read_temp(struct thermal_zone_device *, int *);
1012:	static int ps_get_cur_charge_cntl_limit(struct thermal_cooling_device *, unsigned long *);
994:	static int ps_get_max_charge_cntl_limit(struct thermal_cooling_device *, unsigned long *);
1030:	static int ps_set_cur_charge_cntl_limit(struct thermal_cooling_device *, unsigned long);
963:	static int psy_register_thermal(struct power_supply *);

File drivers/power/supply/power_supply_hwmon.c:
334:	int power_supply_add_hwmon_sysfs(struct power_supply *);
419:	void power_supply_remove_hwmon_sysfs(struct power_supply *);
329:	static void power_supply_hwmon_bitmap_free(void *);
158:	static umode_t power_supply_hwmon_is_visible(const void *, enum hwmon_sensor_types, u32, int);
206:	static int power_supply_hwmon_read(struct device *, enum hwmon_sensor_types, u32, int, long *);
183:	static int power_supply_hwmon_read_string(struct device *, enum hwmon_sensor_types, u32, int, const char **);
85:	static int power_supply_hwmon_to_property(enum hwmon_sensor_types, u32, int);
250:	static int power_supply_hwmon_write(struct device *, enum hwmon_sensor_types, u32, int, long);

File drivers/power/supply/power_supply_leds.c:
156:	int power_supply_create_triggers(struct power_supply *);
163:	void power_supply_remove_triggers(struct power_supply *);
148:	void power_supply_update_leds(struct power_supply *);
57:	static int power_supply_create_bat_triggers(struct power_supply *);
21:	static void power_supply_update_bat_leds(struct power_supply *);
113:	static void power_supply_update_gen_leds(struct power_supply *);

File drivers/power/supply/power_supply_sysfs.c:
395:	void power_supply_init_attrs(struct device_type *);
452:	int power_supply_uevent(struct device *, struct kobj_uevent_env *);
421:	static int add_prop_uevent(struct device *, struct kobj_uevent_env *, enum power_supply_property, char *);
347:	static umode_t power_supply_attr_is_visible(struct kobject *, struct attribute *, int);
263:	static ssize_t power_supply_show_property(struct device *, struct device_attribute *, char *);
229:	static ssize_t power_supply_show_usb_type(struct device *, const struct power_supply_desc *, union power_supply_propval *, char *);
309:	static ssize_t power_supply_store_property(struct device *, struct device_attribute *, const char *, size_t);

File drivers/powercap/powercap_sys.c:
600:	struct powercap_control_type *powercap_register_control_type(struct powercap_control_type *, const char *, const struct powercap_control_type_ops *);
482:	struct powercap_zone *powercap_register_zone(struct powercap_zone *, struct powercap_control_type *, const char *, struct powercap_zone *, const struct powercap_zone_ops *, int, const struct powercap_zone_constraint_ops *);
640:	int powercap_unregister_control_type(struct powercap_control_type *);
584:	int powercap_unregister_zone(struct powercap_control_type *, struct powercap_zone *);
283:	static int create_constraints(struct powercap_zone *, int, const struct powercap_zone_constraint_ops *);
359:	static void create_power_zone_common_attributes(struct powercap_zone *);
421:	static ssize_t enabled_show(struct device *, struct device_attribute *, char *);
444:	static ssize_t enabled_store(struct device *, struct device_attribute *, const char *, size_t);
114:	static ssize_t energy_uj_show(struct device *, struct device_attribute *, char *);
115:	static ssize_t energy_uj_store(struct device *, struct device_attribute *, const char *, size_t);
116:	static ssize_t max_energy_range_uj_show(struct device *, struct device_attribute *, char *);
113:	static ssize_t max_power_range_uw_show(struct device *, struct device_attribute *, char *);
347:	static ssize_t name_show(struct device *, struct device_attribute *, char *);
112:	static ssize_t power_uw_show(struct device *, struct device_attribute *, char *);
663:	static int powercap_init(void);
386:	static void powercap_release(struct device *);
220:	static int seed_constraint_attributes(void);
129:	static ssize_t show_constraint_max_power_uw(struct device *, struct device_attribute *, char *);
131:	static ssize_t show_constraint_max_time_window_us(struct device *, struct device_attribute *, char *);
130:	static ssize_t show_constraint_min_power_uw(struct device *, struct device_attribute *, char *);
132:	static ssize_t show_constraint_min_time_window_us(struct device *, struct device_attribute *, char *);
154:	static ssize_t show_constraint_name(struct device *, struct device_attribute *, char *);
125:	static ssize_t show_constraint_power_limit_uw(struct device *, struct device_attribute *, char *);
127:	static ssize_t show_constraint_time_window_us(struct device *, struct device_attribute *, char *);
126:	static ssize_t store_constraint_power_limit_uw(struct device *, struct device_attribute *, const char *, size_t);
128:	static ssize_t store_constraint_time_window_us(struct device *, struct device_attribute *, const char *, size_t);

File drivers/pps/kapi.c:
159:	void pps_event(struct pps_device *, struct pps_event_time *, int, void *);
65:	struct pps_device *pps_register_source(struct pps_source_info *, int);
136:	void pps_unregister_source(struct pps_device *);
41:	static void pps_echo_client_default(struct pps_device *, int, void *);

File drivers/pps/pps.c:
431:	struct pps_device *pps_lookup_dev(const void *);
347:	int pps_register_cdev(struct pps_device *);
406:	void pps_unregister_cdev(struct pps_device *);
249:	static long pps_cdev_compat_ioctl(struct file *, unsigned int, unsigned long);
47:	static int pps_cdev_fasync(int, struct file *, int);
90:	static long pps_cdev_ioctl(struct file *, unsigned int, unsigned long);
299:	static int pps_cdev_open(struct inode *, struct file *);
38:	static __poll_t pps_cdev_poll(struct file *, poll_table *);
53:	static int pps_cdev_pps_fetch(struct pps_device *, struct pps_fdata *);
308:	static int pps_cdev_release(struct inode *, struct file *);
331:	static void pps_device_destruct(struct device *);
449:	static void pps_exit(void);
455:	static int pps_init(void);

File drivers/pps/sysfs.c:
18:	static ssize_t assert_show(struct device *, struct device_attribute *, char *);
32:	static ssize_t clear_show(struct device *, struct device_attribute *, char *);
55:	static ssize_t echo_show(struct device *, struct device_attribute *, char *);
46:	static ssize_t mode_show(struct device *, struct device_attribute *, char *);
64:	static ssize_t name_show(struct device *, struct device_attribute *, char *);
73:	static ssize_t path_show(struct device *, struct device_attribute *, char *);

File drivers/ptp/ptp_chardev.c:
109:	long ptp_ioctl(struct posix_clock *, unsigned int, unsigned long);
104:	int ptp_open(struct posix_clock *, fmode_t);
432:	__poll_t ptp_poll(struct posix_clock *, struct file *, poll_table *);
443:	ssize_t ptp_read(struct posix_clock *, uint, char *, size_t);
48:	int ptp_set_pinfunc(struct ptp_clock *, unsigned int, enum ptp_pin_function, unsigned int);
18:	static int ptp_disable_pinfunc(struct ptp_clock_info *, enum ptp_pin_function, unsigned int);

File drivers/ptp/ptp_clock.c:
393:	void ptp_cancel_worker_sync(struct ptp_clock *);
321:	void ptp_clock_event(struct ptp_clock *, struct ptp_clock_event *);
348:	int ptp_clock_index(struct ptp_clock *);
204:	struct ptp_clock *ptp_clock_register(struct ptp_clock_info *, struct device *);
301:	int ptp_clock_unregister(struct ptp_clock *);
354:	int ptp_find_pin(struct ptp_clock *, enum ptp_pin_function, unsigned int);
372:	int ptp_find_pin_unlocked(struct ptp_clock *, enum ptp_pin_function, unsigned int);
387:	int ptp_schedule_worker(struct ptp_clock *, unsigned long);
66:	long scaled_ppm_to_ppb(long);
189:	static void ptp_aux_kworker(struct kthread_work *);
115:	static int ptp_clock_adjtime(struct posix_clock *, struct __kernel_timex *);
89:	static int ptp_clock_getres(struct posix_clock *, struct timespec64 *);
103:	static int ptp_clock_gettime(struct posix_clock *, struct timespec64 *);
178:	static void ptp_clock_release(struct device *);
96:	static int ptp_clock_settime(struct posix_clock *, const struct timespec64 *);
401:	static void ptp_exit(void);
408:	static int ptp_init(void);

File drivers/ptp/ptp_sysfs.c:
298:	void ptp_cleanup_pin_groups(struct ptp_clock *);
258:	int ptp_populate_pin_groups(struct ptp_clock *);
12:	static ssize_t clock_name_show(struct device *, struct device_attribute *, char *);
36:	static ssize_t extts_enable_store(struct device *, struct device_attribute *, const char *, size_t);
62:	static ssize_t extts_fifo_show(struct device *, struct device_attribute *, char *);
29:	static ssize_t max_adj_show(struct device *, struct device_attribute *, char *);
30:	static ssize_t n_alarm_show(struct device *, struct device_attribute *, char *);
31:	static ssize_t n_ext_ts_show(struct device *, struct device_attribute *, char *);
32:	static ssize_t n_per_out_show(struct device *, struct device_attribute *, char *);
33:	static ssize_t n_pins_show(struct device *, struct device_attribute *, char *);
96:	static ssize_t period_store(struct device *, struct device_attribute *, const char *, size_t);
124:	static ssize_t pps_enable_store(struct device *, struct device_attribute *, const char *, size_t);
34:	static ssize_t pps_show(struct device *, struct device_attribute *, char *);
168:	static umode_t ptp_is_attribute_visible(struct kobject *, struct attribute *, int);
211:	static ssize_t ptp_pin_show(struct device *, struct device_attribute *, char *);
233:	static ssize_t ptp_pin_store(struct device *, struct device_attribute *, const char *, size_t);

File drivers/pwm/core.c:
1217:	struct pwm_device *devm_fwnode_pwm_get(struct device *, struct fwnode_handle *, const char *);
1184:	struct pwm_device *devm_of_pwm_get(struct device *, struct device_node *, const char *);
1152:	struct pwm_device *devm_pwm_get(struct device *, const char *);
1262:	void devm_pwm_put(struct device *, struct pwm_device *);
805:	struct pwm_device *of_pwm_get(struct device *, struct device_node *, const char *);
135:	struct pwm_device *of_pwm_xlate_with_flags(struct pwm_chip *, const struct of_phandle_args *);
954:	void pwm_add_table(struct pwm_lookup *, size_t);
694:	int pwm_adjust_config(struct pwm_device *);
573:	int pwm_apply_state(struct pwm_device *, const struct pwm_state *);
667:	int pwm_capture(struct pwm_device *, struct pwm_capture *, unsigned long);
461:	void pwm_free(struct pwm_device *);
998:	struct pwm_device *pwm_get(struct device *, const char *);
232:	void *pwm_get_chip_data(struct pwm_device *);
1112:	void pwm_put(struct pwm_device *);
971:	void pwm_remove_table(struct pwm_lookup *, size_t);
396:	struct pwm_device *pwm_request(int, const char *);
433:	struct pwm_device *pwm_request_from_chip(struct pwm_chip *, unsigned int, const char *);
215:	int pwm_set_chip_data(struct pwm_device *, void *);
340:	int pwmchip_add(struct pwm_chip *);
273:	int pwmchip_add_with_polarity(struct pwm_chip *, enum pwm_polarity);
355:	int pwmchip_remove(struct pwm_chip *);
909:	static struct pwm_device *acpi_pwm_get(struct fwnode_handle *);
1243:	static int devm_pwm_match(struct device *, void *, void *);
1136:	static void devm_pwm_release(struct device *, void *);
63:	static void free_pwms(struct pwm_chip *);
1269:	static void pwm_dbg_show(struct pwm_chip *, struct seq_file *);
1339:	static int pwm_debugfs_init(void);
1337:	static int pwm_debugfs_open(struct inode *, struct file *);
102:	static int pwm_device_request(struct pwm_device *, const char *);
1304:	static void *pwm_seq_next(struct seq_file *, void *, loff_t *);
1316:	static int pwm_seq_show(struct seq_file *, void *);
1296:	static void *pwm_seq_start(struct seq_file *, loff_t *);
1311:	static void pwm_seq_stop(struct seq_file *, void *);
79:	static struct pwm_chip *pwmchip_find_by_name(const char *);

File drivers/pwm/sysfs.c:
488:	void pwmchip_sysfs_export(struct pwm_chip *);
504:	void pwmchip_sysfs_unexport(struct pwm_chip *);
203:	static ssize_t capture_show(struct device *, struct device_attribute *, char *);
71:	static ssize_t duty_cycle_show(struct device *, struct device_attribute *, char *);
83:	static ssize_t duty_cycle_store(struct device *, struct device_attribute *, const char *, size_t);
106:	static ssize_t enable_show(struct device *, struct device_attribute *, char *);
118:	static ssize_t enable_store(struct device *, struct device_attribute *, const char *, size_t);
310:	static ssize_t export_store(struct device *, struct device_attribute *, const char *, size_t);
359:	static ssize_t npwm_show(struct device *, struct device_attribute *, char *);
36:	static ssize_t period_show(struct device *, struct device_attribute *, char *);
48:	static ssize_t period_store(struct device *, struct device_attribute *, const char *, size_t);
154:	static ssize_t polarity_show(struct device *, struct device_attribute *, char *);
177:	static ssize_t polarity_store(struct device *, struct device_attribute *, const char *, size_t);
467:	static int pwm_class_resume(struct device *);
412:	static int pwm_class_resume_npwm(struct device *, unsigned int);
436:	static int pwm_class_suspend(struct device *);
241:	static int pwm_export_child(struct device *, struct pwm_device *);
234:	static void pwm_export_release(struct device *);
525:	static int pwm_sysfs_init(void);
285:	static int pwm_unexport_child(struct device *, struct pwm_device *);
280:	static int pwm_unexport_match(struct device *, void *);
483:	static int pwmchip_sysfs_match(struct device *, const void *);
338:	static ssize_t unexport_store(struct device *, struct device_attribute *, const char *, size_t);

File drivers/ras/debugfs.c:
40:	int ras_add_daemon_trace(void);
56:	void ras_debugfs_init(void);
10:	int ras_userspace_consumers(void);
21:	static int trace_open(struct inode *, struct file *);
27:	static int trace_release(struct inode *, struct file *);
16:	static int trace_show(struct seq_file *, void *);

File drivers/ras/ras.c:
24:	void log_arm_hw_error(struct cper_sec_proc_arm *);
17:	void log_non_standard_event(const guid_t *, const guid_t *, const char *, const u8, const u8 *, const u32);
47:	static int parse_ras_param(char *);
29:	static int ras_init(void);

File drivers/rtc/class.c:
388:	int __rtc_register_device(struct module *, struct rtc_device *);
350:	struct rtc_device *devm_rtc_allocate_device(struct device *);
445:	struct rtc_device *devm_rtc_device_register(struct device *, const char *, const struct rtc_class_ops *, struct module *);
338:	static void devm_rtc_release_device(struct device *, void *);
193:	static struct rtc_device *rtc_allocate_device(void);
252:	static void rtc_device_get_offset(struct rtc_device *);
26:	static void rtc_device_release(struct device *);
467:	static int rtc_init(void);
136:	static int rtc_resume(struct device *);
91:	static int rtc_suspend(struct device *);

File drivers/rtc/dev.c:
505:	void rtc_dev_exit(void);
496:	void rtc_dev_init(void);
475:	void rtc_dev_prepare(struct rtc_device *);
407:	static long rtc_dev_compat_ioctl(struct file *, unsigned int, unsigned long);
430:	static int rtc_dev_fasync(int, struct file *, int);
203:	static long rtc_dev_ioctl(struct file *, unsigned int, unsigned long);
23:	static int rtc_dev_open(struct inode *, struct file *);
191:	static __poll_t rtc_dev_poll(struct file *, poll_table *);
142:	static ssize_t rtc_dev_read(struct file *, char *, size_t, loff_t *);
437:	static int rtc_dev_release(struct inode *, struct file *);

File drivers/rtc/interface.c:
212:	int __rtc_read_alarm(struct rtc_device *, struct rtc_wkalrm *);
639:	void rtc_aie_update_irq(struct rtc_device *);
515:	int rtc_alarm_irq_enable(struct rtc_device *, unsigned int);
717:	void rtc_class_close(struct rtc_device *);
697:	struct rtc_device *rtc_class_open(const char *);
620:	void rtc_handle_legacy_irq(struct rtc_device *, int, int);
483:	int rtc_initialize_alarm(struct rtc_device *, struct rtc_wkalrm *);
778:	int rtc_irq_set_freq(struct rtc_device *, int);
756:	int rtc_irq_set_state(struct rtc_device *, int);
663:	enum hrtimer_restart rtc_pie_update_irq(struct hrtimer *);
386:	int rtc_read_alarm(struct rtc_device *, struct rtc_wkalrm *);
1035:	int rtc_read_offset(struct rtc_device *, long *);
110:	int rtc_read_time(struct rtc_device *, struct rtc_time *);
448:	int rtc_set_alarm(struct rtc_device *, struct rtc_wkalrm *);
1070:	int rtc_set_offset(struct rtc_device *, long);
126:	int rtc_set_time(struct rtc_device *, struct rtc_time *);
1016:	void rtc_timer_cancel(struct rtc_device *, struct rtc_timer *);
900:	void rtc_timer_do_work(struct work_struct *);
975:	void rtc_timer_init(struct rtc_timer *, void (*)(struct rtc_device *), struct rtc_device *);
992:	int rtc_timer_start(struct rtc_device *, struct rtc_timer *, ktime_t, ktime_t);
650:	void rtc_uie_update_irq(struct rtc_device *);
686:	void rtc_update_irq(struct rtc_device *, unsigned long, unsigned long);
546:	int rtc_update_irq_enable(struct rtc_device *, unsigned int);
84:	static int __rtc_read_time(struct rtc_device *, struct rtc_time *);
409:	static int __rtc_set_alarm(struct rtc_device *, struct rtc_wkalrm *);
23:	static void rtc_add_offset(struct rtc_device *, struct rtc_time *);
844:	static void rtc_alarm_disable(struct rtc_device *, struct rtc_device *);
178:	static int rtc_read_alarm_internal(struct rtc_device *, struct rtc_wkalrm *);
805:	static int rtc_timer_enqueue(struct rtc_device *, struct rtc_timer *);
865:	static void rtc_timer_remove(struct rtc_device *, struct rtc_timer *);

File drivers/rtc/lib.c:
134:	struct rtc_time rtc_ktime_to_tm(ktime_t);
30:	int rtc_month_days(unsigned int, unsigned int);
49:	void rtc_time64_to_tm(time64_t, struct rtc_time *);
125:	ktime_t rtc_tm_to_ktime(struct rtc_time);
115:	time64_t rtc_tm_to_time64(struct rtc_time *);
94:	int rtc_valid_tm(struct rtc_time *);
39:	int rtc_year_days(unsigned int, unsigned int, unsigned int);

File drivers/rtc/nvmem.c:
80:	int rtc_nvmem_register(struct rtc_device *, struct nvmem_config *);
102:	void rtc_nvmem_unregister(struct rtc_device *);
22:	static ssize_t rtc_nvram_read(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t, size_t);
32:	static ssize_t rtc_nvram_write(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t, size_t);

File drivers/rtc/proc.c:
81:	void rtc_proc_add_device(struct rtc_device *);
88:	void rtc_proc_del_device(struct rtc_device *);
39:	static int rtc_proc_show(struct seq_file *, void *);

File drivers/rtc/rtc-cmos.c:
933:	static int cmos_aie_poweroff(struct device *);
512:	static int cmos_alarm_irq_enable(struct device *, unsigned int);
1033:	static void cmos_check_wkalrm(struct device *);
321:	static void cmos_checkintr(struct cmos_rtc *, unsigned char);
707:	static int cmos_do_probe(struct device *, struct resource *, int);
908:	static void cmos_do_remove(struct device *, struct device *);
900:	static void cmos_do_shutdown(int);
1486:	static void cmos_exit(void);
1458:	static int cmos_init(void);
650:	static irqreturn_t cmos_interrupt(int, void *);
361:	static void cmos_irq_disable(struct cmos_rtc *, unsigned char);
338:	static void cmos_irq_enable(struct cmos_rtc *, unsigned char);
593:	static int cmos_nvram_read(void *, unsigned int, void *, size_t);
614:	static int cmos_nvram_write(void *, unsigned int, void *, size_t);
1400:	static int cmos_platform_probe(struct platform_device *);
1419:	static int cmos_platform_remove(struct platform_device *);
1425:	static void cmos_platform_shutdown(struct platform_device *);
1299:	static int cmos_pnp_probe(struct pnp_dev *, const struct pnp_device_id *);
1322:	static void cmos_pnp_remove(struct pnp_dev *);
1327:	static void cmos_pnp_shutdown(struct pnp_dev *);
530:	static int cmos_procfs(struct device *, struct seq_file *);
251:	static int cmos_read_alarm(struct device *, struct rtc_wkalrm *);
223:	static int cmos_read_time(struct device *, struct rtc_time *);
1071:	static int cmos_resume(struct device *);
446:	static int cmos_set_alarm(struct device *, struct rtc_wkalrm *);
240:	static int cmos_set_time(struct device *, struct rtc_time *);
978:	static int cmos_suspend(struct device *);
379:	static int cmos_validate_alarm(struct device *, struct rtc_wkalrm *);
1228:	static void cmos_wake_setup(struct device *);
1141:	static u32 rtc_handler(void *);
1194:	static void rtc_wake_off(struct device *);
1188:	static void rtc_wake_on(struct device *);

File drivers/rtc/rtc-mc146818-lib.c:
25:	unsigned int mc146818_get_time(struct rtc_time *);
103:	int mc146818_set_time(struct rtc_time *);

File drivers/rtc/sysfs.c:
350:	int rtc_add_group(struct rtc_device *, const struct attribute_group *);
315:	int rtc_add_groups(struct rtc_device *, const struct attribute_group **);
310:	const struct attribute_group **rtc_get_dev_attribute_groups(void);
32:	static ssize_t date_show(struct device *, struct device_attribute *, char *);
114:	static ssize_t hctosys_show(struct device *, struct device_attribute *, char *);
78:	static ssize_t max_user_freq_show(struct device *, struct device_attribute *, char *);
84:	static ssize_t max_user_freq_store(struct device *, struct device_attribute *, const char *, size_t);
24:	static ssize_t name_show(struct device *, struct device_attribute *, char *);
218:	static ssize_t offset_show(struct device *, struct device_attribute *, char *);
231:	static ssize_t offset_store(struct device *, struct device_attribute *, const char *, size_t);
246:	static ssize_t range_show(struct device *, struct device_attribute *, char *);
279:	static umode_t rtc_attr_is_visible(struct kobject *, struct attribute *, int);
60:	static ssize_t since_epoch_show(struct device *, struct device_attribute *, char *);
46:	static ssize_t time_show(struct device *, struct device_attribute *, char *);
127:	static ssize_t wakealarm_show(struct device *, struct device_attribute *, char *);
151:	static ssize_t wakealarm_store(struct device *, struct device_attribute *, const char *, size_t);

File drivers/scsi/constants.c:
424:	const char *scsi_driverbyte_string(int);
378:	const char *scsi_extd_sense_format(unsigned char, unsigned char, const char **);
413:	const char *scsi_hostbyte_string(int);
448:	const char *scsi_mlreturn_string(int);
260:	bool scsi_opcode_sa_name(int, int, const char **, const char **);
365:	const char *scsi_sense_key_string(unsigned char);

File drivers/scsi/device_handler/scsi_dh_alua.c:
1010:	static int alua_activate(struct scsi_device *, activate_complete, void *);
210:	static struct alua_port_group *alua_alloc_pg(struct scsi_device *, int, int);
1115:	static int alua_bus_attach(struct scsi_device *);
1145:	static void alua_bus_detach(struct scsi_device *);
1056:	static void alua_check(struct scsi_device *, bool);
408:	static int alua_check_sense(struct scsi_device *, struct scsi_sense_hdr *);
319:	static int alua_check_vpd(struct scsi_device *, struct alua_dh_data *, int);
1194:	static void alua_exit(void);
178:	static struct alua_port_group *alua_find_get_pg(char *, size_t, int);
1177:	static int alua_init(void);
945:	static int alua_initialize(struct scsi_device *, struct alua_dh_data *);
1079:	static blk_status_t alua_prep_fn(struct scsi_device *, struct request *);
1104:	static void alua_rescan(struct scsi_device *);
505:	static int alua_rtpg(struct scsi_device *, struct alua_port_group *);
893:	static bool alua_rtpg_queue(struct alua_port_group *, struct scsi_device *, struct alua_queue_data *, bool);
795:	static void alua_rtpg_work(struct work_struct *);
966:	static int alua_set_params(struct scsi_device *, const char *);
745:	static unsigned int alua_stpg(struct scsi_device *, struct alua_port_group *);
108:	static void release_port_group(struct kref *);

File drivers/scsi/device_handler/scsi_dh_emc.c:
381:	static int clariion_activate(struct scsi_device *, activate_complete, void *);
473:	static int clariion_bus_attach(struct scsi_device *);
507:	static void clariion_bus_detach(struct scsi_device *);
283:	static int clariion_check_sense(struct scsi_device *, struct scsi_sense_hdr *);
535:	static void clariion_exit(void);
524:	static int clariion_init(void);
331:	static blk_status_t clariion_prep_fn(struct scsi_device *, struct request *);
369:	static int clariion_send_inquiry(struct scsi_device *, struct clariion_dh_data *);
423:	static int clariion_set_params(struct scsi_device *, const char *);
189:	static char *parse_sp_model(struct scsi_device *, unsigned char *);
235:	static int send_trespass_cmd(struct scsi_device *, struct clariion_dh_data *);
100:	static int trespass_endio(struct scsi_device *, struct scsi_sense_hdr *);

File drivers/scsi/device_handler/scsi_dh_hp_sw.c:
184:	static int hp_sw_activate(struct scsi_device *, activate_complete, void *);
200:	static int hp_sw_bus_attach(struct scsi_device *);
231:	static void hp_sw_bus_detach(struct scsi_device *);
251:	static void hp_sw_exit(void);
246:	static int hp_sw_init(void);
162:	static blk_status_t hp_sw_prep_fn(struct scsi_device *, struct request *);
117:	static int hp_sw_start_stop(struct hp_sw_dh_data *, struct hp_sw_dh_data *);
81:	static int hp_sw_tur(struct scsi_device *, struct hp_sw_dh_data *);

File drivers/scsi/device_handler/scsi_dh_rdac.c:
388:	static int check_ownership(struct rdac_dh_data *, struct scsi_device *);
326:	static struct rdac_controller *get_controller(int, char *, u8 *, struct scsi_device *);
362:	static int get_lun_info(struct scsi_device *, struct rdac_dh_data *, char *, u8 *);
437:	static int initialize_controller(struct scsi_device *, struct rdac_dh_data *, char *, u8 *);
585:	static int queue_mode_select(struct scsi_device *, activate_complete, void *);
611:	static int rdac_activate(struct scsi_device *, activate_complete, void *);
724:	static int rdac_bus_attach(struct scsi_device *);
771:	static void rdac_bus_detach(struct scsi_device *);
659:	static int rdac_check_sense(struct scsi_device *, struct scsi_sense_hdr *);
823:	static void rdac_exit(void);
799:	static int rdac_init(void);
647:	static blk_status_t rdac_prep_fn(struct scsi_device *, struct request *);
527:	static void send_mode_select(struct work_struct *);

File drivers/scsi/hosts.c:
208:	int scsi_add_host_with_dma(struct Scsi_Host *, struct device *, struct device *);
612:	void scsi_exit_hosts(void);
653:	void scsi_flush_work(struct Scsi_Host *);
377:	struct Scsi_Host *scsi_host_alloc(struct scsi_host_template *, int);
587:	int scsi_host_busy(struct Scsi_Host *);
718:	void scsi_host_busy_iter(struct Scsi_Host *, bool (*)(struct scsi_cmnd *, void *, bool), void *);
688:	void scsi_host_complete_all_commands(struct Scsi_Host *, int);
562:	struct Scsi_Host *scsi_host_get(struct Scsi_Host *);
543:	struct Scsi_Host *scsi_host_lookup(unsigned short);
601:	void scsi_host_put(struct Scsi_Host *);
74:	int scsi_host_set_state(struct Scsi_Host *, enum scsi_host_state);
607:	int scsi_init_hosts(void);
618:	int scsi_is_host_device(const struct device *);
634:	int scsi_queue_work(struct Scsi_Host *, struct work_struct *);
164:	void scsi_remove_host(struct Scsi_Host *);
700:	static bool __scsi_host_busy_iter_fn(struct request *, void *, bool);
523:	static int __scsi_host_match(struct device *, const void *);
667:	static bool complete_all_cmds_iter(struct request *, void *, bool);
571:	static bool scsi_host_check_in_flight(struct request *, void *, bool);
56:	static void scsi_host_cls_release(struct device *);
319:	static void scsi_host_dev_release(struct device *);

File drivers/scsi/scsi.c:
707:	struct scsi_device *__scsi_device_lookup(struct Scsi_Host *, uint, uint, u64);
649:	struct scsi_device *__scsi_device_lookup_by_target(struct scsi_target *, u64);
558:	struct scsi_device *__scsi_iterate_devices(struct Scsi_Host *, struct scsi_device *);
620:	void __starget_for_each_device(struct scsi_target *, void *, void (*)(struct scsi_device *, void *));
440:	void scsi_attach_vpd(struct scsi_device *);
224:	int scsi_change_queue_depth(struct scsi_device *, int);
523:	int scsi_device_get(struct scsi_device *);
735:	struct scsi_device *scsi_device_lookup(struct Scsi_Host *, uint, uint, u64);
674:	struct scsi_device *scsi_device_lookup_by_target(struct scsi_target *, u64);
548:	void scsi_device_put(struct scsi_device *);
167:	void scsi_finish_command(struct scsi_cmnd *);
341:	int scsi_get_vpd_page(struct scsi_device *, u8, unsigned char *, int);
124:	void scsi_log_completion(struct scsi_cmnd *, int);
98:	void scsi_log_send(struct scsi_cmnd *);
477:	int scsi_report_opcode(struct scsi_device *, unsigned char *, unsigned int, unsigned char);
257:	int scsi_track_queue_full(struct scsi_device *, int);
592:	void starget_for_each_device(struct scsi_target *, void *, void (*)(struct scsi_device *, void *));
797:	static void exit_scsi(void);
757:	static int init_scsi(void);
387:	static struct scsi_vpd *scsi_get_vpd_buf(struct scsi_device *, u8);
295:	static int scsi_vpd_inquiry(struct scsi_device *, unsigned char *, u8, unsigned int);

File drivers/scsi/scsi_common.c:
105:	void int_to_scsilun(u64, struct scsi_lun *);
232:	void scsi_build_sense_buffer(int, u8 *, u8, u8, u8);
45:	const char *scsi_device_type(unsigned int);
138:	bool scsi_normalize_sense(const u8 *, int, struct scsi_sense_hdr *);
196:	const u8 *scsi_sense_desc_find(const u8 *, int, int);
310:	int scsi_set_sense_field_pointer(u8 *, int, u16, u8, bool);
260:	int scsi_set_sense_information(u8 *, int, u64);
77:	u64 scsilun_to_int(struct scsi_lun *);

File drivers/scsi/scsi_debugfs.c:
34:	void scsi_show_rq(struct seq_file *, struct request *);

File drivers/scsi/scsi_devinfo.c:
780:	int scsi_dev_info_add_list(enum scsi_devinfo_key, const char *);
348:	int scsi_dev_info_list_add_keyed(int, char *, char *, char *, blist_flags_t, enum scsi_devinfo_key);
496:	int scsi_dev_info_list_del_keyed(char *, char *, enum scsi_devinfo_key);
812:	int scsi_dev_info_remove_list(enum scsi_devinfo_key);
763:	void scsi_exit_devinfo(void);
574:	blist_flags_t scsi_get_device_flags(struct scsi_device *, const unsigned char *, const unsigned char *);
596:	blist_flags_t scsi_get_device_flags_keyed(struct scsi_device *, const unsigned char *, const unsigned char *, enum scsi_devinfo_key);
845:	int scsi_init_devinfo(void);
664:	static void *devinfo_seq_next(struct seq_file *, void *, loff_t *);
625:	static int devinfo_seq_show(struct seq_file *, void *);
643:	static void *devinfo_seq_start(struct seq_file *, loff_t *);
687:	static void devinfo_seq_stop(struct seq_file *, void *);
699:	static int proc_scsi_devinfo_open(struct inode *, struct file *);
711:	static ssize_t proc_scsi_devinfo_write(struct file *, const char *, size_t, loff_t *);
523:	static int scsi_dev_info_list_add_str(char *);
412:	static struct scsi_dev_info_list *scsi_dev_info_list_find(const char *, const char *, enum scsi_devinfo_key);
287:	static void scsi_strcpy_devinfo(char *, char *, size_t, char *, int);

File drivers/scsi/scsi_dh.c:
251:	int scsi_dh_activate(struct request_queue *, activate_complete, void *);
170:	void scsi_dh_add_device(struct scsi_device *);
320:	int scsi_dh_attach(struct request_queue *, const char *);
359:	const char *scsi_dh_attached_handler_name(struct request_queue *, gfp_t);
186:	void scsi_dh_release_device(struct scsi_device *);
298:	int scsi_dh_set_params(struct request_queue *, const char *);
199:	int scsi_register_device_handler(struct scsi_device_handler *);
224:	int scsi_unregister_device_handler(struct scsi_device_handler *);
88:	static struct scsi_device_handler *__scsi_dh_lookup(const char *);
71:	static const char *scsi_dh_find_driver(struct scsi_device *);
124:	static int scsi_dh_handler_attach(struct scsi_device *, struct scsi_device_handler *);

File drivers/scsi/scsi_error.c:
138:	void scmd_eh_abort_handler(struct work_struct *);
342:	int scsi_block_when_processing_errors(struct scsi_device *);
489:	int scsi_check_sense(struct scsi_cmnd *);
2437:	bool scsi_command_normalize_sense(const struct scsi_cmnd *, struct scsi_sense_hdr *);
1791:	int scsi_decide_disposition(struct scsi_cmnd *);
1198:	void scsi_eh_finish_cmd(struct scsi_cmnd *, struct list_head *);
2101:	void scsi_eh_flush_done_q(struct list_head *);
1224:	int scsi_eh_get_sense(struct list_head *, struct list_head *);
961:	void scsi_eh_prep_cmnd(struct scsi_cmnd *, struct scsi_eh_save *, unsigned char *, int, unsigned int);
2083:	void scsi_eh_ready_devs(struct Scsi_Host *, struct list_head *, struct list_head *);
1032:	void scsi_eh_restore_cmnd(struct scsi_cmnd *, struct scsi_eh_save *);
256:	void scsi_eh_scmd_add(struct scsi_cmnd *);
66:	void scsi_eh_wakeup(struct Scsi_Host *);
2185:	int scsi_error_handler(void *);
2455:	bool scsi_get_sense_info_fld(const u8 *, int, u64 *);
2343:	int scsi_ioctl_reset(struct scsi_device *, int *);
1742:	int scsi_noretry_cmd(struct scsi_cmnd *);
2287:	void scsi_report_bus_reset(struct Scsi_Host *, int);
2320:	void scsi_report_device_reset(struct Scsi_Host *, int, int);
84:	void scsi_schedule_eh(struct Scsi_Host *);
292:	enum blk_eh_timer_return scsi_times_out(struct request *);
851:	static void __scsi_report_device_reset(struct scsi_device *, void *);
1972:	static void eh_lock_door_done(struct request *, blk_status_t);
1176:	static int scsi_eh_action(struct scsi_cmnd *, int);
1483:	static int scsi_eh_bus_device_reset(struct Scsi_Host *, struct list_head *, struct list_head *);
1607:	static int scsi_eh_bus_reset(struct Scsi_Host *, struct list_head *, struct list_head *);
779:	static void scsi_eh_done(struct scsi_cmnd *);
1679:	static int scsi_eh_host_reset(struct Scsi_Host *, struct list_head *, struct list_head *);
240:	static void scsi_eh_inc_host_failed(struct callback_head *);
1988:	static void scsi_eh_lock_door(struct scsi_device *);
1417:	static int scsi_eh_stu(struct Scsi_Host *, struct list_head *, struct list_head *);
1545:	static int scsi_eh_target_reset(struct Scsi_Host *, struct list_head *, struct list_head *);
1341:	static int scsi_eh_test_devices(struct list_head *, struct list_head *, struct list_head *, int);
1390:	static int scsi_eh_try_stu(struct scsi_cmnd *);
1304:	static int scsi_eh_tur(struct scsi_cmnd *);
683:	static void scsi_handle_queue_full(struct scsi_device *);
651:	static void scsi_handle_queue_ramp_up(struct scsi_device *);
416:	static void scsi_report_sense(struct scsi_device *, struct scsi_sense_hdr *);
2333:	static void scsi_reset_provider_done_command(struct scsi_cmnd *);
2021:	static void scsi_restart_operations(struct Scsi_Host *);
1063:	static int scsi_send_eh_cmnd(struct scsi_cmnd *, unsigned char *, int, int, unsigned int);
825:	static int scsi_try_bus_reset(struct scsi_cmnd *);
795:	static int scsi_try_host_reset(struct scsi_cmnd *);
867:	static int scsi_try_target_reset(struct scsi_cmnd *);
2155:	static void scsi_unjam_host(struct Scsi_Host *);

File drivers/scsi/scsi_ioctl.c:
290:	int scsi_compat_ioctl(struct scsi_device *, int, void *);
275:	int scsi_ioctl(struct scsi_device *, int, void *);
308:	int scsi_ioctl_block_when_processing_errors(struct scsi_device *, int, bool);
144:	int scsi_set_medium_removal(struct scsi_device *, char);
89:	static int ioctl_internal_command(struct scsi_device *, char *, int, int);
42:	static int ioctl_probe(struct Scsi_Host *, void *);
194:	static int scsi_ioctl_common(struct scsi_device *, int, void *);
177:	static int scsi_ioctl_get_pci(struct scsi_device *, void *);

File drivers/scsi/scsi_lib.c:
240:	int __scsi_execute(struct scsi_device *, const unsigned char *, int, void *, unsigned int, unsigned char *, struct scsi_sense_hdr *, int, int, u64, req_flags_t, int *);
1794:	void __scsi_init_queue(struct Scsi_Host *, struct request_queue *);
1009:	blk_status_t scsi_alloc_sgtables(struct scsi_cmnd *);
1958:	void scsi_block_requests(struct Scsi_Host *);
1937:	struct scsi_device *scsi_device_from_queue(struct request_queue *);
2531:	int scsi_device_quiesce(struct scsi_device *);
2579:	void scsi_device_resume(struct scsi_device *);
2224:	int scsi_device_set_state(struct scsi_device *, enum scsi_device_state);
324:	void scsi_device_unbusy(struct scsi_device *, struct scsi_cmnd *);
2398:	void scsi_evt_thread(struct work_struct *);
1981:	void scsi_exit_queue(void);
522:	void scsi_free_sgtables(struct scsi_cmnd *);
2859:	int scsi_host_block(struct Scsi_Host *);
2892:	int scsi_host_unblock(struct Scsi_Host *, int);
1137:	void scsi_init_command(struct scsi_device *, struct scsi_cmnd *);
81:	int scsi_init_sense_cache(struct Scsi_Host *);
2678:	int scsi_internal_device_block_nowait(struct scsi_device *);
2736:	int scsi_internal_device_unblock_nowait(struct scsi_device *, enum scsi_device_state);
940:	void scsi_io_completion(struct scsi_cmnd *, unsigned int);
2917:	void *scsi_kmap_atomic_sg(struct scatterlist *, int, size_t *, size_t *);
2962:	void scsi_kunmap_atomic_sg(void *);
2006:	int scsi_mode_select(struct scsi_device *, int, int, int, unsigned char *, int, int, int, struct scsi_mode_data *, struct scsi_sense_hdr *);
2079:	int scsi_mode_sense(struct scsi_device *, int, int, unsigned char *, int, int, int, struct scsi_mode_data *, struct scsi_sense_hdr *);
1882:	struct request_queue *scsi_mq_alloc_queue(struct scsi_device *);
1925:	void scsi_mq_destroy_tags(struct Scsi_Host *);
1894:	int scsi_mq_setup_tags(struct Scsi_Host *);
216:	void scsi_queue_insert(struct scsi_cmnd *, int);
494:	void scsi_requeue_run_queue(struct work_struct *);
504:	void scsi_run_host_queues(struct Scsi_Host *);
2632:	void scsi_start_queue(struct scsi_device *);
2822:	void scsi_target_block(struct device *);
2603:	void scsi_target_quiesce(struct scsi_target *);
2616:	void scsi_target_resume(struct scsi_target *);
2848:	void scsi_target_unblock(struct device *, enum scsi_device_state);
2193:	int scsi_test_unit_ready(struct scsi_device *, int, int, struct scsi_sense_hdr *);
1974:	void scsi_unblock_requests(struct Scsi_Host *);
3068:	int scsi_vpd_lun_id(struct scsi_device *, char *, size_t);
3193:	int scsi_vpd_tpg_id(struct scsi_device *, int *);
2968:	void sdev_disable_disk_events(struct scsi_device *);
2974:	void sdev_enable_disk_events(struct scsi_device *);
2466:	struct scsi_event *sdev_evt_alloc(enum scsi_device_event, gfp_t);
2438:	void sdev_evt_send(struct scsi_device *, struct scsi_event *);
2503:	void sdev_evt_send_simple(struct scsi_device *, enum scsi_device_event, gfp_t);
177:	static void __scsi_queue_insert(struct scsi_cmnd *, int, bool);
2802:	static void device_block(struct scsi_device *, void *);
2597:	static void device_quiesce_fn(struct scsi_device *, void *);
2610:	static void device_resume_fn(struct scsi_device *, void *);
2833:	static void device_unblock(struct scsi_device *, void *);
1128:	static void scsi_cleanup_rq(struct request *);
662:	static bool scsi_cmd_runtime_exceeced(struct scsi_cmnd *);
1855:	static void scsi_commit_rqs(struct blk_mq_hw_ctx *);
309:	static void scsi_dec_host_busy(struct Scsi_Host *, struct scsi_cmnd *);
1469:	static int scsi_dispatch_cmd(struct scsi_cmnd *);
566:	static bool scsi_end_request(struct request *, blk_status_t, unsigned int);
1114:	static void scsi_initialize_rq(struct request *);
680:	static void scsi_io_completion_action(struct scsi_cmnd *, int);
850:	static int scsi_io_completion_nz_result(struct scsi_cmnd *, int, blk_status_t *);
1785:	static int scsi_map_queues(struct blk_mq_tag_set *);
1596:	static void scsi_mq_done(struct scsi_cmnd *);
1773:	static void scsi_mq_exit_request(struct blk_mq_tag_set *, struct request *, unsigned int);
1613:	static bool scsi_mq_get_budget(struct request_queue *);
1740:	static int scsi_mq_init_request(struct blk_mq_tag_set *, struct request *, unsigned int, unsigned int);
1407:	static bool scsi_mq_lld_busy(struct request_queue *);
1606:	static void scsi_mq_put_budget(struct request_queue *);
154:	static void scsi_mq_requeue_cmd(struct scsi_cmnd *);
1550:	static blk_status_t scsi_prepare_cmd(struct request *);
1643:	static blk_status_t scsi_queue_rq(struct blk_mq_hw_ctx *, const struct blk_mq_queue_data *);
623:	static blk_status_t scsi_result_to_blk_status(struct scsi_cmnd *, int);
482:	static void scsi_run_queue(struct request_queue *);
539:	static void scsi_run_queue_async(struct scsi_device *);
349:	static void scsi_single_lun_run(struct scsi_device *);
1429:	static void scsi_softirq_done(struct request *);
417:	static void scsi_starved_list_run(struct Scsi_Host *);
1732:	static enum blk_eh_timer_return scsi_timeout(struct request *, bool);
512:	static void scsi_uninit_cmd(struct scsi_cmnd *);
2813:	static int target_block(struct device *, void *);
2839:	static int target_unblock(struct device *, void *);

File drivers/scsi/scsi_lib_dma.c:
23:	int scsi_dma_map(struct scsi_cmnd *);
43:	void scsi_dma_unmap(struct scsi_cmnd *);

File drivers/scsi/scsi_logging.c:
154:	size_t __scsi_format_command(char *, size_t, const unsigned char *, size_t);
366:	void __scsi_print_sense(const struct scsi_device *, const char *, const unsigned char *, int);
80:	void scmd_printk(const char *, const struct scsi_cmnd *, const char *, ...);
177:	void scsi_print_command(struct scsi_cmnd *);
381:	void scsi_print_result(const struct scsi_cmnd *, const char *, int);
374:	void scsi_print_sense(const struct scsi_cmnd *);
358:	void scsi_print_sense_hdr(const struct scsi_device *, const char *, const struct scsi_sense_hdr *);
53:	void sdev_prefix_printk(const char *, const struct scsi_device *, const char *, const char *, ...);
240:	static size_t scsi_format_extd_sense(char *, size_t, unsigned char, unsigned char);
105:	static size_t scsi_format_opcode_name(char *, size_t, const unsigned char *);
269:	static size_t scsi_format_sense_hdr(char *, size_t, const struct scsi_sense_hdr *);
343:	static void scsi_log_print_sense(const struct scsi_device *, const char *, int, const unsigned char *, int);
318:	static void scsi_log_print_sense_hdr(const struct scsi_device *, const char *, int, const struct scsi_sense_hdr *);
18:	static char *scsi_log_reserve_buffer(size_t *);
35:	static size_t sdev_format_header(char *, size_t, const char *, int);

File drivers/scsi/scsi_netlink.c:
136:	void scsi_netlink_exit(void);
112:	void scsi_netlink_init(void);
32:	static void scsi_nl_rcv_msg(struct sk_buff *);

File drivers/scsi/scsi_pm.c:
298:	int scsi_autopm_get_device(struct scsi_device *);
327:	int scsi_autopm_get_host(struct Scsi_Host *);
317:	void scsi_autopm_get_target(struct scsi_target *);
311:	void scsi_autopm_put_device(struct scsi_device *);
339:	void scsi_autopm_put_host(struct Scsi_Host *);
322:	void scsi_autopm_put_target(struct scsi_target *);
136:	static void async_sdev_restore(void *, async_cookie_t);
126:	static void async_sdev_resume(void *, async_cookie_t);
131:	static void async_sdev_thaw(void *, async_cookie_t);
28:	static int do_scsi_freeze(struct device *, const struct dev_pm_ops *);
33:	static int do_scsi_poweroff(struct device *, const struct dev_pm_ops *);
48:	static int do_scsi_restore(struct device *, const struct dev_pm_ops *);
38:	static int do_scsi_resume(struct device *, const struct dev_pm_ops *);
23:	static int do_scsi_suspend(struct device *, const struct dev_pm_ops *);
43:	static int do_scsi_thaw(struct device *, const struct dev_pm_ops *);
195:	static int scsi_bus_freeze(struct device *);
205:	static int scsi_bus_poweroff(struct device *);
176:	static int scsi_bus_prepare(struct device *);
210:	static int scsi_bus_restore(struct device *);
190:	static int scsi_bus_resume(struct device *);
141:	static int scsi_bus_resume_common(struct device *, int (*)(struct device *, const struct dev_pm_ops *));
185:	static int scsi_bus_suspend(struct device *);
200:	static int scsi_bus_thaw(struct device *);
72:	static int scsi_dev_type_resume(struct device *, int (*)(struct device *, const struct dev_pm_ops *));
53:	static int scsi_dev_type_suspend(struct device *, int (*)(struct device *, const struct dev_pm_ops *));
283:	static int scsi_runtime_idle(struct device *);
270:	static int scsi_runtime_resume(struct device *);
243:	static int scsi_runtime_suspend(struct device *);

File drivers/scsi/scsi_proc.c:
473:	void scsi_exit_procfs(void);
450:	int scsi_init_procfs(void);
138:	void scsi_proc_host_add(struct Scsi_Host *);
160:	void scsi_proc_host_rm(struct Scsi_Host *);
101:	void scsi_proc_hostdir_add(struct scsi_host_template *);
120:	void scsi_proc_hostdir_rm(struct scsi_host_template *);
178:	static int proc_print_scsidevice(struct device *, void *);
80:	static int proc_scsi_host_open(struct inode *, struct file *);
49:	static ssize_t proc_scsi_host_write(struct file *, const char *, size_t, loff_t *);
430:	static int proc_scsi_open(struct inode *, struct file *);
74:	static int proc_scsi_show(struct seq_file *, void *);
310:	static ssize_t proc_scsi_write(struct file *, const char *, size_t, loff_t *);
396:	static void *scsi_seq_next(struct seq_file *, void *, loff_t *);
408:	static int scsi_seq_show(struct seq_file *, void *);
383:	static void *scsi_seq_start(struct seq_file *, loff_t *);
403:	static void scsi_seq_stop(struct seq_file *, void *);

File drivers/scsi/scsi_scan.c:
1460:	struct scsi_device *__scsi_add_device(struct Scsi_Host *, uint, uint, u64, void *);
1496:	int scsi_add_device(struct Scsi_Host *, uint, uint, u64);
133:	int scsi_complete_async_scans(void);
1862:	void scsi_forget_host(struct Scsi_Host *);
1928:	void scsi_free_host_dev(struct scsi_device *);
1896:	struct scsi_device *scsi_get_host_dev(struct Scsi_Host *);
338:	int scsi_is_target_device(const struct device *);
1509:	void scsi_rescan_device(struct device *);
533:	void scsi_sanitize_inquiry_string(unsigned char *, int);
1836:	void scsi_scan_host(struct Scsi_Host *);
1658:	int scsi_scan_host_selected(struct Scsi_Host *, unsigned int, unsigned int, u64, enum scsi_scan_mode);
1602:	void scsi_scan_target(struct device *, unsigned int, unsigned int, u64, enum scsi_scan_mode);
507:	void scsi_target_reap(struct scsi_target *);
1531:	static void __scsi_scan_target(struct device *, unsigned int, unsigned int, u64, enum scsi_scan_mode);
1823:	static void do_scan_async(void *, async_cookie_t);
1808:	static void do_scsi_scan_host(struct Scsi_Host *);
764:	static int scsi_add_lun(struct scsi_device *, unsigned char *, blist_flags_t *, int);
215:	static struct scsi_device *scsi_alloc_sdev(struct scsi_target *, u64, void *);
409:	static struct scsi_target *scsi_alloc_target(struct device *, int, uint);
1765:	static void scsi_finish_async_scan(struct async_scan_data *);
1716:	static struct async_scan_data *scsi_prep_async_scan(struct Scsi_Host *);
1043:	static int scsi_probe_and_add_lun(struct scsi_target *, u64, blist_flags_t *, struct scsi_device **, enum scsi_scan_mode, void *);
560:	static int scsi_probe_lun(struct scsi_device *, unsigned char *, blist_flags_t *, int);
1289:	static int scsi_report_lun_scan(struct scsi_target *, blist_flags_t, enum scsi_scan_mode);
1626:	static void scsi_scan_channel(struct Scsi_Host *, unsigned int, unsigned int, u64, enum scsi_scan_mode);
307:	static void scsi_target_destroy(struct scsi_target *);
324:	static void scsi_target_dev_release(struct device *);

File drivers/scsi/scsi_sysctl.c:
48:	void scsi_exit_sysctl(void);
40:	int scsi_init_sysctl(void);

File drivers/scsi/scsi_sysfs.c:
1420:	void __scsi_remove_device(struct scsi_device *);
46:	const char *scsi_device_state_name(enum scsi_device_state);
72:	const char *scsi_host_state_name(enum scsi_host_state);
1662:	int scsi_is_sdev_device(const struct device *);
1574:	int scsi_register_driver(struct device_driver *);
1582:	int scsi_register_interface(struct class_interface *);
1496:	void scsi_remove_device(struct scsi_device *);
1545:	void scsi_remove_target(struct device *);
1594:	int scsi_sysfs_add_host(struct Scsi_Host *);
1350:	int scsi_sysfs_add_sdev(struct scsi_device *);
1619:	void scsi_sysfs_device_initialize(struct scsi_device *);
564:	int scsi_sysfs_register(void);
578:	void scsi_sysfs_unregister(void);
1506:	static void __scsi_remove_target(struct scsi_target *);
528:	static int scsi_bus_match(struct device *, struct device_driver *);
541:	static int scsi_bus_uevent(struct device *, struct kobj_uevent_env *);
437:	static void scsi_device_cls_release(struct device *);
510:	static void scsi_device_dev_release(struct device *);
445:	static void scsi_device_dev_release_usercontext(struct work_struct *);
132:	static int scsi_scan(struct Scsi_Host *, const char *);
1215:	static umode_t scsi_sdev_attr_is_visible(struct kobject *, struct attribute *, int);
1241:	static umode_t scsi_sdev_bin_attr_is_visible(struct kobject *, struct bin_attribute *, int);
1148:	static ssize_t sdev_show_access_state(struct device *, struct device_attribute *, char *);
1066:	static ssize_t sdev_show_blacklist(struct device *, struct device_attribute *, char *);
687:	static ssize_t sdev_show_device_blocked(struct device *, struct device_attribute *, char *);
678:	static ssize_t sdev_show_device_busy(struct device *, struct device_attribute *, char *);
1096:	static ssize_t sdev_show_dh_state(struct device *, struct device_attribute *, char *);
720:	static ssize_t sdev_show_eh_timeout(struct device *, struct device_attribute *, char *);
1008:	static ssize_t sdev_show_evt_capacity_change_reported(struct device *, struct device_attribute *, char *);
1007:	static ssize_t sdev_show_evt_inquiry_change_reported(struct device *, struct device_attribute *, char *);
1011:	static ssize_t sdev_show_evt_lun_change_reported(struct device *, struct device_attribute *, char *);
1006:	static ssize_t sdev_show_evt_media_change(struct device *, struct device_attribute *, char *);
1010:	static ssize_t sdev_show_evt_mode_parameter_change_reported(struct device *, struct device_attribute *, char *);
1009:	static ssize_t sdev_show_evt_soft_threshold_reached(struct device *, struct device_attribute *, char *);
965:	static ssize_t sdev_show_modalias(struct device *, struct device_attribute *, char *);
674:	static ssize_t sdev_show_model(struct device *, struct device_attribute *, char *);
1168:	static ssize_t sdev_show_preferred_path(struct device *, struct device_attribute *, char *);
1037:	static ssize_t sdev_show_queue_depth(struct device *, struct device_attribute *, char *);
1186:	static ssize_t sdev_show_queue_ramp_up_period(struct device *, struct device_attribute *, char *);
675:	static ssize_t sdev_show_rev(struct device *, struct device_attribute *, char *);
672:	static ssize_t sdev_show_scsi_level(struct device *, struct device_attribute *, char *);
699:	static ssize_t sdev_show_timeout(struct device *, struct device_attribute *, char *);
671:	static ssize_t sdev_show_type(struct device *, struct device_attribute *, char *);
673:	static ssize_t sdev_show_vendor(struct device *, struct device_attribute *, char *);
1043:	static ssize_t sdev_show_wwid(struct device *, struct device_attribute *, char *);
758:	static ssize_t sdev_store_delete(struct device *, struct device_attribute *, const char *, size_t);
1108:	static ssize_t sdev_store_dh_state(struct device *, struct device_attribute *, const char *, size_t);
728:	static ssize_t sdev_store_eh_timeout(struct device *, struct device_attribute *, const char *, size_t);
1008:	static ssize_t sdev_store_evt_capacity_change_reported(struct device *, struct device_attribute *, const char *, size_t);
1007:	static ssize_t sdev_store_evt_inquiry_change_reported(struct device *, struct device_attribute *, const char *, size_t);
1011:	static ssize_t sdev_store_evt_lun_change_reported(struct device *, struct device_attribute *, const char *, size_t);
1006:	static ssize_t sdev_store_evt_media_change(struct device *, struct device_attribute *, const char *, size_t);
1010:	static ssize_t sdev_store_evt_mode_parameter_change_reported(struct device *, struct device_attribute *, const char *, size_t);
1009:	static ssize_t sdev_store_evt_soft_threshold_reached(struct device *, struct device_attribute *, const char *, size_t);
1014:	static ssize_t sdev_store_queue_depth(struct device *, struct device_attribute *, const char *, size_t);
1197:	static ssize_t sdev_store_queue_ramp_up_period(struct device *, struct device_attribute *, const char *, size_t);
707:	static ssize_t sdev_store_timeout(struct device *, struct device_attribute *, const char *, size_t);
373:	static ssize_t show_can_queue(struct device *, struct device_attribute *, char *);
372:	static ssize_t show_cmd_per_lun(struct device *, struct device_attribute *, char *);
382:	static ssize_t show_host_busy(struct device *, struct device_attribute *, char *);
917:	static ssize_t show_inquiry(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t, size_t);
941:	static ssize_t show_iostat_counterbits(struct device *, struct device_attribute *, char *);
961:	static ssize_t show_iostat_iodone_cnt(struct device *, struct device_attribute *, char *);
962:	static ssize_t show_iostat_ioerr_cnt(struct device *, struct device_attribute *, char *);
960:	static ssize_t show_iostat_iorequest_cnt(struct device *, struct device_attribute *, char *);
397:	static ssize_t show_nr_hw_queues(struct device *, struct device_attribute *, char *);
379:	static ssize_t show_proc_name(struct device *, struct device_attribute *, char *);
377:	static ssize_t show_prot_capabilities(struct device *, struct device_attribute *, char *);
378:	static ssize_t show_prot_guard_type(struct device *, struct device_attribute *, char *);
858:	static ssize_t show_queue_type_field(struct device *, struct device_attribute *, char *);
375:	static ssize_t show_sg_prot_tablesize(struct device *, struct device_attribute *, char *);
374:	static ssize_t show_sg_tablesize(struct device *, struct device_attribute *, char *);
270:	static ssize_t show_shost_active_mode(struct device *, struct device_attribute *, char *);
320:	static ssize_t show_shost_eh_deadline(struct device *, struct device_attribute *, char *);
238:	static ssize_t show_shost_mode(unsigned int, char *);
222:	static ssize_t show_shost_state(struct device *, struct device_attribute *, char *);
254:	static ssize_t show_shost_supported_mode(struct device *, struct device_attribute *, char *);
844:	static ssize_t show_state_field(struct device *, struct device_attribute *, char *);
376:	static ssize_t show_unchecked_isa_dma(struct device *, struct device_attribute *, char *);
371:	static ssize_t show_unique_id(struct device *, struct device_attribute *, char *);
390:	static ssize_t show_use_blk_mq(struct device *, struct device_attribute *, char *);
915:	static ssize_t show_vpd_pg0(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t, size_t);
913:	static ssize_t show_vpd_pg80(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t, size_t);
912:	static ssize_t show_vpd_pg83(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t, size_t);
914:	static ssize_t show_vpd_pg89(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t, size_t);
294:	static ssize_t store_host_reset(struct device *, struct device_attribute *, const char *, size_t);
871:	static ssize_t store_queue_type_field(struct device *, struct device_attribute *, const char *, size_t);
749:	static ssize_t store_rescan_field(struct device *, struct device_attribute *, const char *, size_t);
184:	static ssize_t store_scan(struct device *, struct device_attribute *, const char *, size_t);
331:	static ssize_t store_shost_eh_deadline(struct device *, struct device_attribute *, const char *, size_t);
198:	static ssize_t store_shost_state(struct device *, struct device_attribute *, const char *, size_t);
793:	static ssize_t store_state_field(struct device *, struct device_attribute *, const char *, size_t);

File drivers/scsi/scsi_trace.c:
354:	const char *scsi_trace_parse_cdb(struct trace_seq *, unsigned char *, int);
177:	static const char *scsi_trace_maintenance_in(struct trace_seq *, unsigned char *, int);
94:	static const char *scsi_trace_rw32(struct trace_seq *, unsigned char *, int);

File drivers/scsi/scsicam.c:
33:	unsigned char *scsi_bios_ptable(struct block_device *);
61:	bool scsi_partsize(struct block_device *, sector_t, int *);
219:	int scsicam_bios_param(struct block_device *, sector_t, int *);

File drivers/sfi/sfi_acpi.c:
116:	int sfi_acpi_init(void);
201:	void sfi_acpi_sysfs_init(void);
152:	int sfi_acpi_table_parse(char *, char *, char *, int (*)(struct acpi_table_header *));
127:	static struct acpi_table_header *sfi_acpi_get_table(struct sfi_table_key *);
97:	static int sfi_acpi_parse_xsdt(struct sfi_table_header *);
175:	static ssize_t sfi_acpi_table_show(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t, size_t);

File drivers/sfi/sfi_core.c:
232:	struct sfi_table_header *sfi_check_table(u64, struct sfi_table_key *);
260:	struct sfi_table_header *sfi_get_table(struct sfi_table_key *);
485:	void sfi_init(void);
501:	void sfi_init_late(void);
275:	void sfi_put_table(struct sfi_table_header *);
419:	struct sfi_table_attr *sfi_sysfs_install_table(u64);
281:	int sfi_table_parse(char *, char *, char *, sfi_table_handler);
341:	static int sfi_find_syst(void);
99:	static void *sfi_map_memory(u64, u32);
165:	static struct sfi_table_header *sfi_map_table(u64);
121:	static void sfi_print_table_header(unsigned long long, struct sfi_table_header *);
454:	static int sfi_sysfs_init(void);
390:	static ssize_t sfi_table_show(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t, size_t);
110:	static void sfi_unmap_memory(void *, u32);
193:	static void sfi_unmap_table(struct sfi_table_header *);
134:	static int sfi_verify_table(struct sfi_table_header *);

File drivers/spi/spi-mem.c:
583:	struct spi_mem_dirmap_desc *devm_spi_mem_dirmap_create(struct device *, struct spi_mem *, const struct spi_mem_dirmap_info *);
624:	void devm_spi_mem_dirmap_destroy(struct device *, struct spi_mem_dirmap_desc *);
34:	int spi_controller_dma_map_mem_op_data(struct spi_controller *, const struct spi_mem_op *, struct sg_table *);
80:	void spi_controller_dma_unmap_mem_op_data(struct spi_controller *, const struct spi_mem_op *, struct sg_table *);
424:	int spi_mem_adjust_op_size(struct spi_mem *, struct spi_mem_op *);
140:	bool spi_mem_default_supports_op(struct spi_mem *, const struct spi_mem_op *);
504:	struct spi_mem_dirmap_desc *spi_mem_dirmap_create(struct spi_mem *, const struct spi_mem_dirmap_info *);
552:	void spi_mem_dirmap_destroy(struct spi_mem_dirmap_desc *);
648:	ssize_t spi_mem_dirmap_read(struct spi_mem_dirmap_desc *, u64, size_t, void *);
694:	ssize_t spi_mem_dirmap_write(struct spi_mem_dirmap_desc *, u64, size_t, const void *);
784:	int spi_mem_driver_register_with_owner(struct spi_mem_driver *, struct module *);
801:	void spi_mem_driver_unregister(struct spi_mem_driver *);
282:	int spi_mem_exec_op(struct spi_mem *, const struct spi_mem_op *);
403:	const char *spi_mem_get_name(struct spi_mem *);
222:	bool spi_mem_supports_op(struct spi_mem *, const struct spi_mem_op *);
605:	static int devm_spi_mem_dirmap_match(struct device *, void *, void *);
563:	static void devm_spi_mem_dirmap_release(struct device *, void *);
102:	static int spi_check_buswidth_req(u8, bool, struct spi_mem *, struct spi_mem *);
231:	static int spi_mem_access_start(struct spi_mem *, struct spi_mem *);
169:	static bool spi_mem_buswidth_is_valid(u8);
177:	static int spi_mem_check_op(const struct spi_mem_op *);
729:	static int spi_mem_probe(struct spi_device *);
754:	static int spi_mem_remove(struct spi_device *);
765:	static void spi_mem_shutdown(struct spi_device *);

File drivers/spi/spi.c:
2490:	struct spi_controller *__devm_spi_alloc_controller(struct device *, unsigned int, bool);
2441:	struct spi_controller *__spi_alloc_controller(struct device *, unsigned int, bool);
440:	int __spi_register_driver(struct module *, struct spi_driver *);
2829:	int devm_spi_register_controller(struct device *, struct spi_controller *);
564:	int spi_add_device(struct spi_device *);
498:	struct spi_device *spi_alloc_device(struct spi_controller *);
3718:	int spi_async(struct spi_device *, struct spi_message *);
3772:	int spi_async_locked(struct spi_device *, struct spi_message *);
3929:	int spi_bus_lock(struct spi_controller *);
3958:	int spi_bus_unlock(struct spi_controller *);
2963:	struct spi_controller *spi_busnum_to_master(u16);
2927:	int spi_controller_resume(struct spi_controller *);
2911:	int spi_controller_suspend(struct spi_controller *);
1207:	int spi_delay_exec(struct spi_delay *, struct spi_transfer *);
1172:	int spi_delay_to_ns(struct spi_delay *, struct spi_transfer *);
1724:	void spi_finalize_current_message(struct spi_controller *);
1365:	void spi_finalize_current_transfer(struct spi_controller *);
1929:	void spi_flush_queue(struct spi_controller *);
330:	const struct spi_device_id *spi_get_device_id(const struct spi_device *);
1702:	struct spi_message *spi_get_next_queued_message(struct spi_controller *);
862:	int spi_map_buf(struct spi_controller *, struct device *, struct sg_table *, void *, size_t, enum dma_data_direction);
647:	struct spi_device *spi_new_device(struct spi_controller *, struct spi_board_info *);
760:	int spi_register_board_info(const struct spi_board_info *, unsigned int);
2671:	int spi_register_controller(struct spi_controller *);
3101:	struct spi_replaced_transfers *spi_replace_transfers(struct spi_message *, struct spi_transfer *, size_t, size_t, spi_replaced_release_t, size_t, gfp_t);
3034:	void spi_res_add(struct spi_message *, void *);
2995:	void *spi_res_alloc(struct spi_device *, spi_res_release_t, size_t, gfp_t);
3017:	void spi_res_free(void *);
3048:	void spi_res_release(struct spi_controller *, struct spi_message *);
3455:	int spi_set_cs_timing(struct spi_device *, struct spi_delay *, struct spi_delay *, struct spi_delay *);
3339:	int spi_setup(struct spi_device *);
3272:	int spi_split_transfers_maxsize(struct spi_controller *, struct spi_message *, size_t, gfp_t);
288:	void spi_statistics_add_transfer_stats(struct spi_statistics *, struct spi_transfer *, struct spi_controller *);
3880:	int spi_sync(struct spi_device *, struct spi_message *);
3908:	int spi_sync_locked(struct spi_device *, struct spi_message *);
1617:	void spi_take_timestamp_post(struct spi_controller *, struct spi_transfer *, size_t, bool);
1580:	void spi_take_timestamp_pre(struct spi_controller *, struct spi_transfer *, size_t, bool);
943:	void spi_unmap_buf(struct spi_controller *, struct device *, struct sg_table *, enum dma_data_direction);
2869:	void spi_unregister_controller(struct spi_controller *);
707:	void spi_unregister_device(struct spi_device *);
3993:	int spi_write_then_read(struct spi_device *, const void *, unsigned int, void *, unsigned int);
3658:	static int __spi_async(struct spi_device *, struct spi_message *);
2942:	static int __spi_controller_match(struct device *, const void *);
1392:	static void __spi_pump_messages(struct spi_controller *, bool);
1854:	static int __spi_queued_transfer(struct spi_message *, bool, struct spi_device *, struct spi_device *);
3067:	static void __spi_replace_transfers_release(struct spi_controller *, struct spi_message *, void *);
3196:	static int __spi_split_transfer_maxsize(struct spi_controller *, struct spi_message *, struct spi_transfer **, size_t, gfp_t);
3805:	static int __spi_sync(struct spi_device *, struct spi_message *);
1000:	static int __spi_unmap_msg(struct spi_controller *, struct spi_message *);
3514:	static int __spi_validate(struct spi_device *, struct spi_message *);
2851:	static int __unregister(struct device *, void *);
2199:	static acpi_status acpi_register_spi_device(struct spi_controller *, struct acpi_device *);
2268:	static acpi_status acpi_spi_add_device(acpi_handle, u32, void *, void **);
2140:	static int acpi_spi_add_resource(struct acpi_resource *, void *);
4162:	static int acpi_spi_notify(struct notifier_block *, unsigned long, void *);
2111:	static void acpi_spi_parse_apple_properties(struct acpi_device *, struct acpi_spi_lookup *);
2470:	static void devm_spi_release_controller(struct device *, void *);
2811:	static void devm_spi_unregister(struct device *, void *);
101:	static ssize_t driver_override_show(struct device *, struct device_attribute *, char *);
69:	static ssize_t driver_override_store(struct device *, struct device_attribute *, const char *, size_t);
56:	static ssize_t modalias_show(struct device *, struct device_attribute *, char *);
4134:	static int spi_acpi_controller_match(struct device *, const void *);
3800:	static void spi_complete(void *);
166:	static ssize_t spi_controller_bytes_rx_show(struct device *, struct device_attribute *, char *);
165:	static ssize_t spi_controller_bytes_show(struct device *, struct device_attribute *, char *);
167:	static ssize_t spi_controller_bytes_tx_show(struct device *, struct device_attribute *, char *);
158:	static ssize_t spi_controller_errors_show(struct device *, struct device_attribute *, char *);
1890:	static int spi_controller_initialize_queue(struct spi_controller *);
156:	static ssize_t spi_controller_messages_show(struct device *, struct device_attribute *, char *);
2301:	static void spi_controller_release(struct device *);
163:	static ssize_t spi_controller_spi_async_show(struct device *, struct device_attribute *, char *);
162:	static ssize_t spi_controller_spi_sync_immediate_show(struct device *, struct device_attribute *, char *);
161:	static ssize_t spi_controller_spi_sync_show(struct device *, struct device_attribute *, char *);
159:	static ssize_t spi_controller_timedout_show(struct device *, struct device_attribute *, char *);
173:	static ssize_t spi_controller_transfer_bytes_histo0_show(struct device *, struct device_attribute *, char *);
183:	static ssize_t spi_controller_transfer_bytes_histo10_show(struct device *, struct device_attribute *, char *);
184:	static ssize_t spi_controller_transfer_bytes_histo11_show(struct device *, struct device_attribute *, char *);
185:	static ssize_t spi_controller_transfer_bytes_histo12_show(struct device *, struct device_attribute *, char *);
186:	static ssize_t spi_controller_transfer_bytes_histo13_show(struct device *, struct device_attribute *, char *);
187:	static ssize_t spi_controller_transfer_bytes_histo14_show(struct device *, struct device_attribute *, char *);
188:	static ssize_t spi_controller_transfer_bytes_histo15_show(struct device *, struct device_attribute *, char *);
189:	static ssize_t spi_controller_transfer_bytes_histo16_show(struct device *, struct device_attribute *, char *);
174:	static ssize_t spi_controller_transfer_bytes_histo1_show(struct device *, struct device_attribute *, char *);
175:	static ssize_t spi_controller_transfer_bytes_histo2_show(struct device *, struct device_attribute *, char *);
176:	static ssize_t spi_controller_transfer_bytes_histo3_show(struct device *, struct device_attribute *, char *);
177:	static ssize_t spi_controller_transfer_bytes_histo4_show(struct device *, struct device_attribute *, char *);
178:	static ssize_t spi_controller_transfer_bytes_histo5_show(struct device *, struct device_attribute *, char *);
179:	static ssize_t spi_controller_transfer_bytes_histo6_show(struct device *, struct device_attribute *, char *);
180:	static ssize_t spi_controller_transfer_bytes_histo7_show(struct device *, struct device_attribute *, char *);
181:	static ssize_t spi_controller_transfer_bytes_histo8_show(struct device *, struct device_attribute *, char *);
182:	static ssize_t spi_controller_transfer_bytes_histo9_show(struct device *, struct device_attribute *, char *);
157:	static ssize_t spi_controller_transfers_show(struct device *, struct device_attribute *, char *);
191:	static ssize_t spi_controller_transfers_split_maxsize_show(struct device *, struct device_attribute *, char *);
1832:	static int spi_destroy_queue(struct spi_controller *);
538:	static int spi_dev_check(struct device *, void *);
166:	static ssize_t spi_device_bytes_rx_show(struct device *, struct device_attribute *, char *);
165:	static ssize_t spi_device_bytes_show(struct device *, struct device_attribute *, char *);
167:	static ssize_t spi_device_bytes_tx_show(struct device *, struct device_attribute *, char *);
158:	static ssize_t spi_device_errors_show(struct device *, struct device_attribute *, char *);
156:	static ssize_t spi_device_messages_show(struct device *, struct device_attribute *, char *);
163:	static ssize_t spi_device_spi_async_show(struct device *, struct device_attribute *, char *);
162:	static ssize_t spi_device_spi_sync_immediate_show(struct device *, struct device_attribute *, char *);
161:	static ssize_t spi_device_spi_sync_show(struct device *, struct device_attribute *, char *);
159:	static ssize_t spi_device_timedout_show(struct device *, struct device_attribute *, char *);
173:	static ssize_t spi_device_transfer_bytes_histo0_show(struct device *, struct device_attribute *, char *);
183:	static ssize_t spi_device_transfer_bytes_histo10_show(struct device *, struct device_attribute *, char *);
184:	static ssize_t spi_device_transfer_bytes_histo11_show(struct device *, struct device_attribute *, char *);
185:	static ssize_t spi_device_transfer_bytes_histo12_show(struct device *, struct device_attribute *, char *);
186:	static ssize_t spi_device_transfer_bytes_histo13_show(struct device *, struct device_attribute *, char *);
187:	static ssize_t spi_device_transfer_bytes_histo14_show(struct device *, struct device_attribute *, char *);
188:	static ssize_t spi_device_transfer_bytes_histo15_show(struct device *, struct device_attribute *, char *);
189:	static ssize_t spi_device_transfer_bytes_histo16_show(struct device *, struct device_attribute *, char *);
174:	static ssize_t spi_device_transfer_bytes_histo1_show(struct device *, struct device_attribute *, char *);
175:	static ssize_t spi_device_transfer_bytes_histo2_show(struct device *, struct device_attribute *, char *);
176:	static ssize_t spi_device_transfer_bytes_histo3_show(struct device *, struct device_attribute *, char *);
177:	static ssize_t spi_device_transfer_bytes_histo4_show(struct device *, struct device_attribute *, char *);
178:	static ssize_t spi_device_transfer_bytes_histo5_show(struct device *, struct device_attribute *, char *);
179:	static ssize_t spi_device_transfer_bytes_histo6_show(struct device *, struct device_attribute *, char *);
180:	static ssize_t spi_device_transfer_bytes_histo7_show(struct device *, struct device_attribute *, char *);
181:	static ssize_t spi_device_transfer_bytes_histo8_show(struct device *, struct device_attribute *, char *);
182:	static ssize_t spi_device_transfer_bytes_histo9_show(struct device *, struct device_attribute *, char *);
157:	static ssize_t spi_device_transfers_show(struct device *, struct device_attribute *, char *);
191:	static ssize_t spi_device_transfers_split_maxsize_show(struct device *, struct device_attribute *, char *);
382:	static int spi_drv_probe(struct device *);
413:	static int spi_drv_remove(struct device *);
425:	static void spi_drv_shutdown(struct device *);
2558:	static int spi_get_gpio_descs(struct spi_controller *);
4201:	static int spi_init(void);
1063:	static int spi_map_msg(struct spi_controller *, struct spi_message *);
338:	static int spi_match_device(struct device *, struct device_driver *);
1551:	static void spi_pump_messages(struct kthread_work *);
1885:	static int spi_queued_transfer(struct spi_device *, struct spi_message *);
796:	static void spi_set_cs(struct spi_device *, bool, bool);
1659:	static void spi_set_thread_rt(struct spi_controller *);
1798:	static int spi_stop_queue(struct spi_controller *);
1256:	static int spi_transfer_one_message(struct spi_controller *, struct spi_message *);
361:	static int spi_uevent(struct device *, struct kobj_uevent_env *);
46:	static void spidev_release(struct device *);

File drivers/thermal/gov_bang_bang.c:
99:	static int bang_bang_control(struct thermal_zone_device *, int);
16:	static void thermal_zone_trip_update(struct thermal_zone_device *, int);

File drivers/thermal/gov_fair_share.c:
78:	static int fair_share_throttle(struct thermal_zone_device *, int);

File drivers/thermal/gov_step_wise.c:
186:	static int step_wise_throttle(struct thermal_zone_device *, int);
116:	static void thermal_zone_trip_update(struct thermal_zone_device *, int);

File drivers/thermal/gov_user_space.c:
25:	static int notify_user_space(struct thermal_zone_device *, int);

File drivers/thermal/thermal_core.c:
1219:	struct thermal_cooling_device *devm_thermal_of_cooling_device_register(struct device *, struct device_node *, char *, void *, const struct thermal_cooling_device_ops *);
722:	int for_each_thermal_cooling_device(int (*)(struct thermal_cooling_device *, void *), void *);
705:	int for_each_thermal_governor(int (*)(struct thermal_governor *, void *), void *);
739:	int for_each_thermal_zone(int (*)(struct thermal_zone_device *, void *), void *);
615:	int power_actor_get_max_power(struct thermal_cooling_device *, u32 *);
635:	int power_actor_get_min_power(struct thermal_cooling_device *, u32 *);
663:	int power_actor_set_power(struct thermal_cooling_device *, struct thermal_instance *, u32);
223:	int thermal_build_list_of_policies(char *);
1164:	struct thermal_cooling_device *thermal_cooling_device_register(const char *, void *, const struct thermal_cooling_device_ops *);
1261:	void thermal_cooling_device_unregister(struct thermal_cooling_device *);
583:	void thermal_notify_framework(struct thermal_zone_device *, int);
1187:	struct thermal_cooling_device *thermal_of_cooling_device_register(struct device_node *, const char *, void *, const struct thermal_cooling_device_ops *);
119:	int thermal_register_governor(struct thermal_governor *);
173:	void thermal_unregister_governor(struct thermal_governor *);
821:	int thermal_zone_bind_cooling_device(struct thermal_zone_device *, int, struct thermal_cooling_device *, unsigned long, unsigned long, unsigned int);
527:	int thermal_zone_device_disable(struct thermal_zone_device *);
521:	int thermal_zone_device_enable(struct thermal_zone_device *);
533:	int thermal_zone_device_is_enabled(struct thermal_zone_device *);
685:	void thermal_zone_device_rebind_exception(struct thermal_zone_device *, const char *, size_t);
1375:	struct thermal_zone_device *thermal_zone_device_register(const char *, int, int, void *, struct thermal_zone_device_ops *, struct thermal_zone_params *, int, int);
199:	int thermal_zone_device_set_policy(struct thermal_zone_device *, char *);
772:	void thermal_zone_device_unbind_exception(struct thermal_zone_device *, const char *, size_t);
1516:	void thermal_zone_device_unregister(struct thermal_zone_device *);
546:	void thermal_zone_device_update(struct thermal_zone_device *, enum thermal_notify_event);
756:	struct thermal_zone_device *thermal_zone_get_by_id(int);
1584:	struct thermal_zone_device *thermal_zone_get_zone_by_name(const char *);
946:	int thermal_zone_unbind_cooling_device(struct thermal_zone_device *, int, struct thermal_cooling_device *);
1008:	static void __bind(struct thermal_zone_device *, int, struct thermal_cooling_device *, unsigned long *, unsigned int);
53:	static struct thermal_governor *__find_governor(const char *);
1089:	static struct thermal_cooling_device *__thermal_cooling_device_register(struct device_node *, const char *, void *, const struct thermal_cooling_device_ops *);
1034:	static void bind_cdev(struct thermal_cooling_device *);
1310:	static void bind_tz(struct thermal_zone_device *);
382:	static void handle_critical_trips(struct thermal_zone_device *, int, enum thermal_trip_type);
416:	static void handle_thermal_trip(struct thermal_zone_device *, int);
1195:	static void thermal_cooling_device_release(struct device *, void *);
1646:	static int thermal_init(void);
1612:	static int thermal_pm_notify(struct notifier_block *, unsigned long, void *);
978:	static void thermal_release(struct device *);
97:	static int thermal_set_governor(struct thermal_zone_device *, struct thermal_governor *);
589:	static void thermal_zone_device_check(struct work_struct *);
489:	static int thermal_zone_device_set_mode(struct thermal_zone_device *, enum thermal_device_mode);
290:	static void thermal_zone_device_set_polling(struct thermal_zone_device *, int);
450:	static void update_temperature(struct thermal_zone_device *);

File drivers/thermal/thermal_helpers.c:
45:	struct thermal_instance *get_thermal_instance(struct thermal_zone_device *, struct thermal_cooling_device *, int);
26:	int get_tz_trend(struct thermal_zone_device *, int);
188:	void thermal_cdev_update(struct thermal_cooling_device *);
241:	int thermal_zone_get_offset(struct thermal_zone_device *);
226:	int thermal_zone_get_slope(struct thermal_zone_device *);
78:	int thermal_zone_get_temp(struct thermal_zone_device *, int *);
129:	void thermal_zone_set_trips(struct thermal_zone_device *);

File drivers/thermal/thermal_hwmon.c:
259:	int devm_thermal_add_hwmon_sysfs(struct thermal_zone_device *);
132:	int thermal_add_hwmon_sysfs(struct thermal_zone_device *);
216:	void thermal_remove_hwmon_sysfs(struct thermal_zone_device *);
254:	static void devm_thermal_hwmon_release(struct device *, void *);
69:	static ssize_t temp_crit_show(struct device *, struct device_attribute *, char *);
49:	static ssize_t temp_input_show(struct device *, struct device_attribute *, char *);
89:	static struct thermal_hwmon_device *thermal_hwmon_lookup_by_type(const struct thermal_zone_device *);

File drivers/thermal/thermal_sysfs.c:
947:	void thermal_cooling_device_destroy_sysfs(struct thermal_cooling_device *);
941:	void thermal_cooling_device_setup_sysfs(struct thermal_cooling_device *);
607:	int thermal_zone_create_device_groups(struct thermal_zone_device *, int);
639:	void thermal_zone_destroy_device_groups(struct thermal_zone_device *);
954:	ssize_t trip_point_show(struct device *, struct device_attribute *, char *);
968:	ssize_t weight_show(struct device *, struct device_attribute *, char *);
977:	ssize_t weight_store(struct device *, struct device_attribute *, const char *, size_t);
288:	static ssize_t available_policies_show(struct device *, struct device_attribute *, char *);
652:	static ssize_t cdev_type_show(struct device *, struct device_attribute *, char *);
493:	static int create_trip_attrs(struct thermal_zone_device *, int);
672:	static ssize_t cur_state_show(struct device *, struct device_attribute *, char *);
686:	static ssize_t cur_state_store(struct device *, struct device_attribute *, const char *, size_t);
296:	static ssize_t emul_temp_store(struct device *, struct device_attribute *, const char *, size_t);
388:	static ssize_t integral_cutoff_show(struct device *, struct device_attribute *, char *);
388:	static ssize_t integral_cutoff_store(struct device *, struct device_attribute *, const char *, size_t);
387:	static ssize_t k_d_show(struct device *, struct device_attribute *, char *);
387:	static ssize_t k_d_store(struct device *, struct device_attribute *, const char *, size_t);
386:	static ssize_t k_i_show(struct device *, struct device_attribute *, char *);
386:	static ssize_t k_i_store(struct device *, struct device_attribute *, const char *, size_t);
384:	static ssize_t k_po_show(struct device *, struct device_attribute *, char *);
384:	static ssize_t k_po_store(struct device *, struct device_attribute *, const char *, size_t);
385:	static ssize_t k_pu_show(struct device *, struct device_attribute *, char *);
385:	static ssize_t k_pu_store(struct device *, struct device_attribute *, const char *, size_t);
659:	static ssize_t max_state_show(struct device *, struct device_attribute *, char *);
49:	static ssize_t mode_show(struct device *, struct device_attribute *, char *);
58:	static ssize_t mode_store(struct device *, struct device_attribute *, const char *, size_t);
390:	static ssize_t offset_show(struct device *, struct device_attribute *, char *);
390:	static ssize_t offset_store(struct device *, struct device_attribute *, const char *, size_t);
254:	static ssize_t passive_show(struct device *, struct device_attribute *, char *);
220:	static ssize_t passive_store(struct device *, struct device_attribute *, const char *, size_t);
280:	static ssize_t policy_show(struct device *, struct device_attribute *, char *);
263:	static ssize_t policy_store(struct device *, struct device_attribute *, const char *, size_t);
389:	static ssize_t slope_show(struct device *, struct device_attribute *, char *);
389:	static ssize_t slope_store(struct device *, struct device_attribute *, const char *, size_t);
323:	static ssize_t sustainable_power_show(struct device *, struct device_attribute *, char *);
335:	static ssize_t sustainable_power_store(struct device *, struct device_attribute *, const char *, size_t);
35:	static ssize_t temp_show(struct device *, struct device_attribute *, char *);
447:	static umode_t thermal_zone_passive_is_visible(struct kobject *, struct attribute *, int);
201:	static ssize_t trip_point_hyst_show(struct device *, struct device_attribute *, char *);
171:	static ssize_t trip_point_hyst_store(struct device *, struct device_attribute *, const char *, size_t);
149:	static ssize_t trip_point_temp_show(struct device *, struct device_attribute *, char *);
110:	static ssize_t trip_point_temp_store(struct device *, struct device_attribute *, const char *, size_t);
78:	static ssize_t trip_point_type_show(struct device *, struct device_attribute *, char *);
27:	static ssize_t type_show(struct device *, struct device_attribute *, char *);

File drivers/tty/hvc/hvc_console.c:
778:	void __hvc_resize(struct hvc_struct *, struct winsize);
911:	struct hvc_struct *hvc_alloc(uint32_t, int, const struct hv_ops *, int);
285:	int hvc_instantiate(uint32_t, int, const struct hv_ops *);
313:	void hvc_kick(void);
762:	int hvc_poll(struct hvc_struct *);
979:	int hvc_remove(struct hvc_struct *);
632:	static int __hvc_poll(struct hvc_struct *, bool);
599:	static int hvc_chars_in_buffer(struct tty_struct *);
432:	static void hvc_cleanup(struct tty_struct *);
389:	static void hvc_close(struct tty_struct *, struct file *);
197:	static struct tty_driver *hvc_console_device(struct console *, int *);
241:	static int hvc_console_init(void);
151:	static void hvc_console_print(struct console *, const char *, unsigned int);
206:	static int hvc_console_setup(struct console *, char *);
90:	static struct hvc_struct *hvc_get_by_index(int);
439:	static void hvc_hangup(struct tty_struct *);
1018:	static int hvc_init(void);
325:	static int hvc_install(struct tty_driver *, struct tty_struct *);
347:	static int hvc_open(struct tty_struct *, struct file *);
861:	static int hvc_poll_get_char(struct tty_driver *, int);
856:	static int hvc_poll_init(struct tty_driver *, int, char *);
876:	static void hvc_poll_put_char(struct tty_driver *, int, char);
249:	static void hvc_port_destruct(struct tty_port *);
476:	static int hvc_push(struct hvc_struct *);
563:	static void hvc_set_winsz(struct work_struct *);
836:	static int hvc_tiocmget(struct tty_struct *);
845:	static int hvc_tiocmset(struct tty_struct *, unsigned int, unsigned int);
320:	static void hvc_unthrottle(struct tty_struct *);
499:	static int hvc_write(struct tty_struct *, const unsigned char *, int);
589:	static int hvc_write_room(struct tty_struct *);
790:	static int khvcd(void *);

File drivers/tty/hvc/hvc_irq.c:
29:	int notifier_add_irq(struct hvc_struct *, int);
44:	void notifier_del_irq(struct hvc_struct *, int);
13:	static irqreturn_t hvc_handle_interrupt(int, void *);

File drivers/tty/hvc/hvc_xen.c:
346:	void xen_console_resume(void);
691:	void xen_raw_console_write(const char *);
704:	void xen_raw_printk(const char *, ...);
137:	static int domU_read_console(uint32_t, char *, int);
108:	static int domU_write_console(uint32_t, const char *, int);
53:	static struct xencons_info *vtermno_to_xencons(int);
604:	static int xen_cons_init(void);
381:	static int xen_console_remove(struct xencons_info *);
552:	static int xen_hvc_init(void);
222:	static int xen_hvm_console_init(void);
631:	static void xen_hvm_early_write(const char *, int, uint32_t);
283:	static int xen_pv_console_init(void);
641:	static int xenboot_console_setup(struct console *, char *);
723:	static int xenboot_earlycon_setup(struct earlycon_device *, const char *);
716:	static void xenboot_earlycon_write(struct console *, const char *, unsigned int);
653:	static void xenboot_write_console(const char *, unsigned int, struct console *);
509:	static void xencons_backend_changed(struct xenbus_device *, enum xenbus_state);
402:	static int xencons_connect_backend(struct xenbus_device *, struct xencons_info *);
357:	static void xencons_disconnect_backend(struct xencons_info *);
271:	static int xencons_info_pv_init(struct xencons_info *, int);
462:	static int xencons_probe(struct xenbus_device *, const struct xenbus_device_id *);
397:	static int xencons_remove(struct xenbus_device *);
500:	static int xencons_resume(struct xenbus_device *);

File drivers/tty/n_null.c:
18:	static void n_null_close(struct tty_struct *);
58:	static void n_null_exit(void);
52:	static int n_null_init(void);
13:	static int n_null_open(struct tty_struct *);
22:	static ssize_t n_null_read(struct tty_struct *, struct file *, unsigned char *, size_t, void **, unsigned long);
35:	static void n_null_receivebuf(struct tty_struct *, const unsigned char *, char *, int);
29:	static ssize_t n_null_write(struct tty_struct *, struct file *, const unsigned char *, size_t);

File drivers/tty/n_tty.c:
2509:	void n_tty_inherit_ops(struct tty_ldisc_ops *);
2517:	void n_tty_init(void);
621:	static size_t __process_echoes(struct tty_struct *);
1616:	static void __receive_buf(struct tty_struct *, const unsigned char *, char *, int);
2012:	static bool canon_copy_from_read_buf(struct tty_struct *, unsigned char **, size_t *);
767:	static void commit_echoes(struct tty_struct *);
1956:	static bool copy_from_read_buf(struct tty_struct *, unsigned char **, size_t *);
426:	static int do_output_char(unsigned char, struct tty_struct *, int);
934:	static void echo_char(unsigned char, struct tty_struct *, struct tty_struct *);
912:	static void echo_char_raw(unsigned char, struct n_tty_data *);
974:	static void eraser(unsigned char, struct tty_struct *);
1116:	static void isig(int, struct tty_struct *);
270:	static void n_tty_check_unthrottle(struct tty_struct *);
1883:	static void n_tty_close(struct tty_struct *);
366:	static void n_tty_flush_buffer(struct tty_struct *);
2464:	static int n_tty_ioctl(struct tty_struct *, struct file *, unsigned int, unsigned long);
199:	static void n_tty_kick_worker(struct tty_struct *);
1904:	static int n_tty_open(struct tty_struct *);
340:	static void n_tty_packet_mode_flush(struct tty_struct *);
2418:	static __poll_t n_tty_poll(struct tty_struct *, struct file *, poll_table *);
2125:	static ssize_t n_tty_read(struct tty_struct *, struct file *, unsigned char *, size_t, void **, unsigned long);
1763:	static void n_tty_receive_buf(struct tty_struct *, const unsigned char *, char *, int);
1769:	static int n_tty_receive_buf2(struct tty_struct *, const unsigned char *, char *, int);
1543:	static void n_tty_receive_buf_closing(struct tty_struct *, const unsigned char *, char *, int);
1694:	static int n_tty_receive_buf_common(struct tty_struct *, const unsigned char *, char *, int, int);
1591:	static void n_tty_receive_buf_fast(struct tty_struct *, const unsigned char *, char *, int);
1506:	static void n_tty_receive_buf_real_raw(const unsigned char *, int, char *, struct tty_struct *, struct tty_struct *);
1557:	static void n_tty_receive_buf_standard(struct tty_struct *, const unsigned char *, char *, int);
1470:	static void n_tty_receive_char_flagged(struct tty_struct *, unsigned char, char);
1490:	static void n_tty_receive_char_lnext(struct tty_struct *, unsigned char, char);
1266:	static int n_tty_receive_char_special(struct tty_struct *, unsigned char);
1236:	static void n_tty_receive_signal_char(struct tty_struct *, int, unsigned char);
1789:	static void n_tty_set_termios(struct tty_struct *, struct ktermios *);
2317:	static ssize_t n_tty_write(struct tty_struct *, struct file *, const unsigned char *, size_t);
240:	static void n_tty_write_wakeup(struct tty_struct *);
796:	static void process_echoes(struct tty_struct *);
537:	static ssize_t process_output_block(struct tty_struct *, const unsigned char *, unsigned int);
167:	static void tty_copy(struct tty_struct *, void *, size_t, size_t);
158:	static void zero_buffer(u8 *, int, struct tty_struct *, struct tty_struct *);

File drivers/tty/pty.c:
623:	int ptm_open_peer(struct file *, struct tty_struct *, int);
708:	static struct tty_struct *ptm_unix98_lookup(struct tty_driver *, struct file *, int);
811:	static int ptmx_open(struct inode *, struct file *);
724:	static struct tty_struct *pts_unix98_lookup(struct tty_driver *, struct file *, int);
154:	static int pty_chars_in_buffer(struct tty_struct *);
451:	static void pty_cleanup(struct tty_struct *);
46:	static void pty_close(struct tty_struct *, struct file *);
379:	static int pty_common_install(struct tty_driver *, struct tty_struct *, bool);
224:	static void pty_flush_buffer(struct tty_struct *);
962:	static int pty_init(void);
240:	static int pty_open(struct tty_struct *, struct file *);
303:	static int pty_resize(struct tty_struct *, struct winsize *);
262:	static void pty_set_termios(struct tty_struct *, struct ktermios *);
759:	static void pty_show_fdinfo(struct tty_struct *, struct seq_file *);
342:	static void pty_start(struct tty_struct *);
355:	static void pty_stop(struct tty_struct *);
685:	static long pty_unix98_compat_ioctl(struct tty_struct *, unsigned int, unsigned long);
738:	static int pty_unix98_install(struct tty_driver *, struct tty_struct *);
663:	static int pty_unix98_ioctl(struct tty_struct *, unsigned int, unsigned long);
744:	static void pty_unix98_remove(struct tty_driver *, struct tty_struct *);
93:	static void pty_unthrottle(struct tty_struct *);
111:	static int pty_write(struct tty_struct *, const unsigned char *, int);
139:	static int pty_write_room(struct tty_struct *);
894:	static void unix98_pty_init(void);

File drivers/tty/serial/8250/8250_core.c:
715:	int early_serial_setup(struct uart_port *);
411:	struct uart_8250_port *serial8250_get_port(int);
983:	int serial8250_register_8250_port(struct uart_8250_port *);
780:	void serial8250_resume_port(int);
420:	void serial8250_set_isa_configurator(void (*)(int, struct uart_port *, u32 *));
757:	void serial8250_suspend_port(int);
1137:	void serial8250_unregister_port(int);
265:	static void serial8250_backup_timeout(struct timer_list *);
1223:	static void serial8250_exit(void);
918:	static struct uart_8250_port *serial8250_find_match_or_unused(struct uart_port *);
1166:	static int serial8250_init(void);
108:	static irqreturn_t serial8250_interrupt(int, void *);
495:	static void serial8250_isa_init_ports(void);
805:	static int serial8250_probe(struct platform_device *);
854:	static int serial8250_remove(struct platform_device *);
881:	static int serial8250_resume(struct platform_device *);
867:	static int serial8250_suspend(struct platform_device *, pm_message_t);
257:	static void serial8250_timeout(struct timer_list *);
955:	static void serial_8250_overrun_backoff_work(struct work_struct *);
152:	static void serial_do_unlink(struct irq_info *, struct uart_8250_port *);
172:	static int serial_link_irq_chain(struct uart_8250_port *);
221:	static void serial_unlink_irq_chain(struct uart_8250_port *);
429:	static void univ8250_config_port(struct uart_port *, int);
611:	static int univ8250_console_exit(struct console *);
684:	static int univ8250_console_init(void);
637:	static int univ8250_console_match(struct console *, char *, int, char *);
589:	static int univ8250_console_setup(struct console *, char *);
581:	static void univ8250_console_write(struct console *, const char *, unsigned int);
342:	static void univ8250_release_irq(struct uart_8250_port *);
470:	static void univ8250_release_port(struct uart_port *);
455:	static int univ8250_request_port(struct uart_port *);
312:	static int univ8250_setup_irq(struct uart_8250_port *);

File drivers/tty/serial/8250/8250_dma.c:
242:	void serial8250_release_dma(struct uart_8250_port *);
146:	int serial8250_request_dma(struct uart_8250_port *);
109:	int serial8250_rx_dma(struct uart_8250_port *);
134:	void serial8250_rx_dma_flush(struct uart_8250_port *);
62:	int serial8250_tx_dma(struct uart_8250_port *);
43:	static void __dma_rx_complete(void *);
14:	static void __dma_tx_complete(void *);

File drivers/tty/serial/8250/8250_dw.c:
92:	static void dw8250_check_lcr(struct uart_port *, int);
292:	static int dw8250_clk_notifier_cb(struct notifier_block *, unsigned long, void *);
277:	static void dw8250_clk_work_cb(struct work_struct *);
318:	static void dw8250_do_pm(struct uart_port *, unsigned int, unsigned int);
384:	static bool dw8250_fallback_dma_filter(struct dma_chan *, void *);
236:	static int dw8250_handle_irq(struct uart_port *);
389:	static bool dw8250_idma_filter(struct dma_chan *, void *);
735:	static void dw8250_platform_driver_exit(void);
735:	static int dw8250_platform_driver_init(void);
438:	static int dw8250_probe(struct platform_device *);
622:	static int dw8250_remove(struct platform_device *);
659:	static int dw8250_resume(struct device *);
681:	static int dw8250_runtime_resume(struct device *);
670:	static int dw8250_runtime_suspend(struct device *);
170:	static unsigned int dw8250_serial_in(struct uart_port *, int);
211:	static unsigned int dw8250_serial_in32(struct uart_port *, int);
160:	static void dw8250_serial_out(struct uart_port *, int, int);
201:	static void dw8250_serial_out32(struct uart_port *, int, int);
360:	static void dw8250_set_ldisc(struct uart_port *, struct ktermios *);
329:	static void dw8250_set_termios(struct uart_port *, struct ktermios *, struct ktermios *);
650:	static int dw8250_suspend(struct device *);

File drivers/tty/serial/8250/8250_dwlib.c:
80:	void dw8250_setup_port(struct uart_port *);
60:	static unsigned int dw8250_get_divisor(struct uart_port *, unsigned int, unsigned int *);
73:	static void dw8250_set_divisor(struct uart_port *, unsigned int, unsigned int, unsigned int);

File drivers/tty/serial/8250/8250_early.c:
157:	int early_serial8250_setup(struct earlycon_device *, const char *);
113:	static int early_serial8250_read(struct console *, char *, unsigned int);
103:	static void early_serial8250_write(struct console *, const char *, unsigned int);
134:	static void init_port(struct earlycon_device *);
37:	static unsigned int serial8250_early_in(struct uart_port *, int);
60:	static void serial8250_early_out(struct uart_port *, int, int);
89:	static void serial_putc(struct uart_port *, int);

File drivers/tty/serial/8250/8250_exar.c:
356:	static void *__xr17v35x_register_gpio(struct pci_dev *, const struct property_entry *);
573:	static irqreturn_t exar_misc_handler(int, void *);
853:	static void exar_pci_driver_exit(void);
853:	static int exar_pci_driver_init(void);
581:	static int exar_pci_probe(struct pci_dev *, const struct pci_device_id *);
653:	static void exar_pci_remove(struct pci_dev *);
141:	static void exar_pm(struct uart_port *, unsigned int, unsigned int);
682:	static int exar_resume(struct device *);
194:	static void exar_shutdown(struct uart_port *);
665:	static int exar_suspend(struct device *);
393:	static int generic_rs485_config(struct uart_port *, struct serial_rs485 *);
460:	static int iot2040_register_gpio(struct pci_dev *, struct uart_8250_port *);
421:	static int iot2040_rs485_config(struct uart_port *, struct serial_rs485 *);
301:	static int pci_connect_tech_setup(struct exar8250 *, struct pci_dev *, struct uart_8250_port *, int);
253:	static int pci_fastcom335_setup(struct exar8250 *, struct pci_dev *, struct uart_8250_port *, int);
312:	static int pci_xr17c154_setup(struct exar8250 *, struct pci_dev *, struct uart_8250_port *, int);
544:	static void pci_xr17v35x_exit(struct pci_dev *);
497:	static int pci_xr17v35x_setup(struct exar8250 *, struct pci_dev *, struct uart_8250_port *, int);
156:	static unsigned int xr17v35x_get_divisor(struct uart_port *, unsigned int, unsigned int *);
383:	static int xr17v35x_register_gpio(struct pci_dev *, struct uart_8250_port *);
167:	static void xr17v35x_set_divisor(struct uart_port *, unsigned int, unsigned int, unsigned int);
177:	static int xr17v35x_startup(struct uart_port *);

File drivers/tty/serial/8250/8250_lpss.c:
110:	static unsigned int byt_get_mctrl(struct uart_port *);
120:	static int byt_serial_setup(struct lpss8250 *, struct uart_port *);
72:	static void byt_set_termios(struct uart_port *, struct ktermios *, struct ktermios *);
159:	static int ehl_serial_setup(struct lpss8250 *, struct uart_port *);
238:	static bool lpss8250_dma_filter(struct dma_chan *, void *);
399:	static void lpss8250_pci_driver_exit(void);
399:	static int lpss8250_pci_driver_init(void);
280:	static int lpss8250_probe(struct pci_dev *, const struct pci_device_id *);
344:	static void lpss8250_remove(struct pci_dev *);
233:	static void qrk_serial_exit(struct lpss8250 *);
227:	static int qrk_serial_setup(struct lpss8250 *, struct uart_port *);

File drivers/tty/serial/8250/8250_mid.c:
190:	static void dnv_exit(struct mid8250 *);
127:	static int dnv_handle_irq(struct uart_port *);
158:	static int dnv_setup(struct mid8250 *, struct uart_port *);
235:	static bool mid8250_dma_filter(struct dma_chan *, void *);
391:	static void mid8250_pci_driver_exit(void);
391:	static int mid8250_pci_driver_init(void);
281:	static int mid8250_probe(struct pci_dev *, const struct pci_device_id *);
339:	static void mid8250_remove(struct pci_dev *);
199:	static void mid8250_set_termios(struct uart_port *, struct ktermios *, struct ktermios *);
53:	static int pnw_setup(struct mid8250 *, struct uart_port *);
76:	static int tng_handle_irq(struct uart_port *);
107:	static int tng_setup(struct mid8250 *, struct uart_port *);

File drivers/tty/serial/8250/8250_pci.c:
3932:	struct serial_private *pciserial_init_ports(struct pci_dev *, const struct pciserial_board *);
4045:	void pciserial_remove_ports(struct serial_private *);
4068:	void pciserial_resume_ports(struct serial_private *);
4052:	void pciserial_suspend_ports(struct serial_private *);
119:	static int addidata_apci7800_setup(struct serial_private *, const struct pciserial_board *, struct uart_8250_port *, int);
147:	static int afavlab_setup(struct serial_private *, const struct pciserial_board *, struct uart_8250_port *, int);
1431:	static int ce4100_serial_setup(struct serial_private *, const struct pciserial_board *, struct uart_8250_port *, int);
1620:	static void f815xxa_mem_serial_out(struct uart_port *, int, int);
2810:	static struct pci_serial_quirk *find_quirk(struct pci_dev *);
1704:	static void kt_handle_break(struct uart_port *);
1715:	static unsigned int kt_serial_in(struct uart_port *, int);
1738:	static int kt_serial_setup(struct serial_private *, const struct pciserial_board *, struct uart_8250_port *, int);
76:	static void moan_device(const char *, struct pci_dev *);
1069:	static int pci_asix_setup(struct serial_private *, const struct pciserial_board *, struct uart_8250_port *, int);
1455:	static int pci_brcm_trumanage_setup(struct serial_private *, const struct pciserial_board *, struct uart_8250_port *, int);
1326:	static int pci_default_setup(struct serial_private *, const struct pciserial_board *, struct uart_8250_port *, int);
1748:	static int pci_eg20t_init(struct pci_dev *);
1010:	static int pci_endrun_init(struct pci_dev *);
1654:	static int pci_fintek_f815xxa_init(struct pci_dev *);
1631:	static int pci_fintek_f815xxa_setup(struct serial_private *, const struct pciserial_board *, struct uart_8250_port *, int);
1549:	static int pci_fintek_init(struct pci_dev *);
1472:	static int pci_fintek_rs485_config(struct uart_port *, struct serial_rs485 *);
1518:	static int pci_fintek_setup(struct serial_private *, const struct pciserial_board *, struct uart_8250_port *, int);
170:	static int pci_hp_diva_init(struct pci_dev *);
201:	static int pci_hp_diva_setup(struct serial_private *, const struct pciserial_board *, struct uart_8250_port *, int);
231:	static int pci_inteli960ni_init(struct pci_dev *);
994:	static void pci_ite887x_exit(struct pci_dev *);
900:	static int pci_ite887x_init(struct pci_dev *);
1845:	static int pci_moxa_setup(struct serial_private *, const struct pciserial_board *, struct uart_8250_port *, int);
781:	static int pci_netmos_9900_setup(struct serial_private *, const struct pciserial_board *, struct uart_8250_port *, int);
839:	static int pci_netmos_init(struct pci_dev *);
321:	static void pci_ni8420_exit(struct pci_dev *);
680:	static int pci_ni8420_init(struct pci_dev *);
350:	static void pci_ni8430_exit(struct pci_dev *);
709:	static int pci_ni8430_init(struct pci_dev *);
754:	static int pci_ni8430_setup(struct serial_private *, const struct pciserial_board *, struct uart_8250_port *, int);
1447:	static int pci_omegapci_setup(struct serial_private *, const struct pciserial_board *, struct uart_8250_port *, int);
1042:	static int pci_oxsemi_tornado_init(struct pci_dev *);
1380:	static int pci_pericom_setup(struct serial_private *, const struct pciserial_board *, struct uart_8250_port *, int);
1404:	static int pci_pericom_setup_four_at_eight(struct serial_private *, const struct pciserial_board *, struct uart_8250_port *, int);
296:	static void pci_plx9050_exit(struct pci_dev *);
253:	static int pci_plx9050_init(struct pci_dev *);
1233:	static int pci_quatech_clock(struct uart_8250_port *);
1322:	static void pci_quatech_exit(struct pci_dev *);
1292:	static int pci_quatech_init(struct pci_dev *);
1308:	static int pci_quatech_setup(struct serial_private *, const struct pciserial_board *, struct uart_8250_port *, int);
1207:	static int pci_quatech_test(struct uart_8250_port *, struct uart_8250_port *);
512:	static int pci_siig_init(struct pci_dev *);
525:	static int pci_siig_setup(struct serial_private *, const struct pciserial_board *, struct uart_8250_port *, int);
1821:	static int pci_sunix_setup(struct serial_private *, const struct pciserial_board *, struct uart_8250_port *, int);
600:	static int pci_timedia_init(struct pci_dev *);
584:	static int pci_timedia_probe(struct pci_dev *);
619:	static int pci_timedia_setup(struct serial_private *, const struct pciserial_board *, struct uart_8250_port *, int);
1758:	static int pci_wch_ch353_setup(struct serial_private *, const struct pciserial_board *, struct uart_8250_port *, int);
1811:	static void pci_wch_ch38x_exit(struct pci_dev *);
1791:	static int pci_wch_ch38x_init(struct pci_dev *);
1778:	static int pci_wch_ch38x_setup(struct serial_private *, const struct pciserial_board *, struct uart_8250_port *, int);
674:	static int pci_xircom_init(struct pci_dev *);
4029:	static void pciserial_detach_ports(struct serial_private *);
4089:	static int pciserial_init_one(struct pci_dev *, const struct pci_device_id *);
4159:	static void pciserial_remove_one(struct pci_dev *);
4177:	static int pciserial_resume_one(struct device *);
4167:	static int pciserial_suspend_one(struct device *);
1347:	static void pericom_do_set_divisor(struct uart_port *, unsigned int, unsigned int, unsigned int);
424:	static void sbs_exit(struct pci_dev *);
400:	static int sbs_init(struct pci_dev *);
371:	static int sbs_setup(struct serial_private *, const struct pciserial_board *, struct uart_8250_port *, int);
5701:	static pci_ers_result_t serial8250_io_error_detected(struct pci_dev *, pci_channel_state_t);
5732:	static void serial8250_io_resume(struct pci_dev *);
5717:	static pci_ers_result_t serial8250_io_slot_reset(struct pci_dev *);
5764:	static void serial_pci_driver_exit(void);
5764:	static int serial_pci_driver_init(void);
3856:	static int serial_pci_guess_board(struct pci_dev *, struct pciserial_board *);
89:	static int setup_port(struct serial_private *, struct uart_8250_port *, u8, unsigned int, int);
1691:	static int skip_tx_en_setup(struct serial_private *, const struct pciserial_board *, struct uart_8250_port *, int);
653:	static int titan_400l_800l_setup(struct serial_private *, const struct pciserial_board *, struct uart_8250_port *, int);

File drivers/tty/serial/8250/8250_pnp.c:
538:	void serial8250_pnp_exit(void);
533:	int serial8250_pnp_init(void);
437:	static int serial_pnp_probe(struct pnp_dev *, const struct pnp_device_id *);
492:	static void serial_pnp_remove(struct pnp_dev *);
511:	static int serial_pnp_resume(struct device *);
501:	static int serial_pnp_suspend(struct device *);

File drivers/tty/serial/8250/8250_port.c:
569:	void serial8250_clear_and_reinit_fifos(struct uart_8250_port *);
3425:	int serial8250_console_exit(struct uart_port *);
3399:	int serial8250_console_setup(struct uart_port *, char *, bool);
3316:	void serial8250_console_write(struct uart_8250_port *, const char *, unsigned int);
2002:	unsigned int serial8250_do_get_mctrl(struct uart_port *);
2894:	void serial8250_do_pm(struct uart_port *, unsigned int, unsigned int);
2597:	void serial8250_do_set_divisor(struct uart_port *, unsigned int, unsigned int, unsigned int);
2867:	void serial8250_do_set_ldisc(struct uart_port *, struct ktermios *);
2027:	void serial8250_do_set_mctrl(struct uart_port *, unsigned int);
2720:	void serial8250_do_set_termios(struct uart_port *, struct ktermios *, struct ktermios *);
2445:	void serial8250_do_shutdown(struct uart_port *);
2159:	int serial8250_do_startup(struct uart_port *);
672:	int serial8250_em485_config(struct uart_port *, struct serial_rs485 *);
650:	void serial8250_em485_destroy(struct uart_8250_port *);
1603:	void serial8250_em485_start_tx(struct uart_8250_port *);
1450:	void serial8250_em485_stop_tx(struct uart_8250_port *);
1904:	int serial8250_handle_irq(struct uart_port *, unsigned int);
3237:	void serial8250_init_port(struct uart_8250_port *);
1864:	unsigned int serial8250_modem_status(struct uart_8250_port *);
1717:	void serial8250_read_char(struct uart_8250_port *, unsigned char);
576:	void serial8250_rpm_get(struct uart_8250_port *);
717:	void serial8250_rpm_get_tx(struct uart_8250_port *);
584:	void serial8250_rpm_put(struct uart_8250_port *);
731:	void serial8250_rpm_put_tx(struct uart_8250_port *);
1784:	unsigned char serial8250_rx_chars(struct uart_8250_port *, unsigned char);
3249:	void serial8250_set_defaults(struct uart_8250_port *);
1801:	void serial8250_tx_chars(struct uart_8250_port *);
2668:	void serial8250_update_uartclk(struct uart_port *, unsigned int);
781:	static int __enable_rsa(struct uart_8250_port *);
1504:	static void __stop_tx_rs485(struct uart_8250_port *);
1203:	static void autoconfig(struct uart_8250_port *);
1001:	static void autoconfig_8250(struct uart_8250_port *);
1376:	static void autoconfig_irq(struct uart_8250_port *);
313:	static int default_serial_dl_read(struct uart_8250_port *);
323:	static void default_serial_dl_write(struct uart_8250_port *, int);
3077:	static int do_set_rxtrig(struct tty_port *, unsigned char);
387:	static unsigned int hub6_serial_in(struct uart_port *, int);
394:	static void hub6_serial_out(struct uart_port *, int, int);
449:	static unsigned int io_serial_in(struct uart_port *, int);
455:	static void io_serial_out(struct uart_port *, int, int);
419:	static unsigned int mem16_serial_in(struct uart_port *, int);
413:	static void mem16_serial_out(struct uart_port *, int, int);
431:	static unsigned int mem32_serial_in(struct uart_port *, int);
425:	static void mem32_serial_out(struct uart_port *, int, int);
443:	static unsigned int mem32be_serial_in(struct uart_port *, int);
437:	static void mem32be_serial_out(struct uart_port *, int, int);
401:	static unsigned int mem_serial_in(struct uart_port *, int);
407:	static void mem_serial_out(struct uart_port *, int, int);
3384:	static unsigned int probe_baud(struct uart_port *);
3064:	static ssize_t rx_trig_bytes_show(struct device *, struct device_attribute *, char *);
3110:	static ssize_t rx_trig_bytes_store(struct device *, struct device_attribute *, const char *, size_t);
2048:	static void serial8250_break_ctl(struct uart_port *, int);
556:	static void serial8250_clear_fifos(struct uart_8250_port *);
3150:	static void serial8250_config_port(struct uart_port *, int);
3278:	static void serial8250_console_putchar(struct uart_port *, int);
3289:	static void serial8250_console_restore(struct uart_8250_port *);
1945:	static int serial8250_default_handle_irq(struct uart_port *);
1641:	static enum hrtimer_restart serial8250_em485_handle_start_tx(struct hrtimer *);
1474:	static enum hrtimer_restart serial8250_em485_handle_stop_tx(struct hrtimer *);
1700:	static void serial8250_enable_ms(struct uart_port *);
2549:	static unsigned int serial8250_get_divisor(struct uart_port *, unsigned int, unsigned int *);
2020:	static unsigned int serial8250_get_mctrl(struct uart_port *);
2104:	static int serial8250_get_poll_char(struct uart_port *);
2904:	static void serial8250_pm(struct uart_port *, unsigned int, unsigned int);
2126:	static void serial8250_put_poll_char(struct uart_port *, unsigned char);
3000:	static void serial8250_release_port(struct uart_port *);
2970:	static void serial8250_release_std_resource(struct uart_8250_port *);
3007:	static int serial8250_request_port(struct uart_port *);
2931:	static int serial8250_request_std_resource(struct uart_8250_port *);
2886:	static void serial8250_set_ldisc(struct uart_port *, struct ktermios *);
2040:	static void serial8250_set_mctrl(struct uart_port *, unsigned int);
751:	static void serial8250_set_sleep(struct uart_8250_port *, int);
2858:	static void serial8250_set_termios(struct uart_port *, struct ktermios *, struct ktermios *);
2500:	static void serial8250_shutdown(struct uart_port *);
1659:	static void serial8250_start_tx(struct uart_port *);
2438:	static int serial8250_startup(struct uart_port *);
1431:	static void serial8250_stop_rx(struct uart_port *);
1549:	static void serial8250_stop_tx(struct uart_port *);
1676:	static void serial8250_throttle(struct uart_port *);
1984:	static unsigned int serial8250_tx_empty(struct uart_port *);
1966:	static int serial8250_tx_threshold_handle_irq(struct uart_port *);
3201:	static const char *serial8250_type(struct uart_port *);
1681:	static void serial8250_unthrottle(struct uart_port *);
3191:	static int serial8250_verify_port(struct uart_port *, struct serial_struct *);
516:	static void serial_port_out_sync(struct uart_port *, int, int);
463:	static void set_io_from_upio(struct uart_port *);
2067:	static void wait_for_xmitr(struct uart_8250_port *, int);

File drivers/tty/serial/earlycon.c:
176:	int setup_earlycon(char *);
55:	static void earlycon_init(const char *, struct earlycon_device *);
225:	static int param_setup_earlycon(char *);
93:	static int parse_options(char *, struct earlycon_device *);

File drivers/tty/serial/kgdboc.c:
167:	static int configure_kgdboc(void);
290:	static void exit_kgdboc(void);
255:	static int init_kgdboc(void);
422:	static int kgdboc_early_init(char *);
472:	static int kgdboc_earlycon_deferred_exit(struct console *);
486:	static void kgdboc_earlycon_deinit(void);
431:	static int kgdboc_earlycon_get_char(void);
521:	static int kgdboc_earlycon_init(char *);
589:	static int kgdboc_earlycon_late_init(void);
448:	static void kgdboc_earlycon_pre_exp_handler(void);
442:	static void kgdboc_earlycon_put_char(u8);
300:	static int kgdboc_get_char(void);
402:	static int kgdboc_option_setup(char *);
381:	static void kgdboc_post_exp_handler(void);
370:	static void kgdboc_pre_exp_handler(void);
230:	static int kgdboc_probe(struct platform_device *);
308:	static void kgdboc_put_char(u8);
52:	static int kgdboc_reset_connect(struct input_handler *, struct input_dev *, const struct input_device_id *);
62:	static void kgdboc_reset_disconnect(struct input_handle *);
85:	static void kgdboc_restore_input_helper(struct work_struct *);
124:	static void kgdboc_unregister_kbd(void);
316:	static int param_set_kgdboc_var(const char *, const struct kernel_param *);

File drivers/tty/serial/serial_core.c:
2889:	int uart_add_one_port(struct uart_driver *, struct uart_port *);
2648:	struct tty_driver *uart_console_device(struct console *, int *);
1962:	void uart_console_write(struct uart_port *, const char *, unsigned int, void (*)(struct uart_port *, int));
401:	unsigned int uart_get_baud_rate(struct uart_port *, struct ktermios *, struct ktermios *, unsigned int, unsigned int);
1982:	struct uart_port *uart_get_console(struct uart_port *, int, struct console *);
491:	unsigned int uart_get_divisor(struct uart_port *, unsigned int);
3250:	int uart_get_rs485_mode(struct uart_port *);
3130:	void uart_handle_cts_change(struct uart_port *, unsigned int);
3095:	void uart_handle_dcd_change(struct uart_port *, unsigned int);
3166:	void uart_insert_char(struct uart_port *, unsigned int, unsigned int, unsigned int, unsigned int);
3065:	int uart_match_port(struct uart_port *, struct uart_port *);
2018:	int uart_parse_earlycon(char *, unsigned char *, resource_size_t *, char **);
2073:	void uart_parse_options(const char *, int *, int *, int *, int *);
2567:	int uart_register_driver(struct uart_driver *);
2991:	int uart_remove_one_port(struct uart_driver *, struct uart_port *);
2257:	int uart_resume_port(struct uart_driver *, struct uart_port *);
2100:	int uart_set_options(struct uart_port *, struct console *, int, int, int, int);
2195:	int uart_suspend_port(struct uart_driver *, struct uart_port *);
3209:	bool uart_try_toggle_sysrq(struct uart_port *, unsigned int);
2634:	void uart_unregister_driver(struct uart_driver *);
341:	void uart_update_timeout(struct uart_port *, unsigned int, unsigned int);
98:	void uart_write_wakeup(struct uart_port *);
121:	static void __uart_start(struct tty_struct *, struct tty_struct *);
2730:	static ssize_t close_delay_show(struct device *, struct device_attribute *, char *);
2740:	static ssize_t closing_wait_show(struct device *, struct device_attribute *, char *);
2790:	static ssize_t console_show(struct device *, struct device_attribute *, char *);
2807:	static ssize_t console_store(struct device *, struct device_attribute *, const char *, size_t);
2750:	static ssize_t custom_divisor_show(struct device *, struct device_attribute *, char *);
2710:	static ssize_t flags_show(struct device *, struct device_attribute *, char *);
2760:	static ssize_t io_type_show(struct device *, struct device_attribute *, char *);
2770:	static ssize_t iomem_base_show(struct device *, struct device_attribute *, char *);
2780:	static ssize_t iomem_reg_shift_show(struct device *, struct device_attribute *, char *);
2700:	static ssize_t irq_show(struct device *, struct device_attribute *, char *);
2676:	static ssize_t line_show(struct device *, struct device_attribute *, char *);
2686:	static ssize_t port_show(struct device *, struct device_attribute *, char *);
2185:	static int serial_match_port(struct device *, void *);
2666:	static ssize_t type_show(struct device *, struct device_attribute *, char *);
1118:	static int uart_break_ctl(struct tty_struct *, int);
1744:	static int uart_carrier_raised(struct tty_port *);
2168:	static void uart_change_pm(struct uart_state *, enum uart_pm_state);
509:	static void uart_change_speed(struct tty_struct *, struct uart_state *, struct ktermios *);
639:	static int uart_chars_in_buffer(struct tty_struct *);
1559:	static void uart_close(struct tty_struct *, struct file *);
2377:	static void uart_configure_port(struct uart_state *, struct uart_port *, struct uart_driver *);
1138:	static int uart_do_autoconfig(struct tty_struct *, struct uart_state *);
1769:	static void uart_dtr_rts(struct tty_port *, int);
652:	static void uart_flush_buffer(struct tty_struct *);
578:	static void uart_flush_chars(struct tty_struct *);
1269:	static int uart_get_icount(struct tty_struct *, struct serial_icounter_struct *);
763:	static int uart_get_info(struct tty_port *, struct serial_struct *);
805:	static int uart_get_info_user(struct tty_struct *, struct serial_struct *);
1687:	static void uart_hangup(struct tty_struct *);
1781:	static int uart_install(struct tty_driver *, struct tty_struct *);
1396:	static int uart_ioctl(struct tty_struct *, unsigned int, unsigned long);
1850:	static void uart_line_info(struct seq_file *, int, struct uart_driver *, struct uart_driver *);
1801:	static int uart_open(struct tty_struct *, struct file *);
2478:	static int uart_poll_get_char(struct tty_driver *, int);
2439:	static int uart_poll_init(struct tty_driver *, int, char *);
2494:	static void uart_poll_put_char(struct tty_driver *, int, char);
1813:	static int uart_port_activate(struct tty_port *, struct tty_struct *);
158:	static void uart_port_dtr_rts(struct uart_port *, int);
1717:	static void uart_port_shutdown(struct tty_port *);
183:	static int uart_port_startup(struct tty_struct *, struct uart_state *, int);
1930:	static int uart_proc_show(struct seq_file *, void *);
554:	static int uart_put_char(struct tty_struct *, unsigned char);
683:	static void uart_send_xchar(struct tty_struct *, char);
814:	static int uart_set_info(struct tty_struct *, struct tty_port *, struct uart_state *, struct serial_struct *);
1019:	static int uart_set_info_user(struct tty_struct *, struct serial_struct *);
1480:	static void uart_set_ldisc(struct tty_struct *);
1496:	static void uart_set_termios(struct tty_struct *, struct ktermios *);
278:	static void uart_shutdown(struct tty_struct *, struct uart_state *);
130:	static void uart_start(struct tty_struct *);
109:	static void uart_stop(struct tty_struct *);
705:	static void uart_throttle(struct tty_struct *);
1068:	static int uart_tiocmget(struct tty_struct *);
1092:	static int uart_tiocmset(struct tty_struct *, unsigned int, unsigned int);
1580:	static void uart_tty_port_shutdown(struct tty_port *);
1835:	static const char *uart_type(struct uart_port *);
734:	static void uart_unthrottle(struct tty_struct *);
142:	static void uart_update_mctrl(struct uart_port *, unsigned int, unsigned int);
1211:	static int uart_wait_modem_status(struct uart_state *, unsigned long);
1620:	static void uart_wait_until_sent(struct tty_struct *, int);
583:	static int uart_write(struct tty_struct *, const unsigned char *, int);
626:	static int uart_write_room(struct tty_struct *);
2656:	static ssize_t uartclk_show(struct device *, struct device_attribute *, char *);
2720:	static ssize_t xmit_fifo_size_show(struct device *, struct device_attribute *, char *);

File drivers/tty/serial/serial_mctrl_gpio.c:
281:	void mctrl_gpio_disable_ms(struct mctrl_gpios *);
256:	void mctrl_gpio_enable_ms(struct mctrl_gpios *);
238:	void mctrl_gpio_free(struct device *, struct mctrl_gpios *);
76:	unsigned int mctrl_gpio_get(struct mctrl_gpios *, unsigned int *);
97:	unsigned int mctrl_gpio_get_outputs(struct mctrl_gpios *, unsigned int *);
192:	struct mctrl_gpios *mctrl_gpio_init(struct uart_port *, unsigned int);
117:	struct mctrl_gpios *mctrl_gpio_init_noauto(struct device *, unsigned int);
45:	void mctrl_gpio_set(struct mctrl_gpios *, unsigned int);
66:	struct gpio_desc *mctrl_gpio_to_gpiod(struct mctrl_gpios *, enum mctrl_gpio_idx);
156:	static irqreturn_t mctrl_gpio_irq_handle(int, void *);

File drivers/tty/sysrq.c:
568:	void __handle_sysrq(int, bool);
627:	void handle_sysrq(int);
1133:	int register_sysrq_key(int, const struct sysrq_key_op *);
72:	int sysrq_mask(void);
1092:	int sysrq_toggle_support(int);
1139:	int unregister_sysrq_key(int, const struct sysrq_key_op *);
1109:	static int __sysrq_swap_key_ops(int, const struct sysrq_key_op *, const struct sysrq_key_op *);
377:	static void moom_callback(struct work_struct *);
349:	static void send_sig_all(int);
229:	static void showacpu(void *);
90:	static int sysrq_always_enabled_setup(char *);
953:	static int sysrq_connect(struct input_handler *, struct input_dev *, const struct input_device_id *);
994:	static void sysrq_disconnect(struct input_handle *);
700:	static void sysrq_do_reset(struct timer_list *);
922:	static bool sysrq_filter(struct input_handle *, unsigned int, unsigned int, int);
321:	static void sysrq_ftrace_dump(int);
118:	static void sysrq_handle_SAK(int);
149:	static void sysrq_handle_crash(int);
816:	static bool sysrq_handle_keypress(struct sysrq_state *, unsigned int, int);
418:	static void sysrq_handle_kill(int);
101:	static void sysrq_handle_loglevel(int);
396:	static void sysrq_handle_moom(int);
200:	static void sysrq_handle_mountro(int);
163:	static void sysrq_handle_reboot(int);
189:	static void sysrq_handle_show_timers(int);
250:	static void sysrq_handle_showallcpus(int);
335:	static void sysrq_handle_showmem(int);
278:	static void sysrq_handle_showregs(int);
295:	static void sysrq_handle_showstate(int);
307:	static void sysrq_handle_showstate_blocked(int);
178:	static void sysrq_handle_sync(int);
365:	static void sysrq_handle_term(int);
407:	static void sysrq_handle_thaw(int);
134:	static void sysrq_handle_unraw(int);
430:	static void sysrq_handle_unrt(int);
1189:	static int sysrq_init(void);
790:	static void sysrq_reinject_alt_sysrq(struct work_struct *);
1044:	static int sysrq_reset_seq_param_set(const char *, const struct kernel_param *);
243:	static void sysrq_showregs_othercpus(struct work_struct *);
1152:	static ssize_t write_sysrq_trigger(struct file *, const char *, size_t, loff_t *);

File drivers/tty/tty_audit.c:
201:	void tty_audit_add_data(struct tty_struct *, const void *, size_t);
111:	void tty_audit_exit(void);
128:	void tty_audit_fork(struct signal_struct *);
153:	int tty_audit_push(void);
136:	void tty_audit_tiocsti(struct tty_struct *, char);
176:	static struct tty_audit_buf *tty_audit_buf_get(void);
60:	static void tty_audit_log(const char *, dev_t, unsigned char *, size_t);

File drivers/tty/tty_baudrate.c:
233:	void tty_encode_baud_rate(struct tty_struct *, speed_t, speed_t);
57:	speed_t tty_termios_baud_rate(struct ktermios *);
141:	void tty_termios_encode_baud_rate(struct ktermios *, speed_t, speed_t);
92:	speed_t tty_termios_input_baud_rate(struct ktermios *);

File drivers/tty/tty_buffer.c:
381:	int __tty_insert_flip_char(struct tty_port *, unsigned char, char);
616:	bool tty_buffer_cancel_work(struct tty_port *);
221:	void tty_buffer_flush(struct tty_struct *, struct tty_ldisc *);
621:	void tty_buffer_flush_work(struct tty_port *);
116:	void tty_buffer_free_all(struct tty_port *);
573:	void tty_buffer_init(struct tty_port *);
56:	void tty_buffer_lock_exclusive(struct tty_port *);
296:	int tty_buffer_request_room(struct tty_port *, size_t);
611:	bool tty_buffer_restart_work(struct tty_port *);
596:	int tty_buffer_set_limit(struct tty_port *, int);
606:	void tty_buffer_set_lock_subclass(struct tty_port *);
91:	int tty_buffer_space_avail(struct tty_port *);
65:	void tty_buffer_unlock_exclusive(struct tty_port *);
559:	void tty_flip_buffer_push(struct tty_port *);
313:	int tty_insert_flip_string_fixed_flag(struct tty_port *, const unsigned char *, char, size_t);
349:	int tty_insert_flip_string_flags(struct tty_port *, const unsigned char *, const char *, size_t);
459:	int tty_ldisc_receive_buf(struct tty_ldisc *, const unsigned char *, char *, int);
432:	int tty_prepare_flip_string(struct tty_port *, unsigned char **, size_t);
407:	void tty_schedule_flip(struct tty_port *);
259:	static int __tty_buffer_request_room(struct tty_port *, size_t, int);
502:	static void flush_to_ldisc(struct work_struct *);
155:	static struct tty_buffer *tty_buffer_alloc(struct tty_port *, size_t);
196:	static void tty_buffer_free(struct tty_port *, struct tty_buffer *);

File drivers/tty/tty_io.c:
2978:	void __do_SAK(struct tty_struct *);
800:	void __start_tty(struct tty_struct *);
769:	void __stop_tty(struct tty_struct *);
3299:	struct tty_driver *__tty_alloc_driver(unsigned int, struct module *, unsigned long);
3067:	struct tty_struct *alloc_tty_struct(struct tty_driver *, int);
3568:	void console_sysfs_notify(void);
3042:	void do_SAK(struct tty_struct *);
3397:	void put_tty_driver(struct tty_driver *);
1128:	ssize_t redirected_tty_write(struct kiocb *, struct iov_iter *);
810:	void start_tty(struct tty_struct *);
778:	void stop_tty(struct tty_struct *);
196:	void tty_add_file(struct tty_struct *, struct file *);
182:	int tty_alloc_file(struct file *);
3491:	void tty_default_fops(struct file_operations *);
343:	int tty_dev_name_to_number(const char *, dev_t *);
3485:	dev_t tty_devnum(struct tty_struct *);
2314:	int tty_do_resize(struct tty_struct *, struct winsize *);
3384:	void tty_driver_kref_put(struct tty_driver *);
253:	const char *tty_driver_name(const struct tty_struct *);
391:	struct tty_driver *tty_find_polling_driver(char *, int *);
214:	void tty_free_file(struct file *);
677:	void tty_hangup(struct tty_struct *);
745:	int tty_hung_up_p(struct file *);
3578:	int tty_init(void);
1399:	struct tty_struct *tty_init_dev(struct tty_driver *, int);
1261:	void tty_init_termios(struct tty_struct *);
2620:	long tty_ioctl(struct file *, unsigned int, unsigned long);
1661:	void tty_kclose(struct tty_struct *);
1971:	struct tty_struct *tty_kopen(dev_t);
1570:	void tty_kref_put(struct tty_struct *);
244:	const char *tty_name(const struct tty_struct *);
3119:	int tty_put_char(struct tty_struct *, unsigned char);
3165:	struct device *tty_register_device(struct tty_driver *, unsigned int, struct device *);
3198:	struct device *tty_register_device_attr(struct tty_driver *, unsigned int, struct device *, void *, const struct attribute_group **);
3406:	int tty_register_driver(struct tty_driver *);
1731:	int tty_release(struct inode *, struct file *);
1691:	void tty_release_struct(struct tty_struct *, int);
1477:	void tty_save_termios(struct tty_struct *);
1158:	int tty_send_xchar(struct tty_struct *, char);
3390:	void tty_set_operations(struct tty_driver *, const struct tty_operations *);
1283:	int tty_standard_install(struct tty_driver *, struct tty_struct *);
3279:	void tty_unregister_device(struct tty_driver *, unsigned int);
3468:	int tty_unregister_driver(struct tty_driver *);
694:	void tty_vhangup(struct tty_struct *);
709:	void tty_vhangup_self(void);
731:	void tty_vhangup_session(struct tty_struct *);
527:	void tty_wakeup(struct tty_struct *);
1069:	void tty_write_message(struct tty_struct *, char *);
2199:	static int __tty_fasync(int, struct file *, int);
566:	static void __tty_hangup(struct tty_struct *, int);
279:	static int check_tty_count(struct tty_struct *, const char *);
2813:	static int compat_tty_tiocgserial(struct tty_struct *, struct serial_struct32 *);
2783:	static int compat_tty_tiocsserial(struct tty_struct *, struct serial_struct32 *);
3357:	static void destruct_tty_driver(struct kref *);
3029:	static void do_SAK_work(struct work_struct *);
661:	static void do_tty_hangup(struct work_struct *);
1099:	static ssize_t file_tty_write(struct file *, struct iov_iter *, struct kiocb *);
316:	static struct tty_driver *get_tty_driver(dev_t, int *);
460:	static int hung_up_tty_fasync(int, struct file *, int);
448:	static long hung_up_tty_ioctl(struct file *, unsigned int, unsigned long);
443:	static __poll_t hung_up_tty_poll(struct file *, poll_table *);
432:	static ssize_t hung_up_tty_read(struct kiocb *, struct iov_iter *);
437:	static ssize_t hung_up_tty_write(struct kiocb *, struct iov_iter *);
845:	static int iterate_tty_read(struct tty_ldisc *, struct tty_struct *, struct file *, struct iov_iter *);
1529:	static void release_one_tty(struct work_struct *);
1589:	static void release_tty(struct tty_struct *, int);
2462:	static int send_break(struct tty_struct *, unsigned int);
3520:	static ssize_t show_cons_active(struct device *, struct device_attribute *, char *);
2952:	static int this_tty(const void *, struct file *, unsigned int);
2372:	static int tioccons(struct file *);
2262:	static int tiocsti(struct tty_struct *, char *);
3129:	static int tty_cdev_add(struct tty_driver *, dev_t, unsigned int, unsigned int);
3506:	static int tty_class_init(void);
2837:	static long tty_compat_ioctl(struct file *, unsigned int, unsigned long);
223:	static void tty_del_file(struct file *);
3172:	static void tty_device_create_release(struct device *);
3496:	static char *tty_devnode(struct device *, umode_t *);
1235:	static struct tty_struct *tty_driver_lookup_tty(struct tty_driver *, struct file *, int);
2234:	static int tty_fasync(int, struct file *, int);
1919:	static struct tty_driver *tty_lookup_driver(dev_t, struct file *, int *);
2097:	static int tty_open(struct inode *, struct file *);
2021:	static struct tty_struct *tty_open_by_driver(dev_t, struct file *);
260:	static int tty_paranoia_check(struct tty_struct *, struct inode *, const char *);
2181:	static __poll_t tty_poll(struct file *, poll_table *);
915:	static ssize_t tty_read(struct kiocb *, struct iov_iter *);
1619:	static int tty_release_checks(struct tty_struct *, int);
1339:	static int tty_reopen(struct tty_struct *);
465:	static void tty_show_fdinfo(struct seq_file *, struct file *);
2569:	static int tty_tiocsserial(struct tty_struct *, struct serial_struct *);
1123:	static ssize_t tty_write(struct kiocb *, struct iov_iter *);

File drivers/tty/tty_ioctl.c:
837:	int n_tty_ioctl_helper(struct tty_struct *, struct file *, unsigned int, unsigned long);
56:	int tty_chars_in_buffer(struct tty_struct *);
92:	void tty_driver_flush_buffer(struct tty_struct *);
663:	int tty_mode_ioctl(struct tty_struct *, struct file *, unsigned int, unsigned long);
822:	int tty_perform_flush(struct tty_struct *, unsigned long);
314:	int tty_set_termios(struct tty_struct *, struct ktermios *);
273:	void tty_termios_copy_hw(struct ktermios *, struct ktermios *);
293:	int tty_termios_hw_change(const struct ktermios *, const struct ktermios *);
109:	void tty_throttle(struct tty_struct *);
157:	int tty_throttle_safe(struct tty_struct *);
134:	void tty_unthrottle(struct tty_struct *);
188:	int tty_unthrottle_safe(struct tty_struct *);
218:	void tty_wait_until_sent(struct tty_struct *, long);
76:	int tty_write_room(struct tty_struct *);
796:	static int __tty_perform_flush(struct tty_struct *, unsigned long);
437:	static int get_termio(struct tty_struct *, struct termio *);
362:	static int set_termios(struct tty_struct *, void *, int);
243:	static void unset_locked_termios(struct tty_struct *, struct ktermios *);

File drivers/tty/tty_jobctrl.c:
31:	int __tty_check_change(struct tty_struct *, int);
257:	void disassociate_ctty(int);
156:	struct tty_struct *get_current_tty(void);
323:	void no_tty(void);
73:	void proc_clear_tty(struct task_struct *);
171:	void session_clear_tty(struct pid *);
67:	int tty_check_change(struct tty_struct *);
401:	struct pid *tty_get_pgrp(struct tty_struct *);
552:	long tty_jobctrl_ioctl(struct tty_struct *, struct tty_struct *, struct file *, unsigned int, unsigned long);
128:	void tty_open_proc_set_tty(struct file *, struct tty_struct *);
191:	int tty_signal_session_leader(struct tty_struct *, int);
94:	static void __proc_set_tty(struct tty_struct *);
346:	static int tiocsctty(struct tty_struct *, struct file *, int);
473:	static int tiocspgrp(struct tty_struct *, pid_t *, struct tty_struct *);

File drivers/tty/tty_ldisc.c:
844:	void tty_ldisc_deinit(struct tty_struct *);
304:	void tty_ldisc_deref(struct tty_ldisc *);
410:	void tty_ldisc_flush(struct tty_struct *);
716:	void tty_ldisc_hangup(struct tty_struct *, bool);
828:	int tty_ldisc_init(struct tty_struct *);
329:	int tty_ldisc_lock(struct tty_struct *, unsigned long);
283:	struct tty_ldisc *tty_ldisc_ref(struct tty_struct *);
262:	struct tty_ldisc *tty_ldisc_ref_wait(struct tty_struct *);
673:	int tty_ldisc_reinit(struct tty_struct *, int);
798:	void tty_ldisc_release(struct tty_struct *);
770:	int tty_ldisc_setup(struct tty_struct *, struct tty_struct *);
345:	void tty_ldisc_unlock(struct tty_struct *);
61:	int tty_register_ldisc(int, struct tty_ldisc_ops *);
552:	int tty_set_ldisc(struct tty_struct *, int);
883:	void tty_sysctl_init(void);
90:	int tty_unregister_ldisc(int);
109:	static struct tty_ldisc_ops *get_ldops(int);
482:	static void tty_ldisc_close(struct tty_struct *, struct tty_ldisc *);
501:	static int tty_ldisc_failto(struct tty_struct *, int);
160:	static struct tty_ldisc *tty_ldisc_get(struct tty_struct *, int);
354:	static int tty_ldisc_lock_pair_timeout(struct tty_struct *, struct tty_struct *, unsigned long);
457:	static int tty_ldisc_open(struct tty_struct *, struct tty_ldisc *);
198:	static void tty_ldisc_put(struct tty_ldisc *);
212:	static void *tty_ldiscs_seq_next(struct seq_file *, void *, loff_t *);
222:	static int tty_ldiscs_seq_show(struct seq_file *, void *);
207:	static void *tty_ldiscs_seq_start(struct seq_file *, loff_t *);
218:	static void tty_ldiscs_seq_stop(struct seq_file *, void *);

File drivers/tty/tty_ldsem.c:
57:	void __init_ldsem(struct ld_semaphore *, const char *, struct lock_class_key *);
337:	int ldsem_down_read(struct ld_semaphore *, long);
346:	int ldsem_down_read_trylock(struct ld_semaphore *);
363:	int ldsem_down_write(struct ld_semaphore *, long);
372:	int ldsem_down_write_trylock(struct ld_semaphore *);
389:	void ldsem_up_read(struct ld_semaphore *);
403:	void ldsem_up_write(struct ld_semaphore *);
74:	static void __ldsem_wake_readers(struct ld_semaphore *);
156:	static struct ld_semaphore *down_read_failed(struct ld_semaphore *, long, long);
230:	static struct ld_semaphore *down_write_failed(struct ld_semaphore *, long, long);
143:	static void ldsem_wake(struct ld_semaphore *);

File drivers/tty/tty_mutex.c:
14:	void tty_lock(struct tty_struct *);
23:	int tty_lock_interruptible(struct tty_struct *);
45:	void tty_lock_slave(struct tty_struct *);
57:	void tty_set_lock_subclass(struct tty_struct *);
36:	void tty_unlock(struct tty_struct *);
51:	void tty_unlock_slave(struct tty_struct *);

File drivers/tty/tty_port.c:
214:	int tty_port_alloc_xmit_buf(struct tty_port *);
462:	int tty_port_block_til_ready(struct tty_port *, struct tty_struct *, struct file *);
400:	int tty_port_carrier_raised(struct tty_port *);
631:	void tty_port_close(struct tty_port *, struct tty_struct *, struct file *);
605:	void tty_port_close_end(struct tty_port *, struct tty_struct *);
559:	int tty_port_close_start(struct tty_port *, struct tty_struct *, struct file *);
246:	void tty_port_destroy(struct tty_port *);
227:	void tty_port_free_xmit_buf(struct tty_port *);
345:	void tty_port_hangup(struct tty_port *);
61:	void tty_port_init(struct tty_port *);
654:	int tty_port_install(struct tty_port *, struct tty_driver *, struct tty_struct *);
88:	void tty_port_link_device(struct tty_port *, struct tty_driver *, unsigned int);
431:	void tty_port_lower_dtr_rts(struct tty_port *);
670:	int tty_port_open(struct tty_port *, struct tty_struct *, struct file *);
269:	void tty_port_put(struct tty_port *);
416:	void tty_port_raise_dtr_rts(struct tty_port *);
108:	struct device *tty_port_register_device(struct tty_port *, struct tty_driver *, unsigned int, struct device *);
129:	struct device *tty_port_register_device_attr(struct tty_port *, struct tty_driver *, unsigned int, struct device *, void *, const struct attribute_group **);
283:	struct tty_struct *tty_port_tty_get(struct tty_port *);
371:	void tty_port_tty_hangup(struct tty_port *, bool);
303:	void tty_port_tty_set(struct tty_port *, struct tty_struct *);
386:	void tty_port_tty_wakeup(struct tty_port *);
201:	void tty_port_unregister_device(struct tty_port *, struct tty_driver *, unsigned int);
22:	static int tty_port_default_receive_buf(struct tty_port *, const unsigned char *, const unsigned char *, size_t);
45:	static void tty_port_default_wakeup(struct tty_port *);
253:	static void tty_port_destructor(struct kref *);
314:	static void tty_port_shutdown(struct tty_port *, struct tty_struct *);

File drivers/tty/vt/consolemap.c:
527:	int con_clear_unimap(struct vc_data *);
715:	int con_copy_unimap(struct vc_data *, struct vc_data *);
420:	void con_free_unimap(struct vc_data *);
372:	int con_get_trans_new(ushort *);
341:	int con_get_trans_old(unsigned char *);
738:	int con_get_unimap(struct vc_data *, ushort, ushort *, struct unipair *);
659:	int con_set_default_unimap(struct vc_data *);
358:	int con_set_trans_new(ushort *);
322:	int con_set_trans_old(unsigned char *);
536:	int con_set_unimap(struct vc_data *, ushort, struct unipair *);
849:	void console_map_init(void);
793:	u32 conv_8bit_to_uni(unsigned char);
799:	int conv_uni_to_8bit(u32);
810:	int conv_uni_to_pc(struct vc_data *, long);
271:	u16 inverse_translate(const struct vc_data *, int, int);
258:	unsigned short *set_translate(int, struct vc_data *);
504:	static int con_do_clear_unimap(struct vc_data *);
475:	static int con_insert_unipair(struct uni_pagedir *, u_short, u_short);
396:	static void con_release_unimap(struct uni_pagedir *);
434:	static int con_unify_unimap(struct vc_data *, struct uni_pagedir *);
223:	static void set_inverse_trans_unicode(struct uni_pagedir *, struct vc_data *);
199:	static void set_inverse_transl(struct vc_data *, struct uni_pagedir *, int);
297:	static void update_user_maps(void);

File drivers/tty/vt/keyboard.c:
397:	void compute_shiftstate(void);
1619:	int kbd_init(void);
298:	int kbd_rate(struct kbd_repeat *);
262:	void kd_mksound(unsigned int, unsigned int);
149:	int register_keyboard_notifier(struct notifier_block *);
1124:	void setledstate(struct kbd_struct *, unsigned int);
155:	int unregister_keyboard_notifier(struct notifier_block *);
2297:	void vt_clr_kbd_mode_bit(int, int);
1657:	int vt_do_diacrit(unsigned int, void *, int);
1867:	int vt_do_kbkeycode_ioctl(int, struct kbkeycode *, int);
2000:	int vt_do_kdgkb_ioctl(int, struct kbsentry *, int);
2192:	int vt_do_kdgkbmeta(int);
2168:	int vt_do_kdgkbmode(int);
1894:	int vt_do_kdsk_ioctl(int, struct kbentry *, int, int);
1846:	int vt_do_kdskbmeta(int, unsigned int);
1806:	int vt_do_kdskbmode(int, unsigned int);
2126:	int vt_do_kdskled(int, int, unsigned long, int);
2263:	int vt_get_kbd_mode_bit(int, int);
1155:	int vt_get_leds(int, int);
2220:	int vt_get_shift_state(void);
1196:	void vt_kbd_con_start(int);
1213:	void vt_kbd_con_stop(int);
2233:	void vt_reset_keyboard(int);
2205:	void vt_reset_unicode(int);
2278:	void vt_set_kbd_mode_bit(int, int);
1177:	void vt_set_led_state(int, int);
375:	static void do_compute_shiftstate(void);
612:	static void fn_SAK(struct vc_data *);
519:	static void fn_bare_num(struct vc_data *);
591:	static void fn_boot_it(struct vc_data *);
471:	static void fn_caps_on(struct vc_data *);
463:	static void fn_caps_toggle(struct vc_data *);
596:	static void fn_compose(struct vc_data *);
531:	static void fn_dec_console(struct vc_data *);
445:	static void fn_enter(struct vc_data *);
487:	static void fn_hold(struct vc_data *);
548:	static void fn_inc_console(struct vc_data *);
525:	static void fn_lastcons(struct vc_data *);
618:	static void fn_null(struct vc_data *);
505:	static void fn_num(struct vc_data *);
576:	static void fn_scroll_back(struct vc_data *);
571:	static void fn_scroll_forw(struct vc_data *);
565:	static void fn_send_intr(struct vc_data *);
581:	static void fn_show_mem(struct vc_data *);
479:	static void fn_show_ptregs(struct vc_data *);
586:	static void fn_show_state(struct vc_data *);
601:	static void fn_spawn_con(struct vc_data *);
176:	static int getkeycode_helper(struct input_handle *, void *);
412:	static unsigned int handle_diacr(struct vc_data *, unsigned int);
879:	static void k_ascii(struct vc_data *, unsigned char, char);
952:	static void k_brl(struct vc_data *, unsigned char, char);
934:	static void k_brlcommit(struct vc_data *, unsigned int, char);
732:	static void k_cons(struct vc_data *, unsigned char, char);
757:	static void k_cur(struct vc_data *, unsigned char, char);
697:	static void k_dead(struct vc_data *, unsigned char, char);
689:	static void k_dead2(struct vc_data *, unsigned char, char);
740:	static void k_fn(struct vc_data *, unsigned char, char);
626:	static void k_ignore(struct vc_data *, unsigned char, char);
903:	static void k_lock(struct vc_data *, unsigned char, char);
644:	static void k_lowercase(struct vc_data *, unsigned char, char);
867:	static void k_meta(struct vc_data *, unsigned char, char);
767:	static void k_pad(struct vc_data *, unsigned char, char);
684:	static void k_self(struct vc_data *, unsigned char, char);
826:	static void k_shift(struct vc_data *, unsigned char, char);
911:	static void k_slock(struct vc_data *, unsigned char, char);
630:	static void k_spec(struct vc_data *, unsigned char, char);
649:	static void k_unicode(struct vc_data *, unsigned int, char);
1229:	static void kbd_bh(unsigned long);
1541:	static int kbd_connect(struct input_handler *, struct input_dev *, const struct input_device_id *);
1572:	static void kbd_disconnect(struct input_handle *);
1498:	static void kbd_event(struct input_handle *, unsigned int, unsigned int, int);
1359:	static void kbd_keycode(unsigned int, int, int);
1003:	static int kbd_led_trigger_activate(struct led_classdev *);
1516:	static bool kbd_match(struct input_handler *, struct input_dev *);
277:	static int kbd_rate_helper(struct input_handle *, void *);
1583:	static void kbd_start(struct input_handle *);
253:	static void kd_nosound(struct timer_list *);
235:	static int kd_sound_helper(struct input_handle *, void *);
311:	static void put_queue(struct vc_data *, int);
317:	static void puts_queue(struct vc_data *, char *);
203:	static int setkeycode_helper(struct input_handle *, void *);
341:	static void to_utf8(struct vc_data *, uint);

File drivers/tty/vt/selection.c:
80:	void clear_selection(void);
374:	int paste_selection(struct tty_struct *);
118:	int sel_loadlut(char *);
353:	int set_selection_kernel(struct tiocl_selection *, struct tty_struct *);
177:	int set_selection_user(const struct tiocl_selection *, struct tty_struct *);
90:	bool vc_is_sel(struct vc_data *);
67:	static u32 sel_pos(int, bool);
229:	static int vc_do_selection(struct vc_data *, unsigned short, int, int);
316:	static int vc_selection(struct vc_data *, struct tiocl_selection *, struct tty_struct *);
188:	static int vc_selection_store_chars(struct vc_data *, bool);

File drivers/tty/vt/vc_screen.c:
801:	int vcs_init(void);
784:	void vcs_make_sysfs(int);
794:	void vcs_remove_sysfs(int);
728:	static int vcs_fasync(int, struct file *, int);
228:	static loff_t vcs_lseek(struct file *, loff_t, int);
85:	static int vcs_notifier(struct notifier_block *, unsigned long, void *);
745:	static int vcs_open(struct inode *, struct file *);
705:	static __poll_t vcs_poll(struct file *, poll_table *);
126:	static struct vcs_poll_data *vcs_poll_data_get(struct file *);
365:	static ssize_t vcs_read(struct file *, char *, size_t, loff_t *);
763:	static int vcs_release(struct inode *, struct file *);
209:	static int vcs_size(const struct vc_data *, bool, bool);
183:	static struct vc_data *vcs_vc(bool *, struct inode *, struct inode *);
590:	static ssize_t vcs_write(struct file *, const char *, size_t, loff_t *);
518:	static u16 *vcs_write_buf(struct vc_data *, const char *, unsigned int, unsigned int, bool, u16 **);

File drivers/tty/vt/vt.c:
973:	void clear_buffer_attributes(struct vc_data *);
805:	void complement_pos(struct vc_data *, int);
4039:	int con_debug_enter(struct vc_data *);
4095:	int con_debug_leave(void);
4748:	int con_font_op(struct vc_data *, struct console_font_op *);
4554:	int con_get_cmap(unsigned char *);
3996:	int con_is_bound(const struct consw *);
4019:	bool con_is_visible(const struct vc_data *);
4525:	int con_set_cmap(unsigned char *);
4354:	void do_blank_screen(int);
4270:	int do_take_over_console(const struct consw *, int, int, int);
3742:	int do_unbind_con_driver(const struct consw *, int, int, int);
4415:	void do_unblank_screen(int);
4193:	int do_unregister_con_driver(const struct consw *);
4797:	void getconsxy(const struct vc_data *, unsigned char *);
4294:	void give_up_console(const struct consw *);
756:	void invert_screen(struct vc_data *, int, int, bool);
1866:	void mouse_report(struct tty_struct *, int, int, int);
1877:	int mouse_reporting(void);
4480:	void poke_blanked_console(void);
4804:	void putconsxy(struct vc_data *, unsigned char * const);
984:	void redraw_screen(struct vc_data *, int);
249:	int register_vt_notifier(struct notifier_block *);
4573:	void reset_palette(struct vc_data *);
310:	void schedule_console_callback(void);
4769:	u16 screen_glyph(const struct vc_data *, int);
4780:	u32 screen_glyph_unicode(const struct vc_data *, int);
4791:	unsigned short *screen_pos(const struct vc_data *, int, bool);
1490:	void scrollback(struct vc_data *);
1495:	void scrollfront(struct vc_data *, int);
3014:	int set_console(int);
3185:	int tioclinux(struct tty_struct *, unsigned long);
4464:	void unblank_screen(void);
255:	int unregister_vt_notifier(struct notifier_block *);
688:	void update_region(struct vc_data *, unsigned long, int);
1109:	int vc_allocate(unsigned int);
1049:	int vc_cons_allocated(unsigned int);
1389:	struct vc_data *vc_deallocate(unsigned int);
1361:	int vc_resize(struct vc_data *, unsigned int, unsigned int);
4832:	void vc_scrolldelta_helper(struct vc_data *, int, unsigned int, void *, unsigned int);
501:	int vc_uniscr_check(struct vc_data *);
547:	void vc_uniscr_copy_line(const struct vc_data *, void *, bool, unsigned int, unsigned int, unsigned int);
4811:	u16 vcs_scr_readw(const struct vc_data *, const u16 *);
4827:	void vcs_scr_updated(struct vc_data *);
4818:	void vcs_scr_writew(struct vc_data *, u16, u16 *);
3063:	int vt_kmsg_redirect(int);
3597:	int vty_init(const struct file_operations *);
869:	static void add_softcursor(struct vc_data *);
4474:	static void blank_screen_t(struct timer_list *);
701:	static u8 build_attr(struct vc_data *, u8, enum vc_intensity, bool, bool, bool, bool);
3316:	static int con_chars_in_buffer(struct tty_struct *);
3444:	static void con_cleanup(struct tty_struct *);
3430:	static void con_close(struct tty_struct *, struct file *);
4230:	static void con_driver_unregister_callback(struct work_struct *);
3365:	static void con_flush_chars(struct tty_struct *);
4599:	static int con_font_get(struct vc_data *, struct console_font_op *);
3490:	static int con_init(void);
3383:	static int con_install(struct tty_driver *, struct tty_struct *);
3423:	static int con_open(struct tty_struct *, struct file *);
3302:	static int con_put_char(struct tty_struct *, unsigned char);
620:	static void con_scroll(struct vc_data *, unsigned int, unsigned int, enum con_scroll, unsigned int);
3435:	static void con_shutdown(struct tty_struct *);
3354:	static void con_start(struct tty_struct *);
3340:	static void con_stop(struct tty_struct *);
3326:	static void con_throttle(struct tty_struct *);
3330:	static void con_unthrottle(struct tty_struct *);
3292:	static int con_write(struct tty_struct *, const unsigned char *, int);
3309:	static int con_write_room(struct tty_struct *);
2979:	static void console_callback(struct work_struct *);
1553:	static void csi_J(struct vc_data *, int);
1732:	static void csi_m(struct vc_data *);
1840:	static void cursor_report(struct vc_data *, struct tty_struct *);
853:	static void delete_char(struct vc_data *, unsigned int);
3639:	static int do_bind_con_driver(const struct consw *, int, int, int);
2163:	static void do_con_trol(struct tty_struct *, struct vc_data *, int);
2895:	static int do_con_write(struct tty_struct *, const unsigned char *, int);
4113:	static int do_register_con_driver(const struct consw *, int, int);
644:	static void do_update_region(struct vc_data *, unsigned long, int);
947:	static void flush_scrollback(struct vc_data *);
1485:	static void gotoxay(struct vc_data *, int, int);
1453:	static void gotoxy(struct vc_data *, int, int);
902:	static void hide_cursor(struct vc_data *);
840:	static void insert_char(struct vc_data *, unsigned int);
1502:	static void lf(struct vc_data *);
2083:	static void reset_terminal(struct vc_data *, int);
1834:	static void respond_string(const char *, size_t, struct tty_port *);
2067:	static void restore_cur(struct vc_data *);
1688:	static void rgb_background(struct vc_data *, const struct rgb *);
1666:	static void rgb_foreground(struct vc_data *, const struct rgb *);
2061:	static void save_cur(struct vc_data *);
939:	static void save_screen(struct vc_data *);
911:	static void set_cursor(struct vc_data *);
1883:	static void set_mode(struct vc_data *, int);
925:	static void set_origin(struct vc_data *);
4512:	static void set_palette(struct vc_data *);
1954:	static void setterm_command(struct vc_data *);
3941:	static ssize_t show_bind(struct device *, struct device_attribute *, char *);
3954:	static ssize_t show_name(struct device *, struct device_attribute *, char *);
3583:	static ssize_t show_tty_active(struct device *, struct device_attribute *, char *);
3923:	static ssize_t store_bind(struct device *, struct device_attribute *, const char *, size_t);
2580:	static int ucs_cmp(const void *, const void *);
745:	static void update_attr(struct vc_data *);
2796:	static int vc_con_write_normal(struct vc_data *, int, int, struct vc_draw_region *);
1196:	static int vc_do_resize(struct tty_struct *, struct vc_data *, unsigned int, unsigned int);
3458:	static void vc_init(struct vc_data *, unsigned int, unsigned int, int);
1090:	static void vc_port_destruct(struct tty_port *);
2131:	static void vc_setGx(struct vc_data *, unsigned int, int);
1704:	static int vc_t416_color(struct vc_data *, int, void (*)(struct vc_data *, const struct rgb *));
1054:	static void visual_init(struct vc_data *, int, int);
3154:	static struct tty_driver *vt_console_device(struct console *, int *);
3079:	static void vt_console_print(struct console *, const char *, unsigned int);
1378:	static int vt_resize(struct tty_struct *, struct winsize *);
4301:	static int vtconsole_class_init(void);

File drivers/tty/vt/vt_ioctl.c:
1352:	void change_console(struct vc_data *);
1466:	void pm_set_vt_switch(int);
1060:	void reset_vc(struct vc_data *);
1076:	void vc_SAK(struct work_struct *);
1205:	long vt_compat_ioctl(struct tty_struct *, unsigned int, unsigned long);
111:	void vt_event_post(unsigned int, unsigned int, unsigned int);
836:	int vt_ioctl(struct tty_struct *, unsigned int, unsigned long);
1423:	int vt_move_to_console(unsigned int, int);
217:	int vt_waitactive(int);
138:	static void __vt_event_queue(struct vt_event_wait *);
150:	static void __vt_event_wait(struct vt_event_wait *);
1278:	static void complete_change_console(struct vc_data *);
730:	static int vt_disallocate(unsigned int);
749:	static void vt_disallocate_all(void);
189:	static int vt_event_wait_ioctl(struct vt_event *);
574:	static int vt_io_ioctl(struct vc_data *, unsigned int, void *, bool);
283:	static int vt_k_ioctl(struct tty_struct *, unsigned int, unsigned long, bool);
768:	static int vt_resizex(struct vc_data *, struct vt_consize *);
691:	static int vt_setactivate(struct vt_setactivate *);

File drivers/usb/common/common.c:
28:	const char *usb_ep_type_string(int);
131:	enum usb_dr_mode usb_get_dr_mode(struct device *);
80:	enum usb_device_speed usb_get_maximum_speed(struct device *);
37:	const char *usb_otg_state_string(enum usb_otg_state);
72:	const char *usb_speed_string(enum usb_device_speed);
95:	const char *usb_state_string(enum usb_device_state);
306:	static void usb_common_exit(void);
299:	static int usb_common_init(void);

File drivers/usb/common/debug.c:
213:	const char *usb_decode_ctrl(char *, size_t, __u8, __u8, __u16, __u16, __u16);

File drivers/usb/common/led.c:
46:	void ledtrig_usb_exit(void);
40:	void ledtrig_usb_init(void);
22:	void usb_led_activity(enum usb_led_event);

File drivers/usb/core/buffer.c:
113:	void *hcd_buffer_alloc(struct usb_bus *, size_t, gfp_t, dma_addr_t *);
64:	int hcd_buffer_create(struct usb_hcd *);
95:	void hcd_buffer_destroy(struct usb_hcd *);
142:	void hcd_buffer_free(struct usb_bus *, size_t, void *, dma_addr_t);
33:	void usb_init_pool_max(void);

File drivers/usb/core/config.c:
825:	void usb_destroy_configuration(struct usb_device *);
978:	int usb_get_bos_descriptor(struct usb_device *);
861:	int usb_get_configuration(struct usb_device *);
959:	void usb_release_bos_descriptor(struct usb_device *);
484:	void usb_release_interface_cache(struct kref *);
224:	static bool config_endpoint_is_duplicate(struct usb_host_config *, int, int, struct usb_endpoint_descriptor *);
605:	static int usb_parse_configuration(struct usb_device *, int, struct usb_host_config *, unsigned char *, int);
254:	static int usb_parse_endpoint(struct device *, int, struct usb_host_config *, int, int, struct usb_host_interface *, int, unsigned char *, int);
498:	static int usb_parse_interface(struct device *, int, struct usb_host_config *, unsigned char *, int, u8 *, u8 *);
72:	static void usb_parse_ss_endpoint_companion(struct device *, int, int, int, struct usb_host_endpoint *, unsigned char *, int);

File drivers/usb/core/devices.c:
450:	static ssize_t usb_device_dump(char **, size_t *, loff_t *, loff_t *, struct usb_device *, struct usb_bus *, int, int, int);
570:	static ssize_t usb_device_read(struct file *, char *, size_t, loff_t *);
294:	static char *usb_dump_config(int, char *, char *, const struct usb_host_config *, int);
381:	static char *usb_dump_desc(char *, char *, struct usb_device *);

File drivers/usb/core/devio.c:
2812:	void usb_devio_cleanup(void);
2786:	int usb_devio_init(void);
735:	void usbfs_notify_resume(struct usb_device *);
730:	void usbfs_notify_suspend(struct usb_device *);
600:	static void async_completed(struct urb *);
437:	static struct async *async_getcompleted(struct usb_dev_state *);
562:	static void cancel_bulk_urbs(struct usb_dev_state *, unsigned int);
856:	static int check_ctrlrecip(struct usb_dev_state *, unsigned int, unsigned int, unsigned int);
1276:	static void check_reset_of_active_ep(struct usb_device *, unsigned int, char *);
816:	static int checkintf(struct usb_dev_state *, unsigned int);
757:	static int claimintf(struct usb_dev_state *, unsigned int);
533:	static int copy_urb_data_to_user(u8 *, struct urb *);
173:	static void dec_usb_memory_use_count(struct usb_memory *, int *);
640:	static void destroy_async(struct usb_dev_state *, struct list_head *);
662:	static void destroy_async_on_interface(struct usb_dev_state *, unsigned int);
1194:	static int do_proc_bulk(struct usb_dev_state *, struct usbdevfs_bulktransfer *);
1105:	static int do_proc_control(struct usb_dev_state *, struct usbdevfs_ctrltransfer *);
694:	static void driver_disconnect(struct usb_interface *);
688:	static int driver_probe(struct usb_interface *, const struct usb_device_id *);
724:	static int driver_resume(struct usb_interface *);
719:	static int driver_suspend(struct usb_interface *, pm_message_t);
831:	static int findintfep(struct usb_device *, unsigned int);
393:	static void free_async(struct async *);
2071:	static int get_urb32(struct usbdevfs_urb *, struct usbdevfs_urb32 *);
924:	static int parse_usbdevfs_streams(struct usb_dev_state *, struct usbdevfs_streams *, unsigned int *, unsigned int *, struct usb_host_endpoint ***, struct usb_interface **);
1308:	static int proc_clearhalt(struct usb_dev_state *, void *);
2357:	static int proc_disconnect_claim(struct usb_dev_state *, void *);
1513:	static int proc_do_submiturb(struct usb_dev_state *, struct usbdevfs_urb *, struct usbdevfs_iso_packet_desc *, void *, sigval_t);
1331:	static int proc_getdriver(struct usb_dev_state *, void *);
2213:	static int proc_ioctl(struct usb_dev_state *, struct usbdevfs_ioctl *);
1290:	static int proc_resetep(struct usb_dev_state *, void *);
1440:	static int proc_setconfig(struct usb_dev_state *, void *);
1902:	static int proc_unlinkurb(struct usb_dev_state *, void *);
2475:	static int proc_wait_for_resume(struct usb_dev_state *);
1937:	static int processcompl(struct async *, void **);
2108:	static int processcompl_compat(struct async *, void **);
1975:	static struct async *reap_as(struct usb_dev_state *);
790:	static int releaseintf(struct usb_dev_state *, unsigned int);
466:	static void snoop_urb(struct usb_device *, void *, int, unsigned int, int, enum snoop_when, unsigned char *, unsigned int);
511:	static void snoop_urb_data(struct urb *, unsigned int);
2494:	static long usbdev_do_ioctl(struct file *, unsigned int, void *);
2708:	static long usbdev_ioctl(struct file *, unsigned int, unsigned long);
216:	static int usbdev_mmap(struct file *, struct vm_area_struct *);
2767:	static int usbdev_notify(struct notifier_block *, unsigned long, void *);
1010:	static int usbdev_open(struct inode *, struct file *);
2719:	static __poll_t usbdev_poll(struct file *, struct poll_table_struct *);
288:	static ssize_t usbdev_read(struct file *, char *, size_t, loff_t *);
1067:	static int usbdev_release(struct inode *, struct file *);
2747:	static void usbdev_remove(struct usb_device *);
204:	static void usbdev_vm_close(struct vm_area_struct *);
194:	static void usbdev_vm_open(struct vm_area_struct *);
144:	static int usbfs_increase_memory_usage(u64);

File drivers/usb/core/driver.c:
1813:	int usb_autopm_get_interface(struct usb_interface *);
1846:	int usb_autopm_get_interface_async(struct usb_interface *);
1871:	void usb_autopm_get_interface_no_resume(struct usb_interface *);
1735:	void usb_autopm_put_interface(struct usb_interface *);
1763:	void usb_autopm_put_interface_async(struct usb_interface *);
1785:	void usb_autopm_put_interface_no_suspend(struct usb_interface *);
1705:	int usb_autoresume_device(struct usb_device *);
1674:	void usb_autosuspend_device(struct usb_device *);
1099:	void usb_deregister(struct usb_driver *);
1021:	void usb_deregister_device_driver(struct usb_device_driver *);
828:	const struct usb_device_id *usb_device_match_id(struct usb_device *, const struct usb_device_id *);
1652:	void usb_disable_autosuspend(struct usb_device *);
2020:	int usb_disable_usb2_hardware_lpm(struct usb_device *);
842:	bool usb_driver_applicable(struct usb_device *, struct usb_device_driver *);
539:	int usb_driver_claim_interface(struct usb_driver *, struct usb_interface *, void *);
613:	void usb_driver_release_interface(struct usb_driver *, struct usb_interface *);
1637:	void usb_enable_autosuspend(struct usb_device *);
2010:	int usb_enable_usb2_hardware_lpm(struct usb_device *);
1116:	void usb_forced_unbind_intf(struct usb_interface *);
642:	int usb_match_device(struct usb_device *, const struct usb_device_id *);
806:	const struct usb_device_id *usb_match_id(struct usb_interface *, const struct usb_device_id *);
713:	int usb_match_one_id(struct usb_interface *, const struct usb_device_id *);
678:	int usb_match_one_id_intf(struct usb_device *, struct usb_host_interface *, const struct usb_device_id *);
978:	int usb_register_device_driver(struct usb_device_driver *, struct module *);
1046:	int usb_register_driver(struct usb_driver *, struct module *, const char *);
1599:	int usb_resume(struct device *, pm_message_t);
1586:	int usb_resume_complete(struct device *);
1983:	int usb_runtime_idle(struct device *);
1971:	int usb_runtime_resume(struct device *);
1942:	int usb_runtime_suspend(struct device *);
114:	ssize_t usb_show_dynids(struct usb_dynids *, char *);
42:	ssize_t usb_store_new_id(struct usb_dynids *, const struct usb_device_id *, struct device_driver *, const char *, size_t);
1563:	int usb_suspend(struct device *, pm_message_t);
1203:	void usb_unbind_and_rebind_marked_interfaces(struct usb_device *);
946:	static int __usb_bus_reprobe_drivers(struct device *, void *);
1881:	static int autosuspend_check(struct usb_device *);
131:	static ssize_t new_id_show(struct device_driver *, char *);
138:	static ssize_t new_id_store(struct device_driver *, const char *, size_t);
1180:	static void rebind_marked_interfaces(struct usb_device *, struct usb_device *);
150:	static ssize_t remove_id_store(struct device_driver *, const char *, size_t);
1133:	static void unbind_marked_interfaces(struct usb_device *, struct usb_device *);
858:	static int usb_device_match(struct device *, struct device_driver *);
219:	static void usb_free_dynids(struct usb_driver *);
231:	static const struct usb_device_id *usb_match_dynamic_id(struct usb_interface *, struct usb_driver *);
249:	static int usb_probe_device(struct device *);
318:	static int usb_probe_interface(struct device *);
1502:	static int usb_resume_both(struct usb_device *, pm_message_t);
1320:	static int usb_resume_interface(struct usb_device *, struct usb_interface *, int, pm_message_t);
1401:	static int usb_suspend_both(struct usb_device *, pm_message_t);
905:	static int usb_uevent(struct device *, struct kobj_uevent_env *);
303:	static int usb_unbind_device(struct device *);
428:	static int usb_unbind_interface(struct device *);

File drivers/usb/core/endpoint.c:
176:	int usb_create_ep_devs(struct device *, struct usb_host_endpoint *, struct usb_device *);
210:	void usb_remove_ep_devs(struct usb_host_endpoint *);
47:	static ssize_t bEndpointAddress_show(struct device *, struct device_attribute *, char *);
49:	static ssize_t bInterval_show(struct device *, struct device_attribute *, char *);
46:	static ssize_t bLength_show(struct device *, struct device_attribute *, char *);
48:	static ssize_t bmAttributes_show(struct device *, struct device_attribute *, char *);
129:	static ssize_t direction_show(struct device *, struct device_attribute *, char *);
164:	static void ep_device_release(struct device *);
83:	static ssize_t interval_show(struct device *, struct device_attribute *, char *);
59:	static ssize_t type_show(struct device *, struct device_attribute *, char *);
51:	static ssize_t wMaxPacketSize_show(struct device *, struct device_attribute *, char *);

File drivers/usb/core/file.c:
230:	void usb_deregister_dev(struct usb_interface *, struct usb_class_driver *);
132:	void usb_major_cleanup(void);
120:	int usb_major_init(void);
156:	int usb_register_dev(struct usb_interface *, struct usb_class_driver *);
113:	static void destroy_usb_class(void);
75:	static int init_usb_class(void);
65:	static char *usb_devnode(struct device *, umode_t *);
34:	static int usb_open(struct inode *, struct file *);

File drivers/usb/core/generic.c:
56:	int usb_choose_configuration(struct usb_device *);
253:	void usb_generic_driver_disconnect(struct usb_device *);
226:	int usb_generic_driver_probe(struct usb_device *);
293:	int usb_generic_driver_resume(struct usb_device *, pm_message_t);
265:	int usb_generic_driver_suspend(struct usb_device *, pm_message_t);
198:	static int __check_for_non_generic_match(struct device_driver *, void *);
211:	static bool usb_generic_driver_match(struct usb_device *);

File drivers/usb/core/hcd-pci.c:
183:	int usb_hcd_pci_probe(struct pci_dev *, const struct pci_device_id *, const struct hc_driver *);
325:	void usb_hcd_pci_remove(struct pci_dev *);
373:	void usb_hcd_pci_shutdown(struct pci_dev *);
414:	static int check_root_hub_suspended(struct device *);
112:	static void ehci_post_add(struct pci_dev *, struct usb_hcd *, struct pci_dev *, struct usb_hcd *);
95:	static void ehci_pre_add(struct pci_dev *, struct usb_hcd *, struct pci_dev *, struct usb_hcd *);
144:	static void ehci_remove(struct pci_dev *, struct usb_hcd *, struct pci_dev *, struct usb_hcd *);
154:	static void ehci_wait_for_companions(struct pci_dev *, struct usb_hcd *, struct pci_dev *, struct usb_hcd *);
46:	static void for_each_companion(struct pci_dev *, struct usb_hcd *, companion_fn);
586:	static int hcd_pci_restore(struct device *);
581:	static int hcd_pci_resume(struct device *);
575:	static int hcd_pci_resume_noirq(struct device *);
612:	static int hcd_pci_runtime_resume(struct device *);
601:	static int hcd_pci_runtime_suspend(struct device *);
531:	static int hcd_pci_suspend(struct device *);
536:	static int hcd_pci_suspend_noirq(struct device *);
133:	static void non_ehci_add(struct pci_dev *, struct usb_hcd *, struct pci_dev *, struct usb_hcd *);
487:	static int resume_common(struct device *, int);
432:	static int suspend_common(struct device *, bool);

File drivers/usb/core/hcd.c:
2416:	struct usb_hcd *__usb_create_hcd(const struct hc_driver *, struct device *, struct device *, const char *, struct usb_hcd *);
2167:	int hcd_bus_resume(struct usb_device *, pm_message_t);
2114:	int hcd_bus_suspend(struct usb_device *, pm_message_t);
2638:	int usb_add_hcd(struct usb_hcd *, unsigned int, unsigned long);
2008:	int usb_alloc_streams(struct usb_interface *, struct usb_host_endpoint **, unsigned int, unsigned int, gfp_t);
1086:	long usb_calc_bus_time(int, int, int, int);
2515:	struct usb_hcd *usb_create_hcd(const struct hc_driver *, struct device *, const char *);
2493:	struct usb_hcd *usb_create_shared_hcd(const struct hc_driver *, struct device *, const char *, struct usb_hcd *);
2058:	int usb_free_streams(struct usb_interface *, struct usb_host_endpoint **, unsigned int, gfp_t);
2549:	struct usb_hcd *usb_get_hcd(struct usb_hcd *);
2364:	void usb_hc_died(struct usb_hcd *);
1834:	int usb_hcd_alloc_bandwidth(struct usb_device *, struct usb_host_config *, struct usb_host_interface *, struct usb_host_interface *);
1203:	int usb_hcd_check_unlink_urb(struct usb_hcd *, struct urb *, int);
1956:	void usb_hcd_disable_endpoint(struct usb_device *, struct usb_host_endpoint *);
1060:	void usb_hcd_end_port_resume(struct usb_bus *, int);
2572:	int usb_hcd_find_raw_port_number(struct usb_hcd *, int);
1755:	void usb_hcd_flush_endpoint(struct usb_device *, struct usb_host_endpoint *);
2101:	int usb_hcd_get_frame_number(struct usb_device *);
1713:	void usb_hcd_giveback_urb(struct usb_hcd *, struct urb *, int);
2323:	irqreturn_t usb_hcd_irq(int, void *);
2564:	int usb_hcd_is_primary_hcd(struct usb_hcd *);
1145:	int usb_hcd_link_urb_to_ep(struct usb_hcd *, struct urb *);
1398:	int usb_hcd_map_urb_for_dma(struct usb_hcd *, struct urb *, gfp_t);
2913:	void usb_hcd_platform_shutdown(struct platform_device *);
753:	void usb_hcd_poll_rh_status(struct usb_hcd *);
1975:	void usb_hcd_reset_endpoint(struct usb_device *, struct usb_host_endpoint *);
2254:	void usb_hcd_resume_root_hub(struct usb_hcd *);
2925:	int usb_hcd_setup_local_mem(struct usb_hcd *, phys_addr_t, dma_addr_t, size_t);
1038:	void usb_hcd_start_port_resume(struct usb_bus *, int);
1520:	int usb_hcd_submit_urb(struct urb *, gfp_t);
2092:	void usb_hcd_synchronize_unlinks(struct usb_device *);
1595:	int usb_hcd_unlink_urb(struct urb *, int);
1236:	void usb_hcd_unlink_urb_from_ep(struct usb_hcd *, struct urb *);
1351:	void usb_hcd_unmap_urb_for_dma(struct usb_hcd *, struct urb *);
1323:	void usb_hcd_unmap_urb_setup_for_dma(struct usb_hcd *, struct urb *);
2985:	void usb_mon_deregister(void);
2973:	int usb_mon_register(const struct usb_mon_operations *);
2557:	void usb_put_hcd(struct usb_hcd *);
2845:	void usb_remove_hcd(struct usb_hcd *);
1628:	static void __usb_hcd_giveback_urb(struct urb *);
403:	static unsigned int ascii2desc(const char *, u8 *, unsigned int);
1271:	static int hcd_alloc_coherent(struct usb_bus *, gfp_t, dma_addr_t *, void **, size_t, enum dma_data_direction);
2342:	static void hcd_died_work(struct work_struct *);
2237:	static void hcd_resume_work(struct work_struct *);
974:	static int register_root_hub(struct usb_hcd *);
478:	static int rh_call_control(struct usb_hcd *, struct urb *);
806:	static int rh_queue_status(struct usb_hcd *, struct urb *);
797:	static void rh_timer_func(struct timer_list *);
1573:	static int unlink1(struct usb_hcd *, struct urb *, int);
947:	static void usb_deregister_bus(struct usb_bus *);
1667:	static void usb_giveback_urb_bh(struct tasklet_struct *);
2580:	static int usb_hcd_request_irqs(struct usb_hcd *, unsigned int, unsigned long);
2617:	static void usb_put_invalidate_rhdev(struct usb_hcd *);

File drivers/usb/core/hub.c:
4467:	int hub_port_debounce(struct usb_hub *, int, bool);
2628:	int usb_authorize_device(struct usb_device *);
426:	int usb_clear_port_feature(struct usb_device *, int, int);
2613:	int usb_deauthorize_device(struct usb_device *);
1997:	bool usb_device_is_owned(struct usb_device *);
143:	int usb_device_supports_lpm(struct usb_device *);
4236:	int usb_disable_lpm(struct usb_device *);
3132:	int usb_disable_ltm(struct usb_device *);
2193:	void usb_disconnect(struct usb_device **);
4293:	void usb_enable_lpm(struct usb_device *);
3154:	void usb_enable_ltm(struct usb_device *);
4510:	void usb_ep0_reinit(struct usb_device *);
6182:	acpi_handle usb_get_hub_port_acpi_handle(struct usb_device *, int);
6128:	void usb_hub_adjust_deviceremovable(struct usb_device *, struct usb_hub_descriptor *);
1952:	int usb_hub_claim_port(struct usb_device *, unsigned int, struct usb_dev_state *);
5763:	void usb_hub_cleanup(void);
864:	int usb_hub_clear_tt_buffer(struct urb *);
6117:	struct usb_device *usb_hub_find_child(struct usb_device *, int);
5738:	int usb_hub_init(void);
1984:	void usb_hub_release_all_ports(struct usb_device *, struct usb_dev_state *);
1968:	int usb_hub_release_port(struct usb_device *, unsigned int, struct usb_dev_state *);
830:	int usb_hub_set_port_power(struct usb_device *, struct usb_hub *, int, bool);
136:	struct usb_hub *usb_hub_to_struct_hub(struct usb_device *);
679:	void usb_kick_hub_wq(struct usb_device *);
2506:	int usb_new_device(struct usb_device *);
4445:	int usb_port_disable(struct usb_device *);
3555:	int usb_port_resume(struct usb_device *, pm_message_t);
3284:	int usb_port_suspend(struct usb_device *, pm_message_t);
6097:	void usb_queue_reset_device(struct usb_interface *);
3644:	int usb_remote_wakeup(struct usb_device *);
994:	int usb_remove_device(struct usb_device *);
5979:	int usb_reset_device(struct usb_device *);
3845:	void usb_root_hub_lost_power(struct usb_device *);
2042:	void usb_set_device_state(struct usb_device *, enum usb_device_state);
4269:	int usb_unlocked_disable_lpm(struct usb_device *);
4332:	void usb_unlocked_enable_lpm(struct usb_device *);
3227:	unsigned int usb_wakeup_enabled_descendants(struct usb_device *);
695:	void usb_wakeup_notification(struct usb_device *, unsigned int);
2277:	static void announce_device(struct usb_device *);
3068:	static int check_port_resume_type(struct usb_device *, struct usb_hub *, int, int, u16, u16);
2112:	static void choose_devnum(struct usb_device *);
5020:	static int descriptors_changed(struct usb_device *, struct usb_host_bos *, struct usb_device_descriptor *);
3393:	static int finish_port_resume(struct usb_device *);
1023:	static void hub_activate(struct usb_hub *, enum hub_activation_type);
1369:	static int hub_configure(struct usb_hub *, struct usb_endpoint_descriptor *);
1707:	static void hub_disconnect(struct usb_interface *);
5570:	static void hub_event(struct work_struct *);
586:	static int hub_ext_port_status(struct usb_hub *, int, int, u16 *, u16 *, u32 *);
3662:	static int hub_handle_remote_wakeup(struct usb_hub *, unsigned int, u16, u16);
931:	static int hub_hub_status(struct usb_hub *, u16 *, u16 *);
1293:	static void hub_init_func2(struct work_struct *);
1300:	static void hub_init_func3(struct work_struct *);
1896:	static int hub_ioctl(struct usb_interface *, unsigned int, void *);
717:	static void hub_irq(struct urb *);
5104:	static void hub_port_connect(struct usb_hub *, int, u16, u16);
5347:	static void hub_port_connect_change(struct usb_hub *, int, u16, u16);
4415:	static int hub_port_disable(struct usb_hub *, int, int);
4603:	static int hub_port_init(struct usb_hub *, struct usb_device *, int, int);
964:	static void hub_port_logical_disconnect(struct usb_hub *, int);
2880:	static int hub_port_reset(struct usb_hub *, int, struct usb_device *, unsigned int, bool);
2781:	static int hub_port_wait_reset(struct usb_hub *, int, struct usb_device *, unsigned int, bool);
2765:	static bool hub_port_warm_reset_required(struct usb_hub *, int, u16);
1359:	static int hub_post_reset(struct usb_interface *);
906:	static void hub_power_on(struct usb_hub *, bool);
1348:	static int hub_pre_reset(struct usb_interface *);
1773:	static int hub_probe(struct usb_interface *, const struct usb_device_id *);
1311:	static void hub_quiesce(struct usb_hub *, enum hub_quiescing_type);
3825:	static int hub_reset_resume(struct usb_interface *);
622:	static void hub_resubmit_irq_urb(struct usb_hub *);
3808:	static int hub_resume(struct usb_interface *);
644:	static void hub_retry_irq_urb(struct timer_list *);
3720:	static int hub_suspend(struct usb_interface *, pm_message_t);
781:	static void hub_tt_work(struct work_struct *);
652:	static void kick_hub_wq(struct usb_hub *);
476:	static void led_work(struct work_struct *);
5462:	static void port_event(struct usb_hub *, int);
5426:	static void port_over_current_notify(struct usb_port *);
2007:	static void recursively_mark_NOTATTACHED(struct usb_device *);
2139:	static void release_devnum(struct usb_device *);
3775:	static void report_wakeup_requests(struct usb_hub *);
463:	static void set_port_led(int, int, struct usb_hub *, struct usb_hub *);
4192:	static int usb_disable_link_state(struct usb_hcd *, struct usb_device *, enum usb3_link_state);
3212:	static int usb_disable_remote_wakeup(struct usb_device *);
4103:	static void usb_enable_link_state(struct usb_hcd *, struct usb_device *, enum usb3_link_state);
3868:	static int usb_req_set_sel(struct usb_device *, enum usb3_link_state);
5811:	static int usb_reset_and_verify_device(struct usb_device *);
3949:	static int usb_set_device_initiated_lpm(struct usb_device *, enum usb3_link_state, bool);
313:	static void usb_set_lpm_parameters(struct usb_device *);
4004:	static int usb_set_lpm_timeout(struct usb_device *, enum usb3_link_state, int);
3500:	static int wait_for_connected(struct usb_device *, struct usb_hub *, int *, u16 *, u16 *);

File drivers/usb/core/message.c:
2279:	int cdc_parse_cdc_header(struct usb_cdc_parsed_header *, struct usb_interface *, u8 *, int);
1806:	void usb_authorize_interface(struct usb_interface *);
367:	int usb_bulk_msg(struct usb_device *, unsigned int, void *, int, int *, int);
1018:	char *usb_cache_string(struct usb_device *, int);
1205:	int usb_clear_halt(struct usb_device *, int);
136:	int usb_control_msg(struct usb_device *, unsigned int, __u8, __u8, __u16, __u16, void *, __u16, int);
267:	int usb_control_msg_recv(struct usb_device *, __u8, __u8, __u8, __u16, __u16, void *, __u16, int, gfp_t);
198:	int usb_control_msg_send(struct usb_device *, __u8, __u8, __u8, __u16, __u16, const void *, __u16, int, gfp_t);
1784:	void usb_deauthorize_interface(struct usb_interface *);
1390:	void usb_disable_device(struct usb_device *, int);
1280:	void usb_disable_endpoint(struct usb_device *, unsigned int, bool);
1339:	void usb_disable_interface(struct usb_device *, struct usb_interface *, bool);
2243:	int usb_driver_set_configuration(struct usb_device *, int);
1451:	void usb_enable_endpoint(struct usb_device *, struct usb_host_endpoint *, bool);
1475:	void usb_enable_interface(struct usb_device *, struct usb_interface *, bool);
782:	int usb_get_descriptor(struct usb_device *, unsigned char, unsigned char, void *, int);
1059:	int usb_get_device_descriptor(struct usb_device *, unsigned int);
1125:	int usb_get_status(struct usb_device *, int, int, int, void *);
328:	int usb_interrupt_msg(struct usb_device *, unsigned int, void *, int, int *, int);
1688:	int usb_reset_configuration(struct usb_device *);
1315:	void usb_reset_endpoint(struct usb_device *, unsigned int);
1952:	int usb_set_configuration(struct usb_device *, int);
1523:	int usb_set_interface(struct usb_device *, int, int);
1084:	int usb_set_isoch_delay(struct usb_device *);
723:	void usb_sg_cancel(struct usb_sg_request *);
505:	int usb_sg_init(struct usb_sg_request *, struct usb_device *, unsigned int, unsigned int, struct scatterlist *, int, size_t, gfp_t);
653:	void usb_sg_wait(struct usb_sg_request *);
967:	int usb_string(struct usb_device *, int, char *, size_t);
1891:	static void __usb_queue_reset_device(struct work_struct *);
1240:	static int create_intf_ep_devs(struct usb_interface *);
2190:	static void driver_set_config_work(struct work_struct *);
408:	static void sg_complete(struct urb *);
34:	static void usb_api_blocking_completion(struct urb *);
1357:	static void usb_disable_device_endpoints(struct usb_device *, int);
833:	static int usb_get_string(struct usb_device *, unsigned short, unsigned char, void *, int);
1817:	static int usb_if_uevent(struct device *, struct kobj_uevent_env *);
1767:	static void usb_release_interface(struct device *);
49:	static int usb_start_wait_urb(struct urb *, int, int *);
873:	static int usb_string_sub(struct usb_device *, unsigned int, unsigned int, unsigned char *);

File drivers/usb/core/notify.c:
60:	void usb_notify_add_bus(struct usb_bus *);
49:	void usb_notify_add_device(struct usb_device *);
65:	void usb_notify_remove_bus(struct usb_bus *);
54:	void usb_notify_remove_device(struct usb_device *);
29:	void usb_register_notify(struct notifier_block *);
42:	void usb_unregister_notify(struct notifier_block *);

File drivers/usb/core/phy.c:
49:	struct usb_phy_roothub *usb_phy_roothub_alloc(struct device *);
154:	int usb_phy_roothub_calibrate(struct usb_phy_roothub *);
105:	int usb_phy_roothub_exit(struct usb_phy_roothub *);
78:	int usb_phy_roothub_init(struct usb_phy_roothub *);
202:	void usb_phy_roothub_power_off(struct usb_phy_roothub *);
227:	int usb_phy_roothub_resume(struct device *, struct usb_phy_roothub *);
126:	int usb_phy_roothub_set_mode(struct usb_phy_roothub *, enum phy_mode);
214:	int usb_phy_roothub_suspend(struct device *, struct usb_phy_roothub *);

File drivers/usb/core/port.c:
531:	int usb_hub_create_port_device(struct usb_hub *, int);
614:	void usb_hub_remove_port_device(struct usb_hub *, int);
28:	static ssize_t connect_type_show(struct device *, struct device_attribute *, char *);
478:	static void find_and_link_peer(int, struct usb_hub *, struct usb_hub *);
321:	static int link_peers(struct usb_port *, struct usb_port *);
390:	static void link_peers_report(struct usb_port *, struct usb_port *);
19:	static ssize_t location_show(struct device *, struct device_attribute *, char *);
445:	static int match_location(struct usb_device *, void *);
53:	static ssize_t over_current_count_show(struct device *, struct device_attribute *, char *);
62:	static ssize_t quirks_show(struct device *, struct device_attribute *, char *);
70:	static ssize_t quirks_store(struct device *, struct device_attribute *, const char *, size_t);
405:	static void unlink_peers(struct usb_port *, struct usb_port *);
84:	static ssize_t usb3_lpm_permit_show(struct device *, struct device_attribute *, char *);
105:	static ssize_t usb3_lpm_permit_store(struct device *, struct device_attribute *, const char *, size_t);
182:	static void usb_port_device_release(struct device *);
191:	static int usb_port_runtime_resume(struct device *);
250:	static int usb_port_runtime_suspend(struct device *);
294:	static void usb_port_shutdown(struct device *);

File drivers/usb/core/quirks.c:
685:	void usb_detect_interface_quirks(struct usb_device *);
657:	void usb_detect_quirks(struct usb_device *);
555:	bool usb_endpoint_is_ignored(struct usb_device *, struct usb_host_interface *, struct usb_endpoint_descriptor *);
698:	void usb_release_quirk_list(void);
28:	static int quirks_param_set(const char *, const struct kernel_param *);
615:	static u32 usb_detect_static_quirks(struct usb_device *, const struct usb_device_id *);

File drivers/usb/core/sysfs.c:
1041:	int usb_create_sysfs_dev_files(struct usb_device *);
1260:	void usb_create_sysfs_intf_files(struct usb_interface *);
1070:	void usb_remove_sysfs_dev_files(struct usb_device *);
1277:	void usb_remove_sysfs_intf_files(struct usb_interface *);
407:	static ssize_t active_duration_show(struct device *, struct device_attribute *, char *);
934:	static ssize_t authorized_default_show(struct device *, struct device_attribute *, char *);
945:	static ssize_t authorized_default_store(struct device *, struct device_attribute *, const char *, size_t);
746:	static ssize_t authorized_show(struct device *, struct device_attribute *, char *);
758:	static ssize_t authorized_store(struct device *, struct device_attribute *, const char *, size_t);
421:	static ssize_t autosuspend_show(struct device *, struct device_attribute *, char *);
427:	static ssize_t autosuspend_store(struct device *, struct device_attribute *, const char *, size_t);
261:	static ssize_t avoid_reset_quirk_show(struct device *, struct device_attribute *, char *);
270:	static ssize_t avoid_reset_quirk_store(struct device *, struct device_attribute *, const char *, size_t);
1115:	static ssize_t bAlternateSetting_show(struct device *, struct device_attribute *, char *);
90:	static ssize_t bConfigurationValue_show(struct device *, struct device_attribute *, char *);
92:	static ssize_t bConfigurationValue_store(struct device *, struct device_attribute *, const char *, size_t);
738:	static ssize_t bDeviceClass_show(struct device *, struct device_attribute *, char *);
740:	static ssize_t bDeviceProtocol_show(struct device *, struct device_attribute *, char *);
739:	static ssize_t bDeviceSubClass_show(struct device *, struct device_attribute *, char *);
1117:	static ssize_t bInterfaceClass_show(struct device *, struct device_attribute *, char *);
1114:	static ssize_t bInterfaceNumber_show(struct device *, struct device_attribute *, char *);
1119:	static ssize_t bInterfaceProtocol_show(struct device *, struct device_attribute *, char *);
1118:	static ssize_t bInterfaceSubClass_show(struct device *, struct device_attribute *, char *);
742:	static ssize_t bMaxPacketSize0_show(struct device *, struct device_attribute *, char *);
51:	static ssize_t bMaxPower_show(struct device *, struct device_attribute *, char *);
741:	static ssize_t bNumConfigurations_show(struct device *, struct device_attribute *, char *);
1116:	static ssize_t bNumEndpoints_show(struct device *, struct device_attribute *, char *);
48:	static ssize_t bNumInterfaces_show(struct device *, struct device_attribute *, char *);
724:	static ssize_t bcdDevice_show(struct device *, struct device_attribute *, char *);
49:	static ssize_t bmAttributes_show(struct device *, struct device_attribute *, char *);
199:	static ssize_t busnum_show(struct device *, struct device_attribute *, char *);
70:	static ssize_t configuration_show(struct device *, struct device_attribute *, char *);
390:	static ssize_t connected_duration_show(struct device *, struct device_attribute *, char *);
849:	static umode_t dev_string_attrs_are_visible(struct kobject *, struct attribute *, int);
209:	static ssize_t devnum_show(struct device *, struct device_attribute *, char *);
219:	static ssize_t devpath_show(struct device *, struct device_attribute *, char *);
1095:	static ssize_t iad_bFirstInterface_show(struct device *, struct device_attribute *, char *);
1097:	static ssize_t iad_bFunctionClass_show(struct device *, struct device_attribute *, char *);
1099:	static ssize_t iad_bFunctionProtocol_show(struct device *, struct device_attribute *, char *);
1098:	static ssize_t iad_bFunctionSubClass_show(struct device *, struct device_attribute *, char *);
1096:	static ssize_t iad_bInterfaceCount_show(struct device *, struct device_attribute *, char *);
723:	static ssize_t idProduct_show(struct device *, struct device_attribute *, char *);
722:	static ssize_t idVendor_show(struct device *, struct device_attribute *, char *);
975:	static ssize_t interface_authorized_default_show(struct device *, struct device_attribute *, char *);
991:	static ssize_t interface_authorized_default_store(struct device *, struct device_attribute *, const char *, size_t);
1182:	static ssize_t interface_authorized_show(struct device *, struct device_attribute *, char *);
1193:	static ssize_t interface_authorized_store(struct device *, struct device_attribute *, const char *, size_t);
1121:	static ssize_t interface_show(struct device *, struct device_attribute *, char *);
1238:	static umode_t intf_assoc_attrs_are_visible(struct kobject *, struct attribute *, int);
456:	static ssize_t level_show(struct device *, struct device_attribute *, char *);
468:	static ssize_t level_store(struct device *, struct device_attribute *, const char *, size_t);
324:	static ssize_t ltm_capable_show(struct device *, struct device_attribute *, char *);
141:	static ssize_t manufacturer_show(struct device *, struct device_attribute *, char *);
241:	static ssize_t maxchild_show(struct device *, struct device_attribute *, char *);
1135:	static ssize_t modalias_show(struct device *, struct device_attribute *, char *);
335:	static ssize_t persist_show(struct device *, struct device_attribute *, char *);
343:	static ssize_t persist_store(struct device *, struct device_attribute *, const char *, size_t);
140:	static ssize_t product_show(struct device *, struct device_attribute *, char *);
251:	static ssize_t quirks_show(struct device *, struct device_attribute *, char *);
882:	static ssize_t read_descriptors(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t, size_t);
301:	static ssize_t removable_show(struct device *, struct device_attribute *, char *);
778:	static ssize_t remove_store(struct device *, struct device_attribute *, const char *, size_t);
179:	static ssize_t rx_lanes_show(struct device *, struct device_attribute *, char *);
142:	static ssize_t serial_show(struct device *, struct device_attribute *, char *);
144:	static ssize_t speed_show(struct device *, struct device_attribute *, char *);
1161:	static ssize_t supports_autosuspend_show(struct device *, struct device_attribute *, char *);
189:	static ssize_t tx_lanes_show(struct device *, struct device_attribute *, char *);
291:	static ssize_t urbnum_show(struct device *, struct device_attribute *, char *);
502:	static ssize_t usb2_hardware_lpm_show(struct device *, struct device_attribute *, char *);
516:	static ssize_t usb2_hardware_lpm_store(struct device *, struct device_attribute *, const char *, size_t);
571:	static ssize_t usb2_lpm_besl_show(struct device *, struct device_attribute *, char *);
578:	static ssize_t usb2_lpm_besl_store(struct device *, struct device_attribute *, const char *, size_t);
547:	static ssize_t usb2_lpm_l1_timeout_show(struct device *, struct device_attribute *, char *);
555:	static ssize_t usb2_lpm_l1_timeout_store(struct device *, struct device_attribute *, const char *, size_t);
594:	static ssize_t usb3_hardware_lpm_u1_show(struct device *, struct device_attribute *, char *);
616:	static ssize_t usb3_hardware_lpm_u2_show(struct device *, struct device_attribute *, char *);
229:	static ssize_t version_show(struct device *, struct device_attribute *, char *);

File drivers/usb/core/urb.c:
70:	struct urb *usb_alloc_urb(int, gfp_t);
1025:	int usb_anchor_empty(struct usb_anchor *);
930:	void usb_anchor_resume_wakeups(struct usb_anchor *);
916:	void usb_anchor_suspend_wakeups(struct usb_anchor *);
126:	void usb_anchor_urb(struct urb *, struct usb_anchor *);
780:	void usb_block_urb(struct urb *);
93:	void usb_free_urb(struct urb *);
970:	struct urb *usb_get_from_anchor(struct usb_anchor *);
110:	struct urb *usb_get_urb(struct urb *);
43:	void usb_init_urb(struct urb *);
800:	void usb_kill_anchored_urbs(struct usb_anchor *);
703:	void usb_kill_urb(struct urb *);
203:	int usb_pipe_type_check(struct usb_device *, unsigned int);
838:	void usb_poison_anchored_urbs(struct usb_anchor *);
744:	void usb_poison_urb(struct urb *);
997:	void usb_scuttle_anchored_urbs(struct usb_anchor *);
367:	int usb_submit_urb(struct urb *, gfp_t);
164:	void usb_unanchor_urb(struct urb *);
897:	void usb_unlink_anchored_urbs(struct usb_anchor *);
664:	int usb_unlink_urb(struct urb *);
872:	void usb_unpoison_anchored_urbs(struct usb_anchor *);
759:	void usb_unpoison_urb(struct urb *);
224:	int usb_urb_ep_type_check(const struct urb *);
951:	int usb_wait_anchor_empty_timeout(struct usb_anchor *, unsigned int);
149:	static void __usb_unanchor_urb(struct urb *, struct usb_anchor *);

File drivers/usb/core/usb-acpi.c:
26:	bool usb_acpi_power_manageable(struct usb_device *, int);
274:	int usb_acpi_register(void);
52:	int usb_acpi_set_power_state(struct usb_device *, int, bool);
279:	void usb_acpi_unregister(void);
263:	static bool usb_acpi_bus_match(struct device *);
225:	static struct acpi_device *usb_acpi_find_companion(struct device *);
177:	static struct acpi_device *usb_acpi_find_companion_for_port(struct usb_port *);
144:	static struct acpi_device *usb_acpi_get_companion_for_port(struct usb_port *);

File drivers/usb/core/usb.c:
872:	int __usb_get_extra_descriptor(char *, unsigned int, unsigned char, void **, size_t);
924:	void *usb_alloc_coherent(struct usb_device *, size_t, gfp_t, dma_addr_t *);
574:	struct usb_device *usb_alloc_dev(struct usb_device *, struct usb_bus *, unsigned int);
308:	struct usb_host_interface *usb_altnum_to_altsetting(const struct usb_interface *, unsigned int);
59:	int usb_disabled(void);
221:	struct usb_host_interface *usb_find_alt_setting(struct usb_host_config *, unsigned int, unsigned int);
135:	int usb_find_common_endpoints(struct usb_host_interface *, struct usb_endpoint_descriptor **, struct usb_endpoint_descriptor **, struct usb_endpoint_descriptor **, struct usb_endpoint_descriptor **);
181:	int usb_find_common_endpoints_reverse(struct usb_host_interface *, struct usb_endpoint_descriptor **, struct usb_endpoint_descriptor **, struct usb_endpoint_descriptor **, struct usb_endpoint_descriptor **);
352:	struct usb_interface *usb_find_interface(struct usb_driver *, int);
394:	int usb_for_each_dev(void *, int (*)(struct usb_device *, void *));
944:	void usb_free_coherent(struct usb_device *, size_t, void *, dma_addr_t);
860:	int usb_get_current_frame_number(struct usb_device *);
694:	struct usb_device *usb_get_dev(struct usb_device *);
728:	struct usb_interface *usb_get_intf(struct usb_interface *);
272:	struct usb_interface *usb_ifnum_to_if(const struct usb_device *, unsigned int);
765:	struct device *usb_intf_get_dma_device(struct usb_interface *);
813:	int usb_lock_device_for_reset(struct usb_device *, const struct usb_interface *);
709:	void usb_put_dev(struct usb_device *);
744:	void usb_put_intf(struct usb_interface *);
374:	static int __each_dev(struct device *, void *);
327:	static int __find_interface(struct device *, const void *);
75:	static bool match_endpoint(struct usb_endpoint_descriptor *, struct usb_endpoint_descriptor **, struct usb_endpoint_descriptor **, struct usb_endpoint_descriptor **, struct usb_endpoint_descriptor **);
958:	static int usb_bus_notify(struct notifier_block *, unsigned long, void *);
456:	static void usb_dev_complete(struct device *);
472:	static int usb_dev_freeze(struct device *);
482:	static int usb_dev_poweroff(struct device *);
451:	static int usb_dev_prepare(struct device *);
487:	static int usb_dev_restore(struct device *);
467:	static int usb_dev_resume(struct device *);
462:	static int usb_dev_suspend(struct device *);
477:	static int usb_dev_thaw(struct device *);
427:	static int usb_dev_uevent(struct device *, struct kobj_uevent_env *);
509:	static char *usb_devnode(struct device *, umode_t *, kuid_t *, kgid_t *);
1056:	static void usb_exit(void);
1001:	static int usb_init(void);
409:	static void usb_release_dev(struct device *);

File drivers/usb/early/ehci-dbgp.c:
996:	int dbgp_external_startup(struct usb_hcd *);
968:	int dbgp_reset_prep(struct usb_hcd *);
825:	int early_dbgp_init(char *);
490:	static int _dbgp_external_startup(void);
293:	static int dbgp_bulk_read(unsigned int, unsigned int, void *, int, int);
265:	static int dbgp_bulk_write(unsigned int, const char *, int, unsigned int);
324:	static int dbgp_control_msg(unsigned int, int, int, int, void *, int, int);
465:	static int dbgp_ehci_controller_reset(void);
195:	static int dbgp_wait_until_done(unsigned int, int);
673:	static void default_set_debug_port(int);
908:	static void early_dbgp_write(const char *, u32, struct console *);
709:	static void early_ehci_bios_handoff(void);
608:	static int ehci_reset_port(int);
751:	static int ehci_setup(void);
364:	static u32 find_cap(u32, u32, u32, int);
1042:	static int kgdbdbgp_parse_config(char *);
1010:	static int kgdbdbgp_read_char(void);
1063:	static int kgdbdbgp_reader_thread(void *);
1084:	static int kgdbdbgp_start_thread(void);
1029:	static void kgdbdbgp_write_char(u8);
679:	static void nvidia_set_debug_port(int);

File drivers/usb/early/xhci-dbc.c:
602:	int early_xdbc_parse_parameter(char *);
912:	void early_xdbc_register_console(void);
655:	int early_xdbc_setup_hardware(void);
872:	static void early_xdbc_write(struct console *, const char *, u32);
134:	static int handshake(void *, u32, u32, int, int);
177:	static int xdbc_alloc_ring(struct xdbc_segment *, struct xdbc_ring *);
151:	static void xdbc_bios_handoff(void);
464:	static int xdbc_bulk_transfer(void *, int, bool);
836:	static int xdbc_bulk_write(int, const char *);
554:	static int xdbc_early_setup(void);
188:	static void xdbc_free_ring(struct xdbc_ring *);
93:	static void *xdbc_get_page(dma_addr_t *);
751:	static void xdbc_handle_events(void);
955:	static int xdbc_init(void);
38:	static void *xdbc_map_pci_mmio(u32, u32, u32);
226:	static void xdbc_mem_init(void);
367:	static void xdbc_reset_debug_port(void);
199:	static void xdbc_reset_ring(struct xdbc_ring *);
931:	static int xdbc_scrub_function(void *);
418:	static int xdbc_start(void);

File drivers/usb/host/./xhci-trace.h:
358:	int __traceiter_xhci_add_endpoint(void *, struct xhci_ep_ctx *);
446:	int __traceiter_xhci_address_ctrl_ctx(void *, struct xhci_input_control_ctx *);
108:	int __traceiter_xhci_address_ctx(void *, struct xhci_hcd *, struct xhci_container_ctx *, unsigned int);
385:	int __traceiter_xhci_alloc_dev(void *, struct xhci_slot_ctx *);
236:	int __traceiter_xhci_alloc_virt_device(void *, struct xhci_virt_device *);
425:	int __traceiter_xhci_configure_endpoint(void *, struct xhci_slot_ctx *);
451:	int __traceiter_xhci_configure_endpoint_ctrl_ctx(void *, struct xhci_input_control_ctx *);
606:	int __traceiter_xhci_dbc_alloc_request(void *, struct dbc_request *);
611:	int __traceiter_xhci_dbc_free_request(void *, struct dbc_request *);
168:	int __traceiter_xhci_dbc_gadget_ep_queue(void *, struct xhci_ring *, struct xhci_generic_trb *);
621:	int __traceiter_xhci_dbc_giveback_request(void *, struct dbc_request *);
158:	int __traceiter_xhci_dbc_handle_event(void *, struct xhci_ring *, struct xhci_generic_trb *);
163:	int __traceiter_xhci_dbc_handle_transfer(void *, struct xhci_ring *, struct xhci_generic_trb *);
616:	int __traceiter_xhci_dbc_queue_request(void *, struct dbc_request *);
38:	int __traceiter_xhci_dbg_address(void *, struct va_format *);
58:	int __traceiter_xhci_dbg_cancel_urb(void *, struct va_format *);
43:	int __traceiter_xhci_dbg_context_change(void *, struct va_format *);
63:	int __traceiter_xhci_dbg_init(void *, struct va_format *);
48:	int __traceiter_xhci_dbg_quirks(void *, struct va_format *);
53:	int __traceiter_xhci_dbg_reset_ep(void *, struct va_format *);
68:	int __traceiter_xhci_dbg_ring_expansion(void *, struct va_format *);
400:	int __traceiter_xhci_discover_or_reset_device(void *, struct xhci_slot_ctx *);
390:	int __traceiter_xhci_free_dev(void *, struct xhci_slot_ctx *);
199:	int __traceiter_xhci_free_virt_device(void *, struct xhci_virt_device *);
545:	int __traceiter_xhci_get_port_status(void *, u32, u32);
410:	int __traceiter_xhci_handle_cmd_addr_dev(void *, struct xhci_slot_ctx *);
353:	int __traceiter_xhci_handle_cmd_config_ep(void *, struct xhci_ep_ctx *);
395:	int __traceiter_xhci_handle_cmd_disable_slot(void *, struct xhci_slot_ctx *);
415:	int __traceiter_xhci_handle_cmd_reset_dev(void *, struct xhci_slot_ctx *);
348:	int __traceiter_xhci_handle_cmd_reset_ep(void *, struct xhci_ep_ctx *);
420:	int __traceiter_xhci_handle_cmd_set_deq(void *, struct xhci_slot_ctx *);
343:	int __traceiter_xhci_handle_cmd_set_deq_ep(void *, struct xhci_ep_ctx *);
338:	int __traceiter_xhci_handle_cmd_stop_ep(void *, struct xhci_ep_ctx *);
143:	int __traceiter_xhci_handle_command(void *, struct xhci_ring *, struct xhci_generic_trb *);
138:	int __traceiter_xhci_handle_event(void *, struct xhci_ring *, struct xhci_generic_trb *);
540:	int __traceiter_xhci_handle_port_status(void *, u32, u32);
148:	int __traceiter_xhci_handle_transfer(void *, struct xhci_ring *, struct xhci_generic_trb *);
550:	int __traceiter_xhci_hub_status_data(void *, u32, u32);
517:	int __traceiter_xhci_inc_deq(void *, struct xhci_ring *);
512:	int __traceiter_xhci_inc_enq(void *, struct xhci_ring *);
153:	int __traceiter_xhci_queue_trb(void *, struct xhci_ring *, struct xhci_generic_trb *);
497:	int __traceiter_xhci_ring_alloc(void *, struct xhci_ring *);
572:	int __traceiter_xhci_ring_ep_doorbell(void *, u32, u32);
507:	int __traceiter_xhci_ring_expansion(void *, struct xhci_ring *);
502:	int __traceiter_xhci_ring_free(void *, struct xhci_ring *);
577:	int __traceiter_xhci_ring_host_doorbell(void *, u32, u32);
246:	int __traceiter_xhci_setup_addressable_virt_device(void *, struct xhci_virt_device *);
241:	int __traceiter_xhci_setup_device(void *, struct xhci_virt_device *);
405:	int __traceiter_xhci_setup_device_slot(void *, struct xhci_slot_ctx *);
251:	int __traceiter_xhci_stop_device(void *, struct xhci_virt_device *);
312:	int __traceiter_xhci_urb_dequeue(void *, struct urb *);
302:	int __traceiter_xhci_urb_enqueue(void *, struct urb *);
307:	int __traceiter_xhci_urb_giveback(void *, struct urb *);
73:	static void __bpf_trace_xhci_log_ctx(void *, struct xhci_hcd *, struct xhci_container_ctx *, unsigned int);
28:	static void __bpf_trace_xhci_log_msg(void *, struct va_format *);
522:	static void __bpf_trace_xhci_log_portsc(void *, u32, u32);
114:	static void __bpf_trace_xhci_log_trb(void *, struct xhci_ring *, struct xhci_generic_trb *);
582:	static void perf_trace_xhci_dbc_log_request(void *, struct dbc_request *);
430:	static void perf_trace_xhci_log_ctrl_ctx(void *, struct xhci_input_control_ctx *);
73:	static void perf_trace_xhci_log_ctx(void *, struct xhci_hcd *, struct xhci_container_ctx *, unsigned int);
555:	static void perf_trace_xhci_log_doorbell(void *, u32, u32);
317:	static void perf_trace_xhci_log_ep_ctx(void *, struct xhci_ep_ctx *);
173:	static void perf_trace_xhci_log_free_virt_dev(void *, struct xhci_virt_device *);
28:	static void perf_trace_xhci_log_msg(void *, struct va_format *);
522:	static void perf_trace_xhci_log_portsc(void *, u32, u32);
456:	static void perf_trace_xhci_log_ring(void *, struct xhci_ring *);
363:	static void perf_trace_xhci_log_slot_ctx(void *, struct xhci_slot_ctx *);
114:	static void perf_trace_xhci_log_trb(void *, struct xhci_ring *, struct xhci_generic_trb *);
256:	static void perf_trace_xhci_log_urb(void *, struct urb *);
204:	static void perf_trace_xhci_log_virt_dev(void *, struct xhci_virt_device *);
582:	static void trace_event_raw_event_xhci_dbc_log_request(void *, struct dbc_request *);
430:	static void trace_event_raw_event_xhci_log_ctrl_ctx(void *, struct xhci_input_control_ctx *);
73:	static void trace_event_raw_event_xhci_log_ctx(void *, struct xhci_hcd *, struct xhci_container_ctx *, unsigned int);
555:	static void trace_event_raw_event_xhci_log_doorbell(void *, u32, u32);
317:	static void trace_event_raw_event_xhci_log_ep_ctx(void *, struct xhci_ep_ctx *);
173:	static void trace_event_raw_event_xhci_log_free_virt_dev(void *, struct xhci_virt_device *);
28:	static void trace_event_raw_event_xhci_log_msg(void *, struct va_format *);
522:	static void trace_event_raw_event_xhci_log_portsc(void *, u32, u32);
456:	static void trace_event_raw_event_xhci_log_ring(void *, struct xhci_ring *);
363:	static void trace_event_raw_event_xhci_log_slot_ctx(void *, struct xhci_slot_ctx *);
114:	static void trace_event_raw_event_xhci_log_trb(void *, struct xhci_ring *, struct xhci_generic_trb *);
256:	static void trace_event_raw_event_xhci_log_urb(void *, struct urb *);
204:	static void trace_event_raw_event_xhci_log_virt_dev(void *, struct xhci_virt_device *);
582:	static enum print_line_t trace_raw_output_xhci_dbc_log_request(struct trace_iterator *, int, struct trace_event *);
430:	static enum print_line_t trace_raw_output_xhci_log_ctrl_ctx(struct trace_iterator *, int, struct trace_event *);
73:	static enum print_line_t trace_raw_output_xhci_log_ctx(struct trace_iterator *, int, struct trace_event *);
555:	static enum print_line_t trace_raw_output_xhci_log_doorbell(struct trace_iterator *, int, struct trace_event *);
317:	static enum print_line_t trace_raw_output_xhci_log_ep_ctx(struct trace_iterator *, int, struct trace_event *);
173:	static enum print_line_t trace_raw_output_xhci_log_free_virt_dev(struct trace_iterator *, int, struct trace_event *);
28:	static enum print_line_t trace_raw_output_xhci_log_msg(struct trace_iterator *, int, struct trace_event *);
522:	static enum print_line_t trace_raw_output_xhci_log_portsc(struct trace_iterator *, int, struct trace_event *);
456:	static enum print_line_t trace_raw_output_xhci_log_ring(struct trace_iterator *, int, struct trace_event *);
363:	static enum print_line_t trace_raw_output_xhci_log_slot_ctx(struct trace_iterator *, int, struct trace_event *);
114:	static enum print_line_t trace_raw_output_xhci_log_trb(struct trace_iterator *, int, struct trace_event *);
256:	static enum print_line_t trace_raw_output_xhci_log_urb(struct trace_iterator *, int, struct trace_event *);
204:	static enum print_line_t trace_raw_output_xhci_log_virt_dev(struct trace_iterator *, int, struct trace_event *);

File drivers/usb/host/ehci-dbg.c:
188:	static int dbg_command_buf(char *, const char *, u32, unsigned int);
51:	static void dbg_hcc_params(struct ehci_hcd *, char *);
15:	static void dbg_hcs_params(struct ehci_hcd *, char *);
212:	static int dbg_port_buf(char *, const char *, int, u32, unsigned int);
152:	static int dbg_status_buf(char *, const char *, u32, unsigned int);
990:	static int debug_async_open(struct inode *, struct file *);
997:	static int debug_bandwidth_open(struct inode *, struct file *);
978:	static int debug_close(struct inode *, struct file *);
955:	static ssize_t debug_output(struct file *, char *, size_t, loff_t *);
1005:	static int debug_periodic_open(struct inode *, struct file *);
1018:	static int debug_registers_open(struct inode *, struct file *);
470:	static ssize_t fill_async_buffer(struct debug_buffer *);
510:	static ssize_t fill_bandwidth_buffer(struct debug_buffer *);
621:	static ssize_t fill_periodic_buffer(struct debug_buffer *);
755:	static ssize_t fill_registers_buffer(struct debug_buffer *);
593:	static unsigned int output_buf_tds_dir(char *, struct ehci_qh_hw *, struct ehci_qh *, unsigned int, struct ehci_hcd *);
370:	static void qh_lines(struct ehci_hcd *, struct ehci_qh *, char **, unsigned int *);

File drivers/usb/host/ehci-hcd.c:
148:	int ehci_handshake(struct ehci_hcd *, void *, u32, u32, int);
1269:	void ehci_init_driver(struct hc_driver *, const struct ehci_driver_overrides *);
230:	int ehci_reset(struct ehci_hcd *);
1150:	int ehci_resume(struct usb_hcd *, bool);
678:	int ehci_setup(struct usb_hcd *);
1116:	int ehci_suspend(struct usb_hcd *, bool);
976:	static void ehci_endpoint_disable(struct usb_hcd *, struct usb_host_endpoint *);
1050:	static void ehci_endpoint_reset(struct usb_hcd *, struct usb_host_endpoint *);
1089:	static int ehci_get_frame(struct usb_hcd *);
180:	static int ehci_halt(struct ehci_hcd *);
1394:	static void ehci_hcd_cleanup(void);
1321:	static int ehci_hcd_init(void);
453:	static int ehci_init(struct usb_hcd *);
712:	static irqreturn_t ehci_irq(struct usb_hcd *);
272:	static void ehci_quiesce(struct ehci_hcd *);
1099:	static void ehci_remove_device(struct usb_hcd *, struct usb_device *);
572:	static int ehci_run(struct usb_hcd *);
355:	static void ehci_shutdown(struct usb_hcd *);
335:	static void ehci_silence_controller(struct ehci_hcd *);
419:	static void ehci_stop(struct usb_hcd *);
925:	static int ehci_urb_dequeue(struct usb_hcd *, struct urb *, int);
884:	static int ehci_urb_enqueue(struct usb_hcd *, struct urb *, gfp_t);
385:	static void ehci_work(struct ehci_hcd *);

File drivers/usb/host/ehci-hub.c:
146:	void ehci_adjust_port_wakeup_flags(struct ehci_hcd *, bool, bool);
870:	int ehci_hub_control(struct usb_hcd *, u16, u16, u16, char *, u16);
376:	static int ehci_bus_resume(struct usb_hcd *);
213:	static int ehci_bus_suspend(struct usb_hcd *);
517:	static unsigned long ehci_get_resuming_ports(struct usb_hcd *);
33:	static void ehci_handover_companion_ports(struct ehci_hcd *);
618:	static int ehci_hub_status_data(struct usb_hcd *, char *);
1326:	static int ehci_port_handed_over(struct usb_hcd *, int);
1337:	static int ehci_port_power(struct ehci_hcd *, int, bool);
1317:	static void ehci_relinquish_port(struct usb_hcd *, int);
24:	static int persist_enabled_on_companion(struct usb_device *, void *);
537:	static void set_owner(struct ehci_hcd *, int, int);

File drivers/usb/host/ehci-mem.c:
107:	static void ehci_mem_cleanup(struct ehci_hcd *);
139:	static int ehci_mem_init(struct ehci_hcd *, gfp_t);
67:	static struct ehci_qh *ehci_qh_alloc(struct ehci_hcd *, gfp_t);
36:	static struct ehci_qtd *ehci_qtd_alloc(struct ehci_hcd *, gfp_t);
54:	static void qh_destroy(struct ehci_hcd *, struct ehci_qh *);

File drivers/usb/host/ehci-pci.c:
425:	static void ehci_pci_cleanup(void);
408:	static int ehci_pci_init(void);
368:	static int ehci_pci_probe(struct pci_dev *, const struct pci_device_id *);
60:	static int ehci_pci_reinit(struct ehci_hcd *, struct pci_dev *);
375:	static void ehci_pci_remove(struct pci_dev *);
344:	static int ehci_pci_resume(struct usb_hcd *, bool);
87:	static int ehci_pci_setup(struct usb_hcd *);

File drivers/usb/host/ehci-q.c:
155:	static void ehci_clear_tt_buffer(struct ehci_hcd *, struct ehci_qh *, struct urb *, u32);
140:	static void ehci_clear_tt_buffer_complete(struct usb_hcd *, struct usb_host_endpoint *);
251:	static void ehci_urb_done(struct ehci_hcd *, struct urb *, int);
1311:	static void end_unlink_async(struct ehci_hcd *);
1020:	static struct ehci_qh *qh_append_tds(struct ehci_hcd *, struct urb *, struct list_head *, int, void **);
289:	static unsigned int qh_completions(struct ehci_hcd *, struct ehci_qh *);
981:	static void qh_link_async(struct ehci_hcd *, struct ehci_qh *);
760:	static struct ehci_qh *qh_make(struct ehci_hcd *, struct urb *, gfp_t);
113:	static void qh_refresh(struct ehci_hcd *, struct ehci_qh *);
575:	static struct list_head *qh_urb_transaction(struct ehci_hcd *, struct urb *, struct list_head *, gfp_t);
37:	static int qtd_fill(struct ehci_qtd *, dma_addr_t, size_t, int, int, struct ehci_hcd *);
555:	static void qtd_list_free(struct ehci_hcd *, struct list_head *, struct urb *);
1485:	static void scan_async(struct ehci_hcd *);
1257:	static void single_unlink_async(struct ehci_hcd *, struct ehci_qh *);
1276:	static void start_iaa_cycle(struct ehci_hcd *);
1102:	static int submit_async(struct ehci_hcd *, struct urb *, struct list_head *, gfp_t);
1424:	static void unlink_empty_async(struct ehci_hcd *);

File drivers/usb/host/ehci-sched.c:
194:	static void bandwidth_dbg(int, char *, struct ehci_per_sched *, struct ehci_hcd *);
761:	static int check_intr_schedule(struct ehci_hcd *, unsigned int, unsigned int, struct ehci_qh *, unsigned int *, struct ehci_tt *);
261:	static void compute_tt_budget(u8 *, struct ehci_tt *);
697:	static void end_unlink_intr(struct ehci_hcd *, struct ehci_qh *);
101:	static struct ehci_tt *find_tt(struct usb_device *);
897:	static int intr_submit(struct ehci_hcd *, struct urb *, struct list_head *, gfp_t);
1159:	static struct ehci_iso_sched *iso_sched_alloc(unsigned int, gfp_t);
1119:	static struct ehci_iso_stream *iso_stream_find(struct ehci_hcd *, struct urb *);
1010:	static void iso_stream_init(struct ehci_hcd *, struct ehci_iso_stream *, struct urb *);
1460:	static int iso_stream_schedule(struct ehci_hcd *, struct urb *, struct ehci_iso_stream *);
1810:	static bool itd_complete(struct ehci_hcd *, struct ehci_itd *);
1730:	static void itd_link_urb(struct ehci_hcd *, struct urb *, unsigned int, struct ehci_iso_stream *);
1903:	static int itd_submit(struct ehci_hcd *, struct urb *, gfp_t);
1228:	static int itd_urb_transaction(struct ehci_iso_stream *, struct ehci_hcd *, struct urb *, gfp_t);
63:	static void periodic_unlink(struct ehci_hcd *, unsigned int, void *);
514:	static void qh_link_periodic(struct ehci_hcd *, struct ehci_qh *);
829:	static int qh_schedule(struct ehci_hcd *, struct ehci_qh *);
581:	static void qh_unlink_periodic(struct ehci_hcd *, struct ehci_qh *);
206:	static void reserve_release_intr_bandwidth(struct ehci_hcd *, struct ehci_qh *, int);
1296:	static void reserve_release_iso_bandwidth(struct ehci_hcd *, struct ehci_iso_stream *, int);
2343:	static void scan_isoc(struct ehci_hcd *);
2204:	static bool sitd_complete(struct ehci_hcd *, struct ehci_sitd *);
2131:	static void sitd_link_urb(struct ehci_hcd *, struct urb *, unsigned int, struct ehci_iso_stream *);
2282:	static int sitd_submit(struct ehci_hcd *, struct urb *, gfp_t);
2021:	static int sitd_urb_transaction(struct ehci_iso_stream *, struct ehci_hcd *, struct urb *, gfp_t);
642:	static void start_unlink_intr(struct ehci_hcd *, struct ehci_qh *);
347:	static int tt_available(struct ehci_hcd *, struct ehci_tt *, unsigned int, unsigned int, struct ehci_per_sched *, struct ehci_per_sched *);

File drivers/usb/host/ehci-sysfs.c:
10:	static ssize_t companion_show(struct device *, struct device_attribute *, char *);
37:	static ssize_t companion_store(struct device *, struct device_attribute *, const char *, size_t);
68:	static ssize_t uframe_periodic_max_show(struct device *, struct device_attribute *, char *);
81:	static ssize_t uframe_periodic_max_store(struct device *, struct device_attribute *, const char *, size_t);

File drivers/usb/host/ehci-timer.c:
134:	static void ehci_disable_ASE(struct ehci_hcd *);
180:	static void ehci_disable_PSE(struct ehci_hcd *);
76:	static void ehci_enable_event(struct ehci_hcd *, unsigned int, bool);
187:	static void ehci_handle_controller_death(struct ehci_hcd *);
243:	static void ehci_handle_intr_unlinks(struct ehci_hcd *);
211:	static void ehci_handle_start_intr_unlinks(struct ehci_hcd *);
398:	static enum hrtimer_restart ehci_hrtimer_func(struct hrtimer *);
320:	static void ehci_iaa_watchdog(struct ehci_hcd *);
95:	static void ehci_poll_ASS(struct ehci_hcd *);
141:	static void ehci_poll_PSS(struct ehci_hcd *);
290:	static void end_free_itds(struct ehci_hcd *);
360:	static void turn_on_io_watchdog(struct ehci_hcd *);

File drivers/usb/host/ohci-dbg.c:
740:	static int debug_async_open(struct inode *, struct file *);
728:	static int debug_close(struct inode *, struct file *);
704:	static ssize_t debug_output(struct file *, char *, size_t, loff_t *);
747:	static int debug_periodic_open(struct inode *, struct file *);
755:	static int debug_registers_open(struct inode *, struct file *);
465:	static ssize_t fill_async_buffer(struct debug_buffer *);
486:	static ssize_t fill_periodic_buffer(struct debug_buffer *);
581:	static ssize_t fill_registers_buffer(struct debug_buffer *);
64:	static void maybe_print_eds(struct ohci_hcd *, char *, u32, char **, unsigned int *);
240:	static void ohci_dump(struct ohci_hcd *);
42:	static void ohci_dump_intr_mask(struct ohci_hcd *, char *, u32, char **, unsigned int *);
191:	static void ohci_dump_roothub(struct ohci_hcd *, char **, unsigned int *, int);
101:	static void ohci_dump_status(struct ohci_hcd *, char **, unsigned int *);
400:	static ssize_t show_list(char *, size_t, struct ed *, struct ohci_hcd *);

File drivers/usb/host/ohci-hcd.c:
1228:	void ohci_init_driver(struct hc_driver *, const struct ohci_driver_overrides *);
1032:	int ohci_restart(struct ohci_hcd *);
1126:	int ohci_resume(struct usb_hcd *, bool);
713:	int ohci_setup(struct usb_hcd *);
1098:	int ohci_suspend(struct usb_hcd *, bool);
749:	static void io_watchdog_func(struct timer_list *);
350:	static void ohci_endpoint_disable(struct usb_hcd *, struct usb_host_endpoint *);
403:	static int ohci_get_frame(struct usb_hcd *);
1349:	static void ohci_hcd_mod_exit(void);
1274:	static int ohci_hcd_mod_init(void);
454:	static int ohci_init(struct ohci_hcd *);
878:	static irqreturn_t ohci_irq(struct usb_hcd *);
545:	static int ohci_run(struct ohci_hcd *);
438:	static void ohci_shutdown(struct usb_hcd *);
724:	static int ohci_start(struct usb_hcd *);
992:	static void ohci_stop(struct usb_hcd *);
315:	static int ohci_urb_dequeue(struct usb_hcd *, struct urb *, int);
147:	static int ohci_urb_enqueue(struct usb_hcd *, struct urb *, gfp_t);

File drivers/usb/host/ohci-hub.c:
673:	int ohci_hub_control(struct usb_hcd *, u16, u16, u16, char *, u16);
465:	int ohci_hub_status_data(struct usb_hcd *, char *);
321:	static int ohci_bus_resume(struct usb_hcd *);
301:	static int ohci_bus_suspend(struct usb_hcd *);
535:	static void ohci_hub_descriptor(struct ohci_hcd *, struct usb_hub_descriptor *);
149:	static int ohci_rh_resume(struct ohci_hcd *);
47:	static int ohci_rh_suspend(struct ohci_hcd *, int);
344:	static int ohci_root_hub_state_changes(struct ohci_hcd *, int, int, int);

File drivers/usb/host/ohci-mem.c:
90:	static struct td *td_alloc(struct ohci_hcd *, gfp_t);
111:	static void td_free(struct ohci_hcd *, struct td *);

File drivers/usb/host/ohci-pci.c:
35:	static int broken_suspend(struct usb_hcd *);
323:	static void ohci_pci_cleanup(void);
304:	static int ohci_pci_init(void);
283:	static int ohci_pci_probe(struct pci_dev *, const struct pci_device_id *);
238:	static int ohci_pci_reset(struct usb_hcd *);
151:	static int ohci_quirk_amd700(struct usb_hcd *);
44:	static int ohci_quirk_amd756(struct usb_hcd *);
140:	static int ohci_quirk_nec(struct usb_hcd *);
129:	static void ohci_quirk_nec_worker(struct work_struct *);
72:	static int ohci_quirk_ns(struct usb_hcd *);
59:	static int ohci_quirk_opti(struct usb_hcd *);
168:	static int ohci_quirk_qemu(struct usb_hcd *);
107:	static int ohci_quirk_toshiba_scc(struct usb_hcd *);
94:	static int ohci_quirk_zfmicro(struct usb_hcd *);

File drivers/usb/host/ohci-q.c:
899:	static void add_to_done_list(struct ohci_hcd *, struct td *);
317:	static void ed_deschedule(struct ohci_hcd *, struct ed *);
400:	static struct ed *ed_get(struct ohci_hcd *, struct usb_host_endpoint *, struct usb_device *, unsigned int, int);
833:	static void ed_halted(struct ohci_hcd *, struct td *, int);
183:	static int ed_schedule(struct ohci_hcd *, struct ed *);
975:	static void finish_unlinks(struct ohci_hcd *);
41:	static void finish_urb(struct ohci_hcd *, struct urb *, int);
1217:	static void ohci_work(struct ohci_hcd *);
143:	static void periodic_link(struct ohci_hcd *, struct ed *);
270:	static void periodic_unlink(struct ohci_hcd *, struct ed *);
1150:	static void takeback_td(struct ohci_hcd *, struct td *);
756:	static int td_done(struct ohci_hcd *, struct urb *, struct td *);
516:	static void td_fill(struct ohci_hcd *, u32, dma_addr_t, int, struct urb *, int);
591:	static void td_submit_urb(struct ohci_hcd *, struct urb *);
935:	static void update_done_list(struct ohci_hcd *);
14:	static void urb_free_priv(struct ohci_hcd *, urb_priv_t *);

File drivers/usb/host/pci-quirks.c:
194:	void sb800_prefetch(struct device *, int);
672:	int uhci_check_and_reset_hc(struct pci_dev *, unsigned long);
640:	void uhci_reset_hc(struct pci_dev *, unsigned long);
513:	void usb_amd_dev_put(void);
302:	bool usb_amd_hang_symptom_quirk(void);
315:	bool usb_amd_prefetch_quirk(void);
550:	bool usb_amd_pt_check_port(struct device *, int);
323:	bool usb_amd_quirk_pll_check(void);
457:	void usb_amd_quirk_pll_disable(void);
507:	void usb_amd_quirk_pll_enable(void);
487:	void usb_asmedia_modifyflowcontrol(struct pci_dev *);
1124:	void usb_disable_xhci_ports(struct pci_dev *);
1039:	void usb_enable_intel_xhci_ports(struct pci_dev *);
289:	int usb_hcd_amd_remote_wakeup_quirk(struct pci_dev *);
151:	static int amd_chipset_sb_type_init(struct amd_chipset_info *);
855:	static void ehci_bios_handoff(struct pci_dev *, void *, u32, u8);
929:	static void quirk_usb_disable_ehci(struct pci_dev *);
1242:	static void quirk_usb_early_handoff(struct pci_dev *);
1139:	static void quirk_usb_handoff_xhci(struct pci_dev *);
207:	static void usb_amd_find_chipset_info(void);
340:	static void usb_amd_quirk_pll(int);
463:	static int usb_asmedia_wait_write(struct pci_dev *);

File drivers/usb/host/uhci-debug.c:
27:	static void lprintk(char *);
586:	static loff_t uhci_debug_lseek(struct file *, loff_t, int);
558:	static int uhci_debug_open(struct inode *, struct file *);
592:	static ssize_t uhci_debug_read(struct file *, char *, size_t, loff_t *);
599:	static int uhci_debug_release(struct inode *, struct file *);
165:	static int uhci_show_qh(struct uhci_hcd *, struct uhci_qh *, char *, int, int);
262:	static int uhci_show_sc(int, unsigned short, char *);
305:	static int uhci_show_status(struct uhci_hcd *, char *, int);
43:	static int uhci_show_td(struct uhci_td *, char *, int, int, struct uhci_hcd *);
100:	static int uhci_show_urbp(struct urb_priv *, char *, int, int, struct uhci_hcd *);
374:	static int uhci_sprint_schedule(struct uhci_hcd *, char *, int);

File drivers/usb/host/uhci-hcd.c:
131:	static void finish_reset(struct uhci_hcd *);
530:	static void release_uhci(struct uhci_hcd *);
288:	static void suspend_rh(struct uhci_hcd *, enum uhci_rh_state);
152:	static void uhci_hc_died(struct uhci_hcd *);
924:	static void uhci_hcd_cleanup(void);
770:	static void uhci_hcd_endpoint_disable(struct usb_hcd *, struct usb_host_endpoint *);
795:	static int uhci_hcd_get_frame_number(struct usb_hcd *);
865:	static int uhci_hcd_init(void);
450:	static irqreturn_t uhci_irq(struct usb_hcd *);
753:	static int uhci_rh_resume(struct usb_hcd *);
726:	static int uhci_rh_suspend(struct usb_hcd *);
575:	static int uhci_start(struct usb_hcd *);
710:	static void uhci_stop(struct usb_hcd *);
410:	static void wakeup_rh(struct uhci_hcd *);

File drivers/usb/host/uhci-hub.c:
44:	static int any_ports_active(struct uhci_hcd *);
137:	static void uhci_check_ports(struct uhci_hcd *);
96:	static void uhci_finish_suspend(struct uhci_hcd *, int, unsigned long);
243:	static int uhci_hub_control(struct usb_hcd *, u16, u16, u16, char *, u16);
186:	static int uhci_hub_status_data(struct usb_hcd *, char *);

File drivers/usb/host/uhci-pci.c:
38:	static int uhci_pci_check_and_reset_hc(struct uhci_hcd *);
48:	static void uhci_pci_configure_hc(struct uhci_hcd *);
92:	static int uhci_pci_global_suspend_mode_is_broken(struct uhci_hcd *);
114:	static int uhci_pci_init(struct usb_hcd *);
298:	static int uhci_pci_probe(struct pci_dev *, const struct pci_device_id *);
27:	static void uhci_pci_reset_hc(struct uhci_hcd *);
214:	static int uhci_pci_resume(struct usb_hcd *, bool);
60:	static int uhci_pci_resume_detect_interrupts_are_broken(struct uhci_hcd *);
175:	static int uhci_pci_suspend(struct usb_hcd *, bool);
164:	static void uhci_shutdown(struct pci_dev *);

File drivers/usb/host/uhci-q.c:
480:	static void uhci_activate_qh(struct uhci_hcd *, struct uhci_qh *);
623:	static int uhci_check_bandwidth(struct uhci_hcd *, struct uhci_qh *);
372:	static void uhci_fixup_toggles(struct uhci_qh *, int, struct uhci_hcd *);
292:	static void uhci_free_qh(struct uhci_hcd *, struct uhci_qh *);
124:	static void uhci_free_td(struct uhci_hcd *, struct uhci_td *);
740:	static void uhci_free_urb_priv(struct uhci_hcd *, struct urb_priv *);
92:	static void uhci_fsbr_timeout(struct timer_list *);
1516:	static void uhci_giveback_urb(struct uhci_hcd *, struct uhci_qh *, struct urb *, int);
586:	static void uhci_make_qh_idle(struct uhci_hcd *, struct uhci_qh *);
765:	static int uhci_map_status(int, int);
692:	static void uhci_release_bandwidth(struct uhci_hcd *, struct uhci_qh *);
659:	static void uhci_reserve_bandwidth(struct uhci_hcd *, struct uhci_qh *);
1170:	static int uhci_result_common(struct uhci_hcd *, struct urb *);
1369:	static int uhci_result_isochronous(struct uhci_hcd *, struct urb *);
1575:	static void uhci_scan_qh(struct uhci_hcd *, struct uhci_qh *);
1741:	static void uhci_scan_schedule(struct uhci_hcd *);
915:	static int uhci_submit_common(struct uhci_hcd *, struct urb *, struct uhci_qh *);
789:	static int uhci_submit_control(struct uhci_hcd *, struct urb *, struct uhci_qh *);
1254:	static int uhci_submit_isochronous(struct uhci_hcd *, struct urb *, struct uhci_qh *);
236:	static void uhci_unlink_isochronous_tds(struct uhci_hcd *, struct urb *);
551:	static void uhci_unlink_qh(struct uhci_hcd *, struct uhci_qh *);
1481:	static int uhci_urb_dequeue(struct usb_hcd *, struct urb *, int);
1408:	static int uhci_urb_enqueue(struct usb_hcd *, struct urb *, gfp_t);
79:	static void uhci_urbp_wants_fsbr(struct uhci_hcd *, struct urb_priv *);

File drivers/usb/host/xhci-dbg.c:
22:	void xhci_dbg_trace(struct xhci_hcd *, void (*)(struct va_format *), const char *, ...);
13:	char *xhci_get_slot_state(struct xhci_hcd *, struct xhci_container_ctx *);

File drivers/usb/host/xhci-dbgcap.c:
189:	struct dbc_request *dbc_alloc_request(struct xhci_dbc *, unsigned int, gfp_t);
332:	int dbc_ep_queue(struct dbc_request *);
215:	void dbc_free_request(struct dbc_request *);
1056:	void xhci_dbc_exit(struct xhci_hcd *);
1029:	int xhci_dbc_init(struct xhci_hcd *);
1085:	int xhci_dbc_resume(struct xhci_hcd *);
1070:	int xhci_dbc_suspend(struct xhci_hcd *);
295:	static int dbc_ep_do_queue(struct dbc_request *);
682:	static void dbc_handle_xfer_event(struct xhci_dbc *, union xhci_trb *);
26:	static void dbc_ring_free(struct device *, struct xhci_ring *);
970:	static ssize_t dbc_show(struct device *, struct device_attribute *, char *);
1007:	static ssize_t dbc_store(struct device *, struct device_attribute *, const char *, size_t);
750:	static enum evtreturn xhci_dbc_do_handle_events(struct xhci_dbc *);
174:	static void xhci_dbc_flush_endpoint_requests(struct dbc_ep *);
134:	static void xhci_dbc_giveback(struct dbc_request *, int);
886:	static void xhci_dbc_handle_events(struct work_struct *);
467:	static int xhci_dbc_mem_init(struct xhci_dbc *, gfp_t);
245:	static int xhci_dbc_queue_bulk_tx(struct dbc_ep *, struct dbc_request *);
223:	static void xhci_dbc_queue_trb(struct xhci_ring *, u32, u32, u32, u32);
423:	static struct xhci_ring *xhci_dbc_ring_alloc(struct device *, enum xhci_ring_type, gfp_t);
608:	static int xhci_dbc_start(struct xhci_dbc *);
629:	static void xhci_dbc_stop(struct xhci_dbc *);
927:	static int xhci_do_dbc_init(struct xhci_hcd *);

File drivers/usb/host/xhci-dbgtty.c:
471:	int xhci_dbc_tty_probe(struct xhci_hcd *);
505:	void xhci_dbc_tty_remove(struct xhci_dbc *);
364:	static int dbc_port_activate(struct tty_port *, struct tty_struct *);
104:	static void dbc_read_complete(struct xhci_dbc *, struct dbc_request *);
291:	static void dbc_rx_push(struct tasklet_struct *);
76:	static void dbc_start_rx(struct dbc_port *);
40:	static int dbc_start_tx(struct dbc_port *);
256:	static int dbc_tty_chars_in_buffer(struct tty_struct *);
197:	static void dbc_tty_close(struct tty_struct *, struct file *);
547:	static void dbc_tty_exit(void);
233:	static void dbc_tty_flush_chars(struct tty_struct *);
517:	static int dbc_tty_init(void);
181:	static int dbc_tty_install(struct tty_driver *, struct tty_struct *);
190:	static int dbc_tty_open(struct tty_struct *, struct file *);
220:	static int dbc_tty_put_char(struct tty_struct *, unsigned char);
269:	static void dbc_tty_unthrottle(struct tty_struct *);
204:	static int dbc_tty_write(struct tty_struct *, const unsigned char *, int);
243:	static int dbc_tty_write_room(struct tty_struct *);
115:	static void dbc_write_complete(struct xhci_dbc *, struct dbc_request *);
143:	static int xhci_dbc_alloc_requests(struct xhci_dbc *, unsigned int, struct list_head *, void (*)(struct xhci_dbc *, struct dbc_request *));
170:	static void xhci_dbc_free_requests(struct list_head *);
401:	static int xhci_dbc_tty_register_device(struct xhci_dbc *);
450:	static void xhci_dbc_tty_unregister_device(struct xhci_dbc *);

File drivers/usb/host/xhci-debugfs.c:
443:	void xhci_debugfs_create_endpoint(struct xhci_hcd *, struct xhci_virt_device *, int);
716:	void xhci_debugfs_create_root(void);
591:	void xhci_debugfs_create_slot(struct xhci_hcd *, int);
566:	void xhci_debugfs_create_stream_files(struct xhci_hcd *, struct xhci_virt_device *, int);
704:	void xhci_debugfs_exit(struct xhci_hcd *);
652:	void xhci_debugfs_init(struct xhci_hcd *);
470:	void xhci_debugfs_remove_endpoint(struct xhci_hcd *, struct xhci_virt_device *, int);
721:	void xhci_debugfs_remove_root(void);
611:	void xhci_debugfs_remove_slot(struct xhci_hcd *, int);
320:	static int xhci_context_open(struct inode *, struct file *);
140:	static void xhci_debugfs_extcap_regset(struct xhci_hcd *, int, const struct debugfs_reg32 *, size_t, const char *);
114:	static void xhci_debugfs_regset(struct xhci_hcd *, u32, const struct debugfs_reg32 *, size_t, struct dentry *, const char *, ...);
304:	static int xhci_device_name_show(struct seq_file *, void *);
278:	static int xhci_endpoint_context_show(struct seq_file *, void *);
357:	static int xhci_port_open(struct inode *, struct file *);
362:	static ssize_t xhci_port_write(struct file *, const char *, size_t, loff_t *);
345:	static int xhci_portsc_show(struct seq_file *, void *);
186:	static int xhci_ring_cycle_show(struct seq_file *, void *);
175:	static int xhci_ring_dequeue_show(struct seq_file *, void *);
195:	static void xhci_ring_dump_segment(struct seq_file *, struct xhci_segment *);
164:	static int xhci_ring_enqueue_show(struct seq_file *, void *);
235:	static int xhci_ring_open(struct inode *, struct file *);
214:	static int xhci_ring_trb_show(struct seq_file *, void *);
258:	static int xhci_slot_context_show(struct seq_file *, void *);
564:	static int xhci_stream_context_array_open(struct inode *, struct file *);
537:	static int xhci_stream_context_array_show(struct seq_file *, void *);
499:	static int xhci_stream_id_open(struct inode *, struct file *);
486:	static int xhci_stream_id_show(struct seq_file *, void *);
504:	static ssize_t xhci_stream_id_write(struct file *, const char *, size_t, loff_t *);

File drivers/usb/host/xhci-ext-caps.c:
83:	int xhci_ext_cap_init(struct xhci_hcd *);
28:	static int xhci_create_intel_xhci_sw_pdev(struct xhci_hcd *, u32);
23:	static void xhci_intel_unregister_pdev(void *);

File drivers/usb/host/xhci-hub.c:
1753:	int xhci_bus_resume(struct usb_hcd *);
1595:	int xhci_bus_suspend(struct usb_hcd *);
361:	int xhci_find_slot_id_by_port(struct usb_hcd *, struct xhci_hcd *, u16);
1869:	unsigned long xhci_get_resuming_ports(struct usb_hcd *);
555:	struct xhci_hub *xhci_get_rhub(struct usb_hcd *);
1092:	int xhci_hub_control(struct usb_hcd *, u16, u16, u16, char *, u16);
1531:	int xhci_hub_status_data(struct usb_hcd *, char *);
351:	u32 xhci_port_state_to_neutral(u32);
462:	void xhci_ring_device(struct xhci_hcd *, int);
682:	void xhci_set_link_state(struct xhci_hcd *, struct xhci_port *, u32);
726:	void xhci_test_and_clear_bit(struct xhci_hcd *, struct xhci_port *, u32);
55:	static int xhci_create_usb3_bos_desc(struct xhci_hcd *, char *, u16);
620:	static int xhci_enter_test_mode(struct xhci_hcd *, u16, u16, unsigned long *);
1031:	static u32 xhci_get_port_status(struct usb_hcd *, struct xhci_bus_state *, u16, u32, unsigned long *);
932:	static void xhci_get_usb3_port_status(struct xhci_port *, u32 *, u32);
821:	static int xhci_handle_usb2_port_link_resume(struct xhci_port *, u32 *, u32, unsigned long *);
569:	static void xhci_set_port_power(struct xhci_hcd *, struct usb_hcd *, u16, bool, unsigned long *);
389:	static int xhci_stop_device(struct xhci_hcd *, int, int);
192:	static void xhci_usb2_hub_descriptor(struct xhci_hcd *, struct usb_hub_descriptor *, struct usb_hcd *);

File drivers/usb/host/xhci-mem.c:
1747:	struct xhci_command *xhci_alloc_command(struct xhci_hcd *, bool, gfp_t);
1773:	struct xhci_command *xhci_alloc_command_with_ctx(struct xhci_hcd *, bool, gfp_t);
469:	struct xhci_container_ctx *xhci_alloc_container_ctx(struct xhci_hcd *, int, gfp_t);
1806:	int xhci_alloc_erst(struct xhci_hcd *, struct xhci_ring *, struct xhci_erst *, gfp_t);
621:	struct xhci_stream_info *xhci_alloc_stream_info(struct xhci_hcd *, unsigned int, unsigned int, unsigned int, gfp_t);
841:	int xhci_alloc_tt_info(struct xhci_hcd *, struct xhci_virt_device *, struct usb_device *, struct usb_tt *, gfp_t);
981:	int xhci_alloc_virt_device(struct xhci_hcd *, int, struct usb_device *, gfp_t);
1548:	void xhci_clear_endpoint_bw_info(struct xhci_bw_info *);
1050:	void xhci_copy_ep0_dequeue_into_input_ctx(struct xhci_hcd *, struct usb_device *);
585:	struct xhci_ring *xhci_dma_to_transfer_ring(struct xhci_virt_ep *, u64);
1616:	void xhci_endpoint_copy(struct xhci_hcd *, struct xhci_container_ctx *, struct xhci_container_ctx *, unsigned int);
1430:	int xhci_endpoint_init(struct xhci_hcd *, struct xhci_virt_device *, struct usb_device *, struct usb_host_endpoint *, gfp_t);
1529:	void xhci_endpoint_zero(struct xhci_hcd *, struct xhci_virt_device *, struct usb_host_endpoint *);
1797:	void xhci_free_command(struct xhci_hcd *, struct xhci_command *);
495:	void xhci_free_container_ctx(struct xhci_hcd *, struct xhci_container_ctx *);
411:	void xhci_free_endpoint_ring(struct xhci_hcd *, struct xhci_virt_device *, unsigned int);
1836:	void xhci_free_erst(struct xhci_hcd *, struct xhci_erst *);
771:	void xhci_free_stream_info(struct xhci_hcd *, struct xhci_stream_info *);
886:	void xhci_free_virt_device(struct xhci_hcd *, int);
523:	struct xhci_ep_ctx *xhci_get_ep_ctx(struct xhci_hcd *, struct xhci_container_ctx *, unsigned int);
504:	struct xhci_input_control_ctx *xhci_get_input_control_ctx(struct xhci_container_ctx *);
513:	struct xhci_slot_ctx *xhci_get_slot_ctx(struct xhci_hcd *, struct xhci_container_ctx *);
296:	void xhci_initialize_ring_info(struct xhci_ring *, unsigned int);
1849:	void xhci_mem_cleanup(struct xhci_hcd *);
2394:	int xhci_mem_init(struct xhci_hcd *, gfp_t);
371:	struct xhci_ring *xhci_ring_alloc(struct xhci_hcd *, unsigned int, unsigned int, enum xhci_ring_type, unsigned int, gfp_t);
423:	int xhci_ring_expansion(struct xhci_hcd *, struct xhci_ring *, unsigned int, gfp_t);
280:	void xhci_ring_free(struct xhci_hcd *, struct xhci_ring *);
1101:	int xhci_setup_addressable_virt_dev(struct xhci_hcd *, struct usb_device *);
758:	void xhci_setup_no_streams_ep_input_ctx(struct xhci_ep_ctx *, struct xhci_virt_ep *);
734:	void xhci_setup_streams_ep_input_ctx(struct xhci_hcd *, struct xhci_ep_ctx *, struct xhci_stream_info *);
1642:	void xhci_slot_copy(struct xhci_hcd *, struct xhci_container_ctx *, struct xhci_container_ctx *);
595:	struct xhci_ring *xhci_stream_id_to_ring(struct xhci_virt_device *, unsigned int, unsigned int);
1558:	void xhci_update_bw_info(struct xhci_hcd *, struct xhci_container_ctx *, struct xhci_input_control_ctx *, struct xhci_virt_device *);
1792:	void xhci_urb_free_priv(struct urb_priv *);
1659:	static int scratchpad_alloc(struct xhci_hcd *, gfp_t);
2131:	static void xhci_add_in_port(struct xhci_hcd *, unsigned int, __le32 *, int);
321:	static int xhci_alloc_segments_for_ring(struct xhci_hcd *, struct xhci_segment **, struct xhci_segment **, unsigned int, unsigned int, enum xhci_ring_type, unsigned int, gfp_t);
1986:	static int xhci_check_trb_in_td_math(struct xhci_hcd *);
2256:	static void xhci_create_rhub_port_array(struct xhci_hcd *, struct xhci_hub *, gfp_t);
811:	static void xhci_free_tt_info(struct xhci_hcd *, int, struct xhci_virt_device *, struct xhci_virt_device *);
945:	static void xhci_free_virt_devices_depth_first(struct xhci_hcd *, int);
1258:	static unsigned int xhci_microframes_to_exponent(struct usb_device *, struct usb_host_endpoint *, unsigned int, unsigned int, unsigned int);
1229:	static unsigned int xhci_parse_exponent_interval(struct usb_device *, struct usb_host_endpoint *, struct usb_host_endpoint *);
28:	static struct xhci_segment *xhci_segment_alloc(struct xhci_hcd *, unsigned int, unsigned int, gfp_t);
2289:	static int xhci_setup_port_arrays(struct xhci_hcd *, gfp_t);
1949:	static int xhci_test_trb_in_td(struct xhci_hcd *, struct xhci_segment *, union xhci_trb *, union xhci_trb *, dma_addr_t, struct xhci_segment *, char *, int);
219:	static int xhci_update_stream_segment_mapping(struct xarray *, struct xhci_ring *, struct xhci_segment *, struct xhci_segment *, gfp_t);

File drivers/usb/host/xhci-pci.c:
727:	static void xhci_pci_exit(void);
715:	static int xhci_pci_init(void);
419:	static int xhci_pci_probe(struct pci_dev *, const struct pci_device_id *);
109:	static void xhci_pci_quirks(struct device *, struct xhci_hcd *);
93:	static int xhci_pci_reinit(struct xhci_hcd *, struct pci_dev *);
497:	static void xhci_pci_remove(struct pci_dev *);
616:	static int xhci_pci_resume(struct usb_hcd *, bool);
372:	static int xhci_pci_setup(struct usb_hcd *);
655:	static void xhci_pci_shutdown(struct usb_hcd *);
587:	static int xhci_pci_suspend(struct usb_hcd *, bool);
531:	static void xhci_ssic_port_unused_quirk(struct usb_hcd *, bool);

File drivers/usb/host/xhci-ring.c:
3147:	unsigned int count_trbs(u64, u64);
156:	void inc_deq(struct xhci_hcd *, struct xhci_ring *);
1849:	struct xhci_segment *trb_in_td(struct xhci_hcd *, struct xhci_segment *, union xhci_trb *, union xhci_trb *, dma_addr_t, bool);
1411:	void xhci_cleanup_command_queue(struct xhci_hcd *);
563:	void xhci_find_new_dequeue_state(struct xhci_hcd *, unsigned int, unsigned int, unsigned int, struct xhci_td *, struct xhci_dequeue_state *);
1419:	void xhci_handle_command_timeout(struct work_struct *);
997:	void xhci_hc_died(struct xhci_hcd *);
2906:	irqreturn_t xhci_irq(struct usb_hcd *);
1984:	int xhci_is_vendor_info_code(struct xhci_hcd *, unsigned int);
2984:	irqreturn_t xhci_msi_irq(int, void *);
4166:	int xhci_queue_address_device(struct xhci_hcd *, struct xhci_command *, dma_addr_t, u32, enum xhci_setup_dev);
3385:	int xhci_queue_bulk_tx(struct xhci_hcd *, gfp_t, struct urb *, int, unsigned int);
4191:	int xhci_queue_configure_endpoint(struct xhci_hcd *, struct xhci_command *, dma_addr_t, u32, bool);
3544:	int xhci_queue_ctrl_tx(struct xhci_hcd *, gfp_t, struct urb *, int, unsigned int);
4202:	int xhci_queue_evaluate_context(struct xhci_hcd *, struct xhci_command *, dma_addr_t, u32, bool);
3257:	int xhci_queue_intr_tx(struct xhci_hcd *, gfp_t, struct urb *, int, unsigned int);
4031:	int xhci_queue_isoc_tx_prepare(struct xhci_hcd *, gfp_t, struct urb *, int, unsigned int);
4228:	void xhci_queue_new_dequeue_state(struct xhci_hcd *, unsigned int, unsigned int, struct xhci_dequeue_state *);
4182:	int xhci_queue_reset_device(struct xhci_hcd *, struct xhci_command *, u32);
4292:	int xhci_queue_reset_ep(struct xhci_hcd *, struct xhci_command *, int, unsigned int, enum xhci_ep_reset_type);
4158:	int xhci_queue_slot_control(struct xhci_hcd *, struct xhci_command *, u32, u32);
4215:	int xhci_queue_stop_endpoint(struct xhci_hcd *, struct xhci_command *, int, unsigned int, int);
4175:	int xhci_queue_vendor_command(struct xhci_hcd *, struct xhci_command *, u32, u32, u32, u32);
277:	void xhci_ring_cmd_db(struct xhci_hcd *);
455:	void xhci_ring_doorbell_for_active_rings(struct xhci_hcd *, unsigned int, unsigned int);
402:	void xhci_ring_ep_doorbell(struct xhci_hcd *, unsigned int, unsigned int, unsigned int);
1039:	void xhci_stop_endpoint_command_watchdog(struct timer_list *);
66:	dma_addr_t xhci_trb_virt_to_dma(struct xhci_segment *, union xhci_trb *);
486:	struct xhci_ring *xhci_triad_to_transfer_ring(struct xhci_hcd *, unsigned int, unsigned int, unsigned int);
3221:	static void check_interval(struct urb *, struct xhci_hcd *, struct xhci_ep_ctx *, struct xhci_ep_ctx *);
2044:	static int finish_td(struct xhci_hcd *, struct xhci_td *, struct xhci_transfer_event *, struct xhci_virt_ep *, int *);
1473:	static void handle_cmd_completion(struct xhci_hcd *, struct xhci_event_cmd *);
1616:	static void handle_device_notification(struct xhci_hcd *, union xhci_trb *, union xhci_trb *);
1665:	static void handle_port_status(struct xhci_hcd *, union xhci_trb *);
2413:	static int handle_tx_event(struct xhci_hcd *, struct xhci_transfer_event *);
204:	static void inc_enq(struct xhci_hcd *, struct xhci_ring *, bool);
3021:	static int prepare_ring(struct xhci_hcd *, struct xhci_ring *, u32, unsigned int, gfp_t);
3099:	static int prepare_transfer(struct xhci_hcd *, struct xhci_virt_device *, unsigned int, unsigned int, unsigned int, struct urb *, unsigned int, gfp_t);
2333:	static int process_bulk_intr_td(struct xhci_hcd *, struct xhci_td *, union xhci_trb *, struct xhci_transfer_event *, struct xhci_virt_ep *, int *);
2116:	static int process_ctrl_td(struct xhci_hcd *, struct xhci_td *, struct xhci_transfer_event *, struct xhci_virt_ep *, int *, union xhci_trb *, union xhci_trb *);
2218:	static int process_isoc_td(struct xhci_hcd *, struct xhci_td *, union xhci_trb *, struct xhci_transfer_event *, struct xhci_virt_ep *, int *);
4116:	static int queue_command(struct xhci_hcd *, struct xhci_command *, u32, u32, u32, u32, bool);
2998:	static void queue_trb(struct xhci_hcd *, struct xhci_ring *, bool, u32, u32, u32, u32);
430:	static void ring_doorbell_for_active_rings(struct xhci_hcd *, unsigned int, unsigned int);
2099:	static int sum_trb_lengths(union xhci_trb *, struct xhci_ring *, struct xhci_hcd *, struct xhci_ring *);
690:	static void td_to_noop(struct xhci_td *, bool, struct xhci_ring *, struct xhci_hcd *);
1077:	static void update_ring_for_set_deq_completion(struct xhci_hcd *, struct xhci_virt_device *, struct xhci_ring *, unsigned int);
343:	static int xhci_abort_cmd_ring(struct xhci_hcd *, unsigned long);
3315:	static int xhci_align_td(struct xhci_hcd *, struct urb *, u32, u32 *, struct xhci_segment *);
1927:	static void xhci_cleanup_halted_endpoint(struct xhci_hcd *, unsigned int, unsigned int, unsigned int, struct xhci_td *, enum xhci_ep_reset_type);
3736:	static int xhci_get_isoc_frame_id(struct xhci_hcd *, struct urb *, int);
462:	static struct xhci_virt_ep *xhci_get_virt_ep(struct xhci_hcd *, unsigned int, unsigned int);
722:	static void xhci_giveback_urb_in_irq(struct xhci_hcd *, int, struct xhci_td *, struct xhci_td *);
1360:	static void xhci_handle_cmd_addr_dev(struct xhci_hcd *, int);
1303:	static void xhci_handle_cmd_config_ep(struct xhci_hcd *, int, u32, struct xhci_event_cmd *);
1286:	static void xhci_handle_cmd_disable_slot(struct xhci_hcd *, int);
1370:	static void xhci_handle_cmd_reset_dev(struct xhci_hcd *, int, struct xhci_event_cmd *);
1227:	static void xhci_handle_cmd_reset_ep(struct xhci_hcd *, int, union xhci_trb *, u32);
1130:	static void xhci_handle_cmd_set_deq(struct xhci_hcd *, int, u32, union xhci_trb *, union xhci_trb *);
786:	static void xhci_handle_cmd_stop_ep(struct xhci_hcd *, int, struct xhci_event_cmd *, union xhci_trb *, union xhci_trb *);
2795:	static int xhci_handle_event(struct xhci_hcd *);
307:	static void xhci_handle_stopped_cmd_ring(struct xhci_hcd *, struct xhci_command *);
944:	static void xhci_kill_endpoint_urbs(struct xhci_hcd *, int, int);
925:	static void xhci_kill_ring_urbs(struct xhci_hcd *, struct xhci_ring *);
3839:	static int xhci_queue_isoc_tx(struct xhci_hcd *, gfp_t, struct urb *, int, unsigned int);
1998:	static int xhci_td_cleanup(struct xhci_hcd *, struct xhci_td *, struct xhci_ring *, int *);
3288:	static u32 xhci_td_remainder(struct xhci_hcd *, int, int, unsigned int, struct urb *, bool);
742:	static void xhci_unmap_td_bounce_buffer(struct xhci_hcd *, struct xhci_ring *, struct xhci_td *, struct xhci_td *);
2870:	static void xhci_update_erst_dequeue(struct xhci_hcd *, union xhci_trb *);

File drivers/usb/host/xhci-trace.h:
38:	static void trace_xhci_dbg_address(struct va_format *);
58:	static void trace_xhci_dbg_cancel_urb(struct va_format *);
43:	static void trace_xhci_dbg_context_change(struct va_format *);
63:	static void trace_xhci_dbg_init(struct va_format *);
48:	static void trace_xhci_dbg_quirks(struct va_format *);
53:	static void trace_xhci_dbg_reset_ep(struct va_format *);
68:	static void trace_xhci_dbg_ring_expansion(struct va_format *);

File drivers/usb/host/xhci.c:
3996:	int xhci_alloc_dev(struct usb_hcd *, struct usb_device *);
2876:	int xhci_check_bandwidth(struct usb_hcd *, struct usb_device *);
3049:	void xhci_cleanup_stalled_ring(struct xhci_hcd *, unsigned int, unsigned int, unsigned int, struct xhci_td *);
3925:	int xhci_disable_slot(struct xhci_hcd *, u32);
4284:	int xhci_find_raw_port_number(struct usb_hcd *, int);
3687:	void xhci_free_device_endpoint_resources(struct xhci_hcd *, struct xhci_virt_device *, bool);
5189:	int xhci_gen_setup(struct usb_hcd *, xhci_get_quirks_t);
1313:	unsigned int xhci_get_endpoint_address(unsigned int);
1299:	unsigned int xhci_get_endpoint_index(struct usb_endpoint_descriptor *);
111:	int xhci_halt(struct xhci_hcd *);
69:	int xhci_handshake(void *, u32, u32, int);
5452:	void xhci_init_driver(struct hc_driver *, const struct xhci_driver_overrides *);
1344:	unsigned int xhci_last_valid_endpoint(u32);
87:	void xhci_quiesce(struct xhci_hcd *);
166:	int xhci_reset(struct xhci_hcd *);
2974:	void xhci_reset_bandwidth(struct usb_hcd *, struct usb_device *);
1086:	int xhci_resume(struct xhci_hcd *, bool);
638:	int xhci_run(struct usb_hcd *);
777:	void xhci_shutdown(struct usb_hcd *);
131:	int xhci_start(struct xhci_hcd *);
972:	int xhci_suspend(struct xhci_hcd *, bool);
2643:	void xhci_update_tt_active_eps(struct xhci_hcd *, struct xhci_virt_device *, int);
4959:	static int calculate_max_exit_latency(struct usb_device *, enum usb3_link_state, u16);
479:	static void compliance_mode_recovery(struct timer_list *);
1832:	static int xhci_add_endpoint(struct usb_hcd *, struct usb_device *, struct usb_host_endpoint *);
2569:	static void xhci_add_ep_to_interval_table(struct xhci_hcd *, struct xhci_bw_info *, struct xhci_interval_bw_table *, struct usb_device *, struct xhci_virt_ep *, struct xhci_tt_bw_info *);
4268:	static int xhci_address_device(struct usb_hcd *, struct usb_device *);
3428:	static int xhci_alloc_streams(struct usb_hcd *, struct usb_device *, struct usb_host_endpoint **, unsigned int, unsigned int, gfp_t);
4892:	static u16 xhci_calculate_lpm_timeout(struct usb_hcd *, struct usb_device *, enum usb3_link_state);
3371:	static u32 xhci_calculate_no_streams_bitmask(struct xhci_hcd *, struct usb_host_endpoint **, unsigned int, struct usb_device *, struct usb_device *);
3339:	static int xhci_calculate_streams_and_bitmask(struct xhci_hcd *, struct usb_device *, struct usb_host_endpoint **, unsigned int, unsigned int *, u32 *);
3313:	static void xhci_calculate_streams_entries(struct xhci_hcd *, unsigned int *, unsigned int *);
4672:	static u16 xhci_calculate_u1_timeout(struct xhci_hcd *, struct usb_device *, struct usb_endpoint_descriptor *);
4736:	static u16 xhci_calculate_u2_timeout(struct xhci_hcd *, struct usb_device *, struct usb_endpoint_descriptor *);
4296:	static int xhci_change_max_exit_latency(struct xhci_hcd *, struct usb_device *, u16);
1352:	static int xhci_check_args(struct usb_hcd *, struct usb_device *, struct usb_host_endpoint *, int, bool, const char *);
2852:	static void xhci_check_bw_drop_ep_streams(struct xhci_hcd *, struct xhci_virt_device *, int);
2302:	static int xhci_check_bw_table(struct xhci_hcd *, struct xhci_virt_device *, int);
1399:	static int xhci_check_maxpacket(struct xhci_hcd *, unsigned int, unsigned int, struct urb *, gfp_t);
4847:	static int xhci_check_zhaoxin_tier_policy(struct usb_device *, enum usb3_link_state);
369:	static void xhci_cleanup_msix(struct xhci_hcd *);
852:	static void xhci_clear_command_ring(struct xhci_hcd *);
5365:	static void xhci_clear_tt_buffer_complete(struct usb_hcd *, struct usb_host_endpoint *);
545:	static bool xhci_compliance_mode_recovery_timer_quirk_check(void);
2756:	static int xhci_configure_endpoint(struct xhci_hcd *, struct usb_device *, struct xhci_command *, bool, bool);
2096:	static unsigned int xhci_count_num_dropped_endpoints(struct xhci_hcd *, struct xhci_input_control_ctx *, struct xhci_input_control_ctx *);
2075:	static u32 xhci_count_num_new_endpoints(struct xhci_hcd *, struct xhci_input_control_ctx *, struct xhci_input_control_ctx *);
899:	static void xhci_disable_hub_port_wake(struct xhci_hcd *, struct xhci_hub *, bool);
5036:	static int xhci_disable_usb3_lpm_timeout(struct usb_hcd *, struct usb_device *, enum usb3_link_state);
3727:	static int xhci_discover_or_reset_device(struct usb_hcd *, struct usb_device *);
1747:	static int xhci_drop_endpoint(struct usb_hcd *, struct usb_device *, struct usb_host_endpoint *);
2505:	static void xhci_drop_ep_from_interval_table(struct xhci_hcd *, struct xhci_bw_info *, struct xhci_interval_bw_table *, struct usb_device *, struct xhci_virt_ep *, struct xhci_tt_bw_info *);
4273:	static int xhci_enable_device(struct usb_hcd *, struct usb_device *);
5005:	static int xhci_enable_usb3_lpm_timeout(struct usb_hcd *, struct usb_device *, enum usb3_link_state);
3088:	static void xhci_endpoint_disable(struct usb_hcd *, struct usb_host_endpoint *);
3142:	static void xhci_endpoint_reset(struct usb_hcd *, struct usb_host_endpoint *);
3889:	static void xhci_free_dev(struct usb_hcd *, struct usb_device *);
2149:	static void xhci_free_host_resources(struct xhci_hcd *, struct xhci_input_control_ctx *, struct xhci_input_control_ctx *);
3595:	static int xhci_free_streams(struct usb_hcd *, struct usb_device *, struct usb_host_endpoint **, unsigned int, gfp_t);
5182:	static int xhci_get_frame(struct usb_hcd *);
2491:	static unsigned int xhci_get_ss_bw_consumed(struct xhci_bw_info *, struct xhci_bw_info *);
4584:	static u16 xhci_get_timeout_no_hub_lpm(struct usb_device *, enum usb3_link_state);
5510:	static void xhci_hcd_fini(void);
5478:	static int xhci_hcd_init(void);
579:	static int xhci_init(struct usb_hcd *);
1280:	static int xhci_map_urb_for_dma(struct usb_hcd *, struct urb *, gfp_t);
931:	static bool xhci_pending_portevent(struct xhci_hcd *);
2663:	static int xhci_reserve_bandwidth(struct xhci_hcd *, struct xhci_virt_device *, struct xhci_container_ctx *);
826:	static void xhci_set_cmd_ring_deq(struct xhci_hcd *);
4418:	static int xhci_set_usb2_hardware_lpm(struct usb_hcd *, struct usb_device *, int);
4084:	static int xhci_setup_device(struct usb_hcd *, struct usb_device *, enum xhci_setup_dev);
3010:	static void xhci_setup_input_ctx_for_quirk(struct xhci_hcd *, unsigned int, unsigned int, struct xhci_dequeue_state *);
326:	static int xhci_setup_msix(struct xhci_hcd *);
716:	static void xhci_stop(struct usb_hcd *);
407:	static int xhci_try_enable_msi(struct usb_hcd *);
4548:	static int xhci_update_device(struct usb_hcd *, struct usb_device *);
5081:	static int xhci_update_hub_device(struct usb_hcd *, struct usb_device *, struct usb_tt *, gfp_t);
1615:	static int xhci_urb_dequeue(struct usb_hcd *, struct urb *, int);
1473:	static int xhci_urb_enqueue(struct usb_hcd *, struct urb *, gfp_t);
226:	static void xhci_zero_64b_regs(struct xhci_hcd *);
1941:	static void xhci_zero_in_ctx(struct xhci_hcd *, struct xhci_virt_device *);

File drivers/usb/mon/mon_bin.c:
1351:	int mon_bin_add(struct mon_bus *, const struct usb_bus *);
1369:	void mon_bin_del(struct mon_bus *);
1405:	void mon_bin_exit(void);
1374:	int mon_bin_init(void);
261:	static int copy_from_buf(const struct mon_reader_bin *, unsigned int, char *, int);
1325:	static int mon_alloc_buff(struct mon_pgmap *, int);
1134:	static long mon_bin_compat_ioctl(struct file *, unsigned int, unsigned long);
626:	static void mon_bin_complete(void *, struct urb *, int);
632:	static void mon_bin_error(void *, struct urb *, int);
485:	static void mon_bin_event(struct mon_reader_bin *, struct urb *, char, int);
898:	static int mon_bin_fetch(struct file *, struct mon_reader_bin *, u32 *, unsigned int);
872:	static int mon_bin_flush(struct mon_reader_bin *, unsigned int);
403:	static unsigned int mon_bin_get_data(const struct mon_reader_bin *, unsigned int, struct urb *, unsigned int, char *);
737:	static int mon_bin_get_event(struct file *, struct mon_reader_bin *, struct mon_bin_hdr *, unsigned int, void *, unsigned int);
984:	static long mon_bin_ioctl(struct file *, unsigned int, unsigned long);
1267:	static int mon_bin_mmap(struct file *, struct vm_area_struct *);
673:	static int mon_bin_open(struct inode *, struct file *);
1202:	static __poll_t mon_bin_poll(struct file *, struct poll_table_struct *);
800:	static ssize_t mon_bin_read(struct file *, char *, size_t, loff_t *);
778:	static int mon_bin_release(struct inode *, struct file *);
620:	static void mon_bin_submit(void *, struct urb *);
1232:	static void mon_bin_vma_close(struct vm_area_struct *);
1245:	static vm_fault_t mon_bin_vma_fault(struct vm_fault *);
1222:	static void mon_bin_vma_open(struct vm_area_struct *);
1292:	static int mon_bin_wait_event(struct file *, struct mon_reader_bin *);
229:	static unsigned int mon_copy_to_buff(const struct mon_reader_bin *, unsigned int, const unsigned char *, unsigned int);

File drivers/usb/mon/mon_main.c:
333:	struct mon_bus *mon_bus_lookup(unsigned int);
36:	void mon_reader_add(struct mon_bus *, struct mon_reader *);
65:	void mon_reader_del(struct mon_bus *, struct mon_reader *);
135:	static void mon_bus_complete(struct mon_bus *, struct urb *, int);
283:	static void mon_bus_init(struct usb_bus *);
209:	static void mon_bus_remove(struct usb_bus *);
81:	static void mon_bus_submit(struct mon_bus *, struct urb *);
108:	static void mon_bus_submit_error(struct mon_bus *, struct urb *, int);
150:	static void mon_complete(struct usb_bus *, struct urb *, int);
384:	static void mon_exit(void);
350:	static int mon_init(void);
225:	static int mon_notify(struct notifier_block *, unsigned long, void *);
96:	static void mon_submit(struct usb_bus *, struct urb *);
123:	static void mon_submit_error(struct usb_bus *, struct urb *, int);

File drivers/usb/mon/mon_stat.c:
27:	static int mon_stat_open(struct inode *, struct file *);
46:	static ssize_t mon_stat_read(struct file *, char *, size_t, loff_t *);
54:	static int mon_stat_release(struct inode *, struct file *);

File drivers/usb/mon/mon_text.c:
701:	int mon_text_add(struct mon_bus *, const struct usb_bus *);
745:	void mon_text_del(struct mon_bus *);
770:	void mon_text_exit(void);
764:	int mon_text_init(void);
265:	static void mon_text_complete(void *, struct urb *, int);
381:	static ssize_t mon_text_copy_to_user(struct mon_reader_text *, char * const, const size_t);
755:	static void mon_text_ctor(void *);
271:	static void mon_text_error(void *, struct urb *, int);
193:	static void mon_text_event(struct mon_reader_text *, struct urb *, char, int);
324:	static int mon_text_open(struct inode *, struct file *);
610:	static void mon_text_read_data(struct mon_text_ptr *, const struct mon_event_text *, struct mon_reader_text *);
547:	static void mon_text_read_statset(struct mon_text_ptr *, const struct mon_event_text *, struct mon_reader_text *);
394:	static ssize_t mon_text_read_t(struct file *, char *, size_t, loff_t *);
433:	static ssize_t mon_text_read_u(struct file *, char *, size_t, loff_t *);
480:	static struct mon_event_text *mon_text_read_wait(struct mon_reader_text *, struct file *);
642:	static int mon_text_release(struct inode *, struct file *);
259:	static void mon_text_submit(void *, struct urb *);

File drivers/usb/roles/class.c:
146:	struct usb_role_switch *fwnode_usb_role_switch_get(struct fwnode_handle *);
184:	struct usb_role_switch *usb_role_switch_find_by_fwnode(const struct fwnode_handle *);
123:	struct usb_role_switch *usb_role_switch_get(struct device *);
376:	void *usb_role_switch_get_drvdata(struct usb_role_switch *);
70:	enum usb_role usb_role_switch_get_role(struct usb_role_switch *);
167:	void usb_role_switch_put(struct usb_role_switch *);
306:	struct usb_role_switch *usb_role_switch_register(struct device *, const struct usb_role_switch_desc *);
366:	void usb_role_switch_set_drvdata(struct usb_role_switch *, void *);
42:	int usb_role_switch_set_role(struct usb_role_switch *, enum usb_role);
354:	void usb_role_switch_unregister(struct usb_role_switch *);
218:	static ssize_t role_show(struct device *, struct device_attribute *, char *);
226:	static ssize_t role_store(struct device *, struct device_attribute *, const char *, size_t);
104:	static struct usb_role_switch *usb_role_switch_is_parent(struct fwnode_handle *);
200:	static umode_t usb_role_switch_is_visible(struct kobject *, struct attribute *, int);
90:	static void *usb_role_switch_match(struct fwnode_handle *, const char *, void *);
277:	static void usb_role_switch_release(struct device *);
266:	static int usb_role_switch_uevent(struct device *, struct kobj_uevent_env *);
389:	static void usb_roles_exit(void);
382:	static int usb_roles_init(void);

File drivers/usb/roles/intel-xhci-usb-role-switch.c:
225:	static void intel_xhci_usb_driver_exit(void);
225:	static int intel_xhci_usb_driver_init(void);
131:	static enum usb_role intel_xhci_usb_get_role(struct usb_role_switch *);
151:	static int intel_xhci_usb_probe(struct platform_device *);
198:	static int intel_xhci_usb_remove(struct platform_device *);
55:	static int intel_xhci_usb_set_role(struct usb_role_switch *, enum usb_role);

File drivers/video/backlight/backlight.c:
497:	struct backlight_device *backlight_device_get_by_name(const char *);
468:	struct backlight_device *backlight_device_get_by_type(enum backlight_type);
393:	struct backlight_device *backlight_device_register(const char *, struct device *, void *, const struct backlight_ops *, const struct backlight_properties *);
230:	int backlight_device_set_brightness(struct backlight_device *, unsigned long);
508:	void backlight_device_unregister(struct backlight_device *);
381:	void backlight_force_update(struct backlight_device *, enum backlight_update_reason);
562:	int backlight_register_notifier(struct notifier_block *);
579:	int backlight_unregister_notifier(struct notifier_block *);
602:	struct backlight_device *devm_backlight_device_register(struct device *, const char *, struct device *, void *, const struct backlight_ops *, const struct backlight_properties *);
636:	void devm_backlight_device_unregister(struct device *, struct backlight_device *);
720:	struct backlight_device *devm_of_find_backlight(struct device *);
288:	static ssize_t actual_brightness_show(struct device *, struct device_attribute *, char *);
737:	static void backlight_class_exit(void);
742:	static int backlight_class_init(void);
160:	static void backlight_generate_event(struct backlight_device *, enum backlight_update_reason);
334:	static int backlight_resume(struct device *);
320:	static int backlight_suspend(struct device *);
352:	static void bl_device_release(struct device *);
181:	static ssize_t bl_power_show(struct device *, struct device_attribute *, char *);
189:	static ssize_t bl_power_store(struct device *, struct device_attribute *, const char *, size_t);
222:	static ssize_t brightness_show(struct device *, struct device_attribute *, char *);
253:	static ssize_t brightness_store(struct device *, struct device_attribute *, const char *, size_t);
543:	static int devm_backlight_device_match(struct device *, void *, void *);
536:	static void devm_backlight_device_release(struct device *, void *);
96:	static int fb_notifier_callback(struct notifier_block *, unsigned long, void *);
279:	static ssize_t max_brightness_show(struct device *, struct device_attribute *, char *);
305:	static ssize_t scale_show(struct device *, struct device_attribute *, char *);
270:	static ssize_t type_show(struct device *, struct device_attribute *, char *);

File drivers/video/console/dummycon.c:
89:	static int dummycon_blank(struct vc_data *, int, int);
111:	static void dummycon_clear(struct vc_data *, int, int, int, int);
113:	static void dummycon_cursor(struct vc_data *, int);
110:	static void dummycon_deinit(struct vc_data *);
139:	static int dummycon_font_copy(struct vc_data *, int);
133:	static int dummycon_font_default(struct vc_data *, struct console_font *, char *);
127:	static int dummycon_font_set(struct vc_data *, struct console_font *, unsigned int);
100:	static void dummycon_init(struct vc_data *, int);
86:	static void dummycon_putc(struct vc_data *, int, int, int);
87:	static void dummycon_putcs(struct vc_data *, const unsigned short *, int, int, int);
115:	static bool dummycon_scroll(struct vc_data *, unsigned int, unsigned int, enum con_scroll, unsigned int);
95:	static const char *dummycon_startup(void);
122:	static int dummycon_switch(struct vc_data *);

File drivers/video/console/vgacon.c:
106:	bool vgacon_text_force(void);
126:	static int no_scroll(char *);
112:	static int text_mode(char *);
801:	static void vga_pal_blank(struct vgastate *);
663:	static void vga_set_palette(struct vc_data *, const unsigned char *);
700:	static void vga_vesa_blank(int, struct vgastate *);
770:	static void vga_vesa_unblank(struct vgastate *);
1017:	static int vgacon_adjust_height(struct vc_data *, unsigned int);
814:	static int vgacon_blank(struct vc_data *, int, int);
424:	static u8 vgacon_build_attr(struct vc_data *, u8, enum vc_intensity, bool, bool, bool, bool);
1220:	static void vgacon_clear(struct vc_data *, int, int, int, int);
504:	static void vgacon_cursor(struct vc_data *, int);
410:	static void vgacon_deinit(struct vc_data *);
870:	static int vgacon_do_font_op(char *, int, bool, struct vgastate *);
569:	static int vgacon_doresize(struct vc_data *, unsigned int, unsigned int);
1096:	static int vgacon_font_get(struct vc_data *, struct console_font *);
1074:	static int vgacon_font_set(struct vc_data *, struct console_font *, unsigned int);
368:	static void vgacon_init(struct vc_data *, int);
458:	static void vgacon_invert_region(struct vc_data *, u16 *, int);
1222:	static void vgacon_putc(struct vc_data *, int, int, int);
1223:	static void vgacon_putcs(struct vc_data *, const unsigned short *, int, int, int);
1109:	static int vgacon_resize(struct vc_data *, unsigned int, unsigned int, unsigned int);
1146:	static void vgacon_save_screen(struct vc_data *);
1168:	static bool vgacon_scroll(struct vc_data *, enum con_scroll, unsigned int, unsigned int, unsigned int);
174:	static void vgacon_scrolldelta(struct vc_data *, int);
473:	static void vgacon_set_cursor_size(int, int, int);
1135:	static int vgacon_set_origin(struct vc_data *);
676:	static void vgacon_set_palette(struct vc_data *, const unsigned char *);
181:	static const char *vgacon_startup(void);
631:	static int vgacon_switch(struct vc_data *);

File drivers/video/fbdev/core/bitblit.c:
394:	void fbcon_set_bitops(struct fbcon_ops *);
46:	static void bit_bmove(struct vc_data *, struct fb_info *, int, int, int, int, int, int);
61:	static void bit_clear(struct vc_data *, struct fb_info *, int, int, int, int);
205:	static void bit_clear_margins(struct vc_data *, struct fb_info *, int, int);
236:	static void bit_cursor(struct vc_data *, struct fb_info *, int, int, int);
143:	static void bit_putcs(struct vc_data *, struct fb_info *, const unsigned short *, int, int, int, int, int);
382:	static int bit_update_start(struct fb_info *);
25:	static void update_attr(u8 *, u8 *, int, struct vc_data *);

File drivers/video/fbdev/core/cfbcopyarea.c:
381:	void cfb_copyarea(struct fb_info *, const struct fb_copyarea *);
46:	static void bitcpy(unsigned long *, unsigned int, const unsigned long *, unsigned int, unsigned int, struct fb_info *, u32, int);
212:	static void bitcpy_rev(unsigned long *, unsigned int, const unsigned long *, unsigned int, unsigned int, struct fb_info *, u32, int);

File drivers/video/fbdev/core/cfbfillrect.c:
278:	void cfb_fillrect(struct fb_info *, const struct fb_fillrect *);
35:	static void bitfill_aligned(struct fb_info *, unsigned long *, int, unsigned long, unsigned int, int, u32);
146:	static void bitfill_aligned_rev(unsigned long *, int, unsigned long, unsigned int, int, u32, struct fb_info *);
92:	static void bitfill_unaligned(unsigned long *, int, unsigned long, int, int, unsigned int, int, struct fb_info *);
217:	static void bitfill_unaligned_rev(unsigned long *, int, unsigned long, int, int, unsigned int, int, struct fb_info *);

File drivers/video/fbdev/core/cfbimgblt.c:
265:	void cfb_imageblit(struct fb_info *, const struct fb_image *);

File drivers/video/fbdev/core/fb_cmdline.c:
35:	int fb_get_options(const char *, char **);
79:	static int video_setup(char *);

File drivers/video/fbdev/core/fb_defio.c:
223:	void fb_deferred_io_cleanup(struct fb_info *);
68:	int fb_deferred_io_fsync(struct file *, loff_t, loff_t, int);
202:	void fb_deferred_io_init(struct fb_info *);
165:	int fb_deferred_io_mmap(struct fb_info *, struct vm_area_struct *);
215:	void fb_deferred_io_open(struct fb_info *, struct inode *, struct file *);
40:	static vm_fault_t fb_deferred_io_fault(struct vm_fault *);
93:	static vm_fault_t fb_deferred_io_mkwrite(struct vm_fault *);
154:	static int fb_deferred_io_set_page_dirty(struct page *);
176:	static void fb_deferred_io_work(struct work_struct *);

File drivers/video/fbdev/core/fb_notify.c:
43:	int fb_notifier_call_chain(unsigned long, void *);
23:	int fb_register_client(struct notifier_block *);
33:	int fb_unregister_client(struct notifier_block *);

File drivers/video/fbdev/core/fbcmap.c:
133:	int fb_alloc_cmap(struct fb_cmap *, int, int);
92:	int fb_alloc_cmap_gfp(struct fb_cmap *, int, int, gfp_t);
191:	int fb_cmap_to_user(const struct fb_cmap *, struct fb_cmap_user *);
166:	int fb_copy_cmap(const struct fb_cmap *, struct fb_cmap *);
147:	void fb_dealloc_cmap(struct fb_cmap *);
307:	const struct fb_cmap *fb_default_cmap(int);
326:	void fb_invert_cmaps(void);
231:	int fb_set_cmap(struct fb_cmap *, struct fb_info *);
267:	int fb_set_user_cmap(struct fb_cmap_user *, struct fb_info *);

File drivers/video/fbdev/core/fbcon.c:
3362:	void fb_console_init(void);
2949:	void fbcon_fb_blanked(struct fb_info *, int);
2915:	int fbcon_fb_registered(struct fb_info *);
2770:	void fbcon_fb_unbind(struct fb_info *);
2821:	void fbcon_fb_unregistered(struct fb_info *);
3053:	int fbcon_get_con2fb_map_ioctl(void *);
2992:	void fbcon_get_requirement(struct fb_info *, struct fb_blit_caps *);
2728:	int fbcon_mode_deleted(struct fb_info *, struct fb_videomode *);
2971:	void fbcon_new_modelist(struct fb_info *);
2859:	void fbcon_remap_all(struct fb_info *);
2633:	void fbcon_resumed(struct fb_info *);
3028:	int fbcon_set_con2fb_map_ioctl(void *);
2620:	void fbcon_suspended(struct fb_info *);
2719:	void fbcon_update_vcs(struct fb_info *, bool);
715:	static int con2fb_acquire_newinfo(struct vc_data *, struct fb_info *, int, int);
751:	static int con2fb_release_oldinfo(struct fb_info *, struct fb_info *, int, int, int, struct vc_data *);
400:	static void cursor_timer_handler(struct timer_list *);
924:	static void display_to_var(struct fb_var_screeninfo *, struct fbcon_display *);
547:	static int do_fbcon_takeover(int);
437:	static int fb_console_setup(char *);
366:	static void fb_flashcursor(struct work_struct *);
409:	static void fbcon_add_cursor_timer(struct fb_info *);
2192:	static int fbcon_blank(struct vc_data *, int, int);
1897:	static void fbcon_bmove(struct vc_data *, int, int, int, int, int, int);
1920:	static void fbcon_bmove_rec(struct vc_data *, struct fbcon_display *, int, int, int, int, u_int, int, int);
1261:	static void fbcon_clear(struct vc_data *, int, int, int, int);
1320:	static void fbcon_clear_margins(struct vc_data *, int);
2428:	static int fbcon_copy_font(struct vc_data *, int);
1329:	static void fbcon_cursor(struct vc_data *, int);
2234:	static int fbcon_debug_enter(struct vc_data *);
2247:	static int fbcon_debug_leave(struct vc_data *);
1189:	static void fbcon_deinit(struct vc_data *);
2382:	static int fbcon_do_set_font(struct vc_data *, int, int, const u8 *, int);
3311:	static void fbcon_exit(void);
2258:	static int fbcon_get_font(struct vc_data *, struct console_font *);
2578:	static unsigned long fbcon_getxy(struct vc_data *, unsigned long, int *, int *);
1028:	static void fbcon_init(struct vc_data *, int);
2604:	static void fbcon_invert_region(struct vc_data *, u16 *, int);
2645:	static void fbcon_modechanged(struct fb_info *);
581:	static void fbcon_prepare_logo(struct vc_data *, struct fb_info *, int, int, int, int);
1312:	static void fbcon_putc(struct vc_data *, int, int, int);
1299:	static void fbcon_putcs(struct vc_data *, const unsigned short *, int, int, int);
1642:	static void fbcon_redraw(struct vc_data *, int, int, int, struct fbcon_display *);
1592:	static void fbcon_redraw_blit(struct vc_data *, struct fb_info *, int, int, int, struct fbcon_display *);
1558:	static void fbcon_redraw_move(struct vc_data *, int, int, int, struct fbcon_display *);
1982:	static int fbcon_resize(struct vc_data *, unsigned int, unsigned int, unsigned int);
2573:	static u16 *fbcon_screen_pos(const struct vc_data *, int);
1697:	static bool fbcon_scroll(struct vc_data *, unsigned int, unsigned int, enum con_scroll, unsigned int);
2885:	static void fbcon_select_primary(struct fb_info *);
2683:	static void fbcon_set_all_vcs(struct fb_info *);
2514:	static int fbcon_set_def_font(struct vc_data *, struct console_font *, char *);
1358:	static void fbcon_set_disp(struct fb_info *, struct fb_var_screeninfo *, int);
2450:	static int fbcon_set_font(struct vc_data *, struct console_font *, unsigned int);
2538:	static void fbcon_set_palette(struct vc_data *, const unsigned char *);
943:	static const char *fbcon_startup(void);
2046:	static int fbcon_switch(struct vc_data *);
299:	static int get_color(struct vc_data *, struct fb_info *, u16, int);
842:	static int set_con2fb_map(int, int, int);
2322:	static void set_vc_hi_font(struct vc_data *, bool);
3161:	static ssize_t show_cursor_blink(struct device *, struct device_attribute *, char *);
3142:	static ssize_t show_rotate(struct device *, struct device_attribute *, char *);
3186:	static ssize_t store_cursor_blink(struct device *, struct device_attribute *, const char *, size_t);
3098:	static ssize_t store_rotate(struct device *, struct device_attribute *, const char *, size_t);
3120:	static ssize_t store_rotate_all(struct device *, struct device_attribute *, const char *, size_t);
1962:	static void updatescrollmode(struct fbcon_display *, struct fb_info *, struct vc_data *);
900:	static int var_to_display(struct fbcon_display *, struct fb_var_screeninfo *, struct fb_info *);

File drivers/video/fbdev/core/fbcon_ccw.c:
403:	void fbcon_rotate_ccw(struct fbcon_ops *);
63:	static void ccw_bmove(struct vc_data *, struct fb_info *, int, int, int, int, int, int);
80:	static void ccw_clear(struct vc_data *, struct fb_info *, int, int, int, int);
191:	static void ccw_clear_margins(struct vc_data *, struct fb_info *, int, int);
221:	static void ccw_cursor(struct vc_data *, struct fb_info *, int, int, int);
129:	static void ccw_putcs(struct vc_data *, struct fb_info *, const unsigned short *, int, int, int, int, int);
25:	static void ccw_update_attr(u8 *, u8 *, int, struct vc_data *);
386:	static int ccw_update_start(struct fb_info *);

File drivers/video/fbdev/core/fbcon_cw.c:
386:	void fbcon_rotate_cw(struct fbcon_ops *);
48:	static void cw_bmove(struct vc_data *, struct fb_info *, int, int, int, int, int, int);
65:	static void cw_clear(struct vc_data *, struct fb_info *, int, int, int, int);
174:	static void cw_clear_margins(struct vc_data *, struct fb_info *, int, int);
204:	static void cw_cursor(struct vc_data *, struct fb_info *, int, int, int);
114:	static void cw_putcs(struct vc_data *, struct fb_info *, const unsigned short *, int, int, int, int, int);
25:	static void cw_update_attr(u8 *, u8 *, int, struct vc_data *);
369:	static int cw_update_start(struct fb_info *);

File drivers/video/fbdev/core/fbcon_rotate.c:
97:	void fbcon_set_rotate(struct fbcon_ops *);
22:	static int fbcon_rotate_font(struct fb_info *, struct vc_data *);

File drivers/video/fbdev/core/fbcon_ud.c:
430:	void fbcon_rotate_ud(struct fbcon_ops *);
48:	static void ud_bmove(struct vc_data *, struct fb_info *, int, int, int, int, int, int);
66:	static void ud_clear(struct vc_data *, struct fb_info *, int, int, int, int);
222:	static void ud_clear_margins(struct vc_data *, struct fb_info *, int, int);
251:	static void ud_cursor(struct vc_data *, struct fb_info *, int, int, int);
151:	static void ud_putcs(struct vc_data *, struct fb_info *, const unsigned short *, int, int, int, int, int);
25:	static void ud_update_attr(u8 *, u8 *, int, struct vc_data *);
409:	static int ud_update_start(struct fb_info *);

File drivers/video/fbdev/core/fbcvt.c:
305:	int fb_find_mode_cvt(struct fb_videomode *, int, int);
214:	static void fb_cvt_print_name(struct fb_cvt_data *);

File drivers/video/fbdev/core/fbmem.c:
1067:	int fb_blank(struct fb_info *, int);
154:	char *fb_get_buffer_offset(struct fb_info *, struct fb_pixmap *, u32);
88:	int fb_get_color_depth(struct fb_var_screeninfo *, struct fb_fix_screeninfo *);
1952:	int fb_new_modelist(struct fb_info *);
114:	void fb_pad_aligned_buffer(u8 *, u32, u8 *, u32, u32);
120:	void fb_pad_unaligned_buffer(u8 *, u32, u8 *, u32, u32, u32, u32, u32);
900:	int fb_pan_display(struct fb_info *, struct fb_var_screeninfo *);
615:	int fb_prepare_logo(struct fb_info *, int);
1877:	void fb_set_suspend(struct fb_info *, int);
958:	int fb_set_var(struct fb_info *, struct fb_var_screeninfo *);
688:	int fb_show_logo(struct fb_info *, int);
1831:	int register_framebuffer(struct fb_info *);
1747:	int remove_conflicting_framebuffers(struct apertures_struct *, const char *, bool);
1784:	int remove_conflicting_pci_framebuffers(struct pci_dev *, const char *);
1860:	void unregister_framebuffer(struct fb_info *);
1088:	static long do_fb_ioctl(struct fb_info *, unsigned int, unsigned long);
1254:	static int do_fscreeninfo_to_user(struct fb_fix_screeninfo *, struct fb_fix_screeninfo32 *);
1592:	static int do_register_framebuffer(struct fb_info *);
1563:	static void do_remove_conflicting_framebuffers(struct apertures_struct *, const char *, bool);
1712:	static void do_unregister_framebuffer(struct fb_info *);
937:	static int fb_check_caps(struct fb_info *, struct fb_var_screeninfo *, u32);
1300:	static long fb_compat_ioctl(struct file *, unsigned int, unsigned long);
419:	static void fb_do_show_logo(struct fb_info *, struct fb_image *, int, unsigned int);
1219:	static int fb_getput_cmap(struct fb_info *, unsigned int, unsigned long);
1183:	static long fb_ioctl(struct file *, unsigned int, unsigned long);
1341:	static int fb_mmap(struct file *, struct vm_area_struct *);
1404:	static int fb_open(struct inode *, struct file *);
763:	static ssize_t fb_read(struct file *, char *, size_t, loff_t *);
1445:	static int fb_release(struct inode *, struct file *);
715:	static void *fb_seq_next(struct seq_file *, void *, loff_t *);
726:	static int fb_seq_show(struct seq_file *, void *);
709:	static void *fb_seq_start(struct seq_file *, loff_t *);
721:	static void fb_seq_stop(struct seq_file *, void *);
194:	static void fb_set_logocmap(struct fb_info *, const struct linux_logo *);
458:	static int fb_show_logo_line(struct fb_info *, int, const struct linux_logo *, unsigned int, int);
828:	static ssize_t fb_write(struct file *, const char *, size_t, loff_t *);
1901:	static int fbmem_init(void);
76:	static void put_fb_info(struct fb_info *);

File drivers/video/fbdev/core/fbmon.c:
1411:	void fb_destroy_modedb(struct fb_videomode *);
1408:	void fb_edid_to_monspecs(unsigned char *, struct fb_monspecs *);
1509:	const unsigned char *fb_firmware_edid(struct device *);
1414:	int fb_get_mode(int, u32, struct fb_var_screeninfo *, struct fb_info *);
1404:	int fb_parse_edid(unsigned char *, struct fb_var_screeninfo *);
1433:	int fb_validate_mode(const struct fb_var_screeninfo *, struct fb_info *);

File drivers/video/fbdev/core/fbsysfs.c:
534:	void fb_cleanup_device(struct fb_info *);
510:	int fb_init_device(struct fb_info *);
36:	struct fb_info *framebuffer_alloc(size_t, struct device *);
79:	void framebuffer_release(struct fb_info *);
103:	static int mode_string(char *, unsigned int, const struct fb_videomode *);
318:	static ssize_t show_blank(struct device *, struct device_attribute *, char *);
229:	static ssize_t show_bpp(struct device *, struct device_attribute *, char *);
417:	static ssize_t show_fbstate(struct device *, struct device_attribute *, char *);
156:	static ssize_t show_mode(struct device *, struct device_attribute *, char *);
196:	static ssize_t show_modes(struct device *, struct device_attribute *, char *);
388:	static ssize_t show_name(struct device *, struct device_attribute *, char *);
380:	static ssize_t show_pan(struct device *, struct device_attribute *, char *);
255:	static ssize_t show_rotate(struct device *, struct device_attribute *, char *);
292:	static ssize_t show_stride(struct device *, struct device_attribute *, char *);
284:	static ssize_t show_virtual(struct device *, struct device_attribute *, char *);
299:	static ssize_t store_blank(struct device *, struct device_attribute *, const char *, size_t);
214:	static ssize_t store_bpp(struct device *, struct device_attribute *, const char *, size_t);
325:	static ssize_t store_console(struct device *, struct device_attribute *, const char *, size_t);
396:	static ssize_t store_fbstate(struct device *, struct device_attribute *, const char *, size_t);
125:	static ssize_t store_mode(struct device *, struct device_attribute *, const char *, size_t);
167:	static ssize_t store_modes(struct device *, struct device_attribute *, const char *, size_t);
355:	static ssize_t store_pan(struct device *, struct device_attribute *, const char *, size_t);
236:	static ssize_t store_rotate(struct device *, struct device_attribute *, const char *, size_t);
263:	static ssize_t store_virtual(struct device *, struct device_attribute *, const char *, size_t);

File drivers/video/fbdev/core/modedb.c:
1057:	int fb_add_videomode(const struct fb_videomode *, struct list_head *);
1092:	void fb_delete_videomode(const struct fb_videomode *, struct list_head *);
1113:	void fb_destroy_modelist(struct list_head *);
1143:	const struct fb_videomode *fb_find_best_display(const struct fb_monspecs *, struct list_head *);
954:	const struct fb_videomode *fb_find_best_mode(const struct fb_var_screeninfo *, struct list_head *);
617:	int fb_find_mode(struct fb_var_screeninfo *, struct fb_info *, const char *, const struct fb_videomode *, unsigned int, const struct fb_videomode *, unsigned int);
992:	const struct fb_videomode *fb_find_nearest_mode(const struct fb_videomode *, struct list_head *);
1032:	const struct fb_videomode *fb_match_mode(const struct fb_var_screeninfo *, struct list_head *);
921:	int fb_mode_is_equal(const struct fb_videomode *, const struct fb_videomode *);
846:	void fb_var_to_videomode(struct fb_videomode *, const struct fb_var_screeninfo *);
1130:	void fb_videomode_to_modelist(const struct fb_videomode *, int, struct list_head *);
893:	void fb_videomode_to_var(struct fb_var_screeninfo *, const struct fb_videomode *);
542:	static int fb_try_mode(struct fb_var_screeninfo *, struct fb_info *, const struct fb_videomode *, unsigned int);

File drivers/video/fbdev/core/softcursor.c:
22:	int soft_cursor(struct fb_info *, struct fb_cursor *);

File drivers/video/fbdev/core/tileblit.c:
132:	void fbcon_set_tileops(struct vc_data *, struct fb_info *);
20:	static void tile_bmove(struct vc_data *, struct fb_info *, int, int, int, int, int, int);
35:	static void tile_clear(struct vc_data *, struct fb_info *, int, int, int, int);
77:	static void tile_clear_margins(struct vc_data *, struct fb_info *, int, int);
83:	static void tile_cursor(struct vc_data *, struct fb_info *, int, int, int);
55:	static void tile_putcs(struct vc_data *, struct fb_info *, const unsigned short *, int, int, int, int, int);
120:	static int tile_update_start(struct fb_info *);

File drivers/video/fbdev/efifb.c:
318:	static ssize_t base_show(struct device *, struct device_attribute *, char *);
322:	static ssize_t depth_show(struct device *, struct device_attribute *, char *);
244:	static void efifb_destroy(struct fb_info *);
616:	static int efifb_driver_init(void);
641:	static void efifb_fixup_resources(struct pci_dev *);
340:	static int efifb_probe(struct platform_device *);
597:	static int efifb_remove(struct platform_device *);
67:	static int efifb_setcolreg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, struct fb_info *);
267:	static int efifb_setup(char *);
320:	static ssize_t height_show(struct device *, struct device_attribute *, char *);
319:	static ssize_t linelength_show(struct device *, struct device_attribute *, char *);
321:	static ssize_t width_show(struct device *, struct device_attribute *, char *);

File drivers/video/fbdev/vesafb.c:
182:	static void vesafb_destroy(struct fb_info *);
503:	static void vesafb_driver_exit(void);
503:	static int vesafb_driver_init(void);
67:	static int vesafb_pan_display(struct fb_var_screeninfo *, struct fb_info *);
237:	static int vesafb_probe(struct platform_device *);
483:	static int vesafb_remove(struct platform_device *);
131:	static int vesafb_setcolreg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, struct fb_info *);
203:	static int vesafb_setup(char *);

File drivers/video/hdmi.c:
380:	int hdmi_audio_infoframe_check(struct hdmi_audio_infoframe *);
349:	int hdmi_audio_infoframe_init(struct hdmi_audio_infoframe *);
465:	ssize_t hdmi_audio_infoframe_pack(struct hdmi_audio_infoframe *, void *, size_t);
400:	ssize_t hdmi_audio_infoframe_pack_only(const struct hdmi_audio_infoframe *, void *, size_t);
89:	int hdmi_avi_infoframe_check(struct hdmi_avi_infoframe *);
57:	void hdmi_avi_infoframe_init(struct hdmi_avi_infoframe *);
200:	ssize_t hdmi_avi_infoframe_pack(struct hdmi_avi_infoframe *, void *, size_t);
109:	ssize_t hdmi_avi_infoframe_pack_only(const struct hdmi_avi_infoframe *, void *, size_t);
687:	int hdmi_drm_infoframe_check(struct hdmi_drm_infoframe *);
656:	int hdmi_drm_infoframe_init(struct hdmi_drm_infoframe *);
780:	ssize_t hdmi_drm_infoframe_pack(struct hdmi_drm_infoframe *, void *, size_t);
707:	ssize_t hdmi_drm_infoframe_pack_only(const struct hdmi_drm_infoframe *, void *, size_t);
1784:	int hdmi_drm_infoframe_unpack_only(struct hdmi_drm_infoframe *, const void *, size_t);
859:	int hdmi_infoframe_check(union hdmi_infoframe *);
1511:	void hdmi_infoframe_log(const char *, struct device *, const union hdmi_infoframe *);
944:	ssize_t hdmi_infoframe_pack(union hdmi_infoframe *, void *, size_t);
892:	ssize_t hdmi_infoframe_pack_only(const union hdmi_infoframe *, void *, size_t);
1874:	int hdmi_infoframe_unpack(union hdmi_infoframe *, const void *, size_t);
256:	int hdmi_spd_infoframe_check(struct hdmi_spd_infoframe *);
221:	int hdmi_spd_infoframe_init(struct hdmi_spd_infoframe *, const char *, const char *);
330:	ssize_t hdmi_spd_infoframe_pack(struct hdmi_spd_infoframe *, void *, size_t);
276:	ssize_t hdmi_spd_infoframe_pack_only(const struct hdmi_spd_infoframe *, void *, size_t);
541:	int hdmi_vendor_infoframe_check(struct hdmi_vendor_infoframe *);
484:	int hdmi_vendor_infoframe_init(struct hdmi_vendor_infoframe *);
626:	ssize_t hdmi_vendor_infoframe_pack(struct hdmi_vendor_infoframe *, void *, size_t);
563:	ssize_t hdmi_vendor_infoframe_pack_only(const struct hdmi_vendor_infoframe *, void *, size_t);
1391:	static void hdmi_audio_infoframe_log(const char *, struct device *, const struct hdmi_audio_infoframe *);
1190:	static void hdmi_avi_infoframe_log(const char *, struct device *, const struct hdmi_avi_infoframe *);
1548:	static int hdmi_avi_infoframe_unpack(struct hdmi_avi_infoframe *, const void *, size_t);
1418:	static void hdmi_drm_infoframe_log(const char *, struct device *, const struct hdmi_drm_infoframe *);
994:	static void hdmi_infoframe_log_header(const char *, struct device *, const struct hdmi_any_infoframe *, const struct hdmi_any_infoframe *);
1261:	static void hdmi_spd_infoframe_log(const char *, struct device *, const struct hdmi_spd_infoframe *);
1476:	static void hdmi_vendor_any_infoframe_log(const char *, struct device *, const union hdmi_vendor_any_infoframe *);
515:	static int hdmi_vendor_infoframe_check_only(const struct hdmi_vendor_infoframe *);

File drivers/video/logo/logo.c:
44:	const struct linux_logo *fb_find_logo(int);
32:	static int fb_logo_late_init(void);

File drivers/virtio/virtio.c:
387:	bool is_virtio_device(struct device *);
344:	int register_virtio_device(struct virtio_device *);
320:	int register_virtio_driver(struct virtio_driver *);
393:	void unregister_virtio_device(struct virtio_device *);
329:	void unregister_virtio_driver(struct virtio_driver *);
163:	void virtio_add_status(struct virtio_device *, unsigned int);
104:	void virtio_check_driver_offered_feature(const struct virtio_device *, unsigned int);
134:	void virtio_config_changed(struct virtio_device *);
144:	void virtio_config_disable(struct virtio_device *);
152:	void virtio_config_enable(struct virtio_device *);
403:	int virtio_device_freeze(struct virtio_device *);
418:	int virtio_device_restore(struct virtio_device *);
170:	int virtio_finalize_features(struct virtio_device *);
12:	static ssize_t device_show(struct device *, struct device_attribute *, char *);
45:	static ssize_t features_show(struct device *, struct device_attribute *, char *);
36:	static ssize_t modalias_show(struct device *, struct device_attribute *, char *);
28:	static ssize_t status_show(struct device *, struct device_attribute *, char *);
20:	static ssize_t vendor_show(struct device *, struct device_attribute *, char *);
83:	static int virtio_dev_match(struct device *, struct device_driver *);
208:	static int virtio_dev_probe(struct device *);
294:	static int virtio_dev_remove(struct device *);
472:	static void virtio_exit(void);
465:	static int virtio_init(void);
96:	static int virtio_uevent(struct device *, struct kobj_uevent_env *);

File drivers/virtio/virtio_pci_common.c:
411:	const char *vp_bus_name(struct virtio_device *);
226:	void vp_del_vqs(struct virtio_device *);
392:	int vp_find_vqs(struct virtio_device *, unsigned int, struct virtqueue **, vq_callback_t **, const char * const *, const bool *, struct irq_affinity *);
447:	const struct cpumask *vp_get_vq_affinity(struct virtio_device *, int);
41:	bool vp_notify(struct virtqueue *);
423:	int vp_set_vq_affinity(struct virtqueue *, const struct cpumask *);
28:	void vp_synchronize_vectors(struct virtio_device *);
637:	static void virtio_pci_driver_exit(void);
637:	static int virtio_pci_driver_init(void);
460:	static int virtio_pci_freeze(struct device *);
512:	static int virtio_pci_probe(struct pci_dev *, const struct pci_device_id *);
501:	static void virtio_pci_release_dev(struct device *);
574:	static void virtio_pci_remove(struct pci_dev *);
473:	static int virtio_pci_restore(struct device *);
599:	static int virtio_pci_sriov_configure(struct pci_dev *, int);
50:	static irqreturn_t vp_config_changed(int, void *);
353:	static int vp_find_vqs_intx(struct virtio_device *, unsigned int, struct virtqueue **, vq_callback_t **, const char * const *, const bool *);
279:	static int vp_find_vqs_msix(struct virtio_device *, unsigned int, struct virtqueue **, vq_callback_t **, const char * const *, bool, const bool *, struct irq_affinity *);
82:	static irqreturn_t vp_interrupt(int, void *);
102:	static int vp_request_msix_vectors(struct virtio_device *, int, bool, struct irq_affinity *);
174:	static struct virtqueue *vp_setup_vq(struct virtio_device *, unsigned int, void (*)(struct virtqueue *), const char *, bool, u16);
59:	static irqreturn_t vp_vring_interrupt(int, void *);

File drivers/virtio/virtio_pci_legacy.c:
212:	int virtio_pci_legacy_probe(struct virtio_pci_device *);
273:	void virtio_pci_legacy_remove(struct virtio_pci_device *);
176:	static void del_vq(struct virtio_pci_vq_info *);
113:	static struct virtqueue *setup_vq(struct virtio_pci_device *, struct virtio_pci_vq_info *, unsigned int, void (*)(struct virtqueue *), const char *, bool, u16);
104:	static u16 vp_config_vector(struct virtio_pci_device *, u16);
30:	static int vp_finalize_features(struct virtio_device *);
47:	static void vp_get(struct virtio_device *, unsigned int, void *, unsigned int);
20:	static u64 vp_get_features(struct virtio_device *);
78:	static u8 vp_get_status(struct virtio_device *);
92:	static void vp_reset(struct virtio_device *);
63:	static void vp_set(struct virtio_device *, unsigned int, const void *, unsigned int);
84:	static void vp_set_status(struct virtio_device *, u8);

File drivers/virtio/virtio_pci_modern.c:
678:	int virtio_pci_modern_probe(struct virtio_pci_device *);
820:	void virtio_pci_modern_remove(struct virtio_pci_device *);
427:	static void del_vq(struct virtio_pci_vq_info *);
66:	static void *map_capability(struct pci_dev *, int, size_t, u32, u32, u32, size_t *);
307:	static struct virtqueue *setup_vq(struct virtio_pci_device *, struct virtio_pci_vq_info *, unsigned int, void (*)(struct virtqueue *), const char *, bool, u16);
447:	static int virtio_pci_find_shm_cap(struct pci_dev *, u8, u8 *, u64 *, u64 *);
298:	static u16 vp_config_vector(struct virtio_pci_device *, u16);
165:	static int vp_finalize_features(struct virtio_device *);
261:	static u32 vp_generation(struct virtio_device *);
191:	static void vp_get(struct virtio_device *, unsigned int, void *, unsigned int);
141:	static u64 vp_get_features(struct virtio_device *);
506:	static bool vp_get_shm_region(struct virtio_device *, struct virtio_shm_region *, u8);
268:	static u8 vp_get_status(struct virtio_device *);
403:	static int vp_modern_find_vqs(struct virtio_device *, unsigned int, struct virtqueue **, vq_callback_t **, const char * const *, const bool *, struct irq_affinity *);
282:	static void vp_reset(struct virtio_device *);
227:	static void vp_set(struct virtio_device *, unsigned int, const void *, unsigned int);
274:	static void vp_set_status(struct virtio_device *, u8);

File drivers/virtio/virtio_ring.c:
2066:	struct virtqueue *__vring_new_virtqueue(unsigned int, struct vring, struct virtio_device *, bool, bool, bool (*)(struct virtqueue *), void (*)(struct virtqueue *), const char *);
2287:	void virtio_break_device(struct virtio_device *);
261:	size_t virtio_max_dma_size(struct virtio_device *);
1790:	int virtqueue_add_inbuf(struct virtqueue *, struct scatterlist *, unsigned int, void *, gfp_t);
1813:	int virtqueue_add_inbuf_ctx(struct virtqueue *, struct scatterlist *, unsigned int, void *, void *, gfp_t);
1768:	int virtqueue_add_outbuf(struct virtqueue *, struct scatterlist *, unsigned int, void *, gfp_t);
1734:	int virtqueue_add_sgs(struct virtqueue *, struct scatterlist **, unsigned int, unsigned int, void *, gfp_t);
2031:	void *virtqueue_detach_unused_buf(struct virtqueue *);
1928:	void virtqueue_disable_cb(struct virtqueue *);
1993:	bool virtqueue_enable_cb(struct virtqueue *);
2014:	bool virtqueue_enable_cb_delayed(struct virtqueue *);
1951:	unsigned int virtqueue_enable_cb_prepare(struct virtqueue *);
2315:	dma_addr_t virtqueue_get_avail_addr(struct virtqueue *);
1914:	void *virtqueue_get_buf(struct virtqueue *, unsigned int *);
1904:	void *virtqueue_get_buf_ctx(struct virtqueue *, unsigned int *, void **);
2302:	dma_addr_t virtqueue_get_desc_addr(struct virtqueue *);
2329:	dma_addr_t virtqueue_get_used_addr(struct virtqueue *);
2344:	const struct vring *virtqueue_get_vring(struct virtqueue *);
2266:	unsigned int virtqueue_get_vring_size(struct virtqueue *);
2275:	bool virtqueue_is_broken(struct virtqueue *);
1879:	bool virtqueue_kick(struct virtqueue *);
1834:	bool virtqueue_kick_prepare(struct virtqueue *);
1851:	bool virtqueue_notify(struct virtqueue *);
1969:	bool virtqueue_poll(struct virtqueue *, unsigned int);
2146:	struct virtqueue *vring_create_virtqueue(unsigned int, unsigned int, unsigned int, struct virtio_device *, bool, bool, bool, bool (*)(struct virtqueue *), void (*)(struct virtqueue *), const char *);
2193:	void vring_del_virtqueue(struct virtqueue *);
2045:	irqreturn_t vring_interrupt(int, void *);
2171:	struct virtqueue *vring_new_virtqueue(unsigned int, unsigned int, unsigned int, struct virtio_device *, bool, bool, void *, bool (*)(struct virtqueue *), void (*)(struct virtqueue *), const char *);
2233:	void vring_transport_features(struct virtio_device *);
962:	static struct vring_packed_desc *alloc_indirect_packed(unsigned int, gfp_t);
392:	static struct vring_desc *alloc_indirect_split(unsigned int, gfp_t, struct virtqueue *);
1289:	static void detach_buf_packed(struct vring_virtqueue *, unsigned int, void **);
620:	static void detach_buf_split(struct vring_virtqueue *, unsigned int, void **);
979:	static int virtqueue_add_indirect_packed(struct vring_virtqueue *, struct scatterlist **, unsigned int, unsigned int, unsigned int, void *, gfp_t);
1354:	static void *virtqueue_get_buf_ctx_packed(struct virtqueue *, unsigned int *, void **);
678:	static void *virtqueue_get_buf_ctx_split(struct virtqueue *, unsigned int *, void **);
272:	static void *vring_alloc_queue(size_t, dma_addr_t *, gfp_t, struct virtio_device *, struct virtio_device *);
1561:	static struct virtqueue *vring_create_virtqueue_packed(unsigned int, unsigned int, struct virtio_device *, bool, bool, bool (*)(struct virtqueue *), void (*)(struct virtqueue *), const char *, bool, unsigned int);
845:	static struct virtqueue *vring_create_virtqueue_split(unsigned int, unsigned int, unsigned int, struct virtio_device *, bool, bool, bool, bool (*)(struct virtqueue *), void (*)(struct virtqueue *), const char *);
305:	static void vring_free_queue(size_t, void *, dma_addr_t, struct virtio_device *, struct virtio_device *);
325:	static dma_addr_t vring_map_one_sg(const struct vring_virtqueue *, struct scatterlist *, enum dma_data_direction);
342:	static dma_addr_t vring_map_single(void *, size_t, enum dma_data_direction, const struct vring_virtqueue *, const struct vring_virtqueue *);
937:	static void vring_unmap_desc_packed(struct vring_packed_desc *, const struct vring_virtqueue *, struct vring_packed_desc *, const struct vring_virtqueue *);
367:	static void vring_unmap_one_split(struct vring_desc *, const struct vring_virtqueue *, struct vring_desc *, const struct vring_virtqueue *);

File drivers/watchdog/watchdog_core.c:
381:	int devm_watchdog_register_device(struct device *, struct watchdog_device *);
114:	int watchdog_init_timeout(struct watchdog_device *, unsigned int, struct device *);
309:	int watchdog_register_device(struct watchdog_device *);
202:	void watchdog_set_restart_priority(struct watchdog_device *, int);
355:	void watchdog_unregister_device(struct watchdog_device *);
208:	static int __watchdog_register_device(struct watchdog_device *);
367:	static void devm_watchdog_unregister_device(struct device *, void *);
432:	static void watchdog_exit(void);
420:	static int watchdog_init(void);
154:	static int watchdog_reboot_notifier(struct notifier_block *, unsigned long, void *);
173:	static int watchdog_restart_notifier(struct notifier_block *, unsigned long, void *);

File drivers/watchdog/watchdog_dev.c:
1218:	void watchdog_dev_exit(void);
1180:	int watchdog_dev_init(void);
1112:	int watchdog_dev_register(struct watchdog_device *);
1135:	void watchdog_dev_unregister(struct watchdog_device *);
1152:	int watchdog_set_last_hw_keepalive(struct watchdog_device *, unsigned int);
164:	static int __watchdog_ping(struct watchdog_device *);
492:	static ssize_t bootstatus_show(struct device *, struct device_attribute *, char *);
537:	static ssize_t identity_show(struct device *, struct device_attribute *, char *);
449:	static ssize_t nowayout_show(struct device *, struct device_attribute *, char *);
457:	static ssize_t nowayout_store(struct device *, struct device_attribute *, const char *, size_t);
558:	static ssize_t pretimeout_available_governors_show(struct device *, struct device_attribute *, char *);
574:	static ssize_t pretimeout_governor_store(struct device *, struct device_attribute *, const char *, size_t);
528:	static ssize_t pretimeout_show(struct device *, struct device_attribute *, char *);
546:	static ssize_t state_show(struct device *, struct device_attribute *, char *);
477:	static ssize_t status_show(struct device *, struct device_attribute *, char *);
501:	static ssize_t timeleft_show(struct device *, struct device_attribute *, char *);
519:	static ssize_t timeout_show(struct device *, struct device_attribute *, char *);
982:	static int watchdog_cdev_register(struct watchdog_device *);
883:	static void watchdog_core_data_release(struct device *);
342:	static unsigned int watchdog_get_status(struct watchdog_device *);
712:	static long watchdog_ioctl(struct file *, unsigned int, unsigned long);
119:	static ktime_t watchdog_next_keepalive(struct watchdog_device *);
825:	static int watchdog_open(struct inode *, struct file *);
205:	static int watchdog_ping(struct watchdog_device *);
231:	static void watchdog_ping_work(struct kthread_work *);
902:	static int watchdog_release(struct inode *, struct file *);
375:	static int watchdog_set_timeout(struct watchdog_device *, unsigned int);
264:	static int watchdog_start(struct watchdog_device *);
305:	static int watchdog_stop(struct watchdog_device *);
243:	static enum hrtimer_restart watchdog_timer_expired(struct hrtimer *);
661:	static ssize_t watchdog_write(struct file *, const char *, size_t, loff_t *);
588:	static umode_t wdt_is_visible(struct kobject *, struct attribute *, int);

File drivers/xen/balloon.c:
616:	int alloc_xenballooned_pages(int, struct page **);
575:	void balloon_set_new_target(unsigned long);
669:	void free_xenballooned_pages(int, struct page **);
164:	static void balloon_append(struct page *);
714:	static int balloon_init(void);
180:	static struct page *balloon_retrieve(bool);
516:	static int balloon_thread(void *);
774:	static int balloon_wait_finish(void);
441:	static enum bp_state decrease_reservation(unsigned long, gfp_t);
402:	static enum bp_state increase_reservation(unsigned long);

File drivers/xen/biomerge.c:
8:	bool xen_biovec_phys_mergeable(const struct bio_vec *, const struct page *);

File drivers/xen/cpu_hotplug.c:
20:	static void disable_hotplug_cpu(int);
72:	static void handle_vcpu_hotplug_event(struct xenbus_watch *, const char *, const char *);
85:	static int setup_cpu_watcher(struct notifier_block *, unsigned long, void *);
103:	static int setup_vcpu_hotplug_event(void);
34:	static int vcpu_online(unsigned int);

File drivers/xen/efi.c:
278:	void xen_efi_runtime_setup(void);
206:	static efi_status_t xen_efi_get_next_high_mono_count(u32 *);
142:	static efi_status_t xen_efi_get_next_variable(unsigned long *, efi_char16_t *, efi_guid_t *);
43:	static efi_status_t xen_efi_get_time(efi_time_t *, efi_time_cap_t *);
119:	static efi_status_t xen_efi_get_variable(efi_char16_t *, efi_guid_t *, u32 *, unsigned long *, void *);
78:	static efi_status_t xen_efi_get_wakeup_time(efi_bool_t *, efi_bool_t *, efi_time_t *);
237:	static efi_status_t xen_efi_query_capsule_caps(efi_capsule_header_t **, unsigned long, u64 *, int *);
185:	static efi_status_t xen_efi_query_variable_info(u32, u64 *, u64 *, u64 *);
258:	static void xen_efi_reset_system(int, efi_status_t, unsigned long, efi_char16_t *);
65:	static efi_status_t xen_efi_set_time(efi_time_t *);
165:	static efi_status_t xen_efi_set_variable(efi_char16_t *, efi_guid_t *, u32, unsigned long, void *);
101:	static efi_status_t xen_efi_set_wakeup_time(efi_bool_t, efi_time_t *);
218:	static efi_status_t xen_efi_update_capsule(efi_capsule_header_t **, unsigned long, unsigned long);

File drivers/xen/events/events_2l.c:
264:	irqreturn_t xen_debug_interrupt(int, void *);
380:	void xen_evtchn_2l_init(void);
55:	static void evtchn_2l_bind_to_cpu(evtchn_port_t, unsigned int, unsigned int);
62:	static void evtchn_2l_clear_pending(evtchn_port_t);
164:	static void evtchn_2l_handle_events(unsigned int, struct evtchn_loop_ctrl *);
74:	static bool evtchn_2l_is_pending(evtchn_port_t);
80:	static void evtchn_2l_mask(evtchn_port_t);
45:	static unsigned int evtchn_2l_max_channels(void);
357:	static int evtchn_2l_percpu_deinit(unsigned int);
50:	static void evtchn_2l_remove(evtchn_port_t, unsigned int);
348:	static void evtchn_2l_resume(void);
68:	static void evtchn_2l_set_pending(evtchn_port_t);
86:	static void evtchn_2l_unmask(evtchn_port_t);

File drivers/xen/events/events_base.c:
1185:	int bind_evtchn_to_irq(evtchn_port_t);
1191:	int bind_evtchn_to_irq_lateeoi(evtchn_port_t);
1379:	int bind_evtchn_to_irqhandler(evtchn_port_t, irq_handler_t, unsigned long, const char *, void *);
1390:	int bind_evtchn_to_irqhandler_lateeoi(evtchn_port_t, irq_handler_t, unsigned long, const char *, void *);
1255:	int bind_interdomain_evtchn_to_irq_lateeoi(unsigned int, evtchn_port_t);
1422:	int bind_interdomain_evtchn_to_irqhandler_lateeoi(unsigned int, evtchn_port_t, irq_handler_t, unsigned long, const char *, void *);
1454:	int bind_ipi_to_irqhandler(enum ipi_vector, unsigned int, irq_handler_t, unsigned long, const char *, void *);
1299:	int bind_virq_to_irq(unsigned int, unsigned int, bool);
1435:	int bind_virq_to_irqhandler(unsigned int, unsigned int, irq_handler_t, unsigned long, const char *, void *);
428:	unsigned int cpu_from_evtchn(evtchn_port_t);
365:	evtchn_port_t evtchn_from_irq(unsigned int);
1526:	int evtchn_get(evtchn_port_t);
1505:	int evtchn_make_refcounted(evtchn_port_t);
1559:	void evtchn_put(evtchn_port_t);
249:	int get_evtchn_to_irq(evtchn_port_t);
1592:	void handle_irq_for_port(evtchn_port_t, struct evtchn_loop_ctrl *);
377:	unsigned int irq_from_evtchn(evtchn_port_t);
383:	int irq_from_virq(unsigned int, unsigned int);
504:	void notify_remote_via_irq(int);
1684:	void rebind_evtchn_irq(evtchn_port_t, int);
1477:	void unbind_from_irqhandler(unsigned int, void *);
1032:	int xen_allocate_pirq_msi(struct pci_dev *, struct msi_desc *);
961:	int xen_bind_pirq_gsi_to_irq(unsigned int, unsigned int, int, char *);
1046:	int xen_bind_pirq_msi_to_irq(struct pci_dev *, struct msi_desc *, int, int, const char *, domid_t);
1955:	void xen_clear_irq_pending(int);
1080:	int xen_destroy_irq(int);
1665:	void xen_evtchn_do_upcall(struct pt_regs *);
1293:	unsigned int xen_evtchn_nr_channels(void);
1677:	void xen_hvm_evtchn_do_upcall(void);
2161:	void xen_init_IRQ(void);
902:	int xen_irq_from_gsi(unsigned int);
1117:	int xen_irq_from_pirq(unsigned int);
647:	void xen_irq_lateeoi(unsigned int, unsigned int);
2025:	void xen_irq_resume(void);
1140:	int xen_pirq_from_irq(unsigned int);
2003:	void xen_poll_irq(int);
1985:	void xen_poll_irq_timeout(u64, int);
1568:	void xen_send_IPI_one(unsigned int, enum ipi_vector);
1763:	int xen_set_affinity_evtchn(struct irq_desc *, unsigned int);
1964:	void xen_set_irq_pending(int);
1493:	int xen_set_irq_priority(unsigned int, unsigned int);
2110:	void xen_setup_callback_vector(void);
1972:	bool xen_test_irq_pending(int);
2009:	int xen_test_irq_shared(int);
822:	static unsigned int __startup_pirq(unsigned int);
918:	static void __unbind_from_irq(unsigned int);
1636:	static void __xen_evtchn_do_upcall(void);
1789:	static void ack_dynirq(struct irq_data *);
482:	static void bind_evtchn_to_cpu(evtchn_port_t, unsigned int);
1146:	static int bind_evtchn_to_irq_chip(evtchn_port_t, struct irq_chip *);
1197:	static int bind_ipi_to_irq(unsigned int, unsigned int);
1780:	static void disable_dynirq(struct irq_data *);
897:	static void disable_pirq(struct irq_data *);
1771:	static void enable_dynirq(struct irq_data *);
892:	static void enable_pirq(struct irq_data *);
788:	static void eoi_pirq(struct irq_data *);
388:	static enum ipi_vector ipi_from_irq(unsigned int);
1816:	static void lateeoi_ack_dynirq(struct irq_data *);
531:	static void lateeoi_list_add(struct irq_info *);
1839:	static void lateeoi_mask_ack_dynirq(struct irq_data *);
1810:	static void mask_ack_dynirq(struct irq_data *);
816:	static void mask_ack_pirq(struct irq_data *);
468:	static bool pirq_check_eoi_map(unsigned int);
408:	static unsigned int pirq_from_irq(unsigned int);
474:	static bool pirq_needs_eoi_flag(unsigned int);
772:	static void pirq_query_unmask(int);
1929:	static void restore_cpu_ipis(unsigned int);
1903:	static void restore_cpu_virqs(unsigned int);
1865:	static void restore_pirqs(void);
1850:	static int retrigger_dynirq(struct irq_data *);
1750:	static int set_affinity_irq(struct irq_data *, const struct cpumask *, bool);
214:	static int set_evtchn_to_irq(evtchn_port_t, unsigned int);
876:	static void shutdown_pirq(struct irq_data *);
871:	static unsigned int startup_pirq(struct irq_data *);
398:	static unsigned int virq_from_irq(unsigned int);
638:	static void xen_cpu_init_eoi(unsigned int);
757:	static void xen_evtchn_close(evtchn_port_t);
2151:	static int xen_evtchn_cpu_dead(unsigned int);
2139:	static int xen_evtchn_cpu_prepare(unsigned int);
727:	static void xen_free_irq(unsigned int);
276:	static int xen_irq_info_common_setup(struct irq_info *, unsigned int, enum xen_irq_type, evtchn_port_t, unsigned short);
663:	static void xen_irq_init(unsigned int);
561:	static void xen_irq_lateeoi_locked(struct irq_info *, bool);
600:	static void xen_irq_lateeoi_worker(struct work_struct *);

File drivers/xen/events/events_fifo.c:
428:	int xen_evtchn_fifo_init(void);
319:	static void __evtchn_fifo_handle_events(unsigned int, struct evtchn_loop_ctrl *);
275:	static void consume_one_event(unsigned int, struct evtchn_loop_ctrl *, struct evtchn_fifo_control_block *, unsigned int, unsigned long *);
377:	static int evtchn_fifo_alloc_control_block(unsigned int);
188:	static void evtchn_fifo_bind_to_cpu(evtchn_port_t, unsigned int, unsigned int);
194:	static void evtchn_fifo_clear_pending(evtchn_port_t);
337:	static void evtchn_fifo_handle_events(unsigned int, struct evtchn_loop_ctrl *);
206:	static bool evtchn_fifo_is_pending(evtchn_port_t);
212:	static void evtchn_fifo_mask(evtchn_port_t);
92:	static unsigned int evtchn_fifo_max_channels(void);
97:	static unsigned int evtchn_fifo_nr_channels(void);
406:	static int evtchn_fifo_percpu_deinit(unsigned int);
399:	static int evtchn_fifo_percpu_init(unsigned int);
343:	static void evtchn_fifo_resume(void);
200:	static void evtchn_fifo_set_pending(evtchn_port_t);
141:	static int evtchn_fifo_setup(evtchn_port_t);
248:	static void evtchn_fifo_unmask(evtchn_port_t);
102:	static int init_control_block(int, struct evtchn_fifo_control_block *);

File drivers/xen/features.c:
22:	void xen_setup_features(void);

File drivers/xen/grant-table.c:
574:	int gnttab_alloc_grant_references(u16, grant_ref_t *);
800:	int gnttab_alloc_pages(int, struct page **);
1092:	void gnttab_batch_copy(struct gnttab_copy *, unsigned int);
1079:	void gnttab_batch_map(struct gnttab_map_grant_ref *, unsigned int);
638:	void gnttab_cancel_free_callback(struct gnttab_free_callback *);
593:	int gnttab_claim_grant_reference(grant_ref_t *);
587:	int gnttab_empty_grant_references(const grant_ref_t *);
438:	void gnttab_end_foreign_access(grant_ref_t, int, unsigned long);
347:	int gnttab_end_foreign_access_ref(grant_ref_t, int);
539:	unsigned long gnttab_end_foreign_transfer(grant_ref_t);
533:	unsigned long gnttab_end_foreign_transfer_ref(grant_ref_t);
1131:	void gnttab_foreach_grant(struct page **, unsigned int, xen_grant_fn_t, void *);
1105:	void gnttab_foreach_grant_in_range(struct page *, unsigned int, unsigned int, xen_grant_fn_t, void *);
761:	void gnttab_free_auto_xlat_frames(void);
547:	void gnttab_free_grant_reference(grant_ref_t);
553:	void gnttab_free_grant_references(grant_ref_t);
959:	void gnttab_free_pages(int, struct page **);
272:	int gnttab_grant_foreign_access(domid_t, unsigned long, int);
264:	void gnttab_grant_foreign_access_ref(grant_ref_t, domid_t, unsigned long, int);
451:	int gnttab_grant_foreign_transfer(domid_t, unsigned long);
464:	void gnttab_grant_foreign_transfer_ref(grant_ref_t, domid_t, unsigned long);
1530:	int gnttab_init(void);
1153:	int gnttab_map_refs(struct gnttab_map_grant_ref *, struct page **, unsigned int, struct gnttab_map_grant_ref *);
714:	unsigned int gnttab_max_grant_frames(void);
877:	int gnttab_page_cache_get(struct gnttab_page_cache *, struct page **);
869:	void gnttab_page_cache_init(struct gnttab_page_cache *);
897:	void gnttab_page_cache_put(struct gnttab_page_cache *, struct page **, unsigned int);
913:	void gnttab_page_cache_shrink(struct gnttab_page_cache *, unsigned int);
939:	void gnttab_pages_clear_private(int, struct page **);
774:	int gnttab_pages_set_private(int, struct page **);
297:	int gnttab_query_foreign_access(grant_ref_t);
603:	void gnttab_release_grant_reference(grant_ref_t *, grant_ref_t);
611:	void gnttab_request_free_callback(struct gnttab_free_callback *, void (*)(void *), void *, u16);
1493:	int gnttab_resume(void);
729:	int gnttab_setup_auto_xlat_frames(phys_addr_t);
1499:	int gnttab_suspend(void);
1198:	int gnttab_unmap_refs(struct gnttab_unmap_grant_ref *, struct gnttab_unmap_grant_ref *, struct page **, unsigned int);
1250:	void gnttab_unmap_refs_async(struct gntab_unmap_queue_data *);
1268:	int gnttab_unmap_refs_sync(struct gntab_unmap_queue_data *);
1594:	static int __gnttab_init(void);
1231:	static void __gnttab_unmap_refs_async(struct gntab_unmap_queue_data *);
195:	static void do_free_callbacks(void);
169:	static int get_free_entries(unsigned int);
412:	static void gnttab_add_deferred(grant_ref_t, bool, struct page *);
303:	static int gnttab_end_foreign_access_ref_v1(grant_ref_t, int);
319:	static int gnttab_end_foreign_access_ref_v2(grant_ref_t, int);
471:	static unsigned long gnttab_end_foreign_transfer_ref_v1(grant_ref_t);
502:	static unsigned long gnttab_end_foreign_transfer_ref_v2(grant_ref_t);
1506:	static int gnttab_expand(unsigned int);
367:	static void gnttab_handle_deferred(struct timer_list *);
1353:	static int gnttab_map(unsigned int, unsigned int);
1287:	static int gnttab_map_frames_v1(xen_pfn_t *, unsigned int);
1304:	static int gnttab_map_frames_v2(xen_pfn_t *, unsigned int);
287:	static int gnttab_query_foreign_access_v1(grant_ref_t);
292:	static int gnttab_query_foreign_access_v2(grant_ref_t);
1452:	static void gnttab_request_version(void);
1475:	static int gnttab_setup(void);
1299:	static void gnttab_unmap_frames_v1(void);
1347:	static void gnttab_unmap_frames_v2(void);
1220:	static void gnttab_unmap_work(struct work_struct *);
243:	static void gnttab_update_entry_v1(grant_ref_t, domid_t, unsigned long, unsigned int);
252:	static void gnttab_update_entry_v2(grant_ref_t, domid_t, unsigned long, unsigned int);
660:	static int grow_gnttab_list(unsigned int);
221:	static void put_free_entry(grant_ref_t);
1259:	static void unmap_refs_callback(int, struct gntab_unmap_queue_data *);

File drivers/xen/manage.c:
49:	void xen_resume_notifier_register(struct notifier_block *);
55:	void xen_resume_notifier_unregister(struct notifier_block *);
374:	int xen_setup_shutdown_event(void);
187:	static void do_poweroff(void);
204:	static void do_reboot(void);
97:	static void do_suspend(void);
175:	static int poweroff_nb(struct notifier_block *, unsigned long, void *);
328:	static int setup_shutdown_watcher(void);
366:	static int shutdown_event(struct notifier_block *, unsigned long, void *);
219:	static void shutdown_handler(struct xenbus_watch *, const char *, const char *);
268:	static void sysrq_handler(struct xenbus_watch *, const char *, const char *);
62:	static int xen_suspend(void *);

File drivers/xen/mem-reservation.c:
109:	int xenmem_reservation_decrease(int, xen_pfn_t *);
93:	int xenmem_reservation_increase(int, xen_pfn_t *);

File drivers/xen/platform-pci.c:
64:	static irqreturn_t do_hvm_evtchn_intr(int, void *);
183:	static int platform_driver_init(void);
92:	static int platform_pci_probe(struct pci_dev *, const struct pci_device_id *);
77:	static int platform_pci_resume(struct device *);

File drivers/xen/swiotlb-xen.c:
180:	int xen_swiotlb_init(int, bool);
104:	static int is_xen_swiotlb_buffer(dma_addr_t, struct device *, struct device *);
277:	static void *xen_swiotlb_alloc_coherent(struct device *, size_t, dma_addr_t *, gfp_t, unsigned long);
561:	static int xen_swiotlb_dma_supported(struct device *, u64);
334:	static void xen_swiotlb_free_coherent(struct device *, size_t, void *, dma_addr_t, unsigned long);
373:	static dma_addr_t xen_swiotlb_map_page(struct device *, struct page *, unsigned long, size_t, enum dma_data_direction, unsigned long);
505:	static int xen_swiotlb_map_sg(struct device *, struct scatterlist *, int, enum dma_data_direction, unsigned long);
529:	static void xen_swiotlb_sync_sg_for_cpu(struct device *, struct scatterlist *, int, enum dma_data_direction);
542:	static void xen_swiotlb_sync_sg_for_device(struct device *, struct scatterlist *, int, enum dma_data_direction);
452:	static void xen_swiotlb_sync_single_for_cpu(struct device *, dma_addr_t, size_t, enum dma_data_direction);
469:	static void xen_swiotlb_sync_single_for_device(struct device *, dma_addr_t, size_t, enum dma_data_direction);
432:	static void xen_swiotlb_unmap_page(struct device *, dma_addr_t, size_t, enum dma_data_direction, unsigned long);
490:	static void xen_swiotlb_unmap_sg(struct device *, struct scatterlist *, int, enum dma_data_direction, unsigned long);

File drivers/xen/sys-hypervisor.c:
356:	static ssize_t buildid_show(struct hyp_sysfs_attr *, char *);
251:	static ssize_t capabilities_show(struct hyp_sysfs_attr *, char *);
269:	static ssize_t changeset_show(struct hyp_sysfs_attr *, char *);
214:	static ssize_t compile_date_show(struct hyp_sysfs_attr *, char *);
196:	static ssize_t compiled_by_show(struct hyp_sysfs_attr *, char *);
178:	static ssize_t compiler_show(struct hyp_sysfs_attr *, char *);
100:	static ssize_t extra_show(struct hyp_sysfs_attr *, char *);
333:	static ssize_t features_show(struct hyp_sysfs_attr *, char *);
50:	static ssize_t guest_type_show(struct hyp_sysfs_attr *, char *);
570:	static ssize_t hyp_sysfs_show(struct kobject *, struct attribute *, char *);
581:	static ssize_t hyp_sysfs_store(struct kobject *, struct attribute *, const char *, size_t);
518:	static int hyper_sysfs_init(void);
602:	static int hypervisor_subsys_init(void);
80:	static ssize_t major_show(struct hyp_sysfs_attr *, char *);
90:	static ssize_t minor_show(struct hyp_sysfs_attr *, char *);
307:	static ssize_t pagesize_show(struct hyp_sysfs_attr *, char *);
38:	static ssize_t type_show(struct hyp_sysfs_attr *, char *);
158:	static ssize_t uuid_show(struct hyp_sysfs_attr *, char *);
287:	static ssize_t virtual_start_show(struct hyp_sysfs_attr *, char *);

File drivers/xen/time.c:
141:	void xen_get_runstate_snapshot(struct vcpu_runstate_info *);
84:	void xen_manage_runstate_time(int);
160:	void xen_setup_runstate_info(int);
152:	u64 xen_steal_clock(int);
171:	void xen_time_setup_guest(void);
147:	bool xen_vcpu_stolen(int);
54:	static void xen_get_runstate_snapshot_cpu_delta(struct vcpu_runstate_info *, unsigned int);

File drivers/xen/xen-balloon.c:
128:	void xen_balloon_init(void);
111:	static int balloon_init_watcher(struct notifier_block *, unsigned long, void *);
145:	static ssize_t show_current_kb(struct device *, struct device_attribute *, char *);
147:	static ssize_t show_high_kb(struct device *, struct device_attribute *, char *);
146:	static ssize_t show_low_kb(struct device *, struct device_attribute *, char *);
183:	static ssize_t show_target(struct device *, struct device_attribute *, char *);
155:	static ssize_t show_target_kb(struct device *, struct device_attribute *, char *);
191:	static ssize_t store_target(struct device *, struct device_attribute *, const char *, size_t);
161:	static ssize_t store_target_kb(struct device *, struct device_attribute *, const char *, size_t);
63:	static void watch_target(struct xenbus_watch *, const char *, const char *);

File drivers/xen/xenbus/xenbus_client.c:
419:	int xenbus_alloc_evtchn(struct xenbus_device *, evtchn_port_t *);
316:	void xenbus_dev_error(struct xenbus_device *, int, const char *, ...);
337:	void xenbus_dev_fatal(struct xenbus_device *, int, const char *, ...);
442:	int xenbus_free_evtchn(struct xenbus_device *, evtchn_port_t);
273:	int xenbus_frontend_closed(struct xenbus_device *);
378:	int xenbus_grant_ring(struct xenbus_device *, void *, unsigned int, grant_ref_t *);
472:	int xenbus_map_ring_valloc(struct xenbus_device *, grant_ref_t *, unsigned int, void **);
885:	enum xenbus_state xenbus_read_driver_state(const char *);
901:	void xenbus_ring_ops_init(void);
97:	const char *xenbus_strstate(enum xenbus_state);
266:	int xenbus_switch_state(struct xenbus_device *, enum xenbus_state);
685:	int xenbus_unmap_ring_vfree(struct xenbus_device *, void *);
128:	int xenbus_watch_path(struct xenbus_device *, const char *, struct xenbus_watch *, bool (*)(struct xenbus_watch *, const char *, const char *), void (*)(struct xenbus_watch *, const char *, const char *));
170:	int xenbus_watch_pathfmt(struct xenbus_device *, struct xenbus_watch *, bool (*)(struct xenbus_watch *, const char *, const char *), void (*)(struct xenbus_watch *, const char *, const char *), const char *, ...);
502:	static int __xenbus_map_ring(struct xenbus_device *, grant_ref_t *, unsigned int, grant_handle_t *, struct map_ring_valloc *, bool *, unsigned int);
202:	static int __xenbus_switch_state(struct xenbus_device *, enum xenbus_state, int);
615:	static int xenbus_map_ring_hvm(struct xenbus_device *, struct map_ring_valloc *, grant_ref_t *, unsigned int, void **);
601:	static void xenbus_map_ring_setup_grant_hvm(unsigned long, unsigned int, unsigned int, void *);
353:	static void xenbus_switch_fatal(struct xenbus_device *, int, int, const char *, ...);
570:	static int xenbus_unmap_ring(struct xenbus_device *, grant_handle_t *, unsigned int, unsigned long *);
831:	static int xenbus_unmap_ring_hvm(struct xenbus_device *, void *);
819:	static void xenbus_unmap_ring_setup_grant_hvm(unsigned long, unsigned int, unsigned int, void *);
281:	static void xenbus_va_dev_error(struct xenbus_device *, int, const char *, struct __va_list_tag *);

File drivers/xen/xenbus/xenbus_comms.c:
480:	void xb_deinit_comms(void);
438:	int xb_init_comms(void);
205:	static int process_msg(void);
330:	static int process_writes(void);
60:	static irqreturn_t wake_waiting(int, void *);
158:	static int xb_read(void *, unsigned int);
106:	static int xb_write(const void *, unsigned int);
410:	static int xenbus_thread(void *);

File drivers/xen/xenbus/xenbus_dev_frontend.c:
363:	void xenbus_dev_queue_reply(struct xb_req_data *);
233:	static void free_watch_adapter(struct watch_adapter *);
189:	static int queue_reply(struct list_head *, const void *, size_t);
266:	static void watch_fired(struct xenbus_watch *, const char *, const char *);
419:	static int xenbus_command_reply(struct xenbus_file_priv *, unsigned int, const char *);
649:	static int xenbus_file_open(struct inode *, struct file *);
687:	static __poll_t xenbus_file_poll(struct file *, poll_table *);
125:	static ssize_t xenbus_file_read(struct file *, char *, size_t, loff_t *);
678:	static int xenbus_file_release(struct inode *, struct file *);
550:	static ssize_t xenbus_file_write(struct file *, const char *, size_t, loff_t *);
713:	static int xenbus_init(void);
306:	static void xenbus_worker(struct work_struct *);
446:	static int xenbus_write_transaction(unsigned int, struct xenbus_file_priv *);
496:	static int xenbus_write_watch(unsigned int, struct xenbus_file_priv *);

File drivers/xen/xenbus/xenbus_probe.c:
667:	int register_xenstore_notifier(struct notifier_block *);
680:	void unregister_xenstore_notifier(struct notifier_block *);
763:	int xen_set_callback_via(uint64_t);
655:	int xenbus_dev_cancel(struct device *);
559:	void xenbus_dev_changed(const char *, struct xen_bus_type *);
209:	int xenbus_dev_probe(struct device *);
265:	int xenbus_dev_remove(struct device *);
617:	int xenbus_dev_resume(struct device *);
597:	int xenbus_dev_suspend(struct device *);
92:	int xenbus_match(struct device *, struct device_driver *);
172:	void xenbus_otherend_changed(struct xenbus_watch *, const char *, const char *, int);
515:	int xenbus_probe_devices(struct xen_bus_type *);
433:	int xenbus_probe_node(struct xen_bus_type *, const char *, const char *);
145:	int xenbus_read_otherend_details(struct xenbus_device *, char *, char *);
298:	int xenbus_register_driver_common(struct xenbus_driver *, struct xen_bus_type *, struct module *, const char *);
311:	void xenbus_unregister_driver(struct xenbus_driver *);
344:	static int cleanup_dev(struct device *, void *);
322:	static int cmp_dev(struct device *, void *);
392:	static ssize_t devtype_show(struct device *, struct device_attribute *, char *);
399:	static ssize_t modalias_show(struct device *, struct device_attribute *, char *);
385:	static ssize_t nodename_show(struct device *, struct device_attribute *, char *);
407:	static ssize_t state_show(struct device *, struct device_attribute *, char *);
379:	static void xenbus_dev_release(struct device *);
847:	static int xenbus_init(void);
686:	static void xenbus_probe(void);
734:	static int xenbus_probe_initcall(void);
717:	static int xenbus_probe_thread(void *);
823:	static int xenbus_resume_cb(struct notifier_block *, unsigned long, void *);
790:	static int xenstored_local_init(void);

File drivers/xen/xenbus/xenbus_probe_frontend.c:
334:	int __xenbus_register_frontend(struct xenbus_driver *, struct module *, const char *);
88:	static void backend_changed(struct xenbus_watch *, const char *, const char *);
511:	static int boot_wait_for_devices(void);
231:	static int essential_device_connecting(struct device *, void *);
35:	static int frontend_bus_id(char *, const char *);
177:	static void frontend_changed(struct xenbus_watch *, const char *, const char *);
475:	static int frontend_probe_and_watch(struct notifier_block *, unsigned long, void *);
197:	static int is_device_connecting(struct device *, void *, bool);
235:	static int non_essential_device_connecting(struct device *, void *);
251:	static int print_device_status(struct device *, void *);
192:	static int read_backend_details(struct xenbus_device *);
309:	static void wait_for_devices(struct xenbus_driver *);
277:	static bool wait_loop(unsigned long, unsigned int, unsigned int *);
421:	static void xenbus_check_frontend(char *, char *);
94:	static void xenbus_frontend_delayed_resume(struct work_struct *);
118:	static int xenbus_frontend_dev_probe(struct device *);
101:	static int xenbus_frontend_dev_resume(struct device *);
128:	static void xenbus_frontend_dev_shutdown(struct device *);
53:	static int xenbus_probe_frontend(struct xen_bus_type *, const char *, const char *);
490:	static int xenbus_probe_frontend_init(void);
356:	static void xenbus_reset_backend_state_changed(struct xenbus_watch *, const char *, const char *);
381:	static void xenbus_reset_frontend(char *, char *, int);
454:	static void xenbus_reset_state(void);
367:	static void xenbus_reset_wait_for_backend(char *, int);
76:	static int xenbus_uevent_frontend(struct device *, struct kobj_uevent_env *);

File drivers/xen/xenbus/xenbus_xs.c:
764:	int register_xenbus_watch(struct xenbus_watch *);
795:	void unregister_xenbus_watch(struct xenbus_watch *);
276:	int xenbus_dev_request_and_reply(struct xsd_sockmsg *, void *);
422:	char **xenbus_directory(struct xenbus_transaction, const char *, const char *, unsigned int *);
442:	int xenbus_exists(struct xenbus_transaction, const char *, const char *);
629:	int xenbus_gather(struct xenbus_transaction, const char *, ...);
502:	int xenbus_mkdir(struct xenbus_transaction, const char *, const char *);
606:	int xenbus_printf(struct xenbus_transaction, const char *, const char *, const char *, ...);
460:	void *xenbus_read(struct xenbus_transaction, const char *, const char *, unsigned int *);
591:	unsigned int xenbus_read_unsigned(const char *, const char *, unsigned int);
519:	int xenbus_rm(struct xenbus_transaction, const char *, const char *);
568:	int xenbus_scanf(struct xenbus_transaction, const char *, const char *, const char *, ...);
554:	int xenbus_transaction_end(struct xenbus_transaction, int);
537:	int xenbus_transaction_start(struct xenbus_transaction *);
479:	int xenbus_write(struct xenbus_transaction, const char *, const char *, const char *);
936:	int xs_init(void);
139:	void xs_request_exit(struct xb_req_data *);
847:	void xs_resume(void);
839:	void xs_suspend(void);
867:	void xs_suspend_cancel(void);
697:	int xs_watch_msg(struct xs_watch_event *);
376:	static unsigned int count_strings(const char *, unsigned int);
206:	static void *read_reply(struct xb_req_data *);
399:	static char **split(char *, unsigned int, unsigned int *);
875:	static int xenwatch_thread(void *);
918:	static int xs_reboot_notify(struct notifier_block *, unsigned long, void *);
115:	static uint32_t xs_request_enter(struct xb_req_data *);
744:	static void xs_reset_watches(void);
227:	static void xs_send(struct xb_req_data *, struct xsd_sockmsg *, struct xsd_sockmsg *);
355:	static void *xs_single(struct xenbus_transaction, enum xsd_sockmsg_type, const char *, unsigned int *);
98:	static void xs_suspend_enter(void);
106:	static void xs_suspend_exit(void);
302:	static void *xs_talkv(struct xenbus_transaction, enum xsd_sockmsg_type, const struct kvec *, unsigned int, unsigned int *);
671:	static int xs_unwatch(const char *, const char *);
271:	static void xs_wake_up(struct xb_req_data *);
658:	static int xs_watch(const char *, const char *);

File drivers/xen/xlate_mmu.c:
286:	int xen_remap_vma_range(struct vm_area_struct *, unsigned long, unsigned long);
214:	int xen_xlate_map_ballooned_pages(xen_pfn_t **, void **, unsigned long);
143:	int xen_xlate_remap_gfn_array(struct vm_area_struct *, unsigned long, xen_pfn_t *, int, int *, pgprot_t, unsigned int, struct page **);
183:	int xen_xlate_unmap_gfn_range(struct vm_area_struct *, int, struct page **);
273:	static int remap_pfn_fn(pte_t *, unsigned long, void *);
96:	static int remap_pte_fn(pte_t *, unsigned long, void *);
197:	static void setup_balloon_gfn(unsigned long, void *);
48:	static void xen_for_each_gfn(struct page **, unsigned int, xen_gfn_fn_t, void *);

File fs/aio.c:
2332:	long __ia32_compat_sys_io_pgetevents(const struct pt_regs *);
2367:	long __ia32_compat_sys_io_pgetevents_time64(const struct pt_regs *);
1344:	long __ia32_compat_sys_io_setup(const struct pt_regs *);
2070:	long __ia32_compat_sys_io_submit(const struct pt_regs *);
2122:	long __ia32_sys_io_cancel(const struct pt_regs *);
1382:	long __ia32_sys_io_destroy(const struct pt_regs *);
2205:	long __ia32_sys_io_getevents(const struct pt_regs *);
2303:	long __ia32_sys_io_getevents_time32(const struct pt_regs *);
2230:	long __ia32_sys_io_pgetevents(const struct pt_regs *);
1313:	long __ia32_sys_io_setup(const struct pt_regs *);
2028:	long __ia32_sys_io_submit(const struct pt_regs *);
2122:	long __x64_sys_io_cancel(const struct pt_regs *);
1382:	long __x64_sys_io_destroy(const struct pt_regs *);
2205:	long __x64_sys_io_getevents(const struct pt_regs *);
2303:	long __x64_sys_io_getevents_time32(const struct pt_regs *);
2230:	long __x64_sys_io_pgetevents(const struct pt_regs *);
1313:	long __x64_sys_io_setup(const struct pt_regs *);
2028:	long __x64_sys_io_submit(const struct pt_regs *);
861:	void exit_aio(struct mm_struct *);
562:	void kiocb_set_cancel_fn(struct kiocb *, kiocb_cancel_fn *);
920:	static bool __get_reqs_available(struct kioctx *);
1915:	static int __io_submit_one(const struct iocb *, struct iocb *, struct aio_kiocb *, bool, struct kioctx *);
2332:	static long __se_compat_sys_io_pgetevents(long, long, long, long, long, long);
2367:	static long __se_compat_sys_io_pgetevents_time64(long, long, long, long, long, long);
1344:	static long __se_compat_sys_io_setup(long, long);
2070:	static long __se_compat_sys_io_submit(long, long, long);
2122:	static long __se_sys_io_cancel(long, long, long);
1382:	static long __se_sys_io_destroy(long);
2205:	static long __se_sys_io_getevents(long, long, long, long, long);
2303:	static long __se_sys_io_getevents_time32(long, long, long, long, long);
2230:	static long __se_sys_io_pgetevents(long, long, long, long, long, long);
1313:	static long __se_sys_io_setup(long, long);
2028:	static long __se_sys_io_submit(long, long, long);
1089:	static void aio_complete(struct aio_kiocb *);
1422:	static void aio_complete_rw(struct kiocb *, long, long);
302:	static void aio_free_ring(struct kioctx *);
1597:	static int aio_fsync(struct fsync_iocb *, const struct iocb *, bool);
1586:	static void aio_fsync_work(struct work_struct *);
254:	static int aio_init_fs_context(struct fs_context *);
377:	static int aio_migratepage(struct address_space *, struct page *, struct page *, enum migrate_mode);
689:	static void aio_nr_sub(unsigned int);
1840:	static int aio_poll(struct aio_kiocb *, const struct iocb *);
1716:	static int aio_poll_cancel(struct kiocb *);
1670:	static void aio_poll_complete_work(struct work_struct *);
1617:	static void aio_poll_put_work(struct work_struct *);
1823:	static void aio_poll_queue_proc(struct file *, struct wait_queue_head *, struct poll_table_struct *);
1733:	static int aio_poll_wake(struct wait_queue_entry *, unsigned int, int, void *);
1446:	static int aio_prep_rw(struct kiocb *, const struct iocb *);
1517:	static int aio_read(struct kiocb *, const struct iocb *, bool, bool);
1254:	static bool aio_read_events(struct kioctx *, long, long, struct io_event *, long *);
1174:	static long aio_read_events_ring(struct kioctx *, struct io_event *, long);
365:	static int aio_ring_mmap(struct file *, struct vm_area_struct *);
328:	static int aio_ring_mremap(struct vm_area_struct *);
266:	static int aio_setup(void);
461:	static int aio_setup_ring(struct kioctx *, unsigned int);
1545:	static int aio_write(struct kiocb *, const struct iocb *, bool, bool);
2165:	static long do_io_getevents(aio_context_t, long, long, struct io_event *, struct timespec64 *);
583:	static void free_ioctx(struct work_struct *);
596:	static void free_ioctx_reqs(struct percpu_ref *);
614:	static void free_ioctx_users(struct percpu_ref *);
1969:	static int io_submit_one(struct kioctx *, struct iocb *, bool);
634:	static int ioctx_add_table(struct kioctx *, struct mm_struct *);
702:	static struct kioctx *ioctx_alloc(unsigned int);
817:	static int kill_ioctx(struct mm_struct *, struct kioctx *, struct ctx_rq_wait *);
1048:	static struct kioctx *lookup_ioctx(unsigned long);
1633:	static bool poll_iocb_lock_wq(struct poll_iocb *);
1664:	static void poll_iocb_unlock_wq(struct poll_iocb *, struct poll_iocb *);
283:	static void put_aio_ring_file(struct kioctx *);
903:	static void put_reqs_available(struct kioctx *, unsigned int);
1271:	static long read_events(struct kioctx *, long, long, struct io_event *, ktime_t);
986:	static void user_refill_reqs_available(struct kioctx *);

File fs/anon_inodes.c:
125:	int anon_inode_getfd(const char *, const struct file_operations *, void *, int);
74:	struct file *anon_inode_getfile(const char *, const struct file_operations *, void *, int);
151:	static int anon_inode_init(void);
33:	static char *anon_inodefs_dname(struct dentry *, char *, int);
43:	static int anon_inodefs_init_fs_context(struct fs_context *);

File fs/attr.c:
135:	int inode_newsize_ok(const struct inode *, loff_t);
223:	int notify_change(struct dentry *, struct iattr *, struct inode **);
178:	void setattr_copy(struct inode *, const struct iattr *);
61:	int setattr_prepare(struct dentry *, struct iattr *);

File fs/autofs/dev-ioctl.c:
737:	void autofs_dev_ioctl_exit(void);
724:	int autofs_dev_ioctl_init(void);
592:	static int _autofs_dev_ioctl(unsigned int, struct autofs_dev_ioctl *);
687:	static long autofs_dev_ioctl(struct file *, unsigned int, unsigned long);
472:	static int autofs_dev_ioctl_askumount(struct file *, struct autofs_sb_info *, struct autofs_dev_ioctl *);
390:	static int autofs_dev_ioctl_catatonic(struct file *, struct autofs_sb_info *, struct autofs_dev_ioctl *);
288:	static int autofs_dev_ioctl_closemount(struct file *, struct autofs_sb_info *, struct autofs_dev_ioctl *);
697:	static long autofs_dev_ioctl_compat(struct file *, unsigned int, unsigned long);
458:	static int autofs_dev_ioctl_expire(struct file *, struct autofs_sb_info *, struct autofs_dev_ioctl *);
313:	static int autofs_dev_ioctl_fail(struct file *, struct autofs_sb_info *, struct autofs_dev_ioctl *);
503:	static int autofs_dev_ioctl_ismountpoint(struct file *, struct autofs_sb_info *, struct autofs_dev_ioctl *);
257:	static int autofs_dev_ioctl_openmount(struct file *, struct autofs_sb_info *, struct autofs_dev_ioctl *);
173:	static int autofs_dev_ioctl_protosubver(struct file *, struct autofs_sb_info *, struct autofs_dev_ioctl *);
164:	static int autofs_dev_ioctl_protover(struct file *, struct autofs_sb_info *, struct autofs_dev_ioctl *);
299:	static int autofs_dev_ioctl_ready(struct file *, struct autofs_sb_info *, struct autofs_dev_ioctl *);
419:	static int autofs_dev_ioctl_requester(struct file *, struct autofs_sb_info *, struct autofs_dev_ioctl *);
337:	static int autofs_dev_ioctl_setpipefd(struct file *, struct autofs_sb_info *, struct autofs_dev_ioctl *);
399:	static int autofs_dev_ioctl_timeout(struct file *, struct autofs_sb_info *, struct autofs_dev_ioctl *);
153:	static int autofs_dev_ioctl_version(struct file *, struct autofs_sb_info *, struct autofs_dev_ioctl *);
182:	static int find_autofs_mount(const char *, struct path *, int (*)(const struct path *, void *), void *);
210:	static int test_by_dev(const struct path *, void *);
215:	static int test_by_type(const struct path *, void *);
110:	static int validate_dev_ioctl(int, struct autofs_dev_ioctl *);

File fs/autofs/expire.c:
575:	int autofs_do_expire_multi(struct super_block *, struct vfsmount *, struct autofs_sb_info *, unsigned int);
611:	int autofs_expire_multi(struct super_block *, struct vfsmount *, struct autofs_sb_info *, int *);
536:	int autofs_expire_run(struct super_block *, struct vfsmount *, struct autofs_sb_info *, struct autofs_packet_expire *);
489:	int autofs_expire_wait(const struct path *, int);
241:	static struct dentry *autofs_check_leaves(struct vfsmount *, struct dentry *, unsigned long, unsigned int);
150:	static int autofs_direct_busy(struct vfsmount *, struct dentry *, unsigned long, unsigned int);
274:	static struct dentry *autofs_expire_direct(struct vfsmount *, struct autofs_sb_info *, unsigned int, struct super_block *, struct super_block *);
420:	static struct dentry *autofs_expire_indirect(struct vfsmount *, struct autofs_sb_info *, unsigned int, struct super_block *, struct super_block *);
29:	static int autofs_mount_busy(struct vfsmount *, struct dentry *, unsigned int);
182:	static int autofs_tree_busy(struct vfsmount *, struct dentry *, unsigned long, unsigned int);
115:	static struct dentry *get_next_positive_dentry(struct dentry *, struct dentry *);
97:	static struct dentry *get_next_positive_subdir(struct dentry *, struct dentry *);
74:	static struct dentry *positive_after(struct dentry *, struct dentry *);
321:	static struct dentry *should_expire(struct dentry *, struct vfsmount *, unsigned long, unsigned int);

File fs/autofs/init.c:
10:	static struct dentry *autofs_mount(struct file_system_type *, int, const char *, void *);
38:	static void exit_autofs_fs(void);
25:	static int init_autofs_fs(void);

File fs/autofs/inode.c:
27:	void autofs_clean_ino(struct autofs_info *);
220:	int autofs_fill_super(struct super_block *, void *, int);
34:	void autofs_free_ino(struct autofs_info *);
360:	struct inode *autofs_get_inode(struct super_block *, umode_t);
39:	void autofs_kill_sb(struct super_block *);
13:	struct autofs_info *autofs_new_ino(struct autofs_sb_info *);
100:	static void autofs_evict_inode(struct inode *);
61:	static int autofs_show_options(struct seq_file *, struct dentry *);
131:	static int parse_options(char *, struct inode *, int *, bool *, struct autofs_sb_info *);

File fs/autofs/root.c:
848:	int is_autofs_dentry(struct dentry *);
658:	static void autofs_clear_leaf_automount_flags(struct dentry *);
309:	static struct vfsmount *autofs_d_automount(struct path *);
397:	static int autofs_d_manage(const struct path *, bool);
63:	static void autofs_del_active(struct dentry *, struct dentry *);
104:	static void autofs_dentry_release(struct dentry *);
718:	static int autofs_dir_mkdir(struct inode *, struct dentry *, umode_t);
74:	static int autofs_dir_open(struct inode *, struct file *);
676:	static int autofs_dir_rmdir(struct inode *, struct dentry *);
527:	static int autofs_dir_symlink(struct inode *, struct dentry *, const char *);
596:	static int autofs_dir_unlink(struct inode *, struct dentry *);
474:	static struct dentry *autofs_lookup(struct inode *, struct dentry *, unsigned int);
126:	static struct dentry *autofs_lookup_active(struct dentry *);
180:	static struct dentry *autofs_lookup_expiring(struct dentry *, bool);
240:	static int autofs_mount_wait(const struct path *, bool);
919:	static long autofs_root_compat_ioctl(struct file *, unsigned int, unsigned long);
910:	static long autofs_root_ioctl(struct file *, unsigned int, unsigned long);
859:	static int autofs_root_ioctl_unlocked(struct inode *, struct file *, unsigned int, unsigned long);
641:	static void autofs_set_leaf_automount_flags(struct dentry *);
260:	static int do_expire_wait(const struct path *, bool);

File fs/autofs/symlink.c:
8:	static const char *autofs_get_link(struct dentry *, struct inode *, struct delayed_call *);

File fs/autofs/waitq.c:
15:	void autofs_catatonic_mode(struct autofs_sb_info *);
347:	int autofs_wait(struct autofs_sb_info *, const struct path *, enum autofs_notify);
526:	int autofs_wait_release(struct autofs_sb_info *, autofs_wqt_t, int);
224:	static struct autofs_wait_queue *autofs_find_wait(const struct qstr *, struct autofs_sb_info *, struct autofs_sb_info *);
178:	static int autofs_getpath(struct autofs_sb_info *, struct dentry *, char *);
78:	static void autofs_notify_daemon(struct autofs_sb_info *, struct autofs_wait_queue *, int);
45:	static int autofs_write(struct autofs_sb_info *, struct file *, const void *, int);

File fs/bad_inode.c:
238:	void iget_failed(struct inode *);
225:	bool is_bad_inode(struct inode *);
199:	void make_bad_inode(struct inode *);
20:	static int bad_file_open(struct inode *, struct file *);
136:	static int bad_inode_atomic_open(struct inode *, struct dentry *, struct file *, unsigned int, umode_t);
30:	static int bad_inode_create(struct inode *, struct dentry *, umode_t, bool);
123:	static int bad_inode_fiemap(struct inode *, struct fiemap_extent_info *, u64, u64);
118:	static struct posix_acl *bad_inode_get_acl(struct inode *, int);
111:	static const char *bad_inode_get_link(struct dentry *, struct inode *, struct delayed_call *);
94:	static int bad_inode_getattr(const struct path *, struct kstat *, u32, unsigned int);
42:	static int bad_inode_link(struct dentry *, struct inode *, struct dentry *);
105:	static ssize_t bad_inode_listxattr(struct dentry *, char *, size_t);
36:	static struct dentry *bad_inode_lookup(struct inode *, struct dentry *, unsigned int);
59:	static int bad_inode_mkdir(struct inode *, struct dentry *, umode_t);
70:	static int bad_inode_mknod(struct inode *, struct dentry *, umode_t, dev_t);
89:	static int bad_inode_permission(struct inode *, int);
83:	static int bad_inode_readlink(struct dentry *, char *, int);
76:	static int bad_inode_rename2(struct inode *, struct dentry *, struct inode *, struct dentry *, unsigned int);

File fs/binfmt_elf.c:
172:	static int create_elf_tables(struct linux_binprm *, const struct elf64_hdr *, unsigned long, unsigned long, unsigned long);
2154:	static int elf_core_dump(struct coredump_params *);
360:	static unsigned long elf_map(struct file *, unsigned long, const struct elf64_phdr *, int, int, unsigned long);
2303:	static void exit_compat_elf_binfmt(void);
2303:	static void exit_elf_binfmt(void);
1604:	static int fill_files_note(struct memelfnote *);
1786:	static int fill_note_info(struct elf64_hdr *, int, struct elf_note_info *, const kernel_siginfo_t *, struct pt_regs *);
1498:	static void fill_prstatus(struct elf_prstatus *, struct task_struct *, long);
1532:	static int fill_psinfo(struct elf_prpsinfo *, struct task_struct *, struct mm_struct *);
1727:	static int fill_thread_core_info(struct elf_thread_core_info *, const struct user_regset_view *, long, size_t *);
2297:	static int init_compat_elf_binfmt(void);
2297:	static int init_elf_binfmt(void);
820:	static int load_elf_binary(struct linux_binprm *);
588:	static unsigned long load_elf_interp(struct elf64_hdr *, struct file *, unsigned long, struct elf64_phdr *, struct arch_elf_state *);
457:	static struct elf64_phdr *load_elf_phdrs(const struct elf64_hdr *, struct file *);
1429:	static int notesize(struct memelfnote *);
110:	static int set_brk(unsigned long, unsigned long, int);
399:	static unsigned long total_mapping_size(const struct elf64_phdr *, int);
1890:	static int write_note_info(struct elf_note_info *, struct coredump_params *);
1440:	static int writenote(struct memelfnote *, struct coredump_params *);

File fs/binfmt_script.c:
151:	static void exit_script_binfmt(void);
145:	static int init_script_binfmt(void);
34:	static int load_script(struct linux_binprm *);

File fs/block_dev.c:
51:	struct block_device *I_BDEV(struct inode *);
2136:	int __invalidate_device(struct block_device *, bool);
544:	int __sync_blockdev(struct block_device *, int);
1199:	void bd_abort_claiming(struct block_device *, struct block_device *, void *);
1043:	void bd_forget(struct inode *);
1264:	int bd_link_disk_holder(struct block_device *, struct gendisk *);
1103:	int bd_prepare_to_claim(struct block_device *, struct block_device *, void *);
1414:	void bd_set_nr_sectors(struct block_device *, sector_t);
1329:	void bd_unlink_disk_holder(struct block_device *, struct gendisk *);
896:	void bdev_cache_init(void);
1424:	int bdev_disk_changed(struct block_device *, bool);
757:	int bdev_read_page(struct block_device *, sector_t, struct page *);
794:	int bdev_write_page(struct block_device *, sector_t, struct page *, struct writeback_control *);
975:	struct block_device *bdget_part(struct hd_struct *);
968:	struct block_device *bdgrab(struct block_device *);
993:	void bdput(struct block_device *);
718:	int blkdev_fsync(struct file *, loff_t, loff_t, int);
1754:	struct block_device *blkdev_get_by_dev(dev_t, fmode_t, void *);
1709:	struct block_device *blkdev_get_by_path(const char *, fmode_t, void *);
1848:	void blkdev_put(struct block_device *, fmode_t);
1967:	ssize_t blkdev_read_iter(struct kiocb *, struct iov_iter *);
1927:	ssize_t blkdev_write_iter(struct kiocb *, struct iov_iter *);
592:	struct super_block *freeze_bdev(struct block_device *);
568:	int fsync_bdev(struct block_device *);
90:	void invalidate_bdev(struct block_device *);
2157:	void iterate_bdevs(void (*)(struct block_device *, void *), void *);
2102:	struct block_device *lookup_bdev(const char *);
980:	long nr_blockdev_pages(void);
1395:	void revalidate_disk_size(struct gendisk *, bool);
191:	int sb_min_blocksize(struct super_block *, int);
178:	int sb_set_blocksize(struct super_block *, int);
157:	int set_blocksize(struct block_device *, int);
557:	int sync_blockdev(struct block_device *);
639:	int thaw_bdev(struct block_device *, struct super_block *);
110:	int truncate_bdev_range(struct block_device *, fmode_t, loff_t, loff_t);
392:	static ssize_t __blkdev_direct_IO(struct kiocb *, struct iov_iter *, int);
242:	static ssize_t __blkdev_direct_IO_simple(struct kiocb *, struct iov_iter *, int);
1491:	static int __blkdev_get(struct block_device *, fmode_t, void *, int);
1802:	static void __blkdev_put(struct block_device *, fmode_t, int);
1000:	static struct block_device *bd_acquire(struct inode *);
1172:	static void bd_finish_claiming(struct block_device *, struct block_device *, void *);
877:	static int bd_init_fs_context(struct fs_context *);
1072:	static bool bd_may_claim(struct block_device *, struct block_device *, void *);
826:	static struct inode *bdev_alloc_inode(struct super_block *);
855:	static void bdev_evict_inode(struct inode *);
834:	static void bdev_free_inode(struct inode *);
929:	static int bdev_set(struct inode *, void *);
924:	static int bdev_test(struct inode *, void *);
57:	static void bdev_write_inode(struct block_device *);
935:	static struct block_device *bdget(dev_t);
347:	static void blkdev_bio_end_io(struct bio *);
228:	static void blkdev_bio_end_io_simple(struct bio *);
1896:	static int blkdev_close(struct inode *, struct file *);
525:	static ssize_t blkdev_direct_IO(struct kiocb *, struct iov_iter *);
2013:	static long blkdev_fallocate(struct file *, int, loff_t, loff_t);
1670:	static int blkdev_get(struct block_device *, fmode_t, void *);
202:	static int blkdev_get_block(struct inode *, sector_t, struct buffer_head *, int);
538:	static int blkdev_init(void);
339:	static int blkdev_iopoll(struct kiocb *, bool);
1771:	static int blkdev_open(struct inode *, struct file *);
676:	static void blkdev_readahead(struct readahead_control *);
671:	static int blkdev_readpage(struct file *, struct page *);
681:	static int blkdev_write_begin(struct file *, struct address_space *, loff_t, unsigned int, unsigned int, struct page **, void **);
689:	static int blkdev_write_end(struct file *, struct address_space *, loff_t, unsigned int, unsigned int, struct page *, void *);
666:	static int blkdev_writepage(struct page *, struct writeback_control *);
1991:	static int blkdev_writepages(struct address_space *, struct writeback_control *);
1903:	static long block_ioctl(struct file *, unsigned int, unsigned long);
707:	static loff_t block_llseek(struct file *, loff_t, int);
1361:	static void check_disk_size_change(struct gendisk *, struct block_device *, bool);
839:	static void init_once(void *);
144:	static void set_init_blocksize(struct block_device *, struct block_device *);

File fs/buffer.c:
1185:	void __bforget(struct buffer_head *);
2058:	int __block_write_begin(struct page *, loff_t, unsigned int, get_block_t *);
1973:	int __block_write_begin_int(struct page *, loff_t, unsigned int, get_block_t *, struct iomap *);
1712:	int __block_write_full_page(struct inode *, struct page *, get_block_t *, struct writeback_control *, bh_end_io_t *);
1396:	struct buffer_head *__bread_gfp(struct block_device *, sector_t, unsigned int, gfp_t);
1362:	void __breadahead(struct block_device *, sector_t, unsigned int);
1372:	void __breadahead_gfp(struct block_device *, sector_t, unsigned int, gfp_t);
1171:	void __brelse(struct buffer_head *);
1322:	struct buffer_head *__find_get_block(struct block_device *, sector_t, unsigned int);
1347:	struct buffer_head *__getblk_gfp(struct block_device *, sector_t, unsigned int, gfp_t);
3282:	long __ia32_sys_bdflush(const struct pt_regs *);
67:	void __lock_buffer(struct buffer_head *);
600:	void __set_page_dirty(struct page *, struct address_space *, int);
641:	int __set_page_dirty_buffers(struct page *);
3138:	int __sync_dirty_buffer(struct buffer_head *, int);
120:	void __wait_on_buffer(struct buffer_head *);
3282:	long __x64_sys_bdflush(const struct pt_regs *);
3335:	struct buffer_head *alloc_buffer_head(gfp_t);
839:	struct buffer_head *alloc_page_buffers(struct page *, unsigned long, bool);
3400:	int bh_submit_read(struct buffer_head *);
3382:	int bh_uptodate_or_lock(struct buffer_head *);
2474:	int block_commit_write(struct page *, unsigned int, unsigned int);
1501:	void block_invalidatepage(struct page *, unsigned int, unsigned int);
2215:	int block_is_partially_uptodate(struct page *, unsigned long, unsigned long);
2500:	int block_page_mkwrite(struct vm_area_struct *, struct vm_fault *, get_block_t *);
2260:	int block_read_full_page(struct page *, get_block_t *);
2874:	int block_truncate_page(struct address_space *, loff_t, get_block_t *);
2110:	int block_write_begin(struct address_space *, loff_t, unsigned int, unsigned int, struct page **, get_block_t *);
2133:	int block_write_end(struct file *, struct address_space *, loff_t, unsigned int, unsigned int, struct page *, void *);
2953:	int block_write_full_page(struct page *, get_block_t *, struct writeback_control *);
86:	void buffer_check_dirty_writeback(struct page *, bool *, bool *);
3419:	void buffer_init(void);
1606:	void clean_bdev_aliases(struct block_device *, sector_t, sector_t);
2450:	int cont_write_begin(struct file *, struct address_space *, loff_t, unsigned int, unsigned int, struct page **, void **, get_block_t *, loff_t *);
1556:	void create_empty_buffers(struct page *, unsigned long, unsigned long);
524:	void emergency_thaw_bdev(struct super_block *);
342:	void end_buffer_async_write(struct buffer_head *, int);
157:	void end_buffer_read_sync(struct buffer_head *, int);
164:	void end_buffer_write_sync(struct buffer_head *, int);
3350:	void free_buffer_head(struct buffer_head *);
2986:	sector_t generic_block_bmap(struct address_space *, sector_t, get_block_t *);
2350:	int generic_cont_expand_simple(struct inode *, loff_t);
2169:	int generic_write_end(struct file *, struct address_space *, loff_t, unsigned int, unsigned int, struct page *, void *);
484:	int inode_has_buffers(struct inode *);
1437:	void invalidate_bh_lrus(void);
786:	void invalidate_inode_buffers(struct inode *);
3091:	void ll_rw_block(int, int, int, struct buffer_head **);
418:	void mark_buffer_async_write(struct buffer_head *);
1111:	void mark_buffer_dirty(struct buffer_head *);
570:	void mark_buffer_dirty_inode(struct buffer_head *, struct inode *);
1146:	void mark_buffer_write_io_error(struct buffer_head *);
2796:	int nobh_truncate_page(struct address_space *, loff_t, get_block_t *);
2578:	int nobh_write_begin(struct address_space *, loff_t, unsigned int, unsigned int, struct page **, void **, get_block_t *);
2719:	int nobh_write_end(struct file *, struct address_space *, loff_t, unsigned int, unsigned int, struct page *, void *);
2759:	int nobh_writepage(struct page *, get_block_t *, struct writeback_control *);
1881:	void page_zero_new_buffers(struct page *, unsigned int, unsigned int);
807:	int remove_inode_buffers(struct inode *);
1443:	void set_bh_page(struct buffer_head *, struct page *, unsigned long);
3059:	int submit_bh(int, int, struct buffer_head *);
3167:	int sync_dirty_buffer(struct buffer_head *);
541:	int sync_mapping_buffers(struct address_space *);
60:	void touch_buffer(struct buffer_head *);
3226:	int try_to_free_buffers(struct page *);
73:	void unlock_buffer(struct buffer_head *);
559:	void write_boundary_block(struct block_device *, sector_t, unsigned int);
3120:	void write_dirty_buffer(struct buffer_head *, int);
2065:	static int __block_commit_write(struct page *, unsigned int, unsigned int, struct inode *);
1200:	static struct buffer_head *__bread_slow(struct buffer_head *);
189:	static struct buffer_head *__find_get_block_slow(struct block_device *, sector_t);
1047:	static struct buffer_head *__getblk_slow(struct block_device *, sector_t, unsigned int, gfp_t);
477:	static void __remove_assoc_queue(struct buffer_head *);
2554:	static void attach_nobh_buffers(struct page *, struct buffer_head *);
1260:	static void bh_lru_install(struct buffer_head *);
3361:	static int buffer_exit_cpu_dead(unsigned int);
2374:	static int cont_expand_zero(struct file *, struct address_space *, loff_t, loff_t *);
1673:	static struct buffer_head *create_page_buffers(struct page *, struct inode *, unsigned int);
1467:	static void discard_buffer(struct buffer_head *);
3200:	static int drop_buffers(struct page *, struct buffer_head **);
2999:	static void end_bio_bh_io_sync(struct bio *);
244:	static void end_buffer_async_read(struct buffer_head *, int);
320:	static void end_buffer_async_read_io(struct buffer_head *, int);
2544:	static void end_buffer_read_nobh(struct buffer_head *, int);
698:	static int fsync_buffers_list(spinlock_t *, struct list_head *);
954:	static int grow_dev_page(struct block_device *, sector_t, unsigned long, int, int, gfp_t);
1424:	static bool has_bh_in_lru(int, void *);
919:	static sector_t init_page_buffers(struct page *, struct block_device *, sector_t, int);
1412:	static void invalidate_bh_lru(void *);
1919:	static void iomap_to_bh(struct inode *, sector_t, struct buffer_head *, struct iomap *);
1287:	static struct buffer_head *lookup_bh_lru(struct block_device *, sector_t, unsigned int);
499:	static int osync_buffers_list(spinlock_t *, struct list_head *);
3322:	static void recalc_bh_state(void);
3010:	static int submit_bh_wbc(int, int, struct buffer_head *, enum rw_hint, struct writeback_control *);

File fs/char_dev.c:
268:	int __register_chrdev(unsigned int, unsigned int, unsigned int, const char *, const struct file_operations *);
335:	void __unregister_chrdev(unsigned int, unsigned int, unsigned int, const char *);
236:	int alloc_chrdev_region(dev_t *, unsigned int, unsigned int, const char *);
426:	void cd_forget(struct inode *);
479:	int cdev_add(struct cdev *, dev_t, unsigned int);
633:	struct cdev *cdev_alloc(void);
594:	void cdev_del(struct cdev *);
537:	int cdev_device_add(struct cdev *, struct device *);
571:	void cdev_device_del(struct cdev *, struct device *);
651:	void cdev_init(struct cdev *, const struct file_operations *);
361:	void cdev_put(struct cdev *);
508:	void cdev_set_parent(struct cdev *, struct kobject *);
667:	void chrdev_init(void);
51:	void chrdev_show(struct seq_file *, off_t);
200:	int register_chrdev_region(dev_t, unsigned int, const char *);
311:	void unregister_chrdev_region(dev_t, unsigned int);
97:	static struct char_device_struct *__register_chrdev_region(unsigned int, unsigned int, int, const char *);
172:	static struct char_device_struct *__unregister_chrdev_region(unsigned int, unsigned int, int);
659:	static struct kobject *base_probe(dev_t, int *, void *);
601:	static void cdev_default_release(struct kobject *);
610:	static void cdev_dynamic_release(struct kobject *);
435:	static void cdev_purge(struct cdev *);
373:	static int chrdev_open(struct inode *, struct file *);
463:	static int exact_lock(dev_t, void *);
457:	static struct kobject *exact_match(dev_t, int *, void *);

File fs/configfs/dir.c:
354:	int configfs_create_link(struct configfs_dirent *, struct dentry *, struct dentry *, char *);
1124:	int configfs_depend_item(struct configfs_subsystem *, struct config_item *);
1206:	int configfs_depend_item_unlocked(struct configfs_subsystem *, struct config_item *);
343:	int configfs_dirent_is_ready(struct configfs_dirent *);
236:	int configfs_make_dirent(struct configfs_dirent *, struct dentry *, void *, umode_t, int, struct configfs_fragment *);
1832:	struct config_group *configfs_register_default_group(struct config_group *, const char *, const struct config_item_type *);
1743:	int configfs_register_group(struct config_group *, struct config_group *);
1864:	int configfs_register_subsystem(struct configfs_subsystem *);
725:	void configfs_remove_default_groups(struct config_group *);
1174:	void configfs_undepend_item(struct config_item *);
1857:	void configfs_unregister_default_group(struct config_group *);
1788:	void configfs_unregister_group(struct config_group *);
1920:	void configfs_unregister_subsystem(struct configfs_subsystem *);
172:	struct configfs_fragment *get_fragment(struct configfs_fragment *);
166:	void put_fragment(struct configfs_fragment *);
917:	static void client_disconnect_notify(struct config_item *, struct config_item *);
936:	static void client_drop_item(struct config_item *, struct config_item *);
425:	static int configfs_attach_attr(struct configfs_dirent *, struct dentry *);
862:	static int configfs_attach_group(struct config_item *, struct dentry *, struct configfs_fragment *, struct config_item *);
827:	static int configfs_attach_item(struct config_item *, struct dentry *, struct configfs_fragment *, struct config_item *);
275:	static int configfs_create_dir(struct config_item *, struct dentry *, struct configfs_fragment *);
39:	static void configfs_d_iput(struct dentry *, struct inode *);
1050:	static int configfs_depend_prep(struct dentry *, struct config_item *);
508:	static int configfs_detach_prep(struct dentry **, struct dentry *, struct dentry *);
555:	static void configfs_detach_rollback(struct dentry *, struct dentry *);
1601:	static int configfs_dir_close(struct inode *, struct file *);
1684:	static loff_t configfs_dir_lseek(struct file *, loff_t, int);
1577:	static int configfs_dir_open(struct inode *, struct file *);
323:	static void configfs_dir_set_ready(struct configfs_dirent *);
1080:	static int configfs_do_depend_item(struct dentry *, struct config_item *);
451:	static struct dentry *configfs_lookup(struct inode *, struct dentry *, unsigned int);
1270:	static int configfs_mkdir(struct inode *, struct dentry *, umode_t);
182:	static struct configfs_dirent *configfs_new_dirent(struct configfs_dirent *, void *, int, struct configfs_fragment *);
1623:	static int configfs_readdir(struct file *, struct dir_context *);
407:	static void configfs_remove_dir(struct config_item *, struct config_item *);
254:	static void configfs_remove_dirent(struct dentry *, struct dentry *);
1453:	static int configfs_rmdir(struct inode *, struct dentry *);
676:	static int create_default_group(struct config_group *, struct config_group *, struct configfs_fragment *);
567:	static void detach_attrs(struct config_item *, struct config_item *);
632:	static void detach_groups(struct config_group *, struct config_group *);
793:	static void link_group(struct config_group *, struct config_group *);
760:	static void link_obj(struct config_item *, struct config_item *);
782:	static void unlink_group(struct config_group *);
741:	static void unlink_obj(struct config_item *);

File fs/configfs/file.c:
540:	int configfs_create_bin_file(struct config_item *, const struct configfs_bin_attribute *);
519:	int configfs_create_file(struct config_item *, const struct configfs_attribute *);
356:	static int __configfs_open_file(struct inode *, struct file *, int);
462:	static int configfs_open_bin_file(struct inode *, struct file *);
457:	static int configfs_open_file(struct inode *, struct file *);
143:	static ssize_t configfs_read_bin_file(struct file *, char *, size_t, loff_t *);
102:	static ssize_t configfs_read_file(struct file *, char *, size_t, loff_t *);
445:	static int configfs_release(struct inode *, struct file *);
467:	static int configfs_release_bin_file(struct inode *, struct file *);
304:	static ssize_t configfs_write_bin_file(struct file *, const char *, size_t, loff_t *);
275:	static ssize_t configfs_write_file(struct file *, const char *, size_t, loff_t *);
224:	static int fill_write_buffer(struct configfs_buffer *, const char *, size_t);

File fs/configfs/inode.c:
164:	struct inode *configfs_create(struct dentry *, umode_t);
212:	void configfs_drop_dentry(struct configfs_dirent *, struct dentry *);
190:	const unsigned char *configfs_get_name(struct configfs_dirent *);
228:	void configfs_hash_and_remove(struct dentry *, const char *);
112:	struct inode *configfs_new_inode(umode_t, struct configfs_dirent *, struct super_block *);
43:	int configfs_setattr(struct dentry *, struct iattr *);

File fs/configfs/item.c:
176:	struct config_item *config_group_find_item(struct config_group *, const char *);
159:	void config_group_init(struct config_group *);
94:	void config_group_init_type_name(struct config_group *, const char *, const struct config_item_type *);
103:	struct config_item *config_item_get(struct config_item *);
111:	struct config_item *config_item_get_unless_zero(struct config_item *);
84:	void config_item_init_type_name(struct config_item *, const char *, const struct config_item_type *);
148:	void config_item_put(struct config_item *);
51:	int config_item_set_name(struct config_item *, const char *, ...);

File fs/configfs/mount.c:
52:	int configfs_is_root(struct config_item *);
124:	struct dentry *configfs_pin_fs(void);
131:	void configfs_release_fs(void);
166:	static void configfs_exit(void);
65:	static int configfs_fill_super(struct super_block *, struct fs_context *);
32:	static void configfs_free_inode(struct inode *);
101:	static int configfs_get_tree(struct fs_context *);
137:	static int configfs_init(void);
110:	static int configfs_init_fs_context(struct fs_context *);

File fs/configfs/symlink.c:
142:	int configfs_symlink(struct inode *, struct dentry *, const char *);
220:	int configfs_unlink(struct inode *, struct dentry *);
58:	static int configfs_get_target_path(struct config_item *, struct config_item *, char *);
79:	static int create_link(struct config_item *, struct config_item *, struct dentry *);
43:	static void fill_item_path(struct config_item *, char *, int);
119:	static int get_target(const char *, struct path *, struct config_item **, struct super_block *);
32:	static int item_path_length(struct config_item *);

File fs/coredump.c:
577:	void do_coredump(const kernel_siginfo_t *);
914:	int dump_align(struct coredump_params *, int);
837:	int dump_emit(struct coredump_params *, const void *, int);
859:	int dump_skip(struct coredump_params *, size_t);
928:	void dump_truncate(struct coredump_params *);
881:	int dump_user_range(struct coredump_params *, unsigned long, unsigned long);
1074:	int dump_vma_snapshot(struct coredump_params *, int *, struct core_vma_metadata **, size_t *);
119:	static int cn_esc_printf(struct core_name *, const char *, ...);
156:	static int cn_print_exe_file(struct core_name *, bool);
106:	static int cn_printf(struct core_name *, const char *, ...);
82:	static int cn_vprintf(struct core_name *, const char *, struct __va_list_tag *);
486:	static void coredump_finish(struct mm_struct *, bool);
448:	static int coredump_wait(int, struct core_state *);
196:	static int format_corename(struct core_name *, struct coredump_params *, size_t **, int *);
559:	static int umh_pipe_setup(struct subprocess_info *, struct cred *);
975:	static unsigned long vma_dump_size(struct vm_area_struct *, unsigned long);
525:	static void wait_for_dump_helpers(struct file *, struct file *);
350:	static int zap_process(struct task_struct *, int, int);
372:	static int zap_threads(struct task_struct *, struct mm_struct *, struct core_state *, int);

File fs/d_path.c:
180:	char *__d_path(const struct path *, const struct path *, char *, int);
429:	long __ia32_sys_getcwd(const struct pt_regs *);
429:	long __x64_sys_getcwd(const struct pt_regs *);
197:	char *d_absolute_path(const struct path *, char *, int);
262:	char *d_path(const struct path *, char *, int);
380:	char *dentry_path(struct dentry *, char *, int);
374:	char *dentry_path_raw(struct dentry *, char *, int);
297:	char *dynamic_dname(struct dentry *, char *, int, const char *, ...);
315:	char *simple_dname(struct dentry *, char *, int);
329:	static char *__dentry_path(struct dentry *, char *, int);
429:	static long __se_sys_getcwd(long, long);
11:	static int prepend(char **, int *, const char *, int);
38:	static int prepend_name(char **, int *, const struct qstr *);
75:	static int prepend_path(const struct path *, const struct path *, char **, int *);

File fs/dax.c:
688:	int dax_delete_mapping_entry(struct address_space *, unsigned long);
1731:	vm_fault_t dax_finish_sync_fault(struct vm_fault *, enum page_entry_size, pfn_t);
706:	int dax_invalidate_mapping_entry_sync(struct address_space *, unsigned long);
1663:	vm_fault_t dax_iomap_fault(struct vm_fault *, enum page_entry_size, pfn_t *, int *, const struct iomap_ops *);
1209:	ssize_t dax_iomap_rw(struct kiocb *, struct iov_iter *, const struct iomap_ops *);
1069:	s64 dax_iomap_zero(loff_t, u64, struct iomap *);
653:	struct page *dax_layout_busy_page(struct address_space *);
591:	struct page *dax_layout_busy_page_range(struct address_space *, loff_t, loff_t);
400:	dax_entry_t dax_lock_page(struct page *);
447:	void dax_unlock_page(struct page *, dax_entry_t);
967:	int dax_writeback_mapping_range(struct address_space *, struct dax_device *, struct writeback_control *);
659:	static int __dax_invalidate_entry(struct address_space *, unsigned long, bool);
712:	static int copy_cow_page_dax(struct block_device *, struct dax_device *, sector_t, struct page *, unsigned long);
361:	static void dax_disassociate_entry(void *, struct address_space *, bool);
804:	static void dax_entry_mkclean(struct address_space *, unsigned long, unsigned long);
744:	static void *dax_insert_entry(struct xa_state *, struct address_space *, struct vm_fault *, void *, pfn_t, unsigned long, bool);
1687:	static vm_fault_t dax_insert_pfn_mkwrite(struct vm_fault *, pfn_t, unsigned int);
1107:	static loff_t dax_iomap_actor(struct inode *, loff_t, loff_t, void *, struct iomap *, struct iomap *);
1013:	static int dax_iomap_pfn(struct iomap *, loff_t, size_t, pfn_t *);
1481:	static vm_fault_t dax_iomap_pmd_fault(struct vm_fault *, pfn_t *, const struct iomap_ops *);
1259:	static vm_fault_t dax_iomap_pte_fault(struct vm_fault *, pfn_t *, int *, const struct iomap_ops *);
1052:	static vm_fault_t dax_load_hole(struct xa_state *, struct address_space *, void **, struct vm_fault *);
1429:	static vm_fault_t dax_pmd_load_hole(struct xa_state *, struct vm_fault *, void **, struct iomap *);
290:	static void dax_unlock_entry(struct xa_state *, void *);
195:	static void dax_wake_entry(struct xa_state *, void *, enum dax_wake_mode);
877:	static int dax_writeback_one(struct xa_state *, struct dax_device *, struct address_space *, void *);
223:	static void *get_unlocked_entry(struct xa_state *, unsigned int);
487:	static void *grab_mapping_entry(struct xa_state *, struct address_space *, unsigned int);
57:	static int init_dax_wait_table(void);
257:	static void wait_entry_unlocked(struct xa_state *, void *);
177:	static int wake_exceptional_entry_func(wait_queue_entry_t *, unsigned int, int, void *);

File fs/dcache.c:
503:	void __d_drop(struct dentry *);
2421:	struct dentry *__d_lookup(const struct dentry *, const struct qstr *);
2706:	void __d_lookup_done(struct dentry *);
2296:	struct dentry *__d_lookup_rcu(const struct dentry *, const struct qstr *, unsigned int *);
2758:	void d_add(struct dentry *, struct inode *);
2215:	struct dentry *d_add_ci(struct dentry *, struct inode *, struct qstr *);
1837:	struct dentry *d_alloc(struct dentry *, const struct qstr *);
1862:	struct dentry *d_alloc_anon(struct super_block *);
1868:	struct dentry *d_alloc_cursor(struct dentry *);
1907:	struct dentry *d_alloc_name(struct dentry *, const char *);
2596:	struct dentry *d_alloc_parallel(struct dentry *, const struct qstr *, wait_queue_head_t *);
1899:	struct dentry *d_alloc_pseudo(struct super_block *, const struct qstr *);
3010:	struct dentry *d_ancestor(struct dentry *, struct dentry *);
2522:	void d_delete(struct dentry *);
513:	void d_drop(struct dentry *);
2779:	struct dentry *d_exact_alias(struct dentry *, struct inode *);
2988:	void d_exchange(struct dentry *, struct dentry *);
1063:	struct dentry *d_find_alias(struct inode *);
1019:	struct dentry *d_find_any_alias(struct inode *);
3191:	void d_genocide(struct dentry *);
2484:	struct dentry *d_hash_and_lookup(struct dentry *, struct qstr *);
2032:	void d_instantiate(struct dentry *, struct inode *);
2121:	struct dentry *d_instantiate_anon(struct dentry *, struct inode *);
2050:	void d_instantiate_new(struct dentry *, struct inode *);
1700:	void d_invalidate(struct dentry *);
2391:	struct dentry *d_lookup(const struct dentry *, const struct qstr *);
2066:	struct dentry *d_make_root(struct inode *);
701:	void d_mark_dontcache(struct inode *);
2975:	void d_move(struct dentry *, struct dentry *);
2172:	struct dentry *d_obtain_alias(struct inode *);
2193:	struct dentry *d_obtain_root(struct inode *);
1080:	void d_prune_aliases(struct inode *);
2558:	void d_rehash(struct dentry *);
1917:	void d_set_d_op(struct dentry *, const struct dentry_operations *);
1955:	void d_set_fallthru(struct dentry *);
1479:	int d_set_mounted(struct dentry *);
3082:	struct dentry *d_splice_alias(struct inode *, struct dentry *);
3198:	void d_tmpfile(struct dentry *, struct inode *);
959:	struct dentry *dget_parent(struct dentry *);
897:	void dput(struct dentry *);
935:	void dput_to_list(struct dentry *, struct list_head *);
3149:	bool is_subdir(struct dentry *, struct dentry *);
1459:	int path_has_submounts(const struct path *);
168:	int proc_nr_dentry(struct ctl_table *, int, void *, size_t *, loff_t *);
1253:	long prune_dcache_sb(struct super_block *, struct shrink_control *);
301:	void release_dentry_name_snapshot(struct name_snapshot *);
1669:	void shrink_dcache_for_umount(struct super_block *);
1597:	void shrink_dcache_parent(struct dentry *);
1292:	void shrink_dcache_sb(struct super_block *);
1155:	void shrink_dentry_list(struct list_head *);
286:	void take_dentry_name_snapshot(struct name_snapshot *, struct dentry *);
3288:	void vfs_caches_init(void);
3277:	void vfs_caches_init_early(void);
485:	static void ___d_drop(struct dentry *);
1741:	static struct dentry *__d_alloc(struct super_block *, const struct qstr *);
267:	static void __d_free(struct callback_head *);
274:	static void __d_free_external(struct callback_head *);
1998:	static void __d_instantiate(struct dentry *, struct inode *);
2081:	static struct dentry *__d_instantiate_anon(struct dentry *, struct inode *, bool);
2886:	static void __d_move(struct dentry *, struct dentry *, bool);
2542:	static void __d_rehash(struct dentry *);
559:	static void __dentry_kill(struct dentry *);
921:	static void __dput_to_list(struct dentry *, struct list_head *);
612:	static struct dentry *__lock_parent(struct dentry *);
1963:	static unsigned int d_flags_for_inode(struct inode *);
3176:	static enum d_walk_ret d_genocide_kill(void *, struct dentry *);
406:	static void d_lru_add(struct dentry *);
416:	static void d_lru_del(struct dentry *);
458:	static void d_lru_shrink_move(struct list_lru_one *, struct dentry *, struct list_head *);
434:	static void d_shrink_add(struct dentry *, struct list_head *);
426:	static void d_shrink_del(struct dentry *);
1326:	static void d_walk(struct dentry *, void *, enum d_walk_ret (*)(void *, struct dentry *));
344:	static void dentry_free(struct dentry *);
721:	static struct dentry *dentry_kill(struct dentry *);
1183:	static enum lru_status dentry_lru_isolate(struct list_head *, struct list_lru_one *, spinlock_t *, void *);
1264:	static enum lru_status dentry_lru_isolate_shrink(struct list_head *, struct list_lru_one *, spinlock_t *, void *);
366:	static void dentry_unlink_inode(struct dentry *);
1685:	static enum d_walk_ret find_submount(void *, struct dentry *);
1437:	static enum d_walk_ret path_check_mount(void *, struct dentry *);
1531:	static enum d_walk_ret select_collect(void *, struct dentry *);
1560:	static enum d_walk_ret select_collect2(void *, struct dentry *);
3215:	static int set_dhash_entries(char *);
1114:	static bool shrink_lock_dentry(struct dentry *);
1635:	static enum d_walk_ret umount_check(void *, struct dentry *);

File fs/dcookies.c:
213:	long __ia32_compat_sys_lookup_dcookie(const struct pt_regs *);
207:	long __ia32_sys_lookup_dcookie(const struct pt_regs *);
207:	long __x64_sys_lookup_dcookie(const struct pt_regs *);
316:	struct dcookie_user *dcookie_register(void);
341:	void dcookie_unregister(struct dcookie_user *);
117:	int get_dcookie(const struct path *, unsigned long *);
94:	static struct dcookie_struct *alloc_dcookie(const struct path *);
290:	static void dcookie_exit(void);
223:	static int dcookie_init(void);
150:	static int do_lookup_dcookie(u64, char *, size_t);

File fs/debugfs/file.c:
366:	ssize_t debugfs_attr_read(struct file *, char *, size_t, loff_t *);
381:	ssize_t debugfs_attr_write(struct file *, const char *, size_t, loff_t *);
769:	void debugfs_create_atomic_t(const char *, umode_t, struct dentry *, atomic_t *);
917:	struct dentry *debugfs_create_blob(const char *, umode_t, struct dentry *, struct debugfs_blob_wrapper *);
864:	struct dentry *debugfs_create_bool(const char *, umode_t, struct dentry *, bool *);
1134:	void debugfs_create_devm_seqfile(struct device *, const char *, struct dentry *, int (*)(struct seq_file *, void *));
1094:	void debugfs_create_regset32(const char *, umode_t, struct dentry *, struct debugfs_regset32 *);
733:	void debugfs_create_size_t(const char *, umode_t, struct dentry *, size_t *);
478:	void debugfs_create_u16(const char *, umode_t, struct dentry *, u16 *);
514:	void debugfs_create_u32(const char *, umode_t, struct dentry *, u32 *);
1005:	void debugfs_create_u32_array(const char *, umode_t, struct dentry *, struct debugfs_u32_array *);
551:	void debugfs_create_u64(const char *, umode_t, struct dentry *, u64 *);
442:	void debugfs_create_u8(const char *, umode_t, struct dentry *, u8 *);
599:	struct dentry *debugfs_create_ulong(const char *, umode_t, struct dentry *, unsigned long *);
663:	void debugfs_create_x16(const char *, umode_t, struct dentry *, u16 *);
681:	void debugfs_create_x32(const char *, umode_t, struct dentry *, u32 *);
699:	void debugfs_create_x64(const char *, umode_t, struct dentry *, u64 *);
645:	void debugfs_create_x8(const char *, umode_t, struct dentry *, u8 *);
82:	int debugfs_file_get(struct dentry *);
132:	void debugfs_file_put(struct dentry *);
1036:	void debugfs_print_regs32(struct seq_file *, const struct debugfs_reg32 *, int, void *, char *);
777:	ssize_t debugfs_read_file_bool(struct file *, char *, size_t, loff_t *);
50:	const struct file_operations *debugfs_real_fops(const struct file *);
801:	ssize_t debugfs_write_file_bool(struct file *, const char *, size_t, loff_t *);
746:	static int debugfs_atomic_t_get(void *, u64 *);
741:	static int debugfs_atomic_t_set(void *, u64);
1109:	static int debugfs_devm_entry_open(struct inode *, struct file *);
146:	static int debugfs_locked_down(struct file *, const struct file_operations *, struct inode *, struct inode *);
1067:	static int debugfs_open_regset32(struct inode *, struct file *);
1052:	static int debugfs_show_regset32(struct seq_file *, void *);
455:	static int debugfs_u16_get(void *, u64 *);
450:	static int debugfs_u16_set(void *, u64);
491:	static int debugfs_u32_get(void *, u64 *);
486:	static int debugfs_u32_set(void *, u64);
528:	static int debugfs_u64_get(void *, u64 *);
522:	static int debugfs_u64_set(void *, u64);
419:	static int debugfs_u8_get(void *, u64 *);
414:	static int debugfs_u8_set(void *, u64);
565:	static int debugfs_ulong_get(void *, u64 *);
559:	static int debugfs_ulong_set(void *, u64);
29:	static ssize_t default_read_file(struct file *, char *, size_t, loff_t *);
35:	static ssize_t default_write_file(struct file *, const char *, size_t, loff_t *);
751:	static int fops_atomic_t_open(struct inode *, struct file *);
753:	static int fops_atomic_t_ro_open(struct inode *, struct file *);
755:	static int fops_atomic_t_wo_open(struct inode *, struct file *);
718:	static int fops_size_t_open(struct inode *, struct file *);
720:	static int fops_size_t_ro_open(struct inode *, struct file *);
721:	static int fops_size_t_wo_open(struct inode *, struct file *);
460:	static int fops_u16_open(struct inode *, struct file *);
461:	static int fops_u16_ro_open(struct inode *, struct file *);
462:	static int fops_u16_wo_open(struct inode *, struct file *);
496:	static int fops_u32_open(struct inode *, struct file *);
497:	static int fops_u32_ro_open(struct inode *, struct file *);
498:	static int fops_u32_wo_open(struct inode *, struct file *);
533:	static int fops_u64_open(struct inode *, struct file *);
534:	static int fops_u64_ro_open(struct inode *, struct file *);
535:	static int fops_u64_wo_open(struct inode *, struct file *);
424:	static int fops_u8_open(struct inode *, struct file *);
425:	static int fops_u8_ro_open(struct inode *, struct file *);
426:	static int fops_u8_wo_open(struct inode *, struct file *);
570:	static int fops_ulong_open(struct inode *, struct file *);
572:	static int fops_ulong_ro_open(struct inode *, struct file *);
573:	static int fops_ulong_wo_open(struct inode *, struct file *);
612:	static int fops_x16_open(struct inode *, struct file *);
614:	static int fops_x16_ro_open(struct inode *, struct file *);
615:	static int fops_x16_wo_open(struct inode *, struct file *);
617:	static int fops_x32_open(struct inode *, struct file *);
619:	static int fops_x32_ro_open(struct inode *, struct file *);
620:	static int fops_x32_wo_open(struct inode *, struct file *);
622:	static int fops_x64_open(struct inode *, struct file *);
624:	static int fops_x64_ro_open(struct inode *, struct file *);
625:	static int fops_x64_wo_open(struct inode *, struct file *);
608:	static int fops_x8_open(struct inode *, struct file *);
609:	static int fops_x8_ro_open(struct inode *, struct file *);
610:	static int fops_x8_wo_open(struct inode *, struct file *);
227:	static loff_t full_proxy_llseek(struct file *, loff_t, int);
299:	static int full_proxy_open(struct inode *, struct file *);
245:	static __poll_t full_proxy_poll(struct file *, struct poll_table_struct *);
231:	static ssize_t full_proxy_read(struct file *, char *, size_t, loff_t *);
261:	static int full_proxy_release(struct inode *, struct file *);
241:	static long full_proxy_unlocked_ioctl(struct file *, unsigned int, unsigned long);
236:	static ssize_t full_proxy_write(struct file *, const char *, size_t, loff_t *);
163:	static int open_proxy_open(struct inode *, struct file *);
872:	static ssize_t read_file_blob(struct file *, char *, size_t, loff_t *);
943:	static int u32_array_open(struct inode *, struct file *);
966:	static ssize_t u32_array_read(struct file *, char *, size_t, loff_t *);
975:	static int u32_array_release(struct inode *, struct file *);

File fs/debugfs/inode.c:
598:	struct dentry *debugfs_create_automount(const char *, struct dentry *, debugfs_automount_t, void *);
554:	struct dentry *debugfs_create_dir(const char *, struct dentry *);
453:	struct dentry *debugfs_create_file(const char *, umode_t, struct dentry *, void *, const struct file_operations *);
523:	void debugfs_create_file_size(const char *, umode_t, struct dentry *, void *, const struct file_operations *, loff_t);
492:	struct dentry *debugfs_create_file_unsafe(const char *, umode_t, struct dentry *, void *, const struct file_operations *);
657:	struct dentry *debugfs_create_symlink(const char *, struct dentry *, const char *);
811:	bool debugfs_initialized(void);
299:	struct dentry *debugfs_lookup(const char *, struct dentry *);
725:	void debugfs_remove(struct dentry *);
755:	struct dentry *debugfs_rename(struct dentry *, struct dentry *, struct dentry *, const char *);
385:	static struct dentry *__debugfs_create_file(const char *, umode_t, struct dentry *, void *, const struct file_operations *, const struct file_operations *);
235:	static int debug_fill_super(struct super_block *, void *, int);
269:	static struct dentry *debug_mount(struct file_system_type *, int, const char *, void *);
222:	static struct vfsmount *debugfs_automount(struct path *);
200:	static void debugfs_free_inode(struct inode *);
69:	static struct inode *debugfs_get_inode(struct super_block *);
831:	static int debugfs_init(void);
817:	static int debugfs_kernel(char *);
104:	static int debugfs_parse_options(char *, struct debugfs_mount_opts *);
214:	static void debugfs_release_dentry(struct dentry *);
167:	static int debugfs_remount(struct super_block *, int *, char *);
45:	static int debugfs_setattr(struct dentry *, struct iattr *);
183:	static int debugfs_show_options(struct seq_file *, struct dentry *);
371:	static struct dentry *failed_creating(struct dentry *);
705:	static void remove_one(struct dentry *);
316:	static struct dentry *start_creating(const char *, struct dentry *);

File fs/devpts/inode.c:
199:	struct pts_fs_info *devpts_acquire(struct file *);
605:	void *devpts_get_priv(struct dentry *);
547:	void devpts_kill_index(struct pts_fs_info *, int);
168:	struct vfsmount *devpts_mntget(struct file *, struct pts_fs_info *);
530:	int devpts_new_index(struct pts_fs_info *);
618:	void devpts_pty_kill(struct dentry *);
562:	struct dentry *devpts_pty_new(struct pts_fs_info *, int, void *);
231:	void devpts_release(struct pts_fs_info *);
445:	static int devpts_fill_super(struct super_block *, void *, int);
508:	static void devpts_kill_sb(struct super_block *);
502:	static struct dentry *devpts_mount(struct file_system_type *, int, const char *, void *);
384:	static int devpts_remount(struct super_block *, int *, char *);
403:	static int devpts_show_options(struct seq_file *, struct dentry *);
629:	static int init_devpts_fs(void);
322:	static int mknod_ptmx(struct super_block *);
246:	static int parse_mount_options(char *, int, struct pts_mount_opts *);

File fs/direct-io.c:
1348:	ssize_t __blockdev_direct_IO(struct kiocb *, struct inode *, struct block_device *, struct iov_iter *, get_block_t *, dio_iodone_t *, dio_submit_t *, int);
574:	int sb_init_dio_done_wq(struct super_block *);
318:	static void dio_aio_complete_work(struct work_struct *);
465:	static struct bio *dio_await_one(struct dio *);
500:	static blk_status_t dio_bio_complete(struct dio *, struct bio *);
330:	static void dio_bio_end_aio(struct bio *);
376:	static void dio_bio_end_io(struct bio *);
236:	static ssize_t dio_complete(struct dio *, ssize_t, unsigned int);
1372:	static int dio_init(void);
925:	static int do_direct_IO(struct dio *, struct dio_submit *, struct buffer_head *);

File fs/dirty_pages.c:
454:	static void dpages_proc_exit(void);
417:	static int dpages_proc_init(void);
44:	static unsigned long dump_dirtypages_inode(struct inode *);
106:	static void dump_dirtypages_sb(struct super_block *, struct seq_file *);
310:	static int proc_dpages_open(struct inode *, struct file *);
180:	static int proc_dpages_show(struct seq_file *, void *);
354:	static int proc_limit_open(struct inode *, struct file *);
343:	static int proc_limit_show(struct seq_file *, void *);
349:	static int proc_switch_open(struct inode *, struct file *);
337:	static int proc_switch_show(struct seq_file *, void *);
187:	static ssize_t seq_read_dirty(struct file *, char *, size_t, loff_t *);
321:	static int seq_release_dirty(struct inode *, struct file *);
359:	static ssize_t write_limit_proc(struct file *, const char *, size_t, loff_t *);
247:	static ssize_t write_proc(struct file *, const char *, size_t, loff_t *);

File fs/drop_caches.c:
59:	int drop_caches_sysctl_handler(struct ctl_table *, int, void *, size_t *, loff_t *);
89:	int proc_shrink_node_caches(struct ctl_table *, int, void *, size_t *, loff_t *);
22:	static void drop_pagecache_sb(struct super_block *, void *);

File fs/efivarfs/file.c:
171:	static long efivarfs_file_ioctl(struct file *, unsigned int, unsigned long);
66:	static ssize_t efivarfs_file_read(struct file *, char *, size_t, loff_t *);
15:	static ssize_t efivarfs_file_write(struct file *, const char *, size_t, loff_t *);
132:	static int efivarfs_ioc_setxflags(struct file *, void *);

File fs/efivarfs/inode.c:
16:	struct inode *efivarfs_get_inode(struct super_block *, const struct inode *, int, dev_t, bool);
46:	bool efivarfs_valid_name(const char *, int);
69:	static int efivarfs_create(struct inode *, struct dentry *, umode_t, bool);
124:	static int efivarfs_unlink(struct inode *, struct dentry *);

File fs/efivarfs/super.c:
86:	static struct dentry *efivarfs_alloc_dentry(struct dentry *, char *);
106:	static int efivarfs_callback(efi_char16_t *, efi_guid_t, unsigned long, void *);
43:	static int efivarfs_d_compare(const struct dentry *, unsigned int, const char *, const struct qstr *);
60:	static int efivarfs_d_hash(const struct dentry *, struct qstr *);
183:	static int efivarfs_destroy(struct efivar_entry *, void *);
21:	static void efivarfs_evict_inode(struct inode *);
267:	static void efivarfs_exit(void);
193:	static int efivarfs_fill_super(struct super_block *, struct fs_context *);
229:	static int efivarfs_get_tree(struct fs_context *);
259:	static int efivarfs_init(void);
238:	static int efivarfs_init_fs_context(struct fs_context *);
244:	static void efivarfs_kill_sb(struct super_block *);

File fs/eventfd.c:
453:	long __ia32_sys_eventfd(const struct pt_regs *);
448:	long __ia32_sys_eventfd2(const struct pt_regs *);
453:	long __x64_sys_eventfd(const struct pt_regs *);
448:	long __x64_sys_eventfd2(const struct pt_regs *);
370:	struct eventfd_ctx *eventfd_ctx_fdget(int);
391:	struct eventfd_ctx *eventfd_ctx_fileget(struct file *, struct file *);
112:	void eventfd_ctx_put(struct eventfd_ctx *);
204:	int eventfd_ctx_remove_wait_queue(struct eventfd_ctx *, wait_queue_entry_t *, __u64 *);
345:	struct file *eventfd_fget(int);
62:	__u64 eventfd_signal(struct eventfd_ctx *, __u64);
404:	static int do_eventfd(unsigned int, int);
127:	static __poll_t eventfd_poll(struct file *, poll_table *);
220:	static ssize_t eventfd_read(struct kiocb *, struct iov_iter *);
118:	static int eventfd_release(struct inode *, struct file *);
312:	static void eventfd_show_fdinfo(struct seq_file *, struct file *);
264:	static ssize_t eventfd_write(struct file *, const char *, size_t, loff_t *);

File fs/eventpoll.c:
2374:	long __ia32_compat_sys_epoll_pwait(const struct pt_regs *);
2101:	long __ia32_sys_epoll_create(const struct pt_regs *);
2096:	long __ia32_sys_epoll_create1(const struct pt_regs *);
2285:	long __ia32_sys_epoll_ctl(const struct pt_regs *);
2353:	long __ia32_sys_epoll_pwait(const struct pt_regs *);
2343:	long __ia32_sys_epoll_wait(const struct pt_regs *);
2101:	long __x64_sys_epoll_create(const struct pt_regs *);
2096:	long __x64_sys_epoll_create1(const struct pt_regs *);
2285:	long __x64_sys_epoll_ctl(const struct pt_regs *);
2353:	long __x64_sys_epoll_pwait(const struct pt_regs *);
2343:	long __x64_sys_epoll_wait(const struct pt_regs *);
2121:	int do_epoll_ctl(int, int, int, struct epoll_event *, bool);
984:	void eventpoll_release_file(struct file *);
1091:	struct file *get_epoll_tfile_raw_ptr(struct file *, int, unsigned long);
2053:	static int do_epoll_create(int);
2301:	static int do_epoll_wait(int, struct epoll_event *, int, int);
1012:	static int ep_alloc(struct eventpoll **);
382:	static bool ep_busy_loop_end(void *, unsigned long);
476:	static int ep_call_nested(int (*)(void *, void *, int), void *, void *, void *, struct nested_calls *);
1455:	static int ep_create_wakeup_source(struct epitem *);
1478:	static void ep_destroy_wakeup_source(struct epitem *);
929:	static __poll_t ep_eventpoll_poll(struct file *, poll_table *);
863:	static int ep_eventpoll_release(struct inode *, struct file *);
811:	static void ep_free(struct eventpoll *);
1496:	static int ep_insert(struct eventpoll *, const struct epoll_event *, struct file *, int, int);
883:	static __poll_t ep_item_poll(const struct epitem *, poll_table *, int);
1976:	static int ep_loop_check_proc(void *, void *, int);
1628:	static int ep_modify(struct eventpoll *, struct epitem *, const struct epoll_event *);
1824:	static int ep_poll(struct eventpoll *, struct epoll_event *, int, long);
1210:	static int ep_poll_callback(wait_queue_entry_t *, unsigned int, int, void *);
1315:	static void ep_ptable_queue_proc(struct file *, wait_queue_head_t *, poll_table *);
902:	static __poll_t ep_read_events_proc(struct eventpoll *, struct list_head *, void *);
773:	static int ep_remove(struct eventpoll *, struct epitem *);
677:	static __poll_t ep_scan_ready_list(struct eventpoll *, __poll_t (*)(struct eventpoll *, struct list_head *, void *), void *, bool, int);
1700:	static __poll_t ep_send_events_proc(struct eventpoll *, struct list_head *, void *);
946:	static void ep_show_fdinfo(struct seq_file *, struct file *);
618:	static void ep_unregister_pollwait(struct epitem *, struct eventpoll *);
763:	static void epi_rcu_free(struct callback_head *);
2397:	static int eventpoll_init(void);
1394:	static int reverse_path_check_proc(void *, void *, int);

File fs/exec.c:
1209:	char *__get_task_comm(char *, size_t, struct task_struct *);
2076:	long __ia32_compat_sys_execve(const struct pt_regs *);
2083:	long __ia32_compat_sys_execveat(const struct pt_regs *);
2054:	long __ia32_sys_execve(const struct pt_regs *);
2062:	long __ia32_sys_execveat(const struct pt_regs *);
84:	void __register_binfmt(struct linux_binfmt *, int);
1223:	void __set_task_comm(struct task_struct *, const char *, bool);
2054:	long __x64_sys_execve(const struct pt_regs *);
2062:	long __x64_sys_execveat(const struct pt_regs *);
1238:	int begin_new_exec(struct linux_binprm *);
1525:	int bprm_change_interp(const char *, struct linux_binprm *);
607:	int copy_string_kernel(const char *, struct linux_binprm *);
1440:	void finalize_exec(struct linux_binprm *);
1924:	int kernel_execve(const char *, const char * const *, const char * const *);
941:	struct file *open_exec(const char *);
111:	bool path_noexec(const struct path *);
1649:	int remove_arg_zero(struct linux_binprm *);
2030:	void set_binfmt(struct linux_binfmt *);
2046:	void set_dumpable(struct mm_struct *, int);
741:	int setup_arg_pages(struct linux_binprm *, unsigned long, int);
1420:	void setup_new_exec(struct linux_binprm *);
97:	void unregister_binfmt(struct linux_binfmt *);
1399:	void would_dump(struct linux_binprm *, struct file *);
248:	static int __bprm_mm_init(struct linux_binprm *);
188:	static void acct_arg_size(struct linux_binprm *, unsigned long);
1492:	static struct linux_binprm *alloc_bprm(int, struct filename *);
1783:	static int bprm_execve(struct linux_binprm *, int, struct filename *, int);
1574:	static void bprm_fill_uid(struct linux_binprm *, struct file *);
363:	static int bprm_mm_init(struct linux_binprm *);
1542:	static void check_unsafe_exec(struct linux_binprm *);
512:	static int copy_strings(int, struct linux_binprm *, struct user_arg_ptr, struct user_arg_ptr);
648:	static int copy_strings_kernel(int, const char * const *, struct linux_binprm *);
429:	static int count(struct user_arg_ptr, int);
455:	static int count_strings_kernel(const char * const *);
1037:	static int de_thread(struct task_struct *);
1855:	static int do_execveat_common(int, struct filename *, struct user_arg_ptr, struct user_arg_ptr, int);
894:	static struct file *do_open_execat(int, struct filename *, int);
1735:	static int exec_binprm(struct linux_binprm *);
971:	static int exec_mmap(struct mm_struct *);
1468:	static void free_bprm(struct linux_binprm *);
200:	static struct page *get_arg_page(struct linux_binprm *, unsigned long, int);
233:	static void put_arg_page(struct page *);
1689:	static int search_binary_handler(struct linux_binprm *);
676:	static int shift_arg_pages(struct vm_area_struct *, unsigned long);
1180:	static int unshare_sighand(struct task_struct *);

File fs/exportfs/expfs.c:
420:	struct dentry *exportfs_decode_fh(struct vfsmount *, struct fid *, int, int, int (*)(void *, struct dentry *), void *);
397:	int exportfs_encode_fh(struct dentry *, struct fid *, int *, int);
385:	int exportfs_encode_inode_fh(struct inode *, struct fid *, int *, struct inode *);
91:	static void clear_disconnected(struct dentry *);
251:	static int filldir_one(struct dir_context *, const char *, int, loff_t, u64, unsigned int);
43:	static struct dentry *find_acceptable_alias(struct dentry *, int (*)(void *, struct dentry *), void *);
277:	static int get_name(const struct path *, char *, struct dentry *);
121:	static struct dentry *reconnect_one(struct vfsmount *, struct dentry *, char *);
212:	static int reconnect_path(struct vfsmount *, struct dentry *, char *);

File fs/fcntl.c:
105:	void __f_setown(struct file *, struct pid *, enum pid_type, int);
681:	long __ia32_compat_sys_fcntl(const struct pt_regs *);
675:	long __ia32_compat_sys_fcntl64(const struct pt_regs *);
448:	long __ia32_sys_fcntl(const struct pt_regs *);
448:	long __x64_sys_fcntl(const struct pt_regs *);
144:	void f_delown(struct file *);
149:	pid_t f_getown(struct file *);
113:	int f_setown(struct file *, unsigned long, int);
897:	struct fasync_struct *fasync_alloc(void);
907:	void fasync_free(struct fasync_struct *);
982:	int fasync_helper(int, struct file *, int, struct fasync_struct **);
919:	struct fasync_struct *fasync_insert_entry(int, struct file *, struct fasync_struct **, struct fasync_struct *);
871:	int fasync_remove_entry(struct file *, struct fasync_struct **);
1019:	void kill_fasync(struct fasync_struct **, int, int);
780:	void send_sigio(struct fown_struct *, int, int);
818:	int send_sigurg(struct fown_struct *);
448:	static long __se_sys_fcntl(long, long, long);
610:	static long do_compat_fcntl64(unsigned int, unsigned int, compat_ulong_t);
322:	static long do_fcntl(int, unsigned int, unsigned long, struct file *);
200:	static int f_getown_ex(struct file *, unsigned long);
87:	static void f_modown(struct file *, struct pid *, enum pid_type, int);
856:	static void fasync_free_rcu(struct callback_head *);
1032:	static int fcntl_init(void);
276:	static long fcntl_rw_hint(struct file *, unsigned int, unsigned long);
724:	static void send_sigio_to_task(struct task_struct *, struct fown_struct *, int, int, enum pid_type);
811:	static void send_sigurg_to_task(struct task_struct *, struct fown_struct *, enum pid_type);
35:	static int setfl(int, struct file *, unsigned long);

File fs/fhandle.c:
274:	long __ia32_compat_sys_open_by_handle_at(const struct pt_regs *);
93:	long __ia32_sys_name_to_handle_at(const struct pt_regs *);
256:	long __ia32_sys_open_by_handle_at(const struct pt_regs *);
93:	long __x64_sys_name_to_handle_at(const struct pt_regs *);
256:	long __x64_sys_open_by_handle_at(const struct pt_regs *);
93:	static long __se_sys_name_to_handle_at(long, long, long, long, long);
215:	static long do_handle_open(int, struct file_handle *, int);
17:	static long do_sys_name_to_handle(struct path *, struct file_handle *, int *);
167:	static int handle_to_path(int, struct file_handle *, struct path *);
134:	static int vfs_dentry_acceptable(void *, struct dentry *);

File fs/file.c:
532:	int __alloc_fd(struct files_struct *, unsigned int, unsigned int, unsigned int);
712:	int __close_fd(struct files_struct *, unsigned int);
807:	int __close_fd_get_file(unsigned int, struct file **);
733:	int __close_range(unsigned int, unsigned int, unsigned int);
1029:	void __f_unlock_pos(struct file *);
654:	void __fd_install(struct files_struct *, unsigned int, struct file *);
1004:	unsigned long __fdget(unsigned int);
1015:	unsigned long __fdget_pos(unsigned int);
1010:	unsigned long __fdget_raw(unsigned int);
601:	int __get_unused_fd_flags(unsigned int, unsigned long);
1251:	long __ia32_sys_dup(const struct pt_regs *);
1236:	long __ia32_sys_dup2(const struct pt_regs *);
1231:	long __ia32_sys_dup3(const struct pt_regs *);
1158:	int __receive_fd(int, struct file *, int *, unsigned int);
1251:	long __x64_sys_dup(const struct pt_regs *);
1236:	long __x64_sys_dup2(const struct pt_regs *);
1231:	long __x64_sys_dup3(const struct pt_regs *);
833:	void do_close_on_exec(struct files_struct *);
286:	struct files_struct *dup_fd(struct files_struct *, unsigned int, int *);
489:	void exit_files(struct task_struct *);
1266:	int f_dupfd(unsigned int, struct file *, unsigned int);
682:	void fd_install(unsigned int, struct file *);
947:	struct file *fget(unsigned int);
942:	struct file *fget_many(unsigned int, unsigned int);
953:	struct file *fget_raw(unsigned int);
959:	struct file *fget_task(struct task_struct *, unsigned int);
1053:	bool get_close_on_exec(unsigned int);
452:	struct files_struct *get_files_struct(struct task_struct *);
606:	int get_unused_fd_flags(unsigned int);
1279:	int iterate_fd(struct files_struct *, unsigned int, int (*)(const void *, struct file *, unsigned int), const void *);
465:	void put_files_struct(struct files_struct *);
624:	void put_unused_fd(unsigned int);
1119:	int replace_fd(unsigned int, struct file *, unsigned int);
477:	void reset_files_struct(struct files_struct *);
1040:	void set_close_on_exec(unsigned int, int);
924:	static struct file *__fget_files(struct files_struct *, unsigned int, fmode_t, unsigned int);
987:	static unsigned long __fget_light(unsigned int, fmode_t);
612:	static void __put_unused_fd(struct files_struct *, unsigned int);
1251:	static long __se_sys_dup(long);
89:	static struct fdtable *alloc_fdtable(unsigned int);
412:	static struct fdtable *close_files(struct files_struct *);
53:	static void copy_fd_bitmaps(struct fdtable *, struct fdtable *, unsigned int);
1065:	static int do_dup2(struct files_struct *, struct file *, unsigned int, unsigned int);
152:	static int expand_fdtable(struct files_struct *, unsigned int);
197:	static int expand_files(struct files_struct *, unsigned int);
40:	static void free_fdtable_rcu(struct callback_head *);
1197:	static int ksys_dup3(unsigned int, unsigned int, int);
689:	static struct file *pick_file(struct files_struct *, unsigned int);

File fs/file_table.c:
369:	void __fput_sync(struct file *);
134:	struct file *alloc_empty_file(int, const struct cred *);
171:	struct file *alloc_empty_file_noaccount(int, const struct cred *);
242:	struct file *alloc_file_clone(struct file *, int, const struct file_operations *);
215:	struct file *alloc_file_pseudo(struct inode *, struct vfsmount *, const char *, int, const struct file_operations *);
380:	void files_init(void);
391:	void files_maxfiles_init(void);
327:	void flush_delayed_fput(void);
356:	void fput(struct file *);
335:	void fput_many(struct file *, unsigned int);
72:	unsigned long get_max_files(void);
82:	int proc_nr_files(struct ctl_table *, int, void *, size_t *, loff_t *);
312:	static void ____fput(struct callback_head *);
96:	static struct file *__alloc_file(int, const struct cred *);
255:	static void __fput(struct file *);
188:	static struct file *alloc_file(const struct path *, int, const struct file_operations *);
303:	static void delayed_fput(struct work_struct *);
45:	static void file_free_rcu(struct callback_head *);

File fs/filescontrol.c:
152:	int files_cgroup_alloc_fd(struct files_struct *, u64);
287:	void files_cgroup_assign(struct files_struct *);
93:	u64 files_cgroup_count_fds(struct files_struct *);
298:	void files_cgroup_remove(struct files_struct *);
176:	void files_cgroup_unalloc_fd(struct files_struct *, u64);
109:	static int files_cgroup_can_attach(struct cgroup_taskset *);
63:	static struct cgroup_subsys_state *files_cgroup_css_alloc(struct cgroup_subsys_state *);
88:	static void files_cgroup_css_free(struct cgroup_subsys_state *);
190:	static u64 files_disabled_read(struct cgroup_subsys_state *, struct cftype *);
196:	static int files_disabled_write(struct cgroup_subsys_state *, struct cftype *, u64);
206:	static int files_limit_read(struct seq_file *, void *);
220:	static ssize_t files_limit_write(struct kernfs_open_file *, char *, size_t, loff_t);
247:	static u64 files_usage_read(struct cgroup_subsys_state *, struct cftype *);

File fs/filesystems.c:
191:	long __ia32_sys_sysfs(const struct pt_regs *);
191:	long __x64_sys_sysfs(const struct pt_regs *);
38:	struct file_system_type *get_filesystem(struct file_system_type *);
212:	int get_filesystem_list(char *);
266:	struct file_system_type *get_fs_type(const char *);
44:	void put_filesystem(struct file_system_type *);
72:	int register_filesystem(struct file_system_type *);
108:	int unregister_filesystem(struct file_system_type *);
254:	static struct file_system_type *__get_fs_type(const char *, int);
191:	static long __se_sys_sysfs(long, long, long);
230:	static int filesystems_proc_show(struct seq_file *, void *);
156:	static int fs_name(unsigned int, char *);
246:	static int proc_filesystems_init(void);

File fs/fs-writeback.c:
250:	void __inode_attach_wb(struct inode *, struct page *);
2231:	void __mark_inode_dirty(struct inode *, int);
925:	int cgroup_writeback_by_id(u64, int, unsigned long, enum wb_reason, struct wb_completion *);
1007:	void cgroup_writeback_umount(void);
2194:	int dirtytime_interval_handler(struct ctl_table *, int, void *, size_t *, loff_t *);
786:	int inode_congested(struct inode *, int);
1127:	void inode_io_list_del(struct inode *);
1356:	void inode_wait_for_writeback(struct inode *);
1160:	void sb_clear_inode_writeback(struct inode *);
1142:	void sb_mark_inode_writeback(struct inode *);
2583:	int sync_inode(struct inode *, struct writeback_control *);
2598:	int sync_inode_metadata(struct inode *, int);
2512:	void sync_inodes_sb(struct super_block *);
2495:	void try_to_writeback_inodes_sb(struct super_block *, enum wb_reason);
2137:	void wakeup_flusher_threads(enum wb_reason);
2126:	void wakeup_flusher_threads_bdi(struct backing_dev_info *, enum wb_reason);
1114:	void wb_start_background_writeback(struct bdi_writeback *);
206:	void wb_wait_for_completion(struct wb_completion *);
2070:	void wb_workfn(struct work_struct *);
730:	void wbc_account_cgroup_owner(struct writeback_control *, struct page *, size_t);
564:	void wbc_attach_and_unlock_inode(struct writeback_control *, struct inode *);
634:	void wbc_detach_inode(struct writeback_control *);
2555:	int write_inode_now(struct inode *, int);
2482:	void writeback_inodes_sb(struct super_block *, enum wb_reason);
2465:	void writeback_inodes_sb_nr(struct super_block *, unsigned long, enum wb_reason);
1337:	static void __inode_wait_for_writeback(struct inode *);
2433:	static void __writeback_inodes_sb_nr(struct super_block *, unsigned long, enum wb_reason, bool);
1779:	static long __writeback_inodes_wb(struct bdi_writeback *, struct wb_writeback_work *);
1456:	static int __writeback_single_inode(struct inode *, struct writeback_control *);
846:	static void bdi_split_work_to_wbs(struct backing_dev_info *, struct wb_writeback_work *, bool);
1019:	static int cgroup_writeback_init(void);
161:	static void finish_writeback_work(struct wb_writeback_work *, struct bdi_writeback *);
142:	static void inode_io_list_del_locked(struct inode *, struct bdi_writeback *);
118:	static bool inode_io_list_move_locked(struct inode *, struct bdi_writeback *, struct list_head *);
1368:	static void inode_sleep_on_writeback(struct inode *);
490:	static void inode_switch_wbs(struct inode *, int);
472:	static void inode_switch_wbs_rcu_fn(struct callback_head *);
352:	static void inode_switch_wbs_work_fn(struct work_struct *);
290:	static struct bdi_writeback *locked_inode_to_wb_and_lock_list(struct inode *);
1245:	static int move_expired_inodes(struct list_head *, struct list_head *, unsigned long);
1302:	static void queue_io(struct bdi_writeback *, struct wb_writeback_work *, unsigned long);
1199:	static void redirty_tail(struct inode *, struct bdi_writeback *);
1184:	static void redirty_tail_locked(struct inode *, struct bdi_writeback *);
2187:	static int start_dirtytime_writeback(void);
2348:	static void wait_sb_inodes(struct super_block *);
2171:	static void wakeup_dirtytime_writeback(struct work_struct *);
1978:	static long wb_check_old_data_flush(struct bdi_writeback *);
2012:	static long wb_check_start_all(struct bdi_writeback *);
2039:	static long wb_do_writeback(struct bdi_writeback *);
98:	static void wb_io_lists_depopulated(struct bdi_writeback *);
85:	static bool wb_io_lists_populated(struct bdi_writeback *);
177:	static void wb_queue_work(struct bdi_writeback *, struct wb_writeback_work *);
1850:	static long wb_writeback(struct bdi_writeback *, struct wb_writeback_work *);
1320:	static int write_inode(struct inode *, struct writeback_control *);
1813:	static long writeback_inodes_wb(struct bdi_writeback *, enum wb_reason, long);
1637:	static long writeback_sb_inodes(struct super_block *, struct bdi_writeback *, struct wb_writeback_work *);
1540:	static int writeback_single_inode(struct inode *, struct writeback_control *);

File fs/fs_context.c:
325:	void fc_drop_locked(struct fs_context *);
699:	int finish_clean_context(struct fs_context *);
301:	struct fs_context *fs_context_for_mount(struct file_system_type *, unsigned int);
309:	struct fs_context *fs_context_for_reconfigure(struct dentry *, unsigned int, unsigned int);
318:	struct fs_context *fs_context_for_submount(struct file_system_type *, struct dentry *);
201:	int generic_parse_monolithic(struct fs_context *, void *);
385:	void logfc(struct fc_log *, const char *, char, const char *, ...);
659:	int parse_monolithic_mount_data(struct fs_context *, void *);
457:	void put_fs_context(struct fs_context *);
683:	void vfs_clean_context(struct fs_context *);
339:	struct fs_context *vfs_dup_fs_context(struct fs_context *);
127:	int vfs_parse_fs_param(struct fs_context *, struct fs_parameter *);
94:	int vfs_parse_fs_param_source(struct fs_context *, struct fs_parameter *);
166:	int vfs_parse_fs_string(struct fs_context *, const char *, const char *, size_t);
247:	static struct fs_context *alloc_fs_context(struct file_system_type *, struct dentry *, unsigned int, unsigned int, enum fs_context_purpose);
499:	static int legacy_fs_context_dup(struct fs_context *, struct fs_context *);
485:	static void legacy_fs_context_free(struct fs_context *);
604:	static int legacy_get_tree(struct fs_context *);
650:	static int legacy_init_fs_context(struct fs_context *);
582:	static int legacy_parse_monolithic(struct fs_context *, void *);
525:	static int legacy_parse_param(struct fs_context *, struct fs_parameter *);
625:	static int legacy_reconfigure(struct fs_context *);

File fs/fs_parser.c:
103:	int __fs_parse(struct p_log *, const struct fs_parameter_spec *, struct fs_parameter *, struct fs_parse_result *);
143:	int fs_lookup_param(struct fs_context *, struct fs_parameter *, bool, struct path *);
265:	int fs_param_is_blob(struct p_log *, const struct fs_parameter_spec *, struct fs_parameter *, struct fs_parse_result *);
296:	int fs_param_is_blockdev(struct p_log *, const struct fs_parameter_spec *, struct fs_parameter *, struct fs_parse_result *);
197:	int fs_param_is_bool(struct p_log *, const struct fs_parameter_spec *, struct fs_parameter *, struct fs_parse_result *);
242:	int fs_param_is_enum(struct p_log *, const struct fs_parameter_spec *, struct fs_parameter *, struct fs_parse_result *);
274:	int fs_param_is_fd(struct p_log *, const struct fs_parameter_spec *, struct fs_parameter *, struct fs_parse_result *);
222:	int fs_param_is_s32(struct p_log *, const struct fs_parameter_spec *, struct fs_parameter *, struct fs_parse_result *);
256:	int fs_param_is_string(struct p_log *, const struct fs_parameter_spec *, struct fs_parameter *, struct fs_parse_result *);
211:	int fs_param_is_u32(struct p_log *, const struct fs_parameter_spec *, struct fs_parameter *, struct fs_parse_result *);
232:	int fs_param_is_u64(struct p_log *, const struct fs_parameter_spec *, struct fs_parameter *, struct fs_parse_result *);
41:	int lookup_constant(const struct constant_table *, const char *, int);

File fs/fs_pin.c:
85:	void group_pin_kill(struct hlist_head *);
71:	void mnt_pin_kill(struct mount *);
22:	void pin_insert(struct fs_pin *, struct vfsmount *);
30:	void pin_kill(struct fs_pin *);
10:	void pin_remove(struct fs_pin *);

File fs/fs_struct.c:
58:	void chroot_fs_refs(const struct path *, const struct path *);
112:	struct fs_struct *copy_fs_struct(struct fs_struct *);
156:	int current_umask(void);
95:	void exit_fs(struct task_struct *);
88:	void free_fs_struct(struct fs_struct *);
34:	void set_fs_pwd(struct fs_struct *, const struct path *);
15:	void set_fs_root(struct fs_struct *, const struct path *);
133:	int unshare_fs_struct(void);

File fs/fs_types.c:
37:	unsigned char fs_ftype_to_dtype(unsigned int);
101:	unsigned char fs_umode_to_dtype(umode_t);
77:	unsigned char fs_umode_to_ftype(umode_t);

File fs/fsopen.c:
314:	long __ia32_sys_fsconfig(const struct pt_regs *);
115:	long __ia32_sys_fsopen(const struct pt_regs *);
158:	long __ia32_sys_fspick(const struct pt_regs *);
314:	long __x64_sys_fsconfig(const struct pt_regs *);
115:	long __x64_sys_fsopen(const struct pt_regs *);
158:	long __x64_sys_fspick(const struct pt_regs *);
314:	static long __se_sys_fsconfig(long, long, long, long, long);
115:	static long __se_sys_fsopen(long, long);
158:	static long __se_sys_fspick(long, long, long);
24:	static ssize_t fscontext_read(struct file *, char *, size_t, loff_t *);
67:	static int fscontext_release(struct inode *, struct file *);

File fs/hugetlbfs/inode.c:
1518:	struct file *hugetlb_file_setup(const char *, size_t, vm_flags_t, struct user_struct **, int, int);
946:	static int do_hugetlbfs_mknod(struct inode *, struct dentry *, umode_t, dev_t, bool);
112:	static void huge_pagevec_release(struct pagevec *);
469:	static void hugetlb_vmdelete_list(struct rb_root_cached *, unsigned long, unsigned long);
1172:	static struct inode *hugetlbfs_alloc_inode(struct super_block *);
983:	static int hugetlbfs_create(struct inode *, struct dentry *, umode_t, bool);
1206:	static void hugetlbfs_destroy_inode(struct inode *);
1049:	static int hugetlbfs_error_remove_page(struct address_space *, struct page *);
618:	static void hugetlbfs_evict_inode(struct inode *);
693:	static long hugetlbfs_fallocate(struct file *, int, loff_t, loff_t);
171:	static int hugetlbfs_file_mmap(struct file *, struct vm_area_struct *);
1396:	static int hugetlbfs_fill_super(struct super_block *, struct fs_context *);
1201:	static void hugetlbfs_free_inode(struct inode *);
1456:	static void hugetlbfs_fs_context_free(struct fs_context *);
885:	static struct inode *hugetlbfs_get_inode(struct super_block *, struct inode *, umode_t, dev_t);
1448:	static int hugetlbfs_get_tree(struct fs_context *);
1160:	static void hugetlbfs_inc_free_inodes(struct hugetlbfs_sb_info *);
1467:	static int hugetlbfs_init_fs_context(struct fs_context *);
1026:	static int hugetlbfs_migrate_page(struct address_space *, struct page *, struct page *, enum migrate_mode);
975:	static int hugetlbfs_mkdir(struct inode *, struct dentry *, umode_t);
969:	static int hugetlbfs_mknod(struct inode *, struct dentry *, umode_t, dev_t);
1291:	static int hugetlbfs_parse_param(struct fs_context *, struct fs_parameter *);
655:	static long hugetlbfs_punch_hole(struct inode *, loff_t, loff_t);
1131:	static void hugetlbfs_put_super(struct super_block *);
383:	static ssize_t hugetlbfs_read_iter(struct kiocb *, struct iov_iter *);
1018:	static int hugetlbfs_set_page_dirty(struct page *);
822:	static int hugetlbfs_setattr(struct dentry *, struct iattr *);
1065:	static int hugetlbfs_show_options(struct seq_file *, struct dentry *);
1102:	static int hugetlbfs_statfs(struct dentry *, struct kstatfs *);
994:	static int hugetlbfs_symlink(struct inode *, struct dentry *, const char *);
988:	static int hugetlbfs_tmpfile(struct inode *, struct dentry *, umode_t);
1368:	static int hugetlbfs_validate(struct fs_context *, struct fs_context *);
445:	static int hugetlbfs_write_begin(struct file *, struct address_space *, loff_t, unsigned int, unsigned int, struct page **, void **);
453:	static int hugetlbfs_write_end(struct file *, struct address_space *, loff_t, unsigned int, unsigned int, struct page *, void *);
1598:	static int init_hugetlbfs_fs(void);
1222:	static void init_once(void *);
1578:	static struct vfsmount *mount_one_hugetlbfs(struct hstate *);
461:	static void remove_huge_page(struct page *);
526:	static void remove_inode_hugepages(struct inode *, loff_t, loff_t);

File fs/init.c:
44:	int init_chdir(const char *);
100:	int init_chmod(const char *, umode_t);
82:	int init_chown(const char *, uid_t, gid_t, int);
59:	int init_chroot(const char *);
256:	int init_dup(struct file *);
113:	int init_eaccess(const char *);
166:	int init_link(const char *, const char *);
220:	int init_mkdir(const char *, umode_t);
141:	int init_mknod(const char *, umode_t, unsigned int);
16:	int init_mount(const char *, const char *, const char *, unsigned long, void *);
238:	int init_rmdir(const char *);
126:	int init_stat(const char *, struct kstat *, int);
199:	int init_symlink(const char *, const char *);
30:	int init_umount(const char *, int);
215:	int init_unlink(const char *);
243:	int init_utimes(char *, struct timespec64 *);

File fs/inode.c:
255:	void __destroy_inode(struct inode *);
414:	void __iget(struct inode *);
496:	void __insert_inode_hash(struct inode *, unsigned long);
514:	void __remove_inode_hash(struct inode *);
379:	void address_space_init_once(struct address_space *);
1799:	bool atime_needs_update(const struct path *, struct inode *);
1709:	int bmap(struct inode *, sector_t *);
524:	void clear_inode(struct inode *);
320:	void clear_nlink(struct inode *);
2293:	struct timespec64 current_time(struct inode *);
1899:	int dentry_needs_remove_privs(struct dentry *);
1013:	void discard_new_inode(struct inode *);
303:	void drop_nlink(struct inode *);
634:	void evict_inodes(struct super_block *);
2010:	int file_modified(struct file *);
1933:	int file_remove_privs(struct file *);
1974:	int file_update_time(struct file *);
1524:	struct inode *find_inode_by_ino_rcu(struct super_block *, unsigned long);
1438:	struct inode *find_inode_nowait(struct super_block *, unsigned long, int (*)(struct inode *, unsigned long, void *), void *);
1486:	struct inode *find_inode_rcu(struct super_block *, unsigned long, int (*)(struct inode *, void *), void *);
213:	void free_inode_nonrcu(struct inode *);
1607:	int generic_delete_inode(struct inode *);
1754:	int generic_update_time(struct inode *, struct timespec64 *, int);
901:	unsigned int get_next_ino(void);
99:	long get_nr_dirty_inodes(void);
1150:	struct inode *iget5_locked(struct super_block *, unsigned long, int (*)(struct inode *, void *), int (*)(struct inode *, void *), void *);
1183:	struct inode *iget_locked(struct super_block *, unsigned long);
1302:	struct inode *igrab(struct inode *);
422:	void ihold(struct inode *);
1393:	struct inode *ilookup(struct super_block *, unsigned long);
1368:	struct inode *ilookup5(struct super_block *, unsigned long, int (*)(struct inode *, void *), void *);
1337:	struct inode *ilookup5_nowait(struct super_block *, unsigned long, int (*)(struct inode *, void *), void *);
359:	void inc_nlink(struct inode *);
2122:	void init_special_inode(struct inode *, umode_t, dev_t);
441:	void inode_add_lru(struct inode *);
2215:	void inode_dio_wait(struct inode *);
2096:	void inode_init(void);
132:	int inode_init_always(struct super_block *, struct inode *);
2076:	void inode_init_early(void);
391:	void inode_init_once(struct inode *);
2148:	void inode_init_owner(struct inode *, const struct inode *, umode_t);
1081:	struct inode *inode_insert5(struct inode *, unsigned long, int (*)(struct inode *, void *), int (*)(struct inode *, void *), void *);
2029:	int inode_needs_sync(struct inode *);
2246:	void inode_nohighmem(struct inode *);
2175:	bool inode_owner_or_capable(const struct inode *);
461:	void inode_sb_list_add(struct inode *);
2238:	void inode_set_flags(struct inode *, unsigned int, unsigned int);
1782:	int inode_update_time(struct inode *, struct timespec64 *, int);
1543:	int insert_inode_locked(struct inode *);
1590:	int insert_inode_locked4(struct inode *, unsigned long, int (*)(struct inode *, void *), void *);
684:	int invalidate_inodes(struct super_block *, bool);
1675:	void iput(struct inode *);
1277:	ino_t iunique(struct super_block *, ino_t);
1035:	void lock_two_nondirectories(struct inode *, struct inode *);
960:	struct inode *new_inode(struct super_block *);
935:	struct inode *new_inode_pseudo(struct super_block *);
110:	int proc_nr_inodes(struct ctl_table *, int, void *, size_t *, loff_t *);
808:	long prune_icache_sb(struct super_block *, struct shrink_control *);
337:	void set_nlink(struct inode *, unsigned int);
1871:	int should_remove_suid(struct dentry *);
2261:	struct timespec64 timestamp_truncate(struct timespec64, struct inode *);
1834:	void touch_atime(const struct path *);
1001:	void unlock_new_inode(struct inode *);
1052:	void unlock_two_nondirectories(struct inode *, struct inode *);
2339:	int vfs_ioc_fssetxattr_check(struct inode *, const struct fsxattr *, struct fsxattr *);
2315:	int vfs_ioc_setflags_prepare(struct inode *, unsigned int, unsigned int);
2050:	static void __wait_on_freeing_inode(struct inode *);
228:	static struct inode *alloc_inode(struct super_block *);
277:	static void destroy_inode(struct inode *);
612:	static void dispose_list(struct list_head *);
564:	static void evict(struct inode *);
823:	static struct inode *find_inode(struct super_block *, struct hlist_head *, int (*)(struct inode *, void *), void *);
856:	static struct inode *find_inode_fast(struct super_block *, struct hlist_head *, unsigned long);
219:	static void i_callback(struct callback_head *);
404:	static void init_once(void *);
742:	static enum lru_status inode_lru_isolate(struct list_head *, struct list_lru_one *, spinlock_t *, void *);
1623:	static void iput_final(struct inode *);
119:	static int no_open(struct inode *, struct file *);
2064:	static int set_ihash_entries(char *);

File fs/io-wq.c:
942:	void io_wq_cancel_all(struct io_wq *);
1038:	enum io_wq_cancel io_wq_cancel_cb(struct io_wq *, work_cancel_fn *, void *, bool);
1082:	struct io_wq *io_wq_create(unsigned int, struct io_wq_data *);
1195:	void io_wq_destroy(struct io_wq *);
923:	void io_wq_enqueue(struct io_wq *, struct io_wq_work *);
1164:	bool io_wq_get(struct io_wq *, struct io_wq_data *);
1201:	struct task_struct *io_wq_get_task(struct io_wq *);
934:	void io_wq_hash_work(struct io_wq_work *, void *);
649:	void io_wq_worker_running(struct task_struct *);
667:	void io_wq_worker_sleeping(struct task_struct *);
346:	static void __io_worker_busy(struct io_wqe *, struct io_worker *, struct io_wq_work *);
151:	static bool __io_worker_unuse(struct io_wqe *, struct io_worker *);
1172:	static void __io_wq_destroy(struct io_wq *);
684:	static bool create_io_worker(struct io_wq *, struct io_wqe *, int);
509:	static void io_assign_current_work(struct io_worker *, struct io_wq_work *);
403:	static struct io_wq_work *io_get_next_work(struct io_wqe *);
477:	static void io_impersonate_work(struct io_worker *, struct io_wq_work *);
219:	static void io_worker_exit(struct io_worker *);
135:	static bool io_worker_get(struct io_worker *);
531:	static void io_worker_handle_work(struct io_worker *);
140:	static void io_worker_release(struct io_worker *);
1219:	static int io_wq_cpu_online(unsigned int, struct hlist_node *);
1231:	static int io_wq_init(void);
776:	static int io_wq_manager(void *);
1206:	static bool io_wq_worker_affinity(struct io_worker *, void *);
965:	static bool io_wq_worker_cancel(struct io_worker *, void *);
1004:	static void io_wqe_cancel_pending_work(struct io_wqe *, struct io_cb_cancel_data *);
320:	static void io_wqe_dec_running(struct io_wqe *, struct io_worker *, struct io_worker *);
895:	static void io_wqe_enqueue(struct io_wqe *, struct io_wq_work *);
294:	static void io_wqe_wake_worker(struct io_wqe *, struct io_wqe_acct *);
601:	static int io_wqe_worker(void *);

File fs/io_uring.c:
9059:	long __ia32_sys_io_uring_enter(const struct pt_regs *);
9865:	long __ia32_sys_io_uring_register(const struct pt_regs *);
9564:	long __ia32_sys_io_uring_setup(const struct pt_regs *);
8840:	void __io_uring_files_cancel(struct files_struct *);
7928:	void __io_uring_free(struct task_struct *);
8887:	void __io_uring_task_cancel(void);
9059:	long __x64_sys_io_uring_enter(const struct pt_regs *);
9865:	long __x64_sys_io_uring_register(const struct pt_regs *);
9564:	long __x64_sys_io_uring_setup(const struct pt_regs *);
982:	struct sock *io_uring_get_socket(struct file *);
5208:	static __poll_t __io_arm_poll_handler(struct io_kiocb *, struct io_poll_iocb *, struct io_poll_table *, __poll_t, wait_queue_func_t);
4937:	static int __io_async_wake(struct io_kiocb *, struct io_poll_iocb *, __poll_t, task_work_func_t);
5963:	static void __io_clean_op(struct io_kiocb *);
4542:	static int __io_compat_recvmsg_copy_hdr(struct io_kiocb *, struct io_async_msghdr *);
1730:	static void __io_cqring_fill_event(struct io_kiocb *, long, unsigned int);
1662:	static bool __io_cqring_overflow_flush(struct io_ring_ctx *, bool, struct task_struct *, struct files_struct *);
7484:	static void __io_file_put_work(struct fixed_file_ref_node *);
1911:	static void __io_free_req(struct io_kiocb *);
3115:	static ssize_t __io_import_iovec(int, struct io_kiocb *, struct iovec **, struct iov_iter *, bool);
3817:	static int __io_openat_prep(struct io_kiocb *, const struct io_uring_sqe *);
5315:	static bool __io_poll_remove_one(struct io_kiocb *, struct io_poll_iocb *);
1483:	static struct io_kiocb *__io_queue_async_work(struct io_kiocb *);
5105:	static void __io_queue_proc(struct io_poll_iocb *, struct io_poll_table *, struct wait_queue_head *, struct io_poll_iocb **);
6338:	static void __io_queue_sqe(struct io_kiocb *, struct io_comp_state *);
4508:	static int __io_recvmsg_copy_hdr(struct io_kiocb *, struct io_async_msghdr *);
3952:	static int __io_remove_buffers(struct io_ring_ctx *, struct io_buffer *, int, unsigned int);
1822:	static void __io_req_complete(struct io_kiocb *, long, unsigned int, struct io_comp_state *);
2019:	static struct io_kiocb *__io_req_find_next(struct io_kiocb *);
2171:	static void __io_req_free_batch_flush(struct io_ring_ctx *, struct req_batch *);
2081:	static void __io_req_task_cancel(struct io_kiocb *, int);
2106:	static void __io_req_task_submit(struct io_kiocb *);
3633:	static int __io_splice_prep(struct io_kiocb *, const struct io_uring_sqe *);
6783:	static enum sq_ret __io_sq_thread(struct io_ring_ctx *, unsigned long, bool);
1061:	static int __io_sq_thread_acquire_mm(struct io_ring_ctx *);
7299:	static int __io_sqe_files_scm(struct io_ring_ctx *, int, int);
7746:	static int __io_sqe_files_update(struct io_ring_ctx *, struct io_uring_files_update *, unsigned int);
5524:	static int __io_timeout_cancel(struct io_kiocb *);
8704:	static void __io_uring_cancel_task_requests(struct io_ring_ctx *, struct task_struct *);
9728:	static int __io_uring_register(struct io_ring_ctx *, unsigned int, void *, unsigned int);
9181:	static void __io_uring_show_fdinfo(struct io_ring_ctx *, struct seq_file *);
9059:	static long __se_sys_io_uring_enter(long, long, long, long, long, long);
9865:	static long __se_sys_io_uring_register(long, long, long, long);
7554:	static struct fixed_file_ref_node *alloc_fixed_file_ref_node(struct io_ring_ctx *);
8202:	static bool headpage_already_acct(struct io_ring_ctx *, struct page **, int, struct page *);
8061:	static int io_account_mem(struct io_ring_ctx *, unsigned long, enum io_mem_account);
4044:	static int io_add_buffers(struct io_provide_buf *, struct io_buffer **);
3270:	static int io_alloc_async_data(struct io_kiocb *);
9268:	static int io_allocate_scq_urings(struct io_ring_ctx *, struct io_uring_params *);
5254:	static bool io_arm_poll_handler(struct io_kiocb *);
3337:	static int io_async_buf_func(struct wait_queue_entry *, unsigned int, int, void *);
5710:	static void io_async_find_and_cancel(struct io_ring_ctx *, struct io_kiocb *, __u64, int);
5147:	static void io_async_queue_proc(struct file *, struct wait_queue_head *, struct poll_table_struct *);
5156:	static void io_async_task_func(struct callback_head *);
5187:	static int io_async_wake(struct wait_queue_entry *, unsigned int, int, void *);
7187:	static struct io_sq_data *io_attach_sq_data(struct io_uring_params *, struct io_uring_params *);
8230:	static int io_buffer_account_pin(struct io_ring_ctx *, struct page **, int, struct io_mapped_ubuf *, struct page **);
2995:	static struct io_buffer *io_buffer_select(struct io_kiocb *, size_t *, int, bool, struct io_buffer *);
5682:	static bool io_cancel_cb(struct io_wq_work *, void *);
8550:	static bool io_cancel_ctx_cb(struct io_wq_work *, void *);
8637:	static void io_cancel_defer_files(struct io_ring_ctx *, struct task_struct *, struct files_struct *);
8617:	static bool io_cancel_task_cb(struct io_wq_work *, void *);
1593:	static void io_commit_cqring(struct io_ring_ctx *);
3046:	static ssize_t io_compat_import(struct io_kiocb *, struct iovec *, bool);
2664:	static void io_complete_rw(struct kiocb *, long, long);
2564:	static void io_complete_rw_common(struct kiocb *, long, struct io_comp_state *);
2671:	static void io_complete_rw_iopoll(struct kiocb *, long, long);
4830:	static int io_connect(struct io_kiocb *, bool, struct io_comp_state *);
1638:	static void io_cqring_ev_posted(struct io_ring_ctx *);
7015:	static int io_cqring_wait(struct io_ring_ctx *, int, const sigset_t *, size_t);
8733:	static void io_disable_sqo_submit(struct io_ring_ctx *);
1899:	static void io_dismantle_req(struct io_kiocb *);
2400:	static int io_do_iopoll(struct io_ring_ctx *, unsigned int *, long);
2284:	static void io_double_put_req(struct io_kiocb *);
1987:	static void io_fail_links(struct io_kiocb *);
7519:	static void io_file_data_ref_zero(struct percpu_ref *);
6209:	static struct file *io_file_get(struct io_submit_state *, struct io_kiocb *, int, bool);
7501:	static void io_file_put_work(struct work_struct *);
7103:	static void io_file_ref_kill(struct percpu_ref *);
2780:	static bool io_file_supports_async(struct file *, int);
1557:	static void io_flush_timeouts(struct io_ring_ctx *);
2252:	static void io_free_req_deferred(struct io_kiocb *);
7847:	static void io_free_work(struct io_wq_work *);
1360:	static bool io_grab_identity(struct io_kiocb *);
1319:	static bool io_identity_cow(struct io_kiocb *);
2909:	static ssize_t io_import_fixed(struct io_kiocb *, int, struct iov_iter *);
1127:	static void io_init_identity(struct io_identity *);
6606:	static int io_init_req(struct io_ring_ctx *, struct io_kiocb *, const struct io_uring_sqe *, struct io_submit_state *);
2502:	static int io_iopoll_check(struct io_ring_ctx *, long);
2358:	static void io_iopoll_complete(struct io_ring_ctx *, unsigned int *, struct list_head *);
2693:	static void io_iopoll_req_issued(struct io_kiocb *);
2474:	static void io_iopoll_try_reap_events(struct io_ring_ctx *);
6015:	static int io_issue_sqe(struct io_kiocb *, bool, struct io_comp_state *);
3407:	static int io_iter_do_read(struct io_kiocb *, struct iov_iter *);
1930:	static void io_kill_linked_timeout(struct io_kiocb *);
1506:	static void io_kill_timeout(struct io_kiocb *, int);
1526:	static bool io_kill_timeouts(struct io_ring_ctx *, struct task_struct *, struct files_struct *);
6257:	static enum hrtimer_restart io_link_timeout_fn(struct hrtimer *);
1024:	static bool io_match_task(struct io_kiocb *, struct task_struct *, struct files_struct *);
8094:	static void *io_mem_alloc(size_t);
8082:	static void io_mem_free(void *);
3878:	static int io_openat2(struct io_kiocb *, bool);
5476:	static int io_poll_add(struct io_kiocb *);
5389:	static int io_poll_cancel(__u64, struct io_ring_ctx *, struct io_ring_ctx *);
5062:	static int io_poll_double_wake(struct wait_queue_entry *, unsigned int, int, void *);
5449:	static void io_poll_queue_proc(struct file *, struct wait_queue_head *, struct poll_table_struct *);
5423:	static int io_poll_remove(struct io_kiocb *);
5364:	static bool io_poll_remove_all(struct io_ring_ctx *, struct task_struct *, struct files_struct *);
5012:	static void io_poll_remove_double(struct io_kiocb *);
5331:	static bool io_poll_remove_one(struct io_kiocb *);
4977:	static bool io_poll_rewait(struct io_kiocb *, struct io_poll_iocb *);
5040:	static void io_poll_task_func(struct callback_head *);
5440:	static int io_poll_wake(struct wait_queue_entry *, unsigned int, int, void *);
1441:	static void io_prep_async_work(struct io_kiocb *);
6319:	static struct io_kiocb *io_prep_linked_timeout(struct io_kiocb *);
2811:	static int io_prep_rw(struct io_kiocb *, const struct io_uring_sqe *);
9570:	static int io_probe(void *, unsigned int, struct io_ring_ctx *);
4071:	static int io_provide_buffers(struct io_kiocb *, bool, struct io_comp_state *);
2239:	static void io_put_req(struct io_kiocb *);
2245:	static void io_put_req_deferred_cb(struct callback_head *);
2228:	static struct io_kiocb *io_put_req_find_next(struct io_kiocb *);
1494:	static void io_queue_async_work(struct io_kiocb *);
6307:	static void io_queue_linked_timeout(struct io_kiocb *);
6398:	static void io_queue_sqe(struct io_kiocb *, const struct io_uring_sqe *, struct io_comp_state *);
3417:	static int io_read(struct io_kiocb *, bool, struct io_comp_state *);
4711:	static int io_recv(struct io_kiocb *, bool, struct io_comp_state *);
4647:	static int io_recvmsg(struct io_kiocb *, bool, struct io_comp_state *);
1012:	static void io_refs_resurrect(struct percpu_ref *, struct completion *);
9609:	static int io_register_personality(struct io_ring_ctx *);
3979:	static int io_remove_buffers(struct io_kiocb *, bool, struct io_comp_state *);
1277:	static void io_req_clean_work(struct io_kiocb *);
5901:	static int io_req_defer(struct io_kiocb *, const struct io_uring_sqe *);
2195:	static void io_req_free_batch(struct req_batch *, struct io_kiocb *);
2179:	static void io_req_free_batch_finish(struct io_ring_ctx *, struct req_batch *);
5805:	static int io_req_prep(struct io_kiocb *, const struct io_uring_sqe *);
2095:	static void io_req_task_cancel(struct callback_head *);
2130:	static void io_req_task_queue(struct io_kiocb *);
2121:	static void io_req_task_submit(struct callback_head *);
2044:	static int io_req_task_work_add(struct io_kiocb *, bool);
2581:	static bool io_resubmit_prep(struct io_kiocb *, int);
1189:	static struct io_ring_ctx *io_ring_ctx_alloc(struct io_uring_params *);
8439:	static void io_ring_ctx_free(struct io_ring_ctx *);
1177:	static void io_ring_ctx_ref_free(struct percpu_ref *);
8557:	static void io_ring_ctx_wait_and_kill(struct io_ring_ctx *);
8533:	static void io_ring_exit_work(struct work_struct *);
7417:	static void io_ring_file_put(struct file *, struct io_ring_ctx *, struct io_ring_ctx *);
6995:	static int io_run_task_work_sig(void);
2627:	static bool io_rw_reissue(struct io_kiocb *, long);
4462:	static int io_send(struct io_kiocb *, bool, struct io_comp_state *);
4411:	static int io_sendmsg(struct io_kiocb *, bool, struct io_comp_state *);
4358:	static int io_setup_async_msg(struct io_kiocb *, struct io_async_msghdr *);
3278:	static int io_setup_async_rw(struct io_kiocb *, const struct iovec *, const struct iovec *, struct iov_iter *, bool);
7941:	static int io_sq_offload_create(struct io_ring_ctx *, struct io_uring_params *);
6880:	static int io_sq_thread(void *);
7251:	static void io_sq_thread_stop(struct io_ring_ctx *);
6760:	static int io_sq_wake_function(struct wait_queue_entry *, unsigned int, int, void *);
7390:	static int io_sqe_alloc_file_tables(struct fixed_file_data *, unsigned int, unsigned int);
8261:	static int io_sqe_buffer_register(struct io_ring_ctx *, void *, unsigned int);
8143:	static int io_sqe_buffer_unregister(struct io_ring_ctx *);
7687:	static int io_sqe_file_register(struct io_ring_ctx *, struct file *, int);
7581:	static int io_sqe_files_register(struct io_ring_ctx *, void *, unsigned int);
7111:	static void io_sqe_files_set_node(struct fixed_file_data *, struct fixed_file_ref_node *);
7121:	static int io_sqe_files_unregister(struct io_ring_ctx *);
9032:	static int io_sqpoll_wait_sq(struct io_ring_ctx *);
1789:	static void io_submit_flush_completions(struct io_comp_state *);
6438:	static int io_submit_sqe(struct io_kiocb *, const struct io_uring_sqe *, struct io_kiocb **, struct io_comp_state *);
6668:	static int io_submit_sqes(struct io_ring_ctx *, unsigned int);
5632:	static int io_timeout(struct io_kiocb *);
5501:	static enum hrtimer_restart io_timeout_fn(struct hrtimer *);
5594:	static int io_timeout_prep(struct io_kiocb *, const struct io_uring_sqe *, bool);
5576:	static int io_timeout_remove(struct io_kiocb *);
8047:	static void io_unaccount_mem(struct io_ring_ctx *, unsigned long, enum io_mem_account);
8518:	static int io_unregister_personality(struct io_ring_ctx *, unsigned int);
8780:	static int io_uring_add_task_file(struct io_ring_ctx *, struct file *);
7902:	static int io_uring_alloc_task_context(struct task_struct *);
8677:	static void io_uring_cancel_files(struct io_ring_ctx *, struct task_struct *, struct files_struct *);
8751:	static void io_uring_cancel_task_requests(struct io_ring_ctx *, struct files_struct *);
8663:	static int io_uring_count_inflight(struct io_ring_ctx *, struct task_struct *, struct files_struct *);
9360:	static int io_uring_create(unsigned int, struct io_uring_params *, struct io_uring_params *);
8511:	static int io_uring_fasync(int, struct file *, int);
8924:	static int io_uring_flush(struct file *, void *);
9892:	static int io_uring_init(void);
8991:	static int io_uring_mmap(struct file *, struct vm_area_struct *);
8478:	static __poll_t io_uring_poll(struct file *, poll_table *);
8603:	static int io_uring_release(struct inode *, struct file *);
8831:	static void io_uring_remove_task_files(struct io_uring_task *);
9543:	static long io_uring_setup(u32, struct io_uring_params *);
9148:	static int io_uring_show_cred(struct seq_file *, unsigned int, const struct io_identity *, const struct io_identity *);
9242:	static void io_uring_show_fdinfo(struct seq_file *, struct file *);
6980:	static int io_wake_function(struct wait_queue_entry *, unsigned int, int, void *);
6138:	static struct io_wq_work *io_wq_submit_work(struct io_wq_work *);
3545:	static int io_write(struct io_kiocb *, bool, struct io_comp_state *);
2887:	static void kiocb_done(struct kiocb *, ssize_t, struct io_comp_state *);
2550:	static void kiocb_end_write(struct io_kiocb *, struct io_kiocb *);
3182:	static ssize_t loop_rw_iter(int, struct io_kiocb *, struct iov_iter *);
8131:	static unsigned long ring_pages(unsigned int, unsigned int);
8856:	static s64 tctx_inflight(struct io_uring_task *);

File fs/ioctl.c:
793:	long __ia32_compat_sys_ioctl(const struct pt_regs *);
739:	long __ia32_sys_ioctl(const struct pt_regs *);
739:	long __x64_sys_ioctl(const struct pt_regs *);
784:	long compat_ptr_ioctl(struct file *, unsigned int, unsigned long);
112:	int fiemap_fill_next_extent(struct fiemap_extent_info *, u64, u64, u64, u32);
164:	int fiemap_prep(struct inode *, struct fiemap_extent_info *, u64, u64 *, u32);
452:	int generic_block_fiemap(struct inode *, struct fiemap_extent_info *, u64, u64, get_block_t *);
41:	long vfs_ioctl(struct file *, unsigned int, unsigned long);
294:	static int __generic_block_fiemap(struct inode *, struct fiemap_extent_info *, loff_t, loff_t, get_block_t *);
793:	static long __se_compat_sys_ioctl(long, long, long);
739:	static long __se_sys_ioctl(long, long, long);
501:	static int compat_ioctl_preallocate(struct file *, int, struct space_resv_32 *);
667:	static int do_vfs_ioctl(struct file *, unsigned int, unsigned int, unsigned long);
56:	static int ioctl_fibmap(struct file *, int *);
196:	static int ioctl_fiemap(struct fiemap *, struct file *, struct file *);
227:	static long ioctl_file_clone(struct file *, unsigned long, u64, u64, u64);
620:	static int ioctl_file_dedupe_range(struct file *, struct file_dedupe_range *);
473:	static int ioctl_preallocate(struct file *, int, void *);

File fs/iomap/apply.c:
24:	loff_t iomap_apply(struct inode *, loff_t, loff_t, unsigned int, const struct iomap_ops *, void *, iomap_actor_t);

File fs/iomap/buffered-io.c:
824:	ssize_t iomap_file_buffered_write(struct kiocb *, struct iov_iter *, const struct iomap_ops *);
885:	int iomap_file_unshare(struct inode *, loff_t, loff_t, const struct iomap_ops *);
1102:	void iomap_finish_ioends(struct iomap_ioend *, int);
478:	void iomap_invalidatepage(struct page *, unsigned int, unsigned int);
1137:	void iomap_ioend_try_merge(struct iomap_ioend *, struct list_head *, void (*)(struct iomap_ioend *, struct iomap_ioend *));
433:	int iomap_is_partially_uptodate(struct page *, unsigned long, unsigned long);
496:	int iomap_migrate_page(struct page *, struct page *, enum migrate_mode, struct address_space *);
1007:	vm_fault_t iomap_page_mkwrite(struct vm_fault *, const struct iomap_ops *);
393:	void iomap_readahead(struct readahead_control *, const struct iomap_ops *);
316:	int iomap_readpage(struct page *, const struct iomap_ops *);
460:	int iomap_releasepage(struct page *, gfp_t);
644:	int iomap_set_page_dirty(struct page *);
1172:	void iomap_sort_ioends(struct list_head *);
973:	int iomap_truncate_page(struct inode *, loff_t, bool *, const struct iomap_ops *);
1544:	int iomap_writepage(struct page *, struct writeback_control *, struct iomap_writepage_ctx *, const struct iomap_writeback_ops *);
1559:	int iomap_writepages(struct address_space *, struct writeback_control *, struct iomap_writepage_ctx *, const struct iomap_writeback_ops *);
953:	int iomap_zero_range(struct inode *, loff_t, loff_t, bool *, const struct iomap_ops *);
550:	static int __iomap_write_begin(struct inode *, loff_t, unsigned int, int, struct page *, struct iomap *);
1289:	static void iomap_add_to_ioend(struct inode *, loff_t, struct page *, struct iomap_page *, struct iomap_writepage_ctx *, struct writeback_control *, struct list_head *);
88:	static void iomap_adjust_read_range(struct iomap_page *, loff_t *, loff_t, unsigned int *, unsigned int *, struct inode *, struct inode *);
1219:	static struct iomap_ioend *iomap_alloc_ioend(struct inode *, struct iomap_writepage_ctx *, loff_t, sector_t, struct writeback_control *);
1438:	static int iomap_do_writepage(struct page *, struct writeback_control *, void *);
1064:	static void iomap_finish_ioend(struct iomap_ioend *, int);
1041:	static void iomap_finish_page_writeback(struct inode *, struct page *, int, unsigned int);
1573:	static int iomap_init(void);
1158:	static int iomap_ioend_compare(void *, const struct list_head *, const struct list_head *);
145:	static void iomap_iop_set_range_uptodate(struct page *, unsigned int, unsigned int);
52:	static struct iomap_page *iomap_page_create(struct page *, struct inode *, struct inode *);
987:	static loff_t iomap_page_mkwrite_actor(struct inode *, loff_t, loff_t, void *, struct iomap *, struct iomap *);
70:	static void iomap_page_release(struct page *);
190:	static void iomap_read_end_io(struct bio *);
209:	static void iomap_read_inline_data(struct page *, struct iomap *, struct inode *, struct inode *);
173:	static void iomap_read_page_end_io(struct bio_vec *, int);
535:	static int iomap_read_page_sync(loff_t, struct page *, unsigned int, unsigned int, struct iomap *);
354:	static loff_t iomap_readahead_actor(struct inode *, loff_t, loff_t, void *, struct iomap *, struct iomap *);
237:	static loff_t iomap_readpage_actor(struct inode *, loff_t, loff_t, void *, struct iomap *, struct iomap *);
161:	static void iomap_set_range_uptodate(struct page *, unsigned int, unsigned int);
1194:	static int iomap_submit_ioend(struct iomap_writepage_ctx *, struct iomap_ioend *, int);
844:	static loff_t iomap_unshare_actor(struct inode *, loff_t, loff_t, struct iomap *, struct iomap *, void *);
749:	static loff_t iomap_write_actor(struct inode *, loff_t, loff_t, void *, struct iomap *, struct iomap *);
591:	static int iomap_write_begin(struct inode *, loff_t, unsigned int, unsigned int, struct page **, struct iomap *, struct iomap *);
709:	static size_t iomap_write_end(struct inode *, loff_t, size_t, size_t, struct page *, struct iomap *, struct iomap *);
691:	static size_t iomap_write_end_inline(struct inode *, struct page *, struct iomap *, loff_t, size_t);
1178:	static void iomap_writepage_end_bio(struct bio *);
1338:	static int iomap_writepage_map(struct iomap_writepage_ctx *, struct writeback_control *, struct inode *, struct page *, u64);
903:	static s64 iomap_zero(struct inode *, loff_t, u64, struct iomap *, struct iomap *);
921:	static loff_t iomap_zero_range_actor(struct inode *, loff_t, loff_t, void *, struct iomap *, struct iomap *);

File fs/iomap/direct-io.c:
421:	struct iomap_dio *__iomap_dio_rw(struct kiocb *, struct iov_iter *, const struct iomap_ops *, const struct iomap_dio_ops *, bool);
79:	ssize_t iomap_dio_complete(struct iomap_dio *);
52:	int iomap_dio_iopoll(struct kiocb *, bool);
599:	ssize_t iomap_dio_rw(struct kiocb *, struct iov_iter *, const struct iomap_ops *, const struct iomap_dio_ops *, bool);
374:	static loff_t iomap_dio_actor(struct inode *, loff_t, loff_t, void *, struct iomap *, struct iomap *);
205:	static loff_t iomap_dio_bio_actor(struct inode *, loff_t, loff_t, struct iomap_dio *, struct iomap *);
153:	static void iomap_dio_bio_end_io(struct bio *);
135:	static void iomap_dio_complete_work(struct work_struct *);
347:	static loff_t iomap_dio_inline_actor(struct inode *, loff_t, loff_t, struct iomap_dio *, struct iomap *);
62:	static void iomap_dio_submit_bio(struct iomap_dio *, struct iomap *, struct bio *, loff_t);
185:	static void iomap_dio_zero(struct iomap_dio *, struct iomap *, loff_t, unsigned int);

File fs/iomap/fiemap.c:
122:	sector_t iomap_bmap(struct address_space *, sector_t, const struct iomap_ops *);
68:	int iomap_fiemap(struct inode *, struct fiemap_extent_info *, u64, u64, const struct iomap_ops *);
108:	static loff_t iomap_bmap_actor(struct inode *, loff_t, loff_t, void *, struct iomap *, struct iomap *);
47:	static loff_t iomap_fiemap_actor(struct inode *, loff_t, loff_t, void *, struct iomap *, struct iomap *);
16:	static int iomap_to_fiemap(struct fiemap_extent_info *, struct iomap *, u32);

File fs/iomap/seek.c:
80:	loff_t iomap_seek_data(struct inode *, loff_t, const struct iomap_ops *);
35:	loff_t iomap_seek_hole(struct inode *, loff_t, const struct iomap_ops *);
59:	static loff_t iomap_seek_data_actor(struct inode *, loff_t, loff_t, void *, struct iomap *, struct iomap *);
14:	static loff_t iomap_seek_hole_actor(struct inode *, loff_t, loff_t, void *, struct iomap *, struct iomap *);

File fs/iomap/swapfile.c:
141:	int iomap_swapfile_activate(struct swap_info_struct *, struct file *, sector_t *, const struct iomap_ops *);
84:	static loff_t iomap_swapfile_activate_actor(struct inode *, loff_t, loff_t, void *, struct iomap *, struct iomap *);
29:	static int iomap_swapfile_add_extent(struct iomap_swapfile_info *);

File fs/kernel_read_file.c:
35:	int kernel_read_file(struct file *, loff_t, void **, size_t, size_t *, enum kernel_read_file_id);
174:	int kernel_read_file_from_fd(int, loff_t, void **, size_t, size_t *, enum kernel_read_file_id);
127:	int kernel_read_file_from_path(const char *, loff_t, void **, size_t, size_t *, enum kernel_read_file_id);
147:	int kernel_read_file_from_path_initns(const char *, loff_t, void **, size_t, size_t *, enum kernel_read_file_id);

File fs/kernfs/dir.c:
1261:	void kernfs_activate(struct kernfs_node *);
760:	int kernfs_add_one(struct kernfs_node *);
1375:	void kernfs_break_active_protection(struct kernfs_node *);
1017:	struct kernfs_node *kernfs_create_dir_ns(struct kernfs_node *, const char *, umode_t, kuid_t, kgid_t, void *, const void *);
1051:	struct kernfs_node *kernfs_create_empty_dir(struct kernfs_node *, const char *);
946:	struct kernfs_root *kernfs_create_root(struct kernfs_syscall_ops *, unsigned int, void *);
1000:	void kernfs_destroy_root(struct kernfs_root *);
709:	struct kernfs_node *kernfs_find_and_get_node_by_id(struct kernfs_root *, u64);
900:	struct kernfs_node *kernfs_find_and_get_ns(struct kernfs_node *, const char *, const void *);
491:	void kernfs_get(struct kernfs_node *);
413:	struct kernfs_node *kernfs_get_active(struct kernfs_node *);
279:	struct kernfs_node *kernfs_get_parent(struct kernfs_node *);
183:	int kernfs_name(struct kernfs_node *, char *, size_t);
682:	struct kernfs_node *kernfs_new_node(struct kernfs_node *, const char *, umode_t, kuid_t, kgid_t, unsigned int);
605:	struct kernfs_node *kernfs_node_from_dentry(struct dentry *);
210:	int kernfs_path_from_node(struct kernfs_node *, struct kernfs_node *, char *, size_t);
506:	void kernfs_put(struct kernfs_node *);
433:	void kernfs_put_active(struct kernfs_node *);
1354:	void kernfs_remove(struct kernfs_node *);
1501:	int kernfs_remove_by_name_ns(struct kernfs_node *, const char *, const void *);
1441:	bool kernfs_remove_self(struct kernfs_node *);
1533:	int kernfs_rename_ns(struct kernfs_node *, struct kernfs_node *, const char *, const void *);
1399:	void kernfs_unbreak_active_protection(struct kernfs_node *);
924:	struct kernfs_node *kernfs_walk_and_get_ns(struct kernfs_node *, const char *, const void *);
229:	void pr_cont_kernfs_name(struct kernfs_node *);
247:	void pr_cont_kernfs_path(struct kernfs_node *);
613:	static struct kernfs_node *__kernfs_new_node(struct kernfs_root *, struct kernfs_node *, const char *, umode_t, kuid_t, kgid_t, unsigned int);
1282:	static void __kernfs_remove(struct kernfs_node *);
1608:	static int kernfs_dir_fop_release(struct inode *, struct file *);
1614:	static struct kernfs_node *kernfs_dir_pos(const void *, struct kernfs_node *, loff_t, struct kernfs_node *);
551:	static int kernfs_dop_revalidate(struct dentry *, unsigned int);
825:	static struct kernfs_node *kernfs_find_ns(struct kernfs_node *, const unsigned char *, const void *);
1664:	static int kernfs_fop_readdir(struct file *, struct dir_context *);
1077:	static struct dentry *kernfs_iop_lookup(struct inode *, struct dentry *, unsigned int);
1114:	static int kernfs_iop_mkdir(struct inode *, struct dentry *, umode_t);
1151:	static int kernfs_iop_rename(struct inode *, struct dentry *, struct inode *, struct dentry *, unsigned int);
1133:	static int kernfs_iop_rmdir(struct inode *, struct dentry *);
348:	static int kernfs_link_sibling(struct kernfs_node *);
299:	static unsigned int kernfs_name_hash(const char *, const void *);
42:	static int kernfs_name_locked(struct kernfs_node *, char *, size_t);
122:	static int kernfs_path_from_node_locked(struct kernfs_node *, struct kernfs_node *, char *, size_t);
858:	static struct kernfs_node *kernfs_walk_ns(struct kernfs_node *, const unsigned char *, const void *);

File fs/kernfs/file.c:
971:	struct kernfs_node *__kernfs_create_file(struct kernfs_node *, const char *, umode_t, kuid_t, kgid_t, loff_t, const struct kernfs_ops *, void *, const void *, struct lock_class_key *);
768:	void kernfs_drain_open_files(struct kernfs_node *);
815:	__poll_t kernfs_generic_poll(struct kernfs_open_file *, poll_table *);
913:	void kernfs_notify(struct kernfs_node *);
184:	static ssize_t kernfs_file_read_iter(struct kiocb *, struct iov_iter *);
450:	static int kernfs_fop_mmap(struct file *, struct vm_area_struct *);
597:	static int kernfs_fop_open(struct inode *, struct file *);
828:	static __poll_t kernfs_fop_poll(struct file *, poll_table *);
238:	static ssize_t kernfs_fop_read_iter(struct kiocb *, struct iov_iter *);
749:	static int kernfs_fop_release(struct inode *, struct file *);
255:	static ssize_t kernfs_fop_write_iter(struct kiocb *, struct iov_iter *);
523:	static int kernfs_get_open_node(struct kernfs_node *, struct kernfs_open_file *);
846:	static void kernfs_notify_workfn(struct work_struct *);
574:	static void kernfs_put_open_node(struct kernfs_node *, struct kernfs_open_file *);
132:	static void *kernfs_seq_next(struct seq_file *, void *, loff_t *);
162:	static int kernfs_seq_show(struct seq_file *, void *);
103:	static void *kernfs_seq_start(struct seq_file *, loff_t *);
153:	static void kernfs_seq_stop(struct seq_file *, void *);
373:	static int kernfs_vma_access(struct vm_area_struct *, unsigned long, void *, int, int);
331:	static vm_fault_t kernfs_vma_fault(struct vm_fault *);
416:	static struct mempolicy *kernfs_vma_get_policy(struct vm_area_struct *, unsigned long);
314:	static void kernfs_vma_open(struct vm_area_struct *);
351:	static vm_fault_t kernfs_vma_page_mkwrite(struct vm_fault *);
395:	static int kernfs_vma_set_policy(struct vm_area_struct *, struct mempolicy *);

File fs/kernfs/inode.c:
74:	int __kernfs_setattr(struct kernfs_node *, const struct iattr *);
266:	void kernfs_evict_inode(struct inode *);
248:	struct inode *kernfs_get_inode(struct super_block *, struct kernfs_node *);
186:	int kernfs_iop_getattr(const struct path *, struct kstat *, u32, unsigned int);
141:	ssize_t kernfs_iop_listxattr(struct dentry *, char *, size_t);
275:	int kernfs_iop_permission(struct inode *, int);
115:	int kernfs_iop_setattr(struct dentry *, struct iattr *);
105:	int kernfs_setattr(struct kernfs_node *, const struct iattr *);
291:	int kernfs_xattr_get(struct kernfs_node *, const char *, void *, size_t);
301:	int kernfs_xattr_set(struct kernfs_node *, const char *, const void *, size_t, int);
33:	static struct kernfs_iattrs *__kernfs_iattrs(struct kernfs_node *, int);
200:	static void kernfs_init_inode(struct kernfs_node *, struct inode *);
170:	static void kernfs_refresh_inode(struct kernfs_node *, struct inode *);
332:	static int kernfs_vfs_user_xattr_add(const char *, struct simple_xattrs *, const void *, size_t, int, struct kernfs_node *, struct kernfs_node *);
387:	static int kernfs_vfs_user_xattr_set(const struct xattr_handler *, struct dentry *, struct inode *, const char *, const void *, size_t, int);
311:	static int kernfs_vfs_xattr_get(const struct xattr_handler *, struct dentry *, struct inode *, const char *, void *, size_t);
321:	static int kernfs_vfs_xattr_set(const struct xattr_handler *, struct dentry *, struct inode *, const char *, const void *, size_t, int);

File fs/kernfs/mount.c:
356:	void kernfs_free_fs_context(struct fs_context *);
315:	int kernfs_get_tree(struct fs_context *);
387:	void kernfs_init(void);
371:	void kernfs_kill_sb(struct super_block *);
195:	struct dentry *kernfs_node_dentry(struct kernfs_node *, struct super_block *);
158:	struct kernfs_root *kernfs_root_from_sb(struct super_block *);
299:	const void *kernfs_super_ns(struct super_block *);
71:	static struct dentry *__kernfs_fh_to_dentry(struct super_block *, struct fid *, int, int, bool);
56:	static int kernfs_encode_fh(struct inode *, __u32 *, int *, struct inode *);
123:	static struct dentry *kernfs_fh_to_dentry(struct super_block *, struct fid *, int, int);
130:	static struct dentry *kernfs_fh_to_parent(struct super_block *, struct fid *, int, int);
236:	static int kernfs_fill_super(struct super_block *, struct kernfs_fs_context *);
137:	static struct dentry *kernfs_get_parent_dentry(struct dentry *);
285:	static int kernfs_set_super(struct super_block *, struct fs_context *);
24:	static int kernfs_sop_show_options(struct seq_file *, struct dentry *);
34:	static int kernfs_sop_show_path(struct seq_file *, struct dentry *);
277:	static int kernfs_test_super(struct super_block *, struct fs_context *);

File fs/kernfs/symlink.c:
25:	struct kernfs_node *kernfs_create_link(struct kernfs_node *, const char *, struct kernfs_node *);
57:	static int kernfs_get_target_path(struct kernfs_node *, struct kernfs_node *, char *);
126:	static const char *kernfs_iop_get_link(struct dentry *, struct inode *, struct delayed_call *);

File fs/libfs.c:
1069:	int __generic_file_fsync(struct file *, loff_t, loff_t, int);
1222:	struct inode *alloc_anon_inode(struct super_block *);
53:	int always_delete_dentry(const struct dentry *);
87:	int dcache_dir_close(struct inode *, struct file *);
136:	loff_t dcache_dir_lseek(struct file *, loff_t, int);
79:	int dcache_dir_open(struct inode *, struct file *);
187:	int dcache_readdir(struct file *, struct dir_context *);
1133:	int generic_check_addressable(unsigned int, u64);
1004:	struct dentry *generic_fh_to_dentry(struct super_block *, struct fid *, int, int, struct inode *(*)(struct super_block *, u64, u32));
1037:	struct dentry *generic_fh_to_parent(struct super_block *, struct fid *, int, int, struct inode *(*)(struct super_block *, u64, u32));
1111:	int generic_file_fsync(struct file *, loff_t, loff_t, int);
224:	ssize_t generic_read_dir(struct file *, char *, size_t, loff_t *);
368:	struct pseudo_fs_context *init_pseudo(struct fs_context *, unsigned long);
1365:	bool is_empty_dir_inode(struct inode *);
1202:	void kfree_link(void *);
1349:	void make_empty_dir_inode(struct inode *);
787:	ssize_t memory_read_from_buffer(void *, size_t, loff_t *, const void *, size_t);
1189:	ssize_t noop_direct_IO(struct kiocb *, struct iov_iter *);
1156:	int noop_fsync(struct file *, loff_t, loff_t, int);
1178:	void noop_invalidatepage(struct page *, unsigned int, unsigned int);
1162:	int noop_set_page_dirty(struct page *);
890:	int simple_attr_open(struct inode *, struct file *, int (*)(void *, u64 *), int (*)(void *, u64), const char *);
920:	ssize_t simple_attr_read(struct file *, char *, size_t, loff_t *);
912:	int simple_attr_release(struct inode *, struct file *);
958:	ssize_t simple_attr_write(struct file *, const char *, size_t, loff_t *);
406:	int simple_empty(struct dentry *);
604:	int simple_fill_super(struct super_block *, unsigned long, const struct tree_descr *);
1283:	const char *simple_get_link(struct dentry *, struct inode *, struct delayed_call *);
30:	int simple_getattr(const struct path *, struct kstat *, u32, unsigned int);
393:	int simple_link(struct dentry *, struct inode *, struct dentry *);
68:	struct dentry *simple_lookup(struct inode *, struct dentry *, unsigned int);
1262:	int simple_nosetlease(struct file *, long, struct file_lock **, void **);
385:	int simple_open(struct inode *, struct file *);
670:	int simple_pin_fs(struct file_system_type *, struct vfsmount **, int *);
717:	ssize_t simple_read_from_buffer(void *, size_t, loff_t *, const void *, size_t);
512:	int simple_readpage(struct file *, struct page *);
267:	void simple_recursive_removal(struct dentry *, void (*)(struct dentry *));
691:	void simple_release_fs(struct vfsmount **, int *);
450:	int simple_rename(struct inode *, struct dentry *, struct inode *, struct dentry *, unsigned int);
438:	int simple_rmdir(struct inode *, struct dentry *);
495:	int simple_setattr(struct dentry *, struct iattr *);
40:	int simple_statfs(struct dentry *, struct kstatfs *);
827:	char *simple_transaction_get(struct file *, const char *, size_t);
859:	ssize_t simple_transaction_read(struct file *, char *, size_t, loff_t *);
869:	int simple_transaction_release(struct inode *, struct file *);
812:	void simple_transaction_set(struct file *, size_t);
427:	int simple_unlink(struct inode *, struct dentry *);
522:	int simple_write_begin(struct file *, struct address_space *, loff_t, unsigned int, unsigned int, struct page **, void **);
568:	int simple_write_end(struct file *, struct address_space *, loff_t, unsigned int, unsigned int, struct page *, void *);
752:	ssize_t simple_write_to_buffer(void *, size_t, loff_t *, const void *, size_t);
1303:	static int empty_dir_getattr(const struct path *, struct kstat *, u32, unsigned int);
1316:	static ssize_t empty_dir_listxattr(struct dentry *, char *, size_t);
1329:	static loff_t empty_dir_llseek(struct file *, loff_t, int);
1298:	static struct dentry *empty_dir_lookup(struct inode *, struct dentry *, unsigned int);
1335:	static int empty_dir_readdir(struct file *, struct dir_context *);
1311:	static int empty_dir_setattr(struct dentry *, struct iattr *);
245:	static struct dentry *find_next_child(struct dentry *, struct dentry *);
318:	static int pseudo_fs_fill_super(struct super_block *, struct fs_context *);
354:	static void pseudo_fs_free(struct fs_context *);
349:	static int pseudo_fs_get_tree(struct fs_context *);
101:	static struct dentry *scan_positives(struct dentry *, struct list_head *, loff_t, struct dentry *);

File fs/locks.c:
1607:	int __break_lease(struct inode *, unsigned int, unsigned int);
2219:	long __ia32_sys_flock(const struct pt_regs *);
2219:	long __x64_sys_flock(const struct pt_regs *);
1765:	int fcntl_getlease(struct file *);
2351:	int fcntl_getlk(struct file *, unsigned int, struct flock *);
2147:	int fcntl_setlease(unsigned int, struct file *, long);
2476:	int fcntl_setlk(unsigned int, struct file *, unsigned int, struct flock *);
1994:	int generic_setlease(struct file *, long, struct file_lock **, void **);
1721:	void lease_get_mtime(struct inode *, struct timespec64 *);
1509:	int lease_modify(struct file_lock *, int, struct list_head *);
2047:	int lease_register_notifier(struct notifier_block *);
2053:	void lease_unregister_notifier(struct notifier_block *);
344:	struct file_lock *locks_alloc_lock(void);
409:	void locks_copy_conflock(struct file_lock *, struct file_lock *);
428:	void locks_copy_lock(struct file_lock *, struct file_lock *);
758:	int locks_delete_block(struct file_lock *);
380:	void locks_free_lock(struct file_lock *);
324:	void locks_free_lock_context(struct inode *);
399:	void locks_init_lock(struct file_lock *);
2185:	int locks_lock_inode_wait(struct inode *, struct file_lock *);
355:	void locks_release_private(struct file_lock *);
2777:	void locks_remove_file(struct file *);
2696:	void locks_remove_posix(struct file *, fl_owner_t);
1369:	int posix_lock_file(struct file *, struct file_lock *, struct file_lock *);
952:	void posix_test_lock(struct file *, struct file_lock *);
2943:	void show_fd_locks(struct seq_file *, struct file *, struct files_struct *);
2808:	int vfs_cancel_lock(struct file *, struct file_lock *);
2425:	int vfs_lock_file(struct file *, unsigned int, struct file_lock *, struct file_lock *);
2101:	int vfs_setlease(struct file *, long, struct file_lock **, void **);
2275:	int vfs_test_lock(struct file *, struct file_lock *);
724:	static void __locks_delete_block(struct file_lock *);
818:	static void __locks_insert_block(struct file_lock *, struct file_lock *, bool (*)(struct file_lock *, struct file_lock *));
730:	static void __locks_wake_up_blocks(struct file_lock *);
2219:	static long __se_sys_flock(long, long);
2923:	static void __show_fd_locks(struct seq_file *, struct list_head *, int *, struct file *, struct files_struct *);
1804:	static int check_conflicting_open(struct file *, const long, int);
2434:	static int do_lock_file_wait(struct file *, unsigned int, struct file_lock *);
3003:	static int filelock_init(void);
518:	static int flock64_to_posix_lock(struct file *, struct file_lock *, struct flock64 *);
1059:	static int flock_lock_inode(struct inode *, struct file_lock *);
937:	static bool flock_locks_conflict(struct file_lock *, struct file_lock *);
1836:	static int generic_add_lease(struct file *, long, struct file_lock **, void **);
1951:	static int generic_delete_lease(struct file *, void *);
633:	static struct file_lock *lease_alloc(struct file *, long);
583:	static bool lease_break_callback(struct file_lock *);
590:	static void lease_setup(struct file_lock *, void **);
1557:	static bool leases_conflict(struct file_lock *, struct file_lock *);
2825:	static void lock_get_status(struct seq_file *, struct file_lock *, loff_t, char *);
308:	static void locks_check_ctx_file_list(struct file *, struct list_head *, char *);
679:	static void locks_delete_global_locks(struct file_lock *);
893:	static void locks_delete_lock_ctx(struct file_lock *, struct list_head *);
388:	static void locks_dispose_list(struct list_head *);
281:	static void locks_dump_ctx_list(struct list_head *, char *);
249:	static struct file_lock_context *locks_get_lock_context(struct inode *, int);
845:	static void locks_insert_block(struct file_lock *, struct file_lock *, bool (*)(struct file_lock *, struct file_lock *));
878:	static void locks_insert_lock_ctx(struct file_lock *, struct list_head *);
445:	static void locks_move_blocks(struct file_lock *, struct file_lock *);
2972:	static void *locks_next(struct seq_file *, void *, loff_t *);
2733:	static void locks_remove_flock(struct file *, struct file_lock_context *);
2755:	static void locks_remove_lease(struct file *, struct file_lock_context *);
2904:	static int locks_show(struct seq_file *, void *);
2961:	static void *locks_start(struct seq_file *, loff_t *);
2980:	static void locks_stop(struct seq_file *, void *);
2291:	static pid_t locks_translate_pid(struct file_lock *, struct pid_namespace *);
860:	static void locks_wake_up_blocks(struct file_lock *);
1131:	static int posix_lock_inode(struct inode *, struct file_lock *, struct file_lock *);
918:	static bool posix_locks_conflict(struct file_lock *, struct file_lock *);
2994:	static int proc_locks_init(void);
1541:	static void time_out_leases(struct inode *, struct list_head *);

File fs/mpage.c:
475:	void clean_page_buffers(struct page *);
379:	void mpage_readahead(struct readahead_control *, get_block_t *);
402:	int mpage_readpage(struct page *, get_block_t *);
726:	int mpage_writepage(struct page *, get_block_t *, struct writeback_control *);
696:	int mpage_writepages(struct address_space *, struct writeback_control *, get_block_t *);
480:	static int __mpage_writepage(struct page *, struct writeback_control *, void *);
445:	static void clean_buffers(struct page *, unsigned int);
156:	static struct bio *do_mpage_readpage(struct mpage_readpage_args *);
71:	static struct bio *mpage_alloc(struct block_device *, sector_t, int, gfp_t);
47:	static void mpage_end_io(struct bio *);

File fs/namei.c:
2654:	int __check_sticky(struct inode *, struct inode *);
4166:	long __ia32_sys_link(const struct pt_regs *);
4160:	long __ia32_sys_linkat(const struct pt_regs *);
3684:	long __ia32_sys_mkdir(const struct pt_regs *);
3679:	long __ia32_sys_mkdirat(const struct pt_regs *);
3623:	long __ia32_sys_mknod(const struct pt_regs *);
3617:	long __ia32_sys_mknodat(const struct pt_regs *);
4498:	long __ia32_sys_rename(const struct pt_regs *);
4492:	long __ia32_sys_renameat(const struct pt_regs *);
4486:	long __ia32_sys_renameat2(const struct pt_regs *);
3787:	long __ia32_sys_rmdir(const struct pt_regs *);
4001:	long __ia32_sys_symlink(const struct pt_regs *);
3995:	long __ia32_sys_symlinkat(const struct pt_regs *);
3938:	long __ia32_sys_unlink(const struct pt_regs *);
3928:	long __ia32_sys_unlinkat(const struct pt_regs *);
4634:	int __page_symlink(struct inode *, const char *, int, int);
4166:	long __x64_sys_link(const struct pt_regs *);
4160:	long __x64_sys_linkat(const struct pt_regs *);
3684:	long __x64_sys_mkdir(const struct pt_regs *);
3679:	long __x64_sys_mkdirat(const struct pt_regs *);
3623:	long __x64_sys_mknod(const struct pt_regs *);
3617:	long __x64_sys_mknodat(const struct pt_regs *);
4498:	long __x64_sys_rename(const struct pt_regs *);
4492:	long __x64_sys_renameat(const struct pt_regs *);
4486:	long __x64_sys_renameat2(const struct pt_regs *);
3787:	long __x64_sys_rmdir(const struct pt_regs *);
4001:	long __x64_sys_symlink(const struct pt_regs *);
3995:	long __x64_sys_symlinkat(const struct pt_regs *);
3938:	long __x64_sys_unlink(const struct pt_regs *);
3928:	long __x64_sys_unlinkat(const struct pt_regs *);
3403:	struct file *do_file_open_root(const struct path *, const char *, const struct open_flags *);
3386:	struct file *do_filp_open(int, struct filename *, const struct open_flags *);
3729:	long do_rmdir(int, struct filename *);
3857:	long do_unlinkat(int, struct filename *);
3510:	void done_path_create(struct path *, struct dentry *);
2357:	int filename_lookup(int, struct filename *, unsigned int, struct path *, struct path *);
1302:	int follow_down(struct path *);
1281:	int follow_down_one(struct path *);
1108:	int follow_up(struct path *);
1977:	unsigned int full_name_hash(const void *, const char *, unsigned int);
346:	int generic_permission(struct inode *, int);
207:	struct filename *getname(const char *);
128:	struct filename *getname_flags(const char *, int, int *);
213:	struct filename *getname_kernel(const char *);
1998:	u64 hashlen_string(const void *, const char *);
439:	int inode_permission(struct inode *, int);
2454:	int kern_path(const char *, unsigned int, struct path *);
3502:	struct dentry *kern_path_create(int, const char *, struct path *, unsigned int);
2428:	struct dentry *kern_path_locked(const char *, struct path *);
2753:	struct dentry *lock_rename(struct dentry *, struct dentry *);
2552:	struct dentry *lookup_one_len(const char *, struct dentry *, int);
2581:	struct dentry *lookup_one_len_unlocked(const char *, struct dentry *, int);
2607:	struct dentry *lookup_positive_unlocked(const char *, struct dentry *, int);
1033:	int may_linkat(struct path *);
2836:	bool may_open_dev(const struct path *);
905:	int nd_jump_link(struct path *);
4585:	const char *page_get_link(struct dentry *, struct inode *, struct delayed_call *);
4614:	void page_put_link(void *);
4620:	int page_readlink(struct dentry *, char *, int);
4666:	int page_symlink(struct inode *, const char *, int);
481:	void path_get(const struct path *);
2620:	int path_pts(struct path *);
494:	void path_put(const struct path *);
248:	void putname(struct filename *);
4503:	int readlink_copy(char *, int, const char *);
2526:	struct dentry *try_lookup_one_len(const char *, struct dentry *, int);
2784:	void unlock_rename(struct dentry *, struct dentry *);
2646:	int user_path_at_empty(int, const char *, unsigned int, struct path *, int *);
3519:	struct dentry *user_path_create(int, const char *, struct path *, unsigned int);
2794:	int vfs_create(struct inode *, struct dentry *, umode_t, bool);
4570:	const char *vfs_get_link(struct dentry *, struct delayed_call *);
4025:	int vfs_link(struct dentry *, struct inode *, struct dentry *, struct inode **);
3628:	int vfs_mkdir(struct inode *, struct dentry *, umode_t);
3526:	int vfs_mknod(struct inode *, struct dentry *, umode_t, dev_t);
2815:	int vfs_mkobj(struct dentry *, umode_t, int (*)(struct dentry *, umode_t, void *), void *);
2469:	int vfs_path_lookup(struct dentry *, struct vfsmount *, const char *, unsigned int, struct path *);
4528:	int vfs_readlink(struct dentry *, char *, int);
4221:	int vfs_rename(struct inode *, struct dentry *, struct inode *, struct dentry *, struct inode **, unsigned int);
3689:	int vfs_rmdir(struct inode *, struct dentry *);
3943:	int vfs_symlink(struct inode *, struct dentry *, const char *);
3264:	struct dentry *vfs_tmpfile(struct dentry *, umode_t, int);
3810:	int vfs_unlink(struct inode *, struct dentry *, struct inode **);
1318:	static bool __follow_mount_rcu(struct nameidata *, struct path *, struct inode **, unsigned int *);
613:	static bool __legitimize_path(struct path *, unsigned int, unsigned int);
1433:	static struct dentry *__lookup_hash(const struct qstr *, struct dentry *, unsigned int);
1523:	static struct dentry *__lookup_slow(const struct qstr *, struct dentry *, unsigned int);
1213:	static int __traverse_mounts(struct path *, unsigned int, bool *, int *, unsigned int);
2959:	static struct dentry *atomic_open(struct nameidata *, struct dentry *, struct file *, int, umode_t);
1151:	static bool choose_mountpoint(struct mount *, const struct path *, struct path *);
1131:	static bool choose_mountpoint_rcu(struct mount *, const struct path *, struct path *, unsigned int *);
788:	static int complete_walk(struct nameidata *);
4095:	static int do_linkat(int, const char *, int, const char *, int);
3654:	static long do_mkdirat(int, const char *, umode_t);
3573:	static long do_mknodat(int, const char *, umode_t, unsigned int);
3208:	static int do_open(struct nameidata *, struct file *, const struct open_flags *);
4346:	static int do_renameat2(int, const char *, int, const char *, unsigned int);
3964:	static long do_symlinkat(const char *, int, const char *);
3303:	static int do_tmpfile(struct nameidata *, unsigned int, const struct open_flags *, struct file *);
3431:	static struct dentry *filename_create(int, struct filename *, struct path *, unsigned int);
2400:	static struct filename *filename_parentat(int, struct filename *, unsigned int, struct path *, struct qstr *, int *);
1761:	static struct dentry *follow_dotdot(struct nameidata *, struct inode **, unsigned int *);
1721:	static struct dentry *follow_dotdot_rcu(struct nameidata *, struct inode **, unsigned int *);
1798:	static const char *handle_dots(struct nameidata *, int);
2898:	static int handle_truncate(struct file *);
635:	static bool legitimize_links(struct nameidata *);
649:	static bool legitimize_root(struct nameidata *);
2107:	static int link_path_walk(const char *, struct nameidata *);
1409:	static struct dentry *lookup_dcache(const struct qstr *, struct dentry *, unsigned int);
1459:	static struct dentry *lookup_fast(struct nameidata *, struct inode **, unsigned int *);
2480:	static int lookup_one_len_common(const char *, struct dentry *, int, struct qstr *);
3014:	static struct dentry *lookup_open(struct nameidata *, struct file *, bool, const struct open_flags *, const struct open_flags *);
2686:	static int may_delete(struct inode *, struct dentry *, bool);
2927:	static int may_o_create(const struct path *, struct dentry *, umode_t);
2842:	static int may_open(const struct path *, int, int);
553:	static bool nd_alloc_stack(struct nameidata *);
869:	static int nd_jump_root(struct nameidata *);
3122:	static const char *open_last_lookups(struct nameidata *, struct file *, const struct open_flags *);
2206:	static const char *path_init(struct nameidata *, unsigned int);
2324:	static int path_lookupat(struct nameidata *, unsigned int, struct path *);
3347:	static struct file *path_openat(struct nameidata *, const struct open_flags *, unsigned int);
2384:	static int path_parentat(struct nameidata *, unsigned int, struct path *);
1610:	static const char *pick_link(struct nameidata *, struct path *, struct inode *, unsigned int, int);
842:	static int set_root(struct nameidata *);
1688:	static const char *step_into(struct nameidata *, int, struct dentry *, struct inode *, unsigned int);
593:	static void terminate_walk(struct nameidata *);
687:	static bool try_to_unlazy(struct nameidata *);
725:	static int unlazy_child(struct nameidata *, struct dentry *, unsigned int);
1843:	static const char *walk_component(struct nameidata *, int);

File fs/namespace.c:
1666:	void __detach_mounts(struct dentry *);
3466:	long __ia32_sys_fsmount(const struct pt_regs *);
3428:	long __ia32_sys_mount(const struct pt_regs *);
3610:	long __ia32_sys_move_mount(const struct pt_regs *);
1778:	long __ia32_sys_oldumount(const struct pt_regs *);
2442:	long __ia32_sys_open_tree(const struct pt_regs *);
3710:	long __ia32_sys_pivot_root(const struct pt_regs *);
1768:	long __ia32_sys_umount(const struct pt_regs *);
682:	bool __is_local_mountpoint(struct dentry *);
564:	int __legitimize_mnt(struct vfsmount *, unsigned int);
609:	struct mount *__lookup_mnt(struct vfsmount *, struct dentry *);
429:	void __mnt_drop_write(struct vfsmount *);
451:	void __mnt_drop_write_file(struct file *);
247:	bool __mnt_is_readonly(struct vfsmount *);
312:	int __mnt_want_write(struct vfsmount *);
394:	int __mnt_want_write_file(struct file *);
3466:	long __x64_sys_fsmount(const struct pt_regs *);
3428:	long __x64_sys_mount(const struct pt_regs *);
3610:	long __x64_sys_move_mount(const struct pt_regs *);
1778:	long __x64_sys_oldumount(const struct pt_regs *);
2442:	long __x64_sys_open_tree(const struct pt_regs *);
3710:	long __x64_sys_pivot_root(const struct pt_regs *);
1768:	long __x64_sys_umount(const struct pt_regs *);
1950:	struct vfsmount *clone_private_mount(const struct path *);
1882:	struct vfsmount *collect_mounts(const struct path *);
3312:	struct mnt_namespace *copy_mnt_ns(unsigned long, struct mnt_namespace *, struct user_namespace *, struct fs_struct *);
1815:	struct mount *copy_tree(struct mount *, struct dentry *, int);
2051:	int count_mounts(struct mnt_namespace *, struct mount *);
3926:	bool current_chrooted(void);
1900:	void dissolve_on_fput(struct vfsmount *);
3234:	long do_mount(const char *, const char *, const char *, unsigned long, void *);
1918:	void drop_collected_mounts(struct vfsmount *);
977:	struct vfsmount *fc_mount(struct fs_context *);
2908:	int finish_automount(struct vfsmount *, struct path *);
1797:	struct ns_common *from_mnt_ns(struct mnt_namespace *);
3665:	bool is_path_reachable(struct mount *, struct dentry *, const struct path *);
1982:	int iterate_mounts(int (*)(struct vfsmount *, void *), void *, struct vfsmount *);
3882:	struct vfsmount *kern_mount(struct file_system_type *);
3897:	void kern_unmount(struct vfsmount *);
3908:	void kern_unmount_array(struct vfsmount **, unsigned int);
592:	bool legitimize_mnt(struct vfsmount *, unsigned int);
636:	struct vfsmount *lookup_mnt(const struct path *);
2998:	void mark_mounts_for_expiry(struct list_head *);
1398:	int may_umount(struct vfsmount *);
1361:	int may_umount_tree(struct vfsmount *);
875:	void mnt_change_mountpoint(struct mount *, struct mountpoint *, struct mount *);
1257:	struct vfsmount *mnt_clone_internal(const struct path *);
375:	int mnt_clone_write(struct vfsmount *);
1343:	void mnt_cursor_del(struct mnt_namespace *, struct mount *);
444:	void mnt_drop_write(struct vfsmount *);
456:	void mnt_drop_write_file(struct file *);
159:	int mnt_get_count(struct mount *);
3839:	void mnt_init(void);
4042:	bool mnt_may_suid(struct vfsmount *);
136:	void mnt_release_group_id(struct mount *);
2983:	void mnt_set_expiry(struct vfsmount *, struct list_head *);
845:	void mnt_set_mountpoint(struct mount *, struct mountpoint *, struct mount *);
351:	int mnt_want_write(struct vfsmount *);
409:	int mnt_want_write_file(struct file *);
1220:	struct vfsmount *mntget(struct vfsmount *);
1208:	void mntput(struct vfsmount *);
3391:	struct dentry *mount_subtree(struct vfsmount *, const char *);
3921:	bool our_mnt(struct vfsmount *);
1238:	bool path_is_mountpoint(const struct path *);
3675:	bool path_is_under(const struct path *, const struct path *);
3155:	int path_mount(const char *, struct path *, const char *, unsigned long, void *);
1735:	int path_umount(struct path *, int);
3874:	void put_mnt_ns(struct mnt_namespace *);
513:	int sb_prepare_remount_readonly(struct super_block *);
950:	struct vfsmount *vfs_create_mount(struct fs_context *);
988:	struct vfsmount *vfs_kern_mount(struct file_system_type *, int, const char *, void *);
1019:	struct vfsmount *vfs_submount(const struct dentry *, struct file_system_type *, const char *, void *);
857:	static void __attach_mnt(struct mount *, struct mount *);
1124:	static void __cleanup_mnt(struct callback_head *);
2330:	static struct mount *__do_loopback(struct path *, int);
771:	static void __put_mountpoint(struct mountpoint *, struct list_head *);
3466:	static long __se_sys_fsmount(long, long, long);
3428:	static long __se_sys_mount(long, long, long, long, long);
3610:	static long __se_sys_move_mount(long, long, long, long, long);
2442:	static long __se_sys_open_tree(long, long, long);
3710:	static long __se_sys_pivot_root(long, long);
3276:	static struct mnt_namespace *alloc_mnt_ns(struct user_namespace *, bool);
175:	static struct mount *alloc_vfsmnt(const char *);
867:	static void attach_mnt(struct mount *, struct mount *, struct mountpoint *);
2136:	static int attach_recursive_mnt(struct mount *, struct mount *, struct mountpoint *, bool);
2499:	static bool can_change_locked_flags(unsigned int, struct mount *, struct mount *);
2666:	static bool check_for_nsfs_mounts(struct mount *);
2024:	static void cleanup_group_ids(struct mount *, struct mount *);
1099:	static void cleanup_mnt(struct mount *);
1033:	static struct mount *clone_mnt(struct mount *, struct dentry *, int);
893:	static void commit_tree(struct mount *);
558:	static void delayed_free_vfsmnt(struct callback_head *);
1130:	static void delayed_mntput(struct work_struct *);
2784:	static int do_add_mount(struct mount *, struct mountpoint *, struct path *, int);
2298:	static int do_change_type(int, struct path *, struct path *);
2357:	static int do_loopback(struct path *, const char *, int);
2682:	static int do_move_mount(struct path *, struct path *);
2859:	static int do_new_mount(struct path *, const char *, int, int, const char *, void *);
2818:	static int do_new_mount_fc(struct fs_context *, struct path *, unsigned int);
2579:	static int do_reconfigure_mnt(struct path *, unsigned int);
2610:	static int do_remount(struct path *, int, int, void *, int);
1560:	static int do_umount(struct mount *, int);
3258:	static void free_mnt_ns(struct mnt_namespace *);
717:	static struct mountpoint *get_mountpoint(struct dentry *);
2266:	static int graft_tree(struct mount *, struct mount *, struct mountpoint *);
3809:	static void init_mount_tree(void);
2034:	static int invent_group_ids(struct mount *, bool);
1750:	static int ksys_umount(char *, int);
1997:	static void lock_mnt_tree(struct mount *);
2225:	static struct mountpoint *lock_mount(struct path *);
703:	static struct mountpoint *lookup_mountpoint(struct dentry *);
1306:	static void *m_next(struct seq_file *, void *, loff_t *);
1329:	static int m_show(struct seq_file *, void *);
1287:	static void *m_start(struct seq_file *, loff_t *);
1315:	static void m_stop(struct seq_file *, void *);
3950:	static bool mnt_already_visible(struct mnt_namespace *, const struct super_block *, int *);
1268:	static struct mount *mnt_list_next(struct mnt_namespace *, struct list_head *);
463:	static int mnt_make_readonly(struct mount *);
2552:	static void mnt_warn_timestamp_expiry(struct path *, struct vfsmount *);
4055:	static struct ns_common *mntns_get(struct task_struct *);
4076:	static int mntns_install(struct nsset *, struct ns_common *);
4120:	static struct user_namespace *mntns_owner(struct ns_common *);
4071:	static void mntns_put(struct ns_common *);
1140:	static void mntput_no_expire(struct mount *);
4019:	static bool mount_too_revealing(const struct super_block *, int *);
1412:	static void namespace_unlock(void);
2403:	static struct file *open_detached_copy(struct path *, bool);
3038:	static int select_submounts(struct mount *, struct list_head *);
46:	static int set_mhash_entries(char *);
2543:	static void set_mount_attributes(struct mount *, unsigned int);
56:	static int set_mphash_entries(char *);
837:	static void umount_mnt(struct mount *);
1481:	static void umount_tree(struct mount *, enum umount_tree_flags);
821:	static struct mountpoint *unhash_mnt(struct mount *);
2254:	static void unlock_mount(struct mountpoint *);

File fs/nls/nls_ascii.c:
137:	static int char2uni(const unsigned char *, int, wchar_t *);
158:	static void exit_nls_ascii(void);
153:	static int init_nls_ascii(void);
120:	static int uni2char(wchar_t, unsigned char *, int);

File fs/nls/nls_base.c:
235:	int __register_nls(struct nls_table *, struct module *);
291:	struct nls_table *load_nls(char *);
532:	struct nls_table *load_nls_default(void);
296:	void unload_nls(struct nls_table *);
258:	int unregister_nls(struct nls_table *);
186:	int utf16s_to_utf8s(const wchar_t *, int, enum utf16_endian, u8 *, int);
86:	int utf32_to_utf8(unicode_t, u8 *, int);
55:	int utf8_to_utf32(const u8 *, int, unicode_t *);
132:	int utf8s_to_utf16s(const u8 *, int, enum utf16_endian, wchar_t *, int);
515:	static int char2uni(const unsigned char *, int, wchar_t *);
275:	static struct nls_table *find_nls(char *);
498:	static int uni2char(wchar_t, unsigned char *, int);

File fs/notify/dnotify/dnotify.c:
135:	void dnotify_flush(struct file *, fl_owner_t);
243:	int fcntl_dirnotify(int, struct file *, unsigned long);
112:	static void dnotify_free_mark(struct fsnotify_mark *);
73:	static int dnotify_handle_event(struct fsnotify_mark *, u32, struct inode *, struct inode *, const struct qstr *, u32);
380:	static int dnotify_init(void);
46:	static void dnotify_recalc_inode_mask(struct fsnotify_mark *);

File fs/notify/fanotify/fanotify.c:
527:	static struct fanotify_event *fanotify_alloc_event(struct fsnotify_group *, u32, const void *, int, struct inode *, const struct qstr *, __kernel_fsid_t *);
485:	static struct fanotify_event *fanotify_alloc_name_event(struct inode *, __kernel_fsid_t *, const struct qstr *, struct inode *, gfp_t);
337:	static int fanotify_encode_fh(struct fanotify_fh *, struct inode *, unsigned int, gfp_t);
31:	static bool fanotify_fh_equal(struct fanotify_fh *, struct fanotify_fh *);
778:	static void fanotify_free_event(struct fsnotify_event *);
743:	static void fanotify_free_group_priv(struct fsnotify_group *);
805:	static void fanotify_free_mark(struct fsnotify_mark *);
626:	static __kernel_fsid_t fanotify_get_fsid(struct fsnotify_iter_info *);
172:	static int fanotify_get_response(struct fsnotify_group *, struct fanotify_perm_event *, struct fsnotify_iter_info *);
654:	static int fanotify_handle_event(struct fsnotify_group *, u32, const void *, int, struct inode *, const struct qstr *, u32, struct fsnotify_iter_info *);
52:	static bool fanotify_info_equal(struct fanotify_info *, struct fanotify_info *);
136:	static int fanotify_merge(struct list_head *, struct fsnotify_event *);
91:	static bool fanotify_should_merge(struct fsnotify_event *, struct fsnotify_event *);

File fs/notify/fanotify/fanotify_user.c:
1298:	long __ia32_compat_sys_fanotify_mark(const struct pt_regs *);
923:	long __ia32_sys_fanotify_init(const struct pt_regs *);
1289:	long __ia32_sys_fanotify_mark(const struct pt_regs *);
923:	long __x64_sys_fanotify_init(const struct pt_regs *);
1289:	long __x64_sys_fanotify_mark(const struct pt_regs *);
923:	static long __se_sys_fanotify_init(long, long);
323:	static ssize_t copy_event_to_user(struct fsnotify_group *, struct fanotify_event *, char *, size_t);
228:	static int copy_info_to_user(__kernel_fsid_t *, struct fanotify_fh *, int, const char *, size_t, char *, size_t);
1109:	static int do_fanotify_mark(int, unsigned int, __u64, int, const char *);
846:	static int fanotify_add_mark(struct fsnotify_group *, fsnotify_connp_t *, unsigned int, __u32, unsigned int, __kernel_fsid_t *);
67:	static int fanotify_event_info_len(unsigned int, struct fanotify_event *);
665:	static int fanotify_find_path(int, const char *, struct path *, unsigned int, __u64, unsigned int);
628:	static long fanotify_ioctl(struct file *, unsigned int, unsigned long);
446:	static __poll_t fanotify_poll(struct file *, poll_table *);
460:	static ssize_t fanotify_read(struct file *, char *, size_t, loff_t *);
573:	static int fanotify_release(struct inode *, struct file *);
746:	static int fanotify_remove_mark(struct fsnotify_group *, fsnotify_connp_t *, __u32, unsigned int, __u32);
1313:	static int fanotify_user_setup(void);
545:	static ssize_t fanotify_write(struct file *, const char *, size_t, loff_t *);
166:	static void finish_permission_event(struct fsnotify_group *, struct fanotify_perm_event *, unsigned int);
98:	static struct fanotify_event *get_one_event(struct fsnotify_group *, size_t);
184:	static int process_access_response(struct fsnotify_group *, struct fanotify_response *, struct fanotify_response *);

File fs/notify/fdinfo.c:
142:	void fanotify_show_fdinfo(struct seq_file *, struct file *);
102:	void inotify_show_fdinfo(struct seq_file *, struct file *);
111:	static void fanotify_fdinfo(struct seq_file *, struct fsnotify_mark *);
75:	static void inotify_fdinfo(struct seq_file *, struct fsnotify_mark *);
41:	static void show_mark_fhandle(struct seq_file *, struct inode *);

File fs/notify/fsnotify.c:
20:	void __fsnotify_inode_delete(struct inode *);
180:	int __fsnotify_parent(struct dentry *, __u32, const void *, int);
108:	void __fsnotify_update_child_dentry_flags(struct inode *);
26:	void __fsnotify_vfsmount_delete(struct vfsmount *);
462:	int fsnotify(__u32, const void *, int, struct inode *, const struct qstr *, struct inode *, u32);
95:	void fsnotify_sb_delete(struct super_block *);
242:	static int fsnotify_handle_inode_event(struct fsnotify_mark *, u32, const void *, int, struct inode *, const struct qstr *, u32, struct fsnotify_group *, struct fsnotify_group *);
557:	static int fsnotify_init(void);
397:	static unsigned int fsnotify_iter_select_report_types(struct fsnotify_iter_info *);
38:	static void fsnotify_unmount_inodes(struct super_block *);
314:	static int send_to_group(__u32, const void *, int, struct inode *, const struct qstr *, u32, struct fsnotify_iter_info *);

File fs/notify/group.c:
117:	struct fsnotify_group *fsnotify_alloc_group(const struct fsnotify_ops *);
50:	void fsnotify_destroy_group(struct fsnotify_group *);
144:	int fsnotify_fasync(int, struct file *, int);
99:	void fsnotify_get_group(struct fsnotify_group *);
37:	void fsnotify_group_stop_queueing(struct fsnotify_group *);
107:	void fsnotify_put_group(struct fsnotify_group *);
22:	static void fsnotify_final_destroy_group(struct fsnotify_group *);

File fs/notify/inotify/inotify_fsnotify.c:
58:	int inotify_handle_inode_event(struct fsnotify_mark *, u32, struct inode *, struct inode *, const struct qstr *, u32);
142:	static int idr_callback(int, void *, void *);
179:	static void inotify_free_event(struct fsnotify_event *);
170:	static void inotify_free_group_priv(struct fsnotify_group *);
185:	static void inotify_free_mark(struct fsnotify_mark *);
130:	static void inotify_freeing_mark(struct fsnotify_mark *, struct fsnotify_group *);
49:	static int inotify_merge(struct list_head *, struct fsnotify_event *);

File fs/notify/inotify/inotify_user.c:
696:	long __ia32_sys_inotify_add_watch(const struct pt_regs *);
686:	long __ia32_sys_inotify_init1(const struct pt_regs *);
760:	long __ia32_sys_inotify_rm_watch(const struct pt_regs *);
696:	long __x64_sys_inotify_add_watch(const struct pt_regs *);
686:	long __x64_sys_inotify_init1(const struct pt_regs *);
760:	long __x64_sys_inotify_rm_watch(const struct pt_regs *);
485:	void inotify_ignored_and_remove_idr(struct fsnotify_mark *, struct fsnotify_group *);
691:	static long __do_sys_inotify_init(const struct pt_regs *);
696:	static long __se_sys_inotify_add_watch(long, long, long);
760:	static long __se_sys_inotify_rm_watch(long, long);
164:	static ssize_t copy_event_to_user(struct fsnotify_group *, struct fsnotify_event *, char *);
661:	static int do_inotify_init(int);
134:	static struct fsnotify_event *get_one_event(struct fsnotify_group *, size_t);
359:	static int inotify_add_to_idr(struct idr *, spinlock_t *, struct inotify_inode_mark *);
379:	static struct inotify_inode_mark *inotify_idr_find_locked(struct fsnotify_group *, int);
278:	static long inotify_ioctl(struct file *, unsigned int, unsigned long);
621:	static struct fsnotify_group *inotify_new_group(unsigned int);
556:	static int inotify_new_watch(struct fsnotify_group *, struct inode *, u32);
103:	static __poll_t inotify_poll(struct file *, poll_table *);
214:	static ssize_t inotify_read(struct file *, char *, size_t, loff_t *);
266:	static int inotify_release(struct inode *, struct file *);
417:	static void inotify_remove_from_idr(struct fsnotify_group *, struct inotify_inode_mark *);
798:	static int inotify_user_setup(void);

File fs/notify/mark.c:
683:	int fsnotify_add_mark(struct fsnotify_mark *, fsnotify_connp_t *, unsigned int, int, __kernel_fsid_t *);
640:	int fsnotify_add_mark_locked(struct fsnotify_mark *, fsnotify_connp_t *, unsigned int, int, __kernel_fsid_t *);
724:	void fsnotify_clear_marks_by_group(struct fsnotify_group *, unsigned int);
459:	int fsnotify_compare_groups(struct fsnotify_group *, struct fsnotify_group *);
111:	__u32 fsnotify_conn_mask(struct fsnotify_mark_connector *);
430:	void fsnotify_destroy_mark(struct fsnotify_mark *, struct fsnotify_group *);
769:	void fsnotify_destroy_marks(fsnotify_connp_t *);
375:	void fsnotify_detach_mark(struct fsnotify_mark *);
700:	struct fsnotify_mark *fsnotify_find_mark(fsnotify_connp_t *, struct fsnotify_group *);
355:	void fsnotify_finish_user_wait(struct fsnotify_iter_info *);
408:	void fsnotify_free_mark(struct fsnotify_mark *);
94:	void fsnotify_get_mark(struct fsnotify_mark *);
810:	void fsnotify_init_mark(struct fsnotify_mark *, struct fsnotify_group *);
327:	bool fsnotify_prepare_user_wait(struct fsnotify_iter_info *);
227:	void fsnotify_put_mark(struct fsnotify_mark *);
141:	void fsnotify_recalc_mask(struct fsnotify_mark_connector *);
845:	void fsnotify_wait_marks_destroyed(void);
119:	static void __fsnotify_recalc_mask(struct fsnotify_mark_connector *);
547:	static int fsnotify_add_mark_list(struct fsnotify_mark *, fsnotify_connp_t *, unsigned int, int, __kernel_fsid_t *);
155:	static void fsnotify_connector_destroy_workfn(struct work_struct *);
172:	static void *fsnotify_detach_connector_from_object(struct fsnotify_mark_connector *, unsigned int *);
210:	static void fsnotify_drop_object(unsigned int, void *);
199:	static void fsnotify_final_mark_destroy(struct fsnotify_mark *);
288:	static bool fsnotify_get_mark_safe(struct fsnotify_mark *);
520:	static struct fsnotify_mark_connector *fsnotify_grab_connector(fsnotify_connp_t *);
826:	static void fsnotify_mark_destroy_workfn(struct work_struct *);
312:	static void fsnotify_put_mark_wake(struct fsnotify_mark *);

File fs/notify/notification.c:
84:	int fsnotify_add_event(struct fsnotify_group *, struct fsnotify_event *, int (*)(struct list_head *, struct fsnotify_event *));
57:	void fsnotify_destroy_event(struct fsnotify_group *, struct fsnotify_event *);
177:	void fsnotify_flush_notify(struct fsnotify_group *);
44:	u32 fsnotify_get_cookie(void);
51:	bool fsnotify_notify_queue_is_empty(struct fsnotify_group *);
165:	struct fsnotify_event *fsnotify_peek_first_event(struct fsnotify_group *);
147:	struct fsnotify_event *fsnotify_remove_first_event(struct fsnotify_group *);
131:	void fsnotify_remove_queued_event(struct fsnotify_group *, struct fsnotify_event *);

File fs/nsfs.c:
217:	int ns_get_name(char *, size_t, struct task_struct *, const struct proc_ns_operations *);
136:	int ns_get_path(struct path *, struct task_struct *, const struct proc_ns_operations *);
109:	int ns_get_path_cb(struct path *, ns_get_path_helper_t *, void *);
263:	bool ns_match(const struct ns_common *, dev_t, ino_t);
300:	void nsfs_init(void);
147:	int open_related_ns(struct ns_common *, struct ns_common *(*)(struct ns_common *));
237:	struct file *proc_ns_fget(int);
232:	bool proc_ns_file(const struct file *);
58:	static int __ns_get_path(struct path *, struct ns_common *);
26:	static char *ns_dname(struct dentry *, char *, int);
188:	static long ns_ioctl(struct file *, unsigned int, unsigned long);
35:	static void ns_prune_dentry(struct dentry *);
51:	static void nsfs_evict(struct inode *);
284:	static int nsfs_init_fs_context(struct fs_context *);
269:	static int nsfs_show_path(struct seq_file *, struct dentry *);

File fs/open.c:
1243:	long __ia32_compat_sys_open(const struct pt_regs *);
1252:	long __ia32_compat_sys_openat(const struct pt_regs *);
149:	long __ia32_compat_sys_truncate(const struct pt_regs *);
480:	long __ia32_sys_access(const struct pt_regs *);
485:	long __ia32_sys_chdir(const struct pt_regs *);
637:	long __ia32_sys_chmod(const struct pt_regs *);
722:	long __ia32_sys_chown(const struct pt_regs *);
533:	long __ia32_sys_chroot(const struct pt_regs *);
1305:	long __ia32_sys_close(const struct pt_regs *);
1330:	long __ia32_sys_close_range(const struct pt_regs *);
1264:	long __ia32_sys_creat(const struct pt_regs *);
469:	long __ia32_sys_faccessat(const struct pt_regs *);
474:	long __ia32_sys_faccessat2(const struct pt_regs *);
338:	long __ia32_sys_fallocate(const struct pt_regs *);
511:	long __ia32_sys_fchdir(const struct pt_regs *);
601:	long __ia32_sys_fchmod(const struct pt_regs *);
631:	long __ia32_sys_fchmodat(const struct pt_regs *);
758:	long __ia32_sys_fchown(const struct pt_regs *);
716:	long __ia32_sys_fchownat(const struct pt_regs *);
203:	long __ia32_sys_ftruncate(const struct pt_regs *);
727:	long __ia32_sys_lchown(const struct pt_regs *);
1200:	long __ia32_sys_open(const struct pt_regs *);
1207:	long __ia32_sys_openat(const struct pt_regs *);
1215:	long __ia32_sys_openat2(const struct pt_regs *);
143:	long __ia32_sys_truncate(const struct pt_regs *);
480:	long __x64_sys_access(const struct pt_regs *);
485:	long __x64_sys_chdir(const struct pt_regs *);
637:	long __x64_sys_chmod(const struct pt_regs *);
722:	long __x64_sys_chown(const struct pt_regs *);
533:	long __x64_sys_chroot(const struct pt_regs *);
1305:	long __x64_sys_close(const struct pt_regs *);
1330:	long __x64_sys_close_range(const struct pt_regs *);
1264:	long __x64_sys_creat(const struct pt_regs *);
469:	long __x64_sys_faccessat(const struct pt_regs *);
474:	long __x64_sys_faccessat2(const struct pt_regs *);
338:	long __x64_sys_fallocate(const struct pt_regs *);
511:	long __x64_sys_fchdir(const struct pt_regs *);
601:	long __x64_sys_fchmod(const struct pt_regs *);
631:	long __x64_sys_fchmodat(const struct pt_regs *);
758:	long __x64_sys_fchown(const struct pt_regs *);
716:	long __x64_sys_fchownat(const struct pt_regs *);
203:	long __x64_sys_ftruncate(const struct pt_regs *);
727:	long __x64_sys_lchown(const struct pt_regs *);
1200:	long __x64_sys_open(const struct pt_regs *);
1207:	long __x64_sys_openat(const struct pt_regs *);
1215:	long __x64_sys_openat2(const struct pt_regs *);
143:	long __x64_sys_truncate(const struct pt_regs *);
994:	int build_open_flags(const struct open_how *, struct open_flags *);
978:	struct open_how build_open_how(int, umode_t);
566:	int chmod_common(const struct path *, umode_t);
642:	int chown_common(const struct path *, uid_t, gid_t);
934:	struct file *dentry_open(const struct path *, int, const struct cred *);
684:	int do_fchownat(int, const char *, uid_t, gid_t, int);
155:	long do_sys_ftruncate(unsigned int, loff_t, int);
1193:	long do_sys_open(int, const char *, int, umode_t);
121:	long do_sys_truncate(const char *, loff_t);
38:	int do_truncate(struct dentry *, loff_t, unsigned int, struct file *);
1118:	struct file *file_open_name(struct filename *, int, umode_t);
1152:	struct file *file_open_root(const struct path *, const char *, int, umode_t);
916:	char *file_path(struct file *, char *, int);
1278:	int filp_close(struct file *, fl_owner_t);
1139:	struct file *filp_open(const char *, int, umode_t);
909:	int finish_no_open(struct file *, struct dentry *);
885:	int finish_open(struct file *, struct dentry *, int (*)(struct inode *, struct file *));
1355:	int generic_file_open(struct inode *, struct file *);
326:	int ksys_fallocate(int, int, loff_t, loff_t);
746:	int ksys_fchown(unsigned int, uid_t, gid_t);
1370:	int nonseekable_open(struct inode *, struct file *);
957:	struct file *open_with_fake_path(const struct path *, int, struct inode *, const struct cred *);
1388:	int stream_open(struct inode *, struct file *);
229:	int vfs_fallocate(struct file *, int, loff_t, loff_t);
595:	int vfs_fchmod(struct file *, umode_t);
733:	int vfs_fchown(struct file *, uid_t, gid_t);
928:	int vfs_open(const struct path *, struct file *);
69:	long vfs_truncate(const struct path *, loff_t);
1340:	static long __do_sys_vhangup(const struct pt_regs *);
485:	static long __se_sys_chdir(long);
533:	static long __se_sys_chroot(long);
511:	static long __se_sys_fchdir(long);
1215:	static long __se_sys_openat2(long, long, long, long);
348:	static const struct cred *access_override_creds(void);
763:	static int do_dentry_open(struct file *, struct inode *, int (*)(struct inode *, struct file *));
397:	static long do_faccessat(int, const char *, int, int);
613:	static int do_fchmodat(int, const char *, umode_t);
1164:	static long do_sys_openat2(int, const char *, struct open_how *);

File fs/pipe.c:
1029:	long __ia32_sys_pipe(const struct pt_regs *);
1024:	long __ia32_sys_pipe2(const struct pt_regs *);
1029:	long __x64_sys_pipe(const struct pt_regs *);
1024:	long __x64_sys_pipe2(const struct pt_regs *);
757:	unsigned long account_pipe_buffers(struct user_struct *, unsigned long, unsigned long);
782:	struct pipe_inode_info *alloc_pipe_info(void);
909:	int create_pipe_files(struct file **, int);
987:	int do_pipe_flags(int *, int);
830:	void free_pipe_info(struct pipe_inode_info *);
192:	bool generic_pipe_buf_get(struct pipe_inode_info *, struct pipe_buffer *);
206:	void generic_pipe_buf_release(struct pipe_inode_info *, struct pipe_buffer *);
164:	bool generic_pipe_buf_try_steal(struct pipe_inode_info *, struct pipe_buffer *);
1366:	struct pipe_inode_info *get_pipe_info(struct file *, bool);
110:	void pipe_double_lock(struct pipe_inode_info *, struct pipe_inode_info *);
1379:	long pipe_fcntl(struct file *, unsigned int, unsigned long);
777:	bool pipe_is_unprivileged_user(void);
84:	void pipe_lock(struct pipe_inode_info *);
1247:	int pipe_resize_ring(struct pipe_inode_info *, unsigned int);
93:	void pipe_unlock(struct pipe_inode_info *);
1043:	void pipe_wait_readable(struct pipe_inode_info *);
1050:	void pipe_wait_writable(struct pipe_inode_info *);
1232:	unsigned int round_pipe_size(unsigned long);
770:	bool too_many_pipe_buffers_hard(unsigned long);
763:	bool too_many_pipe_buffers_soft(unsigned long);
952:	static int __do_pipe_flags(int *, struct file **, int);
124:	static void anon_pipe_buf_release(struct pipe_inode_info *, struct pipe_buffer *);
140:	static bool anon_pipe_buf_try_steal(struct pipe_inode_info *, struct pipe_buffer *);
1002:	static int do_pipe2(int *, int);
1091:	static int fifo_open(struct inode *, struct file *);
869:	static struct inode *get_pipe_inode(void);
1434:	static int init_pipe_fs(void);
739:	static int pipe_fasync(int, struct file *, int);
605:	static long pipe_ioctl(struct file *, unsigned int, unsigned long);
647:	static __poll_t pipe_poll(struct file *, poll_table *);
230:	static ssize_t pipe_read(struct kiocb *, struct iov_iter *);
715:	static int pipe_release(struct inode *, struct file *);
1310:	static long pipe_set_size(struct pipe_inode_info *, unsigned long);
414:	static ssize_t pipe_write(struct kiocb *, struct iov_iter *);
859:	static char *pipefs_dname(struct dentry *, char *, int);
1418:	static int pipefs_init_fs_context(struct fs_context *);
699:	static void put_pipe_info(struct inode *, struct pipe_inode_info *);
1069:	static int wait_for_partner(struct pipe_inode_info *, unsigned int *);

File fs/pnode.c:
122:	void change_mnt_propagation(struct mount *, int);
60:	int get_dominating_id(struct mount *, const struct path *);
288:	int propagate_mnt(struct mount *, struct mountpoint *, struct mount *, struct hlist_head *);
369:	int propagate_mount_busy(struct mount *, int);
412:	void propagate_mount_unlock(struct mount *);
535:	int propagate_umount(struct list_head *);
73:	static int do_make_slave(struct mount *);
183:	static struct mount *next_group(struct mount *, struct mount *);
225:	static int propagate_one(struct mount *);
149:	static struct mount *propagation_next(struct mount *, struct mount *);
481:	static void umount_list(struct list_head *, struct list_head *);
427:	static void umount_one(struct mount *, struct list_head *);

File fs/posix_acl.c:
537:	int __posix_acl_chmod(struct posix_acl **, gfp_t, umode_t);
519:	int __posix_acl_create(struct posix_acl **, gfp_t, umode_t *);
89:	void forget_all_cached_acls(struct inode *);
83:	void forget_cached_acl(struct inode *, int);
96:	struct posix_acl *get_acl(struct inode *, int);
38:	struct posix_acl *get_cached_acl(struct inode *, int);
57:	struct posix_acl *get_cached_acl_rcu(struct inode *, int);
177:	struct posix_acl *posix_acl_alloc(int, gfp_t);
555:	int posix_acl_chmod(struct inode *, umode_t);
582:	int posix_acl_create(struct inode *, umode_t *, struct posix_acl **, struct posix_acl **);
279:	int posix_acl_equiv_mode(const struct posix_acl *, umode_t *);
708:	void posix_acl_fix_xattr_from_user(void *, size_t);
716:	void posix_acl_fix_xattr_to_user(void *, size_t);
325:	struct posix_acl *posix_acl_from_mode(umode_t, gfp_t);
728:	struct posix_acl *posix_acl_from_xattr(struct user_namespace *, const void *, size_t);
166:	void posix_acl_init(struct posix_acl *, int);
348:	int posix_acl_permission(struct inode *, const struct posix_acl *, int);
797:	int posix_acl_to_xattr(struct user_namespace *, const struct posix_acl *, void *, size_t);
647:	int posix_acl_update_mode(struct inode *, umode_t *, struct posix_acl **);
210:	int posix_acl_valid(struct user_namespace *, const struct posix_acl *);
63:	void set_cached_acl(struct inode *, int, struct posix_acl *);
861:	int set_posix_acl(struct inode *, int, struct posix_acl *);
941:	int simple_acl_create(struct inode *, struct inode *);
925:	int simple_set_acl(struct inode *, struct posix_acl *, int);
26:	static struct posix_acl **acl_by_type(int, struct inode *);
192:	static struct posix_acl *posix_acl_clone(const struct posix_acl *, gfp_t);
416:	static int posix_acl_create_masq(struct posix_acl *, umode_t *);
669:	static void posix_acl_fix_xattr_userns(struct user_namespace *, struct user_namespace *, void *, size_t);
836:	static int posix_acl_xattr_get(const struct xattr_handler *, struct dentry *, struct inode *, const char *, void *, size_t);
902:	static bool posix_acl_xattr_list(struct dentry *);
883:	static int posix_acl_xattr_set(const struct xattr_handler *, struct dentry *, struct inode *, const char *, const void *, size_t, int);

File fs/proc/array.c:
638:	int proc_pid_statm(struct seq_file *, struct pid_namespace *, struct pid *, struct task_struct *);
407:	int proc_pid_status(struct seq_file *, struct pid_namespace *, struct pid *, struct task_struct *);
98:	void proc_task_name(struct seq_file *, struct task_struct *, bool);
632:	int proc_tgid_stat(struct seq_file *, struct pid_namespace *, struct pid *, struct task_struct *);
626:	int proc_tid_stat(struct seq_file *, struct pid_namespace *, struct pid *, struct task_struct *);
228:	void render_sigset_t(struct seq_file *, const char *, sigset_t *);
743:	static void *children_seq_next(struct seq_file *, void *, loff_t *);
766:	static int children_seq_open(struct inode *, struct file *);
730:	static int children_seq_show(struct seq_file *, void *);
738:	static void *children_seq_start(struct seq_file *, loff_t *);
754:	static void children_seq_stop(struct seq_file *, void *);
433:	static int do_task_stat(struct seq_file *, struct pid_namespace *, struct pid *, struct task_struct *, int);
675:	static struct pid *get_children_pid(struct inode *, struct pid *, loff_t);

File fs/proc/base.c:
903:	loff_t mem_lseek(struct file *, loff_t, int);
2017:	int pid_delete_dentry(const struct dentry *);
1947:	int pid_getattr(const struct path *, struct kstat *, u32, unsigned int);
1980:	void pid_update_inode(struct task_struct *, struct inode *);
2046:	bool proc_fill_cache(struct file *, struct dir_context *, const char *, unsigned int, instantiate_t *, struct task_struct *, const void *);
3359:	void proc_flush_pid(struct pid *);
795:	struct mm_struct *proc_mem_open(struct inode *, unsigned int);
1888:	void proc_pid_evict_inode(struct proc_inode *);
3384:	struct dentry *proc_pid_lookup(struct dentry *, unsigned int);
1901:	struct inode *proc_pid_make_inode(struct super_block *, struct task_struct *, umode_t);
3453:	int proc_pid_readdir(struct file *, struct dir_context *);
689:	int proc_setattr(struct dentry *, struct iattr *);
3869:	void set_proc_pid_nlink(void);
1830:	void task_dump_owner(struct task_struct *, umode_t, kuid_t *, kgid_t *);
3318:	struct pid *tgid_pidfd_to_pid(const struct file *);
1075:	static int __set_oom_adj(int, bool, struct file *, struct file *);
1026:	static int auxv_open(struct inode *, struct file *);
1031:	static ssize_t auxv_read(struct file *, char *, size_t, loff_t *);
1722:	static int comm_open(struct inode *, struct file *);
1705:	static int comm_show(struct seq_file *, void *);
1679:	static ssize_t comm_write(struct file *, const char *, size_t, loff_t *);
2086:	static int dname_to_vma_addr(unsigned long *, unsigned long *, struct dentry *, struct dentry *);
2957:	static int do_io_accounting(struct task_struct *, struct seq_file *, int);
1777:	static int do_proc_readlink(struct path *, char *, int);
951:	static int environ_open(struct inode *, struct file *);
956:	static ssize_t environ_read(struct file *, char *, size_t, loff_t *);
3736:	static struct task_struct *first_tid(struct pid *, int, loff_t, struct pid_namespace *);
256:	static ssize_t get_mm_cmdline(struct mm_struct *, char *, size_t, loff_t *);
219:	static ssize_t get_mm_proctitle(struct mm_struct *, char *, size_t, unsigned long, unsigned long);
173:	static int get_task_root(struct task_struct *, struct path *);
2124:	static int map_files_d_revalidate(struct dentry *, unsigned int);
2175:	static int map_files_get_link(struct dentry *, struct path *);
826:	static int mem_open(struct inode *, struct file *);
891:	static ssize_t mem_read(struct file *, char *, size_t, loff_t *);
935:	static int mem_release(struct inode *, struct file *);
836:	static ssize_t mem_rw(char *, size_t, loff_t *, int, struct file *, struct file *);
897:	static ssize_t mem_write(struct file *, const char *, size_t, loff_t *);
3427:	static struct tgid_iter next_tgid(struct pid_namespace *, struct tgid_iter);
3785:	static struct task_struct *next_tid(struct task_struct *);
1053:	static ssize_t oom_adj_read(struct file *, char *, size_t, loff_t *);
1168:	static ssize_t oom_adj_write(struct file *, const char *, size_t, loff_t *);
1212:	static ssize_t oom_score_adj_read(struct file *, char *, size_t, loff_t *);
1228:	static ssize_t oom_score_adj_write(struct file *, const char *, size_t, loff_t *);
158:	static unsigned int pid_entry_nlink(const struct pid_entry *, unsigned int);
1993:	static int pid_revalidate(struct dentry *, unsigned int);
2831:	static int proc_apparmor_attr_dir_iterate(struct file *, struct dir_context *);
2831:	static struct dentry *proc_apparmor_attr_dir_lookup(struct inode *, struct dentry *, unsigned int);
2863:	static struct dentry *proc_attr_dir_lookup(struct inode *, struct dentry *, unsigned int);
2851:	static int proc_attr_dir_readdir(struct file *, struct dir_context *);
2880:	static ssize_t proc_coredump_filter_read(struct file *, char *, size_t, loff_t *);
2907:	static ssize_t proc_coredump_filter_write(struct file *, const char *, size_t, loff_t *);
186:	static int proc_cwd_link(struct dentry *, struct path *);
1735:	static int proc_exe_link(struct dentry *, struct path *);
673:	static int proc_fd_access_allowed(struct inode *);
3062:	static int proc_gid_map_open(struct inode *, struct file *);
3017:	static int proc_id_map_open(struct inode *, struct file *, const struct seq_operations *);
3049:	static int proc_id_map_release(struct inode *, struct file *);
1265:	static ssize_t proc_loginuid_read(struct file *, char *, size_t, loff_t *);
1282:	static ssize_t proc_loginuid_write(struct file *, const char *, size_t, loff_t *);
2228:	static const char *proc_map_files_get_link(struct dentry *, struct inode *, struct delayed_call *);
2248:	static struct dentry *proc_map_files_instantiate(struct dentry *, struct task_struct *, const void *);
2271:	static struct dentry *proc_map_files_lookup(struct inode *, struct dentry *, unsigned int);
2327:	static int proc_map_files_readdir(struct file *, struct dir_context *);
550:	static int proc_oom_score(struct seq_file *, struct pid_namespace *, struct pid *, struct task_struct *);
2695:	static int proc_pid_attr_open(struct inode *, struct file *);
2702:	static ssize_t proc_pid_attr_read(struct file *, char *, size_t, loff_t *);
2723:	static ssize_t proc_pid_attr_write(struct file *, const char *, size_t, loff_t *);
358:	static ssize_t proc_pid_cmdline_read(struct file *, char *, size_t, loff_t *);
1754:	static const char *proc_pid_get_link(struct dentry *, struct inode *, struct delayed_call *);
3364:	static struct dentry *proc_pid_instantiate(struct dentry *, struct task_struct *, const void *);
596:	static int proc_pid_limits(struct seq_file *, struct pid_namespace *, struct pid *, struct task_struct *);
3160:	static int proc_pid_patch_state(struct seq_file *, struct pid_namespace *, struct pid *, struct task_struct *);
730:	static int proc_pid_permission(struct inode *, int);
3148:	static int proc_pid_personality(struct seq_file *, struct pid_namespace *, struct pid *, struct task_struct *);
1801:	static int proc_pid_readlink(struct dentry *, char *, int);
476:	static int proc_pid_schedstat(struct seq_file *, struct pid_namespace *, struct pid *, struct task_struct *);
428:	static int proc_pid_stack(struct seq_file *, struct pid_namespace *, struct pid *, struct task_struct *);
640:	static int proc_pid_syscall(struct seq_file *, struct task_struct *, struct pid *, struct pid_namespace *);
386:	static int proc_pid_wchan(struct seq_file *, struct pid_namespace *, struct pid *, struct task_struct *);
2616:	static struct dentry *proc_pident_instantiate(struct dentry *, struct task_struct *, const void *);
2640:	static struct dentry *proc_pident_lookup(struct inode *, struct dentry *, const struct pid_entry *, const struct pid_entry *);
2668:	static int proc_pident_readdir(struct file *, struct dir_context *, const struct pid_entry *, unsigned int);
3067:	static int proc_projid_map_open(struct inode *, struct file *);
203:	static int proc_root_link(struct dentry *, struct path *);
1331:	static ssize_t proc_sessionid_read(struct file *, char *, size_t, loff_t *);
3096:	static int proc_setgroups_open(struct inode *, struct file *);
3130:	static int proc_setgroups_release(struct inode *, struct file *);
782:	static int proc_single_open(struct inode *, struct file *);
764:	static int proc_single_show(struct seq_file *, void *);
3841:	static int proc_task_getattr(const struct path *, struct kstat *, u32, unsigned int);
3668:	static struct dentry *proc_task_instantiate(struct dentry *, struct task_struct *, const void *);
3687:	static struct dentry *proc_task_lookup(struct inode *, struct dentry *, unsigned int);
3802:	static int proc_task_readdir(struct file *, struct dir_context *);
3326:	static struct dentry *proc_tgid_base_lookup(struct inode *, struct dentry *, unsigned int);
3306:	static int proc_tgid_base_readdir(struct file *, struct dir_context *);
3009:	static int proc_tgid_io_accounting(struct seq_file *, struct pid_namespace *, struct pid *, struct task_struct *);
3649:	static struct dentry *proc_tid_base_lookup(struct inode *, struct dentry *, unsigned int);
3643:	static int proc_tid_base_readdir(struct file *, struct dir_context *);
3511:	static int proc_tid_comm_permission(struct inode *, int);
3003:	static int proc_tid_io_accounting(struct seq_file *, struct pid_namespace *, struct pid *, struct task_struct *);
2502:	static int proc_timers_open(struct inode *, struct file *);
3057:	static int proc_uid_map_open(struct inode *, struct file *);
1554:	static int sched_autogroup_open(struct inode *, struct file *);
1506:	static int sched_autogroup_show(struct seq_file *, void *);
1522:	static ssize_t sched_autogroup_write(struct file *, const char *, size_t, loff_t *);
1487:	static int sched_open(struct inode *, struct file *);
1454:	static int sched_show(struct seq_file *, void *);
1471:	static ssize_t sched_write(struct file *, const char *, size_t, loff_t *);
2468:	static int show_timer(struct seq_file *, void *);
1665:	static int timens_offsets_open(struct inode *, struct file *);
1578:	static int timens_offsets_show(struct seq_file *, void *);
1592:	static ssize_t timens_offsets_write(struct file *, const char *, size_t, loff_t *);
2447:	static void *timers_next(struct seq_file *, void *, loff_t *);
2432:	static void *timers_start(struct seq_file *, loff_t *);
2453:	static void timers_stop(struct seq_file *, void *);
2603:	static int timerslack_ns_open(struct inode *, struct file *);
2569:	static int timerslack_ns_show(struct seq_file *, void *);
2524:	static ssize_t timerslack_ns_write(struct file *, const char *, size_t, loff_t *);

File fs/proc/bootconfig.c:
15:	static int boot_config_proc_show(struct seq_file *, void *);
26:	static int copy_xbc_key_value_list(char *, size_t);
70:	static int proc_boot_config_init(void);

File fs/proc/cmdline.c:
7:	static int cmdline_proc_show(struct seq_file *, void *);
14:	static int proc_cmdline_init(void);

File fs/proc/consoles.c:
74:	static void *c_next(struct seq_file *, void *, loff_t *);
61:	static void *c_start(struct seq_file *, loff_t *);
81:	static void c_stop(struct seq_file *, void *);
93:	static int proc_consoles_init(void);
15:	static int show_console_dev(struct seq_file *, void *);

File fs/proc/cpuinfo.c:
8:	void arch_freq_prepare_all(void);
13:	static int cpuinfo_open(struct inode *, struct file *);
27:	static int proc_cpuinfo_init(void);

File fs/proc/devices.c:
35:	static void *devinfo_next(struct seq_file *, void *, loff_t *);
8:	static int devinfo_show(struct seq_file *, void *);
28:	static void *devinfo_start(struct seq_file *, loff_t *);
43:	static void devinfo_stop(struct seq_file *, void *);
55:	static int proc_devices_init(void);

File fs/proc/fd.c:
297:	int proc_fd_permission(struct inode *, int);
182:	static struct dentry *proc_fd_instantiate(struct dentry *, struct task_struct *, const void *);
147:	static int proc_fd_link(struct dentry *, struct path *);
321:	static struct dentry *proc_fdinfo_instantiate(struct dentry *, struct task_struct *, const void *);
287:	static struct dentry *proc_lookupfd(struct inode *, struct dentry *, unsigned int);
206:	static struct dentry *proc_lookupfd_common(struct inode *, struct dentry *, instantiate_t *);
343:	static struct dentry *proc_lookupfdinfo(struct inode *, struct dentry *, unsigned int);
276:	static int proc_readfd(struct file *, struct dir_context *);
228:	static int proc_readfd_common(struct file *, struct dir_context *, instantiate_t *);
348:	static int proc_readfdinfo(struct file *, struct dir_context *);
72:	static int seq_fdinfo_open(struct inode *, struct file *);
20:	static int seq_show(struct seq_file *, void *);
84:	static bool tid_fd_mode(struct task_struct *, unsigned int, fmode_t *);
117:	static int tid_fd_revalidate(struct dentry *, unsigned int);
101:	static void tid_fd_update_inode(struct task_struct *, struct inode *, fmode_t);

File fs/proc/generic.c:
799:	void *PDE_DATA(const struct inode *);
484:	struct proc_dir_entry *_proc_mkdir(const char *, umode_t, struct proc_dir_entry *, void *, bool);
37:	void pde_free(struct proc_dir_entry *);
677:	void pde_put(struct proc_dir_entry *);
207:	int proc_alloc_inum(unsigned int *);
584:	struct proc_dir_entry *proc_create(const char *, umode_t, struct proc_dir_entry *, const struct proc_ops *);
569:	struct proc_dir_entry *proc_create_data(const char *, umode_t, struct proc_dir_entry *, const struct proc_ops *, void *);
527:	struct proc_dir_entry *proc_create_mount_point(const char *);
543:	struct proc_dir_entry *proc_create_reg(const char *, umode_t, struct proc_dir_entry **, void *);
618:	struct proc_dir_entry *proc_create_seq_private(const char *, umode_t, struct proc_dir_entry *, const struct seq_operations *, unsigned int, void *);
649:	struct proc_dir_entry *proc_create_single_data(const char *, umode_t, struct proc_dir_entry *, int (*)(struct seq_file *, void *), void *);
220:	void proc_free_inum(unsigned int);
785:	void *proc_get_parent_data(const struct inode *);
269:	struct dentry *proc_lookup(struct inode *, struct dentry *, unsigned int);
249:	struct dentry *proc_lookup_de(struct inode *, struct dentry *, struct proc_dir_entry *);
520:	struct proc_dir_entry *proc_mkdir(const char *, struct proc_dir_entry *);
506:	struct proc_dir_entry *proc_mkdir_data(const char *, umode_t, struct proc_dir_entry *, void *);
513:	struct proc_dir_entry *proc_mkdir_mode(const char *, umode_t, struct proc_dir_entry *);
330:	int proc_readdir(struct file *, struct dir_context *);
289:	int proc_readdir_de(struct file *, struct dir_context *, struct proc_dir_entry *);
372:	struct proc_dir_entry *proc_register(struct proc_dir_entry *, struct proc_dir_entry *);
792:	void proc_remove(struct proc_dir_entry *);
664:	void proc_set_size(struct proc_dir_entry *, loff_t);
670:	void proc_set_user(struct proc_dir_entry *, kuid_t, kgid_t);
810:	ssize_t proc_simple_write(struct file *, const char *, size_t, loff_t *);
461:	struct proc_dir_entry *proc_symlink(const char *, struct proc_dir_entry *, const char *);
688:	void remove_proc_entry(const char *, struct proc_dir_entry *);
727:	int remove_proc_subtree(const char *, struct proc_dir_entry *);
397:	static struct proc_dir_entry *__proc_create(struct proc_dir_entry **, const char *, umode_t, nlink_t);
161:	static int __xlate_proc_name(const char *, struct proc_dir_entry **, const char **);
68:	static struct proc_dir_entry *pde_subdir_find(struct proc_dir_entry *, const char *, unsigned int);
90:	static bool pde_subdir_insert(struct proc_dir_entry *, struct proc_dir_entry *);
136:	static int proc_getattr(const struct path *, struct kstat *, u32, unsigned int);
235:	static int proc_misc_d_delete(const struct dentry *);
225:	static int proc_misc_d_revalidate(struct dentry *, unsigned int);
352:	static int proc_net_d_revalidate(struct dentry *, unsigned int);
118:	static int proc_notify_change(struct dentry *, struct iattr *);
592:	static int proc_seq_open(struct inode *, struct file *);
601:	static int proc_seq_release(struct inode *, struct file *);
634:	static int proc_single_open(struct inode *, struct file *);

File fs/proc/inode.c:
256:	void proc_entry_rundown(struct proc_dir_entry *);
658:	struct inode *proc_get_inode(struct super_block *, struct proc_dir_entry *);
95:	void proc_init_kmemcache(void);
113:	void proc_invalidate_siblings_dcache(struct hlist_head *, spinlock_t *);
218:	static void close_pdeo(struct proc_dir_entry *, struct pde_opener *);
88:	static void init_once(void *);
65:	static struct inode *proc_alloc_inode(struct super_block *);
33:	static void proc_evict_inode(struct inode *);
83:	static void proc_free_inode(struct inode *);
643:	static const char *proc_get_link(struct dentry *, struct inode *, struct delayed_call *);
638:	static void proc_put_link(void *);
422:	static long proc_reg_compat_ioctl(struct file *, unsigned int, unsigned long);
478:	static unsigned long proc_reg_get_unmapped_area(struct file *, unsigned long, unsigned long, unsigned long, unsigned long);
286:	static loff_t proc_reg_llseek(struct file *, loff_t, int);
446:	static int proc_reg_mmap(struct file *, struct vm_area_struct *);
494:	static int proc_reg_open(struct inode *, struct file *);
373:	static __poll_t proc_reg_poll(struct file *, struct poll_table_struct *);
325:	static ssize_t proc_reg_read(struct file *, char *, size_t, loff_t *);
300:	static ssize_t proc_reg_read_iter(struct kiocb *, struct iov_iter *);
558:	static int proc_reg_release(struct inode *, struct file *);
397:	static long proc_reg_unlocked_ioctl(struct file *, unsigned int, unsigned long);
349:	static ssize_t proc_reg_write(struct file *, const char *, size_t, loff_t *);
181:	static int proc_show_options(struct seq_file *, struct dentry *);

File fs/proc/interrupts.c:
17:	static void *int_seq_next(struct seq_file *, void *, loff_t *);
12:	static void *int_seq_start(struct seq_file *, loff_t *);
25:	static void int_seq_stop(struct seq_file *, void *);
37:	static int proc_interrupts_init(void);

File fs/proc/kcore.c:
81:	void kclist_add(struct kcore_list *, void *, size_t, int);
64:	int register_mem_pfn_is_ram(int (*)(unsigned long));
626:	static void add_modules_range(void);
297:	static void append_kcore_note(char *, size_t *, const char *, unsigned int, const void *, size_t);
91:	static size_t get_kcore_size(int *, size_t *, size_t *, size_t *);
145:	static int get_sparsemem_vmemmap_info(struct list_head *, struct kcore_list *, struct kcore_list *);
186:	static int kclist_add_private(unsigned long, unsigned long, void *);
586:	static int kcore_callback(struct notifier_block *, unsigned long, void *);
258:	static int kcore_update_ram(void);
548:	static int open_kcore(struct inode *, struct file *);
639:	static int proc_kcore_init(void);
314:	static ssize_t read_kcore(struct file *, char *, size_t, loff_t *);
572:	static int release_kcore(struct inode *, struct file *);

File fs/proc/kmsg.c:
23:	static int kmsg_open(struct inode *, struct file *);
43:	static __poll_t kmsg_poll(struct file *, poll_table *);
34:	static ssize_t kmsg_read(struct file *, char *, size_t, loff_t *);
28:	static int kmsg_release(struct inode *, struct file *);
61:	static int proc_kmsg_init(void);

File fs/proc/loadavg.c:
13:	static int loadavg_proc_show(struct seq_file *, void *);
28:	static int proc_loadavg_init(void);

File fs/proc/meminfo.c:
22:	void arch_report_meminfo(struct seq_file *);
32:	static int meminfo_proc_show(struct seq_file *, void *);
156:	static int proc_meminfo_init(void);

File fs/proc/namespaces.c:
151:	static struct dentry *proc_ns_dir_lookup(struct inode *, struct dentry *, unsigned int);
118:	static int proc_ns_dir_readdir(struct file *, struct dir_context *);
42:	static const char *proc_ns_get_link(struct dentry *, struct inode *, struct delayed_call *);
98:	static struct dentry *proc_ns_instantiate(struct dentry *, struct task_struct *, const void *);
71:	static int proc_ns_readlink(struct dentry *, char *, int);

File fs/proc/page.c:
108:	u64 stable_page_flags(struct page *);
276:	static ssize_t kpagecgroup_read(struct file *, char *, size_t, loff_t *);
44:	static ssize_t kpagecount_read(struct file *, char *, size_t, loff_t *);
228:	static ssize_t kpageflags_read(struct file *, char *, size_t, loff_t *);
330:	static int proc_page_init(void);

File fs/proc/proc_net.c:
95:	void bpf_iter_fini_seq_net(void *);
85:	int bpf_iter_init_seq_net(void *, struct bpf_iter_aux_info *);
104:	struct proc_dir_entry *proc_create_net_data(const char *, umode_t, struct proc_dir_entry *, const struct seq_operations *, unsigned int, void *);
146:	struct proc_dir_entry *proc_create_net_data_write(const char *, umode_t, struct proc_dir_entry *, const struct seq_operations *, proc_write_t, unsigned int, void *);
197:	struct proc_dir_entry *proc_create_net_single(const char *, umode_t, struct proc_dir_entry *, int (*)(struct seq_file *, void *), void *);
238:	struct proc_dir_entry *proc_create_net_single_write(const char *, umode_t, struct proc_dir_entry *, int (*)(struct seq_file *, void *), proc_write_t, void *);
391:	int proc_net_init(void);
37:	static struct net *get_proc_net(const struct inode *);
257:	static struct net *get_proc_task_net(struct inode *);
380:	static void proc_net_ns_exit(struct net *);
335:	static int proc_net_ns_init(struct net *);
292:	static int proc_tgid_net_getattr(const struct path *, struct kstat *, u32, unsigned int);
277:	static struct dentry *proc_tgid_net_lookup(struct inode *, struct dentry *, unsigned int);
315:	static int proc_tgid_net_readdir(struct file *, struct dir_context *);
42:	static int seq_open_net(struct inode *, struct file *);
68:	static int seq_release_net(struct inode *, struct file *);
166:	static int single_open_net(struct inode *, struct file *);
182:	static int single_release_net(struct inode *, struct file *);

File fs/proc/proc_sysctl.c:
1500:	struct ctl_table_header *__register_sysctl_paths(struct ctl_table_set *, const struct ctl_path *, struct ctl_table *);
1299:	struct ctl_table_header *__register_sysctl_table(struct ctl_table_set *, const char *, struct ctl_table *);
1843:	void do_sysctl_args(void);
483:	void proc_sys_evict_inode(struct inode *, struct ctl_table_header *);
1700:	int proc_sys_init(void);
53:	void proc_sys_poll_notify(struct ctl_table_poll *);
1376:	struct ctl_table_header *register_sysctl(const char *, struct ctl_table *);
1571:	struct ctl_table_header *register_sysctl_paths(const struct ctl_path *, struct ctl_table *);
1588:	struct ctl_table_header *register_sysctl_table(struct ctl_table *);
1695:	void retire_sysctl_set(struct ctl_table_set *);
1686:	void setup_sysctl_set(struct ctl_table_set *, struct ctl_table_root *, int (*)(struct ctl_table_set *));
1656:	void unregister_sysctl_table(struct ctl_table_header *);
1383:	static char *append_path(const char *, char *, const char *);
1396:	static int count_subheaders(struct ctl_table *);
1630:	static void drop_sysctl_table(struct ctl_table_header *);
111:	static struct ctl_table *find_entry(struct ctl_table_header **, const char *, int, struct ctl_dir *, struct ctl_dir *);
365:	static void first_entry(struct ctl_dir *, struct ctl_table_header **, struct ctl_table **);
1188:	static bool get_links(struct ctl_dir *, struct ctl_table *, struct ctl_table_root *);
985:	static struct ctl_dir *get_subdir(struct ctl_dir *, const char *, int);
142:	static int insert_entry(struct ctl_table_header *, struct ctl_table *);
217:	static int insert_header(struct ctl_dir *, struct ctl_table_header *);
95:	static int namecmp(const char *, int, const char *, int);
947:	static struct ctl_dir *new_dir(struct ctl_table_set *, const char *, int);
1145:	static struct ctl_table_header *new_links(struct ctl_dir *, struct ctl_table *, struct ctl_table_root *);
383:	static void next_entry(struct ctl_table_header **, struct ctl_table **);
544:	static ssize_t proc_sys_call_handler(struct kiocb *, struct iov_iter *, int);
907:	static int proc_sys_compare(const struct dentry *, unsigned int, const char *, const struct qstr *);
887:	static int proc_sys_delete(const struct dentry *);
669:	static bool proc_sys_fill_cache(struct dir_context *, struct ctl_table_header *, struct ctl_table *, struct file *, struct file *);
833:	static int proc_sys_getattr(const struct path *, struct kstat *, u32, unsigned int);
500:	static struct dentry *proc_sys_lookup(struct inode *, struct dentry *, unsigned int);
432:	static struct inode *proc_sys_make_inode(struct super_block *, struct ctl_table_header *, struct ctl_table *);
620:	static int proc_sys_open(struct inode *, struct file *);
788:	static int proc_sys_permission(struct inode *, int);
637:	static __poll_t proc_sys_poll(struct file *, poll_table *);
610:	static ssize_t proc_sys_read(struct kiocb *, struct iov_iter *);
759:	static int proc_sys_readdir(struct file *, struct dir_context *);
880:	static int proc_sys_revalidate(struct dentry *, unsigned int);
816:	static int proc_sys_setattr(struct dentry *, struct iattr *);
615:	static ssize_t proc_sys_write(struct kiocb *, struct iov_iter *);
1748:	static int process_sysctl_arg(char *, char *, const char *, void *);
1596:	static void put_links(struct ctl_table_header *);
1415:	static int register_leaf_sysctl_tables(const char *, char *, struct ctl_table_header ***, struct ctl_table_set *, struct ctl_table *);
278:	static void start_unregistering(struct ctl_table_header *);
1111:	static int sysctl_check_table(const char *, struct ctl_table *);
1082:	static int sysctl_err(const char *, struct ctl_table *, char *, ...);
1048:	static int sysctl_follow_link(struct ctl_table_header **, struct ctl_table **);
318:	static void sysctl_head_finish(struct ctl_table_header *);
308:	static struct ctl_table_header *sysctl_head_grab(struct ctl_table_header *);
419:	static int sysctl_perm(struct ctl_table_header *, struct ctl_table *, int);
88:	static void sysctl_print_dir(struct ctl_dir *, struct ctl_dir *);
1035:	static struct ctl_dir *xlate_dir(struct ctl_table_set *, struct ctl_dir *);

File fs/proc/proc_tty.c:
165:	void proc_tty_init(void);
133:	void proc_tty_register_driver(struct tty_driver *);
149:	void proc_tty_unregister_driver(struct tty_driver *);
69:	static int show_tty_driver(struct seq_file *, void *);
28:	static void show_tty_range(struct seq_file *, struct tty_driver *, dev_t, int);
112:	static void *t_next(struct seq_file *, void *, loff_t *);
106:	static void *t_start(struct seq_file *, loff_t *);
117:	static void t_stop(struct seq_file *, void *);

File fs/proc/root.c:
288:	void proc_root_init(void);
148:	static void proc_apply_options(struct proc_fs_info *, struct user_namespace *, struct fs_context *, struct fs_context *);
162:	static int proc_fill_super(struct super_block *, struct fs_context *);
232:	static void proc_fs_context_free(struct fs_context *);
227:	static int proc_get_tree(struct fs_context *);
247:	static int proc_init_fs_context(struct fs_context *);
263:	static void proc_kill_sb(struct super_block *);
115:	static int proc_parse_param(struct fs_context *, struct fs_parameter *);
216:	static int proc_reconfigure(struct fs_context *);
311:	static int proc_root_getattr(const struct path *, struct kstat *, u32, unsigned int);
319:	static struct dentry *proc_root_lookup(struct inode *, struct dentry *, unsigned int);
327:	static int proc_root_readdir(struct file *, struct dir_context *);

File fs/proc/self.c:
77:	void proc_self_init(void);
43:	int proc_setup_self(struct super_block *);
11:	static const char *proc_self_get_link(struct dentry *, struct inode *, struct delayed_call *);

File fs/proc/softirqs.c:
28:	static int proc_softirqs_init(void);
10:	static int show_softirqs(struct seq_file *, void *);

File fs/proc/stat.c:
48:	u64 get_idle_time(struct kernel_cpustat *, int);
64:	static u64 get_iowait_time(struct kernel_cpustat *, int);
234:	static int proc_stat_init(void);
95:	static void show_all_irqs(struct seq_file *);
107:	static int show_stat(struct seq_file *, void *);
217:	static int stat_open(struct inode *, struct file *);

File fs/proc/task_mmu.c:
31:	void task_mem(struct seq_file *, struct mm_struct *);
88:	unsigned long task_statm(struct mm_struct *, unsigned long *, unsigned long *, unsigned long *, unsigned long *);
83:	unsigned long task_vsize(struct mm_struct *);
782:	static void __show_smap(struct seq_file *, const struct mem_size_stats *, bool);
1126:	static int clear_refs_pte_range(pmd_t *, unsigned long, unsigned long, struct mm_walk *);
1185:	static int clear_refs_test_walk(unsigned long, unsigned long, struct mm_walk *);
1212:	static ssize_t clear_refs_write(struct file *, const char *, size_t, loff_t *);
2153:	static int gather_hugetlb_stats(pte_t *, unsigned long, unsigned long, unsigned long, struct mm_walk *);
2115:	static int gather_pte_stats(pmd_t *, unsigned long, unsigned long, struct mm_walk *);
2039:	static void gather_stats(struct page *, struct numa_maps *, int, unsigned long);
105:	static void hold_task_mempolicy(struct proc_maps_private *);
166:	static void *m_next(struct seq_file *, void *, loff_t *);
127:	static void *m_start(struct seq_file *, loff_t *);
183:	static void m_stop(struct seq_file *, void *);
1923:	static long mm_idle_ioctl(struct file *, unsigned int, unsigned long);
1872:	static int mm_idle_open(struct inode *, struct file *);
1855:	static ssize_t mm_idle_read(struct file *, char *, size_t, loff_t *);
1903:	static int mm_idle_release(struct inode *, struct file *);
1965:	static int mm_swap_open(struct inode *, struct file *);
1996:	static int mm_swap_release(struct inode *, struct file *);
1956:	static ssize_t mm_swap_write(struct file *, const char *, size_t, loff_t *);
1839:	static int page_scan_lock(struct file_lock *, int, struct file *);
1941:	static int page_swap_lock(struct file_lock *, int, struct file *);
1504:	static int pagemap_hugetlb_range(pte_t *, unsigned long, unsigned long, unsigned long, struct mm_walk *);
1810:	static int pagemap_open(struct inode *, struct file *);
1410:	static int pagemap_pmd_range(pmd_t *, unsigned long, unsigned long, struct mm_walk *);
1331:	static int pagemap_pte_hole(unsigned long, unsigned long, int, struct mm_walk *);
1583:	static ssize_t pagemap_read(struct file *, char *, size_t, loff_t *);
1821:	static int pagemap_release(struct inode *, struct file *);
348:	static int pid_maps_open(struct inode *, struct file *);
2272:	static int pid_numa_maps_open(struct inode *, struct file *);
971:	static int pid_smaps_open(struct inode *, struct file *);
218:	static int proc_map_release(struct inode *, struct file *);
1371:	static pagemap_entry_t pte_to_pagemap_entry(struct pagemapread *, struct vm_area_struct *, unsigned long, pte_t);
335:	static int show_map(struct seq_file *, void *);
272:	static void show_map_vma(struct seq_file *, struct vm_area_struct *);
2188:	static int show_numa_map(struct seq_file *, void *);
820:	static int show_smap(struct seq_file *, void *);
848:	static int show_smaps_rollup(struct seq_file *, void *);
251:	static void show_vma_header_prefix(struct seq_file *, unsigned long, unsigned long, vm_flags_t, unsigned long long, dev_t, unsigned long);
737:	static void smap_gather_stats(struct vm_area_struct *, struct mem_size_stats *, unsigned long);
433:	static void smaps_account(struct mem_size_stats *, struct page *, bool, bool, bool, bool);
688:	static int smaps_hugetlb_range(pte_t *, unsigned long, unsigned long, unsigned long, struct mm_walk *);
404:	static void smaps_page_accumulate(struct mem_size_stats *, struct page *, unsigned long, unsigned long, bool, bool, bool);
538:	static void smaps_pmd_entry(pmd_t *, unsigned long, struct mm_walk *, struct mm_walk *);
492:	static void smaps_pte_entry(pte_t *, unsigned long, struct mm_walk *, struct mm_walk *);
478:	static int smaps_pte_hole(unsigned long, unsigned long, int, struct mm_walk *);
574:	static int smaps_pte_range(pmd_t *, unsigned long, unsigned long, struct mm_walk *);
976:	static int smaps_rollup_open(struct inode *, struct file *);
1005:	static int smaps_rollup_release(struct inode *, struct file *);

File fs/proc/thread_self.c:
43:	int proc_setup_thread_self(struct super_block *);
77:	void proc_thread_self_init(void);
11:	static const char *proc_thread_self_get_link(struct dentry *, struct inode *, struct delayed_call *);

File fs/proc/uptime.c:
40:	static int proc_uptime_init(void);
11:	static int uptime_proc_show(struct seq_file *, void *);

File fs/proc/util.c:
4:	unsigned int name_to_int(const struct qstr *);

File fs/proc/version.c:
18:	static int proc_version_init(void);
9:	static int version_proc_show(struct seq_file *, void *);

File fs/proc/vmcore.c:
202:	ssize_t copy_oldmem_page_encrypted(unsigned long, char *, size_t, unsigned long, int);
160:	int elfcorehdr_alloc(unsigned long long *, unsigned long long *);
168:	void elfcorehdr_free(unsigned long long);
174:	ssize_t elfcorehdr_read(char *, size_t, u64 *);
182:	ssize_t elfcorehdr_read_notes(char *, size_t, u64 *);
106:	ssize_t read_from_oldmem(char *, size_t, u64 *, int, bool);
71:	int register_oldmem_pfn_is_ram(int (*)(unsigned long));
190:	int remap_oldmem_pfn_range(struct vm_area_struct *, unsigned long, unsigned long, unsigned long, pgprot_t);
80:	void unregister_oldmem_pfn_is_ram(void);
1456:	int vmcore_add_device_dump(struct vmcoredd_data *);
1570:	void vmcore_cleanup(void);
299:	static ssize_t __read_vmcore(char *, size_t, loff_t *, int);
211:	static int copy_to(void *, void *, size_t, int);
1184:	static void free_elfcorebuf(void);
680:	static struct vmcore *get_new_element(void);
1019:	static int merge_note_headers_elf32(char *, size_t *, char **, size_t *);
828:	static int merge_note_headers_elf64(char *, size_t *, char **, size_t *);
554:	static int mmap_vmcore(struct file *, struct vm_area_struct *);
415:	static vm_fault_t mmap_vmcore_fault(struct vm_fault *);
1248:	static int parse_crash_elf32_headers(void);
1192:	static int parse_crash_elf64_headers(void);
1303:	static int parse_crash_elf_headers(void);
402:	static ssize_t read_vmcore(struct file *, char *, size_t, loff_t *);
490:	static int remap_oldmem_pfn_checked(struct vm_area_struct *, unsigned long, unsigned long, unsigned long, pgprot_t);
898:	static int update_note_header_size_elf32(const Elf32_Ehdr *);
707:	static int update_note_header_size_elf64(const Elf64_Ehdr *);
1540:	static int vmcore_init(void);
1371:	static void vmcoredd_update_program_headers(char *, size_t, size_t);

File fs/proc_namespace.c:
311:	static int mountinfo_open(struct inode *, struct file *);
306:	static int mounts_open(struct inode *, struct file *);
239:	static int mounts_open_common(struct inode *, struct file *, int (*)(struct seq_file *, struct vfsmount *));
21:	static __poll_t mounts_poll(struct file *, poll_table *);
296:	static int mounts_release(struct inode *, struct file *);
316:	static int mountstats_open(struct inode *, struct file *);
132:	static int show_mountinfo(struct seq_file *, struct vfsmount *);
98:	static int show_vfsmnt(struct seq_file *, struct vfsmount *);
194:	static int show_vfsstat(struct seq_file *, struct vfsmount *);

File fs/pstore/inode.c:
506:	void pstore_exit_fs(void);
416:	void pstore_get_records(int);
489:	int pstore_init_fs(void);
345:	int pstore_mkfile(struct dentry *, struct pstore_record *);
311:	int pstore_put_backend_records(struct pstore_info *);
239:	static void parse_options(char *);
207:	static void pstore_evict_inode(struct inode *);
160:	static loff_t pstore_file_llseek(struct file *, loff_t, int);
140:	static int pstore_file_open(struct inode *, struct file *);
128:	static ssize_t pstore_file_read(struct file *, char *, size_t, loff_t *);
428:	static int pstore_fill_super(struct super_block *, void *, int);
88:	static void *pstore_ftrace_seq_next(struct seq_file *, void *, loff_t *);
101:	static int pstore_ftrace_seq_show(struct seq_file *, void *);
63:	static void *pstore_ftrace_seq_start(struct seq_file *, loff_t *);
83:	static void pstore_ftrace_seq_stop(struct seq_file *, void *);
220:	static struct inode *pstore_get_inode(struct super_block *);
467:	static void pstore_kill_sb(struct super_block *);
461:	static struct dentry *pstore_mount(struct file_system_type *, int, const char *, void *);
274:	static int pstore_remount(struct super_block *, int *, char *);
267:	static int pstore_show_options(struct seq_file *, struct dentry *);
180:	static int pstore_unlink(struct inode *, struct dentry *);

File fs/pstore/platform.c:
729:	void pstore_get_backend_records(struct pstore_info *, struct dentry *, int);
125:	enum pstore_type_id pstore_name_to_type(const char *);
370:	void pstore_record_init(struct pstore_record *, struct pstore_info *);
561:	int pstore_register(struct pstore_info *);
106:	void pstore_set_kmsg_bytes(int);
114:	const char *pstore_type_to_name(enum pstore_type_id);
628:	void pstore_unregister(struct pstore_info *);
284:	static void allocate_buf_for_compression(void);
351:	static size_t copy_kmsg_to_buffer(int, size_t);
668:	static void decompress_record(struct pstore_record *);
333:	static void free_buf_for_compression(void);
789:	static void pstore_dowork(struct work_struct *);
385:	static void pstore_dump(struct kmsg_dumper *, enum kmsg_dump_reason);
840:	static void pstore_exit(void);
819:	static int pstore_init(void);
794:	static void pstore_timefunc(struct timer_list *);
531:	static int pstore_write_user_compat(struct pstore_record *, const char *);
169:	static int zbufsize_deflate(size_t);

File fs/quota/dquot.c:
1650:	int __dquot_alloc_space(struct inode *, qsize_t, int);
1849:	void __dquot_free_space(struct inode *, qsize_t, int);
1949:	int __dquot_transfer(struct inode *, struct dquot **);
136:	void __quota_error(struct super_block *, const char *, const char *, ...);
847:	struct dquot *dqget(struct super_block *, struct kqid);
753:	void dqput(struct dquot *);
427:	int dquot_acquire(struct dquot *);
812:	struct dquot *dquot_alloc(struct super_block *, int);
1721:	int dquot_alloc_inode(struct inode *);
1765:	int dquot_claim_space_nodirty(struct inode *, qsize_t);
471:	int dquot_commit(struct dquot *);
2117:	int dquot_commit_info(struct super_block *, int);
520:	void dquot_destroy(struct dquot *);
2185:	int dquot_disable(struct super_block *, int, unsigned int);
1580:	void dquot_drop(struct inode *);
2155:	int dquot_file_open(struct inode *, struct file *);
1904:	void dquot_free_inode(struct inode *);
2610:	int dquot_get_dqblk(struct super_block *, struct kqid, struct qc_dqblk *);
2625:	int dquot_get_next_dqblk(struct super_block *, struct kqid *, struct qc_dqblk *);
2125:	int dquot_get_next_id(struct super_block *, struct kqid *);
2762:	int dquot_get_state(struct super_block *, struct qc_state *);
1535:	int dquot_initialize(struct inode *);
1541:	bool dquot_initialize_needed(struct inode *);
2415:	int dquot_load_quota_inode(struct inode *, int, int, unsigned int);
2333:	int dquot_load_quota_sb(struct super_block *, int, int, unsigned int);
351:	int dquot_mark_dquot_dirty(struct dquot *);
2291:	int dquot_quota_off(struct super_block *, int);
2465:	int dquot_quota_on(struct super_block *, int, int, const struct path *);
2486:	int dquot_quota_on_mount(struct super_block *, char *, int, int);
680:	int dquot_quota_sync(struct super_block *, int);
1807:	void dquot_reclaim_space_nodirty(struct inode *, qsize_t);
494:	int dquot_release(struct dquot *);
2431:	int dquot_resume(struct super_block *, int);
581:	int dquot_scan_active(struct super_block *, int (*)(struct dquot *, unsigned long), unsigned long);
2743:	int dquot_set_dqblk(struct super_block *, struct kqid, struct qc_dqblk *);
2797:	int dquot_set_dqinfo(struct super_block *, int, struct qc_info *);
2075:	int dquot_transfer(struct inode *, struct iattr *);
624:	int dquot_writeback_dquots(struct super_block *, int);
415:	void mark_info_dirty(struct super_block *, int);
165:	int register_quota_format(struct quota_format_type *);
175:	void unregister_quota_format(struct quota_format_type *);
1565:	static void __dquot_drop(struct inode *);
1430:	static int __dquot_initialize(struct inode *, int);
947:	static int add_dquot_ref(struct super_block *, int);
2593:	static void do_get_dqblk(struct dquot *, struct qc_dqblk *);
2844:	static int do_proc_dqstats(struct ctl_table *, int, void *, size_t *, loff_t *);
2652:	static int do_set_dqblk(struct dquot *, struct qc_dqblk *);
738:	static unsigned long dqcache_shrink_count(struct shrinker *, struct shrink_control *);
718:	static unsigned long dqcache_shrink_scan(struct shrinker *, struct shrink_control *);
1266:	static int dquot_add_inodes(struct dquot *, qsize_t, struct dquot_warn *);
1311:	static int dquot_add_space(struct dquot *, qsize_t, qsize_t, unsigned int, struct dquot_warn *);
1118:	static void dquot_decr_inodes(struct dquot *, qsize_t);
1130:	static void dquot_decr_space(struct dquot *, qsize_t);
2947:	static int dquot_init(void);
2547:	static int dquot_quota_disable(struct super_block *, unsigned int);
2506:	static int dquot_quota_enable(struct super_block *, unsigned int);
189:	static struct quota_format_type *find_quota_format(int);
1242:	static void flush_warnings(struct dquot_warn *);
1379:	static int info_idq_free(struct dquot *, qsize_t);
537:	static void invalidate_dquots(struct super_block *, int);
1227:	static void prepare_warning(struct dquot_warn *, struct dquot *, int);
1055:	static void remove_dquot_ref(struct super_block *, int, struct list_head *);
1008:	static void remove_inode_dquot_ref(struct inode *, int, struct list_head *);
2166:	static void vfs_cleanup_quota_inode(struct super_block *, int);

File fs/quota/kqid.c:
68:	qid_t from_kqid(struct user_namespace *, struct kqid);
101:	qid_t from_kqid_munged(struct user_namespace *, struct kqid);
13:	bool qid_eq(struct kqid, struct kqid);
37:	bool qid_lt(struct kqid, struct kqid);
120:	bool qid_valid(struct kqid);

File fs/quota/netlink.c:
37:	void quota_send_warning(struct kqid, dev_t, const char);
96:	static int quota_init(void);

File fs/quota/quota.c:
900:	long __ia32_sys_quotactl(const struct pt_regs *);
900:	long __x64_sys_quotactl(const struct pt_regs *);
70:	unsigned int qtype_enforce_flag(int);
900:	static long __se_sys_quotactl(long, long, long, long);
404:	static int compat_copy_fs_qfilestat(struct compat_fs_qfilestat *, struct fs_qfilestat *);
413:	static int compat_copy_fs_quota_stat(struct compat_fs_quota_stat *, struct fs_quota_stat *);
258:	static void copy_from_if_dqblk(struct qc_dqblk *, struct if_dqblk *);
543:	static void copy_from_xfs_dqblk(struct qc_dqblk *, struct fs_disk_quota *);
596:	static void copy_qcinfo_from_xfs_dqblk(struct qc_info *, struct fs_disk_quota *);
184:	static void copy_to_if_dqblk(struct if_dqblk *, struct qc_dqblk *);
666:	static void copy_to_xfs_dqblk(struct fs_disk_quota *, struct qc_dqblk *, int, qid_t);
763:	static int do_quotactl(struct super_block *, int, int, qid_t, void *, const struct path *);
116:	static int quota_getinfo(struct super_block *, int, void *);
234:	static int quota_getnextquota(struct super_block *, int, qid_t, void *);
727:	static int quota_getnextxquota(struct super_block *, int, qid_t, void *);
198:	static int quota_getquota(struct super_block *, int, qid_t, void *);
351:	static int quota_getstate(struct super_block *, int, struct fs_quota_stat *);
449:	static int quota_getstatev(struct super_block *, int, struct fs_quota_statv *);
701:	static int quota_getxquota(struct super_block *, int, qid_t, void *);
493:	static int quota_getxstatev(struct super_block *, int, void *);
144:	static int quota_setinfo(struct super_block *, int, void *);
284:	static int quota_setquota(struct super_block *, int, qid_t, void *);
620:	static int quota_setxquota(struct super_block *, int, qid_t, void *);
332:	static int quota_state_to_flags(struct qc_state *, struct qc_state *);
51:	static void quota_sync_one(struct super_block *, void *);

File fs/quota/quota_tree.c:
530:	int qtree_delete_dquot(struct qtree_mem_dqinfo *, struct dquot *);
213:	int qtree_entry_unused(struct qtree_mem_dqinfo *, char *);
738:	int qtree_get_next_id(struct qtree_mem_dqinfo *, struct kqid *);
621:	int qtree_read_dquot(struct qtree_mem_dqinfo *, struct dquot *);
685:	int qtree_release_dquot(struct qtree_mem_dqinfo *, struct dquot *);
373:	int qtree_write_dquot(struct qtree_mem_dqinfo *, struct dquot *);
298:	static int do_insert_tree(struct qtree_mem_dqinfo *, struct dquot *, uint *, int);
541:	static loff_t find_block_dqentry(struct qtree_mem_dqinfo *, struct dquot *, uint);
225:	static uint find_free_dqentry(struct qtree_mem_dqinfo *, struct dquot *, int *);
694:	static int find_next_id(struct qtree_mem_dqinfo *, qid_t *, unsigned int, int);
579:	static loff_t find_tree_dqentry(struct qtree_mem_dqinfo *, struct dquot *, uint, int);
413:	static int free_dqentry(struct qtree_mem_dqinfo *, struct dquot *, uint);
84:	static int get_free_dqblk(struct qtree_mem_dqinfo *);
50:	static char *getdqbuf(size_t);
179:	static int insert_free_dqentry(struct qtree_mem_dqinfo *, char *, uint);
59:	static ssize_t read_blk(struct qtree_mem_dqinfo *, uint, char *);
132:	static int remove_free_dqentry(struct qtree_mem_dqinfo *, char *, uint);
475:	static int remove_tree(struct qtree_mem_dqinfo *, struct dquot *, uint *, int);
68:	static ssize_t write_blk(struct qtree_mem_dqinfo *, uint, char *);

File fs/quota/quota_v2.c:
430:	static void exit_v2_quota_format(void);
420:	static int init_v2_quota_format(void);
75:	static int v2_check_quota_file(struct super_block *, int);
380:	static int v2_free_file_info(struct super_block *, int);
386:	static int v2_get_next_id(struct super_block *, struct kqid *);
327:	static int v2_read_dquot(struct dquot *);
90:	static int v2_read_file_info(struct super_block *, int);
57:	static int v2_read_header(struct super_block *, int, struct v2_disk_dqheader *);
368:	static int v2_release_dquot(struct dquot *);
340:	static int v2_write_dquot(struct dquot *);
191:	static int v2_write_file_info(struct super_block *, int);
220:	static void v2r0_disk2memdqb(struct dquot *, void *);
260:	static int v2r0_is_id(void *, struct dquot *);
240:	static void v2r0_mem2diskdqb(void *, struct dquot *);
273:	static void v2r1_disk2memdqb(struct dquot *, void *);
314:	static int v2r1_is_id(void *, struct dquot *);
293:	static void v2r1_mem2diskdqb(void *, struct dquot *);

File fs/ramfs/file-mmu.c:
34:	static unsigned long ramfs_mmu_get_unmapped_area(struct file *, unsigned long, unsigned long, unsigned long, unsigned long);

File fs/ramfs/inode.c:
63:	struct inode *ramfs_get_inode(struct super_block *, const struct inode *, umode_t, dev_t);
256:	int ramfs_init_fs_context(struct fs_context *);
284:	static int init_ramfs_fs(void);
126:	static int ramfs_create(struct inode *, struct dentry *, umode_t, bool);
220:	static int ramfs_fill_super(struct super_block *, struct fs_context *);
245:	static void ramfs_free_fc(struct fs_context *);
240:	static int ramfs_get_tree(struct fs_context *);
270:	static void ramfs_kill_sb(struct super_block *);
118:	static int ramfs_mkdir(struct inode *, struct dentry *, umode_t);
104:	static int ramfs_mknod(struct inode *, struct dentry *, umode_t, dev_t);
189:	static int ramfs_parse_param(struct fs_context *, struct fs_parameter *);
165:	static int ramfs_show_options(struct seq_file *, struct dentry *);
131:	static int ramfs_symlink(struct inode *, struct dentry *, const char *);

File fs/read_write.c:
323:	long __ia32_compat_sys_lseek(const struct pt_regs *);
1108:	long __ia32_compat_sys_preadv(const struct pt_regs *);
1128:	long __ia32_compat_sys_preadv2(const struct pt_regs *);
1118:	long __ia32_compat_sys_preadv64v2(const struct pt_regs *);
1149:	long __ia32_compat_sys_pwritev(const struct pt_regs *);
1169:	long __ia32_compat_sys_pwritev2(const struct pt_regs *);
1159:	long __ia32_compat_sys_pwritev64v2(const struct pt_regs *);
1317:	long __ia32_compat_sys_sendfile(const struct pt_regs *);
1337:	long __ia32_compat_sys_sendfile64(const struct pt_regs *);
1531:	long __ia32_sys_copy_file_range(const struct pt_regs *);
331:	long __ia32_sys_llseek(const struct pt_regs *);
317:	long __ia32_sys_lseek(const struct pt_regs *);
688:	long __ia32_sys_pread64(const struct pt_regs *);
1053:	long __ia32_sys_preadv(const struct pt_regs *);
1061:	long __ia32_sys_preadv2(const struct pt_regs *);
714:	long __ia32_sys_pwrite64(const struct pt_regs *);
1073:	long __ia32_sys_pwritev(const struct pt_regs *);
1081:	long __ia32_sys_pwritev2(const struct pt_regs *);
637:	long __ia32_sys_read(const struct pt_regs *);
1041:	long __ia32_sys_readv(const struct pt_regs *);
1280:	long __ia32_sys_sendfile(const struct pt_regs *);
1299:	long __ia32_sys_sendfile64(const struct pt_regs *);
662:	long __ia32_sys_write(const struct pt_regs *);
1047:	long __ia32_sys_writev(const struct pt_regs *);
425:	ssize_t __kernel_read(struct file *, void *, size_t, loff_t *);
521:	ssize_t __kernel_write(struct file *, const void *, size_t, loff_t *);
1531:	long __x64_sys_copy_file_range(const struct pt_regs *);
331:	long __x64_sys_llseek(const struct pt_regs *);
317:	long __x64_sys_lseek(const struct pt_regs *);
688:	long __x64_sys_pread64(const struct pt_regs *);
1053:	long __x64_sys_preadv(const struct pt_regs *);
1061:	long __x64_sys_preadv2(const struct pt_regs *);
714:	long __x64_sys_pwrite64(const struct pt_regs *);
1073:	long __x64_sys_pwritev(const struct pt_regs *);
1081:	long __x64_sys_pwritev2(const struct pt_regs *);
637:	long __x64_sys_read(const struct pt_regs *);
1041:	long __x64_sys_readv(const struct pt_regs *);
1280:	long __x64_sys_sendfile(const struct pt_regs *);
1299:	long __x64_sys_sendfile64(const struct pt_regs *);
662:	long __x64_sys_write(const struct pt_regs *);
1047:	long __x64_sys_writev(const struct pt_regs *);
231:	loff_t default_llseek(struct file *, loff_t, int);
157:	loff_t fixed_size_llseek(struct file *, loff_t, int, loff_t);
1377:	ssize_t generic_copy_file_range(struct file *, loff_t, struct file *, loff_t, size_t, unsigned int);
139:	loff_t generic_file_llseek(struct file *, loff_t, int);
81:	loff_t generic_file_llseek_size(struct file *, loff_t, int, loff_t, loff_t);
1664:	int generic_file_rw_checks(struct file *, struct file *);
1598:	int generic_write_check_limits(struct file *, loff_t, loff_t *);
1630:	ssize_t generic_write_checks(struct kiocb *, struct iov_iter *);
460:	ssize_t kernel_read(struct file *, void *, size_t, loff_t *);
564:	ssize_t kernel_write(struct file *, const void *, size_t, loff_t *);
668:	ssize_t ksys_pread64(unsigned int, char *, size_t, loff_t);
694:	ssize_t ksys_pwrite64(unsigned int, const char *, size_t, loff_t);
618:	ssize_t ksys_read(unsigned int, char *, size_t);
642:	ssize_t ksys_write(unsigned int, const char *, size_t);
225:	loff_t no_llseek(struct file *, loff_t, int);
176:	loff_t no_seek_end_llseek(struct file *, loff_t, int);
196:	loff_t no_seek_end_llseek_size(struct file *, loff_t, int, loff_t);
219:	loff_t noop_llseek(struct file *, loff_t, int);
361:	int rw_verify_area(int, struct file *, const loff_t *, size_t);
1466:	ssize_t vfs_copy_file_range(struct file *, loff_t, struct file *, loff_t, size_t, unsigned int);
805:	ssize_t vfs_iocb_iter_read(struct file *, struct kiocb *, struct iov_iter *);
869:	ssize_t vfs_iocb_iter_write(struct file *, struct kiocb *, struct iov_iter *);
833:	ssize_t vfs_iter_read(struct file *, struct iov_iter *, loff_t *, rwf_t);
897:	ssize_t vfs_iter_write(struct file *, struct iov_iter *, loff_t *, rwf_t);
286:	loff_t vfs_llseek(struct file *, loff_t, int);
471:	ssize_t vfs_read(struct file *, char *, size_t, loff_t *);
49:	loff_t vfs_setpos(struct file *, loff_t, loff_t);
580:	ssize_t vfs_write(struct file *, const char *, size_t, loff_t *);
1531:	static long __se_sys_copy_file_range(long, long, long, long, long, long);
331:	static long __se_sys_llseek(long, long, long, long, long);
1299:	static long __se_sys_sendfile64(long, long, long, long);
777:	static ssize_t do_iter_read(struct file *, struct iov_iter *, loff_t *, rwf_t);
720:	static ssize_t do_iter_readv_writev(struct file *, struct iov_iter *, loff_t *, int, rwf_t);
842:	static ssize_t do_iter_write(struct file *, struct iov_iter *, loff_t *, rwf_t);
743:	static ssize_t do_loop_readv_writev(struct file *, struct iov_iter *, loff_t *, int, rwf_t);
995:	static ssize_t do_preadv(unsigned long, const struct iovec *, unsigned long, loff_t, rwf_t);
1018:	static ssize_t do_pwritev(unsigned long, const struct iovec *, unsigned long, loff_t, rwf_t);
941:	static ssize_t do_readv(unsigned long, const struct iovec *, unsigned long, rwf_t);
1181:	static ssize_t do_sendfile(int, int, loff_t *, size_t, loff_t);
965:	static ssize_t do_writev(unsigned long, const struct iovec *, unsigned long, rwf_t);
1415:	static int generic_copy_file_checks(struct file *, loff_t, struct file *, loff_t, size_t *, unsigned int);
299:	static off_t ksys_lseek(unsigned int, off_t, unsigned int);
399:	static ssize_t new_sync_read(struct file *, char *, size_t, loff_t *);
502:	static ssize_t new_sync_write(struct file *, const char *, size_t, loff_t *);
906:	static ssize_t vfs_readv(struct file *, const struct iovec *, unsigned long, loff_t *, rwf_t);
923:	static ssize_t vfs_writev(struct file *, const struct iovec *, unsigned long, loff_t *, rwf_t);
417:	static int warn_unsupported(struct file *, const char *);

File fs/readdir.c:
522:	long __ia32_compat_sys_getdents(const struct pt_regs *);
438:	long __ia32_compat_sys_old_readdir(const struct pt_regs *);
271:	long __ia32_sys_getdents(const struct pt_regs *);
354:	long __ia32_sys_getdents64(const struct pt_regs *);
180:	long __ia32_sys_old_readdir(const struct pt_regs *);
271:	long __x64_sys_getdents(const struct pt_regs *);
354:	long __x64_sys_getdents64(const struct pt_regs *);
180:	long __x64_sys_old_readdir(const struct pt_regs *);
40:	int iterate_dir(struct file *, struct dir_context *);
522:	static long __se_compat_sys_getdents(long, long, long);
271:	static long __se_sys_getdents(long, long, long);
354:	static long __se_sys_getdents64(long, long, long);
180:	static long __se_sys_old_readdir(long, long, long);
474:	static int compat_filldir(struct dir_context *, const char *, int, loff_t, u64, unsigned int);
400:	static int compat_fillonedir(struct dir_context *, const char *, int, loff_t, u64, unsigned int);
222:	static int filldir(struct dir_context *, const char *, int, loff_t, u64, unsigned int);
310:	static int filldir64(struct dir_context *, const char *, int, loff_t, u64, unsigned int);
143:	static int fillonedir(struct dir_context *, const char *, int, loff_t, u64, unsigned int);
110:	static int verify_dirent_name(const char *, int);

File fs/remap_range.c:
375:	loff_t do_clone_file_range(struct file *, loff_t, struct file *, loff_t, loff_t, unsigned int);
292:	int generic_remap_file_range_prep(struct file *, loff_t, struct file *, loff_t, loff_t *, unsigned int);
417:	loff_t vfs_clone_file_range(struct file *, loff_t, struct file *, loff_t, loff_t, unsigned int);
493:	int vfs_dedupe_file_range(struct file *, struct file_dedupe_range *);
446:	loff_t vfs_dedupe_file_range_one(struct file *, loff_t, struct file *, loff_t, loff_t, unsigned int);
29:	static int generic_remap_checks(loff_t, struct file *, loff_t, loff_t *, unsigned int, struct file *, struct file *);
202:	static int vfs_dedupe_file_range_compare(struct inode *, loff_t, struct inode *, loff_t, loff_t, bool *);
161:	static struct page *vfs_dedupe_get_page(loff_t, struct inode *, struct inode *);
179:	static void vfs_lock_two_pages(struct page *, struct page *);

File fs/select.c:
1299:	long __ia32_compat_sys_old_select(const struct pt_regs *);
1395:	long __ia32_compat_sys_ppoll_time32(const struct pt_regs *);
1421:	long __ia32_compat_sys_ppoll_time64(const struct pt_regs *);
1379:	long __ia32_compat_sys_pselect6_time32(const struct pt_regs *);
1364:	long __ia32_compat_sys_pselect6_time64(const struct pt_regs *);
1284:	long __ia32_compat_sys_select(const struct pt_regs *);
1064:	long __ia32_sys_poll(const struct pt_regs *);
1097:	long __ia32_sys_ppoll(const struct pt_regs *);
791:	long __ia32_sys_pselect6(const struct pt_regs *);
722:	long __ia32_sys_select(const struct pt_regs *);
1064:	long __x64_sys_poll(const struct pt_regs *);
1097:	long __x64_sys_ppoll(const struct pt_regs *);
791:	long __x64_sys_pselect6(const struct pt_regs *);
722:	long __x64_sys_select(const struct pt_regs *);
621:	int core_sys_select(int, fd_set *, fd_set *, fd_set *, struct timespec64 *);
138:	void poll_freewait(struct poll_wqueues *);
121:	void poll_initwait(struct poll_wqueues *);
273:	int poll_select_set_timeout(struct timespec64 *, time64_t, long);
75:	u64 select_estimate_accuracy(struct timespec64 *);
221:	static void __pollwait(struct file *, wait_queue_head_t *, poll_table *);
1379:	static long __se_compat_sys_pselect6_time32(long, long, long, long, long, long);
1364:	static long __se_compat_sys_pselect6_time64(long, long, long, long, long, long);
1064:	static long __se_sys_poll(long, long, long);
1097:	static long __se_sys_ppoll(long, long, long, long, long);
791:	static long __se_sys_pselect6(long, long, long, long, long, long);
1190:	static int compat_core_sys_select(int, compat_ulong_t *, compat_ulong_t *, compat_ulong_t *, struct timespec64 *);
1156:	static int compat_get_fd_set(unsigned long, compat_ulong_t *, unsigned long *);
1309:	static long do_compat_pselect(int, compat_ulong_t *, compat_ulong_t *, compat_ulong_t *, void *, compat_sigset_t *, compat_size_t, enum poll_time_type);
1261:	static int do_compat_select(int, compat_ulong_t *, compat_ulong_t *, compat_ulong_t *, struct old_timeval32 *);
881:	static int do_poll(struct poll_list *, struct poll_wqueues *, struct timespec64 *);
1043:	static long do_restart_poll(struct restart_block *);
476:	static int do_select(int, fd_set_bits *, struct timespec64 *);
970:	static int do_sys_poll(struct pollfd *, unsigned int, struct timespec64 *);
700:	static int kern_select(int, fd_set *, fd_set *, fd_set *, struct __kernel_old_timeval *);
297:	static int poll_select_finish(struct timespec64 *, void *, enum poll_time_type, int);
210:	static int pollwake(wait_queue_entry_t *, unsigned int, int, void *);

File fs/seq_file.c:
619:	void *__seq_open_private(struct file *, const struct seq_operations *, int);
429:	char *mangle_path(char *, const char *, const char *);
526:	int seq_dentry(struct seq_file *, struct dentry *, const char *);
371:	void seq_escape(struct seq_file *, const char *, const char *);
382:	void seq_escape_mem_ascii(struct seq_file *, const char *, size_t);
1103:	void seq_file_init(void);
487:	int seq_file_path(struct seq_file *, struct file *, const char *);
852:	void seq_hex_dump(struct seq_file *, const char *, int, int, int, const void *, size_t, bool);
965:	struct hlist_node *seq_hlist_next(void *, struct hlist_head *, loff_t *);
1082:	struct hlist_node *seq_hlist_next_percpu(void *, struct hlist_head *, int *, loff_t *);
929:	struct hlist_node *seq_hlist_start(struct hlist_head *, loff_t);
948:	struct hlist_node *seq_hlist_start_head(struct hlist_head *, loff_t);
1013:	struct hlist_node *seq_hlist_start_head_rcu(struct hlist_head *, loff_t);
1058:	struct hlist_node *seq_hlist_start_percpu(struct hlist_head *, int *, loff_t);
989:	struct hlist_node *seq_hlist_start_rcu(struct hlist_head *, loff_t);
912:	struct list_head *seq_list_next(void *, struct list_head *, loff_t *);
891:	struct list_head *seq_list_start(struct list_head *, loff_t);
903:	struct list_head *seq_list_start_head(struct list_head *, loff_t);
308:	loff_t seq_lseek(struct file *, loff_t, int);
57:	int seq_open(struct file *, const struct seq_operations *);
645:	int seq_open_private(struct file *, const struct seq_operations *, int);
835:	void seq_pad(struct seq_file *, char);
459:	int seq_path(struct seq_file *, const struct path *, const char *);
496:	int seq_path_root(struct seq_file *, const struct path *, const struct path *, const char *);
408:	void seq_printf(struct seq_file *, const char *, ...);
771:	void seq_put_decimal_ll(struct seq_file *, const char *, long long);
718:	void seq_put_decimal_ull(struct seq_file *, const char *, unsigned long long);
686:	void seq_put_decimal_ull_width(struct seq_file *, const char *, unsigned long long, unsigned int);
737:	void seq_put_hex_ll(struct seq_file *, const char *, unsigned long long, unsigned int);
652:	void seq_putc(struct seq_file *, char);
661:	void seq_puts(struct seq_file *, const char *);
151:	ssize_t seq_read(struct file *, char *, size_t, loff_t *);
171:	ssize_t seq_read_iter(struct kiocb *, struct iov_iter *);
352:	int seq_release(struct inode *, struct file *);
609:	int seq_release_private(struct inode *, struct file *);
393:	void seq_vprintf(struct seq_file *, const char *, struct __va_list_tag *);
818:	int seq_write(struct seq_file *, const void *, size_t);
561:	int single_open(struct file *, int (*)(struct seq_file *, void *), void *);
582:	int single_open_size(struct file *, int (*)(struct seq_file *, void *), void *, size_t);
600:	int single_release(struct inode *, struct file *);
551:	static void *single_next(struct seq_file *, void *, loff_t *);
546:	static void *single_start(struct seq_file *, loff_t *);
557:	static void single_stop(struct seq_file *, void *);
90:	static int traverse(struct seq_file *, loff_t);

File fs/signalfd.c:
348:	long __ia32_compat_sys_signalfd(const struct pt_regs *);
340:	long __ia32_compat_sys_signalfd4(const struct pt_regs *);
314:	long __ia32_sys_signalfd(const struct pt_regs *);
302:	long __ia32_sys_signalfd4(const struct pt_regs *);
314:	long __x64_sys_signalfd(const struct pt_regs *);
302:	long __x64_sys_signalfd4(const struct pt_regs *);
36:	void signalfd_cleanup(struct sighand_struct *);
253:	static int do_signalfd4(int, sigset_t *, int);
71:	static int signalfd_copyinfo(struct signalfd_siginfo *, const kernel_siginfo_t *);
156:	static ssize_t signalfd_dequeue(struct signalfd_ctx *, kernel_siginfo_t *, int);
51:	static __poll_t signalfd_poll(struct file *, poll_table *);
202:	static ssize_t signalfd_read(struct file *, char *, size_t, loff_t *);
45:	static int signalfd_release(struct inode *, struct file *);
232:	static void signalfd_show_fdinfo(struct seq_file *, struct file *);

File fs/splice.c:
1325:	long __ia32_sys_splice(const struct pt_regs *);
1691:	long __ia32_sys_tee(const struct pt_regs *);
1289:	long __ia32_sys_vmsplice(const struct pt_regs *);
552:	ssize_t __splice_from_pipe(struct pipe_inode_info *, struct splice_desc *, splice_actor *);
1325:	long __x64_sys_splice(const struct pt_regs *);
1691:	long __x64_sys_tee(const struct pt_regs *);
1289:	long __x64_sys_vmsplice(const struct pt_regs *);
230:	ssize_t add_to_pipe(struct pipe_inode_info *, struct pipe_buffer *);
1008:	long do_splice(struct file *, loff_t *, struct file *, loff_t *, size_t, unsigned int);
953:	long do_splice_direct(struct file *, loff_t *, struct file *, loff_t *, size_t, unsigned int);
1658:	long do_tee(struct file *, struct file *, size_t, unsigned int);
298:	ssize_t generic_file_splice_read(struct file *, loff_t *, struct pipe_inode_info *, size_t, unsigned int);
740:	ssize_t generic_splice_sendpage(struct pipe_inode_info *, struct file *, loff_t *, size_t, unsigned int);
618:	ssize_t iter_file_splice_write(struct pipe_inode_info *, struct file *, loff_t *, size_t, unsigned int);
804:	ssize_t splice_direct_to_actor(struct file *, struct splice_desc *, splice_direct_actor *);
584:	ssize_t splice_from_pipe(struct pipe_inode_info *, struct file *, loff_t *, size_t, unsigned int, splice_actor *);
256:	int splice_grow_spd(const struct pipe_inode_info *, struct splice_pipe_desc *);
276:	void splice_shrink_spd(struct splice_pipe_desc *);
182:	ssize_t splice_to_pipe(struct pipe_inode_info *, struct splice_pipe_desc *);
1109:	static long __do_splice(struct file *, loff_t *, struct file *, loff_t *, size_t, unsigned int);
1325:	static long __se_sys_splice(long, long, long, long, long, long);
1691:	static long __se_sys_tee(long, long, long, long);
1289:	static long __se_sys_vmsplice(long, long, long, long);
928:	static int direct_splice_actor(struct pipe_inode_info *, struct splice_desc *);
770:	static long do_splice_to(struct file *, loff_t *, struct pipe_inode_info *, size_t, unsigned int);
1356:	static int ipipe_prep(struct pipe_inode_info *, unsigned int);
1149:	static int iter_to_pipe(struct iov_iter *, struct pipe_inode_info *, unsigned int);
1567:	static int link_pipe(struct pipe_inode_info *, struct pipe_inode_info *, size_t, unsigned int);
1392:	static int opipe_prep(struct pipe_inode_info *, unsigned int);
102:	static int page_cache_pipe_buf_confirm(struct pipe_inode_info *, struct pipe_buffer *);
91:	static void page_cache_pipe_buf_release(struct pipe_inode_info *, struct pipe_buffer *);
46:	static bool page_cache_pipe_buf_try_steal(struct pipe_inode_info *, struct pipe_buffer *);
348:	static int pipe_to_sendpage(struct pipe_inode_info *, struct pipe_buffer *, struct splice_desc *);
1195:	static int pipe_to_user(struct pipe_inode_info *, struct pipe_buffer *, struct splice_desc *);
396:	static int splice_from_pipe_feed(struct pipe_inode_info *, struct splice_desc *, splice_actor *);
471:	static int splice_from_pipe_next(struct pipe_inode_info *, struct splice_desc *);
1430:	static int splice_pipe_to_pipe(struct pipe_inode_info *, struct pipe_inode_info *, size_t, unsigned int);
147:	static bool user_page_pipe_buf_try_steal(struct pipe_inode_info *, struct pipe_buffer *);
984:	static int wait_for_space(struct pipe_inode_info *, unsigned int);
748:	static int warn_unsupported(struct file *, const char *);

File fs/stack.c:
63:	void fsstack_copy_attr_all(struct inode *, const struct inode *);
11:	void fsstack_copy_inode_size(struct inode *, struct inode *);

File fs/stat.c:
687:	long __ia32_compat_sys_newfstat(const struct pt_regs *);
673:	long __ia32_compat_sys_newfstatat(const struct pt_regs *);
660:	long __ia32_compat_sys_newlstat(const struct pt_regs *);
648:	long __ia32_compat_sys_newstat(const struct pt_regs *);
288:	long __ia32_sys_fstat(const struct pt_regs *);
275:	long __ia32_sys_lstat(const struct pt_regs *);
391:	long __ia32_sys_newfstat(const struct pt_regs *);
378:	long __ia32_sys_newfstatat(const struct pt_regs *);
364:	long __ia32_sys_newlstat(const struct pt_regs *);
353:	long __ia32_sys_newstat(const struct pt_regs *);
445:	long __ia32_sys_readlink(const struct pt_regs *);
439:	long __ia32_sys_readlinkat(const struct pt_regs *);
262:	long __ia32_sys_stat(const struct pt_regs *);
606:	long __ia32_sys_statx(const struct pt_regs *);
700:	void __inode_add_bytes(struct inode *, loff_t);
721:	void __inode_sub_bytes(struct inode *, loff_t);
288:	long __x64_sys_fstat(const struct pt_regs *);
275:	long __x64_sys_lstat(const struct pt_regs *);
391:	long __x64_sys_newfstat(const struct pt_regs *);
378:	long __x64_sys_newfstatat(const struct pt_regs *);
364:	long __x64_sys_newlstat(const struct pt_regs *);
353:	long __x64_sys_newstat(const struct pt_regs *);
445:	long __x64_sys_readlink(const struct pt_regs *);
439:	long __x64_sys_readlinkat(const struct pt_regs *);
262:	long __x64_sys_stat(const struct pt_regs *);
606:	long __x64_sys_statx(const struct pt_regs *);
577:	int do_statx(int, const char *, unsigned int, unsigned int, struct statx *);
36:	void generic_fillattr(struct inode *, struct kstat *);
712:	void inode_add_bytes(struct inode *, loff_t);
743:	loff_t inode_get_bytes(struct inode *);
755:	void inode_set_bytes(struct inode *, loff_t);
734:	void inode_sub_bytes(struct inode *, loff_t);
146:	int vfs_fstat(int, struct kstat *);
212:	int vfs_fstatat(int, const char *, struct kstat *, int);
124:	int vfs_getattr(const struct path *, struct kstat *, u32, unsigned int);
67:	int vfs_getattr_nosec(const struct path *, struct kstat *, u32, unsigned int);
687:	static long __se_compat_sys_newfstat(long, long);
673:	static long __se_compat_sys_newfstatat(long, long, long, long);
660:	static long __se_compat_sys_newlstat(long, long);
648:	static long __se_compat_sys_newstat(long, long);
288:	static long __se_sys_fstat(long, long);
275:	static long __se_sys_lstat(long, long);
391:	static long __se_sys_newfstat(long, long);
378:	static long __se_sys_newfstatat(long, long, long, long);
364:	static long __se_sys_newlstat(long, long);
353:	static long __se_sys_newstat(long, long);
262:	static long __se_sys_stat(long, long);
615:	static int cp_compat_stat(struct kstat *, struct compat_stat *);
316:	static int cp_new_stat(struct kstat *, struct stat *);
225:	static int cp_old_stat(struct kstat *, struct __old_kernel_stat *);
543:	static int cp_statx(const struct kstat *, struct statx *);
403:	static int do_readlinkat(int, const char *, char *, int);
174:	static int vfs_statx(int, const char *, int, struct kstat *, u32);

File fs/statfs.c:
311:	long __ia32_compat_sys_fstatfs(const struct pt_regs *);
378:	long __ia32_compat_sys_fstatfs64(const struct pt_regs *);
302:	long __ia32_compat_sys_statfs(const struct pt_regs *);
359:	long __ia32_compat_sys_statfs64(const struct pt_regs *);
388:	long __ia32_compat_sys_ustat(const struct pt_regs *);
213:	long __ia32_sys_fstatfs(const struct pt_regs *);
222:	long __ia32_sys_fstatfs64(const struct pt_regs *);
192:	long __ia32_sys_statfs(const struct pt_regs *);
201:	long __ia32_sys_statfs64(const struct pt_regs *);
248:	long __ia32_sys_ustat(const struct pt_regs *);
213:	long __x64_sys_fstatfs(const struct pt_regs *);
222:	long __x64_sys_fstatfs64(const struct pt_regs *);
192:	long __x64_sys_statfs(const struct pt_regs *);
201:	long __x64_sys_statfs64(const struct pt_regs *);
248:	long __x64_sys_ustat(const struct pt_regs *);
115:	int fd_statfs(int, struct kstatfs *);
364:	int kcompat_sys_fstatfs64(unsigned int, compat_size_t, struct compat_statfs64 *);
345:	int kcompat_sys_statfs64(const char *, compat_size_t, struct compat_statfs64 *);
97:	int user_statfs(const char *, struct kstatfs *);
72:	int vfs_get_fsid(struct dentry *, __kernel_fsid_t *);
86:	int vfs_statfs(struct kstatfs *, const struct path *, const struct path *);
311:	static long __se_compat_sys_fstatfs(long, long);
302:	static long __se_compat_sys_statfs(long, long);
388:	static long __se_compat_sys_ustat(long, long);
213:	static long __se_sys_fstatfs(long, long);
222:	static long __se_sys_fstatfs64(long, long, long);
192:	static long __se_sys_statfs(long, long);
201:	static long __se_sys_statfs64(long, long, long);
248:	static long __se_sys_ustat(long, long);
168:	static int do_statfs64(struct kstatfs *, struct statfs64 *);
126:	static int do_statfs_native(struct kstatfs *, struct statfs *);
264:	static int put_compat_statfs(struct compat_statfs *, struct kstatfs *);
320:	static int put_compat_statfs64(struct compat_statfs64 *, struct kstatfs *);
55:	static int statfs_by_dentry(struct dentry *, struct kstatfs *);

File fs/super.c:
329:	void deactivate_locked_super(struct super_block *);
362:	void deactivate_super(struct super_block *);
636:	void drop_super(struct super_block *);
644:	void drop_super_exclusive(struct super_block *);
1015:	void emergency_remount(void);
1049:	void emergency_thaw_all(void);
1093:	void free_anon_bdev(dev_t);
1711:	int freeze_super(struct super_block *);
442:	void generic_shutdown_super(struct super_block *);
847:	struct super_block *get_active_super(struct block_device *);
1073:	int get_anon_bdev(dev_t *);
786:	struct super_block *get_super(struct block_device *);
833:	struct super_block *get_super_exclusive_thawed(struct block_device *);
818:	struct super_block *get_super_thawed(struct block_device *);
1279:	int get_tree_bdev(struct fs_context *, int (*)(struct super_block *, struct fs_context *));
1241:	int get_tree_keyed(struct fs_context *, int (*)(struct super_block *, struct fs_context *), void *);
1217:	int get_tree_nodev(struct fs_context *, int (*)(struct super_block *, struct fs_context *));
1225:	int get_tree_single(struct fs_context *, int (*)(struct super_block *, struct fs_context *));
1233:	int get_tree_single_reconf(struct fs_context *, int (*)(struct super_block *, struct fs_context *));
681:	void iterate_supers(void (*)(struct super_block *, void *), void *);
716:	void iterate_supers_type(struct file_system_type *, void (*)(struct super_block *, void *), void *);
1105:	void kill_anon_super(struct super_block *);
1440:	void kill_block_super(struct super_block *);
1113:	void kill_litter_super(struct super_block *);
1365:	struct dentry *mount_bdev(struct file_system_type *, int, const char *, void *, int (*)(struct super_block *, void *, int));
485:	bool mount_capable(struct fs_context *);
1455:	struct dentry *mount_nodev(struct file_system_type *, int, void *, int (*)(struct super_block *, void *, int));
1505:	struct dentry *mount_single(struct file_system_type *, int, void *, int (*)(struct super_block *, void *, int));
903:	int reconfigure_super(struct fs_context *);
1099:	int set_anon_super(struct super_block *, void *);
576:	struct super_block *sget(struct file_system_type *, int (*)(struct super_block *, void *), int (*)(struct super_block *, void *), int, void *);
511:	struct super_block *sget_fc(struct fs_context *, int (*)(struct super_block *, struct fs_context *), int (*)(struct super_block *, struct fs_context *));
1625:	int super_setup_bdi(struct super_block *);
1597:	int super_setup_bdi_name(struct super_block *, char *, ...);
1822:	int thaw_super(struct super_block *);
416:	bool trylock_super(struct super_block *);
870:	struct super_block *user_get_super(dev_t);
1162:	int vfs_get_super(struct fs_context *, enum vfs_get_super_keying, int (*)(struct super_block *, struct fs_context *));
1538:	int vfs_get_tree(struct fs_context *);
743:	static struct super_block *__get_super(struct block_device *, bool);
792:	static struct super_block *__get_super_thawed(struct block_device *, bool);
651:	static void __iterate_supers(void (*)(struct super_block *));
288:	static void __put_super(struct super_block *);
200:	static struct super_block *alloc_super(struct file_system_type *, int, struct user_namespace *);
168:	static void destroy_super_rcu(struct callback_head *);
157:	static void destroy_super_work(struct work_struct *);
176:	static void destroy_unused_super(struct super_block *);
1008:	static void do_emergency_remount(struct work_struct *);
990:	static void do_emergency_remount_callback(struct super_block *);
1037:	static void do_thaw_all(struct work_struct *);
1026:	static void do_thaw_all_callback(struct super_block *);
385:	static int grab_super(struct super_block *);
310:	static void put_super(struct super_block *);
1670:	static void sb_freeze_unlock(struct super_block *);
1253:	static int set_bdev_super(struct super_block *, void *);
1264:	static int set_bdev_super_fc(struct super_block *, struct fs_context *);
118:	static unsigned long super_cache_count(struct shrinker *, struct shrink_control *);
61:	static unsigned long super_cache_scan(struct shrinker *, struct shrink_control *);
1360:	static int test_bdev_super(struct super_block *, void *);
1269:	static int test_bdev_super_fc(struct super_block *, struct fs_context *);
1127:	static int test_keyed_super(struct super_block *, struct fs_context *);
1132:	static int test_single_super(struct super_block *, struct fs_context *);
1782:	static int thaw_super_locked(struct super_block *);

File fs/sync.c:
235:	long __ia32_sys_fdatasync(const struct pt_regs *);
230:	long __ia32_sys_fsync(const struct pt_regs *);
382:	long __ia32_sys_sync_file_range(const struct pt_regs *);
390:	long __ia32_sys_sync_file_range2(const struct pt_regs *);
161:	long __ia32_sys_syncfs(const struct pt_regs *);
235:	long __x64_sys_fdatasync(const struct pt_regs *);
230:	long __x64_sys_fsync(const struct pt_regs *);
382:	long __x64_sys_sync_file_range(const struct pt_regs *);
390:	long __x64_sys_sync_file_range2(const struct pt_regs *);
161:	long __x64_sys_syncfs(const struct pt_regs *);
147:	void emergency_sync(void);
109:	void ksys_sync(void);
367:	int ksys_sync_file_range(int, loff_t, loff_t, unsigned int);
240:	int sync_file_range(struct file *, loff_t, loff_t, unsigned int);
48:	int sync_filesystem(struct super_block *);
212:	int vfs_fsync(struct file *, int);
192:	int vfs_fsync_range(struct file *, loff_t, loff_t, int);
123:	static long __do_sys_sync(const struct pt_regs *);
161:	static long __se_sys_syncfs(long);
129:	static void do_sync_work(struct work_struct *);
89:	static void fdatawait_one_bdev(struct block_device *, void *);
84:	static void fdatawrite_one_bdev(struct block_device *, void *);
77:	static void sync_fs_one_sb(struct super_block *, void *);
71:	static void sync_inodes_one_sb(struct super_block *, void *);

File fs/sysfs/dir.c:
40:	int sysfs_create_dir_ns(struct kobject *, const void *);
135:	int sysfs_create_mount_point(struct kobject *, const char *);
118:	int sysfs_move_dir_ns(struct kobject *, struct kobject *, const void *);
80:	void sysfs_remove_dir(struct kobject *);
156:	void sysfs_remove_mount_point(struct kobject *, const char *);
106:	int sysfs_rename_dir_ns(struct kobject *, const char *, const void *);
21:	void sysfs_warn_dup(struct kernfs_node *, const char *);

File fs/sysfs/file.c:
246:	int sysfs_add_file_mode_ns(struct kernfs_node *, const struct attribute *, bool, umode_t, kuid_t, kgid_t, const void *);
358:	int sysfs_add_file_to_group(struct kobject *, const struct attribute *, const char *);
423:	struct kernfs_node *sysfs_break_active_protection(struct kobject *, const struct attribute *);
670:	int sysfs_change_owner(struct kobject *, kuid_t, kgid_t);
392:	int sysfs_chmod_file(struct kobject *, const struct attribute *, umode_t);
537:	int sysfs_create_bin_file(struct kobject *, const struct bin_attribute *);
322:	int sysfs_create_file_ns(struct kobject *, const struct attribute *, const void *);
338:	int sysfs_create_files(struct kobject *, const struct attribute * const *);
721:	int sysfs_emit(char *, const char *, ...);
749:	int sysfs_emit_at(char *, int, const char *, ...);
628:	int sysfs_file_change_owner(struct kobject *, const char *, kuid_t, kgid_t);
589:	int sysfs_link_change_owner(struct kobject *, struct kobject *, const char *, kuid_t, kgid_t);
173:	void sysfs_notify(struct kobject *, const char *, const char *);
557:	void sysfs_remove_bin_file(struct kobject *, const struct bin_attribute *);
513:	void sysfs_remove_file_from_group(struct kobject *, const struct attribute *, const char *);
465:	void sysfs_remove_file_ns(struct kobject *, const struct attribute *, const void *);
481:	bool sysfs_remove_file_self(struct kobject *, const struct attribute *);
498:	void sysfs_remove_files(struct kobject *, const struct attribute * const *);
447:	void sysfs_unbreak_active_protection(struct kernfs_node *);
164:	static int sysfs_kf_bin_mmap(struct kernfs_open_file *, struct vm_area_struct *);
80:	static ssize_t sysfs_kf_bin_read(struct kernfs_open_file *, char *, size_t, loff_t);
143:	static ssize_t sysfs_kf_bin_write(struct kernfs_open_file *, char *, size_t, loff_t);
104:	static ssize_t sysfs_kf_read(struct kernfs_open_file *, char *, size_t, loff_t);
40:	static int sysfs_kf_seq_show(struct seq_file *, void *);
130:	static ssize_t sysfs_kf_write(struct kernfs_open_file *, char *, size_t, loff_t);

File fs/sysfs/group.c:
427:	int compat_only_sysfs_link_entry_to_kobj(struct kobject *, struct kobject *, const char *, const char *);
382:	int sysfs_add_link_to_group(struct kobject *, const char *, struct kobject *, const char *);
172:	int sysfs_create_group(struct kobject *, const struct attribute_group *);
212:	int sysfs_create_groups(struct kobject *, const struct attribute_group **);
517:	int sysfs_group_change_owner(struct kobject *, const struct attribute_group *, kuid_t, kgid_t);
560:	int sysfs_groups_change_owner(struct kobject *, const struct attribute_group **, kuid_t, kgid_t);
326:	int sysfs_merge_group(struct kobject *, const struct attribute_group *);
270:	void sysfs_remove_group(struct kobject *, const struct attribute_group *);
305:	void sysfs_remove_groups(struct kobject *, const struct attribute_group **);
405:	void sysfs_remove_link_from_group(struct kobject *, const char *, const char *);
360:	void sysfs_unmerge_group(struct kobject *, const struct attribute_group *);
255:	int sysfs_update_group(struct kobject *, const struct attribute_group *);
230:	int sysfs_update_groups(struct kobject *, const struct attribute_group **);
34:	static int create_files(struct kernfs_node *, struct kobject *, kuid_t, kgid_t, const struct attribute_group *, int);
108:	static int internal_create_group(struct kobject *, int, const struct attribute_group *);
179:	static int internal_create_groups(struct kobject *, int, const struct attribute_group **);
20:	static void remove_files(struct kernfs_node *, const struct attribute_group *);

File fs/sysfs/mount.c:
97:	int sysfs_init(void);
40:	static void sysfs_fs_context_free(struct fs_context *);
26:	static int sysfs_get_tree(struct fs_context *);
55:	static int sysfs_init_fs_context(struct fs_context *);
82:	static void sysfs_kill_sb(struct super_block *);

File fs/sysfs/symlink.c:
89:	int sysfs_create_link(struct kobject *, struct kobject *, const char *);
105:	int sysfs_create_link_nowarn(struct kobject *, struct kobject *, const char *);
61:	int sysfs_create_link_sd(struct kernfs_node *, struct kobject *, const char *);
121:	void sysfs_delete_link(struct kobject *, struct kobject *, const char *);
143:	void sysfs_remove_link(struct kobject *, const char *);
166:	int sysfs_rename_link_ns(struct kobject *, struct kobject *, const char *, const char *, const void *);
20:	static int sysfs_do_create_link_sd(struct kernfs_node *, struct kobject *, const char *, int);

File fs/timerfd.c:
390:	long __ia32_sys_timerfd_create(const struct pt_regs *);
560:	long __ia32_sys_timerfd_gettime(const struct pt_regs *);
587:	long __ia32_sys_timerfd_gettime32(const struct pt_regs *);
542:	long __ia32_sys_timerfd_settime(const struct pt_regs *);
570:	long __ia32_sys_timerfd_settime32(const struct pt_regs *);
390:	long __x64_sys_timerfd_create(const struct pt_regs *);
560:	long __x64_sys_timerfd_gettime(const struct pt_regs *);
587:	long __x64_sys_timerfd_gettime32(const struct pt_regs *);
542:	long __x64_sys_timerfd_settime(const struct pt_regs *);
570:	long __x64_sys_timerfd_settime32(const struct pt_regs *);
97:	void timerfd_clock_was_set(void);
390:	static long __se_sys_timerfd_create(long, long);
542:	static long __se_sys_timerfd_settime(long, long, long, long);
570:	static long __se_sys_timerfd_settime32(long, long, long, long);
118:	static void __timerfd_remove_cancel(struct timerfd_ctx *);
510:	static int do_timerfd_gettime(int, struct itimerspec64 *);
438:	static int do_timerfd_settime(int, int, const struct itimerspec64 *, struct itimerspec64 *);
82:	static enum alarmtimer_restart timerfd_alarmproc(struct alarm *, ktime_t);
334:	static long timerfd_ioctl(struct file *, unsigned int, unsigned long);
233:	static __poll_t timerfd_poll(struct file *, poll_table *);
249:	static ssize_t timerfd_read(struct file *, char *, size_t, loff_t *);
219:	static int timerfd_release(struct inode *, struct file *);
305:	static void timerfd_show(struct seq_file *, struct file *);
74:	static enum hrtimer_restart timerfd_tmrproc(struct hrtimer *);

File fs/tracefs/inode.c:
539:	struct dentry *tracefs_create_dir(const char *, struct dentry *);
462:	struct dentry *tracefs_create_file(const char *, umode_t, struct dentry *, void *, const struct file_operations *);
561:	struct dentry *tracefs_create_instance_dir(const char *, struct dentry *, int (*)(const char *), int (*)(const char *));
608:	bool tracefs_initialized(void);
595:	void tracefs_remove(struct dentry *);
494:	static struct dentry *__create_dir(const char *, struct dentry *, const struct inode_operations *);
31:	static ssize_t default_read_file(struct file *, char *, size_t, loff_t *);
37:	static ssize_t default_write_file(struct file *, const char *, size_t, loff_t *);
55:	static char *get_dname(struct dentry *, struct dentry *);
582:	static void remove_one(struct dentry *);
176:	static void set_gid(struct dentry *, kgid_t);
384:	static struct dentry *start_creating(const char *, struct dentry *);
336:	static int trace_fill_super(struct super_block *, void *, int);
369:	static struct dentry *trace_mount(struct file_system_type *, int, const char *, void *);
128:	static struct inode *tracefs_get_inode(struct super_block *);
613:	static int tracefs_init(void);
233:	static int tracefs_parse_options(char *, struct tracefs_mount_opts *);
297:	static int tracefs_remount(struct super_block *, int *, char *);
313:	static int tracefs_show_options(struct seq_file *, struct dentry *);
70:	static int tracefs_syscall_mkdir(struct inode *, struct dentry *, umode_t);
93:	static int tracefs_syscall_rmdir(struct inode *, struct dentry *);

File fs/userfaultfd.c:
1993:	long __ia32_sys_userfaultfd(const struct pt_regs *);
1993:	long __x64_sys_userfaultfd(const struct pt_regs *);
639:	int dup_userfaultfd(struct vm_area_struct *, struct list_head *);
700:	void dup_userfaultfd_complete(struct list_head *);
376:	vm_fault_t handle_userfault(struct vm_fault *, unsigned long);
732:	void mremap_userfaultfd_complete(struct vm_userfaultfd_ctx *, unsigned long, unsigned long, unsigned long);
711:	void mremap_userfaultfd_prep(struct vm_area_struct *, struct vm_userfaultfd_ctx *);
757:	bool userfaultfd_remove(struct vm_area_struct *, unsigned long, unsigned long);
823:	void userfaultfd_unmap_complete(struct mm_struct *, struct list_head *);
796:	int userfaultfd_unmap_prep(struct vm_area_struct *, unsigned long, unsigned long, struct list_head *);
1993:	static long __se_sys_userfaultfd(long);
1193:	static void __wake_userfault(struct userfaultfd_ctx *, struct userfaultfd_wake_range *);
2033:	static int enable_userswap_setup(char *);
1982:	static void init_once_userfaultfd_ctx(void *);
1865:	static int userfaultfd_api(struct userfaultfd_ctx *, unsigned long);
1689:	static int userfaultfd_copy(struct userfaultfd_ctx *, unsigned long);
155:	static void userfaultfd_ctx_get(struct userfaultfd_ctx *);
168:	static void userfaultfd_ctx_put(struct userfaultfd_ctx *);
998:	static ssize_t userfaultfd_ctx_read(struct userfaultfd_ctx *, int, struct uffd_msg *);
554:	static void userfaultfd_event_wait_completion(struct userfaultfd_ctx *, struct userfaultfd_wait_queue *);
2041:	static int userfaultfd_init(void);
1907:	static long userfaultfd_ioctl(struct file *, unsigned int, unsigned long);
944:	static __poll_t userfaultfd_poll(struct file *, poll_table *);
1163:	static ssize_t userfaultfd_read(struct file *, char *, size_t, loff_t *);
1266:	static int userfaultfd_register(struct userfaultfd_ctx *, unsigned long);
842:	static int userfaultfd_release(struct inode *, struct file *);
1943:	static void userfaultfd_show_fdinfo(struct seq_file *, struct file *);
1504:	static int userfaultfd_unregister(unsigned long, struct userfaultfd_ctx *, struct userfaultfd_ctx *);
1657:	static int userfaultfd_wake(struct userfaultfd_ctx *, unsigned long);
110:	static int userfaultfd_wake_function(wait_queue_entry_t *, unsigned int, int, void *);
1798:	static int userfaultfd_writeprotect(struct userfaultfd_ctx *, unsigned long);
1746:	static int userfaultfd_zeropage(struct userfaultfd_ctx *, unsigned long);

File fs/utimes.c:
201:	long __ia32_sys_futimesat(const struct pt_regs *);
286:	long __ia32_sys_futimesat_time32(const struct pt_regs *);
213:	long __ia32_sys_utime(const struct pt_regs *);
234:	long __ia32_sys_utime32(const struct pt_regs *);
146:	long __ia32_sys_utimensat(const struct pt_regs *);
250:	long __ia32_sys_utimensat_time32(const struct pt_regs *);
207:	long __ia32_sys_utimes(const struct pt_regs *);
293:	long __ia32_sys_utimes_time32(const struct pt_regs *);
201:	long __x64_sys_futimesat(const struct pt_regs *);
286:	long __x64_sys_futimesat_time32(const struct pt_regs *);
213:	long __x64_sys_utime(const struct pt_regs *);
234:	long __x64_sys_utime32(const struct pt_regs *);
146:	long __x64_sys_utimensat(const struct pt_regs *);
250:	long __x64_sys_utimensat_time32(const struct pt_regs *);
207:	long __x64_sys_utimes(const struct pt_regs *);
293:	long __x64_sys_utimes_time32(const struct pt_regs *);
138:	long do_utimes(int, const char *, struct timespec64 *, int);
19:	int vfs_utimes(const struct path *, struct timespec64 *);
146:	static long __se_sys_utimensat(long, long, long, long);
250:	static long __se_sys_utimensat_time32(long, long, long, long);
266:	static long do_compat_futimesat(unsigned int, const char *, struct old_timeval32 *);
172:	static long do_futimesat(int, const char *, struct __kernel_old_timeval *);

File fs/xattr.c:
686:	long __ia32_sys_fgetxattr(const struct pt_regs *);
762:	long __ia32_sys_flistxattr(const struct pt_regs *);
827:	long __ia32_sys_fremovexattr(const struct pt_regs *);
594:	long __ia32_sys_fsetxattr(const struct pt_regs *);
674:	long __ia32_sys_getxattr(const struct pt_regs *);
680:	long __ia32_sys_lgetxattr(const struct pt_regs *);
750:	long __ia32_sys_listxattr(const struct pt_regs *);
756:	long __ia32_sys_llistxattr(const struct pt_regs *);
821:	long __ia32_sys_lremovexattr(const struct pt_regs *);
587:	long __ia32_sys_lsetxattr(const struct pt_regs *);
815:	long __ia32_sys_removexattr(const struct pt_regs *);
580:	long __ia32_sys_setxattr(const struct pt_regs *);
366:	ssize_t __vfs_getxattr(struct dentry *, struct inode *, const char *, void *, size_t);
432:	int __vfs_removexattr(struct dentry *, const char *);
456:	int __vfs_removexattr_locked(struct dentry *, const char *, struct inode **);
166:	int __vfs_setxattr(struct dentry *, struct inode *, const char *, const void *, size_t, int);
248:	int __vfs_setxattr_locked(struct dentry *, const char *, const void *, size_t, int, struct inode **);
198:	int __vfs_setxattr_noperm(struct dentry *, const char *, const void *, size_t, int);
686:	long __x64_sys_fgetxattr(const struct pt_regs *);
762:	long __x64_sys_flistxattr(const struct pt_regs *);
827:	long __x64_sys_fremovexattr(const struct pt_regs *);
594:	long __x64_sys_fsetxattr(const struct pt_regs *);
674:	long __x64_sys_getxattr(const struct pt_regs *);
680:	long __x64_sys_lgetxattr(const struct pt_regs *);
750:	long __x64_sys_listxattr(const struct pt_regs *);
756:	long __x64_sys_llistxattr(const struct pt_regs *);
821:	long __x64_sys_lremovexattr(const struct pt_regs *);
587:	long __x64_sys_lsetxattr(const struct pt_regs *);
815:	long __x64_sys_removexattr(const struct pt_regs *);
580:	long __x64_sys_setxattr(const struct pt_regs *);
849:	ssize_t generic_listxattr(struct dentry *, char *, size_t);
909:	struct simple_xattr *simple_xattr_alloc(const void *, size_t);
931:	int simple_xattr_get(struct simple_xattrs *, const char *, void *, size_t);
1051:	ssize_t simple_xattr_list(struct inode *, struct simple_xattrs *, char *, size_t);
1094:	void simple_xattr_list_add(struct simple_xattrs *, struct simple_xattr *);
970:	int simple_xattr_set(struct simple_xattrs *, const char *, const void *, size_t, int, ssize_t *);
381:	ssize_t vfs_getxattr(struct dentry *, const char *, void *, size_t);
332:	ssize_t vfs_getxattr_alloc(struct dentry *, const char *, char **, size_t, gfp_t);
412:	ssize_t vfs_listxattr(struct dentry *, char *, size_t);
488:	int vfs_removexattr(struct dentry *, const char *);
275:	int vfs_setxattr(struct dentry *, const char *, const void *, size_t, int);
897:	const char *xattr_full_name(const struct xattr_handler *, const char *);
142:	int xattr_supported_namespace(struct inode *, const char *);
686:	static long __se_sys_fgetxattr(long, long, long, long);
762:	static long __se_sys_flistxattr(long, long, long);
827:	static long __se_sys_fremovexattr(long, long);
594:	static long __se_sys_fsetxattr(long, long, long, long, long);
616:	static ssize_t getxattr(struct dentry *, const char *, void *, size_t);
704:	static ssize_t listxattr(struct dentry *, char *, size_t);
655:	static ssize_t path_getxattr(const char *, const char *, void *, size_t, unsigned int);
732:	static ssize_t path_listxattr(const char *, char *, size_t, unsigned int);
793:	static int path_removexattr(const char *, const char *, unsigned int);
557:	static int path_setxattr(const char *, const char *, const void *, size_t, int, unsigned int);
779:	static long removexattr(struct dentry *, const char *);
513:	static long setxattr(struct dentry *, const char *, const void *, size_t, int);
1034:	static int xattr_list_one(char **, ssize_t *, const char *);
87:	static int xattr_permission(struct inode *, const char *, int);
55:	static const struct xattr_handler *xattr_resolve_name(struct inode *, const char **);

File init/calibrate.c:
275:	void calibrate_delay(void);
261:	unsigned long calibrate_delay_is_known(void);
271:	void calibration_delay_done(void);
187:	static unsigned long calibrate_delay_converge(void);
35:	static unsigned long calibrate_delay_direct(void);
17:	static int lpj_setup(char *);

File init/do_mounts.c:
658:	void init_rootfs(void);
434:	void mount_block_root(char *, int);
562:	void mount_root(void);
223:	dev_t name_to_dev_t(const char *);
592:	void prepare_namespace(void);
108:	static dev_t devt_from_partuuid(const char *);
397:	static int do_mount_root(const char *, const char *, const int, const void *);
346:	static int fs_names_setup(char *);
370:	static void get_fs_names(char *);
359:	static int initramtmpfs_setup(char *);
39:	static int load_ramdisk(char *);
180:	static int match_dev_by_label(struct device *, const void *);
78:	static int match_dev_by_uuid(struct device *, const void *);
46:	static int readonly(char *);
54:	static int readwrite(char *);
339:	static int root_data_setup(char *);
353:	static int root_delay_setup(char *);
320:	static int root_dev_setup(char *);
644:	static int rootfs_init_fs_context(struct fs_context *);
328:	static int rootwait_setup(char *);

File init/do_mounts_initrd.c:
124:	bool initrd_load(void);
48:	static int early_initrd(char *);
31:	static int early_initrdmem(char *);
23:	static int no_initrd(char *);

File init/initramfs.c:
670:	void free_initrd_mem(unsigned long, unsigned long);
299:	static void clean_path(char *, umode_t);
234:	static int do_collect(void);
491:	static int do_copy(void);
248:	static int do_header(void);
410:	static int do_name(void);
355:	static int do_parse_metadata(char *);
457:	static int do_process_metadata(char *, int, bool);
290:	static int do_reset(void);
324:	static int do_setxattrs(char *, char *, size_t);
278:	static int do_skip(void);
228:	static int do_start(void);
519:	static int do_symlink(void);
108:	static long do_utime(char *, time64_t);
44:	static void error(char *);
68:	static char *find_link(int, int, int, umode_t, char *);
553:	static long flush_buffer(void *, unsigned long);
684:	static bool kexec_free_initrd(void);
312:	static int maybe_link(void);
159:	static void parse_header(char *);
737:	static int populate_rootfs(void);
211:	static void read_into(char *, unsigned int, enum state);
647:	static int retain_initrd_param(char *);
580:	static char *unpack_to_rootfs(char *, unsigned long);
543:	static long write_buffer(char *, unsigned long);
19:	static ssize_t xwrite(struct file *, const char *, size_t, loff_t *);

File init/main.c:
849:	void arch_call_rest_init(void);
768:	void arch_post_acpi_subsys_init(void);
1482:	void console_on_rootfs(void);
1210:	int do_one_initcall(initcall_t);
1409:	void free_initmem(void);
780:	void mem_encrypt_init(void);
747:	void parse_early_options(char *);
754:	void parse_early_param(void);
784:	void pgtable_cache_init(void);
782:	void poking_init(void);
680:	void rest_init(void);
770:	void smp_setup_processor_id(void);
854:	void start_kernel(void);
775:	void thread_stack_cache_init(void);
401:	static int bootconfig_params(char *, char *, const char *, void *);
233:	static int debug_kernel(char *);
729:	static int do_early_param(char *, char *, const char *, void *);
1281:	static void do_initcall_level(int, char *);
1296:	static void do_initcalls(void);
1332:	static void do_pre_smp_initcalls(void);
268:	static void *get_boot_config_from_initrd(u32 *, u32 *);
1275:	static int ignore_unknown_bootoption(char *, char *, const char *, void *);
578:	static int init_setup(char *);
1088:	static int initcall_blacklist(char *);
1116:	static bool initcall_blacklisted(initcall_t);
1414:	static int kernel_init(void *);
1496:	static void kernel_init_freeable(void);
248:	static int loglevel(char *);
197:	static bool obsolete_checksetup(char *);
239:	static int quiet_kernel(char *);
595:	static int rdinit_setup(char *);
493:	static void repair_env_string(char *, char *);
798:	static void report_meminit(void);
1341:	static int run_init_process(const char *);
1374:	static int set_debug_rodata(char *);
508:	static int set_init_arg(char *, char *, const char *, void *);
183:	static int set_reset_devices(char *);
410:	static void setup_boot_config(const char *);
620:	static void setup_command_line(char *);
1167:	static void trace_initcall_finish_cb(void *, initcall_t, int);
1158:	static void trace_initcall_start_cb(void *, initcall_t);
1356:	static int try_to_run_init_process(const char *);
533:	static int unknown_bootoption(char *, char *, const char *, void *);
360:	static char *xbc_make_cmdline(const char *);
324:	static int xbc_snprint_cmdline(char *, size_t, struct xbc_node *);

File ipc/compat.c:
38:	int get_compat_ipc64_perm(struct ipc64_perm *, struct compat_ipc64_perm *);
50:	int get_compat_ipc_perm(struct ipc64_perm *, struct compat_ipc_perm *);
62:	void to_compat_ipc64_perm(struct compat_ipc64_perm *, struct ipc64_perm *);
73:	void to_compat_ipc_perm(struct compat_ipc_perm *, struct ipc64_perm *);

File ipc/ipc_sysctl.c:
245:	static int ipc_mni_extend(char *);
237:	static int ipc_sysctl_init(void);
72:	static int proc_ipc_auto_msgmni(struct ctl_table *, int, void *, size_t *, loff_t *);
37:	static int proc_ipc_dointvec_minmax(struct ctl_table *, int, void *, size_t *, loff_t *);
48:	static int proc_ipc_dointvec_minmax_orphans(struct ctl_table *, int, void *, size_t *, loff_t *);
61:	static int proc_ipc_doulongvec_minmax(struct ctl_table *, int, void *, size_t *, loff_t *);
87:	static int proc_ipc_sem_dointvec(struct ctl_table *, int, void *, size_t *, loff_t *);

File ipc/mq_sysctl.c:
117:	struct ctl_table_header *mq_register_sysctl_table(void);
21:	static int proc_mq_dointvec(struct ctl_table *, int, void *, size_t *, loff_t *);
31:	static int proc_mq_dointvec_minmax(struct ctl_table *, int, void *, size_t *, loff_t *);

File ipc/mqueue.c:
1575:	long __ia32_compat_sys_mq_getsetattr(const struct pt_regs *);
1561:	long __ia32_compat_sys_mq_notify(const struct pt_regs *);
1548:	long __ia32_compat_sys_mq_open(const struct pt_regs *);
1482:	long __ia32_sys_mq_getsetattr(const struct pt_regs *);
1426:	long __ia32_sys_mq_notify(const struct pt_regs *);
928:	long __ia32_sys_mq_open(const struct pt_regs *);
1284:	long __ia32_sys_mq_timedreceive(const struct pt_regs *);
1627:	long __ia32_sys_mq_timedreceive_time32(const struct pt_regs *);
1270:	long __ia32_sys_mq_timedsend(const struct pt_regs *);
1612:	long __ia32_sys_mq_timedsend_time32(const struct pt_regs *);
938:	long __ia32_sys_mq_unlink(const struct pt_regs *);
1482:	long __x64_sys_mq_getsetattr(const struct pt_regs *);
1426:	long __x64_sys_mq_notify(const struct pt_regs *);
928:	long __x64_sys_mq_open(const struct pt_regs *);
1284:	long __x64_sys_mq_timedreceive(const struct pt_regs *);
1627:	long __x64_sys_mq_timedreceive_time32(const struct pt_regs *);
1270:	long __x64_sys_mq_timedsend(const struct pt_regs *);
1612:	long __x64_sys_mq_timedsend_time32(const struct pt_regs *);
938:	long __x64_sys_mq_unlink(const struct pt_regs *);
1693:	void mq_clear_sbinfo(struct ipc_namespace *);
1675:	int mq_init_ns(struct ipc_namespace *);
1698:	void mq_put_mnt(struct ipc_namespace *);
768:	static void __do_notify(struct mqueue_inode_info *);
1575:	static long __se_compat_sys_mq_getsetattr(long, long, long);
1482:	static long __se_sys_mq_getsetattr(long, long, long);
938:	static long __se_sys_mq_unlink(long);
1438:	static int do_mq_getsetattr(int, struct mq_attr *, struct mq_attr *);
1303:	static int do_mq_notify(mqd_t, const struct sigevent *);
879:	static int do_mq_open(const char *, int, umode_t, struct mq_attr *);
1166:	static int do_mq_timedreceive(mqd_t, char *, size_t, unsigned int *, struct timespec64 *);
1046:	static int do_mq_timedsend(mqd_t, const char *, size_t, unsigned int, struct timespec64 *);
181:	static struct ipc_namespace *get_ns_from_inode(struct inode *);
1703:	static int init_mqueue_fs(void);
475:	static void init_once(void *);
454:	static struct vfsmount *mq_create_mount(struct ipc_namespace *);
482:	static struct inode *mqueue_alloc_inode(struct super_block *);
597:	static int mqueue_create(struct inode *, struct dentry *, umode_t, bool);
552:	static int mqueue_create_attr(struct dentry *, umode_t, void *);
497:	static void mqueue_evict_inode(struct inode *);
402:	static int mqueue_fill_super(struct super_block *, struct fs_context *);
649:	static int mqueue_flush_file(struct file *, fl_owner_t);
492:	static void mqueue_free_inode(struct inode *);
430:	static void mqueue_fs_context_free(struct fs_context *);
291:	static struct inode *mqueue_get_inode(struct super_block *, struct ipc_namespace *, umode_t, struct mq_attr *);
423:	static int mqueue_get_tree(struct fs_context *);
438:	static int mqueue_init_fs_context(struct fs_context *);
661:	static __poll_t mqueue_poll_file(struct file *, struct poll_table_struct *);
621:	static ssize_t mqueue_read_file(struct file *, char *, size_t, loff_t *);
603:	static int mqueue_unlink(struct inode *, struct dentry *);
192:	static int msg_insert(struct msg_msg *, struct mqueue_inode_info *);
839:	static void remove_notification(struct mqueue_inode_info *);
699:	static int wq_sleep(struct mqueue_inode_info *, int, ktime_t *, struct ext_wait_queue *);

File ipc/msg.c:
768:	long __ia32_compat_sys_msgctl(const struct pt_regs *);
1292:	long __ia32_compat_sys_msgrcv(const struct pt_regs *);
989:	long __ia32_compat_sys_msgsnd(const struct pt_regs *);
781:	long __ia32_compat_sys_old_msgctl(const struct pt_regs *);
634:	long __ia32_sys_msgctl(const struct pt_regs *);
314:	long __ia32_sys_msgget(const struct pt_regs *);
1264:	long __ia32_sys_msgrcv(const struct pt_regs *);
965:	long __ia32_sys_msgsnd(const struct pt_regs *);
634:	long __x64_sys_msgctl(const struct pt_regs *);
314:	long __x64_sys_msgget(const struct pt_regs *);
1264:	long __x64_sys_msgrcv(const struct pt_regs *);
965:	long __x64_sys_msgsnd(const struct pt_regs *);
1285:	long compat_ksys_msgrcv(int, compat_uptr_t, compat_ssize_t, compat_long_t, int);
978:	long compat_ksys_msgsnd(int, compat_uptr_t, compat_ssize_t, int);
774:	long compat_ksys_old_msgctl(int, int, void *);
297:	long ksys_msgget(key_t, int);
1258:	long ksys_msgrcv(int, struct msgbuf *, size_t, long, int);
955:	long ksys_msgsnd(int, struct msgbuf *, size_t, int);
1312:	void msg_exit_ns(struct ipc_namespace *);
1349:	void msg_init(void);
1300:	void msg_init_ns(struct ipc_namespace *);
1271:	static long compat_do_msg_fill(void *, struct msg_msg *, size_t);
726:	static long compat_ksys_msgctl(int, int, void *, int);
691:	static int copy_compat_msqid_to_user(void *, struct msqid64_ds *, int);
1020:	static long do_msg_fill(void *, struct msg_msg *, size_t);
1092:	static long do_msgrcv(int, void *, size_t, long, int, long (*)(void *, struct msg_msg *, size_t));
842:	static long do_msgsnd(int, long, void *, size_t, int);
248:	static void expunge_all(struct msg_queue *, int, struct wake_q_head *);
272:	static void freeque(struct ipc_namespace *, struct kern_ipc_perm *);
591:	static long ksys_msgctl(int, int, struct msqid_ds *, int);
127:	static void msg_rcu_free(struct callback_head *);
400:	static int msgctl_down(struct ipc_namespace *, int, int, struct ipc64_perm *, int);
476:	static int msgctl_info(struct ipc_namespace *, int, struct msginfo *, int);
512:	static int msgctl_stat(struct ipc_namespace *, int, int, struct msqid64_ds *);
143:	static int newque(struct ipc_namespace *, struct ipc_params *);
211:	static void ss_wakeup(struct msg_queue *, struct wake_q_head *, bool);
1321:	static int sysvipc_msg_proc_show(struct seq_file *, void *);
788:	static int testmsg(struct msg_msg *, long, int);

File ipc/msgutil.c:
118:	struct msg_msg *copy_msg(struct msg_msg *, struct msg_msg *);
169:	void free_msg(struct msg_msg *);
84:	struct msg_msg *load_msg(const void *, size_t);
150:	int store_msg(void *, struct msg_msg *, size_t);
46:	static struct msg_msg *alloc_msg(size_t);

File ipc/namespace.c:
79:	struct ipc_namespace *copy_ipcs(unsigned long, struct user_namespace *, struct ipc_namespace *);
95:	void free_ipcs(struct ipc_namespace *, struct ipc_ids *, void (*)(struct ipc_namespace *, struct kern_ipc_perm *));
165:	void put_ipc_ns(struct ipc_namespace *);
32:	static struct ipc_namespace *create_ipc_ns(struct user_namespace *, struct ipc_namespace *);
135:	static void free_ipc(struct work_struct *);
181:	static struct ns_common *ipcns_get(struct task_struct *);
200:	static int ipcns_install(struct nsset *, struct ns_common *);
213:	static struct user_namespace *ipcns_owner(struct ns_common *);
195:	static void ipcns_put(struct ns_common *);

File ipc/sem.c:
1831:	long __ia32_compat_sys_old_semctl(const struct pt_regs *);
1818:	long __ia32_compat_sys_semctl(const struct pt_regs *);
1704:	long __ia32_sys_semctl(const struct pt_regs *);
621:	long __ia32_sys_semget(const struct pt_regs *);
2277:	long __ia32_sys_semop(const struct pt_regs *);
2249:	long __ia32_sys_semtimedop(const struct pt_regs *);
2269:	long __ia32_sys_semtimedop_time32(const struct pt_regs *);
1704:	long __x64_sys_semctl(const struct pt_regs *);
621:	long __x64_sys_semget(const struct pt_regs *);
2277:	long __x64_sys_semop(const struct pt_regs *);
2249:	long __x64_sys_semtimedop(const struct pt_regs *);
2269:	long __x64_sys_semtimedop_time32(const struct pt_regs *);
1824:	long compat_ksys_old_semctl(int, int, int, int);
2256:	long compat_ksys_semtimedop(int, struct sembuf *, unsigned int, const struct old_timespec32 *);
2287:	int copy_semundo(unsigned long, struct task_struct *);
2316:	void exit_sem(struct task_struct *);
599:	long ksys_semget(key_t, int, int);
2237:	long ksys_semtimedop(int, struct sembuf *, unsigned int, const struct __kernel_timespec *);
258:	void sem_exit_ns(struct ipc_namespace *);
266:	void sem_init(void);
247:	void sem_init_ns(struct ipc_namespace *);
1070:	static int check_qop(int, bool, struct sem_array *, struct sem_queue *, struct sem_queue *);
1773:	static long compat_ksys_semctl(int, int, int, int, int);
334:	static void complexmode_enter(struct sem_array *);
1749:	static int copy_compat_semid_to_user(void *, struct semid64_ds *, int);
1193:	static unsigned long copy_semid_to_user(void *, struct semid64_ds *, int);
1104:	static int count_semcnt(struct sem_array *, ushort, bool);
1983:	static long do_semtimedop(int, struct sembuf *, unsigned int, const struct timespec64 *);
1027:	static void do_smart_update(struct sem_array *, struct sembuf *, int, int, struct wake_q_head *);
891:	static int do_smart_wakeup_zero(struct sem_array *, struct sembuf *, int, struct wake_q_head *);
1905:	static struct sem_undo *find_alloc_undo(struct ipc_namespace *, int);
1141:	static void freeary(struct ipc_namespace *, struct kern_ipc_perm *);
1650:	static long ksys_semctl(int, int, int, unsigned long, int);
1880:	static struct sem_undo *lookup_undo(struct sem_undo_list *, int);
528:	static int newary(struct ipc_namespace *, struct ipc_params *);
716:	static int perform_atomic_semop(struct sem_array *, struct sem_queue *);
643:	static int perform_atomic_semop_slow(struct sem_array *, struct sem_queue *);
588:	static int sem_more_checks(struct kern_ipc_perm *, struct ipc_params *);
321:	static void sem_rcu_free(struct callback_head *);
1600:	static int semctl_down(struct ipc_namespace *, int, int, struct semid64_ds *);
1306:	static int semctl_info(struct ipc_namespace *, int, void *, int);
1403:	static int semctl_main(struct ipc_namespace *, int, int, int, void *);
1341:	static int semctl_setval(struct ipc_namespace *, int, int, int);
1232:	static int semctl_stat(struct ipc_namespace *, int, int, struct semid64_ds *);
2430:	static int sysvipc_sem_proc_show(struct seq_file *, void *);
281:	static void unmerge_queues(struct sem_array *);
947:	static int update_queue(struct sem_array *, int, struct wake_q_head *);
852:	static int wake_const_ops(struct sem_array *, int, struct wake_q_head *);

File ipc/shm.c:
1498:	long __ia32_compat_sys_old_shmctl(const struct pt_regs *);
1704:	long __ia32_compat_sys_shmat(const struct pt_regs *);
1485:	long __ia32_compat_sys_shmctl(const struct pt_regs *);
1686:	long __ia32_sys_shmat(const struct pt_regs *);
1289:	long __ia32_sys_shmctl(const struct pt_regs *);
1828:	long __ia32_sys_shmdt(const struct pt_regs *);
840:	long __ia32_sys_shmget(const struct pt_regs *);
1686:	long __x64_sys_shmat(const struct pt_regs *);
1289:	long __x64_sys_shmctl(const struct pt_regs *);
1828:	long __x64_sys_shmdt(const struct pt_regs *);
840:	long __x64_sys_shmget(const struct pt_regs *);
1491:	long compat_ksys_old_shmctl(int, int, void *);
1512:	long do_shmat(int, char *, int, ulong *, unsigned long);
426:	void exit_shm(struct task_struct *);
668:	bool is_file_shm_hugepages(struct file *);
1721:	long ksys_shmdt(char *);
821:	long ksys_shmget(key_t, size_t, int);
417:	void shm_destroy_orphaned(struct ipc_namespace *);
139:	void shm_exit_ns(struct ipc_namespace *);
155:	void shm_init(void);
108:	void shm_init_ns(struct ipc_namespace *);
278:	static int __shm_open(struct vm_area_struct *, struct vm_area_struct *);
1430:	static long compat_ksys_shmctl(int, int, void *, int);
1383:	static int copy_compat_shmid_to_user(void *, struct shmid64_ds *, int);
122:	static void do_shm_rmid(struct ipc_namespace *, struct kern_ipc_perm *);
147:	static int ipc_ns_init(void);
1235:	static long ksys_shmctl(int, int, struct shmid_ds *, int);
692:	static int newseg(struct ipc_namespace *, struct ipc_params *);
927:	static void shm_add_rss_swap(struct shmid_kernel *, unsigned long *, unsigned long *);
365:	static void shm_close(struct vm_area_struct *);
322:	static void shm_destroy(struct ipc_namespace *, struct shmid_kernel *);
626:	static long shm_fallocate(struct file *, int, loff_t, loff_t);
521:	static vm_fault_t shm_fault(struct vm_fault *);
617:	static int shm_fsync(struct file *, loff_t, loff_t, int);
563:	static struct mempolicy *shm_get_policy(struct vm_area_struct *, unsigned long);
636:	static unsigned long shm_get_unmapped_area(struct file *, unsigned long, unsigned long, unsigned long, unsigned long);
579:	static int shm_mmap(struct file *, struct vm_area_struct *);
810:	static int shm_more_checks(struct kern_ipc_perm *, struct ipc_params *);
303:	static void shm_open(struct vm_area_struct *);
540:	static unsigned long shm_pagesize(struct vm_area_struct *);
228:	static void shm_rcu_free(struct callback_head *);
606:	static int shm_release(struct inode *, struct file *);
552:	static int shm_set_policy(struct vm_area_struct *, struct mempolicy *);
529:	static int shm_split(struct vm_area_struct *, unsigned long);
395:	static int shm_try_destroy_orphaned(int, void *, void *);
1159:	static int shmctl_do_lock(struct ipc_namespace *, int, int);
986:	static int shmctl_down(struct ipc_namespace *, int, int, struct shmid64_ds *);
1036:	static int shmctl_ipc_info(struct ipc_namespace *, struct shminfo64 *);
1055:	static int shmctl_shm_info(struct ipc_namespace *, struct shm_info *);
1075:	static int shmctl_stat(struct ipc_namespace *, int, int, struct shmid64_ds *);
1834:	static int sysvipc_shm_proc_show(struct seq_file *, void *);

File ipc/syscall.c:
205:	long __ia32_compat_sys_ipc(const struct pt_regs *);
130:	int compat_ksys_ipc(u32, int, int, u32, compat_uptr_t, u32);

File ipc/util.c:
572:	void ipc64_perm_to_ipc_perm(struct ipc64_perm *, struct ipc_perm *);
277:	int ipc_addid(struct ipc_ids *, struct kern_ipc_perm *, int);
114:	void ipc_init_ids(struct ipc_ids *);
137:	void ipc_init_proc_interface(const char *, const char *, int, int (*)(struct seq_file *, void *));
616:	struct kern_ipc_perm *ipc_obtain_object_check(struct ipc_ids *, int);
593:	struct kern_ipc_perm *ipc_obtain_object_idr(struct ipc_ids *, int);
494:	bool ipc_rcu_getref(struct kern_ipc_perm *);
499:	void ipc_rcu_putref(struct kern_ipc_perm *, void (*)(struct callback_head *));
461:	void ipc_rmid(struct ipc_ids *, struct kern_ipc_perm *);
745:	struct pid_namespace *ipc_seq_pid_ns(struct seq_file *);
488:	void ipc_set_key_private(struct ipc_ids *, struct kern_ipc_perm *);
653:	int ipc_update_perm(struct ipc64_perm *, struct kern_ipc_perm *);
688:	struct kern_ipc_perm *ipcctl_obtain_check(struct ipc_namespace *, struct ipc_ids *, int, int, struct ipc64_perm *, int);
639:	int ipcget(struct ipc_namespace *, struct ipc_ids *, const struct ipc_ops *, struct ipc_params *);
519:	int ipcperms(struct ipc_namespace *, struct kern_ipc_perm *, short);
553:	void kernel_to_ipc64_perm(struct kern_ipc_perm *, struct ipc64_perm *);
171:	static struct kern_ipc_perm *ipc_findkey(struct ipc_ids *, key_t);
89:	static int ipc_init(void);
446:	static void ipc_kht_remove(struct ipc_ids *, struct kern_ipc_perm *);
754:	static struct kern_ipc_perm *sysvipc_find_ipc(struct ipc_ids *, loff_t, loff_t *);
776:	static void *sysvipc_proc_next(struct seq_file *, void *, loff_t *);
855:	static int sysvipc_proc_open(struct inode *, struct file *);
870:	static int sysvipc_proc_release(struct inode *, struct file *);
835:	static int sysvipc_proc_show(struct seq_file *, void *);
793:	static void *sysvipc_proc_start(struct seq_file *, loff_t *);
819:	static void sysvipc_proc_stop(struct seq_file *, void *);

File kernel/acct.c:
273:	long __ia32_sys_acct(const struct pt_regs *);
273:	long __x64_sys_acct(const struct pt_regs *);
535:	void acct_collect(long, int);
297:	void acct_exit_ns(struct pid_namespace *);
591:	void acct_process(void);
273:	static long __se_sys_acct(long);
144:	static struct bsd_acct_struct *acct_get(struct pid_namespace *);
193:	static int acct_on(struct filename *);
170:	static void acct_pin_kill(struct fs_pin *);
101:	static int check_free_space(struct bsd_acct_struct *);
183:	static void close_work(struct work_struct *);
473:	static void do_acct_process(struct bsd_acct_struct *);
415:	static void fill_ac(acct_t *);

File kernel/async.c:
231:	async_cookie_t async_schedule_node(async_func_t, void *, int);
165:	async_cookie_t async_schedule_node_domain(async_func_t, void *, int, struct async_domain *);
317:	void async_synchronize_cookie(async_cookie_t);
288:	void async_synchronize_cookie_domain(async_cookie_t, struct async_domain *);
242:	void async_synchronize_full(void);
273:	void async_synchronize_full_domain(struct async_domain *);
257:	void async_unregister_domain(struct async_domain *);
328:	bool current_is_async(void);
109:	static void async_run_entry_fn(struct work_struct *);
81:	static async_cookie_t lowest_in_progress(struct async_domain *);

File kernel/audit.c:
234:	void audit_ctl_lock(void);
243:	void audit_ctl_unlock(void);
2192:	struct tty_struct *audit_get_tty(void);
2426:	void audit_log(struct audit_context *, gfp_t, int, const char *, ...);
2105:	void audit_log_d_path(struct audit_buffer *, const char *, const struct path *);
2173:	void audit_log_d_path_exe(struct audit_buffer *, struct mm_struct *);
2388:	void audit_log_end(struct audit_buffer *);
1970:	void audit_log_format(struct audit_buffer *, const char *, ...);
2136:	void audit_log_key(struct audit_buffer *, char *);
354:	void audit_log_lost(const char *);
1992:	void audit_log_n_hex(struct audit_buffer *, const unsigned char *, size_t);
2025:	void audit_log_n_string(struct audit_buffer *, const char *, size_t);
2082:	void audit_log_n_untrustedstring(struct audit_buffer *, const char *, size_t);
2250:	void audit_log_path_denied(int, const char *);
2128:	void audit_log_session_info(struct audit_buffer *);
1827:	struct audit_buffer *audit_log_start(struct audit_context *, gfp_t, int);
2145:	int audit_log_task_context(struct audit_buffer *);
2209:	void audit_log_task_info(struct audit_buffer *);
2099:	void audit_log_untrustedstring(struct audit_buffer *, const char *);
910:	struct sk_buff *audit_make_reply(int, int, int, int, const void *, int);
302:	void audit_panic(const char *);
2204:	void audit_put_tty(struct tty_struct *);
891:	int audit_send_list_thread(void *);
1796:	unsigned int audit_serial(void);
2325:	int audit_set_loginuid(kuid_t);
2360:	int audit_signal_info(int, struct task_struct *);
2058:	bool audit_string_contains_control(const char *, size_t);
218:	int auditd_test_task(struct task_struct *);
1084:	int is_audit_feature_set(int);
1727:	static int audit_backlog_limit_set(char *);
1754:	static struct audit_buffer *audit_buffer_alloc(struct audit_context *, gfp_t, int);
1701:	static int audit_enable(char *);
935:	static void audit_free_reply(struct audit_reply *);
1656:	static int audit_init(void);
1059:	static void audit_log_common_recv_msg(struct audit_context *, struct audit_buffer **, u16);
386:	static int audit_log_config_change(char *, u32, u32, int);
1101:	static void audit_log_feature_change(int, u32, u32, u32, u32, int);
1565:	static void audit_log_multicast(int, const char *, int);
2288:	static void audit_log_set_loginuid(kuid_t, kuid_t, unsigned int, unsigned int, int);
1924:	static void audit_log_vformat(struct audit_buffer *, const char *, struct __va_list_tag *);
1597:	static int audit_multicast_bind(struct net *, int);
1607:	static void audit_multicast_unbind(struct net *, int);
1635:	static void audit_net_exit(struct net *);
1612:	static int audit_net_init(struct net *);
1525:	static void audit_receive(struct sk_buff *);
1187:	static int audit_receive_msg(struct sk_buff *, struct nlmsghdr *);
973:	static void audit_send_reply(struct sk_buff *, int, int, const void *, int, int, int);
946:	static int audit_send_reply_thread(void *);
447:	static int audit_set_enabled(u32);
1119:	static int audit_set_feature(struct audit_features *);
478:	static void auditd_conn_free(struct callback_head *);
619:	static void auditd_reset(const struct auditd_connection *);
657:	static int auditd_send_unicast_skb(struct sk_buff *);
498:	static int auditd_set(struct pid *, u32, struct net *);
567:	static void kauditd_hold_skb(struct sk_buff *);
549:	static void kauditd_rehold_skb(struct sk_buff *);
600:	static void kauditd_retry_skb(struct sk_buff *);
779:	static void kauditd_send_multicast_skb(struct sk_buff *);
713:	static int kauditd_send_queue(struct sock *, u32, struct sk_buff_head *, unsigned int, void (*)(struct sk_buff *), void (*)(struct sk_buff *));
814:	static int kauditd_thread(void *);

File kernel/audit_fsnotify.c:
74:	struct audit_fsnotify_mark *audit_alloc_mark(struct audit_krule *, char *, int);
60:	int audit_mark_compare(struct audit_fsnotify_mark *, unsigned long, dev_t);
55:	char *audit_mark_path(struct audit_fsnotify_mark *);
132:	void audit_remove_mark(struct audit_fsnotify_mark *);
138:	void audit_remove_mark_rule(struct audit_krule *);
145:	static void audit_autoremove_mark_rule(struct audit_fsnotify_mark *);
47:	static void audit_fsnotify_free_mark(struct fsnotify_mark *);
183:	static int audit_fsnotify_init(void);
155:	static int audit_mark_handle_event(struct fsnotify_mark *, u32, struct inode *, struct inode *, const struct qstr *, u32);

File kernel/audit_tree.c:
800:	int audit_add_tree_rule(struct audit_krule *);
975:	void audit_kill_trees(struct audit_context *);
726:	int audit_make_tree(struct audit_krule *, char *, u32);
139:	void audit_put_chunk(struct audit_chunk *);
740:	void audit_put_tree(struct audit_tree *);
647:	int audit_remove_tree_rule(struct audit_krule *);
870:	int audit_tag_tree(char *, char *);
242:	struct audit_chunk *audit_tree_lookup(const struct inode *);
261:	bool audit_tree_match(struct audit_chunk *, struct audit_tree *);
123:	const char *audit_tree_path(struct audit_tree *);
677:	void audit_trim_trees(void);
145:	static void __put_chunk(struct callback_head *);
188:	static struct audit_chunk *alloc_chunk(int);
93:	static struct audit_tree *alloc_tree(const char *);
171:	static void audit_tree_destroy_watch(struct fsnotify_mark *);
1045:	static void audit_tree_freeing_mark(struct fsnotify_mark *, struct fsnotify_group *);
1038:	static int audit_tree_handle_event(struct fsnotify_mark *, u32, struct inode *, struct inode *, const struct qstr *, u32);
1074:	static int audit_tree_init(void);
671:	static int compare_root(struct vfsmount *, void *);
397:	static int create_chunk(struct inode *, struct audit_tree *);
1004:	static void evict_chunk(struct audit_chunk *);
542:	static void kill_rules(struct audit_context *, struct audit_tree *);
601:	static void prune_one(struct audit_tree *);
569:	static void prune_tree_chunks(struct audit_tree *, bool);
754:	static int prune_tree_thread(void *);
325:	static void remove_chunk_node(struct audit_chunk *, struct node *);
293:	static void replace_chunk(struct audit_chunk *, struct audit_chunk *);
458:	static int tag_chunk(struct inode *, struct audit_tree *);
745:	static int tag_mount(struct vfsmount *, void *);
609:	static void trim_marked(struct audit_tree *);
349:	static void untag_chunk(struct audit_chunk *, struct fsnotify_mark *);

File kernel/audit_watch.c:
399:	int audit_add_watch(struct audit_krule *, struct list_head **);
505:	int audit_dupe_exe(struct audit_krule *, struct audit_krule *);
524:	int audit_exe_compare(struct task_struct *, struct audit_fsnotify_mark *);
100:	void audit_get_watch(struct audit_watch *);
105:	void audit_put_watch(struct audit_watch *);
446:	void audit_remove_watch_rule(struct audit_krule *);
178:	int audit_to_watch(struct audit_krule *, char *, int, u32);
128:	int audit_watch_compare(struct audit_watch *, unsigned long, dev_t);
123:	char *audit_watch_path(struct audit_watch *);
364:	static void audit_add_to_parent(struct audit_krule *, struct audit_parent *);
321:	static void audit_remove_parent_watches(struct audit_parent *);
244:	static void audit_update_watch(struct audit_parent *, const struct qstr *, dev_t, unsigned long, unsigned int);
64:	static void audit_watch_free_mark(struct fsnotify_mark *);
467:	static int audit_watch_handle_event(struct fsnotify_mark *, u32, struct inode *, struct inode *, const struct qstr *, u32);
494:	static int audit_watch_init(void);

File kernel/auditfilter.c:
1195:	int audit_comparator(u32, u32, u32);
1301:	int audit_compare_dname_path(const struct qstr *, const char *, int);
1013:	int audit_del_rule(struct audit_entry *);
811:	struct audit_entry *audit_dupe_rule(struct audit_krule *);
1320:	int audit_filter(int, unsigned int);
97:	void audit_free_rule_rcu(struct callback_head *);
1241:	int audit_gid_comparator(kgid_t, u32, kgid_t);
1162:	int audit_list_rules_send(struct sk_buff *, int);
186:	int audit_match_class(int, unsigned int);
165:	int audit_register_class(int, unsigned int *);
1123:	int audit_rule_change(int, int, void *, size_t);
1219:	int audit_uid_comparator(kuid_t, u32, kuid_t);
125:	char *audit_unpack_string(void **, size_t *, size_t);
1428:	int audit_update_lsm_rules(void);
1267:	int parent_len(const char *);
696:	static int audit_compare_rule(struct audit_krule *, struct audit_krule *);
441:	static struct audit_entry *audit_data_to_entry(struct audit_rule_data *, size_t);
323:	static int audit_field_valid(struct audit_field *, struct audit_entry *, struct audit_entry *);
891:	static struct audit_entry *audit_find_rule(struct audit_entry *, struct list_head **);
626:	static struct audit_rule_data *audit_krule_to_data(struct audit_krule *);
1069:	static void audit_list_rules(int, struct sk_buff_head *);
1098:	static void audit_log_rule_change(char *, struct audit_krule *, int);
208:	static int audit_match_signal(struct audit_entry *);
1391:	static int update_lsm_rule(struct audit_krule *);

File kernel/auditsc.c:
2346:	void __audit_bprm(struct linux_binprm *);
2555:	void __audit_fanotify(unsigned int);
2379:	void __audit_fd_pair(int, int);
2084:	void __audit_file(const struct file *);
1611:	void __audit_free(struct task_struct *);
1903:	void __audit_getcwd(void);
1918:	void __audit_getname(struct filename *);
1986:	void __audit_inode(struct filename *, const struct dentry *, unsigned int);
2103:	void __audit_inode_child(struct inode *, const struct dentry *, const unsigned char);
2315:	void __audit_ipc_obj(struct kern_ipc_perm *);
2335:	void __audit_ipc_set_perm(unsigned long, uid_t, gid_t, umode_t);
2483:	int __audit_log_bprm_fcaps(struct linux_binprm *, const struct cred *, const struct cred *);
2526:	void __audit_log_capset(const struct cred *, const struct cred *);
2545:	void __audit_log_kern_module(char *);
2590:	void __audit_log_nfcfg(const char *, u8, unsigned int, enum audit_nfcfgop, gfp_t);
2537:	void __audit_mmap_fd(int, int);
2302:	void __audit_mq_getsetattr(mqd_t, struct mq_attr *);
2283:	void __audit_mq_notify(mqd_t, const struct sigevent *);
2235:	void __audit_mq_open(int, umode_t, struct mq_attr *);
2258:	void __audit_mq_sendrecv(mqd_t, size_t, unsigned int, const struct timespec64 *);
2580:	void __audit_ntp_log(const struct audit_ntp_data *);
2409:	void __audit_ptrace(struct task_struct *);
1881:	struct filename *__audit_reusename(const char *);
2393:	int __audit_sockaddr(int, void *);
2361:	int __audit_socketcall(int, unsigned long *);
1657:	void __audit_syscall_entry(int, unsigned long, unsigned long, unsigned long, unsigned long);
1703:	void __audit_syscall_exit(int, long);
2561:	void __audit_tk_injoffset(struct timespec64);
1897:	void _audit_getcwd(struct audit_context *);
944:	int audit_alloc(struct task_struct *);
2639:	void audit_core_dumps(long);
860:	void audit_filter_inodes(struct task_struct *, struct audit_context *);
2702:	struct list_head *audit_killed_trees(void);
2669:	void audit_seccomp(unsigned long, long, int);
2683:	void audit_seccomp_actions_logged(const char *, const char *, int);
2428:	int audit_signal_info_syscall(struct task_struct *);
2211:	int auditsc_get_stamp(struct audit_context *, struct timespec64 *, unsigned int *);
1849:	static struct audit_names *audit_alloc_name(struct audit_context *, unsigned char);
359:	static int audit_compare_gid(kgid_t, struct audit_names *, struct audit_field *, struct audit_context *);
335:	static int audit_compare_uid(kuid_t, struct audit_names *, struct audit_field *, struct audit_context *);
1962:	static void audit_copy_inode(struct audit_names *, const struct dentry *, struct inode *, unsigned int);
383:	static int audit_field_compare(struct task_struct *, const struct cred *, struct audit_field *, struct audit_context *, struct audit_names *);
467:	static int audit_filter_rules(struct task_struct *, struct audit_krule *, struct audit_context *, struct audit_names *, enum audit_state *, bool);
809:	static enum audit_state audit_filter_syscall(struct task_struct *, struct audit_context *, struct list_head *);
1190:	static void audit_log_cap(struct audit_buffer *, char *, kernel_cap_t *);
1016:	static void audit_log_execve_info(struct audit_context *, struct audit_buffer **);
1473:	static void audit_log_exit(void);
1346:	static void audit_log_name(struct audit_context *, struct audit_names *, int, int *, const struct path *);
984:	static int audit_log_pid_context(struct audit_context *, pid_t, kuid_t, kuid_t, unsigned int, u32, char *);
1429:	static void audit_log_proctitle(void);
2610:	static void audit_log_task(struct audit_buffer *);
162:	static int audit_match_perm(struct audit_context *, int);
1793:	static void handle_path(const struct dentry *);
1217:	static void show_special(struct audit_context *, int *);
277:	static void unroll_tree_refs(struct audit_context *, struct audit_tree_refs *, int);

File kernel/bpf/arraymap.c:
51:	int array_map_alloc_check(union bpf_attr *);
713:	int bpf_fd_array_map_lookup_elem(struct bpf_map *, void *, u32 *);
733:	int bpf_fd_array_map_update_elem(struct bpf_map *, struct file *, void *, void *, u64);
261:	int bpf_percpu_array_copy(struct bpf_map *, void *, void *);
344:	int bpf_percpu_array_update(struct bpf_map *, void *, void *, u64);
552:	static int __bpf_array_map_seq_show(struct seq_file *, void *);
1096:	static void __bpf_event_entry_free(struct callback_head *);
81:	static struct bpf_map *array_map_alloc(union bpf_attr *);
451:	static int array_map_check_btf(const struct bpf_map *, const struct btf *, const struct btf_type *, const struct btf_type *);
383:	static int array_map_delete_elem(struct bpf_map *, void *);
186:	static int array_map_direct_value_addr(const struct bpf_map *, u64 *, u32);
200:	static int array_map_direct_value_meta(const struct bpf_map *, u64, u32 *);
394:	static void array_map_free(struct bpf_map *);
217:	static int array_map_gen_lookup(struct bpf_map *, struct bpf_insn *);
288:	static int array_map_get_next_key(struct bpf_map *, void *, void *);
175:	static void *array_map_lookup_elem(struct bpf_map *, void *);
499:	static bool array_map_meta_equal(const struct bpf_map *, const struct bpf_map *);
483:	static int array_map_mmap(struct bpf_map *, struct vm_area_struct *);
407:	static void array_map_seq_show_elem(struct bpf_map *, void *, struct seq_file *);
307:	static int array_map_update_elem(struct bpf_map *, void *, void *, u64);
1221:	static struct bpf_map *array_of_map_alloc(union bpf_attr *);
1240:	static void array_of_map_free(struct bpf_map *);
1260:	static int array_of_map_gen_lookup(struct bpf_map *, struct bpf_insn *);
1250:	static void *array_of_map_lookup_elem(struct bpf_map *, void *);
533:	static void *bpf_array_map_seq_next(struct seq_file *, void *, loff_t *);
591:	static int bpf_array_map_seq_show(struct seq_file *, void *);
514:	static void *bpf_array_map_seq_start(struct seq_file *, loff_t *);
596:	static void bpf_array_map_seq_stop(struct seq_file *, void *);
623:	static void bpf_iter_fini_array_map(void *);
602:	static int bpf_iter_init_array_map(void *, struct bpf_iter_aux_info *);
1198:	static void cgroup_fd_array_free(struct bpf_map *);
1185:	static void *cgroup_fd_array_get_ptr(struct bpf_map *, struct file *, int);
1192:	static void cgroup_fd_array_put_ptr(void *);
684:	static int fd_array_map_alloc_check(union bpf_attr *);
765:	static int fd_array_map_delete_elem(struct bpf_map *, void *);
707:	static void *fd_array_map_lookup_elem(struct bpf_map *, void *);
250:	static void *percpu_array_map_lookup_elem(struct bpf_map *, void *);
428:	static void percpu_array_map_seq_show_elem(struct bpf_map *, void *, struct seq_file *);
1110:	static void *perf_event_fd_array_get_ptr(struct bpf_map *, struct file *, int);
1160:	static void perf_event_fd_array_map_free(struct bpf_map *);
1136:	static void perf_event_fd_array_put_ptr(void *);
1141:	static void perf_event_fd_array_release(struct bpf_map *, struct file *);
1016:	static struct bpf_map *prog_array_map_alloc(union bpf_attr *);
1008:	static void prog_array_map_clear(struct bpf_map *);
1000:	static void prog_array_map_clear_deferred(struct work_struct *);
1042:	static void prog_array_map_free(struct bpf_map *);
907:	static void prog_array_map_poke_run(struct bpf_map *, u32, struct bpf_prog *, struct bpf_prog *);
856:	static int prog_array_map_poke_track(struct bpf_map *, struct bpf_prog_aux *);
889:	static void prog_array_map_poke_untrack(struct bpf_map *, struct bpf_prog_aux *);
828:	static void prog_array_map_seq_show_elem(struct bpf_map *, void *, struct seq_file *);
791:	static void *prog_fd_array_get_ptr(struct bpf_map *, struct file *, int);
808:	static void prog_fd_array_put_ptr(void *);
813:	static u32 prog_fd_array_sys_lookup_elem(void *);

File kernel/bpf/bpf_iter.c:
623:	struct bpf_prog *bpf_iter_get_info(struct bpf_iter_meta *, bool);
462:	int bpf_iter_link_attach(const union bpf_attr *, struct bpf_prog *);
587:	int bpf_iter_new_fd(struct bpf_link *);
315:	bool bpf_iter_prog_supported(struct bpf_prog *);
272:	int bpf_iter_reg_target(const struct bpf_iter_reg *);
646:	int bpf_iter_run_prog(struct bpf_prog *, void *);
290:	void bpf_iter_unreg_target(const struct bpf_iter_reg *);
457:	bool bpf_link_is_iter(struct bpf_link *);
358:	static void bpf_iter_link_dealloc(struct bpf_link *);
409:	static int bpf_iter_link_fill_link_info(const struct bpf_link *, struct bpf_link_info *);
349:	static void bpf_iter_link_release(struct bpf_link *);
366:	static int bpf_iter_link_replace(struct bpf_link *, struct bpf_prog *, struct bpf_prog *);
393:	static void bpf_iter_link_show_fdinfo(const struct bpf_link *, struct seq_file *);
80:	static ssize_t bpf_seq_read(struct file *, char *, size_t, loff_t *);
232:	static int iter_open(struct inode *, struct file *);
239:	static int iter_release(struct inode *, struct file *);
542:	static int prepare_seq_file(struct file *, struct bpf_iter_link *, const struct bpf_iter_seq_info *);

File kernel/bpf/bpf_local_storage.c:
255:	int bpf_local_storage_alloc(void *, struct bpf_local_storage_map *, struct bpf_local_storage_elem *);
461:	void bpf_local_storage_cache_idx_free(struct bpf_local_storage_cache *, u16);
437:	u16 bpf_local_storage_cache_idx_get(struct bpf_local_storage_cache *);
204:	struct bpf_local_storage_data *bpf_local_storage_lookup(struct bpf_local_storage *, struct bpf_local_storage_map *, bool);
541:	struct bpf_local_storage_map *bpf_local_storage_map_alloc(union bpf_attr *);
522:	int bpf_local_storage_map_alloc_check(union bpf_attr *);
585:	int bpf_local_storage_map_check_btf(const struct bpf_map *, const struct btf *, const struct btf_type *, const struct btf_type *);
469:	void bpf_local_storage_map_free(struct bpf_local_storage_map *);
322:	struct bpf_local_storage_data *bpf_local_storage_update(void *, struct bpf_local_storage_map *, void *, u64);
62:	struct bpf_local_storage_elem *bpf_selem_alloc(struct bpf_local_storage_map *, void *, void *, bool);
182:	void bpf_selem_link_map(struct bpf_local_storage_map *, struct bpf_local_storage_elem *);
158:	void bpf_selem_link_storage_nolock(struct bpf_local_storage *, struct bpf_local_storage_elem *);
193:	void bpf_selem_unlink(struct bpf_local_storage_elem *);
165:	void bpf_selem_unlink_map(struct bpf_local_storage_elem *);
87:	bool bpf_selem_unlink_storage_nolock(struct bpf_local_storage *, struct bpf_local_storage_elem *, bool);
138:	static void __bpf_selem_unlink_storage(struct bpf_local_storage_elem *);

File kernel/bpf/bpf_lru_list.c:
689:	void bpf_lru_destroy(struct bpf_lru *);
646:	int bpf_lru_init(struct bpf_lru *, bool, u32, del_from_htab_func, void *);
494:	struct bpf_lru_node *bpf_lru_pop_free(struct bpf_lru *, u32);
608:	void bpf_lru_populate(struct bpf_lru *, void *, u32, u32, u32);
551:	void bpf_lru_push_free(struct bpf_lru *, struct bpf_lru_node *);
139:	static void __bpf_lru_list_rotate_active(struct bpf_lru *, struct bpf_lru_list *);
166:	static void __bpf_lru_list_rotate_inactive(struct bpf_lru *, struct bpf_lru_list *);
255:	static unsigned int __bpf_lru_list_shrink(struct bpf_lru *, struct bpf_lru_list *, unsigned int, struct list_head *, enum bpf_lru_list_type);
100:	static void __bpf_lru_node_move(struct bpf_lru_list *, struct bpf_lru_node *, enum bpf_lru_list_type);
82:	static void __bpf_lru_node_move_in(struct bpf_lru_list *, struct bpf_lru_node *, enum bpf_lru_list_type);
61:	static void __bpf_lru_node_move_to_free(struct bpf_lru_list *, struct bpf_lru_node *, struct list_head *, enum bpf_lru_list_type);
431:	static struct bpf_lru_node *bpf_common_lru_pop_free(struct bpf_lru *, u32);
502:	static void bpf_common_lru_push_free(struct bpf_lru *, struct bpf_lru_node *);
318:	static void bpf_lru_list_pop_free_to_local(struct bpf_lru *, struct bpf_lru_locallist *);
399:	static struct bpf_lru_node *bpf_percpu_lru_pop_free(struct bpf_lru *, u32);
577:	static void bpf_percpu_lru_populate(struct bpf_lru *, void *, u32, u32, u32);

File kernel/bpf/bpf_struct_ops.c:
216:	const struct bpf_struct_ops *bpf_struct_ops_find(u32);
632:	bool bpf_struct_ops_get(const void *);
99:	void bpf_struct_ops_init(struct btf *, struct bpf_verifier_log *);
241:	int bpf_struct_ops_map_sys_lookup_elem(struct bpf_map *, void *, void *);
641:	void bpf_struct_ops_put(const void *);
551:	static struct bpf_map *bpf_struct_ops_map_alloc(union bpf_attr *);
543:	static int bpf_struct_ops_map_alloc_check(union bpf_attr *);
485:	static int bpf_struct_ops_map_delete_elem(struct bpf_map *, void *);
531:	static void bpf_struct_ops_map_free(struct bpf_map *);
231:	static int bpf_struct_ops_map_get_next_key(struct bpf_map *, void *, void *);
270:	static void *bpf_struct_ops_map_lookup_elem(struct bpf_map *, void *);
275:	static void bpf_struct_ops_map_put_progs(struct bpf_struct_ops_map *);
511:	static void bpf_struct_ops_map_seq_show_elem(struct bpf_map *, void *, struct seq_file *);
314:	static int bpf_struct_ops_map_update_elem(struct bpf_map *, void *, void *, u64);
288:	static int check_zero_holes(const struct btf_type *, void *);

File kernel/bpf/btf.c:
4404:	struct btf *bpf_prog_get_target_btf(const struct bpf_prog *);
5137:	int btf_check_func_arg_match(struct bpf_verifier_env *, int, struct bpf_reg_state *);
5107:	int btf_check_type_match(struct bpf_verifier_log *, const struct bpf_prog *, struct btf *, const struct btf_type *);
4428:	bool btf_ctx_access(int, int, enum bpf_access_type, const struct bpf_prog *, struct bpf_insn_access_aux *);
4924:	int btf_distill_func_proto(struct bpf_verifier_log *, struct btf *, const struct btf_type *, const char *, struct btf_func_model *);
453:	s32 btf_find_by_name_kind(const struct btf *, const char *, u8);
2983:	int btf_find_spin_lock(const struct btf *, const struct btf_type *);
5472:	struct btf *btf_get_by_fd(int);
5526:	int btf_get_fd_by_id(u32);
5494:	int btf_get_info_by_fd(const struct btf *, const union bpf_attr *, union bpf_attr *);
5547:	u32 btf_id(const struct btf *);
5559:	bool btf_id_set_contains(const struct btf_id_set *, u32);
705:	bool btf_member_is_reg_int(const struct btf *, const struct btf_type *, const struct btf_member *, u32, u32);
662:	const char *btf_name_by_offset(const struct btf *, u32);
5441:	int btf_new_fd(const union bpf_attr *);
4343:	struct btf *btf_parse_vmlinux(void);
5234:	int btf_prepare_func_args(struct bpf_verifier_env *, int, struct bpf_reg_state *);
1486:	void btf_put(struct btf *);
1707:	const struct btf_type *btf_resolve_size(const struct btf *, const struct btf_type *, u32 *);
4828:	int btf_struct_access(struct bpf_verifier_log *, const struct btf_type *, int, int, enum bpf_access_type, u32 *);
4869:	bool btf_struct_ids_match(struct bpf_verifier_log *, int, u32, u32);
670:	const struct btf_type *btf_type_by_id(const struct btf *, u32);
1721:	const struct btf_type *btf_type_id_size(const struct btf *, u32 *, u32 *);
417:	bool btf_type_is_void(const struct btf_type *);
500:	const struct btf_type *btf_type_resolve_func_ptr(const struct btf *, u32, u32 *);
488:	const struct btf_type *btf_type_resolve_ptr(const struct btf *, u32, u32 *);
5357:	void btf_type_seq_show(const struct btf *, u32, void *, struct seq_file *);
5343:	int btf_type_seq_show_flags(const struct btf *, u32, void *, struct seq_file *, u64);
472:	const struct btf_type *btf_type_skip_modifiers(const struct btf *, u32, u32 *);
5393:	int btf_type_snprintf_show(const struct btf *, u32, void *, char *, int, u64);
2701:	static void __btf_array_show(const struct btf *, const struct btf_type *, u32, void *, u8, struct btf_show *);
618:	static bool __btf_name_valid(u32, bool, const struct btf *, const struct btf *);
1640:	static const struct btf_type *__btf_resolve_size(const struct btf *, const struct btf_type *, u32 *, const struct btf_type **, u32 *, u32 *, u32 *);
3016:	static void __btf_struct_show(const struct btf *, const struct btf_type *, u32, void *, struct btf_show *, u8);
1224:	static void __btf_verifier_log(struct bpf_verifier_log *, const char *, ...);
1248:	static void __btf_verifier_log_type(struct btf_verifier_env *, const struct btf_type *, bool, const char *, ...);
4900:	static int __get_type_size(u32, const struct btf_type **, struct btf *, struct btf *);
5415:	static void bpf_btf_show_fdinfo(struct seq_file *, struct file *);
1390:	static int btf_add_type(struct btf_verifier_env *, struct btf_type *);
2545:	static int btf_array_check_member(struct btf_verifier_env *, const struct btf_type *, const struct btf_member *, const struct btf_type *);
2574:	static s32 btf_array_check_meta(struct btf_verifier_env *, const struct btf_type *, u32);
2692:	static void btf_array_log(struct btf_verifier_env *, const struct btf_type *);
2627:	static int btf_array_resolve(struct btf_verifier_env *, const struct resolve_vertex *);
2754:	static void btf_array_show(const struct btf *, const struct btf_type *, u32, void *, u8, struct btf_show *);
2056:	static void btf_bitfield_show(void *, u8, u8, struct btf_show *);
3792:	static int btf_check_all_metas(struct btf_verifier_env *);
3889:	static int btf_check_all_types(struct btf_verifier_env *);
4996:	static int btf_check_func_type_match(struct bpf_verifier_log *, struct btf *, const struct btf_type *, struct btf *, const struct btf_type *);
3989:	static int btf_check_sec_info(struct btf_verifier_env *, u32);
3459:	static s32 btf_datasec_check_meta(struct btf_verifier_env *, const struct btf_type *, u32);
3537:	static int btf_datasec_resolve(struct btf_verifier_env *, const struct resolve_vertex *);
3582:	static void btf_datasec_show(const struct btf *, const struct btf_type *, u32, void *, u8, struct btf_show *);
1774:	static int btf_df_check_kflag_member(struct btf_verifier_env *, const struct btf_type *, const struct btf_member *, const struct btf_type *);
1764:	static int btf_df_check_member(struct btf_verifier_env *, const struct btf_type *, const struct btf_member *, const struct btf_type *);
1806:	static int btf_df_resolve(struct btf_verifier_env *, const struct resolve_vertex *);
1813:	static void btf_df_show(const struct btf *, const struct btf_type *, u32, void *, u8, struct btf_show *);
3131:	static int btf_enum_check_kflag_member(struct btf_verifier_env *, const struct btf_type *, const struct btf_member *, const struct btf_type *);
3166:	static s32 btf_enum_check_meta(struct btf_verifier_env *, const struct btf_type *, u32);
3234:	static void btf_enum_show(const struct btf *, const struct btf_type *, u32, void *, u8, struct btf_show *);
1479:	static void btf_free_rcu(struct callback_head *);
3704:	static int btf_func_check(struct btf_verifier_env *, const struct btf_type *);
3361:	static s32 btf_func_check_meta(struct btf_verifier_env *, const struct btf_type *, u32);
3615:	static int btf_func_proto_check(struct btf_verifier_env *, const struct btf_type *);
3274:	static s32 btf_func_proto_check_meta(struct btf_verifier_env *, const struct btf_type *, u32);
3302:	static void btf_func_proto_log(struct btf_verifier_env *, const struct btf_type *);
2504:	static s32 btf_fwd_check_meta(struct btf_verifier_env *, const struct btf_type *, u32);
2530:	static void btf_fwd_type_log(struct btf_verifier_env *, const struct btf_type *);
1787:	static int btf_generic_check_kflag_member(struct btf_verifier_env *, const struct btf_type *, const struct btf_member *, const struct btf_type *);
4231:	static const struct btf_member *btf_get_prog_ctx_type(struct bpf_verifier_log *, struct btf *, const struct btf_type *, enum bpf_prog_type, int);
5552:	static int btf_id_cmp_func(const void *, const void *);
1990:	static void btf_int128_print(struct btf_show *, void *);
1858:	static int btf_int_check_kflag_member(struct btf_verifier_env *, const struct btf_type *, const struct btf_member *, const struct btf_type *);
1820:	static int btf_int_check_member(struct btf_verifier_env *, const struct btf_type *, const struct btf_member *, const struct btf_type *);
1914:	static s32 btf_int_check_meta(struct btf_verifier_env *, const struct btf_type *, u32);
1978:	static void btf_int_log(struct btf_verifier_env *, const struct btf_type *);
2100:	static void btf_int_show(const struct btf *, const struct btf_type *, u32, void *, u8, struct btf_show *);
2204:	static int btf_modifier_check_kflag_member(struct btf_verifier_env *, const struct btf_type *, const struct btf_member *, const struct btf_type *);
2179:	static int btf_modifier_check_member(struct btf_verifier_env *, const struct btf_type *, const struct btf_member *, const struct btf_type *);
2295:	static int btf_modifier_resolve(struct btf_verifier_env *, const struct resolve_vertex *);
2440:	static void btf_modifier_show(const struct btf *, const struct btf_type *, u32, void *, u8, struct btf_show *);
4112:	static struct btf *btf_parse(void *, u32, u32, char *, u32);
4042:	static int btf_parse_hdr(struct btf_verifier_env *);
3950:	static int btf_parse_str_sec(struct btf_verifier_env *);
2229:	static int btf_ptr_check_member(struct btf_verifier_env *, const struct btf_type *, const struct btf_member *, const struct btf_type *);
2383:	static int btf_ptr_resolve(struct btf_verifier_env *, const struct resolve_vertex *);
2462:	static void btf_ptr_show(const struct btf *, const struct btf_type *, u32, void *, u8, struct btf_show *);
2255:	static int btf_ref_type_check_meta(struct btf_verifier_env *, const struct btf_type *, u32);
2480:	static void btf_ref_type_log(struct btf_verifier_env *, const struct btf_type *);
5423:	static int btf_release(struct inode *, struct file *);
3856:	static int btf_resolve(struct btf_verifier_env *, const struct btf_type *, u32);
3981:	static int btf_sec_info_cmp(const void *, const void *);
5337:	static void btf_seq_show(struct btf_show *, const char *, struct __va_list_tag *);
957:	static void btf_show(struct btf_show *, const char *, ...);
1161:	static void btf_show_end_aggr_type(struct btf_show *, const char *);
767:	static const char *btf_show_name(struct btf_show *);
1051:	static void *btf_show_obj_safe(struct btf_show *, const struct btf_type *, void *);
1145:	static void *btf_show_start_aggr_type(struct btf_show *, const struct btf_type *, u32, void *);
5371:	static void btf_snprintf_show(struct btf_show *, const char *, struct __va_list_tag *);
2796:	static int btf_struct_check_member(struct btf_verifier_env *, const struct btf_type *, const struct btf_member *, const struct btf_type *);
2821:	static s32 btf_struct_check_meta(struct btf_verifier_env *, const struct btf_type *, u32);
2973:	static void btf_struct_log(struct btf_verifier_env *, const struct btf_type *);
2902:	static int btf_struct_resolve(struct btf_verifier_env *, const struct resolve_vertex *);
3063:	static void btf_struct_show(const struct btf *, const struct btf_type *, u32, void *, u8, struct btf_show *);
4602:	static int btf_struct_walk(struct bpf_verifier_log *, const struct btf_type *, int, int, u32 *);
682:	static bool btf_type_int_is_regular(const struct btf_type *);
537:	static bool btf_type_needs_resolve(const struct btf_type *, const struct btf_type *);
5325:	static void btf_type_show(const struct btf *, u32, void *, struct btf_show *);
3395:	static s32 btf_var_check_meta(struct btf_verifier_env *, const struct btf_type *, u32);
3443:	static void btf_var_log(struct btf_verifier_env *, const struct btf_type *);
2337:	static int btf_var_resolve(struct btf_verifier_env *, const struct resolve_vertex *);
2453:	static void btf_var_show(const struct btf *, const struct btf_type *, u32, void *, u8, struct btf_show *);
1234:	static void btf_verifier_log(struct btf_verifier_env *, const char *, ...);
1366:	static void btf_verifier_log_hdr(struct btf_verifier_env *, u32);
1293:	static void btf_verifier_log_member(struct btf_verifier_env *, const struct btf_type *, const struct btf_member *, const char *, ...);
1339:	static void btf_verifier_log_vsi(struct btf_verifier_env *, const struct btf_type *, const struct btf_var_secinfo *, const char *, ...);
1494:	static int env_resolve_init(struct btf_verifier_env *);
1568:	static int env_stack_push(struct btf_verifier_env *, const struct btf_type *, u32);
1537:	static bool env_type_is_resolve_sink(const struct btf_type *, const struct btf_verifier_env *, const struct btf_verifier_env *);

File kernel/bpf/cgroup.c:
433:	int __cgroup_bpf_attach(struct cgroup *, struct bpf_prog *, struct bpf_prog *, struct bpf_cgroup_link *, enum bpf_attach_type, u32);
1155:	int __cgroup_bpf_check_dev_permission(short, u32, u32, short, enum cgroup_bpf_attach_type);
681:	int __cgroup_bpf_detach(struct cgroup *, struct bpf_prog *, struct bpf_cgroup_link *, enum bpf_attach_type);
734:	int __cgroup_bpf_query(struct cgroup *, const union bpf_attr *, union bpf_attr *);
1470:	int __cgroup_bpf_run_filter_getsockopt(struct sock *, int, int, char *, int *, int, int);
1376:	int __cgroup_bpf_run_filter_setsockopt(struct sock *, int *, int *, char *, int *, char **);
1070:	int __cgroup_bpf_run_filter_sk(struct sock *, enum cgroup_bpf_attach_type);
1017:	int __cgroup_bpf_run_filter_skb(struct sock *, struct sk_buff *, enum cgroup_bpf_attach_type);
1094:	int __cgroup_bpf_run_filter_sock_addr(struct sock *, struct sockaddr *, enum cgroup_bpf_attach_type, void *);
1142:	int __cgroup_bpf_run_filter_sock_ops(struct sock *, struct bpf_sock_ops_kern *, enum cgroup_bpf_attach_type);
1257:	int __cgroup_bpf_run_filter_sysctl(struct ctl_table_header *, struct ctl_table *, int, char **, size_t *, loff_t *, enum cgroup_bpf_attach_type);
1650:	u64 bpf_sysctl_get_current_value(u64, u64, u64, u64, u64);
1593:	u64 bpf_sysctl_get_name(u64, u64, u64, u64, u64);
1665:	u64 bpf_sysctl_get_new_value(u64, u64, u64, u64, u64);
1685:	u64 bpf_sysctl_set_new_value(u64, u64, u64, u64, u64);
287:	int cgroup_bpf_inherit(struct cgroup *);
934:	int cgroup_bpf_link_attach(const union bpf_attr *, struct bpf_prog *);
25:	void cgroup_bpf_offline(struct cgroup *);
792:	int cgroup_bpf_prog_attach(const union bpf_attr *, enum bpf_prog_type, struct bpf_prog *);
821:	int cgroup_bpf_prog_detach(const union bpf_attr *, enum bpf_prog_type);
978:	int cgroup_bpf_prog_query(const union bpf_attr *, union bpf_attr *);
874:	static void bpf_cgroup_link_dealloc(struct bpf_link *);
882:	static int bpf_cgroup_link_detach(struct bpf_link *);
908:	static int bpf_cgroup_link_fill_link_info(const struct bpf_link *, struct bpf_link_info *);
843:	static void bpf_cgroup_link_release(struct bpf_link *);
889:	static void bpf_cgroup_link_show_fdinfo(const struct bpf_link *, struct seq_file *);
31:	static void bpf_cgroup_storages_free(struct bpf_cgroup_storage **);
1915:	static u32 cg_sockopt_convert_ctx_access(enum bpf_access_type, const struct bpf_insn *, struct bpf_insn *, struct bpf_prog *, u32 *);
1830:	static const struct bpf_func_proto *cg_sockopt_func_proto(enum bpf_func_id, const struct bpf_prog *);
1962:	static int cg_sockopt_get_prologue(struct bpf_insn *, bool, const struct bpf_prog *);
1848:	static bool cg_sockopt_is_valid_access(int, int, enum bpf_access_type, const struct bpf_prog *, struct bpf_insn_access_aux *);
108:	static void cgroup_bpf_release(struct work_struct *);
158:	static void cgroup_bpf_release_fn(struct percpu_ref *);
614:	static int cgroup_bpf_replace(struct bpf_link *, struct bpf_prog *, struct bpf_prog *);
1193:	static const struct bpf_func_proto *cgroup_dev_func_proto(enum bpf_func_id, const struct bpf_prog *);
1198:	static bool cgroup_dev_is_valid_access(int, int, enum bpf_access_type, const struct bpf_prog *, struct bpf_insn_access_aux *);
227:	static int compute_effective_progs(struct cgroup *, enum cgroup_bpf_attach_type, struct bpf_prog_array **);
1624:	static int copy_sysctl_value(char *, size_t, char *, size_t);
529:	static void replace_effective_prog(struct cgroup *, enum cgroup_bpf_attach_type, struct bpf_cgroup_link *);
1331:	static int sockopt_alloc_buf(struct bpf_sockopt_kern *, int, struct bpf_sockopt_buf *);
1758:	static u32 sysctl_convert_ctx_access(enum bpf_access_type, const struct bpf_insn *, struct bpf_insn *, struct bpf_prog *, u32 *);
1562:	static ssize_t sysctl_cpy_dir(const struct ctl_dir *, char **, size_t *);
1711:	static const struct bpf_func_proto *sysctl_func_proto(enum bpf_func_id, const struct bpf_prog *);
1731:	static bool sysctl_is_valid_access(int, int, enum bpf_access_type, const struct bpf_prog *, struct bpf_insn_access_aux *);
330:	static int update_effective_progs(struct cgroup *, enum cgroup_bpf_attach_type);

File kernel/bpf/core.c:
682:	const char *__bpf_address_lookup(unsigned long, unsigned long *, unsigned long *, char *);
1197:	u64 __bpf_call_base(u64, u64, u64, u64, u64);
2160:	void __bpf_free_used_maps(struct bpf_prog_aux *, struct bpf_map **, u32);
257:	void __bpf_prog_free(struct bpf_prog *);
2343:	int bpf_arch_text_poke(void *, enum bpf_text_poke_type, void *, void *);
2287:	u64 bpf_event_output(struct bpf_map *, u64, void *, u64, void *, u64, bpf_ctx_copy_t);
745:	int bpf_get_kallsym(unsigned int, unsigned long *, char *, char *);
2249:	u64 bpf_get_raw_cpu_id(u64, u64, u64, u64, u64);
2281:	const struct bpf_func_proto *bpf_get_trace_printk_proto(void);
2320:	bool bpf_helper_changes_pkt_data(void *);
2308:	struct bpf_prog *bpf_int_jit_compile(struct bpf_prog *);
65:	void *bpf_internal_load_pointer_neg_helper(const struct sk_buff *, int, unsigned int);
773:	int bpf_jit_add_poke_descriptor(struct bpf_prog *, struct bpf_jit_poke_descriptor *);
850:	void *bpf_jit_alloc_exec(unsigned long);
813:	u64 bpf_jit_alloc_exec_limit(void);
861:	struct bpf_binary_header *bpf_jit_binary_alloc(unsigned int, u8 **, unsigned int, bpf_jit_fill_hole_t);
900:	void bpf_jit_binary_free(struct bpf_binary_header *);
1135:	struct bpf_prog *bpf_jit_blind_constants(struct bpf_prog *);
832:	int bpf_jit_charge_modmem(u32);
2316:	void bpf_jit_compile(struct bpf_prog *);
912:	void bpf_jit_free(struct bpf_prog *);
855:	void bpf_jit_free_exec(void *);
925:	int bpf_jit_get_func_addr(const struct bpf_prog *, const struct bpf_insn *, bool, u64 *, bool *);
2329:	bool bpf_jit_needs_zext(void);
1126:	void bpf_jit_prog_release_other(struct bpf_prog *, struct bpf_prog *);
845:	void bpf_jit_uncharge_modmem(u32);
617:	void bpf_ksym_add(struct bpf_ksym *);
635:	void bpf_ksym_del(struct bpf_ksym *);
1340:	bool bpf_opcode_in_insntable(u8);
438:	struct bpf_prog *bpf_patch_insn_single(struct bpf_prog *, u32, const struct bpf_insn *, u32);
109:	struct bpf_prog *bpf_prog_alloc(unsigned int, gfp_t);
136:	int bpf_prog_alloc_jited_linfo(struct bpf_prog *);
80:	struct bpf_prog *bpf_prog_alloc_no_stats(unsigned int, gfp_t);
1924:	struct bpf_prog_array *bpf_prog_array_alloc(u32, gfp_t);
1777:	bool bpf_prog_array_compatible(struct bpf_array *, const struct bpf_prog *);
2076:	int bpf_prog_array_copy(struct bpf_prog_array *, struct bpf_prog *, struct bpf_prog *, struct bpf_prog_array **);
2140:	int bpf_prog_array_copy_info(struct bpf_prog_array *, u32 *, u32, u32 *);
1983:	int bpf_prog_array_copy_to_user(struct bpf_prog_array *, __u32 *, u32);
2009:	void bpf_prog_array_delete_safe(struct bpf_prog_array *, struct bpf_prog *);
2036:	int bpf_prog_array_delete_safe_at(struct bpf_prog_array *, int);
1935:	void bpf_prog_array_free(struct bpf_prog_array *);
1953:	bool bpf_prog_array_is_empty(struct bpf_prog_array *);
1942:	int bpf_prog_array_length(struct bpf_prog_array *);
2056:	int bpf_prog_array_update_at(struct bpf_prog_array *, int, struct bpf_prog *);
269:	int bpf_prog_calc_tag(struct bpf_prog *);
186:	void bpf_prog_fill_jited_linfo(struct bpf_prog *, const u32 *);
2212:	void bpf_prog_free(struct bpf_prog *);
150:	void bpf_prog_free_jited_linfo(struct bpf_prog *);
215:	void bpf_prog_free_linfo(struct bpf_prog *);
156:	void bpf_prog_free_unused_jited_linfo(struct bpf_prog *);
653:	void bpf_prog_kallsyms_add(struct bpf_prog *);
666:	void bpf_prog_kallsyms_del(struct bpf_prog *);
519:	void bpf_prog_kallsyms_del_all(struct bpf_prog *);
221:	struct bpf_prog *bpf_prog_realloc(struct bpf_prog *, unsigned int, gfp_t);
1846:	struct bpf_prog *bpf_prog_select_runtime(struct bpf_prog *, int *);
499:	int bpf_remove_insns(struct bpf_prog *, u32, u32);
2226:	void bpf_user_rnd_init_once(void);
2231:	u64 bpf_user_rnd_u32(u64, u64, u64, u64, u64);
707:	bool is_bpf_text_address(unsigned long);
727:	const struct exception_table_entry *search_bpf_extables(unsigned long);
2337:	int skb_copy_bits(const struct sk_buff *, int, void *, int);
1766:	static unsigned int __bpf_prog_ret0_warn(const void *, const struct bpf_insn *);
1897:	static unsigned int __bpf_prog_ret1(const void *, const struct bpf_insn *);
378:	static int bpf_adj_branches(struct bpf_prog *, u32, s32, s32, const bool);
959:	static int bpf_jit_blind_insn(const struct bpf_insn *, const struct bpf_insn *, struct bpf_insn *, bool);
822:	static int bpf_jit_charge_init(void);
674:	static struct bpf_ksym *bpf_ksym_find(unsigned long);
2180:	static void bpf_prog_free_deferred(struct work_struct *);
546:	static void bpf_prog_ksym_set_name(struct bpf_prog *);

File kernel/bpf/cpumap.c:
746:	void __cpu_map_flush(void);
619:	struct bpf_cpu_map_entry *__cpu_map_lookup_elem(struct bpf_map *, u32);
730:	int cpu_map_enqueue(struct bpf_cpu_map_entry *, struct xdp_buff *, struct net_device *);
389:	bool cpu_map_prog_allowed(struct bpf_map *);
415:	static struct bpf_cpu_map_entry *__cpu_map_entry_alloc(struct bpf_cpumap_val *, u32, int);
485:	static void __cpu_map_entry_free(struct callback_head *);
520:	static void __cpu_map_entry_replace(u32, struct bpf_cpu_map_entry *, struct bpf_cpu_map *, struct bpf_cpu_map *);
201:	static void __cpu_map_ring_cleanup(struct ptr_ring *);
670:	static void bq_flush_to_queue(struct xdp_bulk_queue *);
82:	static struct bpf_map *cpu_map_alloc(union bpf_attr *);
228:	static int cpu_map_bpf_prog_run_xdp(struct bpf_cpu_map_entry *, void **, int, struct xdp_cpumap_stats *);
158:	static struct sk_buff *cpu_map_build_skb(struct xdp_frame *, struct sk_buff *);
533:	static int cpu_map_delete_elem(struct bpf_map *, void *);
585:	static void cpu_map_free(struct bpf_map *);
639:	static int cpu_map_get_next_key(struct bpf_map *, void *, void *);
759:	static int cpu_map_init(void);
299:	static int cpu_map_kthread_run(void *);
143:	static void cpu_map_kthread_stop(struct work_struct *);
631:	static void *cpu_map_lookup_elem(struct bpf_map *, void *);
546:	static int cpu_map_update_elem(struct bpf_map *, void *, void *, u64);
215:	static void put_cpu_map_entry(struct bpf_cpu_map_entry *);

File kernel/bpf/devmap.c:
396:	void __dev_flush(void);
275:	struct bpf_dtab_netdev *__dev_map_hash_lookup_elem(struct bpf_map *, u32);
409:	struct bpf_dtab_netdev *__dev_map_lookup_elem(struct bpf_map *, u32);
334:	bool dev_map_can_have_prog(struct bpf_map *);
501:	int dev_map_enqueue(struct bpf_dtab_netdev *, struct xdp_buff *, struct net_device *);
514:	int dev_map_generic_redirect(struct bpf_dtab_netdev *, struct sk_buff *, struct bpf_prog *);
495:	int dev_xdp_enqueue(struct net_device *, struct xdp_buff *, struct net_device *);
597:	static struct bpf_dtab_netdev *__dev_map_alloc_node(struct net *, struct bpf_dtab *, struct bpf_devmap_val *, unsigned int);
542:	static void __dev_map_entry_free(struct callback_head *);
691:	static int __dev_map_hash_update_elem(struct net *, struct bpf_map *, void *, void *, u64);
424:	static void bq_enqueue(struct net_device *, struct xdp_frame *, struct net_device *);
344:	static void bq_xmit_all(struct xdp_dev_bulk_queue *, u32);
170:	static struct bpf_map *dev_map_alloc(union bpf_attr *);
553:	static int dev_map_delete_elem(struct bpf_map *, void *);
195:	static void dev_map_free(struct bpf_map *);
258:	static int dev_map_get_next_key(struct bpf_map *, void *, void *);
575:	static int dev_map_hash_delete_elem(struct bpf_map *, void *);
289:	static int dev_map_hash_get_next_key(struct bpf_map *, void *, void *);
535:	static void *dev_map_hash_lookup_elem(struct bpf_map *, void *);
779:	static void dev_map_hash_remove_netdev(struct bpf_dtab *, struct net_device *);
744:	static int dev_map_hash_update_elem(struct bpf_map *, void *, void *, u64);
862:	static int dev_map_init(void);
109:	static int dev_map_init_map(struct bpf_dtab *, union bpf_attr *);
528:	static void *dev_map_lookup_elem(struct bpf_map *, void *);
805:	static int dev_map_notification(struct notifier_block *, ulong, void *);
467:	static struct xdp_buff *dev_map_run_prog(struct net_device *, struct xdp_buff *, struct bpf_prog *);
684:	static int dev_map_update_elem(struct bpf_map *, void *, void *, u64);

File kernel/bpf/disasm.c:
47:	const char *func_id_name(int);
117:	void print_bpf_insn(const struct bpf_insn_cbs *, const struct bpf_insn *, bool);
16:	static const char *__func_get_name(const struct bpf_insn_cbs *, const struct bpf_insn *, char *, size_t);

File kernel/bpf/dispatcher.c:
88:	int arch_prepare_bpf_dispatcher(void *, s64 *, int);
132:	void bpf_dispatcher_change_prog(struct bpf_dispatcher *, struct bpf_prog *, struct bpf_prog *);
93:	static int bpf_dispatcher_prepare(struct bpf_dispatcher *, void *);

File kernel/bpf/hashtab.c:
2032:	int bpf_fd_htab_map_lookup_elem(struct bpf_map *, void *, u32 *);
2052:	int bpf_fd_htab_map_update_elem(struct bpf_map *, struct file *, void *, void *, u64);
1890:	int bpf_percpu_hash_copy(struct bpf_map *, void *, void *);
1922:	int bpf_percpu_hash_update(struct bpf_map *, void *, void *, u64);
1734:	static int __bpf_hash_map_seq_show(struct seq_file *, struct htab_elem *);
1161:	static int __htab_lru_percpu_map_update_elem(struct bpf_map *, void *, void *, u64, bool);
1366:	static int __htab_map_lookup_and_delete_batch(struct bpf_map *, const union bpf_attr *, union bpf_attr *, bool, bool, bool);
574:	static void *__htab_map_lookup_elem(struct bpf_map *, void *);
1109:	static int __htab_percpu_map_update_elem(struct bpf_map *, void *, void *, u64, bool);
856:	static struct htab_elem *alloc_htab_elem(struct bpf_htab *, void *, void *, u32, u32, bool, bool, struct htab_elem *);
1656:	static struct htab_elem *bpf_hash_map_seq_find_next(struct bpf_iter_seq_hash_map_info *, struct htab_elem *);
1725:	static void *bpf_hash_map_seq_next(struct seq_file *, void *, loff_t *);
1773:	static int bpf_hash_map_seq_show(struct seq_file *, void *);
1711:	static void *bpf_hash_map_seq_start(struct seq_file *, loff_t *);
1778:	static void bpf_hash_map_seq_stop(struct seq_file *, void *);
1809:	static void bpf_iter_fini_hash_map(void *);
1786:	static int bpf_iter_init_hash_map(void *, struct bpf_iter_aux_info *);
2003:	static int fd_htab_map_alloc_check(union bpf_attr *);
793:	static void free_htab_elem(struct bpf_htab *, struct htab_elem *);
774:	static void htab_elem_free_rcu(struct callback_head *);
205:	static void htab_free_elems(struct bpf_htab *);
1271:	static int htab_lru_map_delete_elem(struct bpf_map *, void *);
682:	static bool htab_lru_map_delete_node(void *, struct bpf_lru_node *);
654:	static int htab_lru_map_gen_lookup(struct bpf_map *, struct bpf_insn *);
1639:	static int htab_lru_map_lookup_and_delete_batch(struct bpf_map *, const union bpf_attr *, union bpf_attr *);
1631:	static int htab_lru_map_lookup_batch(struct bpf_map *, const union bpf_attr *, union bpf_attr *);
644:	static void *htab_lru_map_lookup_elem(struct bpf_map *, void *);
649:	static void *htab_lru_map_lookup_elem_sys(struct bpf_map *, void *);
1046:	static int htab_lru_map_update_elem(struct bpf_map *, void *, void *, u64);
1622:	static int htab_lru_percpu_map_lookup_and_delete_batch(struct bpf_map *, const union bpf_attr *, union bpf_attr *);
1613:	static int htab_lru_percpu_map_lookup_batch(struct bpf_map *, const union bpf_attr *, union bpf_attr *);
1878:	static void *htab_lru_percpu_map_lookup_elem(struct bpf_map *, void *);
1231:	static int htab_lru_percpu_map_update_elem(struct bpf_map *, void *, void *, u64);
411:	static struct bpf_map *htab_map_alloc(union bpf_attr *);
342:	static int htab_map_alloc_check(union bpf_attr *);
1239:	static int htab_map_delete_elem(struct bpf_map *, void *);
1321:	static void htab_map_free(struct bpf_map *);
615:	static int htab_map_gen_lookup(struct bpf_map *, struct bpf_insn *);
709:	static int htab_map_get_next_key(struct bpf_map *, void *, void *);
1604:	static int htab_map_lookup_and_delete_batch(struct bpf_map *, const union bpf_attr *, union bpf_attr *);
1596:	static int htab_map_lookup_batch(struct bpf_map *, const union bpf_attr *, union bpf_attr *);
594:	static void *htab_map_lookup_elem(struct bpf_map *, void *);
1344:	static void htab_map_seq_show_elem(struct bpf_map *, void *, struct seq_file *);
955:	static int htab_map_update_elem(struct bpf_map *, void *, void *, u64);
2070:	static struct bpf_map *htab_of_map_alloc(union bpf_attr *);
2117:	static void htab_of_map_free(struct bpf_map *);
2099:	static int htab_of_map_gen_lookup(struct bpf_map *, struct bpf_insn *);
2089:	static void *htab_of_map_lookup_elem(struct bpf_map *, void *);
1587:	static int htab_percpu_map_lookup_and_delete_batch(struct bpf_map *, const union bpf_attr *, union bpf_attr *);
1579:	static int htab_percpu_map_lookup_batch(struct bpf_map *, const union bpf_attr *, union bpf_attr *);
1868:	static void *htab_percpu_map_lookup_elem(struct bpf_map *, void *);
1940:	static void htab_percpu_map_seq_show_elem(struct bpf_map *, void *, struct seq_file *);
1225:	static int htab_percpu_map_update_elem(struct bpf_map *, void *, void *, u64);
534:	static struct htab_elem *lookup_elem_raw(struct hlist_nulls_head *, u32, void *, u32);
551:	static struct htab_elem *lookup_nulls_elem_raw(struct hlist_nulls_head *, u32, void *, u32, u32);
806:	static void pcpu_copy_value(void *, void *, bool, struct bpf_htab *, struct bpf_htab *);
824:	static void pcpu_init_value(void *, void *, bool, struct bpf_htab *, struct bpf_htab *);
250:	static int prealloc_init(struct bpf_htab *);
235:	static struct htab_elem *prealloc_lru_pop(struct bpf_htab *, void *, u32);

File kernel/bpf/helpers.c:
663:	const struct bpf_func_proto *bpf_base_func_proto(enum bpf_func_id);
606:	u64 bpf_copy_from_user(u64, u64, u64, u64, u64);
586:	u64 bpf_event_output_data(u64, u64, u64, u64, u64);
356:	u64 bpf_get_current_ancestor_cgroup_id(u64, u64, u64, u64, u64);
343:	u64 bpf_get_current_cgroup_id(u64, u64, u64, u64, u64);
207:	u64 bpf_get_current_comm(u64, u64, u64, u64, u64);
171:	u64 bpf_get_current_pid_tgid(u64, u64, u64, u64, u64);
187:	u64 bpf_get_current_uid_gid(u64, u64, u64, u64, u64);
376:	u64 bpf_get_local_storage(u64, u64, u64, u64, u64);
537:	u64 bpf_get_ns_current_pid_tgid(u64, u64, u64, u64, u64);
136:	u64 bpf_get_numa_node_id(u64, u64, u64, u64, u64);
125:	u64 bpf_get_smp_processor_id(u64, u64, u64, u64, u64);
331:	u64 bpf_jiffies64(u64, u64, u64, u64, u64);
159:	u64 bpf_ktime_get_boot_ns(u64, u64, u64, u64, u64);
147:	u64 bpf_ktime_get_ns(u64, u64, u64, u64, u64);
63:	u64 bpf_map_delete_elem(u64, u64, u64, u64, u64);
30:	u64 bpf_map_lookup_elem(u64, u64, u64, u64, u64);
106:	u64 bpf_map_peek_elem(u64, u64, u64, u64, u64);
93:	u64 bpf_map_pop_elem(u64, u64, u64, u64, u64);
78:	u64 bpf_map_push_elem(u64, u64, u64, u64, u64);
45:	u64 bpf_map_update_elem(u64, u64, u64, u64, u64);
628:	u64 bpf_per_cpu_ptr(u64, u64, u64, u64, u64);
281:	u64 bpf_spin_lock(u64, u64, u64, u64, u64);
298:	u64 bpf_spin_unlock(u64, u64, u64, u64, u64);
483:	u64 bpf_strtol(u64, u64, u64, u64, u64);
508:	u64 bpf_strtoul(u64, u64, u64, u64, u64);
644:	u64 bpf_this_cpu_ptr(u64, u64, u64, u64, u64);
315:	void copy_map_value_locked(struct bpf_map *, void *, void *, bool);
410:	static int __bpf_strtoull(const char *, size_t, u64, unsigned long long *, bool *);

File kernel/bpf/inode.c:
529:	int bpf_obj_get_user(const char *, int);
480:	int bpf_obj_pin_user(u32, const char *);
585:	struct bpf_prog *bpf_prog_get_type_path(const char *, enum bpf_prog_type);
52:	static void bpf_any_put(void *, enum bpf_type);
751:	static int bpf_fill_super(struct super_block *, struct fs_context *);
777:	static void bpf_free_fc(struct fs_context *);
612:	static void bpf_free_inode(struct inode *);
101:	static struct inode *bpf_get_inode(struct super_block *, const struct inode *, umode_t);
772:	static int bpf_get_tree(struct fs_context *);
814:	static int bpf_init(void);
791:	static int bpf_init_fs_context(struct fs_context *);
417:	static int bpf_iter_link_pin_kernel(struct dentry *, const char *, struct bpf_link *);
372:	static struct dentry *bpf_lookup(struct inode *, struct dentry *, unsigned int);
155:	static int bpf_mkdir(struct inode *, struct dentry *, umode_t);
362:	static int bpf_mklink(struct dentry *, umode_t, void *);
353:	static int bpf_mkmap(struct dentry *, umode_t, void *);
330:	static int bpf_mkobj_ops(struct dentry *, umode_t, void *, const struct inode_operations *, const struct file_operations *);
347:	static int bpf_mkprog(struct dentry *, umode_t, void *);
497:	static void *bpf_obj_do_get(const char *, enum bpf_type *, int);
643:	static int bpf_parse_param(struct fs_context *, struct fs_parameter *);
603:	static int bpf_show_options(struct seq_file *, struct dentry *);
384:	static int bpf_symlink(struct inode *, struct dentry *, const char *);
273:	static int bpffs_map_open(struct inode *, struct file *);
296:	static int bpffs_map_release(struct inode *, struct file *);
321:	static int bpffs_obj_open(struct inode *, struct file *);
196:	static struct map_iter *map_iter_alloc(struct bpf_map *);
215:	static void *map_seq_next(struct seq_file *, void *, loff_t *);
251:	static int map_seq_show(struct seq_file *, void *);
239:	static void *map_seq_start(struct seq_file *, loff_t *);
247:	static void map_seq_stop(struct seq_file *, void *);
699:	static int populate_bpffs(struct dentry *);

File kernel/bpf/local_storage.c:
494:	struct bpf_cgroup_storage *bpf_cgroup_storage_alloc(struct bpf_prog *, enum bpf_cgroup_storage_type);
465:	int bpf_cgroup_storage_assign(struct bpf_prog_aux *, struct bpf_map *);
558:	void bpf_cgroup_storage_free(struct bpf_cgroup_storage *);
579:	void bpf_cgroup_storage_link(struct bpf_cgroup_storage *, struct cgroup *, enum bpf_attach_type);
600:	void bpf_cgroup_storage_unlink(struct bpf_cgroup_storage *);
181:	int bpf_percpu_cgroup_storage_copy(struct bpf_map *, void *, void *);
210:	int bpf_percpu_cgroup_storage_update(struct bpf_map *, void *, void *, u64);
65:	struct bpf_cgroup_storage *cgroup_storage_lookup(struct bpf_cgroup_storage_map *, void *, bool);
477:	static size_t bpf_cgroup_storage_calculate_size(u32 *, struct bpf_map *, struct bpf_map *);
358:	static int cgroup_storage_check_btf(const struct bpf_map *, const struct btf *, const struct btf_type *, const struct btf_type *);
353:	static int cgroup_storage_delete_elem(struct bpf_map *, void *);
244:	static int cgroup_storage_get_next_key(struct bpf_map *, void *, void *);
130:	static void *cgroup_storage_lookup_elem(struct bpf_map *, void *);
284:	static struct bpf_map *cgroup_storage_map_alloc(union bpf_attr *);
332:	static void cgroup_storage_map_free(struct bpf_map *);
416:	static void cgroup_storage_seq_show_elem(struct bpf_map *, void *, struct seq_file *);
142:	static int cgroup_storage_update_elem(struct bpf_map *, void *, void *, u64);
549:	static void free_percpu_cgroup_storage_rcu(struct callback_head *);
540:	static void free_shared_cgroup_storage_rcu(struct callback_head *);

File kernel/bpf/lpm_trie.c:
164:	static size_t longest_prefix_match(const struct lpm_trie_node *, const struct bpf_lpm_trie_key *, const struct lpm_trie *, const struct lpm_trie *);
276:	static struct lpm_trie_node *lpm_trie_node_alloc(const struct lpm_trie *, const void *);
540:	static struct bpf_map *trie_alloc(union bpf_attr *);
723:	static int trie_check_btf(const struct bpf_map *, const struct btf *, const struct btf_type *, const struct btf_type *);
431:	static int trie_delete_elem(struct bpf_map *, void *);
586:	static void trie_free(struct bpf_map *);
625:	static int trie_get_next_key(struct bpf_map *, void *, void *);
227:	static void *trie_lookup_elem(struct bpf_map *, void *);
300:	static int trie_update_elem(struct bpf_map *, void *, void *, u64);

File kernel/bpf/map_in_map.c:
81:	void *bpf_map_fd_get_ptr(struct bpf_map *, struct file *, int);
103:	void bpf_map_fd_put_ptr(void *);
111:	u32 bpf_map_fd_sys_lookup_elem(void *);
9:	struct bpf_map *bpf_map_meta_alloc(int);
71:	bool bpf_map_meta_equal(const struct bpf_map *, const struct bpf_map *);
66:	void bpf_map_meta_free(struct bpf_map *);

File kernel/bpf/map_iter.c:
42:	int bpf_iter_bpf_map(struct bpf_iter_meta *, struct bpf_map *);
165:	int bpf_iter_bpf_map_elem(struct bpf_iter_meta *, struct bpf_map *, void *, void *);
158:	int bpf_iter_map_fill_link_info(const struct bpf_iter_aux_info *, struct bpf_link_info *);
152:	void bpf_iter_map_show_fdinfo(const struct bpf_iter_aux_info *, struct seq_file *);
101:	static int bpf_iter_attach_map(struct bpf_prog *, union bpf_iter_link_info *, struct bpf_iter_aux_info *);
147:	static void bpf_iter_detach_map(struct bpf_iter_aux_info *);
183:	static int bpf_map_iter_init(void);
27:	static void *bpf_map_seq_next(struct seq_file *, void *, loff_t *);
61:	static int bpf_map_seq_show(struct seq_file *, void *);
13:	static void *bpf_map_seq_start(struct seq_file *, loff_t *);
66:	static void bpf_map_seq_stop(struct seq_file *, void *);

File kernel/bpf/net_namespace.c:
476:	int netns_bpf_link_create(const union bpf_attr *, struct bpf_prog *);
296:	int netns_bpf_prog_attach(const union bpf_attr *, struct bpf_prog *);
382:	int netns_bpf_prog_detach(const union bpf_attr *, enum bpf_prog_type);
270:	int netns_bpf_prog_query(const union bpf_attr *, union bpf_attr *);
155:	static void bpf_netns_link_dealloc(struct bpf_link *);
149:	static int bpf_netns_link_detach(struct bpf_link *);
203:	static int bpf_netns_link_fill_info(const struct bpf_link *, struct bpf_link_info *);
101:	static void bpf_netns_link_release(struct bpf_link *);
222:	static void bpf_netns_link_show_fdinfo(const struct bpf_link *, struct seq_file *);
163:	static int bpf_netns_link_update_prog(struct bpf_link *, struct bpf_prog *, struct bpf_prog *);
561:	static int netns_bpf_init(void);
528:	static int netns_bpf_pernet_init(struct net *);
538:	static void netns_bpf_pernet_pre_exit(struct net *);

File kernel/bpf/offload.c:
465:	int bpf_map_offload_delete_elem(struct bpf_map *, void *);
478:	int bpf_map_offload_get_next_key(struct bpf_map *, void *, void *);
521:	int bpf_map_offload_info_fill(struct bpf_map_info *, struct bpf_map *);
434:	int bpf_map_offload_lookup_elem(struct bpf_map *, void *, void *);
362:	struct bpf_map *bpf_map_offload_map_alloc(union bpf_attr *);
420:	void bpf_map_offload_map_free(struct bpf_map *);
447:	int bpf_map_offload_update_elem(struct bpf_map *, void *, void *, u64);
673:	struct bpf_offload_dev *bpf_offload_dev_create(const struct bpf_prog_offload_ops *, void *);
701:	void bpf_offload_dev_destroy(struct bpf_offload_dev *);
567:	bool bpf_offload_dev_match(struct bpf_prog *, struct net_device *);
595:	int bpf_offload_dev_netdev_register(struct bpf_offload_dev *, struct net_device *);
628:	void bpf_offload_dev_netdev_unregister(struct bpf_offload_dev *, struct net_device *);
708:	void *bpf_offload_dev_priv(struct bpf_offload_dev *);
579:	bool bpf_offload_prog_map_match(struct bpf_prog *, struct bpf_map *);
256:	int bpf_prog_offload_compile(struct bpf_prog *);
227:	void bpf_prog_offload_destroy(struct bpf_prog *);
159:	int bpf_prog_offload_finalize(struct bpf_verifier_env *);
294:	int bpf_prog_offload_info_fill(struct bpf_prog_info *, struct bpf_prog *);
80:	int bpf_prog_offload_init(struct bpf_prog *, union bpf_attr *);
197:	void bpf_prog_offload_remove_insns(struct bpf_verifier_env *, u32, u32);
178:	void bpf_prog_offload_replace_insn(struct bpf_verifier_env *, u32, struct bpf_insn *);
127:	int bpf_prog_offload_verifier_prep(struct bpf_prog *);
143:	int bpf_prog_offload_verify_insn(struct bpf_verifier_env *, int, int);
411:	static void __bpf_map_offload_destroy(struct bpf_offloaded_map *);
546:	static bool __bpf_offload_dev_match(struct bpf_prog *, struct net_device *);
212:	static void __bpf_prog_offload_destroy(struct bpf_prog *);
496:	static struct ns_common *bpf_map_offload_info_fill_ns(void *);
346:	static int bpf_map_offload_ndo(struct bpf_offloaded_map *, enum bpf_netdev_command);
71:	static struct bpf_offload_netdev *bpf_offload_find_netdev(struct net_device *);
268:	static struct ns_common *bpf_prog_offload_info_fill_ns(void *);
249:	static unsigned int bpf_prog_warn_on_exec(const void *, const struct bpf_insn *);

File kernel/bpf/percpu_freelist.c:
193:	struct pcpu_freelist_node *__pcpu_freelist_pop(struct pcpu_freelist *);
82:	void __pcpu_freelist_push(struct pcpu_freelist *, struct pcpu_freelist_node *);
25:	void pcpu_freelist_destroy(struct pcpu_freelist *);
6:	int pcpu_freelist_init(struct pcpu_freelist *);
200:	struct pcpu_freelist_node *pcpu_freelist_pop(struct pcpu_freelist *);
101:	void pcpu_freelist_populate(struct pcpu_freelist *, void *, u32, u32);
91:	void pcpu_freelist_push(struct pcpu_freelist *, struct pcpu_freelist_node *);
124:	static struct pcpu_freelist_node *___pcpu_freelist_pop(struct pcpu_freelist *);
158:	static struct pcpu_freelist_node *___pcpu_freelist_pop_nmi(struct pcpu_freelist *);

File kernel/bpf/prog_iter.c:
42:	int bpf_iter_bpf_prog(struct bpf_iter_meta *, struct bpf_prog *);
101:	static int bpf_prog_iter_init(void);
27:	static void *bpf_prog_seq_next(struct seq_file *, void *, loff_t *);
61:	static int bpf_prog_seq_show(struct seq_file *, void *);
13:	static void *bpf_prog_seq_start(struct seq_file *, loff_t *);
66:	static void bpf_prog_seq_stop(struct seq_file *, void *);

File kernel/bpf/queue_stack_maps.c:
107:	static int __queue_map_get(struct bpf_map *, void *, bool);
136:	static int __stack_map_get(struct bpf_map *, void *, bool);
168:	static int queue_map_peek_elem(struct bpf_map *, void *);
180:	static int queue_map_pop_elem(struct bpf_map *, void *);
67:	static struct bpf_map *queue_stack_map_alloc(union bpf_attr *);
46:	static int queue_stack_map_alloc_check(union bpf_attr *);
246:	static int queue_stack_map_delete_elem(struct bpf_map *, void *);
100:	static void queue_stack_map_free(struct bpf_map *);
252:	static int queue_stack_map_get_next_key(struct bpf_map *, void *, void *);
233:	static void *queue_stack_map_lookup_elem(struct bpf_map *, void *);
192:	static int queue_stack_map_push_elem(struct bpf_map *, void *, u64);
239:	static int queue_stack_map_update_elem(struct bpf_map *, void *, void *, u64);
174:	static int stack_map_peek_elem(struct bpf_map *, void *);
186:	static int stack_map_pop_elem(struct bpf_map *, void *);

File kernel/bpf/reuseport_array.c:
182:	int bpf_fd_reuseport_array_lookup_elem(struct bpf_map *, void *, void *);
249:	int bpf_fd_reuseport_array_update_elem(struct bpf_map *, void *, void *, u64);
21:	void bpf_sk_reuseport_detach(struct sock *);
151:	static struct bpf_map *reuseport_array_alloc(union bpf_attr *);
43:	static int reuseport_array_alloc_check(union bpf_attr *);
64:	static int reuseport_array_delete_elem(struct bpf_map *, void *);
96:	static void reuseport_array_free(struct bpf_map *);
333:	static int reuseport_array_get_next_key(struct bpf_map *, void *, void *);
52:	static void *reuseport_array_lookup_elem(struct bpf_map *, void *);
205:	static int reuseport_array_update_check(const struct sock *, const struct sock *, const struct sock_reuseport *, u32, const struct reuseport_array *);

File kernel/bpf/ringbuf.c:
430:	u64 bpf_ringbuf_discard(u64, u64, u64, u64, u64);
443:	u64 bpf_ringbuf_output(u64, u64, u64, u64, u64);
471:	u64 bpf_ringbuf_query(u64, u64, u64, u64, u64);
370:	u64 bpf_ringbuf_reserve(u64, u64, u64, u64, u64);
417:	u64 bpf_ringbuf_submit(u64, u64, u64, u64, u64);
324:	static void *__bpf_ringbuf_reserve(struct bpf_ringbuf *, u64);
62:	static struct bpf_ringbuf *bpf_ringbuf_area_alloc(size_t, int);
389:	static void bpf_ringbuf_commit(void *, u64, bool);
126:	static void bpf_ringbuf_notify(struct irq_work *);
152:	static struct bpf_map *ringbuf_map_alloc(union bpf_attr *);
234:	static int ringbuf_map_delete_elem(struct bpf_map *, void *);
214:	static void ringbuf_map_free(struct bpf_map *);
239:	static int ringbuf_map_get_next_key(struct bpf_map *, void *, void *);
223:	static void *ringbuf_map_lookup_elem(struct bpf_map *, void *);
245:	static int ringbuf_map_mmap(struct bpf_map *, struct vm_area_struct *);
272:	static __poll_t ringbuf_map_poll(struct bpf_map *, struct file *, struct poll_table_struct *);
228:	static int ringbuf_map_update_elem(struct bpf_map *, void *, void *, u64);

File kernel/bpf/stackmap.c:
653:	u64 bpf_get_stack(u64, u64, u64, u64, u64);
698:	u64 bpf_get_stack_pe(u64, u64, u64, u64, u64);
482:	u64 bpf_get_stackid(u64, u64, u64, u64, u64);
527:	u64 bpf_get_stackid_pe(u64, u64, u64, u64, u64);
669:	u64 bpf_get_task_stack(u64, u64, u64, u64, u64);
768:	int bpf_stackmap_copy(struct bpf_map *, void *, void *);
584:	static long __bpf_get_stack(struct pt_regs *, struct task_struct *, struct perf_callchain_entry *, void *, u32, u64);
404:	static long __bpf_get_stackid(struct bpf_map *, struct perf_callchain_entry *, u64);
41:	static void do_up_read(struct irq_work *);
90:	static struct bpf_map *stack_map_alloc(union bpf_attr *);
827:	static int stack_map_delete_elem(struct bpf_map *, void *);
846:	static void stack_map_free(struct bpf_map *);
255:	static int stack_map_get_build_id(unsigned char *, struct vm_area_struct *, struct vm_area_struct *);
205:	static int stack_map_get_build_id_32(void *, unsigned char *);
230:	static int stack_map_get_build_id_64(void *, unsigned char *);
293:	static void stack_map_get_build_id_offset(struct bpf_stack_build_id *, u64 *, u32, bool);
791:	static int stack_map_get_next_key(struct bpf_map *, void *, void *);
870:	static int stack_map_init(void);
762:	static void *stack_map_lookup_elem(struct bpf_map *, void *);
820:	static int stack_map_update_elem(struct bpf_map *, void *, void *, u64);

File kernel/bpf/syscall.c:
916:	struct bpf_map *__bpf_map_get(struct fd);
1649:	int __bpf_prog_charge(struct user_struct *, u32);
1665:	void __bpf_prog_uncharge(struct user_struct *, u32);
4378:	long __ia32_sys_bpf(const struct pt_regs *);
4378:	long __x64_sys_bpf(const struct pt_regs *);
76:	int bpf_check_uarg_tail_zero(void *, size_t, size_t);
706:	int bpf_get_file_flag(int);
4192:	struct bpf_link *bpf_link_by_id(u32);
2326:	void bpf_link_cleanup(struct bpf_link_primer *);
2498:	struct bpf_link *bpf_link_get_from_fd(u32);
2334:	void bpf_link_inc(struct bpf_link *);
2299:	void bpf_link_init(struct bpf_link *, enum bpf_link_type, const struct bpf_link_ops *, struct bpf_prog *);
2493:	int bpf_link_new_fd(struct bpf_link *);
2451:	int bpf_link_prime(struct bpf_link *, struct bpf_link_primer *);
2362:	void bpf_link_put(struct bpf_link *);
2481:	int bpf_link_settle(struct bpf_link_primer *);
323:	void *bpf_map_area_alloc(u64, int);
333:	void bpf_map_area_free(void *);
328:	void *bpf_map_area_mmapable_alloc(u64, int);
399:	void bpf_map_charge_finish(struct bpf_map_memory *);
377:	int bpf_map_charge_init(struct bpf_map_memory *, u64);
414:	int bpf_map_charge_memlock(struct bpf_map *, u32);
405:	void bpf_map_charge_move(struct bpf_map_memory *, struct bpf_map_memory *);
449:	void bpf_map_free_id(struct bpf_map *, bool);
941:	struct bpf_map *bpf_map_get(u32);
3179:	struct bpf_map *bpf_map_get_curr_or_next(u32 *);
956:	struct bpf_map *bpf_map_get_with_uref(u32);
928:	void bpf_map_inc(struct bpf_map *);
985:	struct bpf_map *bpf_map_inc_not_zero(struct bpf_map *);
934:	void bpf_map_inc_with_uref(struct bpf_map *);
350:	void bpf_map_init_from_attr(struct bpf_map *, union bpf_attr *);
694:	int bpf_map_new_fd(struct bpf_map *, int);
510:	void bpf_map_put(struct bpf_map *);
516:	void bpf_map_put_with_uref(struct bpf_map *);
425:	void bpf_map_uncharge_memlock(struct bpf_map *, u32);
141:	bool bpf_map_write_active(const struct bpf_map *);
728:	int bpf_obj_name_cpy(char *, const char *, unsigned int);
1873:	void bpf_prog_add(struct bpf_prog *, int);
3219:	struct bpf_prog *bpf_prog_by_id(u32);
1713:	void bpf_prog_free_id(struct bpf_prog *, bool);
1945:	struct bpf_prog *bpf_prog_get(u32);
3198:	struct bpf_prog *bpf_prog_get_curr_or_next(u32 *);
1910:	bool bpf_prog_get_ok(struct bpf_prog *, enum bpf_prog_type *, bool);
1950:	struct bpf_prog *bpf_prog_get_type_dev(u32, enum bpf_prog_type, bool);
1890:	void bpf_prog_inc(struct bpf_prog *);
1897:	struct bpf_prog *bpf_prog_inc_not_zero(struct bpf_prog *);
1849:	int bpf_prog_new_fd(struct bpf_prog *);
1775:	void bpf_prog_put(struct bpf_prog *);
1879:	void bpf_prog_sub(struct bpf_prog *, int);
995:	int bpf_stackmap_copy(struct bpf_map *, void *, void *);
1267:	int generic_map_delete_batch(struct bpf_map *, const union bpf_attr *, union bpf_attr *);
1381:	int generic_map_lookup_batch(struct bpf_map *, const union bpf_attr *, union bpf_attr *);
1319:	int generic_map_update_batch(struct bpf_map *, const union bpf_attr *, union bpf_attr *);
749:	int map_check_no_btf(const struct bpf_map *, const struct btf *, const struct btf_type *, const struct btf_type *);
286:	static void *__bpf_map_area_alloc(u64, int, bool);
972:	static struct bpf_map *__bpf_map_inc_not_zero(struct bpf_map *, bool);
499:	static void __bpf_map_put(struct bpf_map *, bool);
1925:	static struct bpf_prog *__bpf_prog_get(u32, enum bpf_prog_type *, bool);
1764:	static void __bpf_prog_put(struct bpf_prog *, bool);
1748:	static void __bpf_prog_put_noref(struct bpf_prog *, bool);
1737:	static void __bpf_prog_put_rcu(struct callback_head *);
4378:	static long __se_sys_bpf(long, long, long);
360:	static int bpf_charge_memlock(struct user_struct *, u32);
584:	static ssize_t bpf_dummy_read(struct file *, char *, size_t, loff_t *);
4275:	static int bpf_enable_stats(union bpf_attr *);
3325:	static struct bpf_insn *bpf_insn_prepare_dump(const struct bpf_prog *, const struct cred *);
2340:	static void bpf_link_free(struct bpf_link *);
3749:	static int bpf_link_get_info_by_fd(struct bpf_link *, union bpf_attr *, struct file *, const union bpf_attr *, const union bpf_attr *);
2352:	static void bpf_link_put_deferred(struct work_struct *);
2375:	static int bpf_link_release(struct inode *, struct file *);
2395:	static void bpf_link_show_fdinfo(struct seq_file *, struct file *);
226:	static int bpf_map_copy_value(struct bpf_map *, void *, void *, __u64);
3990:	static int bpf_map_do_batch(const union bpf_attr *, union bpf_attr *, int);
476:	static void bpf_map_free_deferred(struct work_struct *);
3261:	static int bpf_map_get_fd_by_id(const union bpf_attr *);
3689:	static int bpf_map_get_info_by_fd(struct bpf_map *, union bpf_attr *, struct file *, const union bpf_attr *, const union bpf_attr *);
625:	static int bpf_map_mmap(struct file *, struct vm_area_struct *);
612:	static void bpf_map_mmap_close(struct vm_area_struct *);
603:	static void bpf_map_mmap_open(struct vm_area_struct *);
673:	static __poll_t bpf_map_poll(struct file *, struct poll_table_struct *);
522:	static int bpf_map_release(struct inode *, struct file *);
546:	static void bpf_map_show_fdinfo(struct seq_file *, struct file *);
170:	static int bpf_map_update_value(struct bpf_map *, void *, void *, __u64, struct fd, struct fd);
146:	static u32 bpf_map_value_size(struct bpf_map *);
3788:	static int bpf_obj_get_info_by_fd(const union bpf_attr *, union bpf_attr *);
3153:	static int bpf_obj_get_next_id(const union bpf_attr *, union bpf_attr *, struct idr *, spinlock_t *);
2988:	static int bpf_prog_attach(const union bpf_attr *);
2906:	static int bpf_prog_attach_check_attach_type(const struct bpf_prog *, enum bpf_attach_type);
4318:	static int bpf_prog_bind_map(union bpf_attr *);
1671:	static int bpf_prog_charge_memlock(struct bpf_prog *);
3044:	static int bpf_prog_detach(const union bpf_attr *);
3408:	static int bpf_prog_get_info_by_fd(struct file *, struct bpf_prog *, union bpf_attr *, const union bpf_attr *, const union bpf_attr *);
1789:	static void bpf_prog_get_stats(const struct bpf_prog *, struct bpf_prog_stats *);
2117:	static int bpf_prog_load(union bpf_attr *, union bpf_attr *);
3076:	static int bpf_prog_query(const union bpf_attr *, union bpf_attr *);
1781:	static int bpf_prog_release(struct inode *, struct file *);
1814:	static void bpf_prog_show_fdinfo(struct seq_file *, struct file *);
3123:	static int bpf_prog_test_run(const union bpf_attr *, union bpf_attr *);
2774:	static int bpf_raw_tp_link_fill_link_info(const struct bpf_link *, struct bpf_link_info *);
2746:	static void bpf_raw_tp_link_release(struct bpf_link *);
2763:	static void bpf_raw_tp_link_show_fdinfo(const struct bpf_link *, struct seq_file *);
2817:	static int bpf_raw_tracepoint_open(const union bpf_attr *);
4241:	static int bpf_stats_release(struct inode *, struct file *);
3895:	static int bpf_task_fd_query(const union bpf_attr *, union bpf_attr *);
3846:	static int bpf_task_fd_query_copy(const union bpf_attr *, union bpf_attr *, u32, u32, const char *, u64, u64);
2539:	static void bpf_tracing_link_dealloc(struct bpf_link *);
2558:	static int bpf_tracing_link_fill_link_info(const struct bpf_link *, struct bpf_link_info *);
2524:	static void bpf_tracing_link_release(struct bpf_link *);
2547:	static void bpf_tracing_link_show_fdinfo(const struct bpf_link *, struct seq_file *);
2576:	static int bpf_tracing_prog_attach(struct bpf_prog *, int, u32);
4050:	static int link_create(union bpf_attr *);
4113:	static int link_update(union bpf_attr *);
757:	static int map_check_btf(struct bpf_map *, const struct btf *, u32, u32);
807:	static int map_create(union bpf_attr *);
1148:	static int map_delete_elem(union bpf_attr *);
1549:	static int map_freeze(const union bpf_attr *);
1203:	static int map_get_next_key(union bpf_attr *);
1482:	static int map_lookup_and_delete_elem(union bpf_attr *);
1014:	static int map_lookup_elem(union bpf_attr *);
1081:	static int map_update_elem(union bpf_attr *);

File kernel/bpf/sysfs_btf.c:
31:	static int btf_vmlinux_init(void);
16:	static ssize_t btf_vmlinux_read(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t, size_t);

File kernel/bpf/task_iter.c:
87:	int bpf_iter_task(struct bpf_iter_meta *, struct task_struct *);
242:	int bpf_iter_task_file(struct bpf_iter_meta *, struct task_struct *, u32, struct file *);
294:	static void fini_seq_pidns(void *);
286:	static int init_seq_pidns(void *, struct bpf_iter_aux_info *);
139:	static struct file *task_file_seq_get_next(struct bpf_iter_seq_task_file_info *);
225:	static void *task_file_seq_next(struct seq_file *, void *, loff_t *);
266:	static int task_file_seq_show(struct seq_file *, void *);
211:	static void *task_file_seq_start(struct seq_file *, loff_t *);
271:	static void task_file_seq_stop(struct seq_file *, void *);
348:	static int task_iter_init(void);
24:	static struct task_struct *task_seq_get_next(struct pid_namespace *, u32 *, bool);
67:	static void *task_seq_next(struct seq_file *, void *, loff_t *);
107:	static int task_seq_show(struct seq_file *, void *);
53:	static void *task_seq_start(struct seq_file *, loff_t *);
112:	static void task_seq_stop(struct seq_file *, void *);

File kernel/bpf/tnum.c:
62:	struct tnum tnum_add(struct tnum, struct tnum);
86:	struct tnum tnum_and(struct tnum, struct tnum);
47:	struct tnum tnum_arshift(struct tnum, u8, u8);
150:	struct tnum tnum_cast(struct tnum, u8);
203:	struct tnum tnum_clear_subreg(struct tnum);
16:	struct tnum tnum_const(u64);
208:	struct tnum tnum_const_subreg(struct tnum, u32);
164:	bool tnum_in(struct tnum, struct tnum);
141:	struct tnum tnum_intersect(struct tnum, struct tnum);
157:	bool tnum_is_aligned(struct tnum, u64);
37:	struct tnum tnum_lshift(struct tnum, u8);
128:	struct tnum tnum_mul(struct tnum, struct tnum);
96:	struct tnum tnum_or(struct tnum, struct tnum);
21:	struct tnum tnum_range(u64, u64);
42:	struct tnum tnum_rshift(struct tnum, u8);
178:	int tnum_sbin(char *, size_t, struct tnum);
172:	int tnum_strn(char *, size_t, struct tnum);
74:	struct tnum tnum_sub(struct tnum, struct tnum);
198:	struct tnum tnum_subreg(struct tnum);
105:	struct tnum tnum_xor(struct tnum, struct tnum);

File kernel/bpf/trampoline.c:
499:	u64 __bpf_prog_enter(void);
533:	void __bpf_prog_enter_sleepable(void);
511:	void __bpf_prog_exit(struct bpf_prog *, u64);
539:	void __bpf_prog_exit_sleepable(void);
544:	void __bpf_tramp_enter(struct bpf_tramp_image *);
549:	void __bpf_tramp_exit(struct bpf_tramp_image *);
555:	int arch_prepare_bpf_trampoline(struct bpf_tramp_image *, void *, void *, const struct btf_func_model *, u32, struct bpf_tramp_progs *, void *);
44:	void bpf_image_ksym_add(void *, struct bpf_ksym *);
53:	void bpf_image_ksym_del(struct bpf_ksym *);
28:	void *bpf_jit_alloc_exec_page(void);
448:	struct bpf_trampoline *bpf_trampoline_get(u64, struct bpf_attach_target_info *);
377:	int bpf_trampoline_link_prog(struct bpf_prog *, struct bpf_trampoline *);
468:	void bpf_trampoline_put(struct bpf_trampoline *);
426:	int bpf_trampoline_unlink_prog(struct bpf_prog *, struct bpf_trampoline *);
168:	static void __bpf_tramp_image_put_deferred(struct work_struct *);
181:	static void __bpf_tramp_image_put_rcu(struct callback_head *);
200:	static void __bpf_tramp_image_put_rcu_tasks(struct callback_head *);
191:	static void __bpf_tramp_image_release(struct percpu_ref *);
261:	static struct bpf_tramp_image *bpf_tramp_image_alloc(u64, u32);
213:	static void bpf_tramp_image_put(struct bpf_tramp_image *);
60:	static struct bpf_trampoline *bpf_trampoline_lookup(u64);
301:	static int bpf_trampoline_update(struct bpf_trampoline *);
563:	static int init_trampolines(void);

File kernel/bpf/verifier.c:
12305:	int bpf_check(struct bpf_prog **, union bpf_attr *, union bpf_attr *);
11990:	int bpf_check_attach_target(struct bpf_verifier_log *, const struct bpf_prog *, const struct bpf_prog *, u32, struct bpf_attach_target_info *);
12294:	struct btf *bpf_get_btf_vmlinux(void);
336:	void bpf_log(struct bpf_verifier_log *, const char *, ...);
309:	void bpf_verifier_log_write(struct bpf_verifier_env *, const char *, ...);
270:	void bpf_verifier_vlog(struct bpf_verifier_log *, const char *, struct __va_list_tag *);
3372:	int check_ctx_reg(struct bpf_verifier_env *, const struct bpf_reg_state *, int);
559:	const char *kernel_type_name(u32);
2791:	static int __check_mem_access(struct bpf_verifier_env *, int, int, int, u32, bool);
4995:	static void __clear_all_pkt_pointers(struct bpf_verifier_env *, struct bpf_func_state *);
7209:	static void __find_good_pkt_pointers(struct bpf_func_state *, struct bpf_reg_state *, enum bpf_reg_type, u16);
2023:	static int __mark_chain_precision(struct bpf_verifier_env *, int, int);
7788:	static void __mark_ptr_or_null_regs(struct bpf_func_state *, u32, bool);
1031:	static void __mark_reg_known(struct bpf_reg_state *, u64);
1338:	static void __mark_reg_unknown(const struct bpf_verifier_env *, struct bpf_reg_state *);
1165:	static void __reg32_deduce_bounds(struct bpf_reg_state *);
1199:	static void __reg64_deduce_bounds(struct bpf_reg_state *);
1240:	static void __reg_bound_offset(struct bpf_reg_state *);
1276:	static void __reg_combine_32_into_64(struct bpf_reg_state *);
1315:	static void __reg_combine_64_into_32(struct bpf_reg_state *);
7676:	static void __reg_combine_min_max(struct bpf_reg_state *, struct bpf_reg_state *);
1130:	static void __update_reg32_bounds(struct bpf_reg_state *);
1454:	static int add_subprog(struct bpf_verifier_env *, int);
10486:	static void adjust_insn_aux_data(struct bpf_verifier_env *, struct bpf_insn_aux_data *, struct bpf_prog *, u32, u32);
5986:	static int adjust_ptr_min_max_vals(struct bpf_verifier_env *, struct bpf_insn *, const struct bpf_reg_state *, const struct bpf_reg_state *);
6952:	static int adjust_reg_min_max_vals(struct bpf_verifier_env *, struct bpf_insn *);
6788:	static int adjust_scalar_min_max_vals(struct bpf_verifier_env *, struct bpf_insn *, struct bpf_reg_state *, struct bpf_reg_state);
10574:	static int adjust_subprog_starts_after_remove(struct bpf_verifier_env *, u32, u32);
1805:	static int backtrack_insn(struct bpf_verifier_env *, int, u32 *, u64 *);
10630:	static int bpf_adj_linfo_after_remove(struct bpf_verifier_env *, u32, u32);
10546:	static struct bpf_prog *bpf_patch_insn_data(struct bpf_verifier_env *, u32, const struct bpf_insn *, u32);
293:	static void bpf_vlog_reset(struct bpf_verifier_log *, u32);
7033:	static int check_alu_op(struct bpf_verifier_env *, struct bpf_insn *);
12224:	static int check_attach_btf_id(struct bpf_verifier_env *);
8690:	static int check_btf_func(struct bpf_verifier_env *, union bpf_attr *, const union bpf_attr *, const union bpf_attr *);
8835:	static int check_btf_line(struct bpf_verifier_env *, const union bpf_attr *, union bpf_attr *);
3436:	static int check_buffer_access(struct bpf_verifier_env *, const struct bpf_reg_state *, int, int, int, const char *, u32 *, bool);
8545:	static int check_cfg(struct bpf_verifier_env *);
7948:	static int check_cond_jmp_op(struct bpf_verifier_env *, struct bpf_insn *, int *);
4465:	static int check_func_arg(struct bpf_verifier_env *, u32, struct bpf_call_arg_meta *, const struct bpf_func_proto *);
5073:	static int check_func_call(struct bpf_verifier_env *, struct bpf_insn *, int *);
4984:	static int check_func_proto(const struct bpf_func_proto *, int);
5332:	static int check_helper_call(struct bpf_verifier_env *, int, int);
4118:	static int check_helper_mem_access(struct bpf_verifier_env *, int, int, bool, struct bpf_call_arg_meta *);
9012:	static bool check_ids(u32, u32, struct bpf_id_pair *);
8231:	static int check_ld_abs(struct bpf_verifier_env *, struct bpf_insn *);
8136:	static int check_ld_imm(struct bpf_verifier_env *, struct bpf_insn *);
2882:	static int check_map_access(struct bpf_verifier_env *, u32, int, int, bool);
2768:	static int check_map_access_type(struct bpf_verifier_env *, u32, int, int, enum bpf_access_type);
4694:	static int check_map_func_compatibility(struct bpf_verifier_env *, struct bpf_map *, int);
10216:	static int check_map_prog_compatibility(struct bpf_verifier_env *, struct bpf_map *, struct bpf_prog *);
3257:	static int check_max_stack_depth(struct bpf_verifier_env *);
3740:	static int check_mem_access(struct bpf_verifier_env *, int, u32, int, int, enum bpf_access_type, int, bool);
2823:	static int check_mem_region_access(struct bpf_verifier_env *, u32, int, int, u32, bool);
2962:	static int check_packet_access(struct bpf_verifier_env *, u32, int, int, bool);
10100:	static int check_pseudo_btf_id(struct bpf_verifier_env *, struct bpf_insn *, struct bpf_insn_aux_data *);
3187:	static int check_ptr_alignment(struct bpf_verifier_env *, const struct bpf_reg_state *, int, int, bool);
3543:	static int check_ptr_to_btf_access(struct bpf_verifier_env *, struct bpf_reg_state *, int, int, int, enum bpf_access_type, int);
3593:	static int check_ptr_to_map_access(struct bpf_verifier_env *, struct bpf_reg_state *, int, int, int, enum bpf_access_type, int);
5320:	static int check_reference_leak(struct bpf_verifier_env *);
1721:	static int check_reg_arg(struct bpf_verifier_env *, u32, enum reg_arg_type);
5623:	static bool check_reg_sane_offset(struct bpf_verifier_env *, const struct bpf_reg_state *, enum bpf_reg_type);
4407:	static int check_reg_type(struct bpf_verifier_env *, u32, enum bpf_arg_type, const u32 *);
8308:	static int check_return_code(struct bpf_verifier_env *);
3049:	static int check_sock_access(struct bpf_verifier_env *, int, u32, int, int, enum bpf_access_type);
3675:	static int check_stack_access_within_bounds(struct bpf_verifier_env *, int, int, int, enum stack_access_src, enum bpf_access_type);
3991:	static int check_stack_range_initialized(struct bpf_verifier_env *, int, int, int, bool, enum stack_access_src, struct bpf_call_arg_meta *);
2684:	static int check_stack_read(struct bpf_verifier_env *, int, int, int, int);
2549:	static int check_stack_read_fixed_off(struct bpf_verifier_env *, struct bpf_func_state *, int, int, int);
2278:	static int check_stack_write_fixed_off(struct bpf_verifier_env *, struct bpf_func_state *, int, int, int, int);
2403:	static int check_stack_write_var_off(struct bpf_verifier_env *, struct bpf_func_state *, int, int, int, int, int);
11892:	static int check_struct_ops_btf_id(struct bpf_verifier_env *);
1476:	static int check_subprogs(struct bpf_verifier_env *);
3936:	static int check_xadd(struct bpf_verifier_env *, int, struct bpf_insn *);
9031:	static void clean_func_state(struct bpf_verifier_env *, struct bpf_func_state *);
9105:	static void clean_live_states(struct bpf_verifier_env *, int, struct bpf_verifier_state *);
1436:	static int cmp_subprogs(const void *, const void *);
10916:	static int convert_ctx_accesses(struct bpf_verifier_env *);
706:	static int copy_reference_state(struct bpf_func_state *, const struct bpf_func_state *, const struct bpf_func_state *);
868:	static int copy_verifier_state(struct bpf_verifier_state *, const struct bpf_verifier_state *);
9776:	static int do_check(struct bpf_verifier_env *);
11742:	static int do_check_common(struct bpf_verifier_env *, int);
11831:	static int do_check_subprogs(struct bpf_verifier_env *);
7924:	static void find_equal_scalars(struct bpf_verifier_state *, struct bpf_reg_state *);
7231:	static void find_good_pkt_pointers(struct bpf_verifier_state *, struct bpf_reg_state *, enum bpf_reg_type, bool);
11358:	static int fixup_bpf_calls(struct bpf_verifier_env *);
835:	static void free_verifier_state(struct bpf_verifier_state *, bool);
9343:	static bool func_states_equal(struct bpf_verifier_env *, struct bpf_func_state *, struct bpf_func_state *);
1400:	static void init_reg_state(struct bpf_verifier_env *, struct bpf_func_state *);
7307:	static int is_branch32_taken(struct bpf_reg_state *, u32, u8);
7381:	static int is_branch64_taken(struct bpf_reg_state *, u64, u8);
7460:	static int is_branch_taken(struct bpf_reg_state *, u64, u8, bool);
10207:	static bool is_preallocated_map(struct bpf_map *);
1610:	static bool is_reg64(struct bpf_insn *, struct bpf_reg_state *, enum reg_arg_type, u32, struct bpf_verifier_env *);
9532:	static int is_state_visited(struct bpf_verifier_env *, int);
11103:	static int jit_subprogs(struct bpf_verifier_env *);
1993:	static void mark_all_scalars_precise(struct bpf_verifier_state *, struct bpf_verifier_env *);
7722:	static void mark_ptr_or_null_reg(struct bpf_reg_state *, u32, bool, struct bpf_func_state *);
7807:	static void mark_ptr_or_null_regs(struct bpf_verifier_state *, u32, bool);
1062:	static void mark_reg_known_zero(struct bpf_verifier_env *, struct bpf_reg_state *, u32);
1373:	static void mark_reg_not_init(struct bpf_verifier_env *, struct bpf_reg_state *, u32);
1558:	static int mark_reg_read(struct bpf_verifier_env *, const struct bpf_reg_state *, struct bpf_reg_state *, u8);
2498:	static void mark_reg_stack_read(struct bpf_verifier_env *, struct bpf_func_state *, int, int, int);
1353:	static void mark_reg_unknown(struct bpf_verifier_env *, struct bpf_reg_state *, u32);
2920:	static bool may_access_direct_pkt_data(struct bpf_verifier_env *, const struct bpf_call_arg_meta *, enum bpf_access_type);
4657:	static bool may_update_sockmap(struct bpf_verifier_env *, int);
10762:	static void opt_hard_wire_dead_code_branches(struct bpf_verifier_env *);
10812:	static int opt_remove_nops(struct bpf_verifier_env *);
10833:	static int opt_subreg_zext_lo32_rnd_hi32(struct bpf_verifier_env *, const union bpf_attr *, const union bpf_attr *);
928:	static int pop_stack(struct bpf_verifier_env *, int *, int *, bool);
5173:	static int prepare_func_exit(struct bpf_verifier_env *, int *);
538:	static void print_liveness(struct bpf_verifier_env *, enum bpf_reg_liveness);
565:	static void print_verifier_state(struct bpf_verifier_env *, const struct bpf_func_state *);
4189:	static int process_spin_lock(struct bpf_verifier_env *, int, bool);
9429:	static int propagate_liveness(struct bpf_verifier_env *, const struct bpf_verifier_state *, struct bpf_verifier_state *);
9476:	static int propagate_precision(struct bpf_verifier_env *, const struct bpf_verifier_state *);
8495:	static int push_insn(int, int, int, struct bpf_verifier_env *, bool);
957:	static struct bpf_verifier_state *push_stack(struct bpf_verifier_env *, int, int, bool);
8989:	static bool range_within(struct bpf_reg_state *, struct bpf_reg_state *);
746:	static int realloc_reference_state(struct bpf_func_state *, int, bool);
748:	static int realloc_stack_state(struct bpf_func_state *, int, bool);
7493:	static void reg_set_min_max(struct bpf_reg_state *, struct bpf_reg_state *, u64, u32, u8, bool);
407:	static bool reg_type_may_be_null(enum bpf_reg_type);
9128:	static bool regsafe(struct bpf_verifier_env *, struct bpf_reg_state *, struct bpf_reg_state *, struct bpf_id_pair *);
789:	static int release_reference_state(struct bpf_func_state *, int);
5022:	static void release_reg_references(struct bpf_verifier_env *, struct bpf_func_state *, int);
10303:	static int resolve_pseudo_ldimm64(struct bpf_verifier_env *);
5876:	static int sanitize_err(struct bpf_verifier_env *, const struct bpf_insn *, int, const struct bpf_reg_state *, const struct bpf_reg_state *);
5767:	static int sanitize_ptr_alu(struct bpf_verifier_env *, const struct bpf_reg_state *, const struct bpf_reg_state *, struct bpf_reg_state *, struct bpf_sanitize_info *, const bool, struct bpf_insn *, struct bpf_insn *);
5747:	static struct bpf_verifier_state *sanitize_speculative_path(struct bpf_verifier_env *, const struct bpf_insn *, u32, u32);
2263:	static void save_register_state(struct bpf_func_state *, int, struct bpf_reg_state *);
6389:	static void scalar32_min_max_and(struct bpf_reg_state *, struct bpf_reg_state *);
6458:	static void scalar32_min_max_or(struct bpf_reg_state *, struct bpf_reg_state *);
6527:	static void scalar32_min_max_xor(struct bpf_reg_state *, struct bpf_reg_state *);
6653:	static void scalar_min_max_lsh(struct bpf_reg_state *, struct bpf_reg_state *, struct bpf_reg_state *);
9246:	static bool stacksafe(struct bpf_verifier_env *, struct bpf_func_state *, struct bpf_func_state *, struct bpf_id_pair *);
7827:	static bool try_match_pkt_pointers(struct bpf_reg_state *, struct bpf_reg_state *, struct bpf_verifier_state *, struct bpf_verifier_state *, const struct bpf_insn *, const struct bpf_insn *);
323:	static void verbose(void *, const char *, ...);
357:	static void verbose_linfo(struct bpf_verifier_env *, u32, const char *, ...);
10694:	static int verifier_remove_insns(struct bpf_verifier_env *, u32, u32);

File kernel/capability.c:
148:	long __ia32_sys_capget(const struct pt_regs *);
222:	long __ia32_sys_capset(const struct pt_regs *);
148:	long __x64_sys_capget(const struct pt_regs *);
222:	long __x64_sys_capset(const struct pt_regs *);
447:	bool capable(int);
502:	bool capable_wrt_inode_uidgid(const struct inode *, int);
466:	bool file_ns_capable(const struct file *, struct user_namespace *, int);
316:	bool has_capability(struct task_struct *, int);
359:	bool has_capability_noaudit(struct task_struct *, int);
294:	bool has_ns_capability(struct task_struct *, struct user_namespace *, int);
335:	bool has_ns_capability_noaudit(struct task_struct *, struct user_namespace *, int);
394:	bool ns_capable(struct user_namespace *, int);
412:	bool ns_capable_noaudit(struct user_namespace *, int);
431:	bool ns_capable_setid(struct user_namespace *, int);
487:	bool privileged_wrt_inode_uidgid(struct user_namespace *, const struct inode *);
518:	bool ptracer_capable(struct task_struct *, struct user_namespace *);
148:	static long __se_sys_capget(long, long);
222:	static long __se_sys_capset(long, long);
82:	static int cap_validate_magic(cap_user_header_t, unsigned int *);
32:	static int file_caps_disable(char *);
364:	static bool ns_capable_common(struct user_namespace *, int, unsigned int);

File kernel/cgroup/cgroup-v1.c:
748:	void cgroup1_check_for_release(struct cgroup *);
1210:	int cgroup1_get_tree(struct fs_context *);
912:	int cgroup1_parse_param(struct fs_context *, struct fs_parameter *);
195:	void cgroup1_pidlist_destroy_all(struct cgroup *);
1049:	int cgroup1_reconfigure(struct fs_context *);
778:	void cgroup1_release_agent(struct work_struct *);
44:	bool cgroup1_ssid_disabled(int);
54:	int cgroup_attach_task_all(struct task_struct *, struct task_struct *);
93:	int cgroup_transfer_tasks(struct cgroup *, struct cgroup *);
693:	int cgroupstats_build(struct cgroupstats *, struct dentry *);
657:	int proc_cgroupstats_show(struct seq_file *, void *);
488:	static ssize_t __cgroup1_procs_write(struct kernfs_open_file *, char *, size_t, bool, loff_t);
532:	static ssize_t cgroup1_procs_write(struct kernfs_open_file *, char *, size_t, loff_t);
824:	static int cgroup1_rename(struct kernfs_node *, struct kernfs_node *, const char *);
1121:	static int cgroup1_root_to_use(struct fs_context *);
860:	static int cgroup1_show_options(struct seq_file *, struct kernfs_root *);
538:	static ssize_t cgroup1_tasks_write(struct kernfs_open_file *, char *, size_t, loff_t);
1242:	static int cgroup1_wq_init(void);
595:	static u64 cgroup_clone_children_read(struct cgroup_subsys_state *, struct cftype *);
601:	static int cgroup_clone_children_write(struct cgroup_subsys_state *, struct cftype *, u64);
1255:	static int cgroup_no_v1(char *);
208:	static void cgroup_pidlist_destroy_work_fn(struct work_struct *);
297:	static struct cgroup_pidlist *cgroup_pidlist_find_create(struct cgroup *, enum cgroup_filetype);
460:	static void *cgroup_pidlist_next(struct seq_file *, void *, loff_t *);
481:	static int cgroup_pidlist_show(struct seq_file *, void *);
387:	static void *cgroup_pidlist_start(struct seq_file *, loff_t *);
448:	static void cgroup_pidlist_stop(struct seq_file *, void *);
579:	static u64 cgroup_read_notify_on_release(struct cgroup_subsys_state *, struct cftype *);
562:	static int cgroup_release_agent_show(struct seq_file *, void *);
544:	static ssize_t cgroup_release_agent_write(struct kernfs_open_file *, char *, size_t, loff_t);
573:	static int cgroup_sane_behavior_show(struct seq_file *, void *);
585:	static int cgroup_write_notify_on_release(struct cgroup_subsys_state *, struct cftype *, u64);
995:	static int check_cgroupfs_options(struct fs_context *);
271:	static int cmppid(const void *, const void *);
325:	static int pidlist_array_load(struct cgroup *, enum cgroup_filetype, struct cgroup_pidlist **);

File kernel/cgroup/cgroup.c:
596:	int __cgroup_task_count(const struct cgroup *);
4189:	int cgroup_add_dfl_cftypes(struct cgroup_subsys *, struct cftype *);
4206:	int cgroup_add_legacy_cftypes(struct cgroup_subsys *, struct cftype *);
2772:	int cgroup_attach_task(struct cgroup *, struct task_struct *, bool);
6591:	int cgroup_bpf_attach(struct cgroup *, struct bpf_prog *, struct bpf_prog *, struct bpf_cgroup_link *, enum bpf_attach_type, u32);
6605:	int cgroup_bpf_detach(struct cgroup *, struct bpf_prog *, enum bpf_attach_type);
6616:	int cgroup_bpf_query(struct cgroup *, const union bpf_attr *, union bpf_attr *);
6167:	int cgroup_can_fork(struct task_struct *, struct kernel_clone_args *);
6206:	void cgroup_cancel_fork(struct task_struct *, struct kernel_clone_args *);
2062:	int cgroup_do_get_tree(struct fs_context *);
536:	struct cgroup_subsys_state *cgroup_e_css(struct cgroup *, struct cgroup_subsys *);
6298:	void cgroup_exit(struct task_struct *);
4221:	void cgroup_file_notify(struct cgroup_file *);
6005:	void cgroup_fork(struct task_struct *);
6339:	void cgroup_free(struct task_struct *);
1303:	void cgroup_free_root(struct cgroup_root *);
563:	struct cgroup_subsys_state *cgroup_get_e_css(struct cgroup *, struct cgroup_subsys *);
6476:	struct cgroup *cgroup_get_from_fd(int);
6442:	struct cgroup *cgroup_get_from_path(const char *);
5790:	int cgroup_init(void);
5753:	int cgroup_init_early(void);
372:	bool cgroup_is_thread_root(struct cgroup *);
333:	bool cgroup_is_threaded(struct cgroup *);
1587:	struct cgroup *cgroup_kn_lock_live(struct kernfs_node *, bool);
1555:	void cgroup_kn_unlock(struct kernfs_node *);
3001:	void cgroup_lock_and_drain_offline(struct cgroup *);
2736:	int cgroup_migrate(struct task_struct *, bool, struct cgroup_mgctx *);
2622:	void cgroup_migrate_add_src(struct css_set *, struct cgroup *, struct cgroup_mgctx *);
2583:	void cgroup_migrate_finish(struct cgroup_mgctx *);
2669:	int cgroup_migrate_prepare_dst(struct cgroup_mgctx *);
2548:	int cgroup_migrate_vet_dst(struct cgroup *);
5433:	int cgroup_mkdir(struct kernfs_node *, const char *, umode_t);
2885:	void cgroup_move_task_to_root(struct task_struct *);
292:	bool cgroup_on_dfl(const struct cgroup *);
6513:	int cgroup_parse_float(const char *, unsigned int, s64 *);
5909:	void cgroup_path_from_kernfs_id(u64, char *, size_t);
2275:	int cgroup_path_ns(struct cgroup *, char *, size_t, struct cgroup_namespace *);
2267:	int cgroup_path_ns_locked(struct cgroup *, char *, size_t, struct cgroup_namespace *);
6226:	void cgroup_post_fork(struct task_struct *, struct kernel_clone_args *);
2868:	void cgroup_procs_write_finish(struct task_struct *, bool);
2804:	struct task_struct *cgroup_procs_write_start(char *, bool, bool *);
6324:	void cgroup_release(struct task_struct *);
4132:	int cgroup_rm_cftypes(struct cftype *);
5670:	int cgroup_rmdir(struct kernfs_node *);
1275:	struct cgroup_root *cgroup_root_from_kf(struct kernfs_root *);
1959:	int cgroup_setup_root(struct cgroup_root *, u16);
1810:	int cgroup_show_path(struct seq_file *, struct kernfs_node *, struct kernfs_root *);
6539:	void cgroup_sk_alloc(struct sock_cgroup_data *);
6567:	void cgroup_sk_clone(struct sock_cgroup_data *);
6580:	void cgroup_sk_free(struct sock_cgroup_data *);
234:	bool cgroup_ssid_enabled(int);
613:	int cgroup_task_count(const struct cgroup *);
2377:	struct task_struct *cgroup_taskset_first(struct cgroup_taskset *, struct cgroup_subsys_state **);
2394:	struct task_struct *cgroup_taskset_next(struct cgroup_taskset *, struct cgroup_subsys_state **);
6427:	struct cgroup_subsys_state *css_from_id(int, struct cgroup_subsys *);
4453:	bool css_has_online_children(struct cgroup_subsys_state *);
4257:	struct cgroup_subsys_state *css_next_child(struct cgroup_subsys_state *, struct cgroup_subsys_state *);
4421:	struct cgroup_subsys_state *css_next_descendant_post(struct cgroup_subsys_state *, struct cgroup_subsys_state *);
4326:	struct cgroup_subsys_state *css_next_descendant_pre(struct cgroup_subsys_state *, struct cgroup_subsys_state *);
4368:	struct cgroup_subsys_state *css_rightmost_descendant(struct cgroup_subsys_state *);
4712:	void css_task_iter_end(struct css_task_iter *);
4681:	struct task_struct *css_task_iter_next(struct css_task_iter *);
4651:	void css_task_iter_start(struct cgroup_subsys_state *, unsigned int, struct css_task_iter *);
6388:	struct cgroup_subsys_state *css_tryget_online_from_dir(struct dentry *, struct cgroup_subsys *);
6369:	void enable_debug_cgroup(void);
1939:	void init_cgroup_root(struct cgroup_fs_context *);
624:	struct cgroup_subsys_state *of_css(struct kernfs_open_file *);
5925:	int proc_cgroup_show(struct seq_file *, struct pid_namespace *, struct pid *, struct task_struct *);
927:	void put_css_set_locked(struct css_set *);
1711:	int rebind_subsystems(struct cgroup_root *, u16);
1422:	struct cgroup *task_cgroup_from_root(struct task_struct *, struct cgroup_root *);
2305:	int task_cgroup_path(struct task_struct *, char *, size_t);
4747:	static void *__cgroup_procs_start(struct seq_file *, loff_t *, unsigned int);
4864:	static ssize_t __cgroup_procs_write(struct kernfs_open_file *, char *, bool);
1115:	static int allocate_cgrp_cset_links(int, struct list_head *);
1875:	static void apply_cgroup_root_flags(unsigned int);
1851:	static int cgroup2_parse_param(struct fs_context *, struct fs_parameter *);
4156:	static int cgroup_add_cftypes(struct cgroup_subsys *, struct cftype *);
3943:	static int cgroup_add_file(struct cgroup_subsys_state *, struct cgroup *, struct cftype *);
3991:	static int cgroup_addrm_files(struct cgroup_subsys_state *, struct cgroup *, struct cftype *, bool);
4032:	static int cgroup_apply_cftypes(struct cftype *, bool);
3166:	static void cgroup_apply_control_disable(struct cgroup *);
3120:	static int cgroup_apply_control_enable(struct cgroup *);
412:	static u16 cgroup_control(struct cgroup *);
2923:	static int cgroup_controllers_show(struct seq_file *, void *);
3634:	static int cgroup_cpu_pressure_show(struct seq_file *, void *);
3685:	static ssize_t cgroup_cpu_pressure_write(struct kernfs_open_file *, char *, size_t, loff_t);
5294:	static struct cgroup *cgroup_create(struct cgroup *, const char *, umode_t);
6045:	static int cgroup_css_set_fork(struct kernel_clone_args *);
6134:	static void cgroup_css_set_put_fork(struct kernel_clone_args *);
5591:	static int cgroup_destroy_locked(struct cgroup *);
1308:	static void cgroup_destroy_root(struct cgroup_root *);
6345:	static int cgroup_disable(char *);
3395:	static int cgroup_enable_threaded(struct cgroup *);
3566:	static int cgroup_events_show(struct seq_file *, void *);
4058:	static void cgroup_exit_cftypes(struct cftype *);
3588:	static int cgroup_extra_stat_show(struct seq_file *, struct cgroup *, int);
1460:	static char *cgroup_file_name(struct cgroup *, const struct cftype *, char *);
3937:	static void cgroup_file_notify_timer(struct timer_list *);
3770:	static int cgroup_file_open(struct kernfs_open_file *);
3859:	static __poll_t cgroup_file_poll(struct kernfs_open_file *, poll_table *);
3795:	static void cgroup_file_release(struct kernfs_open_file *);
3806:	static ssize_t cgroup_file_write(struct kernfs_open_file *, char *, size_t, loff_t);
3240:	static void cgroup_finalize_control(struct cgroup *, int);
3736:	static int cgroup_freeze_show(struct seq_file *, void *);
3745:	static ssize_t cgroup_freeze_write(struct kernfs_open_file *, char *, size_t, loff_t);
2110:	static void cgroup_fs_context_free(struct fs_context *);
6011:	static struct cgroup *cgroup_get_from_file(struct file *, struct file *);
585:	static void cgroup_get_live(struct cgroup *);
2121:	static int cgroup_get_tree(struct fs_context *);
298:	static int cgroup_idr_alloc(struct idr *, void *, int, int, gfp_t);
4074:	static int cgroup_init_cftypes(struct cgroup_subsys *, struct cftype *);
2154:	static int cgroup_init_fs_context(struct fs_context *);
5694:	static void cgroup_init_subsys(struct cgroup_subsys *, bool);
3620:	static int cgroup_io_pressure_show(struct seq_file *, void *);
3671:	static ssize_t cgroup_io_pressure_write(struct kernfs_open_file *, char *, size_t, loff_t);
394:	static bool cgroup_is_valid_domain(struct cgroup *);
2175:	static void cgroup_kill_sb(struct super_block *);
3924:	static int cgroup_kn_set_ugid(struct kernfs_node *);
3523:	static int cgroup_max_depth_show(struct seq_file *, void *);
3536:	static ssize_t cgroup_max_depth_write(struct kernfs_open_file *, char *, size_t, loff_t);
3480:	static int cgroup_max_descendants_show(struct seq_file *, void *);
3493:	static ssize_t cgroup_max_descendants_write(struct kernfs_open_file *, char *, size_t, loff_t);
3627:	static int cgroup_memory_pressure_show(struct seq_file *, void *);
3678:	static ssize_t cgroup_memory_pressure_write(struct kernfs_open_file *, char *, size_t, loff_t);
2341:	static void cgroup_migrate_add_task(struct task_struct *, struct cgroup_mgctx *);
2441:	static int cgroup_migrate_execute(struct cgroup_mgctx *);
3692:	static __poll_t cgroup_pressure_poll(struct kernfs_open_file *, poll_table *);
3700:	static void cgroup_pressure_release(struct kernfs_open_file *);
3642:	static ssize_t cgroup_pressure_write(struct kernfs_open_file *, char *, size_t, enum psi_res);
2906:	static void cgroup_print_ss_mask(struct seq_file *, u16);
4736:	static void *cgroup_procs_next(struct seq_file *, void *, loff_t *);
4728:	static void cgroup_procs_release(struct kernfs_open_file *);
4790:	static int cgroup_procs_show(struct seq_file *, void *);
4773:	static void *cgroup_procs_start(struct seq_file *, loff_t *);
4911:	static ssize_t cgroup_procs_write(struct kernfs_open_file *, char *, size_t, loff_t);
4812:	static int cgroup_procs_write_permission(struct cgroup *, struct cgroup *, struct super_block *, struct cgroup_namespace *);
3062:	static void cgroup_propagate_control(struct cgroup *);
1906:	static int cgroup_reconfigure(struct fs_context *);
4108:	static int cgroup_rm_cftypes_locked(struct cftype *);
3042:	static void cgroup_save_control(struct cgroup *);
3874:	static void *cgroup_seqfile_next(struct seq_file *, void *, loff_t *);
3885:	static int cgroup_seqfile_show(struct seq_file *, void *);
3869:	static void *cgroup_seqfile_start(struct seq_file *, loff_t *);
3879:	static void cgroup_seqfile_stop(struct seq_file *, void *);
1895:	static int cgroup_show_options(struct seq_file *, struct kernfs_root *);
3576:	static int cgroup_stat_show(struct seq_file *, void *);
2932:	static int cgroup_subtree_control_show(struct seq_file *, void *);
3291:	static ssize_t cgroup_subtree_control_write(struct kernfs_open_file *, char *, size_t, loff_t);
6691:	static int cgroup_sysfs_init(void);
4917:	static void *cgroup_threads_start(struct seq_file *, loff_t *);
4922:	static ssize_t cgroup_threads_write(struct kernfs_open_file *, char *, size_t, loff_t);
478:	static struct cgroup_subsys_state *cgroup_tryget_css(struct cgroup *, struct cgroup_subsys *);
3442:	static int cgroup_type_show(struct seq_file *, void *);
3458:	static ssize_t cgroup_type_write(struct kernfs_open_file *, char *, size_t, loff_t);
2949:	static int cgroup_update_dfl_csses(struct cgroup *);
792:	static void cgroup_update_populated(struct cgroup *, bool);
5893:	static int cgroup_wq_init(void);
974:	static bool compare_css_sets(struct css_set *, struct css_set *, struct cgroup *, struct cgroup_subsys_state **);
3607:	static int cpu_stat_show(struct seq_file *, void *);
2234:	static int cpuset_init_fs_context(struct fs_context *);
1389:	static struct cgroup *cset_cgroup_from_root(struct css_set *, struct cgroup_root *);
1642:	static void css_clear_dir(struct cgroup_subsys_state *);
5234:	static struct cgroup_subsys_state *css_create(struct cgroup *, struct cgroup_subsys *);
5043:	static void css_free_rwork_fn(struct work_struct *);
5513:	static void css_killed_ref_fn(struct percpu_ref *);
5495:	static void css_killed_work_fn(struct work_struct *);
1671:	static int css_populate_dir(struct cgroup_subsys_state *);
5148:	static void css_release(struct percpu_ref *);
5092:	static void css_release_work_fn(struct work_struct *);
872:	static void css_set_move_task(struct task_struct *, struct css_set *, struct css_set *, bool);
4587:	static void css_task_iter_advance(struct css_task_iter *);
4527:	static void css_task_iter_advance_css_set(struct css_task_iter *);
3095:	static bool css_visible(struct cgroup_subsys_state *, struct cgroup_subsys_state *);
6651:	static ssize_t delegate_show(struct kobject *, struct kobj_attribute *, char *);
6371:	static int enable_cgroup_debug(char *);
6670:	static ssize_t features_show(struct kobject *, struct kobj_attribute *, char *);
1172:	static struct css_set *find_css_set(struct css_set *, struct cgroup *);
1053:	static struct css_set *find_existing_css_set(struct css_set *, struct cgroup *, struct cgroup_subsys_state **);
1097:	static void free_cgrp_cset_links(struct list_head *);
5157:	static void init_and_link_css(struct cgroup_subsys_state *, struct cgroup_subsys *, struct cgroup *);
1914:	static void init_cgroup_housekeeping(struct cgroup *);
5533:	static void kill_css(struct cgroup_subsys_state *);
1139:	static void link_css_set(struct list_head *, struct css_set *, struct cgroup *);
5186:	static int online_css(struct cgroup_subsys_state *);
6629:	static ssize_t show_delegatable_files(struct cftype *, char *, ssize_t, const char *);

File kernel/cgroup/cpuset.c:
3617:	void __cpuset_memory_pressure_bump(void);
3467:	bool __cpuset_node_allowed(int, gfp_t);
3325:	void cpuset_cpus_allowed(struct task_struct *, struct cpumask *);
3348:	void cpuset_cpus_allowed_fallback(struct task_struct *);
3042:	void cpuset_force_rebuild(void);
2931:	int cpuset_init(void);
3374:	void cpuset_init_current_mems_allowed(void);
3299:	void cpuset_init_smp(void);
3533:	int cpuset_mem_spread_node(void);
3389:	nodemask_t cpuset_mems_allowed(struct task_struct *);
3564:	int cpuset_mems_allowed_intersects(const struct task_struct *, const struct task_struct *);
3409:	int cpuset_nodemask_valid_mems_allowed(nodemask_t *);
3576:	void cpuset_print_current_mems_allowed(void);
344:	void cpuset_read_lock(void);
349:	void cpuset_read_unlock(void);
3542:	int cpuset_slab_spread_node(void);
3665:	void cpuset_task_status_allowed(struct seq_file *, struct task_struct *);
3262:	void cpuset_update_active_cpus(void);
3272:	void cpuset_wait_for_hotplug(void);
1855:	bool current_cpuset_is_being_rebound(void);
3634:	int proc_cpuset_show(struct seq_file *, struct pid_namespace *, struct pid *, struct task_struct *);
1049:	void rebuild_sched_domains(void);
527:	static struct cpuset *alloc_trial_cpuset(struct cpuset *);
1088:	static void compute_effective_cpumask(struct cpumask *, struct cpuset *, struct cpuset *);
2201:	static void cpuset_attach(struct cgroup_taskset *);
2876:	static void cpuset_bind(struct cgroup_subsys_state *);
2144:	static int cpuset_can_attach(struct cgroup_taskset *);
2183:	static void cpuset_cancel_attach(struct cgroup_taskset *);
1656:	static void cpuset_change_task_nodemask(struct task_struct *, nodemask_t *);
2443:	static int cpuset_common_seq_show(struct seq_file *, void *);
2738:	static struct cgroup_subsys_state *cpuset_css_alloc(struct cgroup_subsys_state *);
2869:	static void cpuset_css_free(struct cgroup_subsys_state *);
2841:	static void cpuset_css_offline(struct cgroup_subsys_state *);
2763:	static int cpuset_css_online(struct cgroup_subsys_state *);
2899:	static void cpuset_fork(struct task_struct *);
3056:	static void cpuset_hotplug_update_tasks(struct cpuset *, struct tmpmasks *);
3164:	static void cpuset_hotplug_workfn(struct work_struct *);
1624:	static void cpuset_migrate_mm(struct mm_struct *, const nodemask_t *, const nodemask_t *);
1613:	static void cpuset_migrate_mm_workfn(struct work_struct *);
1641:	static void cpuset_post_attach(void);
2506:	static s64 cpuset_read_s64(struct cgroup_subsys_state *, struct cftype *);
2475:	static u64 cpuset_read_u64(struct cgroup_subsys_state *, struct cftype *);
3282:	static int cpuset_track_online_nodes(struct notifier_block *, unsigned long, void *);
434:	static void cpuset_update_task_spread_flag(struct cpuset *, struct task_struct *);
2370:	static ssize_t cpuset_write_resmask(struct kernfs_open_file *, char *, size_t, loff_t);
2341:	static int cpuset_write_s64(struct cgroup_subsys_state *, struct cftype *, s64);
2292:	static int cpuset_write_u64(struct cgroup_subsys_state *, struct cftype *, u64);
2100:	static void fmeter_update(struct fmeter *);
745:	static int generate_sched_domains(cpumask_var_t **, struct sched_domain_attr **);
390:	static void guarantee_online_cpus(struct cpuset *, struct cpumask *);
420:	static void guarantee_online_mems(struct cpuset *, nodemask_t *);
3020:	static void hotplug_update_tasks(struct cpuset *, bool, bool, nodemask_t *, struct cpumask *);
2981:	static void hotplug_update_tasks_legacy(struct cpuset *, bool, bool, nodemask_t *, struct cpumask *);
456:	static int is_cpuset_subset(const struct cpuset *, const struct cpuset *);
935:	static void rebuild_root_domains(void);
992:	static void rebuild_sched_domains_locked(void);
2960:	static void remove_tasks_in_empty_cpuset(struct cpuset *);
2521:	static int sched_partition_show(struct seq_file *, void *);
2539:	static ssize_t sched_partition_write(struct kernfs_open_file *, char *, size_t, loff_t);
1515:	static int update_cpumask(struct cpuset *, struct cpuset *, const char *);
1332:	static void update_cpumasks_hier(struct cpuset *, struct tmpmasks *);
665:	static void update_domain_attr_tree(struct sched_domain_attr *, struct cpuset *);
1911:	static int update_flag(cpuset_flagbits_t, struct cpuset *, int);
1803:	static int update_nodemask(struct cpuset *, struct cpuset *, const char *);
1747:	static void update_nodemasks_hier(struct cpuset *, nodemask_t *);
1152:	static int update_parent_subparts_cpumask(struct cpuset *, int, struct cpumask *, struct tmpmasks *);
1959:	static int update_prstate(struct cpuset *, int);
1486:	static void update_sibling_cpumasks(struct cpuset *, struct cpuset *, struct tmpmasks *);
1066:	static void update_tasks_cpumask(struct cpuset *);
1891:	static void update_tasks_flags(struct cpuset *);
1684:	static void update_tasks_nodemask(struct cpuset *);
922:	static void update_tasks_root_domain(struct cpuset *);
575:	static int validate_change(struct cpuset *, struct cpuset *);

File kernel/cgroup/freezer.c:
107:	void cgroup_enter_frozen(void);
260:	void cgroup_freeze(struct cgroup *, bool);
222:	void cgroup_freezer_migrate_task(struct task_struct *, struct cgroup *, struct cgroup *);
131:	void cgroup_leave_frozen(bool);
52:	void cgroup_update_frozen(struct cgroup *);
177:	static void cgroup_do_freeze(struct cgroup *, bool);
155:	static void cgroup_freeze_task(struct task_struct *, bool);
14:	static void cgroup_propagate_frozen(struct cgroup *, bool);

File kernel/cgroup/legacy_freezer.c:
65:	bool cgroup_freezing(struct task_struct *);
318:	static void freeze_cgroup(struct freezer *);
349:	static void freezer_apply_state(struct freezer *, bool, unsigned int);
158:	static void freezer_attach(struct cgroup_taskset *);
385:	static void freezer_change_state(struct freezer *, bool);
86:	static struct cgroup_subsys_state *freezer_css_alloc(struct cgroup_subsys_state *);
144:	static void freezer_css_free(struct cgroup_subsys_state *);
130:	static void freezer_css_offline(struct cgroup_subsys_state *);
105:	static int freezer_css_online(struct cgroup_subsys_state *);
203:	static void freezer_fork(struct task_struct *);
445:	static u64 freezer_parent_freezing_read(struct cgroup_subsys_state *, struct cftype *);
291:	static int freezer_read(struct seq_file *, void *);
437:	static u64 freezer_self_freezing_read(struct cgroup_subsys_state *, struct cftype *);
419:	static ssize_t freezer_write(struct kernfs_open_file *, char *, size_t, loff_t);
329:	static void unfreeze_cgroup(struct freezer *);
244:	static void update_if_frozen(struct cgroup_subsys_state *);

File kernel/cgroup/namespace.c:
50:	struct cgroup_namespace *copy_cgroup_ns(unsigned long, struct user_namespace *, struct cgroup_namespace *);
40:	void free_cgroup_ns(struct cgroup_namespace *);
153:	static int cgroup_namespaces_init(void);
118:	static struct ns_common *cgroupns_get(struct task_struct *);
98:	static int cgroupns_install(struct nsset *, struct ns_common *);
139:	static struct user_namespace *cgroupns_owner(struct ns_common *);
134:	static void cgroupns_put(struct ns_common *);

File kernel/cgroup/pids.c:
171:	static int pids_can_attach(struct cgroup_taskset *);
218:	static int pids_can_fork(struct task_struct *, struct css_set *);
196:	static void pids_cancel_attach(struct cgroup_taskset *);
242:	static void pids_cancel_fork(struct task_struct *, struct css_set *);
69:	static struct cgroup_subsys_state *pids_css_alloc(struct cgroup_subsys_state *);
83:	static void pids_css_free(struct cgroup_subsys_state *);
306:	static s64 pids_current_read(struct cgroup_subsys_state *, struct cftype *);
314:	static int pids_events_show(struct seq_file *, void *);
292:	static int pids_max_show(struct seq_file *, void *);
262:	static ssize_t pids_max_write(struct kernfs_open_file *, char *, size_t, loff_t);
255:	static void pids_release(struct task_struct *);

File kernel/cgroup/rdma.c:
314:	void rdmacg_register_device(struct rdmacg_device *);
259:	int rdmacg_try_charge(struct rdma_cgroup **, struct rdmacg_device *, enum rdmacg_resource_type);
227:	void rdmacg_uncharge(struct rdma_cgroup *, struct rdmacg_device *, enum rdmacg_resource_type);
334:	void rdmacg_unregister_device(struct rdmacg_device *);
103:	static void free_cg_rpool_locked(struct rdmacg_resource_pool *);
129:	static struct rdmacg_resource_pool *get_cg_rpool_locked(struct rdma_cgroup *, struct rdmacg_device *);
356:	static int parse_resource(char *, int *);
563:	static struct cgroup_subsys_state *rdmacg_css_alloc(struct cgroup_subsys_state *);
575:	static void rdmacg_css_free(struct cgroup_subsys_state *);
591:	static void rdmacg_css_offline(struct cgroup_subsys_state *);
524:	static int rdmacg_resource_read(struct seq_file *, void *);
425:	static ssize_t rdmacg_resource_set_max(struct kernfs_open_file *, char *, size_t, loff_t);
205:	static void rdmacg_uncharge_hierarchy(struct rdma_cgroup *, struct rdmacg_device *, struct rdma_cgroup *, enum rdmacg_resource_type);

File kernel/cgroup/rstat.c:
368:	void __cgroup_account_cputime(struct cgroup *, u64);
378:	void __cgroup_account_cputime_field(struct cgroup *, enum cpu_usage_stat, u64);
439:	void cgroup_base_stat_cputime_show(struct seq_file *);
289:	void cgroup_rstat_boot(void);
270:	void cgroup_rstat_exit(struct cgroup *);
198:	void cgroup_rstat_flush(struct cgroup *);
231:	void cgroup_rstat_flush_hold(struct cgroup *);
213:	void cgroup_rstat_flush_irqsafe(struct cgroup *);
242:	void cgroup_rstat_flush_release(void);
248:	int cgroup_rstat_init(struct cgroup *);
25:	void cgroup_rstat_updated(struct cgroup *, int);
148:	static void cgroup_rstat_flush_locked(struct cgroup *, bool);
409:	static void root_cgroup_cputime(struct task_cputime *);

File kernel/compat.c:
144:	long __ia32_compat_sys_sched_getaffinity(const struct pt_regs *);
124:	long __ia32_compat_sys_sched_setaffinity(const struct pt_regs *);
40:	long __ia32_compat_sys_sigprocmask(const struct pt_regs *);
277:	void *compat_alloc_user_space(unsigned long);
193:	long compat_get_bitmap(unsigned long *, const compat_ulong_t *, unsigned long);
222:	long compat_put_bitmap(compat_ulong_t *, unsigned long *, unsigned long);
179:	int get_compat_sigevent(struct sigevent *, const struct compat_sigevent *);
250:	int get_compat_sigset(sigset_t *, const compat_sigset_t *);
83:	int put_compat_rusage(const struct rusage *, struct compat_rusage *);

File kernel/configs.c:
70:	static void ikconfig_cleanup(void);
55:	static int ikconfig_init(void);
41:	static ssize_t ikconfig_read_current(struct file *, char *, size_t, loff_t *);

File kernel/context_tracking.c:
62:	void __context_tracking_enter(enum ctx_state);
146:	void __context_tracking_exit(enum ctx_state);
191:	void context_tracking_cpu_set(int);
106:	void context_tracking_enter(enum ctx_state);
171:	void context_tracking_exit(enum ctx_state);
128:	void context_tracking_user_enter(void);
185:	void context_tracking_user_exit(void);
34:	static bool context_tracking_recursion_enter(void);

File kernel/cpu.c:
2100:	void __cpuhp_remove_state(enum cpuhp_state, bool);
2062:	void __cpuhp_remove_state_cpuslocked(enum cpuhp_state, bool);
1998:	int __cpuhp_setup_state(enum cpuhp_state, const char *, bool, int (*)(unsigned int), int (*)(unsigned int), bool);
1939:	int __cpuhp_setup_state_cpuslocked(enum cpuhp_state, const char *, bool, int (*)(unsigned int), int (*)(unsigned int), bool);
1910:	int __cpuhp_state_add_instance(enum cpuhp_state, struct hlist_node *, bool);
1865:	int __cpuhp_state_add_instance_cpuslocked(enum cpuhp_state, struct hlist_node *, bool);
2014:	int __cpuhp_state_remove_instance(enum cpuhp_state, struct hlist_node *, bool);
1356:	int add_cpu(unsigned int);
1464:	void arch_thaw_secondary_cpus_begin(void);
2565:	void boot_cpu_hotplug_init(void);
2547:	void boot_cpu_init(void);
1376:	int bringup_hibernate_cpu(unsigned int);
1391:	void bringup_nonboot_cpus(unsigned int);
888:	void clear_tasks_mm_cpumask(int);
1137:	int cpu_device_down(struct device *);
1351:	int cpu_device_up(struct device *);
352:	void cpu_hotplug_disable(void);
367:	void cpu_hotplug_enable(void);
273:	void cpu_maps_update_begin(void);
278:	void cpu_maps_update_done(void);
2610:	bool cpu_mitigations_auto_nosmt(void);
2603:	bool cpu_mitigations_off(void);
414:	void cpu_smt_check_topology(void);
396:	void cpu_smt_disable(bool);
445:	bool cpu_smt_possible(void);
1230:	void cpuhp_online_idle(enum cpuhp_state);
1010:	void cpuhp_report_idle_dead(void);
2127:	int cpuhp_smt_disable(enum cpuhp_smt_control);
2159:	int cpuhp_smt_enable(void);
819:	void cpuhp_threads_init(void);
293:	void cpus_read_lock(void);
299:	int cpus_read_trylock(void);
305:	void cpus_read_unlock(void);
311:	void cpus_write_lock(void);
316:	void cpus_write_unlock(void);
1406:	int freeze_secondary_cpus(int);
2518:	void init_cpu_online(const struct cpumask *);
2513:	void init_cpu_possible(const struct cpumask *);
2508:	void init_cpu_present(const struct cpumask *);
321:	void lockdep_assert_cpus_held(void);
1207:	void notify_cpu_starting(unsigned int);
1142:	int remove_cpu(unsigned int);
2523:	void set_cpu_online(unsigned int, bool);
1154:	void smp_shutdown_nonboot_cpus(unsigned int);
1472:	void thaw_secondary_cpus(void);
360:	static void __cpu_hotplug_enable(void);
2335:	static ssize_t __store_smt_control(const char *, size_t, struct device_attribute *, struct device *);
1050:	static int _cpu_down(unsigned int, int, enum cpuhp_state);
1249:	static int _cpu_up(unsigned int, int, enum cpuhp_state);
1504:	static int alloc_frozen_cpus(void);
550:	static int bringup_cpu(unsigned int);
522:	static int bringup_wait_for_ap(unsigned int);
1524:	static int cpu_hotplug_pm_callback(struct notifier_block *, unsigned long, void *);
1547:	static int cpu_hotplug_pm_sync_init(void);
1309:	static int cpu_up(unsigned int, enum cpuhp_state);
1003:	static void cpuhp_complete_idle_dead(void *);
638:	static void cpuhp_create(unsigned int);
741:	static int cpuhp_invoke_ap_callback(int, enum cpuhp_state, bool, struct hlist_node *);
150:	static int cpuhp_invoke_callback(unsigned int, enum cpuhp_state, bool, struct hlist_node *, struct hlist_node **);
1812:	static int cpuhp_issue_call(int, enum cpuhp_state, bool, struct hlist_node *);
507:	static int cpuhp_kick_ap(struct cpuhp_cpu_state *, enum cpuhp_state);
791:	static int cpuhp_kick_ap_work(unsigned int);
1846:	static void cpuhp_rollback_install(int, enum cpuhp_state, struct hlist_node *);
646:	static int cpuhp_should_run(unsigned int);
2433:	static int cpuhp_sysfs_init(void);
667:	static void cpuhp_thread_fun(unsigned int);
576:	static int finish_cpu(unsigned int);
2586:	static int mitigations_parse_cmdline(char *);
2277:	static ssize_t show_cpuhp_fail(struct device *, struct device_attribute *, char *);
2181:	static ssize_t show_cpuhp_state(struct device *, struct device_attribute *, char *);
2300:	static ssize_t show_cpuhp_states(struct device *, struct device_attribute *, char *);
2230:	static ssize_t show_cpuhp_target(struct device *, struct device_attribute *, char *);
2409:	static ssize_t show_smt_active(struct device *, struct device_attribute *, char *);
2393:	static ssize_t show_smt_control(struct device *, struct device_attribute *, char *);
420:	static int smt_cmdline_disable(char *);
2401:	static ssize_t store_smt_control(struct device *, struct device_attribute *, const char *, size_t);
918:	static int take_cpu_down(void *);
954:	static int takedown_cpu(unsigned int);
2240:	static ssize_t write_cpuhp_fail(struct device *, struct device_attribute *, const char *, size_t);
2190:	static ssize_t write_cpuhp_target(struct device *, struct device_attribute *, const char *, size_t);

File kernel/crash_core.c:
476:	Elf64_Word *append_elf_note(Elf64_Word *, char *, unsigned int, void *, size_t);
551:	void arch_crash_save_vmcoreinfo(void);
517:	void crash_save_vmcoreinfo(void);
509:	void crash_update_vmcoreinfo_safecopy(void *);
493:	void final_note(Elf64_Word *);
554:	phys_addr_t paddr_vmcoreinfo_note(void);
292:	int parse_crashkernel(char *, unsigned long long, unsigned long long *, unsigned long long *);
301:	int parse_crashkernel_high(char *, unsigned long long, unsigned long long *, unsigned long long *);
310:	int parse_crashkernel_low(char *, unsigned long long, unsigned long long *, unsigned long long *);
384:	void reserve_crashkernel(void);
530:	void vmcoreinfo_append_str(const char *, ...);
251:	static int __parse_crashkernel(char *, unsigned long long, unsigned long long *, unsigned long long *, const char *, const char *);
573:	static void add_build_id_vmcoreinfo(void);
607:	static int crash_save_vmcoreinfo_init(void);
210:	static char *get_last_crashkernel(char *, const char *, const char *);
60:	static int parse_crashkernel_mem(char *, unsigned long long, unsigned long long *, unsigned long long *);
184:	static int parse_crashkernel_suffix(char *, unsigned long long *, const char *);
324:	static int reserve_crashkernel_low(void);
498:	static void update_vmcoreinfo_note(void);

File kernel/crash_dump.c:
29:	static int setup_elfcorehdr(char *);

File kernel/cred.c:
132:	void __put_cred(struct cred *);
523:	void abort_creds(struct cred *);
437:	int commit_creds(struct cred *);
333:	int copy_creds(struct task_struct *, unsigned long);
213:	struct cred *cred_alloc_blank(void);
616:	int cred_fscmp(const struct cred *, const struct cred *);
659:	void cred_init(void);
157:	void exit_creds(struct task_struct *);
193:	const struct cred *get_task_cred(struct task_struct *);
544:	const struct cred *override_creds(const struct cred *);
250:	struct cred *prepare_creds(void);
300:	struct cred *prepare_exec_creds(void);
682:	struct cred *prepare_kernel_cred(struct task_struct *);
585:	void revert_creds(const struct cred *);
779:	int set_create_files_as(struct cred *, struct inode *);
741:	int set_security_override(struct cred *, u32);
757:	int set_security_override_from_ctx(struct cred *, const char *);
93:	static void put_cred_rcu(struct callback_head *);

File kernel/debug/debug_core.c:
314:	int dbg_activate_sw_breakpoints(void);
380:	int dbg_deactivate_sw_breakpoints(void);
1216:	int dbg_io_get_char(void);
1025:	void dbg_late_init(void);
441:	int dbg_remove_all_break(void);
403:	int dbg_remove_sw_break(unsigned long);
339:	int dbg_set_sw_break(unsigned long);
477:	void kdb_dump_stack_on_cpu(int);
211:	int kgdb_arch_init(void);
1021:	void kgdb_arch_late(void);
205:	unsigned long kgdb_arch_pc(int, struct pt_regs *);
174:	int kgdb_arch_remove_breakpoint(struct kgdb_bkpt *);
160:	int kgdb_arch_set_breakpoint(struct kgdb_bkpt *);
1236:	void kgdb_breakpoint(void);
228:	void kgdb_call_nmi_hook(void *);
465:	void kgdb_free_init_mem(void);
834:	int kgdb_handle_exception(int, int, int, struct pt_regs *);
429:	int kgdb_has_hit_break(unsigned long);
417:	int kgdb_isremovedbreak(unsigned long);
884:	int kgdb_nmicallback(int, void *);
906:	int kgdb_nmicallin(int, int, void *, int, atomic_t *);
994:	void kgdb_panic(const char *);
1135:	int kgdb_register_io_module(struct kgdb_io *);
278:	void kgdb_roundup_cpus(void);
1118:	void kgdb_schedule_breakpoint(void);
216:	int kgdb_skipexception(int, struct pt_regs *);
245:	void kgdb_smp_call_nmi_hook(void);
1191:	void kgdb_unregister_io_module(struct kgdb_io *);
181:	int kgdb_validate_break_address(unsigned long);
1037:	static int dbg_notify_reboot(struct notifier_block *, unsigned long, void *);
584:	static void dbg_touch_watchdogs(void);
932:	static void kgdb_console_write(struct console *, const char *, unsigned int);
592:	static int kgdb_cpu_enter(struct kgdb_state *, struct pt_regs *, int);
290:	static void kgdb_flush_swbreak_addr(unsigned long);
1013:	static void kgdb_initial_breakpoint(void);
516:	static int kgdb_io_ready(int);
536:	static int kgdb_reenter_check(struct kgdb_state *);
1110:	static void kgdb_tasklet_bpt(unsigned long);
874:	static int module_event(struct notifier_block *, unsigned long, void *);
954:	static int opt_kgdb_con(char *);
1246:	static int opt_kgdb_wait(char *);
143:	static int opt_nokgdbroundup(char *);
969:	static void sysrq_handle_dbg(int);

File kernel/debug/gdbstub.c:
354:	void gdb_regs_to_pt_regs(unsigned long *, struct pt_regs *);
957:	int gdb_serial_stub(struct kgdb_state *);
1127:	void gdbstub_exit(int);
198:	void gdbstub_msg_write(const char *, int);
1095:	int gdbstub_state(struct kgdb_state *, char *);
293:	int kgdb_hex2long(char **, unsigned long *);
268:	int kgdb_hex2mem(char *, char *, int);
239:	char *kgdb_mem2hex(char *, char *, int);
342:	void pt_regs_to_gdb_regs(unsigned long *, struct pt_regs *);
863:	static void gdb_cmd_break(struct kgdb_state *);
652:	static void gdb_cmd_detachkill(struct kgdb_state *);
558:	static void gdb_cmd_memread(struct kgdb_state *);
698:	static void gdb_cmd_query(struct kgdb_state *);
614:	static void gdb_cmd_reg_set(struct kgdb_state *);
812:	static void gdb_cmd_task(struct kgdb_state *);
494:	static void gdb_get_regs_helper(struct kgdb_state *);
60:	static int gdbstub_read_wait(void);
91:	static void get_packet(char *);
433:	static struct task_struct *getthread(int, struct pt_regs *);
408:	static char *pack_threadid(char *, unsigned char *);
145:	static void put_packet(char *);
368:	static int write_mem_msg(int);

File kernel/debug/kdb/kdb_bp.c:
174:	void kdb_bp_install(struct pt_regs *);
205:	void kdb_bp_remove(void);
527:	void kdb_initbptab(void);
125:	static int _kdb_bp_install(struct pt_regs *, kdb_bp_t *);
386:	static int kdb_bc(int, const char **);
277:	static int kdb_bp(int, const char **);
48:	static int kdb_parsebp(int, const char **, int *, kdb_bp_t *);
238:	static void kdb_printbp(kdb_bp_t *, int);
514:	static int kdb_ss(int, const char **);

File kernel/debug/kdb/kdb_bt.c:
127:	int kdb_bt(int, const char **);
77:	static int kdb_bt1(struct task_struct *, unsigned long, bool);
107:	static void kdb_bt_cpu(unsigned long);
22:	static void kdb_show_stack(struct task_struct *, void *);

File kernel/debug/kdb/kdb_debugger.c:
45:	int kdb_common_deinit_state(void);
37:	int kdb_common_init_state(struct kgdb_state *);
174:	void kdb_gdb_state_pass(char *);
53:	int kdb_stub(struct kgdb_state *);

File kernel/debug/kdb/kdb_io.c:
126:	char kdb_getchar(void);
436:	char *kdb_getstr(char *, size_t, const char *);
859:	int kdb_printf(const char *, ...);
583:	int vkdb_printf(enum kdb_msgsrc, const char *, struct __va_list_tag *);
462:	static void kdb_input_flush(void);
545:	static void kdb_msg_write(const char *, int);
196:	static char *kdb_read(char *, size_t);
515:	static int kdb_search_string(char *, char *);
35:	static int kgdb_transition_check(char *);

File kernel/debug/kdb/kdb_keyboard.c:
35:	int kdb_get_kbd_char(void);
199:	void kdb_kbd_cleanup_state(void);

File kernel/debug/kdb/kdb_main.c:
189:	struct task_struct *kdb_curr_task(int);
2909:	void kdb_init(int);
1400:	int kdb_main_loop(kdb_reason_t, kdb_reason_t, int, kdb_dbtrap_t, struct pt_regs *);
916:	int kdb_parse(const char *);
1368:	void kdb_print_state(const char *, int);
2324:	void kdb_ps1(const struct task_struct *);
2290:	void kdb_ps_suppressed(void);
2739:	int kdb_register(char *, kdb_func_t, char *, char *, short);
2663:	int kdb_register_flags(char *, kdb_func_t, char *, char *, short, kdb_cmdflags_t);
381:	int kdb_set(int, const char **);
2758:	int kdb_unregister(char *);
499:	int kdbgetaddrarg(int, const char **, int *, unsigned long *, long *, char **);
228:	char *kdbgetenv(const char *);
315:	int kdbgetintenv(const char *, int *);
358:	int kdbgetu64arg(const char *, u64 *);
336:	int kdbgetularg(const char *, unsigned long *);
2256:	static int kdb_cpu(int, const char **);
2211:	static void kdb_cpu_status(void);
712:	static int kdb_defcmd(int, const char **);
679:	static int kdb_defcmd2(const char *, const char *);
2183:	static int kdb_disable_nmi(int, const char **);
2096:	static int kdb_dmesg(int, const char **);
2003:	static int kdb_ef(int, const char **);
2074:	static int kdb_env(int, const char **);
788:	static int kdb_exec_defcmd(int, const char **);
1796:	static int kdb_go(int, const char **);
2634:	static int kdb_grep_help(int, const char **);
2428:	static int kdb_help(int, const char **);
2779:	static void kdb_inittab(void);
2420:	static int kdb_kgdb(int, const char **);
2455:	static int kdb_kill(int, const char **);
1188:	static int kdb_local(kdb_reason_t, struct pt_regs *, kdb_dbtrap_t, int);
2027:	static int kdb_lsmod(int, const char **);
1555:	static int kdb_md(int, const char **);
1490:	static void kdb_md_line(const char *, unsigned long, int, int, int, int, int, int);
1753:	static int kdb_mm(int, const char **);
2192:	static int kdb_param_enable_nmi(const char *, const struct kernel_param *);
2564:	static int kdb_per_cpu(int, const char **);
2388:	static int kdb_pid(int, const char **);
2352:	static int kdb_ps(int, const char **);
1841:	static int kdb_rd(const char **, int);
1127:	static int kdb_reboot(int, const char **);
1911:	static int kdb_rm(int, const char **);
1148:	static void kdb_set_current_task(struct task_struct *);
1978:	static int kdb_sr(int, const char **);
2515:	static int kdb_summary(int, const char **);
827:	static void parse_grep(const char *);

File kernel/debug/kdb/kdb_support.c:
804:	void debug_kfree(void *);
746:	void *debug_kmalloc(size_t, gfp_t);
863:	void debug_kusage(void);
186:	int kallsyms_symbol_complete(char *, int);
230:	int kallsyms_symbol_next(char *, int, int);
326:	int kdb_getarea_size(void *, unsigned long, size_t);
403:	int kdb_getphysword(unsigned long *, unsigned long, size_t);
453:	int kdb_getword(unsigned long *, unsigned long, size_t);
675:	void kdb_print_nameval(const char *, unsigned long);
351:	int kdb_putarea_size(unsigned long, void *, size_t);
502:	int kdb_putword(unsigned long, unsigned long, size_t);
924:	void kdb_restore_flags(void);
918:	void kdb_save_flags(void);
307:	char *kdb_strdup(const char *, gfp_t);
258:	void kdb_symbol_print(unsigned long, const kdb_symtab_t *, unsigned int);
662:	unsigned long kdb_task_state(const struct task_struct *, unsigned long);
621:	char kdb_task_state_char(const struct task_struct *);
561:	unsigned long kdb_task_state_string(const char *);
40:	int kdbgetsymval(const char *, kdb_symtab_t *);
82:	int kdbnearsym(unsigned long, kdb_symtab_t *);
161:	void kdbnearsym_cleanup(void);
723:	static int get_dap_lock(void);
377:	static int kdb_getphys(void *, unsigned long, size_t);

File kernel/delayacct.c:
85:	int __delayacct_add_tsk(struct taskstats *, struct task_struct *);
68:	void __delayacct_blkio_end(struct task_struct *);
59:	void __delayacct_blkio_start(void);
140:	__u64 __delayacct_blkio_ticks(struct task_struct *);
157:	void __delayacct_freepages_end(void);
152:	void __delayacct_freepages_start(void);
171:	void __delayacct_thrashing_end(void);
166:	void __delayacct_thrashing_start(void);
34:	void __delayacct_tsk_init(struct task_struct *);
28:	void delayacct_init(void);
21:	static int delayacct_setup_disable(char *);

File kernel/dma.c:
88:	void free_dma(unsigned int);
70:	int request_dma(unsigned int, const char *);
138:	static int proc_dma_init(void);
118:	static int proc_dma_show(struct seq_file *, void *);

File kernel/dma/direct.c:
133:	void *dma_direct_alloc(struct device *, size_t, dma_addr_t *, gfp_t, unsigned long);
279:	struct page *dma_direct_alloc_pages(struct device *, size_t, dma_addr_t *, enum dma_data_direction, gfp_t);
446:	bool dma_direct_can_mmap(struct device *);
244:	void dma_direct_free(struct device *, size_t, void *, dma_addr_t, unsigned long);
317:	void dma_direct_free_pages(struct device *, size_t, struct page *, dma_addr_t, enum dma_data_direction);
39:	u64 dma_direct_get_required_mask(struct device *);
433:	int dma_direct_get_sgtable(struct device *, struct sg_table *, void *, dma_addr_t, size_t, unsigned long);
417:	dma_addr_t dma_direct_map_resource(struct device *, phys_addr_t, size_t, enum dma_data_direction, unsigned long);
396:	int dma_direct_map_sg(struct device *, struct scatterlist *, int, enum dma_data_direction, unsigned long);
495:	size_t dma_direct_max_mapping_size(struct device *);
452:	int dma_direct_mmap(struct device *, struct vm_area_struct *, void *, dma_addr_t, size_t, unsigned long);
504:	bool dma_direct_need_sync(struct device *, dma_addr_t);
526:	int dma_direct_set_offset(struct device *, phys_addr_t, dma_addr_t, u64);
472:	int dma_direct_supported(struct device *, u64);
360:	void dma_direct_sync_sg_for_cpu(struct device *, struct scatterlist *, int, enum dma_data_direction);
337:	void dma_direct_sync_sg_for_device(struct device *, struct scatterlist *, int, enum dma_data_direction);
384:	void dma_direct_unmap_sg(struct device *, struct scatterlist *, int, enum dma_data_direction, unsigned long);
78:	static struct page *__dma_direct_alloc_pages(struct device *, size_t, gfp_t);
68:	static bool dma_coherent_ok(struct device *, phys_addr_t, size_t);
117:	static void *dma_direct_alloc_from_pool(struct device *, size_t, dma_addr_t *, gfp_t);
47:	static gfp_t dma_direct_optimal_gfp_mask(u64, u64 *, struct device *, struct device *);

File kernel/dma/dummy.c:
14:	static dma_addr_t dma_dummy_map_page(struct device *, struct page *, unsigned long, size_t, enum dma_data_direction, unsigned long);
21:	static int dma_dummy_map_sg(struct device *, struct scatterlist *, int, enum dma_data_direction, unsigned long);
7:	static int dma_dummy_mmap(struct device *, struct vm_area_struct *, void *, dma_addr_t, size_t, unsigned long);
28:	static int dma_dummy_supported(struct device *, u64);

File kernel/dma/mapping.c:
421:	void *dma_alloc_attrs(struct device *, size_t, dma_addr_t *, gfp_t, unsigned long);
514:	void *dma_alloc_noncoherent(struct device *, size_t, dma_addr_t *, enum dma_data_direction, gfp_t);
474:	struct page *dma_alloc_pages(struct device *, size_t, dma_addr_t *, enum dma_data_direction, gfp_t);
362:	bool dma_can_mmap(struct device *);
447:	void dma_free_attrs(struct device *, size_t, void *, dma_addr_t, unsigned long);
538:	void dma_free_noncoherent(struct device *, size_t, void *, dma_addr_t, enum dma_data_direction);
499:	void dma_free_pages(struct device *, size_t, struct page *, dma_addr_t, enum dma_data_direction);
635:	unsigned long dma_get_merge_boundary(struct device *);
400:	u64 dma_get_required_mask(struct device *);
321:	int dma_get_sgtable_attrs(struct device *, struct sg_table *, void *, dma_addr_t, size_t, unsigned long);
140:	dma_addr_t dma_map_page_attrs(struct device *, struct page *, size_t, size_t, enum dma_data_direction, unsigned long);
217:	dma_addr_t dma_map_resource(struct device *, phys_addr_t, size_t, enum dma_data_direction, unsigned long);
180:	int dma_map_sg_attrs(struct device *, struct scatterlist *, int, enum dma_data_direction, unsigned long);
611:	size_t dma_max_mapping_size(struct device *);
385:	int dma_mmap_attrs(struct device *, struct vm_area_struct *, void *, dma_addr_t, size_t, unsigned long);
625:	bool dma_need_sync(struct device *, dma_addr_t);
341:	pgprot_t dma_pgprot(struct device *, pgprot_t, unsigned long);
594:	int dma_set_coherent_mask(struct device *, u64);
576:	int dma_set_mask(struct device *, u64);
554:	int dma_supported(struct device *, u64);
282:	void dma_sync_sg_for_cpu(struct device *, struct scatterlist *, int, enum dma_data_direction);
296:	void dma_sync_sg_for_device(struct device *, struct scatterlist *, int, enum dma_data_direction);
254:	void dma_sync_single_for_cpu(struct device *, dma_addr_t, size_t, enum dma_data_direction);
268:	void dma_sync_single_for_device(struct device *, dma_addr_t, size_t, enum dma_data_direction);
162:	void dma_unmap_page_attrs(struct device *, dma_addr_t, size_t, enum dma_data_direction, unsigned long);
242:	void dma_unmap_resource(struct device *, dma_addr_t, size_t, enum dma_data_direction, unsigned long);
202:	void dma_unmap_sg_attrs(struct device *, struct scatterlist *, int, enum dma_data_direction, unsigned long);
82:	void *dmam_alloc_attrs(struct device *, size_t, dma_addr_t *, gfp_t, unsigned long);
58:	void dmam_free_coherent(struct device *, size_t, void *, dma_addr_t);
37:	static int dmam_match(struct device *, void *, void *);
29:	static void dmam_release(struct device *, void *);

File kernel/dma/ops_helpers.c:
61:	struct page *dma_common_alloc_pages(struct device *, size_t, dma_addr_t *, enum dma_data_direction, gfp_t);
84:	void dma_common_free_pages(struct device *, size_t, struct page *, dma_addr_t, enum dma_data_direction);
18:	int dma_common_get_sgtable(struct device *, struct sg_table *, void *, dma_addr_t, size_t, unsigned long);
34:	int dma_common_mmap(struct device *, struct vm_area_struct *, void *, dma_addr_t, size_t, unsigned long);
8:	static struct page *dma_common_vaddr_to_page(void *);

File kernel/dma/pool.c:
268:	struct page *dma_alloc_from_pool(struct device *, size_t, void **, gfp_t, bool (*)(struct device *, phys_addr_t, size_t));
286:	bool dma_free_from_pool(struct device *, void *, size_t);
243:	static struct page *__dma_alloc_from_pool(struct device *, size_t, struct gen_pool *, void **, bool (*)(struct device *, phys_addr_t, size_t));
165:	static struct gen_pool *__dma_atomic_pool_init(size_t, gfp_t);
82:	static int atomic_pool_expand(struct gen_pool *, size_t, gfp_t);
154:	static void atomic_pool_work_fn(struct work_struct *);
190:	static int dma_atomic_pool_init(void);
29:	static int early_coherent_pool(char *);

File kernel/dma/swiotlb.c:
732:	bool is_swiotlb_active(void);
392:	void swiotlb_exit(void);
253:	void swiotlb_init(int);
206:	int swiotlb_init_with_tbl(char *, unsigned long, int);
286:	int swiotlb_late_init_with_default_size(size_t);
338:	int swiotlb_late_init_with_tbl(char *, unsigned long);
697:	dma_addr_t swiotlb_map(struct device *, phys_addr_t, size_t, enum dma_data_direction, unsigned long);
727:	size_t swiotlb_max_mapping_size(struct device *);
138:	unsigned int swiotlb_max_segment(void);
132:	unsigned long swiotlb_nr_tbl(void);
163:	void swiotlb_print_info(void);
144:	void swiotlb_set_max_segment(unsigned int);
154:	unsigned long swiotlb_size_or_default(void);
561:	phys_addr_t swiotlb_tbl_map_single(struct device *, phys_addr_t, size_t, size_t, enum dma_data_direction, unsigned long);
660:	void swiotlb_tbl_sync_single(struct device *, phys_addr_t, size_t, enum dma_data_direction, enum dma_sync_target);
609:	void swiotlb_tbl_unmap_single(struct device *, phys_addr_t, size_t, size_t, enum dma_data_direction, unsigned long);
192:	void swiotlb_update_mem_attributes(void);
486:	static int find_slots(phys_addr_t, size_t, struct device *, struct device *);
110:	static int setup_io_tlb_npages(char *);
418:	static void swiotlb_bounce(phys_addr_t, phys_addr_t, size_t, enum dma_data_direction);
743:	static int swiotlb_create_debugfs(void);

File kernel/entry/common.c:
138:	void arch_do_signal(struct pt_regs *);
289:	irqentry_state_t irqentry_enter(struct pt_regs *);
276:	void irqentry_enter_from_user_mode(struct pt_regs *);
369:	void irqentry_exit(struct pt_regs *, irqentry_state_t);
354:	void irqentry_exit_cond_resched(void);
281:	void irqentry_exit_to_user_mode(struct pt_regs *);
414:	irqentry_state_t irqentry_nmi_enter(struct pt_regs *);
433:	void irqentry_nmi_exit(struct pt_regs *, irqentry_state_t);
91:	long syscall_enter_from_user_mode(struct pt_regs *, long);
105:	void syscall_enter_from_user_mode_prepare(struct pt_regs *);
86:	long syscall_enter_from_user_mode_work(struct pt_regs *, long);
266:	void syscall_exit_to_user_mode(struct pt_regs *);
140:	static unsigned long exit_to_user_mode_loop(struct pt_regs *, unsigned long);
188:	static void exit_to_user_mode_prepare(struct pt_regs *);
243:	static void syscall_exit_to_user_mode_prepare(struct pt_regs *);
225:	static void syscall_exit_work(struct pt_regs *, unsigned long);
44:	static long syscall_trace_enter(struct pt_regs *, unsigned long, long);

File kernel/entry/kvm.c:
33:	int xfer_to_guest_mode_handle_work(struct kvm_vcpu *);
6:	static int xfer_to_guest_mode_work(struct kvm_vcpu *, unsigned long);

File kernel/events/callchain.c:
108:	int get_callchain_buffers(int);
152:	struct perf_callchain_entry *get_callchain_entry(int *);
180:	struct perf_callchain_entry *get_perf_callchain(struct pt_regs *, u32, bool, bool, u32, bool, bool);
43:	void perf_callchain_user(struct perf_callchain_entry_ctx *, struct pt_regs *);
236:	int perf_event_max_stack_handler(struct ctl_table *, int, void *, size_t *, loff_t *);
144:	void put_callchain_buffers(void);
174:	void put_callchain_entry(int);
70:	static int alloc_callchain_buffers(void);
48:	static void release_callchain_buffers_rcu(struct callback_head *);

File kernel/events/core.c:
9168:	void ___perf_sw_event(u32, u64, struct pt_regs *, u64);
11679:	long __ia32_sys_perf_event_open(const struct pt_regs *);
3868:	void __perf_event_task_sched_in(struct task_struct *, struct task_struct *);
3554:	void __perf_event_task_sched_out(struct task_struct *, struct task_struct *);
9179:	void __perf_sw_event(u32, u64, struct pt_regs *, u64);
11679:	long __x64_sys_perf_event_open(const struct pt_regs *);
5731:	void arch_perf_update_userpage(struct perf_event *, struct perf_event_mmap_page *, u64);
9873:	void perf_bp_event(struct perf_event *, void *);
7055:	struct perf_callchain_entry *perf_callchain(struct perf_event *, struct pt_regs *);
470:	int perf_cpu_time_max_percent_handler(struct ctl_table *, int, void *, size_t *, loff_t *);
6728:	void perf_event__output_id_sample(struct perf_event *, struct perf_output_handle *, struct perf_sample_data *);
8890:	int perf_event_account_interrupt(struct perf_event *);
3124:	void perf_event_addr_filters_sync(struct perf_event *);
12562:	const struct perf_event_attr *perf_event_attrs(struct perf_event *);
8332:	void perf_event_aux_event(struct perf_event *, unsigned long, unsigned long, u64);
8687:	void perf_event_bpf_event(struct bpf_prog *, enum perf_bpf_event_type, u16);
7731:	void perf_event_comm(struct task_struct *, bool);
12136:	struct perf_event *perf_event_create_kernel_counter(struct perf_event_attr *, int, struct task_struct *, perf_overflow_handler_t, void *);
12532:	void perf_event_delayed_put(struct task_struct *);
2453:	void perf_event_disable(struct perf_event *);
2463:	void perf_event_disable_inatomic(struct perf_event *);
2444:	void perf_event_disable_local(struct perf_event *);
3024:	void perf_event_enable(struct perf_event *);
7445:	void perf_event_exec(void);
12993:	int perf_event_exit_cpu(unsigned int);
12425:	void perf_event_exit_task(struct task_struct *);
7651:	void perf_event_fork(struct task_struct *);
12484:	void perf_event_free_task(struct task_struct *);
12540:	struct file *perf_event_get(unsigned int);
6696:	void perf_event_header__init_id(struct perf_event_header *, struct perf_sample_data *, struct perf_event *);
13019:	void perf_event_init(void);
12970:	int perf_event_init_cpu(unsigned int);
12875:	int perf_event_init_task(struct task_struct *);
8813:	void perf_event_itrace_started(struct perf_event *);
8574:	void perf_event_ksymbol(u16, u64, u32, bool, const char *);
8297:	void perf_event_mmap(struct vm_area_struct *);
7828:	void perf_event_namespaces(struct task_struct *);
7284:	int perf_event_output(struct perf_event *, struct perf_sample_data *, struct pt_regs *);
7276:	void perf_event_output_backward(struct perf_event *, struct perf_sample_data *, struct pt_regs *);
7268:	void perf_event_output_forward(struct perf_event *, struct perf_sample_data *, struct pt_regs *);
8938:	int perf_event_overflow(struct perf_event *, struct perf_sample_data *, struct pt_regs *);
5362:	u64 perf_event_pause(struct perf_event *, bool);
5478:	int perf_event_period(struct perf_event *, u64);
577:	void perf_event_print_debug(void);
4336:	int perf_event_read_local(struct perf_event *, u64 *, u64 *, u64 *);
5144:	u64 perf_event_read_value(struct perf_event *, u64 *, u64 *);
3157:	int perf_event_refresh(struct perf_event *, int);
4994:	int perf_event_release_kernel(struct perf_event *);
13045:	ssize_t perf_event_sysfs_show(struct device *, struct device_attribute *, char *);
5670:	int perf_event_task_disable(void);
5654:	int perf_event_task_enable(void);
4165:	void perf_event_task_tick(void);
8781:	void perf_event_text_poke(const void *, const void *, size_t, const void *, size_t);
5741:	void perf_event_update_userpage(struct perf_event *);
6325:	void perf_event_wakeup(struct perf_event *);
12554:	const struct perf_event *perf_get_event(struct file *);
8369:	void perf_log_lost_samples(struct perf_event *, u64);
6840:	void perf_output_sample(struct perf_output_handle *, struct perf_event_header *, struct perf_sample_data *, struct perf_event *);
1195:	void perf_pmu_disable(struct pmu *);
1202:	void perf_pmu_enable(struct pmu *);
12215:	void perf_pmu_migrate_context(struct pmu *, int, int);
579:	const char *perf_pmu_name(void);
10787:	int perf_pmu_register(struct pmu *, const char *, int);
2742:	void perf_pmu_resched(struct pmu *);
6588:	long perf_pmu_snapshot_aux(struct perf_buffer *, struct perf_event *, struct perf_output_handle *, unsigned long);
10923:	void perf_pmu_unregister(struct pmu *);
7072:	void perf_prepare_sample(struct perf_event_header *, struct perf_sample_data *, struct perf_event *, struct pt_regs *);
446:	int perf_proc_update_handler(struct ctl_table *, int, void *, size_t *, loff_t *);
6400:	int perf_register_guest_info_callbacks(struct perf_guest_info_callbacks *);
513:	void perf_sample_event_took(u64);
3472:	void perf_sched_cb_dec(struct pmu *);
3483:	void perf_sched_cb_inc(struct pmu *);
9153:	int perf_swevent_get_recursion_context(void);
9161:	void perf_swevent_put_recursion_context(int);
8967:	u64 perf_swevent_set_period(struct perf_event *);
9439:	void perf_tp_event(u16, u64, void *, int, struct pt_regs *, struct hlist_head *, int, struct task_struct *);
9422:	void perf_trace_run_bpf_submit(void *, int, int, struct trace_event_call *, u64, struct pt_regs *, struct hlist_head *, struct task_struct *);
6407:	int perf_unregister_guest_info_callbacks(struct perf_guest_info_callbacks *);
5899:	struct perf_buffer *ring_buffer_get(struct perf_event *);
5914:	void ring_buffer_put(struct perf_buffer *);
8240:	static void __perf_addr_filters_adjust(struct perf_event *, void *);
13119:	static int __perf_cgroup_move(void *);
6704:	static void __perf_event__output_id_sample(struct perf_output_handle *, struct perf_sample_data *);
8855:	static int __perf_event_account_interrupt(struct perf_event *, int);
11645:	static struct perf_event_context *__perf_event_ctx_lock_double(struct perf_event *, struct perf_event_context *);
2394:	static void __perf_event_disable(struct perf_event *, struct perf_cpu_context *, struct perf_event_context *, void *);
2936:	static void __perf_event_enable(struct perf_event *, struct perf_cpu_context *, struct perf_event_context *, void *);
12932:	static void __perf_event_exit_context(void *);
6666:	static void __perf_event_header__init_id(struct perf_event_header *, struct perf_sample_data *, struct perf_event *);
1867:	static void __perf_event_header_size(struct perf_event *, u64);
7469:	static void __perf_event_output_stop(struct perf_event *, void *);
8899:	static int __perf_event_overflow(struct perf_event *, int, struct perf_sample_data *, struct pt_regs *);
5414:	static void __perf_event_period(struct perf_event *, struct perf_cpu_context *, struct perf_event_context *, void *);
4266:	static void __perf_event_read(void *);
5115:	static u64 __perf_event_read_value(struct perf_event *, u64 *, u64 *);
3039:	static int __perf_event_stop(void *);
2758:	static int __perf_install_in_context(void *);
7498:	static int __perf_pmu_output_stop(void *);
3501:	static void __perf_pmu_sched_task(struct perf_cpu_context *, bool);
5157:	static int __perf_read_group_add(struct perf_event *, u64, u64 *);
2327:	static void __perf_remove_from_context(struct perf_event *, struct perf_cpu_context *, struct perf_event_context *, void *);
11679:	static long __se_sys_perf_event_open(long, long, long, long, long);
4859:	static void _free_event(struct perf_event *);
2430:	static void _perf_event_disable(struct perf_event *);
2987:	static void _perf_event_enable(struct perf_event *);
5456:	static int _perf_event_period(struct perf_event *, u64);
5354:	static void _perf_event_reset(struct perf_event *);
5514:	static long _perf_ioctl(struct perf_event *, unsigned int, unsigned long);
11113:	static void account_event(struct perf_event *);
4496:	static struct perf_event_context *alloc_perf_context(struct pmu *, struct task_struct *);
11061:	static void attach_sb_event(struct perf_event *);
9690:	static void bpf_overflow_handler(struct perf_event *, struct perf_sample_data *, struct pt_regs *);
5697:	static void calc_timer_values(struct perf_event *, u64 *, u64 *, u64 *);
10422:	static int cpu_clock_event_add(struct perf_event *, int);
10431:	static void cpu_clock_event_del(struct perf_event *, int);
10441:	static int cpu_clock_event_init(struct perf_event *);
10436:	static void cpu_clock_event_read(struct perf_event *);
10410:	static void cpu_clock_event_start(struct perf_event *, int);
10416:	static void cpu_clock_event_stop(struct perf_event *, int);
2706:	static void ctx_resched(struct perf_cpu_context *, struct perf_event_context *, enum event_type_t);
3763:	static void ctx_sched_in(struct perf_event_context *, struct perf_cpu_context *, enum event_type_t, struct task_struct *);
3200:	static void ctx_sched_out(struct perf_event_context *, struct perf_cpu_context *, enum event_type_t);
9129:	static void do_perf_sw_event(u32, u64, struct perf_sample_data *, struct pt_regs *, enum perf_type_id);
210:	static int event_function(void *);
256:	static void event_function_call(struct perf_event *, event_f, void *);
309:	static void event_function_local(struct perf_event *, void *, event_f);
2510:	static int event_sched_in(struct perf_event *, struct perf_cpu_context *, struct perf_event_context *);
2252:	static void event_sched_out(struct perf_event *, struct perf_cpu_context *, struct perf_event_context *);
4813:	static void exclusive_event_destroy(struct perf_event *);
4837:	static bool exclusive_event_installable(struct perf_event *, struct perf_event_context *);
4536:	static struct perf_event_context *find_get_context(struct pmu *, struct task_struct *, struct perf_event *);
1256:	static void free_ctx(struct callback_head *);
4918:	static void free_event(struct perf_event *);
4637:	static void free_event_rcu(struct callback_head *);
9904:	static void free_filters_list(struct list_head *);
1237:	static void get_ctx(struct perf_event_context *);
2296:	static void group_sched_out(struct perf_event *, struct perf_cpu_context *, struct perf_event_context *);
12579:	static struct perf_event *inherit_event(struct perf_event *, struct task_struct *, struct perf_event *, struct perf_event_context *, struct perf_event_context *, struct task_struct *);
12693:	static int inherit_group(struct perf_event *, struct task_struct *, struct perf_event_context *, struct perf_event_context *, struct task_struct *);
12737:	static int inherit_task_group(struct perf_event *, struct perf_event_context *, struct task_struct *, int, int *, struct task_struct *);
1804:	static void list_add_event(struct perf_event *, struct perf_event_context *);
1996:	static void list_del_event(struct perf_event *, struct perf_event_context *);
3702:	static int merge_sched_in(struct perf_event *, void *);
10649:	static ssize_t nr_addr_filters_show(struct device *, struct device_attribute *, char *);
9918:	static void perf_addr_filters_splice(struct perf_event *, struct list_head *);
4009:	static void perf_adjust_freq_unthr_context(struct perf_event_context *, int);
3975:	static void perf_adjust_period(struct perf_event *, u64, u64, bool);
6622:	static void perf_aux_sample_output(struct perf_output_handle *, struct perf_sample_data *, struct perf_event *, struct perf_event *);
3899:	static u64 perf_calculate_period(u64, u64, struct perf_event *, struct perf_event *);
13128:	static void perf_cgroup_attach(struct cgroup_taskset *);
13088:	static struct cgroup_subsys_state *perf_cgroup_css_alloc(struct cgroup_subsys_state *);
13105:	static void perf_cgroup_css_free(struct cgroup_subsys_state *);
13113:	static int perf_cgroup_css_online(struct cgroup_subsys_state *);
902:	static int perf_cgroup_ensure_storage(struct perf_event *, struct cgroup_subsys_state *);
802:	static void perf_cgroup_switch(struct task_struct *, int);
5633:	static long perf_compat_ioctl(struct file *, unsigned int, unsigned long);
11412:	static int perf_copy_attr(struct perf_event_attr *, struct perf_event_attr *);
167:	static void perf_ctx_unlock(struct perf_cpu_context *, struct perf_event_context *);
502:	static void perf_duration_warn(struct irq_work *);
1906:	static void perf_event__header_size(struct perf_event *);
1913:	static void perf_event__id_header_size(struct perf_event *);
9966:	static void perf_event_addr_filters_apply(struct perf_event *);
7416:	static void perf_event_addr_filters_exec(struct perf_event *, void *);
11186:	static struct perf_event *perf_event_alloc(struct perf_event_attr *, int, struct task_struct *, struct perf_event *, struct perf_event *, perf_overflow_handler_t, void *, int);
8640:	static void perf_event_bpf_output(struct perf_event *, void *);
7934:	static void perf_event_cgroup(struct cgroup *);
7906:	static void perf_event_cgroup_output(struct perf_event *, void *);
7712:	static void perf_event_comm_event(struct perf_comm_event *);
7679:	static void perf_event_comm_output(struct perf_event *, void *);
3814:	static void perf_event_context_sched_in(struct perf_event_context *, struct task_struct *);
3372:	static void perf_event_context_sched_out(struct task_struct *, int, struct task_struct *);
1343:	static struct perf_event_context *perf_event_ctx_lock_nested(struct perf_event *, int);
1372:	static void perf_event_ctx_unlock(struct perf_event_context *, struct perf_event *);
4200:	static void perf_event_enable_on_exec(int);
12945:	static void perf_event_exit_cpu_context(int);
12302:	static void perf_event_exit_event(struct perf_event *, struct perf_event_context *, struct task_struct *);
12358:	static void perf_event_exit_task_context(struct task_struct *, int);
5385:	static void perf_event_for_each_child(struct perf_event *, void (*)(struct perf_event *));
1717:	static struct perf_event *perf_event_groups_first(int, struct cgroup *, struct perf_event_groups *, struct perf_event_groups *);
1649:	static void perf_event_groups_insert(struct perf_event_groups *, struct perf_event *);
12894:	static void perf_event_init_all_cpus(void);
12777:	static int perf_event_init_context(struct task_struct *, int);
8550:	static void perf_event_ksymbol_output(struct perf_event *, void *);
8075:	static void perf_event_mmap_event(struct perf_mmap_event *);
8021:	static void perf_event_mmap_output(struct perf_event *, void *);
10671:	static ssize_t perf_event_mux_interval_ms_show(struct device *, struct device_attribute *, char *);
10683:	static ssize_t perf_event_mux_interval_ms_store(struct device *, struct device_attribute *, const char *, size_t);
7778:	static void perf_event_namespaces_output(struct perf_event *, void *);
10567:	static int perf_event_nop_int(struct perf_event *, u64);
10073:	static int perf_event_parse_addr_filter(struct perf_event *, char *, struct list_head *);
4402:	static int perf_event_read(struct perf_event *, bool);
7303:	static void perf_event_read_event(struct perf_event *, struct task_struct *);
2679:	static void perf_event_sched_in(struct perf_cpu_context *, struct perf_event_context *, struct task_struct *);
9793:	static int perf_event_set_bpf_prog(struct perf_event *, u32);
10268:	static int perf_event_set_filter(struct perf_event *, void *);
11527:	static int perf_event_set_output(struct perf_event *, struct perf_event *);
660:	static void perf_event_set_state(struct perf_event *, enum perf_event_state);
3075:	static int perf_event_stop(struct perf_event *, int);
8419:	static void perf_event_switch_output(struct perf_event *, void *);
13058:	static int perf_event_sysfs_init(void);
7618:	static void perf_event_task(struct task_struct *, struct perf_event_context *, int);
7575:	static void perf_event_task_output(struct perf_event *, void *);
8748:	static void perf_event_text_poke_output(struct perf_event *, void *);
642:	static void perf_event_update_time(struct perf_event *);
9045:	static int perf_exclude_event(struct perf_event *, struct pt_regs *);
6283:	static int perf_fasync(int, struct file *, int);
7811:	static void perf_fill_ns_link_info(struct perf_ns_link_info *, struct task_struct *, const struct proc_ns_operations *);
12456:	static void perf_free_event(struct perf_event *, struct perf_event_context *);
2092:	static int perf_get_aux_event(struct perf_event *, struct perf_event *);
1961:	static void perf_group_attach(struct perf_event *);
2152:	static void perf_group_detach(struct perf_event *);
11004:	static struct pmu *perf_init_event(struct perf_event *);
2826:	static void perf_install_in_context(struct perf_event_context *, struct perf_event *, int);
5614:	static long perf_ioctl(struct file *, unsigned int, unsigned long);
7334:	static void perf_iterate_ctx(struct perf_event_context *, perf_iterate_f *, void *, bool);
7381:	static void perf_iterate_sb(perf_iterate_f *, void *, struct perf_event_context *);
7352:	static void perf_iterate_sb_cpu(perf_iterate_f *, void *);
9584:	static int perf_kprobe_event_init(struct perf_event *);
1446:	static struct perf_event_context *perf_lock_task_context(struct task_struct *, int, unsigned long *);
8818:	static void perf_log_itrace_start(struct perf_event *);
8492:	static void perf_log_throttle(struct perf_event *, int);
6066:	static int perf_mmap(struct file *, struct vm_area_struct *);
5948:	static void perf_mmap_close(struct vm_area_struct *);
5792:	static vm_fault_t perf_mmap_fault(struct vm_fault *);
5924:	static void perf_mmap_open(struct vm_area_struct *);
1129:	static enum hrtimer_restart perf_mux_hrtimer_handler(struct hrtimer *);
1174:	static int perf_mux_hrtimer_restart(struct perf_cpu_context *);
6811:	static void perf_output_read(struct perf_output_handle *, struct perf_event *);
6759:	static void perf_output_read_group(struct perf_output_handle *, struct perf_event *, u64, u64);
6736:	static void perf_output_read_one(struct perf_output_handle *, struct perf_event *, u64, u64);
6415:	static void perf_output_sample_regs(struct perf_output_handle *, struct pt_regs *, u64);
6371:	static void perf_pending_event(struct irq_work *);
10597:	static void perf_pmu_cancel_txn(struct pmu *);
10584:	static int perf_pmu_commit_txn(struct pmu *);
10562:	static int perf_pmu_nop_int(struct pmu *);
10558:	static void perf_pmu_nop_txn(struct pmu *, unsigned int);
10574:	static void perf_pmu_start_txn(struct pmu *, unsigned int);
5331:	static __poll_t perf_poll(struct file *, poll_table *);
5314:	static ssize_t perf_read(struct file *, char *, size_t, loff_t *);
5204:	static int perf_read_group(struct perf_event *, u64, char *);
13000:	static int perf_reboot(struct notifier_block *, unsigned long, void *);
5109:	static int perf_release(struct inode *, struct file *);
2364:	static void perf_remove_from_context(struct perf_event *, unsigned long);
4933:	static void perf_remove_from_owner(struct perf_event *);
4117:	static bool perf_rotate_context(struct perf_cpu_context *);
4762:	static void perf_sched_delayed(struct work_struct *);
2470:	static void perf_set_shadow_time(struct perf_event *, struct perf_event_context *);
9199:	static int perf_swevent_add(struct perf_event *, int);
9222:	static void perf_swevent_del(struct perf_event *, int);
9016:	static void perf_swevent_event(struct perf_event *, u64, struct perf_sample_data *, struct pt_regs *);
10308:	static enum hrtimer_restart perf_swevent_hrtimer(struct hrtimer *);
9336:	static int perf_swevent_init(struct perf_event *);
12916:	static void perf_swevent_init_cpu(unsigned int);
8990:	static void perf_swevent_overflow(struct perf_event *, u64, struct perf_sample_data *, struct pt_regs *);
9195:	static void perf_swevent_read(struct perf_event *);
9227:	static void perf_swevent_start(struct perf_event *, int);
9232:	static void perf_swevent_stop(struct perf_event *, int);
9499:	static int perf_tp_event_init(struct perf_event *);
10955:	static int perf_try_init_event(struct pmu *, struct perf_event *);
9643:	static int perf_uprobe_event_init(struct perf_event *);
6459:	static u64 perf_ustack_task_size(struct pt_regs *, struct pt_regs *);
7017:	static u64 perf_virt_to_phys(u64);
10739:	static int pmu_dev_alloc(struct pmu *);
10734:	static void pmu_dev_release(struct device *);
1265:	static void put_ctx(struct perf_event_context *);
9613:	static ssize_t ref_ctr_offset_show(struct device *, struct device_attribute *, char *);
68:	static void remote_function(void *);
9553:	static ssize_t retprobe_show(struct device *, struct device_attribute *, char *);
5827:	static void ring_buffer_attach(struct perf_event *, struct perf_buffer *);
9326:	static void sw_perf_event_destroy(struct perf_event *);
9300:	static int swevent_hlist_get(void);
9256:	static void swevent_hlist_put_cpu(int);
10499:	static int task_clock_event_add(struct perf_event *, int);
10508:	static void task_clock_event_del(struct perf_event *, int);
10522:	static int task_clock_event_init(struct perf_event *);
10513:	static void task_clock_event_read(struct perf_event *);
10487:	static void task_clock_event_start(struct perf_event *, int);
10493:	static void task_clock_event_stop(struct perf_event *, int);
9494:	static void tp_perf_event_destroy(struct perf_event *);
10662:	static ssize_t type_show(struct device *, struct device_attribute *, char *);
4716:	static void unaccount_event(struct perf_event *);
4698:	static void unaccount_freq_event_nohz(void);
4679:	static void unaccount_pmu_sb_event(struct perf_event *);
3617:	static int visit_groups_merge(struct perf_cpu_context *, struct perf_event_groups *, int, void *, int (*)(struct perf_event *, void *));

File kernel/events/hw_breakpoint.c:
221:	void arch_release_bp_slot(struct perf_event *);
216:	int arch_reserve_bp_slot(struct perf_event *);
396:	int dbg_release_bp_slot(struct perf_event *);
388:	int dbg_reserve_bp_slot(struct perf_event *);
71:	int hw_breakpoint_weight(struct perf_event *);
677:	int init_hw_breakpoint(void);
513:	int modify_user_hw_breakpoint(struct perf_event *, struct perf_event_attr *);
477:	int modify_user_hw_breakpoint_check(struct perf_event *, struct perf_event_attr *, bool);
430:	int register_perf_hw_breakpoint(struct perf_event *);
457:	struct perf_event *register_user_hw_breakpoint(struct perf_event_attr *, perf_overflow_handler_t, void *, struct task_struct *);
557:	struct perf_event **register_wide_hw_breakpoint(struct perf_event_attr *, perf_overflow_handler_t, void *);
341:	void release_bp_slot(struct perf_event *);
316:	int reserve_bp_slot(struct perf_event *);
541:	void unregister_hw_breakpoint(struct perf_event *);
594:	void unregister_wide_hw_breakpoint(struct perf_event **);
277:	static int __reserve_bp_slot(struct perf_event *, u64);
611:	static void bp_perf_event_destroy(struct perf_event *);
133:	static void fetch_bp_busy_slots(struct bp_busy_slots *, struct perf_event *, enum bp_type_idx);
638:	static int hw_breakpoint_add(struct perf_event *, int);
651:	static void hw_breakpoint_del(struct perf_event *, int);
616:	static int hw_breakpoint_event_init(struct perf_event *);
406:	static int hw_breakpoint_parse(struct perf_event *, const struct perf_event_attr *, struct arch_hw_breakpoint *);
656:	static void hw_breakpoint_start(struct perf_event *, int);
661:	static void hw_breakpoint_stop(struct perf_event *, int);
191:	static void toggle_bp_slot(struct perf_event *, bool, int, enum bp_type_idx);

File kernel/events/internal.h:
63:	static void rb_free_rcu(struct callback_head *);

File kernel/events/ring_buffer.c:
361:	void *perf_aux_output_begin(struct perf_output_handle *, struct perf_event *);
477:	void perf_aux_output_end(struct perf_output_handle *, unsigned long);
334:	void perf_aux_output_flag(struct perf_output_handle *, u64);
535:	int perf_aux_output_skip(struct perf_output_handle *, unsigned long);
557:	void *perf_get_aux(struct perf_output_handle *);
944:	struct page *perf_mmap_to_page(struct perf_buffer *, unsigned long);
278:	int perf_output_begin(struct perf_output_handle *, struct perf_sample_data *, struct perf_event *, unsigned int);
271:	int perf_output_begin_backward(struct perf_output_handle *, struct perf_sample_data *, struct perf_event *, unsigned int);
264:	int perf_output_begin_forward(struct perf_output_handle *, struct perf_sample_data *, struct perf_event *, unsigned int);
287:	unsigned int perf_output_copy(struct perf_output_handle *, const void *, unsigned int);
570:	long perf_output_copy_aux(struct perf_output_handle *, struct perf_output_handle *, unsigned long, unsigned long);
299:	void perf_output_end(struct perf_output_handle *);
293:	unsigned int perf_output_skip(struct perf_output_handle *, unsigned int);
803:	struct perf_buffer *rb_alloc(int, long, int, int);
667:	int rb_alloc_aux(struct perf_buffer *, struct perf_event *, unsigned long, int, long, int);
848:	void rb_free(struct perf_buffer *);
758:	void rb_free_aux(struct perf_buffer *);
640:	static void __rb_free_aux(struct perf_buffer *);
782:	static void *perf_mmap_alloc_page(int);
50:	static void perf_output_put_handle(struct perf_output_handle *);

File kernel/events/uprobes.c:
1669:	void arch_uprobe_copy_ixol(struct page *, unsigned long, void *, unsigned long);
2173:	bool arch_uprobe_ignore(struct arch_uprobe *, struct pt_regs *);
2178:	bool arch_uretprobe_is_alive(struct return_instance *, enum rp_check, struct pt_regs *);
225:	bool is_swbp_insn(uprobe_opcode_t *);
239:	bool is_trap_insn(uprobe_opcode_t *);
589:	int set_orig_insn(struct arch_uprobe *, struct mm_struct *, unsigned long);
574:	int set_swbp(struct arch_uprobe *, struct mm_struct *, unsigned long);
1216:	int uprobe_apply(struct inode *, loff_t, struct uprobe_consumer *, bool);
1546:	void uprobe_clear_state(struct mm_struct *);
1799:	void uprobe_copy_process(struct task_struct *, unsigned long);
1966:	bool uprobe_deny_signal(void);
1572:	void uprobe_dup_mmap(struct mm_struct *, struct mm_struct *);
1567:	void uprobe_end_dup_mmap(void);
1717:	void uprobe_free_utask(struct task_struct *);
1690:	unsigned long uprobe_get_swbp_addr(struct pt_regs *);
1695:	unsigned long uprobe_get_trap_addr(struct pt_regs *);
1362:	int uprobe_mmap(struct vm_area_struct *);
1425:	void uprobe_munmap(struct vm_area_struct *, unsigned long, unsigned long);
2300:	void uprobe_notify_resume(struct pt_regs *);
2334:	int uprobe_post_sstep_notifier(struct pt_regs *);
2317:	int uprobe_pre_sstep_notifier(struct pt_regs *);
1195:	int uprobe_register(struct inode *, loff_t, struct uprobe_consumer *);
1202:	int uprobe_register_refctr(struct inode *, loff_t, loff_t, struct uprobe_consumer *);
1562:	void uprobe_start_dup_mmap(void);
1109:	void uprobe_unregister(struct inode *, loff_t, struct uprobe_consumer *);
463:	int uprobe_write_opcode(struct arch_uprobe *, struct mm_struct *, unsigned long, uprobe_opcode_t);
2352:	void uprobes_init(void);
791:	static int __copy_insn(struct address_space *, struct file *, void *, int, loff_t);
1482:	static struct xol_area *__create_xol_area(unsigned long);
633:	static struct uprobe *__find_uprobe(struct inode *, loff_t);
154:	static int __replace_page(struct vm_area_struct *, unsigned long, struct page *, struct page *);
368:	static int __update_ref_ctr(struct mm_struct *, unsigned long, short);
1142:	static int __uprobe_register(struct inode *, loff_t, loff_t, struct uprobe_consumer *);
1090:	static void __uprobe_unregister(struct uprobe *, struct uprobe_consumer *);
728:	static struct uprobe *alloc_uprobe(struct inode *, loff_t, loff_t);
966:	static struct map_info *build_map_info(struct address_space *, loff_t, bool);
1293:	static void build_probe_list(struct inode *, struct vm_area_struct *, unsigned long, unsigned long, struct list_head *);
244:	static void copy_from_page(struct page *, unsigned long, void *, int);
813:	static int copy_insn(struct uprobe *, struct file *);
251:	static void copy_to_page(struct page *, unsigned long, const void *, int);
1328:	static int delayed_ref_ctr_inc(struct vm_area_struct *);
314:	static void delayed_uprobe_delete(struct delayed_uprobe *);
322:	static void delayed_uprobe_remove(struct uprobe *, struct mm_struct *);
1752:	static int dup_utask(struct task_struct *, struct uprobe_task *);
1786:	static void dup_xol_work(struct callback_head *);
879:	static bool filter_chain(struct uprobe *, enum uprobe_filter_ctx, struct mm_struct *);
2044:	static struct uprobe *find_active_uprobe(unsigned long, int *);
658:	static struct uprobe *find_uprobe(struct inode *, loff_t);
595:	static struct uprobe *get_uprobe(struct uprobe *);
2261:	static void handle_singlestep(struct uprobe_task *, struct pt_regs *);
2188:	static void handle_swbp(struct pt_regs *);
2131:	static void handle_trampoline(struct pt_regs *);
2073:	static void handler_chain(struct uprobe *, struct pt_regs *);
707:	static struct uprobe *insert_uprobe(struct uprobe *);
897:	static int install_breakpoint(struct uprobe *, struct mm_struct *, unsigned long, struct vm_area_struct *);
2010:	static int is_trap_at_addr(struct mm_struct *, unsigned long);
1929:	static int pre_ssout(struct uprobe *, struct pt_regs *, unsigned long);
839:	static int prepare_uprobe(struct uprobe *, struct file *, struct mm_struct *, unsigned long);
1861:	static void prepare_uretprobe(struct uprobe *, struct pt_regs *);
601:	static void put_uprobe(struct uprobe *);
1036:	static int register_for_each_vma(struct uprobe *, struct uprobe_consumer *);
1238:	static int unapply_uprobe(struct uprobe *, struct mm_struct *);
417:	static int update_ref_ctr(struct uprobe *, struct mm_struct *, short);
407:	static void update_ref_ctr_warn(struct uprobe *, struct mm_struct *, short);
1780:	static void uprobe_warn(const char *, struct task_struct *);
342:	static bool valid_ref_ctr_vma(struct vm_area_struct *, struct uprobe *, struct uprobe *);
1404:	static bool vma_has_uprobes(struct vm_area_struct *, unsigned long, unsigned long);
1442:	static int xol_add_vma(struct mm_struct *, struct xol_area *);
1635:	static void xol_free_insn_slot(struct task_struct *);
1584:	static unsigned long xol_take_insn_slot(struct xol_area *);

File kernel/exec_domain.c:
38:	long __ia32_sys_personality(const struct pt_regs *);
38:	long __x64_sys_personality(const struct pt_regs *);
24:	static int execdomains_proc_show(struct seq_file *, void *);
30:	static int proc_execdomains_init(void);

File kernel/exit.c:
1667:	long __ia32_compat_sys_wait4(const struct pt_regs *);
1682:	long __ia32_compat_sys_waitid(const struct pt_regs *);
875:	long __ia32_sys_exit(const struct pt_regs *);
917:	long __ia32_sys_exit_group(const struct pt_regs *);
1640:	long __ia32_sys_wait4(const struct pt_regs *);
1548:	long __ia32_sys_waitid(const struct pt_regs *);
1659:	long __ia32_sys_waitpid(const struct pt_regs *);
1422:	void __wake_up_parent(struct task_struct *, struct task_struct *);
875:	long __x64_sys_exit(const struct pt_regs *);
917:	long __x64_sys_exit_group(const struct pt_regs *);
1640:	long __x64_sys_wait4(const struct pt_regs *);
1548:	long __x64_sys_waitid(const struct pt_regs *);
1659:	long __x64_sys_waitpid(const struct pt_regs *);
1749:	void abort(void);
866:	void complete_and_exit(struct completion *, long);
713:	void do_exit(long);
885:	void do_group_exit(int);
288:	int is_current_pgrp_orphaned(void);
1624:	int kernel_wait(pid_t, int *);
1581:	long kernel_wait4(pid_t, int *, int, struct rusage *);
346:	void mm_update_next_owner(struct mm_struct *);
176:	void put_task_struct_rcu_user(struct task_struct *);
232:	int rcuwait_wake_up(struct rcuwait *);
182:	void release_task(struct task_struct *);
1734:	bool thread_group_exited(struct pid *);
92:	static void __exit_signal(struct task_struct *);
1667:	static long __se_compat_sys_wait4(long, long, long, long);
1682:	static long __se_compat_sys_waitid(long, long, long, long, long);
1640:	static long __se_sys_wait4(long, long, long, long);
1548:	static long __se_sys_waitid(long, long, long, long, long);
1406:	static int child_wait_callback(wait_queue_entry_t *, unsigned int, int, void *);
167:	static void delayed_put_task_struct(struct callback_head *);
1428:	static long do_wait(struct wait_opts *);
434:	static void exit_mm(void);
647:	static void exit_notify(struct task_struct *, int);
492:	static struct task_struct *find_alive_thread(struct task_struct *);
503:	static struct task_struct *find_child_reaper(struct task_struct *, struct list_head *);
608:	static void forget_original_parent(struct task_struct *, struct list_head *);
1482:	static long kernel_waitid(int, pid_t, struct waitid_info *, int, struct rusage *);
317:	static void kill_orphaned_pgrp(struct task_struct *, struct task_struct *);
1266:	static int wait_consider_task(struct wait_opts *, int, struct task_struct *);
1214:	static int wait_task_continued(struct wait_opts *, struct task_struct *);
1142:	static int wait_task_stopped(struct wait_opts *, int, struct task_struct *);
983:	static int wait_task_zombie(struct wait_opts *, struct task_struct *);
269:	static int will_become_orphaned_pgrp(struct pid *, struct task_struct *);

File kernel/extable.c:
103:	int __kernel_text_address(unsigned long);
95:	int core_kernel_data(unsigned long);
73:	int core_kernel_text(unsigned long);
168:	int func_ptr_is_kernel_text(void *);
65:	int init_kernel_text(unsigned long);
120:	int kernel_text_address(unsigned long);
53:	const struct exception_table_entry *search_exception_tables(unsigned long);
46:	const struct exception_table_entry *search_kernel_exception_table(unsigned long);
35:	void sort_main_extable(void);

File kernel/fork.c:
1561:	void __cleanup_sighand(struct sighand_struct *);
2598:	long __ia32_sys_clone(const struct pt_regs *);
2756:	long __ia32_sys_clone3(const struct pt_regs *);
1669:	long __ia32_sys_set_tid_address(const struct pt_regs *);
3056:	long __ia32_sys_unshare(const struct pt_regs *);
680:	void __mmdrop(struct mm_struct *);
729:	void __put_task_struct(struct task_struct *);
2598:	long __x64_sys_clone(const struct pt_regs *);
2756:	long __x64_sys_clone3(const struct pt_regs *);
1669:	long __x64_sys_set_tid_address(const struct pt_regs *);
3056:	long __x64_sys_unshare(const struct pt_regs *);
839:	int arch_dup_task_struct(struct task_struct *, struct task_struct *);
163:	void arch_release_task_struct(struct task_struct *);
748:	void arch_task_cache_init(void);
2443:	struct mm_struct *copy_init_mm(void);
1363:	void exec_mm_release(struct task_struct *, struct mm_struct *);
1357:	void exit_mm_release(struct task_struct *, struct mm_struct *);
2427:	struct task_struct *fork_idle(int);
796:	void fork_init(void);
445:	void free_task(struct task_struct *);
1180:	struct file *get_mm_exe_file(struct mm_struct *);
1200:	struct file *get_task_exe_file(struct task_struct *);
1225:	struct mm_struct *get_task_mm(struct task_struct *);
2456:	pid_t kernel_clone(struct kernel_clone_args *);
2539:	pid_t kernel_thread(int (*)(void *), void *, unsigned long);
2940:	int ksys_unshare(unsigned long);
1255:	struct mm_struct *mm_access(struct task_struct *, unsigned int);
1075:	struct mm_struct *mm_alloc(void);
1114:	void mmput(struct mm_struct *);
1135:	void mmput_async(struct mm_struct *);
152:	int nr_processes(void);
1724:	struct pid *pidfd_pid(const struct file *);
2820:	void proc_caches_init(void);
438:	void put_task_stack(struct task_struct *);
1156:	void set_mm_exe_file(struct mm_struct *, struct file *);
846:	void set_task_stack_end_magic(struct task_struct *);
3085:	int sysctl_max_threads(struct ctl_table *, int, void *, size_t *, loff_t *);
2916:	int unshare_fd(unsigned long, unsigned int, struct files_struct **);
3067:	int unshare_files(struct files_struct **);
346:	struct vm_area_struct *vm_area_alloc(struct mm_struct *);
356:	struct vm_area_struct *vm_area_dup(struct vm_area_struct *);
374:	void vm_area_free(struct vm_area_struct *);
2776:	void walk_process_tree(struct task_struct *, proc_visitor, void *);
1837:	static void __delayed_free_task(struct callback_head *);
2553:	static long __do_sys_fork(const struct pt_regs *);
2569:	static long __do_sys_vfork(const struct pt_regs *);
2598:	static long __se_sys_clone(long, long, long, long, long);
2756:	static long __se_sys_clone3(long, long);
379:	static void account_kernel_stack(struct task_struct *, int);
216:	static unsigned long *alloc_thread_stack_node(struct task_struct *, int);
2620:	static int copy_clone_args_from_user(struct kernel_clone_args *, struct clone_args *, size_t);
1879:	static struct task_struct *copy_process(struct pid *, int, int, struct kernel_clone_args *);
1636:	static void copy_seccomp(struct task_struct *);
1536:	static int copy_sighand(unsigned long, struct task_struct *);
1585:	static int copy_signal(unsigned long, struct task_struct *);
962:	static int coredump_filter_setup(char *);
1379:	static struct mm_struct *dup_mm(struct task_struct *, struct mm_struct *);
472:	static int dup_mmap(struct mm_struct *, struct mm_struct *);
854:	static struct task_struct *dup_task_struct(struct task_struct *, int);
197:	static int free_vm_stack_cache(unsigned int);
1012:	static struct mm_struct *mm_init(struct mm_struct *, struct task_struct *, struct user_namespace *);
1323:	static void mm_release(struct task_struct *, struct mm_struct *);
702:	static void mmdrop_async(struct mm_struct *);
694:	static void mmdrop_async_fn(struct work_struct *);
1127:	static void mmput_async_fn(struct work_struct *);
1811:	static __poll_t pidfd_poll(struct file *, struct poll_table_struct *);
1732:	static int pidfd_release(struct inode *, struct file *);
1777:	static void pidfd_show_fdinfo(struct seq_file *, struct file *);
424:	static void release_task_stack(struct task_struct *);
2812:	static void sighand_ctor(void *);
1289:	static int wait_for_vfork_done(struct task_struct *, struct completion *);

File kernel/freezer.c:
56:	bool __refrigerator(bool);
146:	void __thaw_task(struct task_struct *);
115:	bool freeze_task(struct task_struct *);
37:	bool freezing_slow_path(struct task_struct *);
161:	bool set_freezable(void);

File kernel/futex.c:
3919:	long __ia32_compat_sys_get_robust_list(const struct pt_regs *);
3904:	long __ia32_compat_sys_set_robust_list(const struct pt_regs *);
3764:	long __ia32_sys_futex(const struct pt_regs *);
3960:	long __ia32_sys_futex_time32(const struct pt_regs *);
3357:	long __ia32_sys_get_robust_list(const struct pt_regs *);
3335:	long __ia32_sys_set_robust_list(const struct pt_regs *);
3764:	long __x64_sys_futex(const struct pt_regs *);
3960:	long __x64_sys_futex_time32(const struct pt_regs *);
3357:	long __x64_sys_get_robust_list(const struct pt_regs *);
3335:	long __x64_sys_set_robust_list(const struct pt_regs *);
3705:	long do_futex(u32 *, int, u32, ktime_t *, u32 *, u32, u32);
3680:	void futex_exec_release(struct task_struct *);
3632:	void futex_exit_recursive(struct task_struct *);
3698:	void futex_exit_release(struct task_struct *);
2334:	static int __fixup_pi_state_owner(u32 *, struct futex_q *, struct task_struct *);
3764:	static long __se_sys_futex(long, long, long, long, long, long);
3960:	static long __se_sys_futex_time32(long, long, long, long, long, long);
3357:	static long __se_sys_get_robust_list(long, long, long);
1448:	static void __unqueue_futex(struct futex_q *);
1213:	static int attach_to_pi_owner(u32 *, u32, union futex_key *, struct futex_pi_state **, struct task_struct **);
1004:	static int attach_to_pi_state(u32 *, u32, struct futex_pi_state *, struct futex_pi_state **);
707:	static int cmpxchg_futex_value_locked(u32 *, u32 *, u32, u32);
3833:	static void compat_exit_robust_list(struct task_struct *);
841:	static void exit_pi_state_list(struct task_struct *);
3532:	static void exit_robust_list(struct task_struct *);
675:	static int fault_in_user_writeable(u32 *);
2537:	static int fixup_owner(u32 *, struct futex_q *, int);
2506:	static int fixup_pi_state_owner(u32 *, struct futex_q *, struct task_struct *);
1635:	static int futex_atomic_op_inuser(unsigned int, u32 *);
3640:	static void futex_cleanup_begin(struct task_struct *);
4012:	static int futex_init(void);
2774:	static int futex_lock_pi(u32 *, unsigned int, ktime_t *, int);
1364:	static int futex_lock_pi_atomic(u32 *, struct futex_hash_bucket *, union futex_key *, struct futex_pi_state **, struct task_struct *, struct task_struct **, int);
1854:	static int futex_proxy_trylock_atomic(u32 *, struct futex_hash_bucket *, struct futex_hash_bucket *, union futex_key *, union futex_key *, struct futex_pi_state **, struct task_struct **, int);
1920:	static int futex_requeue(u32 *, unsigned int, u32 *, int, int, u32 *, int);
695:	static struct futex_q *futex_top_waiter(struct futex_hash_bucket *, union futex_key *);
2945:	static int futex_unlock_pi(u32 *, unsigned int);
2684:	static int futex_wait(u32 *, unsigned int, u32, ktime_t *, u32);
2580:	static void futex_wait_queue_me(struct futex_hash_bucket *, struct futex_q *, struct hrtimer_sleeper *);
3169:	static int futex_wait_requeue_pi(u32 *, unsigned int, u32, ktime_t *, u32 *, u32);
2749:	static long futex_wait_restart(struct restart_block *);
2629:	static int futex_wait_setup(u32 *, u32, unsigned int, struct futex_q *, struct futex_hash_bucket **);
1590:	static int futex_wake(u32 *, unsigned int, int, u32);
1686:	static int futex_wake_op(u32 *, unsigned int, u32 *, int, int, int);
486:	static int get_futex_key(u32 *, bool, union futex_key *, enum futex_access);
790:	static void get_pi_state(struct futex_pi_state *);
3404:	static int handle_futex_death(u32 *, struct task_struct *, bool, bool);
361:	static struct futex_hash_bucket *hash_futex(union futex_key *);
1467:	static void mark_wake_futex(struct wake_q_head *, struct futex_q *);
767:	static void pi_state_update_owner(struct futex_pi_state *, struct task_struct *);
799:	static void put_pi_state(struct futex_pi_state *);
734:	static int refill_pi_state_cache(void);
2274:	static int unqueue_me(struct futex_q *);
2322:	static void unqueue_me_pi(struct futex_q *);
1129:	static void wait_for_owner_exiting(int, struct task_struct *);
1495:	static int wake_futex_pi(u32 *, u32, struct futex_pi_state *);

File kernel/groups.c:
153:	long __ia32_sys_getgroups(const struct pt_regs *);
190:	long __ia32_sys_setgroups(const struct pt_regs *);
153:	long __x64_sys_getgroups(const struct pt_regs *);
190:	long __x64_sys_setgroups(const struct pt_regs *);
15:	struct group_info *groups_alloc(int);
34:	void groups_free(struct group_info *);
97:	int groups_search(const struct group_info *, kgid_t);
89:	void groups_sort(struct group_info *);
231:	int in_egroup_p(kgid_t);
219:	int in_group_p(kgid_t);
177:	bool may_setgroups(void);
139:	int set_current_groups(struct group_info *);
123:	void set_groups(struct cred *, struct group_info *);
153:	static long __se_sys_getgroups(long, long);
190:	static long __se_sys_setgroups(long, long);
81:	static int gid_cmp(const void *, const void *);

File kernel/hung_task.c:
227:	int proc_dohung_task_timeout_secs(struct ctl_table *, int, void *, size_t *, loff_t *);
245:	void reset_hung_task_detector(void);
87:	static void check_hung_task(struct task_struct *, unsigned long);
175:	static void check_hung_uninterruptible_tasks(unsigned long);
304:	static int hung_task_init(void);
76:	static int hung_task_panic(struct notifier_block *, unsigned long, void *);
253:	static int hungtask_pm_notify(struct notifier_block *, unsigned long, void *);
154:	static bool rcu_lock_break(struct task_struct *, struct task_struct *);
276:	static int watchdog(void *);

File kernel/iomem.c:
139:	void *devm_memremap(struct device *, resource_size_t, size_t, unsigned long);
162:	void devm_memunmap(struct device *, void *);
71:	void *memremap(resource_size_t, size_t, unsigned long);
122:	void memunmap(void *);
134:	static int devm_memremap_match(struct device *, void *, void *);
129:	static void devm_memremap_release(struct device *, void *);
30:	static void *try_ram_remap(resource_size_t, size_t, unsigned long);

File kernel/irq/affinity.c:
496:	unsigned int irq_calc_affinity_vectors(unsigned int, unsigned int, const struct irq_affinity *);
416:	struct irq_affinity_desc *irq_create_affinity_masks(unsigned int, struct irq_affinity *);
247:	static int __irq_build_affinity_masks(unsigned int, unsigned int, unsigned int, cpumask_var_t *, const struct cpumask *, struct cpumask *, struct irq_affinity_desc *);
43:	static cpumask_var_t *alloc_node_to_cpumask(void);
128:	static void alloc_nodes_vectors(unsigned int, cpumask_var_t *, const struct cpumask *, const nodemask_t, struct cpumask *, struct node_vectors *);
75:	static void build_node_to_cpumask(cpumask_var_t *);
402:	static void default_calc_sets(struct irq_affinity *, unsigned int);
83:	static int get_nodes_in_cpumask(cpumask_var_t *, const struct cpumask *, nodemask_t *);
338:	static int irq_build_affinity_masks(unsigned int, unsigned int, unsigned int, struct irq_affinity_desc *);
12:	static void irq_spread_init_one(struct cpumask *, struct cpumask *, unsigned int);
107:	static int ncpus_cmp_func(const void *, const void *);

File kernel/irq/autoprobe.c:
117:	unsigned int probe_irq_mask(unsigned long);
157:	int probe_irq_off(unsigned long);
30:	unsigned long probe_irq_on(void);

File kernel/irq/chip.c:
1073:	void __irq_set_handler(unsigned int, irq_flow_handler_t, int, const char *);
778:	void handle_edge_irq(struct irq_desc *);
692:	void handle_fasteoi_irq(struct irq_desc *);
742:	void handle_fasteoi_nmi(struct irq_desc *);
633:	void handle_level_irq(struct irq_desc *);
461:	void handle_nested_irq(unsigned int);
960:	void handle_percpu_devid_fasteoi_ipi(struct irq_desc *);
985:	void handle_percpu_devid_fasteoi_nmi(struct irq_desc *);
915:	void handle_percpu_devid_irq(struct irq_desc *);
885:	void handle_percpu_irq(struct irq_desc *);
541:	void handle_simple_irq(struct irq_desc *);
576:	void handle_untracked_irq(struct irq_desc *);
289:	int irq_activate(struct irq_desc *);
298:	int irq_activate_and_startup(struct irq_desc *, bool);
1395:	void irq_chip_ack_parent(struct irq_data *);
1572:	int irq_chip_compose_msi_msg(struct irq_data *, struct msi_msg *);
1381:	void irq_chip_disable_parent(struct irq_data *);
1366:	void irq_chip_enable_parent(struct irq_data *);
1439:	void irq_chip_eoi_parent(struct irq_data *);
1348:	int irq_chip_get_parent_state(struct irq_data *, enum irqchip_irq_state, bool *);
1417:	void irq_chip_mask_ack_parent(struct irq_data *);
1406:	void irq_chip_mask_parent(struct irq_data *);
1595:	int irq_chip_pm_get(struct irq_data *);
1618:	int irq_chip_pm_put(struct irq_data *);
1554:	void irq_chip_release_resources_parent(struct irq_data *);
1539:	int irq_chip_request_resources_parent(struct irq_data *);
1490:	int irq_chip_retrigger_hierarchy(struct irq_data *);
1454:	int irq_chip_set_affinity_parent(struct irq_data *, const struct cpumask *, bool);
1326:	int irq_chip_set_parent_state(struct irq_data *, enum irqchip_irq_state, bool);
1472:	int irq_chip_set_type_parent(struct irq_data *, unsigned int);
1505:	int irq_chip_set_vcpu_affinity_parent(struct irq_data *, void *);
1521:	int irq_chip_set_wake_parent(struct irq_data *, unsigned int);
1428:	void irq_chip_unmask_parent(struct irq_data *);
1188:	void irq_cpu_offline(void);
1158:	void irq_cpu_online(void);
386:	void irq_disable(struct irq_desc *);
335:	void irq_enable(struct irq_desc *);
158:	struct irq_data *irq_get_irq_data(unsigned int);
1113:	void irq_modify_status(unsigned int, unsigned long, unsigned long);
400:	void irq_percpu_disable(struct irq_desc *, unsigned int);
391:	void irq_percpu_enable(struct irq_desc *, unsigned int);
1088:	void irq_set_chained_handler_and_data(unsigned int, irq_flow_handler_t, void *);
41:	int irq_set_chip(unsigned int, struct irq_chip *);
1105:	void irq_set_chip_and_handler_name(unsigned int, struct irq_chip *, irq_flow_handler_t, const char *);
145:	int irq_set_chip_data(unsigned int, void *);
90:	int irq_set_handler_data(unsigned int, void *);
68:	int irq_set_irq_type(unsigned int, unsigned int);
133:	int irq_set_msi_desc(unsigned int, struct msi_desc *);
111:	int irq_set_msi_desc_off(unsigned int, unsigned int, struct msi_desc *);
307:	void irq_shutdown(struct irq_desc *);
323:	void irq_shutdown_and_deactivate(struct irq_desc *);
255:	int irq_startup(struct irq_desc *, bool, bool);
421:	void mask_irq(struct irq_desc *);
432:	void unmask_irq(struct irq_desc *);
443:	void unmask_threaded_irq(struct irq_desc *);
1003:	static void __irq_do_set_handler(struct irq_desc *, irq_flow_handler_t, int, const char *);
236:	static int __irq_startup(struct irq_desc *);
194:	static int __irq_startup_managed(struct irq_desc *, struct cpumask *, bool);
22:	static irqreturn_t bad_chained_irq(int, void *);

File kernel/irq/cpuhotplug.c:
218:	int irq_affinity_online_cpu(unsigned int);
155:	void irq_migrate_all_off_this_cpu(void);
53:	static bool migrate_one_irq(struct irq_desc *);

File kernel/irq/devres.c:
178:	int __devm_irq_alloc_descs(struct device *, int, unsigned int, unsigned int, int, struct module *, const struct irq_affinity_desc *);
139:	void devm_free_irq(struct device *, unsigned int, void *);
99:	int devm_request_any_context_irq(struct device *, unsigned int, irq_handler_t, unsigned long, const char *, void *);
51:	int devm_request_threaded_irq(struct device *, unsigned int, irq_handler_t, irq_handler_t, unsigned long, const char *, void *);
154:	static void devm_irq_desc_release(struct device *, void *);
25:	static int devm_irq_match(struct device *, void *, void *);
18:	static void devm_irq_release(struct device *, void *);

File kernel/irq/dummychip.c:
18:	static void ack_bad(struct irq_data *);
29:	static void noop(struct irq_data *);
31:	static unsigned int noop_ret(struct irq_data *);

File kernel/irq/handle.c:
137:	irqreturn_t __handle_irq_event_percpu(struct irq_desc *, unsigned int *);
59:	void __irq_wake_thread(struct irq_desc *, struct irqaction *);
31:	void handle_bad_irq(struct irq_desc *);
205:	irqreturn_t handle_irq_event(struct irq_desc *);
191:	irqreturn_t handle_irq_event_percpu(struct irq_desc *);
44:	irqreturn_t no_action(int, void *);

File kernel/irq/irqdesc.c:
772:	int __irq_alloc_descs(int, unsigned int, unsigned int, int, struct module *, const struct irq_affinity_desc *);
876:	struct irq_desc *__irq_get_desc_lock(unsigned int, unsigned long *, bool, unsigned int);
899:	void __irq_put_desc_unlock(struct irq_desc *, unsigned long, bool);
519:	int early_irq_init(void);
638:	int generic_handle_irq(unsigned int);
742:	void irq_free_descs(unsigned int, unsigned int);
870:	unsigned int irq_get_next_irq(unsigned int);
937:	int irq_get_percpu_devid_partition(unsigned int, struct cpumask *);
377:	void irq_lock_sparse(void);
932:	int irq_set_percpu_devid(unsigned int);
907:	int irq_set_percpu_devid_partition(unsigned int, const struct cpumask *);
351:	struct irq_desc *irq_to_desc(unsigned int);
382:	void irq_unlock_sparse(void);
951:	void kstat_incr_irq_this_cpu(unsigned int);
986:	unsigned int kstat_irqs(unsigned int);
965:	unsigned int kstat_irqs_cpu(unsigned int, int);
1013:	unsigned int kstat_irqs_usr(unsigned int);
245:	static ssize_t actions_show(struct kobject *, struct kobj_attribute *, char *);
387:	static struct irq_desc *alloc_desc(int, int, unsigned int, const struct cpumask *, struct module *);
466:	static int alloc_descs(unsigned int, unsigned int, int, const struct irq_affinity_desc *, struct module *);
166:	static ssize_t chip_name_show(struct kobject *, struct kobj_attribute *, char *);
431:	static void delayed_free_desc(struct callback_head *);
81:	static void desc_smp_init(struct irq_desc *, int, const struct cpumask *);
438:	static void free_desc(unsigned int);
183:	static ssize_t hwirq_show(struct kobject *, struct kobj_attribute *, char *);
41:	static void init_irq_default_affinity(void);
28:	static int irq_affinity_setup(char *);
422:	static void irq_kobj_release(struct kobject *);
286:	static void irq_sysfs_add(int, struct irq_desc *);
310:	static int irq_sysfs_init(void);
230:	static ssize_t name_show(struct kobject *, struct kobj_attribute *, char *);
146:	static ssize_t per_cpu_count_show(struct kobject *, struct kobj_attribute *, char *);
198:	static ssize_t type_show(struct kobject *, struct kobj_attribute *, char *);
214:	static ssize_t wakeup_show(struct kobject *, struct kobj_attribute *, char *);

File kernel/irq/irqdomain.c:
130:	struct irq_domain *__irq_domain_add(struct fwnode_handle *, int, irq_hw_number_t, int, const struct irq_domain_ops *, void *);
64:	struct fwnode_handle *__irq_domain_alloc_fwnode(unsigned int, int, const char *, phys_addr_t *);
1421:	int __irq_domain_alloc_irqs(struct irq_domain *, int, unsigned int, int, void *, bool, const struct irq_affinity_desc *);
595:	unsigned int irq_create_direct_mapping(struct irq_domain *);
750:	unsigned int irq_create_fwspec_mapping(struct irq_fwspec *);
637:	unsigned int irq_create_mapping_affinity(struct irq_domain *, irq_hw_number_t, const struct irq_affinity_desc *);
841:	unsigned int irq_create_of_mapping(struct of_phandle_args *);
702:	int irq_create_strict_mappings(struct irq_domain *, unsigned int, irq_hw_number_t, int);
856:	void irq_dispose_mapping(unsigned int);
1753:	int irq_domain_activate_irq(struct irq_data *, bool);
347:	struct irq_domain *irq_domain_add_legacy(struct device_node *, unsigned int, unsigned int, irq_hw_number_t, const struct irq_domain_ops *, void *);
304:	struct irq_domain *irq_domain_add_simple(struct device_node *, unsigned int, unsigned int, const struct irq_domain_ops *, void *);
1016:	int irq_domain_alloc_descs(unsigned int, irq_hw_number_t, int, const struct irq_affinity_desc *, int);
1387:	int irq_domain_alloc_irqs_hierarchy(struct irq_domain *, unsigned int, unsigned int, void *);
1682:	int irq_domain_alloc_irqs_parent(struct irq_domain *, unsigned int, unsigned int, void *);
519:	int irq_domain_associate(struct irq_domain *, unsigned int, irq_hw_number_t);
569:	void irq_domain_associate_many(struct irq_domain *, unsigned int, irq_hw_number_t, int);
414:	bool irq_domain_check_msi_remap(void);
1067:	struct irq_domain *irq_domain_create_hierarchy(struct irq_domain *, unsigned int, unsigned int, struct fwnode_handle *, const struct irq_domain_ops *, void *);
1772:	void irq_domain_deactivate_irq(struct irq_data *);
488:	void irq_domain_disassociate(struct irq_domain *, unsigned int);
1181:	int irq_domain_disconnect_hierarchy(struct irq_domain *, unsigned int);
104:	void irq_domain_free_fwnode(struct fwnode_handle *);
1654:	void irq_domain_free_irqs(unsigned int, unsigned int);
1339:	void irq_domain_free_irqs_common(struct irq_domain *, unsigned int, unsigned int);
1702:	void irq_domain_free_irqs_parent(struct irq_domain *, unsigned int, unsigned int);
1360:	void irq_domain_free_irqs_top(struct irq_domain *, unsigned int, unsigned int);
1272:	struct irq_data *irq_domain_get_irq_data(struct irq_domain *, unsigned int);
1792:	bool irq_domain_hierarchical_is_msi_remap(struct irq_domain *);
1588:	int irq_domain_pop_irq(struct irq_domain *, int);
1506:	int irq_domain_push_irq(struct irq_domain *, int, void *);
228:	void irq_domain_remove(struct irq_domain *);
1043:	void irq_domain_reset_irq_data(struct irq_data *);
1294:	int irq_domain_set_hwirq_and_chip(struct irq_domain *, unsigned int, irq_hw_number_t, struct irq_chip *, void *);
1322:	void irq_domain_set_info(struct irq_domain *, unsigned int, irq_hw_number_t, struct irq_chip *, void *, irq_flow_handler_t, void *, const char *);
982:	int irq_domain_translate_onecell(struct irq_domain *, struct irq_fwspec *, unsigned long *, unsigned int *);
1003:	int irq_domain_translate_twocell(struct irq_domain *, struct irq_fwspec *, unsigned long *, unsigned int *);
254:	void irq_domain_update_bus_token(struct irq_domain *, enum irq_domain_bus_token);
916:	int irq_domain_xlate_onecell(struct irq_domain *, struct device_node *, const u32 *, unsigned int, unsigned long *, unsigned int *);
957:	int irq_domain_xlate_onetwocell(struct irq_domain *, struct device_node *, const u32 *, unsigned int, unsigned long *, unsigned int *);
935:	int irq_domain_xlate_twocell(struct irq_domain *, struct device_node *, const u32 *, unsigned int, irq_hw_number_t *, unsigned int *);
882:	unsigned int irq_find_mapping(struct irq_domain *, irq_hw_number_t);
370:	struct irq_domain *irq_find_matching_fwspec(struct irq_fwspec *, enum irq_domain_bus_token);
458:	struct irq_domain *irq_get_default_host(void);
441:	void irq_set_default_host(struct irq_domain *);
1724:	static int __irq_domain_activate_irq(struct irq_data *, bool);
1712:	static void __irq_domain_deactivate_irq(struct irq_data *);
1480:	static void irq_domain_fix_revmap(struct irq_data *);
1372:	static void irq_domain_free_irqs_hierarchy(struct irq_domain *, unsigned int, unsigned int);
1089:	static void irq_domain_insert_irq(int);
1107:	static void irq_domain_remove_irq(int);
1194:	static int irq_domain_trim_hierarchy(unsigned int);

File kernel/irq/manage.c:
675:	void __disable_irq(struct irq_desc *);
770:	void __enable_irq(struct irq_desc *);
2759:	int __irq_get_irqchip_state(struct irq_data *, enum irqchip_irq_state, bool *);
940:	int __irq_set_trigger(struct irq_desc *, unsigned long);
2562:	int __request_percpu_irq(unsigned int, irq_handler_t, unsigned long, const char *, void *);
922:	int can_request_irq(unsigned int, unsigned long);
746:	bool disable_hardirq(unsigned int);
722:	void disable_irq(unsigned int);
704:	void disable_irq_nosync(unsigned int);
2400:	void disable_percpu_irq(unsigned int);
2414:	void disable_percpu_nmi(unsigned int);
809:	void enable_irq(unsigned int);
835:	void enable_nmi(unsigned int);
2336:	void enable_percpu_irq(unsigned int, unsigned int);
2370:	void enable_percpu_nmi(unsigned int, unsigned int);
1988:	const void *free_irq(unsigned int, void *);
2040:	const void *free_nmi(unsigned int, void *);
2492:	void free_percpu_irq(unsigned int, void *);
2505:	void free_percpu_nmi(unsigned int, void *);
160:	int irq_can_set_affinity(unsigned int);
172:	bool irq_can_set_affinity_usr(unsigned int);
221:	int irq_do_set_affinity(struct irq_data *, const struct cpumask *, bool);
484:	int irq_force_affinity(unsigned int, const struct cpumask *);
2796:	int irq_get_irqchip_state(unsigned int, enum irqchip_irq_state, bool *);
2382:	bool irq_percpu_is_enabled(unsigned int);
467:	int irq_set_affinity(unsigned int, const struct cpumask *);
490:	int irq_set_affinity_hint(unsigned int, const struct cpumask *);
341:	int irq_set_affinity_locked(struct irq_data *, const struct cpumask *, bool);
543:	int irq_set_affinity_notifier(unsigned int, struct irq_affinity_notify *);
873:	int irq_set_irq_wake(unsigned int, unsigned int);
2829:	int irq_set_irqchip_state(unsigned int, enum irqchip_irq_state, bool);
996:	int irq_set_parent(int, int);
189:	void irq_set_thread_affinity(struct irq_desc *);
644:	int irq_set_vcpu_affinity(unsigned int, void *);
583:	int irq_setup_affinity(struct irq_desc *);
389:	int irq_update_affinity_desc(unsigned int, struct irq_affinity_desc *);
1302:	void irq_wake_thread(unsigned int, void *);
2696:	int prepare_percpu_nmi(unsigned int);
2472:	void remove_percpu_irq(unsigned int, struct irqaction *);
2216:	int request_any_context_irq(unsigned int, irq_handler_t, unsigned long, const char *, void *);
2266:	int request_nmi(unsigned int, irq_handler_t, unsigned long, const char *, void *);
2628:	int request_percpu_nmi(unsigned int, irq_handler_t, const char *, void *);
2108:	int request_threaded_irq(unsigned int, irq_handler_t, irq_handler_t, unsigned long, const char *, void *);
2525:	int setup_percpu_irq(unsigned int, struct irqaction *);
99:	bool synchronize_hardirq(unsigned int);
127:	void synchronize_irq(unsigned int);
2739:	void teardown_percpu_nmi(unsigned int);
2014:	static const void *__cleanup_nmi(unsigned int, struct irq_desc *);
681:	static int __disable_irq_nosync(unsigned int);
1836:	static struct irqaction *__free_irq(struct irq_desc *, void *);
2422:	static struct irqaction *__free_percpu_irq(unsigned int, void *);
1464:	static int __setup_irq(unsigned int, struct irq_desc *, struct irqaction *);
39:	static void __synchronize_hardirq(struct irq_desc *, bool);
506:	static void irq_affinity_notify(struct work_struct *);
1017:	static irqreturn_t irq_default_primary_handler(int, void *);
1068:	static void irq_finalize_oneshot(struct irq_desc *, struct irqaction *);
1032:	static irqreturn_t irq_forced_secondary_handler(int, void *);
1171:	static irqreturn_t irq_forced_thread_fn(struct irq_desc *, struct irqaction *);
1026:	static irqreturn_t irq_nested_primary_handler(int, void *);
317:	static bool irq_set_affinity_deactivated(struct irq_data *, const struct cpumask *, bool);
1255:	static int irq_thread(void *);
1123:	static void irq_thread_check_affinity(struct irq_desc *, struct irqaction *);
1213:	static void irq_thread_dtor(struct callback_head *);
1194:	static irqreturn_t irq_thread_fn(struct irq_desc *, struct irqaction *);
1038:	static int irq_wait_for_interrupt(struct irqaction *);
31:	static int setup_forced_irqthreads(char *);
1413:	static int setup_irq_thread(struct irqaction *, unsigned int, bool);

File kernel/irq/matrix.c:
49:	struct irq_matrix *irq_alloc_matrix(unsigned int, unsigned int, unsigned int);
377:	int irq_matrix_alloc(struct irq_matrix *, const struct cpumask *, bool, unsigned int *);
285:	int irq_matrix_alloc_managed(struct irq_matrix *, const struct cpumask *, unsigned int *);
474:	unsigned int irq_matrix_allocated(struct irq_matrix *);
321:	void irq_matrix_assign(struct irq_matrix *, unsigned int);
181:	void irq_matrix_assign_system(struct irq_matrix *, unsigned int, bool);
450:	unsigned int irq_matrix_available(struct irq_matrix *, bool);
418:	void irq_matrix_free(struct irq_matrix *, unsigned int, unsigned int, bool);
99:	void irq_matrix_offline(struct irq_matrix *);
78:	void irq_matrix_online(struct irq_matrix *);
251:	void irq_matrix_remove_managed(struct irq_matrix *, const struct cpumask *);
364:	void irq_matrix_remove_reserved(struct irq_matrix *);
345:	void irq_matrix_reserve(struct irq_matrix *);
210:	int irq_matrix_reserve_managed(struct irq_matrix *, const struct cpumask *);
463:	unsigned int irq_matrix_reserved(struct irq_matrix *);
110:	static unsigned int matrix_alloc_area(struct irq_matrix *, struct cpumap *, bool, unsigned int);

File kernel/irq/migration.c:
94:	void __irq_move_irq(struct irq_data *);
18:	bool irq_fixup_move_pending(struct irq_desc *, bool);
38:	void irq_move_masked_irq(struct irq_data *);

File kernel/irq/msi.c:
59:	void __get_cached_msi_msg(struct msi_desc *, struct msi_msg *);
398:	int __msi_domain_alloc_irqs(struct irq_domain *, struct device *, int);
501:	void __msi_domain_free_irqs(struct irq_domain *, struct device *);
29:	struct msi_desc *alloc_msi_entry(struct device *, int, const struct irq_affinity_desc *);
53:	void free_msi_entry(struct msi_desc *);
64:	void get_cached_msi_msg(unsigned int, struct msi_msg *);
285:	struct irq_domain *msi_create_irq_domain(struct fwnode_handle *, struct msi_domain_info *, struct irq_domain *);
492:	int msi_domain_alloc_irqs(struct irq_domain *, struct device *, int);
532:	void msi_domain_free_irqs(struct irq_domain *, struct device *);
318:	int msi_domain_populate_irqs(struct irq_domain *, struct device *, int, int, msi_alloc_info_t *);
304:	int msi_domain_prepare_irqs(struct irq_domain *, struct device *, int, msi_alloc_info_t *);
101:	int msi_domain_set_affinity(struct irq_data *, const struct cpumask *, bool);
547:	struct msi_domain_info *msi_get_domain_info(struct irq_domain *);
79:	static void msi_check_level(struct irq_domain *, struct msi_msg *);
118:	static int msi_domain_activate(struct irq_domain *, struct irq_data *, bool);
138:	static int msi_domain_alloc(struct irq_domain *, unsigned int, unsigned int, void *);
129:	static void msi_domain_deactivate(struct irq_domain *, struct irq_data *);
170:	static void msi_domain_free(struct irq_domain *, unsigned int, unsigned int);
224:	static int msi_domain_ops_check(struct irq_domain *, struct msi_domain_info *, struct device *);
190:	static irq_hw_number_t msi_domain_ops_get_hwirq(struct msi_domain_info *, msi_alloc_info_t *);
209:	static int msi_domain_ops_init(struct irq_domain *, struct msi_domain_info *, unsigned int, irq_hw_number_t, msi_alloc_info_t *);
196:	static int msi_domain_ops_prepare(struct irq_domain *, struct device *, int, msi_alloc_info_t *);
203:	static void msi_domain_ops_set_desc(msi_alloc_info_t *, struct msi_desc *);

File kernel/irq/pm.c:
16:	bool irq_pm_check_wakeup(struct irq_desc *);
33:	void irq_pm_install_action(struct irq_desc *, struct irqaction *);
57:	void irq_pm_remove_action(struct irq_desc *, struct irqaction *);
209:	void rearm_wake_irq(unsigned int);
258:	void resume_device_irqs(void);
131:	void suspend_device_irqs(void);
243:	static int irq_pm_init_ops(void);
234:	static void irq_pm_syscore_resume(void);
152:	static void resume_irq(struct irq_desc *);
184:	static void resume_irqs(bool);

File kernel/irq/proc.c:
451:	int arch_show_interrupts(struct seq_file *, int);
430:	void init_irq_proc(void);
319:	void register_handler_proc(unsigned int, struct irqaction *);
338:	void register_irq_proc(unsigned int, struct irq_desc *);
460:	int show_interrupts(struct seq_file *, void *);
417:	void unregister_handler_proc(unsigned int, struct irqaction *);
393:	void unregister_irq_proc(unsigned int, struct irq_desc *);
266:	static int default_affinity_open(struct inode *, struct file *);
229:	static int default_affinity_show(struct seq_file *, void *);
235:	static ssize_t default_affinity_write(struct file *, const char *, size_t, loff_t *);
83:	static int irq_affinity_hint_proc_show(struct seq_file *, void *);
196:	static int irq_affinity_list_proc_open(struct inode *, struct file *);
109:	static int irq_affinity_list_proc_show(struct seq_file *, void *);
185:	static ssize_t irq_affinity_list_proc_write(struct file *, const char *, size_t, loff_t *);
191:	static int irq_affinity_proc_open(struct inode *, struct file *);
104:	static int irq_affinity_proc_show(struct seq_file *, void *);
179:	static ssize_t irq_affinity_proc_write(struct file *, const char *, size_t, loff_t *);
223:	static int irq_effective_aff_list_proc_show(struct seq_file *, void *);
218:	static int irq_effective_aff_proc_show(struct seq_file *, void *);
279:	static int irq_node_proc_show(struct seq_file *, void *);
288:	static int irq_spurious_proc_show(struct seq_file *, void *);
137:	static ssize_t write_irq_affinity(int, const char *, size_t, loff_t *, struct file *, struct file *);

File kernel/irq/resend.c:
106:	int check_irq_resend(struct irq_desc *, bool);
155:	int irq_inject_interrupt(unsigned int);
30:	static void resend_irqs(unsigned long);

File kernel/irq/spurious.c:
36:	bool irq_wait_for_poll(struct irq_desc *);
432:	int noirqdebug_setup(char *);
272:	void note_interrupt(struct irq_desc *, irqreturn_t);
192:	static void __report_bad_irq(struct irq_desc *, irqreturn_t);
444:	static int irqfixup_setup(char *);
456:	static int irqpoll_setup(char *);
118:	static int misrouted_irq(int);
144:	static void poll_spurious_irqs(struct timer_list *);
62:	static int try_one_irq(struct irq_desc *, bool);

File kernel/irq_work.c:
45:	void arch_irq_work_raise(void);
116:	bool irq_work_needs_cpu(void);
67:	bool irq_work_queue(struct irq_work *);
88:	bool irq_work_queue_on(struct irq_work *, int);
177:	void irq_work_run(void);
133:	void irq_work_single(void *);
197:	void irq_work_sync(struct irq_work *);
184:	void irq_work_tick(void);
53:	static void __irq_work_queue_local(struct irq_work *);
30:	static bool irq_work_claim(struct irq_work *);
158:	static void irq_work_run_list(struct llist_head *);

File kernel/jump_label.c:
293:	void __static_key_deferred_flush(void *, struct delayed_work *);
280:	void __static_key_slow_dec_deferred(struct static_key *, struct delayed_work *, unsigned long);
341:	void arch_jump_label_transform_static(struct jump_entry *, enum jump_label_type);
606:	void jump_label_apply_nops(struct module *);
463:	void jump_label_init(void);
25:	void jump_label_lock(void);
300:	void jump_label_rate_limit(struct static_key_deferred *, unsigned long);
777:	int jump_label_register(struct module *);
808:	int jump_label_text_reserved(void *, void *);
30:	void jump_label_unlock(void);
259:	void jump_label_update_timeout(struct work_struct *);
104:	int static_key_count(struct static_key *);
212:	void static_key_disable(struct static_key *);
195:	void static_key_disable_cpuslocked(struct static_key *);
187:	void static_key_enable(struct static_key *);
164:	void static_key_enable_cpuslocked(struct static_key *);
267:	void static_key_slow_dec(struct static_key *);
274:	void static_key_slow_dec_cpuslocked(struct static_key *);
156:	void static_key_slow_inc(struct static_key *);
116:	void static_key_slow_inc_cpuslocked(struct static_key *);
549:	static int __jump_label_mod_text_reserved(void *, void *);
441:	static void __jump_label_update(struct static_key *, struct jump_entry *, struct jump_entry *, bool);
239:	static void __static_key_slow_dec_cpuslocked(struct static_key *);
626:	static int jump_label_add_module(struct module *);
35:	static int jump_label_cmp(const void *, const void *);
690:	static void jump_label_del_module(struct module *);
787:	static int jump_label_init_module(void);
744:	static int jump_label_module_notify(struct notifier_block *, unsigned long, void *);
63:	static void jump_label_swap(void *, void *, int);
823:	static void jump_label_update(struct static_key *);
382:	static void static_key_set_entries(struct static_key *, struct jump_entry *);
220:	static bool static_key_slow_try_dec(struct static_key *);

File kernel/kallsyms.c:
451:	int arch_get_kallsym(unsigned int, unsigned long *, char *, char *);
281:	const char *kallsyms_lookup(unsigned long, unsigned long *, unsigned long *, char **, char *);
165:	unsigned long kallsyms_lookup_name(const char *);
261:	int kallsyms_lookup_size_offset(unsigned long, unsigned long *, unsigned long *);
180:	int kallsyms_on_each_symbol(int (*)(void *, const char *, struct module *, unsigned long), void *);
681:	bool kallsyms_show_value(const struct cred *);
720:	const char *kdb_walk_kallsyms(loff_t *);
334:	int lookup_symbol_attrs(unsigned long, unsigned long *, unsigned long *, char *, char *);
316:	int lookup_symbol_name(unsigned long, char *);
430:	int sprint_backtrace(char *, unsigned long);
393:	int sprint_symbol(char *, unsigned long);
410:	int sprint_symbol_no_offset(char *, unsigned long);
355:	static int __sprint_symbol(char *, unsigned long, int, int);
198:	static unsigned long get_symbol_pos(unsigned long, unsigned long *, unsigned long *);
58:	static unsigned int kallsyms_expand_symbol(unsigned int, char *, size_t);
746:	static int kallsyms_init(void);
698:	static int kallsyms_open(struct inode *, struct file *);
608:	static void *s_next(struct seq_file *, void *, loff_t *);
628:	static int s_show(struct seq_file *, void *);
617:	static void *s_start(struct seq_file *, loff_t *);
624:	static void s_stop(struct seq_file *, void *);
592:	static int update_iter(struct kallsym_iter *, loff_t);
568:	static int update_iter_mod(struct kallsym_iter *, loff_t);

File kernel/kcmp.c:
152:	long __ia32_sys_kcmp(const struct pt_regs *);
152:	long __x64_sys_kcmp(const struct pt_regs *);
152:	static long __se_sys_kcmp(long, long, long, long, long);
62:	static struct file *get_file_raw_ptr(struct task_struct *, unsigned int);
245:	static int kcmp_cookies_init(void);
103:	static int kcmp_epoll_target(struct task_struct *, struct task_struct *, unsigned long, struct kcmp_epoll_slot *);

File kernel/kexec.c:
279:	long __ia32_compat_sys_kexec_load(const struct pt_regs *);
246:	long __ia32_sys_kexec_load(const struct pt_regs *);
246:	long __x64_sys_kexec_load(const struct pt_regs *);
279:	static long __se_compat_sys_kexec_load(long, long, long, long);
246:	static long __se_sys_kexec_load(long, long, long, long);
116:	static int do_kexec_load(unsigned long, unsigned long, struct kexec_segment *, unsigned long);
39:	static int kimage_alloc_init(struct kimage **, unsigned long, unsigned long, struct kexec_segment *, unsigned long);

File kernel/kexec_core.c:
950:	void __crash_kexec(struct pt_regs *);
1221:	void arch_kexec_protect_crashkres(void);
1009:	void crash_free_reserved_phys_range(unsigned long, unsigned long);
998:	size_t crash_get_memory_size(void);
974:	void crash_kexec(struct pt_regs *);
1067:	void crash_save_cpu(struct pt_regs *, int);
1018:	int crash_shrink_memory(unsigned long);
247:	struct kimage *do_kimage_alloc_init(void);
1131:	int kernel_kexec(void);
84:	int kexec_crash_loaded(void);
66:	int kexec_should_crash(struct task_struct *);
476:	struct page *kimage_alloc_control_pages(struct kimage *, unsigned int);
500:	int kimage_crash_copy_vmcoreinfo(struct kimage *);
619:	void kimage_free(struct kimage *);
333:	void kimage_free_page_list(struct list_head *);
274:	int kimage_is_destination_range(struct kimage *, unsigned long, unsigned long);
919:	int kimage_load_segment(struct kimage *, struct kexec_segment *);
598:	void kimage_terminate(struct kimage *);
593:	int machine_kexec_post_load(struct kimage *);
141:	int sanity_check_segment_list(struct kimage *);
1093:	static int crash_notes_memory_init(void);
534:	static int kimage_add_entry(struct kimage *, kimage_entry_t);
343:	static struct page *kimage_alloc_normal_control_pages(struct kimage *, unsigned int);
684:	static struct page *kimage_alloc_page(struct kimage *, gfp_t, unsigned long);
292:	static struct page *kimage_alloc_pages(gfp_t, unsigned int);
409:	static struct page *kimage_alloc_special_control_pages(struct kimage *, unsigned int, unsigned long);
319:	static void kimage_free_pages(struct page *);
781:	static int kimage_load_normal_segment(struct kimage *, struct kexec_segment *);
850:	static int kimage_load_special_segment(struct kimage *, struct kexec_segment *);

File kernel/kexec_file.c:
354:	long __ia32_sys_kexec_file_load(const struct pt_regs *);
354:	long __x64_sys_kexec_file_load(const struct pt_regs *);
138:	int arch_kexec_apply_relocations(struct purgatory_info *, Elf64_Shdr *, const Elf64_Shdr *, const Elf64_Shdr *);
121:	int arch_kexec_apply_relocations_add(struct purgatory_info *, Elf64_Shdr *, const Elf64_Shdr *, const Elf64_Shdr *);
74:	void *arch_kexec_kernel_image_load(struct kimage *);
57:	int arch_kexec_kernel_image_probe(struct kimage *, void *, unsigned long);
104:	int arch_kexec_kernel_verify_sig(struct kimage *, void *, unsigned long);
652:	int arch_kexec_locate_mem_hole(struct kexec_buf *);
87:	int arch_kimage_file_post_load_cleanup(struct kimage *);
1176:	int crash_exclude_mem_range(struct crash_mem *, unsigned long long, unsigned long long);
1258:	int crash_prepare_elf64_headers(struct crash_mem *, int, void **, unsigned long *);
667:	int kexec_add_buffer(struct kexec_buf *);
79:	int kexec_image_post_load_cleanup_default(struct kimage *);
39:	int kexec_image_probe_default(struct kimage *, void *, unsigned long);
1029:	int kexec_load_purgatory(struct kimage *, struct kexec_buf *);
628:	int kexec_locate_mem_hole(struct kexec_buf *);
1139:	int kexec_purgatory_get_set_symbol(struct kimage *, const char *, void *, unsigned int, bool);
1116:	void *kexec_purgatory_get_symbol_addr(struct kimage *, const char *);
150:	void kimage_file_post_load_cleanup(struct kimage *);
354:	static long __se_sys_kexec_file_load(long, long, long, long, long);
958:	static int kexec_apply_relocations(struct kimage *);
711:	static int kexec_calculate_store_digests(struct kimage *);
1068:	static const Elf64_Sym *kexec_purgatory_find_symbol(const char *, struct purgatory_info *, struct purgatory_info *);
838:	static int kexec_purgatory_setup_kbuf(struct purgatory_info *, struct kexec_buf *);
899:	static int kexec_purgatory_setup_sechdrs(struct purgatory_info *, struct kexec_buf *);
222:	static int kimage_file_prepare_segments(struct kimage *, int, int, const char *, unsigned long, unsigned int);
520:	static int locate_mem_hole_callback(struct resource *, void *);

File kernel/kmod.c:
124:	int __request_module(bool, const char *, ...);
69:	static int call_modprobe(char *, int);
63:	static void free_modprobe_argv(struct subprocess_info *);

File kernel/kprobes.c:
254:	void __free_insn_slot(struct kprobe_insn_cache *, kprobe_opcode_t *, int);
139:	kprobe_opcode_t *__get_insn_slot(struct kprobe_insn_cache *);
294:	bool __is_insn_slot_addr(struct kprobe_insn_cache *, unsigned long);
1941:	unsigned long __kretprobe_trampoline_handler(struct pt_regs *, void *, void *);
114:	void *alloc_insn_page(void);
1613:	int arch_check_ftrace_location(struct kprobe *);
1934:	unsigned long arch_deref_entry_point(void *);
2410:	int arch_kprobe_get_kallsym(unsigned int *, unsigned long *, char *, char *);
2080:	bool arch_kprobe_on_func_entry(unsigned long);
2432:	int arch_populate_kprobe_blacklist(void);
1503:	bool arch_within_kprobe_blacklist(unsigned long);
2294:	int disable_kprobe(struct kprobe *);
2348:	void dump_kprobe(struct kprobe *);
2312:	int enable_kprobe(struct kprobe *);
119:	void free_insn_page(void *);
364:	struct kprobe *get_kprobe(void *);
2377:	int kprobe_add_area_blacklist(unsigned long, unsigned long);
2356:	int kprobe_add_ksym_blacklist(unsigned long);
1302:	void kprobe_busy_begin(void);
1312:	void kprobe_busy_end(void);
312:	int kprobe_cache_get_kallsym(struct kprobe_insn_cache *, unsigned int *, unsigned long *, char *, char *);
1922:	int kprobe_exceptions_notify(struct notifier_block *, unsigned long, void *);
1324:	void kprobe_flush_task(struct task_struct *);
2584:	void kprobe_free_init_mem(void);
2416:	int kprobe_get_kallsym(unsigned int, unsigned long *, char *, char *);
69:	kprobe_opcode_t *kprobe_lookup_name(const char *, unsigned int);
2098:	int kprobe_on_func_entry(kprobe_opcode_t *, const char *, unsigned long);
1214:	void kprobes_inc_nmissed_count(struct kprobe *);
412:	void opt_pre_handler(struct kprobe *, struct pt_regs *);
932:	int proc_kprobes_optimization_handler(struct ctl_table *, int, void *, size_t *, loff_t *);
1682:	int register_kprobe(struct kprobe *);
1879:	int register_kprobes(struct kprobe **, int);
2114:	int register_kretprobe(struct kretprobe *);
2180:	int register_kretprobes(struct kretprobe **, int);
1897:	void unregister_kprobe(struct kprobe *);
1903:	void unregister_kprobes(struct kprobe **, int);
2198:	void unregister_kretprobe(struct kretprobe *);
2204:	void unregister_kretprobes(struct kretprobe **, int);
637:	void wait_for_kprobe_optimizer(void);
1527:	bool within_kprobe_blacklist(unsigned long);
1045:	static int __arm_kprobe_ftrace(struct kprobe *, struct ftrace_ops *, int *);
1770:	static struct kprobe *__disable_kprobe(struct kprobe *);
968:	static void __disarm_kprobe(struct kprobe *, bool);
1087:	static int __disarm_kprobe_ftrace(struct kprobe *, struct ftrace_ops *, int *);
1579:	static struct kprobe *__get_valid_kprobe(struct kprobe *);
1863:	static void __unregister_kprobe_bottom(struct kprobe *);
1809:	static int __unregister_kprobe_top(struct kprobe *);
1196:	static int aggr_fault_handler(struct kprobe *, struct pt_regs *, int);
1181:	static void aggr_post_handler(struct kprobe *, struct pt_regs *, unsigned long);
1165:	static int aggr_pre_handler(struct kprobe *, struct pt_regs *);
818:	static struct kprobe *alloc_aggr_kprobe(struct kprobe *);
2799:	static int arm_all_kprobes(void);
1132:	static int arm_kprobe(struct kprobe *);
1631:	static int check_kprobe_address_safe(struct kprobe *, struct module **);
1361:	static void cleanup_rp_inst(struct kretprobe *);
233:	static int collect_garbage_slots(struct kprobe_insn_cache *);
204:	static int collect_one_slot(struct kprobe_insn_page *, int);
2949:	static int debugfs_kprobe_init(void);
2845:	static int disarm_all_kprobes(void);
573:	static void do_free_cleaned_kprobes(void);
540:	static void do_unoptimize_kprobes(void);
481:	static struct kprobe *get_optimized_kprobe(unsigned long);
1402:	static void init_aggr_kprobe(struct kprobe *, struct kprobe *);
2606:	static int init_kprobes(void);
2659:	static int init_optprobes(void);
2258:	static void kill_kprobe(struct kprobe *);
776:	static void kill_optimized_kprobe(struct kprobe *);
2797:	static int kprobe_blacklist_open(struct inode *, struct file *);
2763:	static void *kprobe_blacklist_seq_next(struct seq_file *, void *, loff_t *);
2768:	static int kprobe_blacklist_seq_show(struct seq_file *, void *);
2757:	static void *kprobe_blacklist_seq_start(struct seq_file *, loff_t *);
2786:	static void kprobe_blacklist_seq_stop(struct seq_file *, void *);
597:	static void kprobe_optimizer(struct work_struct *);
2393:	static void kprobe_remove_area_blacklist(unsigned long, unsigned long);
2710:	static void *kprobe_seq_next(struct seq_file *, void *, loff_t *);
2705:	static void *kprobe_seq_start(struct seq_file *, loff_t *);
2718:	static void kprobe_seq_stop(struct seq_file *, void *);
2521:	static int kprobes_module_callback(struct notifier_block *, unsigned long, void *);
2754:	static int kprobes_open(struct inode *, struct file *);
1243:	static void kretprobe_hash_lock(struct task_struct *, struct hlist_head **, unsigned long *);
1277:	static void kretprobe_hash_unlock(struct task_struct *, unsigned long *);
1262:	static void kretprobe_table_lock(unsigned long, unsigned long *);
1289:	static void kretprobe_table_unlock(unsigned long, unsigned long *);
874:	static void optimize_all_kprobes(void);
668:	static void optimize_kprobe(struct kprobe *);
2035:	static int pre_handler_kretprobe(struct kprobe *, struct pt_regs *);
2896:	static ssize_t read_enabled_file_bool(struct file *, char *, size_t, loff_t *);
1227:	static void recycle_rp_inst(struct kretprobe_instance *);
1426:	static int register_aggr_kprobe(struct kprobe *, struct kprobe *);
2674:	static void report_probe(struct seq_file *, struct kprobe *, const char *, int, char *, struct kprobe *);
2723:	static int show_kprobe_addr(struct seq_file *, void *);
900:	static void unoptimize_all_kprobes(void);
714:	static void unoptimize_kprobe(struct kprobe *, bool);
2910:	static ssize_t write_enabled_file_bool(struct file *, const char *, size_t, loff_t *);

File kernel/ksysfs.c:
142:	static ssize_t fscaps_show(struct kobject *, struct kobj_attribute *, char *);
99:	static ssize_t kexec_crash_loaded_show(struct kobject *, struct kobj_attribute *, char *);
106:	static ssize_t kexec_crash_size_show(struct kobject *, struct kobj_attribute *, char *);
111:	static ssize_t kexec_crash_size_store(struct kobject *, struct kobj_attribute *, const char *, size_t);
92:	static ssize_t kexec_loaded_show(struct kobject *, struct kobj_attribute *, char *);
239:	static int ksysfs_init(void);
192:	static ssize_t notes_read(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t, size_t);
61:	static ssize_t profiling_show(struct kobject *, struct kobj_attribute *, char *);
66:	static ssize_t profiling_store(struct kobject *, struct kobj_attribute *, const char *, size_t);
151:	static ssize_t rcu_expedited_show(struct kobject *, struct kobj_attribute *, char *);
156:	static ssize_t rcu_expedited_store(struct kobject *, struct kobj_attribute *, const char *, size_t);
168:	static ssize_t rcu_normal_show(struct kobject *, struct kobj_attribute *, char *);
173:	static ssize_t rcu_normal_store(struct kobject *, struct kobj_attribute *, const char *, size_t);
31:	static ssize_t uevent_seqnum_show(struct kobject *, struct kobj_attribute *, char *);
130:	static ssize_t vmcoreinfo_show(struct kobject *, struct kobj_attribute *, char *);

File kernel/kthread.c:
689:	void __kthread_init_worker(struct kthread_worker *, const char *, struct lock_class_key *);
134:	bool __kthread_should_park(struct task_struct *);
106:	void free_kthread_struct(struct task_struct *);
1377:	void kthread_associate_blkcg(struct cgroup_subsys_state *);
489:	void kthread_bind(struct task_struct *, unsigned int);
475:	void kthread_bind_mask(struct task_struct *, const struct cpumask *);
1403:	struct cgroup_subsys_state *kthread_blkcg(void);
1259:	bool kthread_cancel_delayed_work_sync(struct kthread_delayed_work *);
1244:	bool kthread_cancel_work_sync(struct kthread_work *);
505:	struct task_struct *kthread_create_on_cpu(int (*)(void *), void *, unsigned int, const char *);
438:	struct task_struct *kthread_create_on_node(int (*)(void *), void *, int, const char *, ...);
809:	struct kthread_worker *kthread_create_worker(unsigned int, const char *, ...);
840:	struct kthread_worker *kthread_create_worker_on_cpu(int, unsigned int, const char *, ...);
205:	void *kthread_data(struct task_struct *);
925:	void kthread_delayed_work_timer_fn(struct timer_list *);
1292:	void kthread_destroy_worker(struct kthread_worker *);
1035:	void kthread_flush_work(struct kthread_work *);
1272:	void kthread_flush_worker(struct kthread_worker *);
166:	bool kthread_freezable_should_stop(bool *);
188:	void *kthread_func(struct task_struct *);
538:	bool kthread_is_per_cpu(struct task_struct *);
1144:	bool kthread_mod_delayed_work(struct kthread_worker *, struct kthread_delayed_work *, unsigned long);
586:	int kthread_park(struct task_struct *);
259:	void kthread_parkme(void);
220:	void *kthread_probe_data(struct task_struct *);
997:	bool kthread_queue_delayed_work(struct kthread_worker *, struct kthread_delayed_work *, unsigned long);
901:	bool kthread_queue_work(struct kthread_worker *, struct kthread_work *);
521:	void kthread_set_per_cpu(struct task_struct *, int);
151:	bool kthread_should_park(void);
128:	bool kthread_should_stop(void);
630:	int kthread_stop(struct task_struct *);
555:	void kthread_unpark(struct task_struct *);
1346:	void kthread_unuse_mm(struct mm_struct *);
1311:	void kthread_use_mm(struct mm_struct *);
716:	int kthread_worker_fn(void *);
651:	int kthreadd(void *);
319:	int tsk_fork_get_node(struct task_struct *);
454:	static void __kthread_bind_mask(struct task_struct *, const struct cpumask *, long);
1191:	static bool __kthread_cancel_work_sync(struct kthread_work *, bool);
351:	static struct task_struct *__kthread_create_on_node(int (*)(void *), void *, int, const char *, struct __va_list_tag *);
765:	static struct kthread_worker *__kthread_create_worker(int, unsigned int, const char *, struct __va_list_tag *);
230:	static void __kthread_parkme(struct kthread *);
953:	static void __kthread_queue_delayed_work(struct kthread_worker *, struct kthread_delayed_work *, unsigned long);
265:	static int kthread(void *);
1022:	static void kthread_flush_work_fn(struct kthread_work *);
877:	static void kthread_insert_work(struct kthread_worker *, struct kthread_work *, struct list_head *);
867:	static void kthread_insert_work_sanity_check(struct kthread_worker *, struct kthread_work *);

File kernel/livepatch/core.c:
1315:	void arch_klp_code_modify_prepare(void);
939:	int arch_klp_func_can_patch(struct klp_func *);
944:	int arch_klp_init_func(struct klp_object *, struct klp_func *);
1323:	void arch_klp_mem_prepare(struct klp_patch *);
363:	int klp_apply_section_relocs(struct module *, Elf64_Shdr *, const char *, const char *, unsigned int, unsigned int, const char *);
1263:	int klp_check_calltrace(struct klp_patch *, int);
68:	struct kprobe *klp_check_patch_kprobed(struct klp_patch *);
921:	void klp_free_patch_async(struct klp_patch *);
927:	void klp_free_replaced_patches_async(struct klp_patch *);
1609:	int klp_register_patch(struct klp_patch *);
1281:	int klp_try_disable_patch(void *);
1528:	int klp_try_enable_patch(void *);
1716:	void klp_unpatch_replaced_patches(struct klp_patch *);
1666:	int klp_unregister_patch(struct klp_patch *);
1562:	static int __klp_enable_patch(struct klp_patch *);
808:	static void __klp_free_objects(struct klp_patch *, bool);
1271:	static int disable_patch(struct klp_patch *);
1494:	static int enable_patch(struct klp_patch *);
514:	static ssize_t enabled_show(struct kobject *, struct kobj_attribute *, char *);
470:	static ssize_t enabled_store(struct kobject *, struct kobj_attribute *, const char *, size_t);
684:	static int klp_add_object_nops(struct klp_patch *, struct klp_object *);
194:	static int klp_find_callback(void *, const char *, struct module *, unsigned long);
222:	static int klp_find_object_symbol(const char *, const char *, unsigned long, unsigned long *);
913:	static void klp_free_patch_work_fn(struct work_struct *);
1887:	static int klp_init(void);
1077:	static int klp_init_object(struct klp_patch *, struct klp_object *);
1025:	static int klp_init_object_loaded(struct klp_patch *, struct klp_object *);
1188:	static int klp_init_patch(struct klp_patch *);
763:	static void klp_kobj_release_func(struct kobject *);
748:	static void klp_kobj_release_object(struct kobject *);
734:	static void klp_kobj_release_patch(struct kobject *);
261:	static int klp_resolve_symbols(Elf64_Shdr *, const char *, unsigned int, Elf64_Shdr *, const char *);
604:	static int klp_state_open(struct inode *, struct file *);
580:	static int state_show(struct seq_file *, void *);

File kernel/livepatch/patch.c:
249:	int arch_klp_patch_func(struct klp_func *);
245:	void arch_klp_unpatch_func(struct klp_func *);
306:	int klp_patch_object(struct klp_object *);
301:	void klp_unpatch_object(struct klp_object *);
335:	void klp_unpatch_objects(struct klp_patch *);
340:	void klp_unpatch_objects_dynamic(struct klp_patch *);
284:	static void __klp_unpatch_object(struct klp_object *, bool);

File kernel/locking/mutex.c:
40:	void __mutex_init(struct mutex *, const char *, struct lock_class_key *);
1472:	int atomic_dec_and_mutex_lock(atomic_t *, struct mutex *);
83:	bool mutex_is_locked(struct mutex *);
289:	void mutex_lock(struct mutex *);
1312:	int mutex_lock_interruptible(struct mutex *);
1357:	void mutex_lock_io(struct mutex *);
1336:	int mutex_lock_killable(struct mutex *);
1416:	int mutex_trylock(struct mutex *);
90:	enum mutex_trylock_recursive_enum mutex_trylock_recursive(struct mutex *);
744:	void mutex_unlock(struct mutex *);
1434:	int ww_mutex_lock(struct ww_mutex *, struct ww_acquire_ctx *);
1449:	int ww_mutex_lock_interruptible(struct ww_mutex *, struct ww_acquire_ctx *);
765:	void ww_mutex_unlock(struct ww_mutex *);
208:	static void __mutex_add_waiter(struct mutex *, struct mutex_waiter *, struct list_head *);
1106:	static int __mutex_lock(struct mutex *, long, unsigned long, struct lockdep_map *, unsigned int);
1380:	static int __mutex_lock_interruptible_slowpath(struct mutex *);
1374:	static int __mutex_lock_killable_slowpath(struct mutex *);
1368:	static void __mutex_lock_slowpath(struct mutex *);
219:	static void __mutex_remove_waiter(struct mutex *, struct mutex_waiter *);
1228:	static void __mutex_unlock_slowpath(struct mutex *, unsigned long);
454:	static void __ww_mutex_check_waiters(struct mutex *, struct ww_acquire_ctx *);
1113:	static int __ww_mutex_lock(struct mutex *, long, struct ww_acquire_ctx *, unsigned long, struct lockdep_map *, unsigned int);
1393:	static int __ww_mutex_lock_interruptible_slowpath(struct ww_mutex *, struct ww_acquire_ctx *);
1386:	static int __ww_mutex_lock_slowpath(struct ww_mutex *, struct ww_acquire_ctx *);
560:	static bool mutex_spin_on_owner(struct mutex *, struct task_struct *, struct ww_acquire_ctx *, struct mutex_waiter *);

File kernel/locking/osq_lock.c:
90:	bool osq_lock(struct optimistic_spin_queue *);
207:	void osq_unlock(struct optimistic_spin_queue *);

File kernel/locking/percpu-rwsem.c:
165:	bool __percpu_down_read(struct percpu_rw_semaphore *, bool);
12:	int __percpu_init_rwsem(struct percpu_rw_semaphore *, const char *, struct lock_class_key *);
214:	void percpu_down_write(struct percpu_rw_semaphore *);
31:	void percpu_free_rwsem(struct percpu_rw_semaphore *);
242:	void percpu_up_write(struct percpu_rw_semaphore *);
139:	static void percpu_rwsem_wait(struct percpu_rw_semaphore *, bool);
117:	static int percpu_rwsem_wake_function(struct wait_queue_entry *, unsigned int, int, void *);

File kernel/locking/qrwlock.c:
21:	void queued_read_lock_slowpath(struct qrwlock *);
62:	void queued_write_lock_slowpath(struct qrwlock *);

File kernel/locking/qspinlock.c:
346:	void __cna_queued_spin_lock_slowpath(struct qspinlock *, u32);
346:	void __pv_queued_spin_lock_slowpath(struct qspinlock *, u32);
346:	void native_queued_spin_lock_slowpath(struct qspinlock *, u32);
653:	static int parse_nopvspin(char *);

File kernel/locking/qspinlock_cna.h:
409:	void cna_configure_spin_lock_slowpath(void);
161:	static struct mcs_spinlock *cna_splice_head(struct qspinlock *, u32, struct mcs_spinlock *, struct mcs_spinlock *, struct mcs_spinlock *);
385:	static int numa_spinlock_setup(char *);

File kernel/locking/qspinlock_paravirt.h:
188:	void __pv_init_lock_hash(void);
493:	void __pv_queued_spin_unlock_slowpath(struct qspinlock *, u8);
212:	static struct qspinlock **pv_hash(struct qspinlock *, struct pv_node *);
403:	static u32 pv_wait_head_or_lock(struct qspinlock *, struct mcs_spinlock *);
293:	static void pv_wait_node(struct mcs_spinlock *, struct mcs_spinlock *);

File kernel/locking/rtmutex.c:
1532:	int __rt_mutex_futex_trylock(struct rt_mutex *);
1610:	bool __rt_mutex_futex_unlock(struct rt_mutex *, struct wake_q_head *);
1673:	void __rt_mutex_init(struct rt_mutex *, const char *, struct lock_class_key *);
1744:	int __rt_mutex_start_proxy_lock(struct rt_mutex *, struct rt_mutex_waiter *, struct task_struct *);
1123:	void rt_mutex_adjust_pi(struct task_struct *);
1885:	bool rt_mutex_cleanup_proxy_lock(struct rt_mutex *, struct rt_mutex_waiter *);
1655:	void rt_mutex_destroy(struct rt_mutex *);
1527:	int rt_mutex_futex_trylock(struct rt_mutex *);
1633:	void rt_mutex_futex_unlock(struct rt_mutex *);
1699:	void rt_mutex_init_proxy_locked(struct rt_mutex *, struct task_struct *);
1146:	void rt_mutex_init_waiter(struct rt_mutex_waiter *);
1493:	void rt_mutex_lock(struct rt_mutex *);
1509:	int rt_mutex_lock_interruptible(struct rt_mutex *);
1820:	struct task_struct *rt_mutex_next_owner(struct rt_mutex *);
1443:	void rt_mutex_postunlock(struct wake_q_head *);
1719:	void rt_mutex_proxy_unlock(struct rt_mutex *);
1793:	int rt_mutex_start_proxy_lock(struct rt_mutex *, struct rt_mutex_waiter *, struct task_struct *);
1551:	int rt_mutex_timed_lock(struct rt_mutex *, struct hrtimer_sleeper *);
1579:	int rt_mutex_trylock(struct rt_mutex *);
1599:	void rt_mutex_unlock(struct rt_mutex *);
1845:	int rt_mutex_wait_proxy_lock(struct rt_mutex *, struct hrtimer_sleeper *, struct rt_mutex_waiter *);
1165:	static int __rt_mutex_slowlock(struct rt_mutex *, int, struct hrtimer_sleeper *, struct rt_mutex_waiter *);
1015:	static void mark_wakeup_next_waiter(struct wake_q_head *, struct rt_mutex *);
1065:	static void remove_waiter(struct rt_mutex *, struct rt_mutex_waiter *);
447:	static int rt_mutex_adjust_prio_chain(struct task_struct *, enum rtmutex_chainwalk, struct rt_mutex *, struct rt_mutex *, struct rt_mutex_waiter *, struct task_struct *);
271:	static void rt_mutex_enqueue(struct rt_mutex *, struct rt_mutex_waiter *);
304:	static void rt_mutex_enqueue_pi(struct task_struct *, struct rt_mutex_waiter *);
1228:	static int rt_mutex_slowlock(struct rt_mutex *, int, struct hrtimer_sleeper *, enum rtmutex_chainwalk);
926:	static int task_blocks_on_rt_mutex(struct rt_mutex *, struct rt_mutex_waiter *, struct task_struct *, enum rtmutex_chainwalk);
805:	static int try_to_take_rt_mutex(struct rt_mutex *, struct task_struct *, struct rt_mutex_waiter *);

File kernel/locking/rwsem.c:
323:	void __init_rwsem(struct rw_semaphore *, const char *, struct lock_class_key *);
1501:	void down_read(struct rw_semaphore *);
1510:	int down_read_interruptible(struct rw_semaphore *);
1524:	int down_read_killable(struct rw_semaphore *);
1541:	int down_read_trylock(struct rw_semaphore *);
1554:	void down_write(struct rw_semaphore *);
1565:	int down_write_killable(struct rw_semaphore *);
1583:	int down_write_trylock(struct rw_semaphore *);
1617:	void downgrade_write(struct rw_semaphore *);
1597:	void up_read(struct rw_semaphore *);
1607:	void up_write(struct rw_semaphore *);
992:	static struct rw_semaphore *rwsem_down_read_slowpath(struct rw_semaphore *, int);
1136:	static struct rw_semaphore *rwsem_down_write_slowpath(struct rw_semaphore *, int);
400:	static void rwsem_mark_wake(struct rw_semaphore *, enum rwsem_wake_type, struct wake_q_head *);
785:	static bool rwsem_optimistic_spin(struct rw_semaphore *, bool);
715:	static enum owner_state rwsem_spin_on_owner(struct rw_semaphore *, unsigned long);

File kernel/locking/semaphore.c:
53:	void down(struct semaphore *);
75:	int down_interruptible(struct semaphore *);
101:	int down_killable(struct semaphore *);
155:	int down_timeout(struct semaphore *, long);
130:	int down_trylock(struct semaphore *);
178:	void up(struct semaphore *);
235:	static void __down(struct semaphore *);
240:	static int __down_interruptible(struct semaphore *);
245:	static int __down_killable(struct semaphore *);
250:	static int __down_timeout(struct semaphore *, long);
255:	static void __up(struct semaphore *, struct semaphore *);

File kernel/locking/spinlock.c:
221:	void _raw_read_lock(rwlock_t *);
245:	void _raw_read_lock_bh(rwlock_t *);
237:	void _raw_read_lock_irq(rwlock_t *);
229:	unsigned long _raw_read_lock_irqsave(rwlock_t *);
213:	int _raw_read_trylock(rwlock_t *);
277:	void _raw_read_unlock_bh(rwlock_t *);
261:	void _raw_read_unlock_irqrestore(rwlock_t *, unsigned long);
149:	void _raw_spin_lock(raw_spinlock_t *);
173:	void _raw_spin_lock_bh(raw_spinlock_t *);
165:	void _raw_spin_lock_irq(raw_spinlock_t *);
157:	unsigned long _raw_spin_lock_irqsave(raw_spinlock_t *);
133:	int _raw_spin_trylock(raw_spinlock_t *);
141:	int _raw_spin_trylock_bh(raw_spinlock_t *);
205:	void _raw_spin_unlock_bh(raw_spinlock_t *);
189:	void _raw_spin_unlock_irqrestore(raw_spinlock_t *, unsigned long);
293:	void _raw_write_lock(rwlock_t *);
317:	void _raw_write_lock_bh(rwlock_t *);
309:	void _raw_write_lock_irq(rwlock_t *);
301:	unsigned long _raw_write_lock_irqsave(rwlock_t *);
285:	int _raw_write_trylock(rwlock_t *);
349:	void _raw_write_unlock_bh(rwlock_t *);
333:	void _raw_write_unlock_irqrestore(rwlock_t *, unsigned long);
391:	int in_lock_functions(unsigned long);

File kernel/module.c:
981:	long __ia32_sys_delete_module(const struct pt_regs *);
4193:	long __ia32_sys_finit_module(const struct pt_regs *);
4173:	long __ia32_sys_init_module(const struct pt_regs *);
700:	bool __is_module_percpu_address(unsigned long, unsigned long *);
4661:	struct module *__module_address(unsigned long);
1125:	void __module_get(struct module *);
345:	void __module_put_and_exit(struct module *, long);
4705:	struct module *__module_text_address(unsigned long);
2280:	void *__symbol_get(const char *);
1083:	void __symbol_put(const char *);
981:	long __x64_sys_delete_module(const struct pt_regs *);
4193:	long __x64_sys_finit_module(const struct pt_regs *);
4173:	long __x64_sys_init_module(const struct pt_regs *);
2455:	unsigned int arch_mod_section_prepend(struct module *, unsigned int);
4297:	void *dereference_module_function_descriptor(struct module *, void *);
643:	struct module *find_module(const char *);
3526:	void flush_module_icache(const struct module *);
4643:	bool is_module_address(unsigned long);
742:	bool is_module_percpu_address(unsigned long);
291:	bool is_module_sig_enforced(void);
4687:	bool is_module_text_address(unsigned long);
4357:	int lookup_module_symbol_attrs(unsigned long, unsigned long *, unsigned long *, char *, char *);
4332:	int lookup_module_symbol_name(unsigned long, char *);
4305:	const char *module_address_lookup(unsigned long, unsigned long *, unsigned long *, char **, char *);
2867:	void *module_alloc(unsigned long);
2220:	void module_arch_cleanup(struct module *);
2071:	void module_disable_ro(const struct module *);
2083:	void module_enable_ro(const struct module *, bool);
2879:	bool module_exit_section(const char *);
3638:	int module_finalize(const Elf64_Ehdr *, const Elf64_Shdr *, struct module *);
3541:	int module_frob_arch_sections(Elf64_Ehdr *, Elf64_Shdr *, char *, struct module *);
4385:	int module_get_kallsym(unsigned int, unsigned long *, char *, char *, char *, int *);
2874:	bool module_init_section(const char *);
4431:	unsigned long module_kallsyms_lookup_name(const char *);
4454:	int module_kallsyms_on_each_symbol(int (*)(void *, const char *, struct module *, unsigned long), void *);
4740:	void module_layout(struct module *, struct modversion_info *, struct kernel_param *, struct kernel_symbol *, struct tracepoint * const *);
2210:	void module_memfree(void *);
1155:	void module_put(struct module *);
972:	int module_refcount(struct module *);
4718:	void print_modules(void);
306:	int register_module_notifier(struct notifier_block *);
4610:	const struct exception_table_entry *search_module_extables(unsigned long);
279:	void set_module_sig_enforced(void);
1096:	void symbol_put_addr(void *);
1136:	bool try_module_get(struct module *);
312:	int unregister_module_notifier(struct notifier_block *);
163:	static void __mod_tree_insert(struct mod_tree_node *);
981:	static long __se_sys_delete_module(long, long);
4193:	static long __se_sys_finit_module(long, long, long);
4173:	static long __se_sys_init_module(long, long, long);
2804:	static void add_kallsyms(struct module *, const struct load_info *);
864:	static int add_module_usage(struct module *, struct module *);
1693:	static void add_notes_attrs(struct module *, const struct load_info *);
1596:	static void add_sect_attrs(struct module *, const struct load_info *);
3849:	static int add_unformed_module(struct module *);
843:	static int already_uses(struct module *, struct module *);
2419:	static int apply_relocations(struct module *, const struct load_info *);
3551:	static bool blacklisted(const char *);
3263:	static int check_modinfo(struct module *, struct load_info *, int);
3485:	static int check_module_license_and_versions(struct module *);
1307:	static int check_version(const struct load_info *, const char *, struct module *, const s32 *);
571:	static int cmp_name(const void *, const void *);
3883:	static int complete_formation(struct module *, struct load_info *);
2141:	static int copy_module_elf(struct module *, struct load_info *);
3698:	static void do_free_init(struct work_struct *);
3720:	static int do_init_module(struct module *);
431:	static bool each_symbol_section(void *, bool (*)(const struct symsearch *, struct module *, void *));
2993:	static int elf_validity_check(struct load_info *);
576:	static bool find_exported_symbol_in_section(const struct symsearch *, struct module *, void *);
4246:	static const char *find_kallsyms_symbol(struct module *, unsigned long, unsigned long *, unsigned long *);
4415:	static unsigned long find_kallsyms_symbol_value(const char *, struct module *, struct module *);
626:	static struct module *find_module_all(const char *, size_t, bool);
3307:	static int find_module_sections(struct module *, struct load_info *);
353:	static unsigned int find_sec(const struct load_info *, const char *);
595:	static const struct kernel_symbol *find_symbol(const char *, struct module **, const s32 **, enum mod_license *, bool, bool);
3662:	static bool finished_loading(const char *);
813:	static void free_modinfo_srcversion(struct module *);
812:	static void free_modinfo_version(struct module *);
2229:	static void free_module(struct module *);
2050:	static void frob_ro_after_init(const struct module_layout *, int (*)(unsigned long, int));
2040:	static void frob_rodata(const struct module_layout *, int (*)(unsigned long, int));
2021:	static void frob_text(const struct module_layout *, int (*)(unsigned long, int));
2060:	static void frob_writable_data(const struct module_layout *, int (*)(unsigned long, int));
2599:	static char *get_next_modinfo(const struct load_info *, const char *, char *);
3570:	static struct module *layout_and_allocate(struct load_info *, int);
2478:	static void layout_sections(struct module *, struct load_info *);
2749:	static void layout_symtab(struct module *, struct load_info *);
3951:	static int load_module(struct load_info *, const char *, int);
4521:	static void *m_next(struct seq_file *, void *, loff_t *);
4531:	static int m_show(struct seq_file *, void *);
4515:	static void *m_start(struct seq_file *, loff_t *);
4526:	static void m_stop(struct seq_file *, void *);
1874:	static int mod_sysfs_init(struct module *);
1906:	static int mod_sysfs_setup(struct module *, const struct load_info *, struct kernel_param *, unsigned int);
1990:	static void mod_sysfs_teardown(struct module *);
813:	static int modinfo_srcversion_exists(struct module *);
812:	static int modinfo_version_exists(struct module *);
1812:	static int module_add_modinfo_attrs(struct module *);
4490:	static char *module_flags(struct module *, char *);
1191:	static size_t module_flags_taint(struct module *, char *);
1670:	static ssize_t module_notes_read(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t, size_t);
1848:	static void module_remove_modinfo_attrs(struct module *, int);
1558:	static ssize_t module_sect_read(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t, size_t);
902:	static void module_unload_free(struct module *);
4581:	static int modules_open(struct inode *, struct file *);
3422:	static int move_module(struct module *, struct load_info *);
3645:	static int post_relocation(struct module *, const struct load_info *);
4601:	static int proc_modules_init(void);
1460:	static const struct kernel_symbol *resolve_symbol(struct module *, const struct load_info *, const char *, char *);
1517:	static const struct kernel_symbol *resolve_symbol_wait(struct module *, const struct load_info *, const char *);
2566:	static void set_license(struct module *, const char *);
3211:	static int setup_load_info(struct load_info *, int);
813:	static void setup_modinfo_srcversion(struct module *, const char *);
812:	static void setup_modinfo_version(struct module *, const char *);
1241:	static ssize_t show_coresize(struct module_attribute *, struct module_kobject *, char *);
1250:	static ssize_t show_initsize(struct module_attribute *, struct module_kobject *, char *);
1204:	static ssize_t show_initstate(struct module_attribute *, struct module_kobject *, char *);
813:	static ssize_t show_modinfo_srcversion(struct module_attribute *, struct module_kobject *, char *);
812:	static ssize_t show_modinfo_version(struct module_attribute *, struct module_kobject *, char *);
1116:	static ssize_t show_refcnt(struct module_attribute *, struct module_kobject *, char *);
1259:	static ssize_t show_taint(struct module_attribute *, struct module_kobject *, char *);
2350:	static int simplify_symbols(struct module *, const struct load_info *);
1228:	static ssize_t store_uevent(struct module_attribute *, struct module_kobject *, const char *, size_t);
934:	static int try_release_module_ref(struct module *);
1288:	static int try_to_force_load(struct module *, const char *);
3931:	static int unknown_module_param_cb(char *, char *, const char *, void *);
2301:	static int verify_exported_symbols(struct module *);

File kernel/module_signature.c:
21:	int mod_check_sig(const struct module_signature *, size_t, const char *);

File kernel/module_signing.c:
20:	int mod_verify_sig(const void *, struct load_info *);

File kernel/notifier.c:
211:	int atomic_notifier_call_chain(struct atomic_notifier_head *, unsigned long, void *);
175:	int atomic_notifier_call_chain_robust(struct atomic_notifier_head *, unsigned long, unsigned long, void *);
139:	int atomic_notifier_chain_register(struct atomic_notifier_head *, struct notifier_block *);
161:	int atomic_notifier_chain_unregister(struct atomic_notifier_head *, struct notifier_block *);
325:	int blocking_notifier_call_chain(struct blocking_notifier_head *, unsigned long, void *);
290:	int blocking_notifier_call_chain_robust(struct blocking_notifier_head *, unsigned long, unsigned long, void *);
240:	int blocking_notifier_chain_register(struct blocking_notifier_head *, struct notifier_block *);
270:	int blocking_notifier_chain_unregister(struct blocking_notifier_head *, struct notifier_block *);
535:	int notify_die(enum die_val, const char *, struct pt_regs *, long, int, int);
407:	int raw_notifier_call_chain(struct raw_notifier_head *, unsigned long, void *);
383:	int raw_notifier_call_chain_robust(struct raw_notifier_head *, unsigned long, unsigned long, void *);
359:	int raw_notifier_chain_register(struct raw_notifier_head *, struct notifier_block *);
376:	int raw_notifier_chain_unregister(struct raw_notifier_head *, struct notifier_block *);
552:	int register_die_notifier(struct notifier_block *);
522:	void srcu_init_notifier_head(struct srcu_notifier_head *);
497:	int srcu_notifier_call_chain(struct srcu_notifier_head *, unsigned long, void *);
430:	int srcu_notifier_chain_register(struct srcu_notifier_head *, struct notifier_block *);
460:	int srcu_notifier_chain_unregister(struct srcu_notifier_head *, struct notifier_block *);
558:	int unregister_die_notifier(struct notifier_block *);
64:	static int notifier_call_chain(struct notifier_block **, unsigned long, void *, int, int *);
22:	static int notifier_chain_register(struct notifier_block **, struct notifier_block *);

File kernel/nsproxy.c:
532:	long __ia32_sys_setns(const struct pt_regs *);
532:	long __x64_sys_setns(const struct pt_regs *);
151:	int copy_namespaces(unsigned long, struct task_struct *);
257:	void exit_task_namespaces(struct task_struct *);
193:	void free_nsproxy(struct nsproxy *);
574:	int nsproxy_cache_init(void);
242:	void switch_task_namespaces(struct task_struct *, struct nsproxy *);
216:	int unshare_nsproxy_namespaces(unsigned long, struct nsproxy **, struct cred *, struct fs_struct *);
532:	static long __se_sys_setns(long, long);
67:	static struct nsproxy *create_new_namespaces(unsigned long, struct task_struct *, struct user_namespace *, struct fs_struct *);
301:	static void put_nsset(struct nsset *);
361:	static int validate_nsset(struct nsset *, struct pid *);

File kernel/padata.c:
982:	struct padata_instance *padata_alloc(const char *);
1066:	struct padata_shell *padata_alloc_shell(struct padata_instance *);
481:	void padata_do_multithreaded(struct padata_mt_job *);
180:	int padata_do_parallel(struct padata_shell *, struct padata_priv *, int *);
398:	void padata_do_serial(struct padata_priv *);
1053:	void padata_free(struct padata_instance *);
1103:	void padata_free_shell(struct padata_shell *);
1117:	void padata_init(void);
730:	int padata_set_cpumask(struct padata_instance *, int, cpumask_var_t);
691:	static int __padata_set_cpumasks(struct padata_instance *, cpumask_var_t, cpumask_var_t);
346:	static void invoke_padata_reorder(struct work_struct *);
566:	static struct parallel_data *padata_alloc_pd(struct padata_shell *);
815:	static int padata_cpu_dead(unsigned int, struct hlist_node *);
74:	static int padata_cpu_hash(struct parallel_data *, unsigned int);
800:	static int padata_cpu_online(unsigned int, struct hlist_node *);
251:	static struct padata_priv *padata_find_next(struct parallel_data *, bool);
441:	static void padata_mt_helper(struct work_struct *);
150:	static void padata_parallel_worker(struct work_struct *);
287:	static void padata_reorder(struct parallel_data *);
654:	static int padata_replace(struct padata_instance *);
356:	static void padata_serial_worker(struct work_struct *);
424:	static int padata_setup_cpumasks(struct padata_instance *);
855:	static void padata_sysfs_release(struct kobject *);
935:	static ssize_t padata_sysfs_show(struct kobject *, struct attribute *, char *);
950:	static ssize_t padata_sysfs_store(struct kobject *, struct attribute *, const char *, size_t);
679:	static bool padata_validate_cpumask(struct padata_instance *, const struct cpumask *);
85:	static struct padata_work *padata_work_alloc(void);
109:	static int padata_work_alloc_mt(int, void *, struct list_head *);
129:	static void padata_work_free(struct padata_work *);
135:	static void padata_works_free(struct list_head *);
868:	static ssize_t show_cpumask(struct padata_instance *, struct attribute *, char *);
886:	static ssize_t store_cpumask(struct padata_instance *, struct attribute *, const char *, size_t);

File kernel/panic.c:
711:	void __stack_chk_fail(void);
603:	void __warn(const char *, int, void *, unsigned int, struct pt_regs *, struct warn_args *);
667:	void __warn_printk(const char *, ...);
468:	void add_taint(unsigned int, enum lockdep_ok);
106:	void crash_smp_send_stop(void);
455:	unsigned long get_taint(void);
134:	void nmi_panic(struct pt_regs *, const char *);
95:	void nmi_panic_self_stop(struct pt_regs *);
554:	void oops_enter(void);
591:	void oops_exit(void);
535:	bool oops_may_print(void);
177:	void panic(const char *, ...);
85:	void panic_smp_self_stop(void);
426:	const char *print_tainted(void);
449:	int test_taint(unsigned int);
691:	static int clear_warn_once_fops_open(struct inode *, struct file *);
684:	static int clear_warn_once_set(void *, u64);
496:	static void do_oops_enter_exit(void);
570:	static int init_oops_id(void);
73:	static long no_blink(int);
728:	static int oops_setup(char *);
738:	static int panic_on_taint_setup(char *);
694:	static int register_warn_debugfs(void);

File kernel/params.c:
837:	ssize_t __modver_version_show(struct module_attribute *, struct module_kobject *, char *);
734:	void destroy_params(const struct kernel_param *, unsigned int);
584:	void kernel_param_lock(struct module *);
589:	void kernel_param_unlock(struct module *);
723:	void module_param_sysfs_remove(struct module *);
688:	int module_param_sysfs_setup(struct module *, const struct kernel_param *, unsigned int);
275:	void param_free_charp(void *);
299:	int param_get_bool(char *, const struct kernel_param *);
236:	int param_get_byte(char *, const struct kernel_param *);
269:	int param_get_charp(char *, const struct kernel_param *);
244:	int param_get_hexint(char *, const struct kernel_param *);
239:	int param_get_int(char *, const struct kernel_param *);
359:	int param_get_invbool(char *, const struct kernel_param *);
241:	int param_get_long(char *, const struct kernel_param *);
237:	int param_get_short(char *, const struct kernel_param *);
506:	int param_get_string(char *, const struct kernel_param *);
240:	int param_get_uint(char *, const struct kernel_param *);
243:	int param_get_ullong(char *, const struct kernel_param *);
242:	int param_get_ulong(char *, const struct kernel_param *);
238:	int param_get_ushort(char *, const struct kernel_param *);
371:	int param_set_bint(const char *, const struct kernel_param *);
289:	int param_set_bool(const char *, const struct kernel_param *);
313:	int param_set_bool_enable_only(const char *, const struct kernel_param *);
236:	int param_set_byte(const char *, const struct kernel_param *);
246:	int param_set_charp(const char *, const struct kernel_param *);
492:	int param_set_copystring(const char *, const struct kernel_param *);
239:	int param_set_int(const char *, const struct kernel_param *);
345:	int param_set_invbool(const char *, const struct kernel_param *);
241:	int param_set_long(const char *, const struct kernel_param *);
237:	int param_set_short(const char *, const struct kernel_param *);
240:	int param_set_uint(const char *, const struct kernel_param *);
242:	int param_set_ulong(const char *, const struct kernel_param *);
238:	int param_set_ushort(const char *, const struct kernel_param *);
95:	bool parameq(const char *, const char *);
84:	bool parameqn(const char *, const char *, size_t);
161:	char *parse_args(const char *, char *, const struct kernel_param *, unsigned int, s16, s16, void *, int (*)(char *, char *, const char *, void *));
607:	static int add_sysfs_param(struct module_kobject *, const struct kernel_param *, const char *);
778:	static void kernel_add_sysfs_param(const char *, const struct kernel_param *, unsigned int);
46:	static void *kmalloc_parameter(unsigned int);
743:	static struct module_kobject *locate_module_kobject(const char *);
62:	static void maybe_kfree_parameter(void *);
870:	static ssize_t module_attr_show(struct kobject *, struct attribute *, char *);
889:	static ssize_t module_attr_store(struct kobject *, struct attribute *, const char *, size_t);
929:	static void module_kobj_release(struct kobject *);
395:	static int param_array(struct module *, const char *, const char *, unsigned int, void *, int, int (*)(const char *, const struct kernel_param *), s16, unsigned int *, unsigned int);
475:	static void param_array_free(void *);
454:	static int param_array_get(char *, const struct kernel_param *);
444:	static int param_array_set(const char *, const struct kernel_param *);
539:	static ssize_t param_attr_show(struct module_attribute *, struct module_kobject *, char *);
555:	static ssize_t param_attr_store(struct module_attribute *, struct module_kobject *, const char *, size_t);
100:	static bool param_check_unsafe(const struct kernel_param *, const struct kernel_param *);
812:	static void param_sysfs_builtin(void);
943:	static int param_sysfs_init(void);
115:	static int parse_one(char *, char *, const char *, const struct kernel_param *, unsigned int, s16, s16, void *, int (*)(char *, char *, const char *, void *));
913:	static int uevent_filter(struct kset *, struct kobject *);

File kernel/pid.c:
722:	long __ia32_sys_pidfd_getfd(const struct pt_regs *);
588:	long __ia32_sys_pidfd_open(const struct pt_regs *);
496:	pid_t __task_pid_nr_ns(struct task_struct *, enum pid_type, struct pid_namespace *);
722:	long __x64_sys_pidfd_getfd(const struct pt_regs *);
588:	long __x64_sys_pidfd_open(const struct pt_regs *);
160:	struct pid *alloc_pid(struct pid_namespace *, pid_t *, size_t);
334:	void attach_pid(struct task_struct *, enum pid_type);
364:	void change_pid(struct task_struct *, enum pid_type, struct pid *);
359:	void detach_pid(struct task_struct *, enum pid_type);
305:	void disable_pid_allocation(struct pid_namespace *);
371:	void exchange_tids(struct task_struct *, struct task_struct *);
522:	struct pid *find_ge_pid(int, struct pid_namespace *);
464:	struct pid *find_get_pid(pid_t);
428:	struct task_struct *find_get_task_by_vpid(pid_t);
312:	struct pid *find_pid_ns(int, struct pid_namespace *);
416:	struct task_struct *find_task_by_pid_ns(pid_t, struct pid_namespace *);
423:	struct task_struct *find_task_by_vpid(pid_t);
318:	struct pid *find_vpid(int);
127:	void free_pid(struct pid *);
452:	struct task_struct *get_pid_task(struct pid *, enum pid_type);
442:	struct pid *get_task_pid(struct task_struct *, enum pid_type);
638:	void pid_idr_init(void);
476:	pid_t pid_nr_ns(struct pid *, struct pid_namespace *);
399:	struct task_struct *pid_task(struct pid *, enum pid_type);
490:	pid_t pid_vnr(struct pid *);
527:	struct pid *pidfd_get_pid(unsigned int, unsigned int *);
106:	void put_pid(struct pid *);
511:	struct pid_namespace *task_active_pid_ns(struct task_struct *);
391:	void transfer_pid(struct task_struct *, struct task_struct *, enum pid_type);
340:	static void __change_pid(struct task_struct *, enum pid_type, struct pid *);
722:	static long __se_sys_pidfd_getfd(long, long, long);
588:	static long __se_sys_pidfd_open(long, long);
121:	static void delayed_put_pid(struct callback_head *);
685:	static int pidfd_getfd(struct pid *, int);
612:	static int proc_dointvec_pidmax(struct ctl_table *, int, void *, size_t *, loff_t *);

File kernel/pid_namespace.c:
143:	struct pid_namespace *copy_pid_ns(unsigned long, struct user_namespace *, struct pid_namespace *);
161:	void put_pid_ns(struct pid_namespace *);
309:	int reboot_pid_ns(struct pid_namespace *, int);
174:	void zap_pid_ns_processes(struct pid_namespace *);
71:	static struct pid_namespace *create_pid_namespace(struct user_namespace *, struct pid_namespace *);
125:	static void delayed_free_pidns(struct callback_head *);
460:	static int pid_namespaces_init(void);
267:	static int pid_ns_ctl_handler(struct ctl_table *, int, void *, size_t *, loff_t *);
356:	static struct ns_common *pidns_for_children_get(struct task_struct *);
343:	static struct ns_common *pidns_get(struct task_struct *);
416:	static struct ns_common *pidns_get_parent(struct ns_common *);
384:	static int pidns_install(struct nsset *, struct ns_common *);
434:	static struct user_namespace *pidns_owner(struct ns_common *);
379:	static void pidns_put(struct ns_common *);

File kernel/power/console.c:
130:	void pm_prepare_console(void);
143:	void pm_restore_console(void);
46:	void pm_vt_switch_required(struct device *, bool);
78:	void pm_vt_switch_unregister(struct device *);
107:	static bool pm_vt_switch(void);

File kernel/power/hibernate.c:
272:	int arch_resume_nosmt(void);
707:	int hibernate(void);
72:	bool hibernate_acquire(void);
804:	int hibernate_quiet_exec(int (*)(void *), void *);
77:	void hibernate_release(void);
438:	int hibernate_resume_nonboot_cpu_disable(void);
82:	bool hibernation_available(void);
554:	int hibernation_platform_enter(void);
527:	int hibernation_restore(int);
91:	void hibernation_set_ops(const struct platform_hibernation_ops *);
363:	int hibernation_snapshot(int);
251:	void swsusp_show_speed(ktime_t, ktime_t, unsigned int, char *);
112:	bool system_entering_hibernation(void);
286:	static int create_image(int);
1059:	static ssize_t disk_show(struct kobject *, struct kobj_attribute *, char *);
1094:	static ssize_t disk_store(struct kobject *, struct kobj_attribute *, const char *, size_t);
1293:	static int hibernate_setup(char *);
119:	static void hibernation_debug_sleep(void);
1205:	static ssize_t image_size_show(struct kobject *, struct kobj_attribute *, char *);
1211:	static ssize_t image_size_store(struct kobject *, struct kobj_attribute *, const char *, size_t);
678:	static int load_image_and_restore(void);
1330:	static int nohibernate_setup(char *);
1309:	static int noresume_setup(char *);
1263:	static int pm_disk_init(void);
634:	static void power_down(void);
1226:	static ssize_t reserved_size_show(struct kobject *, struct kobj_attribute *, char *);
1232:	static ssize_t reserved_size_store(struct kobject *, struct kobj_attribute *, const char *, size_t);
1280:	static int resume_offset_setup(char *);
1182:	static ssize_t resume_offset_show(struct kobject *, struct kobj_attribute *, char *);
1188:	static ssize_t resume_offset_store(struct kobject *, struct kobj_attribute *, const char *, size_t);
1271:	static int resume_setup(char *);
1145:	static ssize_t resume_show(struct kobject *, struct kobj_attribute *, char *);
1152:	static ssize_t resume_store(struct kobject *, struct kobj_attribute *, const char *, size_t);
452:	static int resume_target_kernel(bool);
1321:	static int resumedelay_setup(char *);
1315:	static int resumewait_setup(char *);
909:	static int software_resume(void);

File kernel/power/main.c:
553:	void __pm_pr_dbg(bool, const char *, ...);
54:	void ksys_sync_helper(void);
24:	void lock_system_sleep(void);
92:	int pm_notifier_call_chain(unsigned long);
83:	int pm_notifier_call_chain_robust(unsigned long, unsigned long);
71:	int register_pm_notifier(struct notifier_block *);
31:	void unlock_system_sleep(void);
77:	int unregister_pm_notifier(struct notifier_block *);
611:	static suspend_state_t decode_state(const char *, size_t);
147:	static suspend_state_t decode_suspend_state(const char *, size_t);
319:	static ssize_t fail_show(struct kobject *, struct kobj_attribute *, char *);
320:	static ssize_t failed_freeze_show(struct kobject *, struct kobj_attribute *, char *);
321:	static ssize_t failed_prepare_show(struct kobject *, struct kobj_attribute *, char *);
326:	static ssize_t failed_resume_early_show(struct kobject *, struct kobj_attribute *, char *);
327:	static ssize_t failed_resume_noirq_show(struct kobject *, struct kobj_attribute *, char *);
325:	static ssize_t failed_resume_show(struct kobject *, struct kobj_attribute *, char *);
323:	static ssize_t failed_suspend_late_show(struct kobject *, struct kobj_attribute *, char *);
324:	static ssize_t failed_suspend_noirq_show(struct kobject *, struct kobj_attribute *, char *);
322:	static ssize_t failed_suspend_show(struct kobject *, struct kobj_attribute *, char *);
329:	static ssize_t last_failed_dev_show(struct kobject *, struct kobj_attribute *, char *);
343:	static ssize_t last_failed_errno_show(struct kobject *, struct kobj_attribute *, char *);
357:	static ssize_t last_failed_step_show(struct kobject *, struct kobj_attribute *, char *);
124:	static ssize_t mem_sleep_show(struct kobject *, struct kobj_attribute *, char *);
166:	static ssize_t mem_sleep_store(struct kobject *, struct kobj_attribute *, const char *, size_t);
100:	static ssize_t pm_async_show(struct kobject *, struct kobj_attribute *, char *);
106:	static ssize_t pm_async_store(struct kobject *, struct kobj_attribute *, const char *, size_t);
538:	static int pm_debug_messages_setup(char *);
514:	static ssize_t pm_debug_messages_show(struct kobject *, struct kobj_attribute *, char *);
520:	static ssize_t pm_debug_messages_store(struct kobject *, struct kobj_attribute *, const char *, size_t);
453:	static int pm_debugfs_init(void);
863:	static ssize_t pm_freeze_timeout_show(struct kobject *, struct kobj_attribute *, char *);
869:	static ssize_t pm_freeze_timeout_store(struct kobject *, struct kobj_attribute *, const char *, size_t);
941:	static int pm_init(void);
474:	static ssize_t pm_print_times_show(struct kobject *, struct kobj_attribute *, char *);
480:	static ssize_t pm_print_times_store(struct kobject *, struct kobj_attribute *, const char *, size_t);
239:	static ssize_t pm_test_show(struct kobject *, struct kobj_attribute *, char *);
260:	static ssize_t pm_test_store(struct kobject *, struct kobj_attribute *, const char *, size_t);
503:	static ssize_t pm_wakeup_irq_show(struct kobject *, struct kobj_attribute *, char *);
591:	static ssize_t state_show(struct kobject *, struct kobj_attribute *, char *);
638:	static ssize_t state_store(struct kobject *, struct kobj_attribute *, const char *, size_t);
318:	static ssize_t success_show(struct kobject *, struct kobj_attribute *, char *);
451:	static int suspend_stats_open(struct inode *, struct file *);
396:	static int suspend_stats_show(struct seq_file *, void *);
202:	static ssize_t sync_on_suspend_show(struct kobject *, struct kobj_attribute *, char *);
208:	static ssize_t sync_on_suspend_store(struct kobject *, struct kobj_attribute *, const char *, size_t);
701:	static ssize_t wakeup_count_show(struct kobject *, struct kobj_attribute *, char *);
711:	static ssize_t wakeup_count_store(struct kobject *, struct kobj_attribute *, const char *, size_t);

File kernel/power/poweroff.c:
19:	static void do_poweroff(struct work_struct *);
26:	static void handle_poweroff(int);
39:	static int pm_sysrq_init(void);

File kernel/power/process.c:
170:	int freeze_kernel_threads(void);
123:	int freeze_processes(void);
227:	void thaw_kernel_threads(void);
189:	void thaw_processes(void);
31:	static int try_to_freeze_tasks(bool);

File kernel/power/qos.c:
264:	void cpu_latency_qos_add_request(struct pm_qos_request *, s32);
226:	s32 cpu_latency_qos_limit(void);
316:	void cpu_latency_qos_remove_request(struct pm_qos_request *);
238:	bool cpu_latency_qos_request_active(struct pm_qos_request *);
290:	void cpu_latency_qos_update_request(struct pm_qos_request *, s32);
433:	void freq_constraints_init(struct freq_constraints *);
615:	int freq_qos_add_notifier(struct freq_constraints *, enum freq_qos_req_type, struct notifier_block *);
528:	int freq_qos_add_request(struct freq_constraints *, struct freq_qos_request *, enum freq_qos_req_type, s32);
493:	int freq_qos_apply(struct freq_qos_request *, enum pm_qos_req_action, s32);
461:	s32 freq_qos_read_value(struct freq_constraints *, enum freq_qos_req_type);
648:	int freq_qos_remove_notifier(struct freq_constraints *, enum freq_qos_req_type, struct notifier_block *);
590:	int freq_qos_remove_request(struct freq_qos_request *);
564:	int freq_qos_update_request(struct freq_qos_request *, s32);
53:	s32 pm_qos_read_value(struct pm_qos_constraints *);
174:	bool pm_qos_update_flags(struct pm_qos_flags *, struct pm_qos_flags_request *, enum pm_qos_req_action, s32);
98:	int pm_qos_update_target(struct pm_qos_constraints *, struct plist_node *, enum pm_qos_req_action, int);
413:	static int cpu_latency_qos_init(void);
335:	static int cpu_latency_qos_open(struct inode *, struct file *);
361:	static ssize_t cpu_latency_qos_read(struct file *, char *, size_t, loff_t *);
349:	static int cpu_latency_qos_release(struct inode *, struct file *);
378:	static ssize_t cpu_latency_qos_write(struct file *, const char *, size_t, loff_t *);
58:	static int pm_qos_get_value(struct pm_qos_constraints *);

File kernel/power/snapshot.c:
947:	void __register_nosave_region(unsigned long, unsigned long, int);
1147:	void clear_free_pages(void);
1078:	int create_basic_memory_bitmaps(void);
46:	void enable_restore_image_protection(void);
1128:	void free_basic_memory_bitmaps(void);
186:	unsigned long get_safe_page(gfp_t);
103:	void hibernate_image_size_init(void);
1697:	int hibernate_preallocate_memory(void);
90:	void hibernate_reserved_size_init(void);
1177:	unsigned int snapshot_additional_pages(struct zone *);
2042:	unsigned long snapshot_get_image_size(void);
2668:	int snapshot_image_loaded(struct snapshot_handle *);
2093:	int snapshot_read_next(struct snapshot_handle *);
2657:	void snapshot_write_finalize(struct snapshot_handle *);
2586:	int snapshot_write_next(struct snapshot_handle *);
1464:	void swsusp_free(void);
1023:	int swsusp_page_is_forbidden(struct page *);
1975:	int swsusp_save(void);
999:	void swsusp_set_page_free(struct page *);
1011:	void swsusp_unset_page_free(struct page *);
174:	static void *__get_safe_page(gfp_t);
427:	static int add_rtree_block(struct mem_zone_bm_rtree *, gfp_t, int, struct chain_allocator *);
191:	static struct page *alloc_image_page(gfp_t);
401:	static struct rtree_node *alloc_rtree_node(gfp_t, int, struct chain_allocator *, struct list_head *);
274:	static void *chain_alloc(struct chain_allocator *, unsigned int);
1409:	static void copy_data_pages(struct memory_bitmap *, struct memory_bitmap *);
1314:	static unsigned int count_data_pages(void);
586:	static int create_mem_extents(struct list_head *, gfp_t);
569:	static void free_mem_extents(struct list_head *);
1596:	static unsigned long free_unnecessary_pages(void);
535:	static void free_zone_bm_rtree(struct mem_zone_bm_rtree *, int);
2533:	static void *get_buffer(struct chain_allocator *, struct memory_bitmap *);
155:	static void *get_image_page(gfp_t, int);
2047:	static int init_header(struct swsusp_info *);
2194:	static int load_header(struct swsusp_info *);
1042:	static void mark_nosave_pages(struct memory_bitmap *);
796:	static void memory_bm_clear_bit(struct memory_bitmap *, unsigned long);
807:	static void memory_bm_clear_current(struct memory_bitmap *, struct memory_bitmap *);
642:	static int memory_bm_create(struct memory_bitmap *, gfp_t, int);
706:	static int memory_bm_find_bit(struct memory_bitmap *, unsigned long, void **, unsigned int *);
685:	static void memory_bm_free(struct memory_bitmap *, int);
881:	static unsigned long memory_bm_next_pfn(struct memory_bitmap *);
772:	static void memory_bm_set_bit(struct memory_bitmap *, unsigned long);
815:	static int memory_bm_test_bit(struct memory_bitmap *, unsigned long);
1542:	static unsigned long preallocate_image_memory(unsigned long, unsigned long);
2457:	static int prepare_image(struct memory_bitmap *, struct memory_bitmap *);
1353:	static void safe_copy_page(void *, struct page *);
1282:	static struct page *saveable_page(struct zone *, unsigned long);
1005:	static int swsusp_page_is_free(struct page *);
1017:	static void swsusp_set_page_forbidden(struct page *);
1029:	static void swsusp_unset_page_forbidden(struct page *);
2215:	static int unpack_orig_pfns(unsigned long *, struct memory_bitmap *);

File kernel/power/suspend.c:
371:	void arch_suspend_disable_irqs(void);
377:	void arch_suspend_enable_irqs(void);
172:	void pm_states_init(void);
603:	int pm_suspend(suspend_state_t);
70:	bool pm_suspend_default_s2idle(void);
76:	void s2idle_set_ops(const struct platform_s2idle_ops *);
149:	void s2idle_wake(void);
474:	int suspend_devices_and_enter(suspend_state_t);
203:	void suspend_set_ops(const struct platform_suspend_ops *);
232:	int suspend_valid_only_mem(suspend_state_t);
545:	static int enter_state(suspend_state_t);
184:	static int mem_sleep_default_setup(char *);
88:	static void s2idle_enter(void);
389:	static int suspend_enter(suspend_state_t, bool *);
343:	static int suspend_prepare(suspend_state_t);
323:	static int suspend_test(int);
162:	static bool valid_state(suspend_state_t);

File kernel/power/swap.c:
176:	sector_t alloc_swapdev_block(int);
196:	void free_all_swap_pages(int);
1521:	int swsusp_check(void);
1566:	void swsusp_close(fmode_t);
1486:	int swsusp_read(unsigned int *);
213:	int swsusp_swap_in_use(void);
1581:	int swsusp_unmark(void);
911:	int swsusp_write(unsigned int);
600:	static int crc32_threadfn(void *);
971:	static int get_swap_reader(struct swap_map_handle *, unsigned int *);
245:	static void hib_end_io(struct bio *);
270:	static int hib_submit_io(int, int, unsigned long, void *, struct hib_bio_batch *);
302:	static int hib_wait_io(struct hib_bio_batch *);
1059:	static int load_image(struct swap_map_handle *, struct snapshot_handle *, unsigned int);
1165:	static int load_image_lzo(struct swap_map_handle *, struct snapshot_handle *, unsigned int);
644:	static int lzo_compress_threadfn(void *);
1130:	static int lzo_decompress_threadfn(void *);
316:	static int mark_swapfiles(struct swap_map_handle *, unsigned int);
538:	static int save_image(struct swap_map_handle *, struct snapshot_handle *, unsigned int);
675:	static int save_image_lzo(struct swap_map_handle *, struct snapshot_handle *, unsigned int);
1017:	static int swap_read_page(struct swap_map_handle *, void *, struct hib_bio_batch *);
448:	static int swap_write_page(struct swap_map_handle *, void *, struct hib_bio_batch *);
130:	static int swsusp_extents_insert(unsigned long);
1606:	static int swsusp_header_init(void);
345:	static int swsusp_swap_check(void);
376:	static int write_page(void *, sector_t, struct hib_bio_batch *);

File kernel/power/user.c:
41:	int is_hibernate_resume_dev(dev_t);
410:	static long snapshot_compat_ioctl(struct file *, unsigned int, unsigned long);
446:	static int snapshot_device_init(void);
239:	static long snapshot_ioctl(struct file *, unsigned int, unsigned long);
46:	static int snapshot_open(struct inode *, struct file *);
131:	static ssize_t snapshot_read(struct file *, char *, size_t, loff_t *);
105:	static int snapshot_release(struct inode *, struct file *);
203:	static int snapshot_set_swap_area(struct snapshot_data *, void *);
164:	static ssize_t snapshot_write(struct file *, const char *, size_t, loff_t *);

File kernel/printk/printk.c:
1727:	long __ia32_sys_syslog(const struct pt_regs *);
3140:	int __printk_ratelimit(const char *);
1727:	long __x64_sys_syslog(const struct pt_regs *);
2294:	int add_preferred_console(char *, int, char *);
2596:	void console_conditional_schedule(void);
2657:	struct tty_driver *console_device(int *);
2631:	void console_flush_on_panic(enum con_flush_mode);
2985:	void console_init(void);
2364:	void console_lock(void);
2687:	void console_start(struct console *);
2679:	void console_stop(struct console *);
2384:	int console_trylock(void);
2603:	void console_unblank(void);
2446:	void console_unlock(void);
3099:	void defer_console_output(void);
175:	int devkmsg_sysctl_set_loglvl(struct ctl_table *, int, void *, size_t *, loff_t *);
1610:	int do_syslog(int, char *, int, int);
2166:	void early_printk(const char *, ...);
2398:	int is_console_locked(void);
3254:	void kmsg_dump(enum kmsg_dump_reason);
3397:	bool kmsg_dump_get_buffer(struct kmsg_dumper *, bool, char *, size_t, size_t *);
3364:	bool kmsg_dump_get_line(struct kmsg_dumper *, bool, char *, size_t, size_t *);
3310:	bool kmsg_dump_get_line_nolock(struct kmsg_dumper *, bool, char *, size_t, size_t *);
3229:	const char *kmsg_dump_reason_str(enum kmsg_dump_reason);
3179:	int kmsg_dump_register(struct kmsg_dumper *);
3499:	void kmsg_dump_rewind(struct kmsg_dumper *);
3485:	void kmsg_dump_rewind_nolock(struct kmsg_dumper *);
3208:	int kmsg_dump_unregister(struct kmsg_dumper *);
456:	char *log_buf_addr_get(void);
463:	u32 log_buf_len_get(void);
953:	void log_buf_vmcoreinfo_setup(void);
2115:	int printk(const char *, ...);
3120:	int printk_deferred(const char *, ...);
450:	bool printk_percpu_data_ready(void);
3155:	bool printk_timed_ratelimit(unsigned long *, unsigned int);
2783:	void register_console(struct console *);
2328:	void resume_console(void);
1111:	void setup_log_buf(int);
2318:	void suspend_console(void);
2919:	int unregister_console(struct console *);
2082:	int vprintk(const char *, struct __va_list_tag *);
2088:	int vprintk_default(const char *, struct __va_list_tag *);
3110:	int vprintk_deferred(const char *, struct __va_list_tag *);
2034:	int vprintk_emit(int, int, const struct dev_printk_info *, const char *, struct __va_list_tag *);
1985:	int vprintk_store(int, int, const struct dev_printk_info *, const char *, struct __va_list_tag *);
3086:	void wake_up_klogd(void);
1748:	void zap_locks(void);
2183:	static int __add_preferred_console(char *, int, char *, bool, char *);
119:	static int __control_devkmsg(char *);
247:	static void __up_console_sem(unsigned long);
1084:	static unsigned int add_to_rb(struct printk_record *, struct printk_ringbuffer *);
1256:	static void boot_delay_msec(int);
1238:	static int boot_delay_setup(char *);
1896:	static void call_console_drivers(size_t, size_t, const char *, const char *);
556:	static int check_syslog_permissions(int, int);
2346:	static int console_cpu_notify(unsigned int);
2217:	static int console_msg_format_setup(char *);
2231:	static int console_setup(char *);
2302:	static int console_suspend_disable(char *);
1837:	static int console_trylock_spinning(void);
147:	static int control_devkmsg(char *);
681:	static int devkmsg_emit(int, int, const char *, const char *, ...);
826:	static loff_t devkmsg_llseek(struct file *, loff_t, int);
885:	static int devkmsg_open(struct inode *, struct file *);
861:	static __poll_t devkmsg_poll(struct file *, poll_table *);
756:	static ssize_t devkmsg_read(struct file *, char *, size_t, loff_t *);
921:	static int devkmsg_release(struct inode *, struct file *);
693:	static ssize_t devkmsg_write(struct kiocb *, struct iov_iter *);
1456:	static size_t get_record_print_text_size(struct printk_info *, unsigned int, bool, bool);
1215:	static int ignore_loglevel_setup(char *);
591:	static ssize_t info_print_ext_header(char *, struct printk_info *, size_t);
1317:	static size_t info_print_prefix(const struct printk_info *, bool, bool, char *);
2697:	static int keep_bootcon_setup(char *);
1046:	static void log_buf_add_cpu(void);
1028:	static int log_buf_len_setup(char *);
1014:	static void log_buf_len_update(u64);
497:	static int log_store(u32, int, int, enum log_flags, const struct dev_printk_info *, const char *, u16, u64);
633:	static ssize_t msg_add_dict_text(char *, size_t, const char *, const char *);
612:	static ssize_t msg_add_ext_text(char *, size_t, const char *, size_t, unsigned char);
649:	static ssize_t msg_print_ext_body(char *, size_t, char *, size_t, struct dev_printk_info *);
3023:	static int printk_late_init(void);
1355:	static size_t record_print_text(struct printk_record *, bool, bool);
1473:	static int syslog_print(char *, int);
1541:	static int syslog_print_all(char *, int, bool);
2716:	static int try_enable_new_console(struct console *, bool);
3067:	static void wake_up_klogd_work_func(struct irq_work *);

File kernel/printk/printk_ringbuffer.c:
1628:	void prb_commit(struct prb_reserved_entry *);
1660:	void prb_final_commit(struct prb_reserved_entry *);
1983:	u64 prb_first_valid_seq(struct printk_ringbuffer *);
2036:	void prb_init(struct printk_ringbuffer *, char *, unsigned int, struct prb_desc *, unsigned int, struct printk_info *);
2008:	u64 prb_next_seq(struct printk_ringbuffer *);
1928:	bool prb_read_valid(struct printk_ringbuffer *, u64, struct printk_record *);
1958:	bool prb_read_valid_info(struct printk_ringbuffer *, u64, struct printk_info *, unsigned int *);
2081:	unsigned int prb_record_text_space(struct prb_reserved_entry *);
1480:	bool prb_reserve(struct prb_reserved_entry *, struct printk_ringbuffer *, struct printk_record *);
1348:	bool prb_reserve_in_last(struct prb_reserved_entry *, struct printk_ringbuffer *, struct printk_record *, u32, unsigned int);
1876:	static bool _prb_read_valid(struct printk_ringbuffer *, u64 *, struct printk_record *, unsigned int *);
1022:	static char *data_alloc(struct printk_ringbuffer *, struct prb_data_ring *, unsigned int, struct prb_data_blk_lpos *, unsigned long);
628:	static bool data_push_tail(struct printk_ringbuffer *, struct prb_data_ring *, unsigned long);
1103:	static char *data_realloc(struct printk_ringbuffer *, struct prb_data_ring *, unsigned int, struct prb_data_blk_lpos *, unsigned long);
765:	static bool desc_push_tail(struct printk_ringbuffer *, unsigned long);
432:	static enum desc_state desc_read(struct prb_desc_ring *, unsigned long, struct prb_desc *, u64 *, u32 *);
1746:	static int desc_read_finalized_seq(struct prb_desc_ring *, unsigned long, u64, struct prb_desc *);
873:	static bool desc_reserve(struct printk_ringbuffer *, unsigned long *);
1203:	static const char *get_data(struct prb_data_ring *, struct prb_data_blk_lpos *, unsigned int *);
1787:	static int prb_read(struct printk_ringbuffer *, u64, struct printk_record *, unsigned int *);
1173:	static unsigned int space_used(struct prb_data_ring *, struct prb_data_blk_lpos *, struct prb_data_blk_lpos *);

File kernel/printk/printk_safe.c:
327:	void printk_nmi_direct_enter(void);
333:	void printk_nmi_direct_exit(void);
307:	void printk_nmi_enter(void);
312:	void printk_nmi_exit(void);
360:	void printk_safe_enter(void);
367:	void printk_safe_exit(void);
245:	void printk_safe_flush(void);
267:	void printk_safe_flush_on_panic(void);
407:	void printk_safe_init(void);
373:	int vprintk_func(const char *, struct __va_list_tag *);
183:	static void __printk_safe_flush(struct irq_work *);
125:	static int printk_safe_flush_buffer(const char *, size_t);
71:	static int printk_safe_log_store(struct printk_safe_seq_buf *, const char *, struct __va_list_tag *);

File kernel/profile.c:
527:	int create_proc_profile(void);
454:	void create_prof_cpu_mask(void);
171:	int profile_event_register(enum profile_type, struct notifier_block *);
190:	int profile_event_unregister(enum profile_type, struct notifier_block *);
147:	int profile_handoff_task(struct task_struct *);
395:	void profile_hits(int, void *, unsigned int);
104:	int profile_init(void);
154:	void profile_munmap(unsigned long);
57:	int profile_setup(char *);
142:	void profile_task_exit(struct task_struct *);
403:	void profile_tick(int);
159:	int task_handoff_register(struct notifier_block *);
165:	int task_handoff_unregister(struct notifier_block *);
241:	static void __profile_flip_buffers(void *);
286:	static void do_profile_hits(void *, unsigned int, int);
423:	static int prof_cpu_mask_proc_open(struct inode *, struct file *);
417:	static int prof_cpu_mask_proc_show(struct seq_file *, void *);
428:	static ssize_t prof_cpu_mask_proc_write(struct file *, const char *, size_t, loff_t *);
335:	static int profile_dead_cpu(unsigned int);
271:	static void profile_discard_flip_buffers(void);
248:	static void profile_flip_buffers(void);
375:	static int profile_online_cpu(unsigned int);
353:	static int profile_prepare_cpu(unsigned int);
467:	static ssize_t read_profile(struct file *, char *, size_t, loff_t *);
500:	static ssize_t write_profile(struct file *, const char *, size_t, loff_t *);

File kernel/ptrace.c:
1423:	long __ia32_compat_sys_ptrace(const struct pt_regs *);
1257:	long __ia32_sys_ptrace(const struct pt_regs *);
67:	void __ptrace_link(struct task_struct *, struct task_struct *, const struct cred *);
115:	void __ptrace_unlink(struct task_struct *);
1257:	long __x64_sys_ptrace(const struct pt_regs *);
1326:	int compat_ptrace_request(struct task_struct *, compat_long_t, compat_ulong_t, compat_ulong_t);
590:	void exit_ptrace(struct task_struct *, struct list_head *);
1302:	int generic_ptrace_peekdata(struct task_struct *, unsigned long, unsigned long);
1314:	int generic_ptrace_pokedata(struct task_struct *, unsigned long, unsigned long);
42:	int ptrace_access_vm(struct task_struct *, unsigned long, void *, int, unsigned int);
364:	bool ptrace_may_access(struct task_struct *, unsigned int);
603:	int ptrace_readdata(struct task_struct *, unsigned long, char *, int);
1030:	int ptrace_request(struct task_struct *, long, unsigned long, unsigned long);
629:	int ptrace_writedata(struct task_struct *, char *, unsigned long, int);
534:	static bool __ptrace_detach(struct task_struct *, struct task_struct *);
291:	static int __ptrace_may_access(struct task_struct *, unsigned int);
1257:	static long __se_sys_ptrace(long, long, long, long);
373:	static int ptrace_attach(struct task_struct *, long, unsigned long, unsigned long);
245:	static int ptrace_check_attach(struct task_struct *, bool);
969:	static int ptrace_get_syscall_info(struct task_struct *, unsigned long, void *);
919:	static unsigned long ptrace_get_syscall_info_entry(struct task_struct *, struct pt_regs *, struct ptrace_syscall_info *);
684:	static int ptrace_getsiginfo(struct task_struct *, kernel_siginfo_t *);
716:	static int ptrace_peek_siginfo(struct task_struct *, unsigned long, unsigned long);
889:	static int ptrace_regset(struct task_struct *, int, unsigned int, struct iovec *);
816:	static int ptrace_resume(struct task_struct *, long, unsigned long);
700:	static int ptrace_setsiginfo(struct task_struct *, const kernel_siginfo_t *);
1012:	static int ptrace_setsigmask(struct task_struct *, sigset_t *);
483:	static int ptrace_traceme(void);
207:	static void ptrace_unfreeze_traced(struct task_struct *);

File kernel/range.c:
12:	int add_range(struct range *, int, int, u64, u64);
29:	int add_range_with_merge(struct range *, int, int, u64, u64);
126:	int clean_sort_range(struct range *, int);
161:	void sort_range(struct range *, int);
65:	void subtract_range(struct range *, int, u64, u64);
114:	static int cmp_range(const void *, const void *);

File kernel/rcu/rcu_segcblist.c:
67:	struct callback_head *rcu_cblist_dequeue(struct rcu_cblist *);
28:	void rcu_cblist_enqueue(struct rcu_cblist *, struct callback_head *);
43:	void rcu_cblist_flush_enqueue(struct rcu_cblist *, struct rcu_cblist *, struct callback_head *);
18:	void rcu_cblist_init(struct rcu_cblist *);
445:	bool rcu_segcblist_accelerate(struct rcu_segcblist *, unsigned long);
390:	void rcu_segcblist_advance(struct rcu_segcblist *, unsigned long);
162:	void rcu_segcblist_disable(struct rcu_segcblist *);
244:	void rcu_segcblist_enqueue(struct rcu_segcblist *, struct callback_head *);
264:	bool rcu_segcblist_entrain(struct rcu_segcblist *, struct callback_head *);
292:	void rcu_segcblist_extract_count(struct rcu_segcblist *, struct rcu_cblist *);
303:	void rcu_segcblist_extract_done_cbs(struct rcu_segcblist *, struct rcu_cblist *);
326:	void rcu_segcblist_extract_pend_cbs(struct rcu_segcblist *, struct rcu_cblist *);
202:	struct callback_head *rcu_segcblist_first_cb(struct rcu_segcblist *);
216:	struct callback_head *rcu_segcblist_first_pend_cb(struct rcu_segcblist *);
117:	void rcu_segcblist_inc_len(struct rcu_segcblist *);
145:	void rcu_segcblist_init(struct rcu_segcblist *);
344:	void rcu_segcblist_insert_count(struct rcu_segcblist *, struct rcu_cblist *);
355:	void rcu_segcblist_insert_done_cbs(struct rcu_segcblist *, struct rcu_cblist *);
377:	void rcu_segcblist_insert_pend_cbs(struct rcu_segcblist *, struct rcu_cblist *);
511:	void rcu_segcblist_merge(struct rcu_segcblist *, struct rcu_segcblist *);
227:	bool rcu_segcblist_nextgp(struct rcu_segcblist *, unsigned long *);
173:	void rcu_segcblist_offload(struct rcu_segcblist *);
192:	bool rcu_segcblist_pend_cbs(struct rcu_segcblist *);
182:	bool rcu_segcblist_ready_cbs(struct rcu_segcblist *);

File kernel/rcu/srcutree.c:
408:	int __srcu_read_lock(struct srcu_struct *);
424:	void __srcu_read_unlock(struct srcu_struct *, int);
911:	void call_srcu(struct srcu_struct *, struct callback_head *, rcu_callback_t);
375:	void cleanup_srcu_struct(struct srcu_struct *);
1030:	unsigned long get_state_synchronize_srcu(struct srcu_struct *);
215:	int init_srcu_struct(struct srcu_struct *);
1065:	bool poll_state_synchronize_srcu(struct srcu_struct *, unsigned long);
1094:	void srcu_barrier(struct srcu_struct *);
1152:	unsigned long srcu_batches_completed(struct srcu_struct *);
1376:	void srcu_init(void);
1327:	void srcu_torture_stats_print(struct srcu_struct *, char *, char *);
1316:	void srcutorture_get_gp_data(enum rcutorture_type, struct srcu_struct *, int *, unsigned long *);
1049:	unsigned long start_poll_synchronize_srcu(struct srcu_struct *);
1011:	void synchronize_srcu(struct srcu_struct *);
961:	void synchronize_srcu_expedited(struct srcu_struct *);
921:	static void __synchronize_srcu(struct srcu_struct *, bool);
232:	static void check_init_srcu_struct(struct srcu_struct *);
1442:	static int init_srcu_module_notifier(void);
171:	static int init_srcu_struct_fields(struct srcu_struct *, bool);
83:	static void init_srcu_struct_nodes(struct srcu_struct *, bool);
1306:	static void process_srcu(struct work_struct *);
1163:	static void srcu_advance_state(struct srcu_struct *);
1079:	static void srcu_barrier_cb(struct callback_head *);
1367:	static int srcu_bootup_announce(void);
463:	static void srcu_delay_timer(struct timer_list *);
603:	static void srcu_funnel_exp_start(struct srcu_struct *, struct srcu_node *, unsigned long);
636:	static void srcu_funnel_gp_start(struct srcu_struct *, struct srcu_data *, unsigned long, bool);
517:	static void srcu_gp_end(struct srcu_struct *);
443:	static void srcu_gp_start(struct srcu_struct *);
816:	static unsigned long srcu_gp_start_if_needed(struct srcu_struct *, struct callback_head *, bool);
1231:	static void srcu_invoke_callbacks(struct work_struct *);
764:	static bool srcu_might_be_idle(struct srcu_struct *);
1418:	static int srcu_module_notify(struct notifier_block *, unsigned long, void *);
338:	static bool srcu_readers_active(struct srcu_struct *);
1283:	static void srcu_reschedule(struct srcu_struct *, unsigned long);
703:	static bool try_check_zero(struct srcu_struct *, int, int);

File kernel/rcu/sync.c:
189:	void rcu_sync_dtor(struct rcu_sync *);
121:	void rcu_sync_enter(struct rcu_sync *);
36:	void rcu_sync_enter_start(struct rcu_sync *);
168:	void rcu_sync_exit(struct rcu_sync *);
21:	void rcu_sync_init(struct rcu_sync *);
73:	static void rcu_sync_func(struct callback_head *);

File kernel/rcu/tasks.h:
649:	void call_rcu_tasks_rude(struct callback_head *, rcu_callback_t);
1139:	void call_rcu_tasks_trace(struct callback_head *, rcu_callback_t);
601:	void exit_tasks_rcu_finish(void);
600:	void exit_tasks_rcu_start(void);
685:	void rcu_barrier_tasks_rude(void);
1231:	void rcu_init_tasks_generic(void);
773:	void rcu_read_unlock_trace_special(struct task_struct *, int);
1223:	void show_rcu_tasks_gp_kthreads(void);
1162:	void synchronize_rcu_tasks_trace(void);
1037:	static void check_all_holdout_tasks_trace(struct list_head *, bool, bool *);
766:	static void rcu_read_unlock_iw(struct irq_work *);
244:	static void rcu_spawn_tasks_kthread_generic(struct rcu_tasks *);
616:	static void rcu_tasks_be_rude(struct work_struct *);
182:	static int rcu_tasks_kthread(void *);
621:	static void rcu_tasks_rude_wait_gp(struct rcu_tasks *);
970:	static void rcu_tasks_trace_pertask(struct task_struct *, struct list_head *);
1069:	static void rcu_tasks_trace_postgp(struct rcu_tasks *);
988:	static void rcu_tasks_trace_postscan(struct list_head *);
953:	static void rcu_tasks_trace_pregp_step(void);
303:	static void rcu_tasks_wait_gp(struct rcu_tasks *);
280:	static void show_rcu_tasks_generic_gp_kthread(struct rcu_tasks *, char *);
1027:	static void show_stalled_ipi_trace(void);
1005:	static void show_stalled_task_trace(struct task_struct *, bool *);
790:	static void trc_add_holdout(struct task_struct *, struct list_head *);
799:	static void trc_del_holdout(struct task_struct *);
853:	static bool trc_inspect_reader(struct task_struct *, void *);
808:	static void trc_read_check_handler(void *);
898:	static void trc_wait_for_one_reader(struct task_struct *, struct list_head *);

File kernel/rcu/tree.c:
933:	void __rcu_irq_enter_check_tick(void);
3034:	void call_rcu(struct callback_head *, rcu_callback_t);
3713:	void cond_synchronize_rcu(unsigned long);
3688:	unsigned long get_state_synchronize_rcu(void);
3588:	void kfree_rcu_scheduler_running(void);
3465:	void kvfree_call_rcu(struct callback_head *, rcu_callback_t);
3836:	void rcu_barrier(void);
4089:	void rcu_cpu_starting(unsigned int);
358:	bool rcu_dynticks_zero_in_eqs(int, int *);
383:	bool rcu_eqs_special_set(int);
581:	unsigned long rcu_exp_batches_completed(void);
2640:	void rcu_force_quiescent_state(void);
184:	int rcu_get_gp_kthreads_prio(void);
569:	unsigned long rcu_get_gp_seq(void);
1690:	void rcu_gp_set_torture_wait(int);
664:	void rcu_idle_enter(void);
882:	void rcu_idle_exit(void);
4525:	void rcu_init(void);
4390:	void rcu_init_geometry(void);
1057:	void rcu_irq_enter(void);
1069:	void rcu_irq_enter_irqson(void);
772:	void rcu_irq_exit(void);
824:	void rcu_irq_exit_irqson(void);
786:	void rcu_irq_exit_preempt(void);
1105:	bool rcu_is_watching(void);
412:	void rcu_momentary_dyntick_idle(void);
981:	void rcu_nmi_enter(void);
708:	void rcu_nmi_exit(void);
4132:	void rcu_report_dead(unsigned int);
1123:	void rcu_request_urgent_qs_task(struct task_struct *);
2561:	void rcu_sched_clock_irq(int);
4294:	void rcu_scheduler_starting(void);
235:	void rcu_softirq_qs(void);
683:	void rcu_user_enter(void);
902:	void rcu_user_exit(void);
598:	void rcutorture_get_gp_data(enum rcutorture_type, int *, unsigned long *);
2402:	int rcutree_dead_cpu(unsigned int);
2336:	int rcutree_dying_cpu(unsigned int);
4169:	void rcutree_migrate_callbacks(int);
4059:	int rcutree_offline_cpu(unsigned int);
4034:	int rcutree_online_cpu(unsigned int);
3980:	int rcutree_prepare_cpu(unsigned int);
3666:	void synchronize_rcu(void);
2939:	static void __call_rcu(struct callback_head *, rcu_callback_t);
1610:	static bool __note_gp_changes(struct rcu_node *, struct rcu_data *);
507:	static void adjust_jiffies_till_sched_qs(void);
2924:	static void check_cb_ovld(struct rcu_data *);
1191:	static int dyntick_save_progress_counter(struct rcu_data *);
3377:	static void fill_page_cache_func(struct work_struct *);
2590:	static void force_qs_rnp(int (*)(struct rcu_data *));
2763:	static void invoke_rcu_core(void);
4504:	static void kfree_rcu_batch_init(void);
3354:	static void kfree_rcu_monitor(struct work_struct *);
3539:	static unsigned long kfree_rcu_shrink_count(struct shrinker *, struct shrink_control *);
3555:	static unsigned long kfree_rcu_shrink_scan(struct shrinker *, struct shrink_control *);
3187:	static void kfree_rcu_work(struct work_struct *);
1658:	static void note_gp_changes(struct rcu_data *);
525:	static int param_set_first_fqs_jiffies(const char *, const struct kernel_param *);
537:	static int param_set_next_fqs_jiffies(const char *, const struct kernel_param *);
1485:	static bool rcu_accelerate_cbs(struct rcu_node *, struct rcu_data *);
1527:	static void rcu_accelerate_cbs_unlocked(struct rcu_node *, struct rcu_data *);
1580:	static void rcu_advance_cbs_nowake(struct rcu_node *, struct rcu_data *);
3793:	static void rcu_barrier_callback(struct callback_head *);
3808:	static void rcu_barrier_func(void *);
3953:	static void rcu_boot_init_percpu_data(int);
2368:	static void rcu_cleanup_dead_rnp(struct rcu_node *);
2683:	static void rcu_core(void);
2732:	static void rcu_core_si(struct softirq_action *);
2788:	static void rcu_cpu_kthread(unsigned int);
2773:	static void rcu_cpu_kthread_park(unsigned int);
2778:	static int rcu_cpu_kthread_should_run(unsigned int);
1083:	static void rcu_disable_urgency_upon_qs(struct rcu_data *);
2424:	static void rcu_do_batch(struct rcu_data *);
247:	static void rcu_dynticks_eqs_enter(void);
272:	static void rcu_dynticks_eqs_exit(void);
620:	static void rcu_eqs_enter(bool);
841:	static void rcu_eqs_exit(bool);
1980:	static void rcu_gp_cleanup(void);
1911:	static void rcu_gp_fqs_loop(void);
1724:	static bool rcu_gp_init(void);
2081:	static int rcu_gp_kthread(void *);
1461:	static void rcu_gp_kthread_wake(void);
1208:	static int rcu_implicit_dynticks_qs(struct rcu_data *);
3927:	static void rcu_init_new_rnp(struct rcu_node *);
4306:	static void rcu_init_one(void);
433:	static int rcu_is_cpu_rrupt_from_idle(void);
3729:	static int rcu_pending(int);
4217:	static int rcu_pm_notify(struct notifier_block *, unsigned long, void *);
2254:	static void rcu_report_qs_rdp(struct rcu_data *);
2150:	static void rcu_report_qs_rnp(unsigned long, struct rcu_node *, unsigned long, unsigned long);
2830:	static int rcu_spawn_core_kthreads(void);
4238:	static int rcu_spawn_gp_kthread(void);
1358:	static bool rcu_start_this_gp(struct rcu_node *, struct rcu_data *, unsigned long);
3368:	static enum hrtimer_restart schedule_page_work_fn(struct hrtimer *);
2676:	static void strict_work_handler(struct work_struct *);

File kernel/rcu/tree_exp.h:
812:	void synchronize_rcu_expedited(void);
182:	static void __rcu_report_exp_rnp(struct rcu_node *, bool, unsigned long);
280:	static bool exp_funnel_lock(unsigned long);
733:	static void rcu_exp_handler(void *);
579:	static void rcu_exp_wait_wake(unsigned long);
230:	static void rcu_report_exp_cpu_mult(struct rcu_node *, unsigned long, bool);
73:	static void sync_exp_reset_tree_hotplug(void);
161:	static bool sync_rcu_exp_done_unlocked(struct rcu_node *);
423:	static void sync_rcu_exp_select_cpus(void);
337:	static void sync_rcu_exp_select_node_cpus(struct work_struct *);
749:	static void sync_sched_exp_online_cleanup(int);
485:	static void synchronize_rcu_expedited_wait(void);
466:	static bool synchronize_rcu_expedited_wait_once(long);
623:	static void wait_rcu_exp_gp(struct work_struct *);

File kernel/rcu/tree_plugin.h:
943:	void exit_rcu(void);
836:	void rcu_all_qs(void);
2383:	void rcu_bind_current_to_nocb(void);
2196:	void rcu_init_nohz(void);
1624:	bool rcu_is_nocb_cpu(int);
1256:	int rcu_needs_cpu(u64, u64 *);
2191:	void rcu_nocb_flush_deferred_wakeup(void);
862:	void rcu_note_context_switch(bool);
787:	void rcu_read_unlock_strict(void);
1865:	static void __call_rcu_nocb_wake(struct rcu_data *, bool, unsigned long);
1921:	static void do_nocb_bypass_wakeup_timer(struct timer_list *);
2156:	static void do_nocb_deferred_wakeup_common(struct rcu_data *);
2173:	static void do_nocb_deferred_wakeup_timer(struct timer_list *);
2089:	static void nocb_cb_wait(struct rcu_data *);
1936:	static void nocb_gp_wait(struct rcu_data *);
1485:	static int parse_rcu_nocb_poll(char *);
25:	static void rcu_bootup_announce_oddness(void);
961:	static void rcu_cpu_kthread_setup(unsigned int);
1505:	static void rcu_nocb_bypass_lock(struct rcu_data *);
1549:	static void rcu_nocb_bypass_unlock(struct rcu_data *);
2136:	static int rcu_nocb_cb_kthread(void *);
1684:	static bool rcu_nocb_do_flush_bypass(struct rcu_data *, struct callback_head *, unsigned long);
2073:	static int rcu_nocb_gp_kthread(void *);
1471:	static int rcu_nocb_setup(char *);
1755:	static bool rcu_nocb_try_bypass(struct rcu_data *, struct callback_head *, bool *, unsigned long);
2554:	static bool rcu_nohz_full_cpu(void);
2324:	static void rcu_organize_nocb_kthreads(void);
815:	static void rcu_qs(void);
2261:	static void rcu_spawn_one_nocb_kthread(int);
2394:	static void show_rcu_nocb_gp_state(struct rcu_data *);
2416:	static void show_rcu_nocb_state(struct rcu_data *);
1635:	static void wake_nocb_gp(struct rcu_data *, bool, unsigned long);

File kernel/rcu/tree_stall.h:
124:	void rcu_cpu_stall_reset(void);
804:	void rcu_fwd_progress_check(unsigned long);
60:	bool rcu_gp_might_be_stalled(void);
28:	int rcu_jiffies_till_stall_check(void);
84:	void rcu_sysrq_end(void);
78:	void rcu_sysrq_start(void);
688:	void show_rcu_gp_kthreads(void);
596:	static void check_cpu_stall(struct rcu_data *);
101:	static int check_cpu_stall_init(void);
109:	static void panic_on_rcu_stall(void);
542:	static void print_cpu_stall(unsigned long);
406:	static void print_cpu_stall_info(int);
471:	static void print_other_cpu_stall(unsigned long, unsigned long);
450:	static void rcu_check_gp_kthread_starvation(void);
327:	static void rcu_dump_cpu_stacks(void);
181:	static void rcu_iw_handler(struct irq_work *);
91:	static int rcu_panic(struct notifier_block *, unsigned long, void *);
159:	static void rcu_stall_kick_kthreads(void);
858:	static int rcu_sysrq_init(void);
846:	static void sysrq_show_rcu(int);

File kernel/rcu/update.c:
369:	void __wait_rcu_gp(bool, int, call_rcu_func_t *, struct rcu_synchronize *);
467:	void do_trace_rcu_torture_read(const char *, struct callback_head *, unsigned long, unsigned long, unsigned long);
193:	void rcu_end_inkernel_boot(void);
167:	void rcu_expedite_gp(void);
154:	bool rcu_gp_is_expedited(void);
138:	bool rcu_gp_is_normal(void);
204:	bool rcu_inkernel_boot_has_ended(void);
182:	void rcu_unexpedite_gp(void);
585:	void rcupdate_announce_bootup_oddness(void);
360:	void wakeme_after_rcu(struct callback_head *);
230:	static int rcu_set_runtime_mode(void);

File kernel/reboot.c:
310:	long __ia32_sys_reboot(const struct pt_regs *);
310:	long __x64_sys_reboot(const struct pt_regs *);
409:	void ctrl_alt_del(void);
115:	int devm_register_reboot_notifier(struct device *, struct notifier_block *);
213:	void do_kernel_restart(char *);
64:	void emergency_restart(void);
271:	void kernel_halt(void);
287:	void kernel_power_off(void);
244:	void kernel_restart(char *);
71:	void kernel_restart_prepare(char *);
218:	void migrate_to_reboot_cpu(void);
494:	void orderly_poweroff(bool);
515:	void orderly_reboot(void);
89:	int register_reboot_notifier(struct notifier_block *);
181:	int register_restart_handler(struct notifier_block *);
104:	int unregister_reboot_notifier(struct notifier_block *);
196:	int unregister_restart_handler(struct notifier_block *);
310:	static long __se_sys_reboot(long, long, long, long);
399:	static void deferred_cad(struct work_struct *);
110:	static void devm_unregister_reboot_notifier(struct device *, void *);
480:	static void poweroff_work_func(struct work_struct *);
521:	static int reboot_setup(char *);
502:	static void reboot_work_func(struct work_struct *);

File kernel/regset.c:
61:	int copy_regset_to_user(struct task_struct *, const struct user_regset_view *, unsigned int, unsigned int, unsigned int, void *);
33:	int regset_get(struct task_struct *, const struct user_regset *, unsigned int, void *);
42:	int regset_get_alloc(struct task_struct *, const struct user_regset *, unsigned int, void **);
6:	static int __regset_get(struct task_struct *, const struct user_regset *, unsigned int, void **);

File kernel/relay.c:
256:	int relay_buf_full(struct rchan_buf *);
840:	void relay_close(struct rchan *);
873:	void relay_flush(struct rchan *);
655:	int relay_late_setup_files(struct rchan *, const char *, struct dentry *);
564:	struct rchan *relay_open(const char *, struct dentry *, size_t, size_t, struct rchan_callbacks *, void *);
523:	int relay_prepare_cpu(unsigned int);
388:	void relay_reset(struct rchan *);
814:	void relay_subbufs_consumed(struct rchan *, unsigned int, size_t);
747:	size_t relay_switch_subbuf(struct rchan_buf *, size_t);
352:	static void __relay_reset(struct rchan_buf *, unsigned int);
633:	static void __relay_set_buf_dentry(void *);
289:	static void buf_mapped_default_callback(struct rchan_buf *, struct file *);
305:	static struct dentry *create_buf_file_default_callback(const char *, struct dentry *, umode_t, struct rchan_buf *, int *);
123:	static void *relay_alloc_buf(struct rchan_buf *, size_t *);
42:	static vm_fault_t relay_buf_fault(struct vm_fault *);
494:	static void relay_close_buf(struct rchan_buf *);
162:	static struct rchan_buf *relay_create_buf(struct rchan *);
416:	static struct dentry *relay_create_buf_file(struct rchan *, struct rchan_buf *, unsigned int);
208:	static void relay_destroy_buf(struct rchan_buf *);
917:	static int relay_file_mmap(struct file *, struct vm_area_struct *);
33:	static void relay_file_mmap_close(struct vm_area_struct *);
901:	static int relay_file_open(struct inode *, struct file *);
930:	static __poll_t relay_file_poll(struct file *, poll_table *);
1120:	static ssize_t relay_file_read(struct file *, char *, size_t, loff_t *);
1000:	static int relay_file_read_avail(struct rchan_buf *);
966:	static void relay_file_read_consume(struct rchan_buf *, size_t, size_t);
955:	static int relay_file_release(struct inode *, struct file *);
1287:	static ssize_t relay_file_splice_read(struct file *, loff_t *, struct pipe_inode_info *, size_t, unsigned int);
445:	static struct rchan_buf *relay_open_buf(struct rchan *, unsigned int);
1188:	static void relay_page_release(struct splice_pipe_desc *, unsigned int);
1173:	static void relay_pipe_buf_release(struct pipe_inode_info *, struct pipe_buffer *);
317:	static int remove_buf_file_default_callback(struct dentry *);
1195:	static ssize_t subbuf_splice_actor(struct pipe_inode_info *, size_t, int *, unsigned int, loff_t *, struct file *, loff_t *, struct file *);
275:	static int subbuf_start_default_callback(struct rchan_buf *, void *, void *, size_t);
337:	static void wakeup_readers(struct irq_work *);

File kernel/resource.c:
1545:	void __devm_release_region(struct device *, struct resource *, resource_size_t, resource_size_t);
1520:	struct resource *__devm_request_region(struct device *, struct resource *, resource_size_t, resource_size_t, const char *);
1199:	void __release_region(struct resource *, resource_size_t, resource_size_t);
1126:	struct resource *__request_region(struct resource *, resource_size_t, resource_size_t, const char *, int);
985:	int adjust_resource(struct resource *, resource_size_t, resource_size_t);
722:	int allocate_resource(struct resource *, struct resource *, resource_size_t, resource_size_t, resource_size_t, resource_size_t, resource_size_t (*)(void *, const struct resource *, resource_size_t, resource_size_t), void *);
570:	void arch_remove_reservations(struct resource *);
1491:	void devm_release_resource(struct device *, struct resource *);
1760:	struct resource *devm_request_free_mem_region(struct device *, struct resource *, unsigned long);
1453:	int devm_request_resource(struct device *, struct resource *, struct resource *);
869:	int insert_resource(struct resource *, struct resource *);
849:	struct resource *insert_resource_conflict(struct resource *, struct resource *);
886:	void insert_resource_expand_to_fit(struct resource *, struct resource *);
1656:	bool iomem_is_exclusive(u64);
1606:	int iomem_map_sanity_check(resource_size_t, unsigned long);
766:	struct resource *lookup_resource(struct resource *, resource_size_t);
1393:	void merge_system_ram_resource(struct resource *);
513:	int page_is_ram(unsigned long);
539:	int region_intersects(resource_size_t, size_t, unsigned long, unsigned long);
265:	void release_child_resources(struct resource *);
1260:	void release_mem_region_adjustable(resource_size_t, resource_size_t);
310:	int release_resource(struct resource *);
927:	int remove_resource(struct resource *);
1767:	struct resource *request_free_mem_region(struct resource *, unsigned long, const char *);
296:	int request_resource(struct resource *, struct resource *);
279:	struct resource *request_resource_conflict(struct resource *, struct resource *);
1059:	void reserve_region_with_split(struct resource *, resource_size_t, resource_size_t, const char *);
1093:	resource_size_t resource_alignment(struct resource *);
1696:	struct resource_entry *resource_list_create_entry(struct resource *, size_t);
1711:	void resource_list_free(struct list_head *);
434:	int walk_iomem_res_desc(unsigned long, unsigned long, u64, u64, void *, int (*)(struct resource *, void *));
461:	int walk_mem_res(u64, u64, void *, int (*)(struct resource *, void *));
478:	int walk_system_ram_range(unsigned long, unsigned long, void *, int (*)(unsigned long, unsigned long, void *));
448:	int walk_system_ram_res(u64, u64, void *, int (*)(struct resource *, void *));
938:	static int __adjust_resource(struct resource *, resource_size_t, resource_size_t);
595:	static int __find_resource(struct resource *, struct resource *, struct resource *, resource_size_t, struct resource_constraint *);
784:	static struct resource *__insert_resource(struct resource *, struct resource *);
242:	static void __release_child_resources(struct resource *);
213:	static int __release_resource(struct resource *, bool);
1721:	static struct resource *__request_free_mem_region(struct device *, struct resource *, unsigned long, const char *);
185:	static struct resource *__request_resource(struct resource *, struct resource *);
998:	static void __reserve_region_with_split(struct resource *, resource_size_t, resource_size_t, const char *);
165:	static struct resource *alloc_resource(gfp_t);
1511:	static int devm_region_match(struct device *, void *, void *);
1504:	static void devm_region_release(struct device *, void *);
1477:	static int devm_resource_match(struct device *, void *, void *);
1428:	static void devm_resource_release(struct device *, void *);
341:	static int find_next_iomem_res(resource_size_t, resource_size_t, unsigned long, unsigned long, bool, struct resource *);
150:	static void free_resource(struct resource *);
139:	static int ioresources_init(void);
77:	static void *r_next(struct seq_file *, void *, loff_t *);
105:	static int r_show(struct seq_file *, void *);
88:	static void *r_start(struct seq_file *, loff_t *);
99:	static void r_stop(struct seq_file *, void *);
671:	static int reallocate_resource(struct resource *, struct resource *, resource_size_t, struct resource_constraint *);
1560:	static int reserve_setup(char *);
574:	static resource_size_t simple_align_resource(void *, const struct resource *, resource_size_t, resource_size_t);
1776:	static int strict_iomem(char *);

File kernel/rseq.c:
314:	long __ia32_sys_rseq(const struct pt_regs *);
262:	void __rseq_handle_notify_resume(struct ksignal *, struct pt_regs *);
314:	long __x64_sys_rseq(const struct pt_regs *);
314:	static long __se_sys_rseq(long, long, long, long);
115:	static int rseq_get_rseq_cs(struct task_struct *, struct rseq_cs *);
221:	static int rseq_ip_fixup(struct pt_regs *);
84:	static int rseq_update_cpu_id(struct task_struct *);

File kernel/sched/autogroup.c:
20:	void autogroup_free(struct task_group *);
12:	void autogroup_init(struct task_struct *);
262:	int autogroup_path(struct task_group *, char *, int);
208:	int proc_sched_autogroup_set_nice(struct task_struct *, int);
246:	void proc_sched_autogroup_show_task(struct task_struct *, struct seq_file *);
170:	void sched_autogroup_create_attach(struct task_struct *);
182:	void sched_autogroup_detach(struct task_struct *);
193:	void sched_autogroup_exit(struct signal_struct *);
125:	void sched_autogroup_exit_task(struct task_struct *);
188:	void sched_autogroup_fork(struct signal_struct *);
107:	bool task_wants_autogroup(struct task_struct *, struct task_group *);
136:	static void autogroup_move_group(struct task_struct *, struct autogroup *);
198:	static int setup_autogroup(char *);

File kernel/sched/clock.c:
189:	void clear_sched_clock_stable(void);
479:	u64 running_clock(void);
64:	unsigned long long sched_clock(void);
365:	u64 sched_clock_cpu(int);
426:	void sched_clock_idle_sleep_event(void);
435:	void sched_clock_idle_wakeup_event(void);
207:	void sched_clock_init(void);
108:	int sched_clock_stable(void);
389:	void sched_clock_tick(void);
406:	void sched_clock_tick_stable(void);
199:	static void __sched_clock_gtod_offset(void);
154:	static void __sched_clock_work(struct work_struct *);
119:	static void __set_sched_clock_stable(void);
226:	static int sched_clock_init_late(void);
265:	static u64 sched_clock_local(struct sched_clock_data *);

File kernel/sched/completion.c:
28:	void complete(struct completion *);
57:	void complete_all(struct completion *);
315:	bool completion_done(struct completion *);
282:	bool try_wait_for_completion(struct completion *);
136:	void wait_for_completion(struct completion *);
204:	int wait_for_completion_interruptible(struct completion *);
225:	long wait_for_completion_interruptible_timeout(struct completion *, unsigned long);
169:	void wait_for_completion_io(struct completion *);
189:	unsigned long wait_for_completion_io_timeout(struct completion *, unsigned long);
241:	int wait_for_completion_killable(struct completion *);
263:	long wait_for_completion_killable_timeout(struct completion *, unsigned long);
155:	unsigned long wait_for_completion_timeout(struct completion *, unsigned long);
115:	static long wait_for_common(struct completion *, long, int);
121:	static long wait_for_common_io(struct completion *, long, int);

File kernel/sched/core.c:
6346:	int __cond_resched(void);
6376:	int __cond_resched_lock(spinlock_t *);
5279:	long __ia32_sys_nice(const struct pt_regs *);
6549:	long __ia32_sys_sched_get_priority_max(const struct pt_regs *);
6576:	long __ia32_sys_sched_get_priority_min(const struct pt_regs *);
6286:	long __ia32_sys_sched_getaffinity(const struct pt_regs *);
6076:	long __ia32_sys_sched_getattr(const struct pt_regs *);
5995:	long __ia32_sys_sched_getparam(const struct pt_regs *);
5966:	long __ia32_sys_sched_getscheduler(const struct pt_regs *);
6641:	long __ia32_sys_sched_rr_get_interval(const struct pt_regs *);
6654:	long __ia32_sys_sched_rr_get_interval_time32(const struct pt_regs *);
6234:	long __ia32_sys_sched_setaffinity(const struct pt_regs *);
5925:	long __ia32_sys_sched_setattr(const struct pt_regs *);
5914:	long __ia32_sys_sched_setparam(const struct pt_regs *);
5899:	long __ia32_sys_sched_setscheduler(const struct pt_regs *);
180:	struct rq *__task_rq_lock(struct task_struct *, struct rq_flags *);
5279:	long __x64_sys_nice(const struct pt_regs *);
6549:	long __x64_sys_sched_get_priority_max(const struct pt_regs *);
6576:	long __x64_sys_sched_get_priority_min(const struct pt_regs *);
6286:	long __x64_sys_sched_getaffinity(const struct pt_regs *);
6076:	long __x64_sys_sched_getattr(const struct pt_regs *);
5995:	long __x64_sys_sched_getparam(const struct pt_regs *);
5966:	long __x64_sys_sched_getscheduler(const struct pt_regs *);
6641:	long __x64_sys_sched_rr_get_interval(const struct pt_regs *);
6654:	long __x64_sys_sched_rr_get_interval_time32(const struct pt_regs *);
6234:	long __x64_sys_sched_setaffinity(const struct pt_regs *);
5925:	long __x64_sys_sched_setattr(const struct pt_regs *);
5914:	long __x64_sys_sched_setparam(const struct pt_regs *);
5899:	long __x64_sys_sched_setscheduler(const struct pt_regs *);
1597:	void activate_task(struct rq *, struct task_struct *, int);
5348:	int available_idle_cpu(int);
8863:	void call_trace_sched_update_nr_running(struct rq *, int);
5261:	int can_nice(const struct task_struct *, const int);
1688:	void check_preempt_curr(struct rq *, struct task_struct *, int);
2648:	bool cpus_share_cache(int, int);
6819:	int cpuset_cpumask_can_shrink(const struct cpumask *, const struct cpumask *);
7630:	struct task_struct *curr_task(int);
1604:	void deactivate_task(struct rq *, struct task_struct *, int);
5032:	int default_wake_function(wait_queue_entry_t *, unsigned int, int, void *);
1839:	void do_set_cpus_allowed(struct task_struct *, const struct cpumask *);
4577:	void do_task_dead(void);
8816:	void dump_cpu_task(int);
3195:	void force_schedstat_enabled(void);
644:	int get_nohz_timer_target(void);
381:	void hrtick_start(struct rq *, u64);
5324:	int idle_cpu(int);
5365:	struct task_struct *idle_task(int);
6914:	void idle_task_exit(void);
7273:	int in_sched_functions(unsigned long);
6757:	void init_idle(struct task_struct *, int);
6531:	void io_schedule(void);
6509:	void io_schedule_finish(int);
6499:	int io_schedule_prepare(void);
6518:	long io_schedule_timeout(long);
2250:	void kick_process(struct task_struct *);
2092:	int migrate_swap(struct task_struct *, struct task_struct *, int, int);
6863:	int migrate_task_to(struct task_struct *, int);
7574:	void normalize_rt_tasks(void);
3860:	unsigned long long nr_context_switches(void);
3913:	unsigned long nr_iowait(void);
3878:	unsigned long nr_iowait_cpu(int);
3831:	unsigned long nr_running(void);
3425:	void preempt_notifier_dec(void);
3419:	void preempt_notifier_inc(void);
3435:	void preempt_notifier_register(struct preempt_notifier *);
3450:	void preempt_notifier_unregister(struct preempt_notifier *);
5012:	void preempt_schedule_irq(void);
623:	void resched_cpu(int);
599:	void resched_curr(struct rq *);
5080:	void rt_mutex_setprio(struct task_struct *, struct task_struct *);
753:	bool sched_can_stop_tick(struct rq *);
7122:	int sched_cpu_activate(unsigned int);
7160:	int sched_cpu_deactivate(unsigned int);
7210:	int sched_cpu_dying(unsigned int);
7202:	int sched_cpu_starting(unsigned int);
7747:	struct task_group *sched_create_group(struct task_group *);
7800:	void sched_destroy_group(struct task_group *);
3929:	void sched_exec(void);
3263:	int sched_fork(unsigned long, struct task_struct *);
6250:	long sched_getaffinity(pid_t, struct cpumask *);
7295:	void sched_init(void);
7235:	void sched_init_smp(void);
7707:	void sched_move_offline_task(struct task_struct *);
7852:	void sched_move_task(struct task_struct *);
7806:	void sched_offline_group(struct task_group *);
7775:	void sched_online_group(struct task_group *, struct task_group *);
3325:	void sched_post_fork(struct task_struct *, struct kernel_clone_args *);
5792:	void sched_set_fifo(struct task_struct *);
5802:	void sched_set_fifo_low(struct task_struct *);
5809:	void sched_set_normal(int, struct task_struct *);
2382:	void sched_set_stop_task(int, struct task_struct *);
6126:	long sched_setaffinity(pid_t, const struct cpumask *);
5745:	int sched_setattr(struct task_struct *, const struct sched_attr *);
5750:	int sched_setattr_nocheck(struct task_struct *, const struct sched_attr *);
6884:	void sched_setnuma(struct task_struct *, int);
5739:	int sched_setscheduler(struct task_struct *, int, const struct sched_param *);
5768:	int sched_setscheduler_nocheck(struct task_struct *, int, const struct sched_param *);
6666:	void sched_show_task(struct task_struct *);
1564:	bool sched_task_on_rq(struct task_struct *);
4185:	int sched_tick_offload_init(void);
2565:	void sched_ttwu_pending(void *);
4639:	void schedule(void);
4663:	void schedule_idle(void);
4702:	void schedule_preempt_disabled(void);
3740:	void schedule_tail(struct task_struct *);
4679:	void schedule_user(void);
4024:	void scheduler_tick(void);
2598:	void send_call_function_single_ipi(int);
1833:	void set_cpus_allowed_common(struct task_struct *, const struct cpumask *);
1954:	int set_cpus_allowed_ptr(struct task_struct *, const struct cpumask *);
3121:	void set_numabalancing_state(bool);
7059:	void set_rq_offline(struct rq *);
7044:	void set_rq_online(struct rq *);
1960:	void set_task_cpu(struct task_struct *, unsigned int);
5202:	void set_user_nice(struct task_struct *, long);
6718:	void show_state_filter(unsigned long);
3854:	bool single_task_running(void);
3130:	int sysctl_numa_balancing(struct ctl_table *, int, void *, size_t *, loff_t *);
3236:	int sysctl_schedstats(struct ctl_table *, int, void *, size_t *, loff_t *);
6832:	int task_can_attach(struct task_struct *, const struct cpumask *);
1663:	int task_curr(const struct task_struct *);
5313:	int task_prio(const struct task_struct *);
204:	struct rq *task_rq_lock(struct task_struct *, struct rq_flags *);
3981:	unsigned long long task_sched_runtime(struct task_struct *);
832:	int tg_nop(struct task_group *, void *);
3351:	unsigned long to_ratio(u64, u64);
3017:	bool try_invoke_on_locked_down_task(struct task_struct *, bool (*)(struct task_struct *, void *), void *);
301:	void update_rq_clock(struct rq *);
2145:	unsigned long wait_task_inactive(struct task_struct *, long);
541:	void wake_q_add(struct wake_q_head *, struct task_struct *);
564:	void wake_q_add_safe(struct wake_q_head *, struct task_struct *);
2624:	void wake_up_if_idle(int);
3374:	void wake_up_new_task(struct task_struct *);
725:	void wake_up_nohz_cpu(int);
3055:	int wake_up_process(struct task_struct *);
570:	void wake_up_q(struct wake_q_head *);
3061:	int wake_up_state(struct task_struct *, unsigned int);
801:	int walk_tg_tree_from(struct task_group *, tg_visitor, tg_visitor, void *);
6418:	void yield(void);
6440:	int yield_to(struct task_struct *, bool);
6339:	static long __do_sys_sched_yield(const struct pt_regs *);
366:	static void __hrtick_start(void *);
2013:	static void __migrate_swap_task(struct task_struct *, int);
1772:	static struct rq *__migrate_task(struct rq *, struct rq_flags *, struct task_struct *, int);
3072:	static void __sched_fork(unsigned long, struct task_struct *);
5428:	static int __sched_setscheduler(struct task_struct *, const struct sched_attr *, bool, bool);
4450:	static void __schedule(bool);
4285:	static void __schedule_bug(struct task_struct *);
5279:	static long __se_sys_nice(long);
6286:	static long __se_sys_sched_getaffinity(long, long, long);
6076:	static long __se_sys_sched_getattr(long, long, long, long);
5995:	static long __se_sys_sched_getparam(long, long);
5966:	static long __se_sys_sched_getscheduler(long);
6234:	static long __se_sys_sched_setaffinity(long, long, long);
5925:	static long __se_sys_sched_setattr(long, long, long);
1877:	static int __set_cpus_allowed_ptr(struct task_struct *, const struct cpumask *, bool);
5387:	static void __setscheduler_params(struct task_struct *, const struct sched_attr *);
5709:	static int _sched_setscheduler(struct task_struct *, int, bool, const struct sched_param *, const struct sched_param *);
3160:	static void compute_skid(void);
8354:	static u64 cpu_cfs_period_read_u64(struct cgroup_subsys_state *, struct cftype *);
8360:	static int cpu_cfs_period_write_u64(struct cgroup_subsys_state *, struct cftype *, u64);
8342:	static s64 cpu_cfs_quota_read_s64(struct cgroup_subsys_state *, struct cftype *);
8348:	static int cpu_cfs_quota_write_s64(struct cgroup_subsys_state *, struct cftype *, s64);
8449:	static int cpu_cfs_stat_show(struct seq_file *, void *);
7996:	static void cpu_cgroup_attach(struct cgroup_taskset *);
7965:	static int cpu_cgroup_can_attach(struct cgroup_taskset *);
7893:	static struct cgroup_subsys_state *cpu_cgroup_css_alloc(struct cgroup_subsys_state *);
7938:	static void cpu_cgroup_css_free(struct cgroup_subsys_state *);
7911:	static int cpu_cgroup_css_online(struct cgroup_subsys_state *);
7931:	static void cpu_cgroup_css_released(struct cgroup_subsys_state *);
7952:	static void cpu_cgroup_fork(struct task_struct *);
8618:	static int cpu_extra_stat_show(struct seq_file *, struct cgroup_subsys_state *);
8736:	static int cpu_max_show(struct seq_file *, void *);
8744:	static ssize_t cpu_max_write(struct kernfs_open_file *, char *, size_t, loff_t);
8551:	static s64 cpu_qos_read(struct cgroup_subsys_state *, struct cftype *);
8527:	static int cpu_qos_write(struct cgroup_subsys_state *, struct cftype *, s64);
8492:	static u64 cpu_rt_period_read_uint(struct cgroup_subsys_state *, struct cftype *);
8486:	static int cpu_rt_period_write_uint(struct cgroup_subsys_state *, struct cftype *, u64);
8480:	static s64 cpu_rt_runtime_read(struct cgroup_subsys_state *, struct cftype *);
8474:	static int cpu_rt_runtime_write(struct cgroup_subsys_state *, struct cftype *, s64);
8191:	static u64 cpu_shares_read_u64(struct cgroup_subsys_state *, struct cftype *);
8183:	static int cpu_shares_write_u64(struct cgroup_subsys_state *, struct cftype *, u64);
8668:	static s64 cpu_weight_nice_read_s64(struct cgroup_subsys_state *, struct cftype *);
8686:	static int cpu_weight_nice_write_s64(struct cgroup_subsys_state *, struct cftype *, s64);
8641:	static u64 cpu_weight_read_u64(struct cgroup_subsys_state *, struct cftype *);
8650:	static int cpu_weight_write_u64(struct cgroup_subsys_state *, struct cftype *, u64);
5820:	static int do_sched_setscheduler(pid_t, int, struct sched_param *);
6322:	static void do_sched_yield(void);
3618:	static struct rq *finish_task_switch(struct task_struct *);
6215:	static int get_user_cpu_mask(unsigned long *, unsigned int, struct cpumask *);
338:	static enum hrtimer_restart hrtick(struct hrtimer *);
2048:	static int migrate_swap_stop(void *);
6970:	static void migrate_tasks(struct rq *, struct rq_flags *);
1790:	static int migration_cpu_stop(void *);
7259:	static int migration_init(void);
1739:	static struct rq *move_queued_task(struct rq *, struct rq_flags *, struct task_struct *, int);
731:	static void nohz_csd_func(void *);
6039:	static int sched_attr_copy_to_user(struct sched_attr *, struct sched_attr *, unsigned int);
7819:	static void sched_change_group(struct task_struct *, int);
5849:	static int sched_copy_attr(struct sched_attr *, struct sched_attr *);
7794:	static void sched_free_group_rcu(struct callback_head *);
7696:	static void sched_move_work(struct work_struct *);
6594:	static int sched_rr_get_interval(pid_t, struct timespec64 *);
4091:	static void sched_tick_remote(struct work_struct *);
4146:	static void sched_tick_start(int);
4167:	static void sched_tick_stop(int);
2284:	static int select_fallback_rq(int, struct task_struct *);
838:	static void set_load_weight(struct task_struct *, bool);
3204:	static int setup_schedstats(char *);
8395:	static int tg_cfs_schedulable_down(struct task_group *, void *);
8500:	static int tg_change_scheduler(struct task_group *, void *);
8209:	static int tg_set_cfs_bandwidth(struct task_group *, u64, u64);
2835:	static int try_to_wake_up(struct task_struct *, unsigned int, int);
2497:	static void ttwu_do_activate(struct rq *, struct task_struct *, int, struct rq_flags *);
2464:	static void ttwu_do_wakeup(struct rq *, struct task_struct *, int, struct rq_flags *);
2700:	static void ttwu_queue(struct task_struct *, int, int);
2677:	static bool ttwu_queue_wakelist(struct task_struct *, int, int);
2546:	static int ttwu_runnable(struct task_struct *, int);
2423:	static void ttwu_stat(struct task_struct *, int, int);
247:	static void update_rq_clock_task(struct rq *, s64);
687:	static void wake_up_idle_cpu(int);

File kernel/sched/cpuacct.c:
361:	void cpuacct_account_field(struct task_struct *, int, u64);
339:	void cpuacct_charge(struct task_struct *, u64);
204:	static int __cpuacct_percpu_seq_show(struct seq_file *, enum cpuacct_stat_index);
156:	static u64 __cpuusage_read(struct cgroup_subsys_state *, enum cpuacct_stat_index);
393:	static int cgroup_v1_psi_init(void);
234:	static int cpuacct_all_seq_show(struct seq_file *, void *);
60:	static struct cgroup_subsys_state *cpuacct_css_alloc(struct cgroup_subsys_state *);
90:	static void cpuacct_css_free(struct cgroup_subsys_state *);
229:	static int cpuacct_percpu_seq_show(struct seq_file *, void *);
224:	static int cpuacct_percpu_sys_seq_show(struct seq_file *, void *);
219:	static int cpuacct_percpu_user_seq_show(struct seq_file *, void *);
270:	static int cpuacct_stats_show(struct seq_file *, void *);
181:	static u64 cpuusage_read(struct cgroup_subsys_state *, struct cftype *);
175:	static u64 cpuusage_sys_read(struct cgroup_subsys_state *, struct cftype *);
169:	static u64 cpuusage_user_read(struct cgroup_subsys_state *, struct cftype *);
186:	static int cpuusage_write(struct cgroup_subsys_state *, struct cftype *, u64);
381:	static int setup_psi_v1(char *);

File kernel/sched/cpudeadline.c:
292:	void cpudl_cleanup(struct cpudl *);
174:	void cpudl_clear(struct cpudl *, int);
255:	void cpudl_clear_freecpu(struct cpudl *, int);
117:	int cpudl_find(struct cpudl *, struct task_struct *, struct cpumask *);
264:	int cpudl_init(struct cpudl *);
214:	void cpudl_set(struct cpudl *, int, u64);
245:	void cpudl_set_freecpu(struct cpudl *, int);
95:	static void cpudl_heapify(struct cpudl *, int);
26:	static void cpudl_heapify_down(struct cpudl *, int);
69:	static void cpudl_heapify_up(struct cpudl *, int);

File kernel/sched/cpufreq.c:
32:	void cpufreq_add_update_util_hook(int, struct update_util_data *, void (*)(struct update_util_data *, u64, unsigned int));
57:	void cpufreq_remove_update_util_hook(int);
72:	bool cpufreq_this_cpu_can_update(struct cpufreq_policy *);

File kernel/sched/cpufreq_schedutil.c:
195:	unsigned long schedutil_cpu_util(int, unsigned long, unsigned long, enum schedutil_type, struct task_struct *);
159:	static unsigned int get_next_freq(struct sugov_policy *, unsigned long, unsigned long);
580:	static ssize_t rate_limit_us_show(struct gov_attr_set *, char *);
588:	static ssize_t rate_limit_us_store(struct gov_attr_set *, const char *, size_t);
905:	static int schedutil_gov_init(void);
723:	static void sugov_clear_global_tunables(void);
805:	static void sugov_exit(struct cpufreq_policy *);
281:	static unsigned long sugov_get_util(struct sugov_cpu *);
729:	static int sugov_init(struct cpufreq_policy *);
333:	static void sugov_iowait_boost(struct sugov_cpu *, u64, unsigned int);
561:	static void sugov_irq_work(struct irq_work *);
648:	static int sugov_kthread_create(struct sugov_policy *);
874:	static void sugov_limits(struct cpufreq_policy *);
485:	static unsigned int sugov_next_freq_shared(u64, struct sugov_cpu *, struct sugov_cpu *);
825:	static int sugov_start(struct cpufreq_policy *);
858:	static void sugov_stop(struct cpufreq_policy *);
613:	static void sugov_tunables_free(struct kobject *);
510:	static void sugov_update_shared(struct update_util_data *, u64, unsigned int);
439:	static void sugov_update_single(struct update_util_data *, u64, unsigned int);
535:	static void sugov_work(struct kthread_work *);

File kernel/sched/cpupri.c:
285:	void cpupri_cleanup(struct cpupri *);
97:	int cpupri_find(struct cpupri *, struct task_struct *, struct cpumask *);
120:	int cpupri_find_fitness(struct cpupri *, struct task_struct *, struct cpumask *, bool (*)(struct task_struct *, int));
254:	int cpupri_init(struct cpupri *);
186:	void cpupri_set(struct cpupri *, int, int);

File kernel/sched/cputime.c:
139:	void account_guest_time(struct task_struct *, u64);
503:	void account_idle_ticks(unsigned long);
218:	void account_idle_time(u64);
471:	void account_process_tick(struct task_struct *, int);
207:	void account_steal_time(u64);
164:	void account_system_index_time(struct task_struct *, u64, enum cpu_usage_stat);
184:	void account_system_time(struct task_struct *, int, u64);
117:	void account_user_time(struct task_struct *, u64);
542:	void cputime_adjust(struct task_cputime *, struct prev_cputime *, u64 *, u64 *);
29:	void disable_sched_clock_irqtime(void);
24:	void enable_sched_clock_irqtime(void);
50:	void irqtime_account_irq(struct task_struct *);
1045:	void kcpustat_cpu_fetch(struct kernel_cpustat *, int);
958:	u64 kcpustat_field(struct kernel_cpustat *, enum cpu_usage_stat, int);
833:	void task_cputime(struct task_struct *, u64 *, u64 *);
614:	void task_cputime_adjusted(struct task_struct *, u64 *, u64 *);
807:	u64 task_gtime(struct task_struct *);
293:	void thread_group_cputime(struct task_struct *, struct task_cputime *);
625:	void thread_group_cputime_adjusted(struct task_struct *, u64 *, u64 *);
761:	void vtime_account_idle(struct task_struct *);
695:	void vtime_account_kernel(struct task_struct *);
731:	void vtime_guest_enter(struct task_struct *);
749:	void vtime_guest_exit(struct task_struct *);
793:	void vtime_init_idle(struct task_struct *, int);
766:	void vtime_task_switch_generic(struct task_struct *);
707:	void vtime_user_enter(struct task_struct *);
717:	void vtime_user_exit(struct task_struct *);
646:	static u64 get_vtime_delta(struct vtime *);
357:	static void irqtime_account_process_tick(struct task_struct *, int, int);
992:	static int kcpustat_cpu_fetch_vtime(struct kernel_cpustat *, const struct kernel_cpustat *, struct task_struct *, int);
903:	static int kcpustat_field_vtime(u64 *, struct task_struct *, enum cpu_usage_stat, int, u64 *);
894:	static u64 kcpustat_user_vtime(struct vtime *);

File kernel/sched/deadline.c:
2747:	bool __checkparam_dl(const struct sched_attr *);
2795:	void __dl_clear_params(struct task_struct *);
2717:	void __getparam_dl(struct task_struct *, struct sched_attr *);
2705:	void __setparam_dl(struct task_struct *, const struct sched_attr *);
2378:	void dl_add_task_root_domain(struct task_struct *);
2399:	void dl_clear_root_domain(struct root_domain *);
2886:	bool dl_cpu_busy(unsigned int);
2865:	int dl_cpuset_cpumask_can_shrink(const struct cpumask *, const struct cpumask *);
2816:	bool dl_param_changed(struct task_struct *, const struct sched_attr *);
2830:	int dl_task_can_attach(struct task_struct *, const struct cpumask *);
400:	void init_dl_bandwidth(struct dl_bandwidth *, u64, u64);
407:	void init_dl_bw(struct dl_bw *);
1384:	void init_dl_inactive_task_timer(struct sched_dl_entity *);
419:	void init_dl_rq(struct dl_rq *);
1145:	void init_dl_task_timer(struct sched_dl_entity *);
2369:	void init_sched_dl_class(void);
2905:	void print_dl_stats(struct seq_file *, int);
2602:	void sched_dl_do_global(void);
2552:	int sched_dl_global_validate(void);
2639:	int sched_dl_overflow(struct task_struct *, int, const struct sched_attr *);
1489:	static void __dequeue_dl_entity(struct sched_dl_entity *);
1462:	static void __enqueue_dl_entity(struct sched_dl_entity *);
1776:	static int balance_dl(struct rq *, struct task_struct *, struct rq_flags *);
1798:	static void check_preempt_curr_dl(struct rq *, struct task_struct *, int);
538:	static void dequeue_pushable_dl_task(struct rq *, struct task_struct *);
1615:	static void dequeue_task_dl(struct rq *, struct task_struct *, int);
217:	static void dl_change_utilization(struct task_struct *, u64);
592:	static struct rq *dl_task_offline_migration(struct rq *, struct task_struct *);
1038:	static enum hrtimer_restart dl_task_timer(struct hrtimer *);
1503:	static void enqueue_dl_entity(struct sched_dl_entity *, int);
508:	static void enqueue_pushable_dl_task(struct rq *, struct task_struct *);
1531:	static void enqueue_task_dl(struct rq *, struct task_struct *, int);
1955:	static int find_later_rq(struct task_struct *);
2063:	static struct rq *find_lock_later_rq(struct task_struct *, struct rq *);
1342:	static enum hrtimer_restart inactive_task_timer(struct hrtimer *);
2589:	static void init_dl_rq_bw_ratio(struct dl_rq *);
1723:	static void migrate_task_rq_dl(struct task_struct *, int);
2042:	static struct task_struct *pick_next_pushable_dl_task(struct rq *);
1858:	static struct task_struct *pick_next_task_dl(struct rq *);
2488:	static void prio_changed_dl(struct rq *, struct task_struct *, int);
2218:	static void pull_dl_task(struct rq *);
2130:	static int push_dl_task(struct rq *);
2211:	static void push_dl_tasks(struct rq *);
1874:	static void put_prev_task_dl(struct rq *, struct task_struct *);
761:	static void replenish_dl_entity(struct sched_dl_entity *);
2360:	static void rq_offline_dl(struct rq *);
2349:	static void rq_online_dl(struct rq *);
1673:	static int select_task_rq_dl(struct task_struct *, int, int, int);
2315:	static void set_cpus_allowed_dl(struct task_struct *, const struct cpumask *);
1828:	static void set_next_task_dl(struct rq *, struct task_struct *, bool);
980:	static int start_dl_timer(struct task_struct *);
2410:	static void switched_from_dl(struct rq *, struct task_struct *);
2458:	static void switched_to_dl(struct rq *, struct task_struct *);
354:	static void task_contending(struct sched_dl_entity *, int);
1906:	static void task_fork_dl(struct task_struct *);
298:	static void task_non_contending(struct task_struct *);
1891:	static void task_tick_dl(struct rq *, struct task_struct *, int);
2303:	static void task_woken_dl(struct rq *, struct task_struct *);
1239:	static void update_curr_dl(struct rq *);
945:	static void update_dl_entity(struct sched_dl_entity *);
471:	static void update_dl_migration(struct dl_rq *);
884:	static void update_dl_revised_wakeup(struct sched_dl_entity *, struct rq *);
1648:	static void yield_task_dl(struct rq *);

File kernel/sched/debug.c:
411:	void dirty_sched_domain_sysctl(int);
555:	void print_cfs_rq(struct seq_file *, int, struct cfs_rq *);
662:	void print_dl_rq(struct seq_file *, int, struct dl_rq *);
898:	void print_numa_stats(struct seq_file *, int, unsigned long, unsigned long, unsigned long, unsigned long);
632:	void print_rt_rq(struct seq_file *, int, struct rt_rq *);
1047:	void proc_sched_set_task(struct task_struct *);
933:	void proc_sched_show_task(struct task_struct *, struct pid_namespace *, struct seq_file *);
349:	void register_sched_domain_sysctl(void);
816:	void sysrq_sched_debug_show(void);
418:	void unregister_sched_domain_sysctl(void);
879:	static int init_sched_debug_procfs(void);
427:	static void print_cfs_group_stats(struct seq_file *, int, struct task_group *, struct task_group *);
685:	static void print_cpu(struct seq_file *, int);
506:	static void print_task(struct seq_file *, struct task_struct *, struct rq *, struct rq *);
752:	static void sched_debug_header(struct seq_file *);
862:	static void *sched_debug_next(struct seq_file *, void *, loff_t *);
804:	static int sched_debug_show(struct seq_file *, void *);
840:	static void *sched_debug_start(struct seq_file *, loff_t *);
868:	static void sched_debug_stop(struct seq_file *, void *);
157:	static int sched_feat_open(struct inode *, struct file *);
57:	static int sched_feat_show(struct seq_file *, void *);
125:	static ssize_t sched_feat_write(struct file *, const char *, size_t, loff_t *);
172:	static int sched_init_debug(void);
908:	static void sched_show_numa(struct task_struct *, struct seq_file *);
321:	static struct ctl_table *sd_alloc_ctl_cpu_table(int);
301:	static struct ctl_table *sd_alloc_ctl_domain_table(struct sched_domain *);
205:	static struct ctl_table *sd_alloc_ctl_entry(int);
246:	static int sd_ctl_doflags(struct ctl_table *, int, void *, size_t *, loff_t *);
213:	static void sd_free_ctl_entry(struct ctl_table **);

File kernel/sched/fair.c:
625:	struct sched_entity *__pick_first_entity(struct cfs_rq *);
646:	struct sched_entity *__pick_last_entity(struct cfs_rq *);
4724:	void __refill_cfs_bandwidth_runtime(struct cfs_bandwidth *);
6167:	void __update_idle_core(struct rq *);
11600:	int alloc_fair_sched_group(struct task_group *, struct task_group *);
110:	int arch_asym_cpu_priority(int);
4689:	void cfs_bandwidth_usage_dec(void);
4684:	void cfs_bandwidth_usage_inc(void);
11579:	void free_fair_sched_group(struct task_group *);
5369:	void init_cfs_bandwidth(struct cfs_bandwidth *);
11533:	void init_cfs_rq(struct cfs_rq *);
766:	void init_entity_runnable_average(struct sched_entity *);
2886:	void init_numa_balancing(unsigned long, struct task_struct *);
7359:	void init_qos_hrtimer(int);
11868:	void init_sched_fair_class(void);
11684:	void init_tg_cfs_entry(struct task_group *, struct cfs_rq *, struct sched_entity *, int, struct sched_entity *);
10731:	void nohz_balance_enter_idle(int);
10697:	void nohz_balance_exit_idle(struct rq *);
11641:	void online_fair_sched_group(struct task_group *);
7369:	struct task_struct *pick_next_task_fair(struct rq *, struct task_struct *, struct rq_flags *);
812:	void post_init_entity_util_avg(struct task_struct *);
11833:	void print_cfs_stats(struct seq_file *, int);
3140:	void reweight_task(struct task_struct *, int);
11717:	int sched_group_set_shares(struct task_group *, unsigned long);
207:	void sched_init_granularity(void);
660:	int sched_proc_update_handler(struct ctl_table *, int, void *, size_t *, loff_t *);
7331:	int sched_qos_cpu_overload(void);
7317:	void sched_qos_offline_wait(void);
11893:	const struct sched_avg *sched_trace_cfs_rq_avg(struct cfs_rq *);
11917:	int sched_trace_cfs_rq_cpu(struct cfs_rq *);
11903:	char *sched_trace_cfs_rq_path(struct cfs_rq *, char *, int);
11971:	const struct cpumask *sched_trace_rd_span(struct root_domain *);
11933:	const struct sched_avg *sched_trace_rq_avg_dl(struct rq *);
11943:	const struct sched_avg *sched_trace_rq_avg_irq(struct rq *);
11923:	const struct sched_avg *sched_trace_rq_avg_rt(struct rq *);
11953:	int sched_trace_rq_cpu(struct rq *);
11959:	int sched_trace_rq_cpu_capacity(struct rq *);
11981:	int sched_trace_rq_nr_running(struct rq *);
3356:	void set_task_rq_fair(struct sched_entity *, struct cfs_rq *, struct cfs_rq *);
1442:	bool should_numa_migrate_memory(struct task_struct *, struct page *, int, int);
11844:	void show_numa_stats(struct task_struct *, struct seq_file *);
5390:	void start_cfs_bandwidth(struct cfs_bandwidth *);
2653:	void task_numa_fault(int, int, int, int);
2617:	void task_numa_free(struct task_struct *, bool);
1245:	pid_t task_numa_group_id(struct task_struct *);
11100:	void trigger_load_balance(struct rq *);
11659:	void unregister_fair_sched_group(struct task_group *);
4937:	void unthrottle_cfs_rq(struct cfs_rq *);
8574:	void update_group_capacity(struct sched_domain *, int);
10391:	void update_max_interval(void);
244:	static u64 __calc_delta(u64, unsigned long, struct load_weight *);
7546:	static struct task_struct *__pick_next_task_fair(struct rq *);
7263:	static int __unthrottle_qos_cfs_rqs(int);
8342:	static bool __update_blocked_fair(struct rq *, bool *);
8297:	static bool __update_blocked_others(struct rq *, bool *);
10794:	static bool _nohz_idle_balance(struct rq *, unsigned int, enum cpu_idle_type);
10301:	static int active_load_balance_cpu_stop(void *);
4764:	static int assign_cfs_rq_runtime(struct cfs_rq *);
11436:	static void attach_entity_cfs_rq(struct sched_entity *);
3731:	static void attach_entity_load_avg(struct cfs_rq *, struct sched_entity *);
8207:	static void attach_task(struct rq *, struct task_struct *);
11472:	static void attach_task_cfs_rq(struct task_struct *);
8234:	static void attach_tasks(struct lb_env *);
6987:	static int balance_fair(struct rq *, struct task_struct *, struct rq_flags *);
7920:	static int can_migrate_task(struct task_struct *, struct lb_env *);
8008:	static bool can_migrate_task_llc(struct task_struct *, struct rq *, struct rq *, struct rq *, struct rq *);
5285:	static bool check_cfs_rq_runtime(struct cfs_rq *);
7078:	static void check_preempt_wakeup(struct rq *, struct task_struct *, int);
4217:	static void check_spread(struct cfs_rq *, struct sched_entity *, struct sched_entity *);
4408:	static void clear_buddies(struct cfs_rq *, struct sched_entity *);
4423:	static void dequeue_entity(struct cfs_rq *, struct sched_entity *, int);
5721:	static void dequeue_task_fair(struct rq *, struct task_struct *, int);
11425:	static void detach_entity_cfs_rq(struct sched_entity *);
3786:	static void detach_entity_load_avg(struct cfs_rq *, struct sched_entity *);
8048:	static struct task_struct *detach_one_task(struct lb_env *);
11455:	static void detach_task_cfs_rq(struct task_struct *);
8081:	static int detach_tasks(struct lb_env *);
5025:	static void distribute_cfs_runtime(struct cfs_bandwidth *);
5215:	static void do_sched_cfs_slack_timer(struct cfs_bandwidth *);
4317:	static void enqueue_entity(struct cfs_rq *, struct sched_entity *, int);
5609:	static void enqueue_task_fair(struct rq *, struct task_struct *, int);
4635:	static void entity_tick(struct cfs_rq *, struct sched_entity *, int);
9636:	static struct sched_group *find_busiest_group(struct lb_env *);
9765:	static struct rq *find_busiest_queue(struct lb_env *, struct sched_group *);
9213:	static struct sched_group *find_idlest_group(struct sched_domain *, struct task_struct *, int);
11769:	static unsigned int get_rr_interval_fair(struct rq *, struct task_struct *);
174:	static unsigned int get_update_sysctl_factor(void);
5523:	static void hrtick_start_fair(struct rq *, struct task_struct *);
5549:	static void hrtick_update(struct rq *);
10534:	static void kick_ilb(unsigned int);
9984:	static int load_balance(int, struct rq *, struct sched_domain *, enum cpu_idle_type, int *);
7862:	static int migrate_degrades_locality(struct task_struct *, struct lb_env *);
6924:	static void migrate_task_rq_fair(struct task_struct *, int);
9936:	static int need_active_balance(struct lb_env *);
10968:	static int newidle_balance(struct rq *, struct rq_flags *);
10570:	static void nohz_balancer_kick(struct rq *);
10916:	static void nohz_newidle_balance(struct rq *);
2154:	static void numa_group_count_active_nodes(struct numa_group *);
4134:	static void overload_clear(struct rq *);
4151:	static void overload_set(struct rq *);
4558:	static struct sched_entity *pick_next_entity(struct cfs_rq *, struct sched_entity *);
2299:	static int preferred_group_nid(struct task_struct *, int);
11346:	static void prio_changed_fair(struct rq *, struct task_struct *, int);
11399:	static void propagate_entity_cfs_rq(struct sched_entity *);
4610:	static void put_prev_entity(struct cfs_rq *, struct sched_entity *);
7554:	static void put_prev_task_fair(struct rq *, struct task_struct *);
7336:	static enum hrtimer_restart qos_overload_timer_handler(struct hrtimer *);
10402:	static void rebalance_domains(struct rq *, enum cpu_idle_type);
3888:	static void remove_entity_load_avg(struct sched_entity *);
3113:	static void reweight_entity(struct cfs_rq *, struct sched_entity *, unsigned long);
11270:	static void rq_offline_fair(struct rq *);
11263:	static void rq_online_fair(struct rq *);
11075:	static void run_rebalance_domains(struct softirq_action *);
5315:	static enum hrtimer_restart sched_cfs_period_timer(struct hrtimer *);
5303:	static enum hrtimer_restart sched_cfs_slack_timer(struct hrtimer *);
716:	static u64 sched_slice(struct cfs_rq *, struct sched_entity *);
1333:	static unsigned long score_nearby_nodes(struct task_struct *, int, int, bool);
6314:	static int select_idle_capacity(struct task_struct *, struct sched_domain *, int);
6194:	static int select_idle_core(struct task_struct *, int, struct cpumask *, int *);
6248:	static int select_idle_cpu(struct task_struct *, struct sched_domain *, int);
6367:	static int select_idle_sibling(struct task_struct *, int, int);
6855:	static int select_task_rq_fair(struct task_struct *, int, int, int);
7057:	static void set_next_buddy(struct sched_entity *);
4515:	static void set_next_entity(struct cfs_rq *, struct sched_entity *);
11510:	static void set_next_task_fair(struct rq *, struct task_struct *, bool);
94:	static int setup_sched_thermal_decay_shift(char *);
11143:	static int steal_from(struct rq *, struct rq_flags *, bool *, int);
11483:	static void switched_from_fair(struct rq *, struct task_struct *);
11488:	static void switched_to_fair(struct rq *, struct task_struct *);
11566:	static void task_change_group_fair(struct task_struct *, int);
6981:	static void task_dead_fair(struct task_struct *);
11310:	static void task_fork_fair(struct task_struct *);
1140:	static unsigned int task_nr_scan_windows(struct task_struct *);
1669:	static void task_numa_assign(struct task_numa_env *, struct task_struct *, long);
1757:	static bool task_numa_compare(struct task_numa_env *, long, long, bool);
1936:	static void task_numa_find_cpu(struct task_numa_env *, long, long);
2503:	static void task_numa_group(struct task_struct *, int, int, int *);
1994:	static int task_numa_migrate(struct task_struct *);
2382:	static void task_numa_placement(struct task_struct *);
2743:	static void task_numa_work(struct callback_head *);
1198:	static unsigned int task_scan_max(struct task_struct *);
1176:	static unsigned int task_scan_start(struct task_struct *);
11288:	static void task_tick_fair(struct rq *, struct task_struct *, int);
4849:	static int tg_throttle_down(struct task_group *, void *);
4831:	static int tg_unthrottle_up(struct task_group *, void *);
4864:	static bool throttle_cfs_rq(struct cfs_rq *);
7163:	static void throttle_qos_cfs_rq(struct cfs_rq *);
11196:	static int try_steal(struct rq *, struct rq_flags *);
5439:	static void unthrottle_offline_cfs_rqs(struct rq *);
7210:	static void unthrottle_qos_cfs_rq(struct cfs_rq *);
8447:	static void update_blocked_averages(int);
3267:	static void update_cfs_group(struct sched_entity *);
8387:	static void update_cfs_rq_h_load(struct cfs_rq *);
8556:	static void update_cpu_capacity(struct sched_domain *, int);
867:	static void update_curr(struct cfs_rq *);
902:	static void update_curr_fair(struct rq *);
555:	static void update_min_vruntime(struct cfs_rq *);
8784:	static bool update_nohz_stats(struct rq *, bool);
1629:	static void update_numa_stats(struct task_numa_env *, struct numa_stats *, int, bool);
5420:	static void update_runtime_enabled(struct rq *);
8901:	static bool update_sd_pick_busiest(struct lb_env *, struct sd_lb_stats *, struct sched_group *, struct sg_lb_stats *);
5996:	static int wake_affine(struct sched_domain *, struct task_struct *, int, int, int);
5954:	static int wake_affine_weight(struct sched_domain *, struct task_struct *, int, int, int);
7570:	static void yield_task_fair(struct rq *);
7601:	static bool yield_to_task_fair(struct rq *, struct task_struct *);

File kernel/sched/idle.c:
78:	void arch_cpu_idle(void);
74:	void arch_cpu_idle_prepare(void);
27:	void cpu_idle_poll_ctrl(bool);
334:	bool cpu_in_idle(unsigned long);
391:	void cpu_startup_entry(enum cpuhp_state);
89:	void default_idle_call(void);
435:	struct task_struct *pick_next_task_idle(struct rq *);
355:	void play_idle_precise(u64, u64);
20:	void sched_idle_set_state(struct cpuidle_state *);
411:	static int balance_idle(struct rq *, struct task_struct *, struct rq_flags *);
140:	static int call_cpuidle(struct cpuidle_driver *, struct cpuidle_device *, int);
420:	static void check_preempt_curr_idle(struct rq *, struct task_struct *, int);
55:	static int cpu_idle_poll(void);
170:	static void cpuidle_idle_call(void);
449:	static void dequeue_task_idle(struct rq *, struct task_struct *, int);
261:	static void do_idle(void);
345:	static enum hrtimer_restart idle_inject_timer_fn(struct hrtimer *);
475:	static void prio_changed_idle(struct rq *, struct task_struct *, int);
425:	static void put_prev_task_idle(struct rq *, struct task_struct *);
405:	static int select_task_rq_idle(struct task_struct *, int, int, int);
429:	static void set_next_task_idle(struct rq *, struct task_struct *, bool);
469:	static void switched_to_idle(struct rq *, struct task_struct *);
465:	static void task_tick_idle(struct rq *, struct task_struct *, int);
480:	static void update_curr_idle(struct rq *);

File kernel/sched/isolation.c:
49:	void housekeeping_affine(struct task_struct *, enum hk_flags);
23:	int housekeeping_any_cpu(enum hk_flags);
40:	const struct cpumask *housekeeping_cpumask(enum hk_flags);
17:	bool housekeeping_enabled(enum hk_flags);
66:	void housekeeping_init(void);
57:	bool housekeeping_test_cpu(int, enum hk_flags);
150:	static int housekeeping_isolcpus_setup(char *);
139:	static int housekeeping_nohz_full_setup(char *);
80:	static int housekeeping_setup(char *, enum hk_flags);

File kernel/sched/loadavg.c:
350:	void calc_global_load(void);
386:	void calc_global_load_tick(struct rq *);
79:	long calc_load_fold_active(struct rq *, long);
157:	unsigned long calc_load_n(unsigned long, unsigned long, unsigned long, unsigned int);
259:	void calc_load_nohz_remote(struct rq *);
246:	void calc_load_nohz_start(void);
264:	void calc_load_nohz_stop(void);
72:	void get_avenrun(unsigned long *, unsigned long, int);
304:	static void calc_global_nohz(void);

File kernel/sched/membarrier.c:
440:	long __ia32_sys_membarrier(const struct pt_regs *);
440:	long __x64_sys_membarrier(const struct pt_regs *);
88:	void membarrier_exec_mmap(struct mm_struct *);
440:	static long __se_sys_membarrier(long, long, long);
36:	static void ipi_mb(void *);
58:	static void ipi_rseq(void *);
41:	static void ipi_sync_core(void *);
71:	static void ipi_sync_rq_state(void *);
104:	static int membarrier_global_expedited(void);
170:	static int membarrier_private_expedited(int, int);
343:	static int membarrier_register_global_expedited(void);
362:	static int membarrier_register_private_expedited(int);
286:	static int sync_runqueues_membarrier_state(struct mm_struct *);

File kernel/sched/pelt.c:
299:	int __update_load_avg_blocked_se(u64, struct sched_entity *);
324:	int __update_load_avg_cfs_rq(u64, struct cfs_rq *);
310:	int __update_load_avg_se(u64, struct cfs_rq *, struct sched_entity *);
376:	int update_dl_rq_load_avg(u64, struct rq *, int);
434:	int update_irq_load_avg(struct rq *, u64);
350:	int update_rt_rq_load_avg(u64, struct rq *, int);
61:	static u32 __accumulate_pelt_segments(u64, u32, u32);

File kernel/sched/psi.c:
981:	void cgroup_move_task(struct task_struct *, struct css_set *);
946:	int psi_cgroup_alloc(struct cgroup *);
958:	void psi_cgroup_free(struct cgroup *);
209:	void psi_init(void);
892:	void psi_memstall_enter(unsigned long *);
922:	void psi_memstall_leave(unsigned long *);
870:	void psi_memstall_tick(struct task_struct *, int);
1021:	int psi_show(struct seq_file *, struct psi_group *, enum psi_res);
799:	void psi_task_change(struct task_struct *, int, int);
826:	void psi_task_switch(struct task_struct *, struct task_struct *, bool);
1088:	struct psi_trigger *psi_trigger_create(struct psi_group *, char *, enum psi_res, size_t);
1234:	__poll_t psi_trigger_poll(void **, struct file *, poll_table *);
1222:	void psi_trigger_replace(void **, struct psi_trigger *);
306:	static void collect_percpu_times(struct psi_group *, enum psi_aggregators, u32 *);
241:	static void get_recent_times(int, enum psi_aggregators, u32 *, u32 *, struct psi_group *, struct psi_group *);
185:	static void group_init(struct psi_group *);
750:	static struct psi_group *iterate_groups(struct task_struct *, void **);
639:	static void poll_timer_fn(struct timer_list *);
414:	static void psi_avgs_work(struct work_struct *);
1083:	static int psi_cpu_open(struct inode *, struct file *);
1068:	static int psi_cpu_show(struct seq_file *, void *);
1309:	static ssize_t psi_cpu_write(struct file *, const char *, size_t, loff_t *);
784:	static void psi_flags_change(struct task_struct *, int, int);
1315:	static __poll_t psi_fop_poll(struct file *, poll_table *);
1322:	static int psi_fop_release(struct inode *, struct file *);
693:	static void psi_group_change(struct psi_group *, int, unsigned int, unsigned int, bool);
1073:	static int psi_io_open(struct inode *, struct file *);
1058:	static int psi_io_show(struct seq_file *, void *);
1297:	static ssize_t psi_io_write(struct file *, const char *, size_t, loff_t *);
1078:	static int psi_memory_open(struct inode *, struct file *);
1063:	static int psi_memory_show(struct seq_file *, void *);
1303:	static ssize_t psi_memory_write(struct file *, const char *, size_t, loff_t *);
581:	static void psi_poll_work(struct psi_group *);
621:	static int psi_poll_worker(void *);
1357:	static int psi_proc_init(void);
1159:	static void psi_trigger_destroy(struct kref *);
1264:	static ssize_t psi_write(struct file *, const char *, size_t, enum psi_res);
647:	static void record_times(struct psi_group_cpu *, int, bool);
155:	static int setup_psi(char *);
361:	static u64 update_averages(struct psi_group *, u64);
507:	static u64 update_triggers(struct psi_group *, u64);

File kernel/sched/rt.c:
185:	int alloc_rt_sched_group(struct task_group *, struct task_group *);
140:	void free_rt_sched_group(struct task_group *);
43:	void init_rt_bandwidth(struct rt_bandwidth *, u64, u64);
78:	void init_rt_rq(struct rt_rq *);
2285:	void init_sched_rt_class(void);
158:	void init_tg_rt_entry(struct task_group *, struct rt_rq *, struct sched_rt_entity *, int, struct sched_rt_entity *);
2808:	void print_rt_stats(struct seq_file *, int);
2093:	void rto_push_irq_work_func(struct irq_work *);
2675:	long sched_group_rt_period(struct task_group *);
2650:	long sched_group_rt_runtime(struct task_group *);
2662:	int sched_group_set_rt_period(struct task_group *, u64);
2636:	int sched_group_set_rt_runtime(struct task_group *, long);
2785:	int sched_rr_handler(struct ctl_table *, int, void *, size_t *, loff_t *);
668:	bool sched_rt_bandwidth_account(struct rt_rq *);
2695:	int sched_rt_can_attach(struct task_group *, struct task_struct *);
2746:	int sched_rt_handler(struct ctl_table *, int, void *, size_t *, loff_t *);
1276:	static void __delist_rt_entity(struct sched_rt_entity *, struct rt_prio_array *);
1320:	static void __dequeue_rt_entity(struct sched_rt_entity *, unsigned int);
732:	static void __disable_runtime(struct rq *);
814:	static void __enable_runtime(struct rq *);
1286:	static void __enqueue_rt_entity(struct sched_rt_entity *, unsigned int);
1543:	static int balance_rt(struct rq *, struct task_struct *, struct rq_flags *);
838:	static void balance_runtime(struct rt_rq *);
1564:	static void check_preempt_curr_rt(struct rq *, struct task_struct *, int);
1365:	static void dequeue_rt_entity(struct sched_rt_entity *, unsigned int);
1397:	static void dequeue_task_rt(struct rq *, struct task_struct *, int);
1051:	static void dequeue_top_rt_rq(struct rt_rq *);
680:	static void do_balance_runtime(struct rt_rq *);
853:	static int do_sched_rt_period_timer(struct rt_bandwidth *, int);
1384:	static void enqueue_task_rt(struct rq *, struct task_struct *, int);
1068:	static void enqueue_top_rt_rq(struct rt_rq *);
1815:	static struct rq *find_lock_lowest_rq(struct task_struct *, struct rq *);
1703:	static int find_lowest_rq(struct task_struct *);
2438:	static unsigned int get_rr_interval_rt(struct rq *, struct task_struct *);
1794:	static struct task_struct *pick_next_pushable_task(struct rq *);
1641:	static struct task_struct *pick_next_task_rt(struct rq *);
2332:	static void prio_changed_rt(struct rq *, struct task_struct *, int);
2129:	static void pull_rt_task(struct rq *);
1872:	static int push_rt_task(struct rq *);
1952:	static void push_rt_tasks(struct rq *);
1653:	static void put_prev_task_rt(struct rq *, struct task_struct *);
1425:	static void requeue_task_rt(struct task_struct *, int, struct rq *);
2256:	static void rq_offline_rt(struct rq *);
2245:	static void rq_online_rt(struct rq *);
475:	static bool rt_task_fits_capacity(struct task_struct *, int);
19:	static enum hrtimer_restart sched_rt_period_timer(struct hrtimer *);
548:	static void sched_rt_rq_dequeue(struct rt_rq *);
527:	static void sched_rt_rq_enqueue(struct rt_rq *);
1445:	static int select_task_rq_rt(struct task_struct *, int, int, int);
1589:	static void set_next_task_rt(struct rq *, struct task_struct *, bool);
2270:	static void switched_from_rt(struct rq *, struct task_struct *);
2301:	static void switched_to_rt(struct rq *, struct task_struct *);
2404:	static void task_tick_rt(struct rq *, struct task_struct *, int);
2231:	static void task_woken_rt(struct rq *, struct task_struct *);
2059:	static void tell_cpu_to_push(struct rq *);
2517:	static int tg_rt_schedulable(struct task_group *, void *);
2591:	static int tg_set_rt_bandwidth(struct task_group *, u64, u64);
1006:	static void update_curr_rt(struct rq *);
305:	static void update_rt_migration(struct rt_rq *);
1436:	static void yield_task_rt(struct rq *);

File kernel/sched/stats.c:
138:	static int proc_schedstat_init(void);
120:	static void *schedstat_next(struct seq_file *, void *, loff_t *);
98:	static void *schedstat_start(struct seq_file *, loff_t *);
127:	static void schedstat_stop(struct seq_file *, void *);
19:	static int show_schedstat(struct seq_file *, void *);

File kernel/sched/stop_task.c:
20:	static int balance_stop(struct rq *, struct task_struct *, struct rq_flags *);
27:	static void check_preempt_curr_stop(struct rq *, struct task_struct *, int);
53:	static void dequeue_task_stop(struct rq *, struct task_struct *, int);
47:	static void enqueue_task_stop(struct rq *, struct task_struct *, int);
37:	static struct task_struct *pick_next_task_stop(struct rq *);
100:	static void prio_changed_stop(struct rq *, struct task_struct *, int);
63:	static void put_prev_task_stop(struct rq *, struct task_struct *);
14:	static int select_task_rq_stop(struct task_struct *, int, int, int);
32:	static void set_next_task_stop(struct rq *, struct task_struct *, bool);
94:	static void switched_to_stop(struct rq *, struct task_struct *);
105:	static void update_curr_stop(struct rq *);
58:	static void yield_task_stop(struct rq *);

File kernel/sched/swait.c:
126:	void __finish_swait(struct swait_queue_head *, struct swait_queue *);
7:	void __init_swait_queue_head(struct swait_queue_head *, const char *, struct lock_class_key *);
85:	void __prepare_to_swait(struct swait_queue_head *, struct swait_queue *);
133:	void finish_swait(struct swait_queue_head *, struct swait_queue *);
103:	long prepare_to_swait_event(struct swait_queue_head *, struct swait_queue *, int);
92:	void prepare_to_swait_exclusive(struct swait_queue_head *, struct swait_queue *, int);
62:	void swake_up_all(struct swait_queue_head *);
42:	void swake_up_all_locked(struct swait_queue_head *);
22:	void swake_up_locked(struct swait_queue_head *);
48:	void swake_up_one(struct swait_queue_head *);

File kernel/sched/topology.c:
2312:	cpumask_var_t *alloc_sched_domains(unsigned int);
2307:	int arch_update_cpu_topology(void);
1582:	bool find_numa_distance(int);
2329:	void free_sched_domains(cpumask_var_t *, unsigned int);
771:	int group_balance_cpu(struct sched_group *);
562:	void init_defrootdomain(void);
2528:	void partition_sched_domains(int, cpumask_var_t *, struct sched_domain_attr *);
2422:	void partition_sched_domains_locked(int, cpumask_var_t *, struct sched_domain_attr *);
467:	void rq_attach_root(struct rq *, struct root_domain *);
1838:	void sched_domains_numa_masks_clear(unsigned int);
1825:	void sched_domains_numa_masks_set(unsigned int);
504:	void sched_get_rd(struct root_domain *);
2341:	int sched_init_domains(const struct cpumask *);
1680:	void sched_init_numa(void);
1856:	int sched_numa_find_closest(const struct cpumask *, int);
509:	void sched_put_rd(struct root_domain *);
1546:	void set_sched_topology(struct sched_domain_topology_level *);
1870:	static int __sdt_alloc(const struct cpumask *);
1939:	static void __sdt_free(const struct cpumask *);
1341:	static enum s_alloc __visit_domain_allocation_hell(struct s_data *, const struct cpumask *);
883:	static void build_balance_mask(struct sched_domain *, struct sched_group *, struct cpumask *);
920:	static struct sched_group *build_group_from_child_sched_domain(struct sched_domain *, int);
995:	static int build_overlap_sched_groups(struct sched_domain *, int);
2179:	static int build_sched_domains(const struct cpumask *, struct sched_domain_attr *);
1205:	static int build_sched_groups(struct sched_domain *, int);
1362:	static void claim_allocations(int, struct sched_domain *);
700:	static void cpu_attach_domain(struct sched_domain *, struct root_domain *, int);
2380:	static int dattrs_equal(struct sched_domain_attr *, int, struct sched_domain_attr *, int);
605:	static void destroy_sched_domain(struct sched_domain *);
621:	static void destroy_sched_domains_rcu(struct callback_head *);
970:	static struct sched_domain *find_descended_sibling(struct sched_domain *, struct sched_domain *);
453:	static void free_rootdomain(struct callback_head *);
585:	static void free_sched_groups(struct sched_group *, int);
1160:	static struct sched_group *get_group(int, struct sd_data *);
1616:	static void init_numa_topology_type(void);
941:	static void init_overlap_sched_group(struct sched_domain *, struct sched_group *);
517:	static int init_rootdomain(struct root_domain *);
1250:	static void init_sched_groups_capacity(int, struct sched_domain *);
30:	static int sched_debug_setup(char *);
49:	static int sched_domain_debug_one(struct sched_domain *, int, int, struct cpumask *);
1561:	static void sched_numa_warn(const char *);
185:	static int sd_degenerate(struct sched_domain *);
1414:	static struct sched_domain *sd_init(struct sched_domain_topology_level *, const struct cpumask *, struct sched_domain *, int, int);
1976:	static int sd_llc_alloc(struct sched_domain *);
1556:	static const struct cpumask *sd_numa_mask(int);
203:	static int sd_parent_degenerate(struct sched_domain *, struct sched_domain *);
1290:	static int setup_relax_domain_level(char *);
1654:	static int steal_node_limit_setup(char *);
2083:	static bool topology_span_sane(struct sched_domain_topology_level *, const struct cpumask *, int);
656:	static void update_top_cache_domain(int);

File kernel/sched/wait.c:
9:	void __init_waitqueue_head(struct wait_queue_head *, const char *, struct lock_class_key *);
139:	void __wake_up(struct wait_queue_head *, unsigned int, int, void *);
149:	void __wake_up_locked(struct wait_queue_head *, unsigned int, int);
155:	void __wake_up_locked_key(struct wait_queue_head *, unsigned int, void *);
161:	void __wake_up_locked_key_bookmark(struct wait_queue_head *, unsigned int, void *, wait_queue_entry_t *);
210:	void __wake_up_locked_sync_key(struct wait_queue_head *, unsigned int, void *);
226:	void __wake_up_pollfree(struct wait_queue_head *);
220:	void __wake_up_sync(struct wait_queue_head *, unsigned int);
184:	void __wake_up_sync_key(struct wait_queue_head *, unsigned int, void *);
18:	void add_wait_queue(struct wait_queue_head *, struct wait_queue_entry *);
29:	void add_wait_queue_exclusive(struct wait_queue_head *, struct wait_queue_entry *);
399:	int autoremove_wake_function(struct wait_queue_entry *, unsigned int, int, void *);
330:	int do_wait_intr(wait_queue_head_t *, wait_queue_entry_t *);
347:	int do_wait_intr_irq(wait_queue_head_t *, wait_queue_entry_t *);
373:	void finish_wait(struct wait_queue_head *, struct wait_queue_entry *);
278:	void init_wait_entry(struct wait_queue_entry *, int);
246:	void prepare_to_wait(struct wait_queue_head *, struct wait_queue_entry *, int);
287:	long prepare_to_wait_event(struct wait_queue_head *, struct wait_queue_entry *, int);
261:	bool prepare_to_wait_exclusive(struct wait_queue_head *, struct wait_queue_entry *, int);
40:	void remove_wait_queue(struct wait_queue_head *, struct wait_queue_entry *);
435:	long wait_woken(struct wait_queue_entry *, unsigned int, long);
460:	int woken_wake_function(struct wait_queue_entry *, unsigned int, int, void *);
66:	static int __wake_up_common(struct wait_queue_head *, unsigned int, int, int, void *, wait_queue_entry_t *);
110:	static void __wake_up_common_lock(struct wait_queue_head *, unsigned int, int, int, void *);

File kernel/sched/wait_bit.c:
153:	wait_queue_head_t *__var_waitqueue(void *);
41:	int __wait_on_bit(struct wait_queue_head *, struct wait_bit_queue_entry *, wait_bit_action_f *, unsigned int);
82:	int __wait_on_bit_lock(struct wait_queue_head *, struct wait_bit_queue_entry *, wait_bit_action_f *, unsigned int);
121:	void __wake_up_bit(struct wait_queue_head *, void *, int);
197:	int bit_wait(struct wait_bit_key *, int);
207:	int bit_wait_io(struct wait_bit_key *, int);
231:	int bit_wait_io_timeout(struct wait_bit_key *, int);
217:	int bit_wait_timeout(struct wait_bit_key *, int);
12:	struct wait_queue_head *bit_waitqueue(void *, int);
174:	void init_wait_var_entry(struct wait_bit_queue_entry *, void *, int);
58:	int out_of_line_wait_on_bit(void *, int, wait_bit_action_f *, unsigned int);
111:	int out_of_line_wait_on_bit_lock(void *, int, wait_bit_action_f *, unsigned int);
68:	int out_of_line_wait_on_bit_timeout(void *, int, wait_bit_action_f *, unsigned int, unsigned long);
245:	void wait_bit_init(void);
21:	int wake_bit_function(struct wait_queue_entry *, unsigned int, int, void *);
147:	void wake_up_bit(void *, int);
191:	void wake_up_var(void *);
160:	static int var_wake_function(struct wait_queue_entry *, unsigned int, int, void *);

File kernel/seccomp.c:
1942:	long __ia32_sys_seccomp(const struct pt_regs *);
1294:	int __secure_computing(const struct seccomp_data *);
1942:	long __x64_sys_seccomp(const struct pt_regs *);
432:	void arch_seccomp_spec_mitigate(struct task_struct *);
911:	void get_seccomp_filter(struct task_struct *);
1318:	long prctl_get_seccomp(void);
1955:	long prctl_set_seccomp(unsigned long, void *);
552:	void seccomp_filter_release(struct task_struct *);
2029:	long seccomp_get_filter(struct task_struct *, unsigned long, void *);
2067:	long seccomp_get_metadata(struct task_struct *, unsigned long, void *);
905:	static void __get_seccomp_filter(struct seccomp_filter *);
525:	static void __put_seccomp_filter(struct seccomp_filter *);
1157:	static int __seccomp_filter(int, const struct seccomp_data *, const bool);
516:	static void __seccomp_filter_orphan(struct seccomp_filter *);
2255:	static void audit_actions_logged(u32, u32, int);
1917:	static long do_seccomp(unsigned int, unsigned int, void *);
1983:	static struct seccomp_filter *get_nth_filter(struct task_struct *, unsigned long);
1714:	static struct file *init_listener(struct seccomp_filter *);
2208:	static int read_actions_logged(struct ctl_table *, void *, size_t *, loff_t *);
2287:	static int seccomp_actions_logged_handler(struct ctl_table *, int, void *, size_t *, loff_t *);
857:	static long seccomp_attach_filter(unsigned int, struct seccomp_filter *);
783:	static void seccomp_cache_prepare_bitmap(void *, const void *, int, size_t, struct seccomp_filter *, struct seccomp_filter *);
265:	static int seccomp_check_filter(struct sock_filter *, unsigned int);
1076:	static int seccomp_do_user_notification(struct seccomp_filter *, const struct seccomp_data *, int);
920:	static void seccomp_init_siginfo(kernel_siginfo_t *, int, int);
710:	static bool seccomp_is_const_allow(struct sock_fprog_kern *, struct seccomp_data *);
2142:	static bool seccomp_names_from_actions_logged(char *, u32, const char *, size_t);
1555:	static long seccomp_notify_addfd(struct seccomp_filter *, struct seccomp_notif_addfd *, unsigned int);
1359:	static void seccomp_notify_detach(struct seccomp_filter *);
1651:	static long seccomp_notify_ioctl(struct file *, unsigned int, unsigned long);
1678:	static __poll_t seccomp_notify_poll(struct file *, struct poll_table_struct *);
1418:	static long seccomp_notify_recv(struct seccomp_filter *, void *);
1392:	static int seccomp_notify_release(struct inode *, struct file *);
1487:	static long seccomp_notify_send(struct seccomp_filter *, void *);
682:	static struct seccomp_filter *seccomp_prepare_user_filter(const char *);
391:	static u32 seccomp_run_filters(const struct seccomp_data *, struct seccomp_filter **);
1780:	static long seccomp_set_mode_filter(unsigned int, const char *);
1330:	static long seccomp_set_mode_strict(void);
2328:	static int seccomp_sysctl_init(void);
2226:	static int write_actions_logged(struct ctl_table *, void *, size_t *, loff_t *, u32 *);

File kernel/signal.c:
4138:	int __compat_save_altstack(compat_stack_t *, unsigned long);
3332:	int __copy_siginfo_to_user32(struct compat_siginfo *, const struct kernel_siginfo *);
1284:	int __group_send_sig_info(int, struct kernel_siginfo *, struct task_struct *);
4272:	long __ia32_compat_sys_rt_sigaction(const struct pt_regs *);
3117:	long __ia32_compat_sys_rt_sigpending(const struct pt_regs *);
3060:	long __ia32_compat_sys_rt_sigprocmask(const struct pt_regs *);
3888:	long __ia32_compat_sys_rt_sigqueueinfo(const struct pt_regs *);
4484:	long __ia32_compat_sys_rt_sigsuspend(const struct pt_regs *);
3606:	long __ia32_compat_sys_rt_sigtimedwait_time32(const struct pt_regs *);
3575:	long __ia32_compat_sys_rt_sigtimedwait_time64(const struct pt_regs *);
3928:	long __ia32_compat_sys_rt_tgsigqueueinfo(const struct pt_regs *);
4355:	long __ia32_compat_sys_sigaction(const struct pt_regs *);
4124:	long __ia32_compat_sys_sigaltstack(const struct pt_regs *);
4176:	long __ia32_compat_sys_sigpending(const struct pt_regs *);
3653:	long __ia32_sys_kill(const struct pt_regs *);
3727:	long __ia32_sys_pidfd_send_signal(const struct pt_regs *);
4247:	long __ia32_sys_rt_sigaction(const struct pt_regs *);
3101:	long __ia32_sys_rt_sigpending(const struct pt_regs *);
3029:	long __ia32_sys_rt_sigprocmask(const struct pt_regs *);
3877:	long __ia32_sys_rt_sigqueueinfo(const struct pt_regs *);
4470:	long __ia32_sys_rt_sigsuspend(const struct pt_regs *);
3509:	long __ia32_sys_rt_sigtimedwait(const struct pt_regs *);
3542:	long __ia32_sys_rt_sigtimedwait_time32(const struct pt_regs *);
3917:	long __ia32_sys_rt_tgsigqueueinfo(const struct pt_regs *);
4056:	long __ia32_sys_sigaltstack(const struct pt_regs *);
4423:	long __ia32_sys_signal(const struct pt_regs *);
4160:	long __ia32_sys_sigpending(const struct pt_regs *);
4199:	long __ia32_sys_sigprocmask(const struct pt_regs *);
4507:	long __ia32_sys_sigsuspend(const struct pt_regs *);
4407:	long __ia32_sys_ssetmask(const struct pt_regs *);
3833:	long __ia32_sys_tgkill(const struct pt_regs *);
3849:	long __ia32_sys_tkill(const struct pt_regs *);
1429:	int __kill_pgrp_info(int, struct kernel_siginfo *, struct pid *);
1374:	struct sighand_struct *__lock_task_sighand(struct task_struct *, unsigned long *);
4081:	int __save_altstack(stack_t *, unsigned long);
2922:	void __set_current_blocked(const sigset_t *);
3653:	long __x64_sys_kill(const struct pt_regs *);
3727:	long __x64_sys_pidfd_send_signal(const struct pt_regs *);
4247:	long __x64_sys_rt_sigaction(const struct pt_regs *);
3101:	long __x64_sys_rt_sigpending(const struct pt_regs *);
3029:	long __x64_sys_rt_sigprocmask(const struct pt_regs *);
3877:	long __x64_sys_rt_sigqueueinfo(const struct pt_regs *);
4470:	long __x64_sys_rt_sigsuspend(const struct pt_regs *);
3509:	long __x64_sys_rt_sigtimedwait(const struct pt_regs *);
3542:	long __x64_sys_rt_sigtimedwait_time32(const struct pt_regs *);
3917:	long __x64_sys_rt_tgsigqueueinfo(const struct pt_regs *);
4056:	long __x64_sys_sigaltstack(const struct pt_regs *);
4423:	long __x64_sys_signal(const struct pt_regs *);
4160:	long __x64_sys_sigpending(const struct pt_regs *);
4199:	long __x64_sys_sigprocmask(const struct pt_regs *);
4507:	long __x64_sys_sigsuspend(const struct pt_regs *);
4407:	long __x64_sys_ssetmask(const struct pt_regs *);
3833:	long __x64_sys_tgkill(const struct pt_regs *);
3849:	long __x64_sys_tkill(const struct pt_regs *);
4515:	const char *arch_vma_name(struct vm_area_struct *);
193:	void calculate_sigpending(void);
4131:	int compat_restore_altstack(const compat_stack_t *);
3244:	int copy_siginfo_from_user(kernel_siginfo_t *, const siginfo_t *);
3433:	int copy_siginfo_from_user32(struct kernel_siginfo *, const struct compat_siginfo *);
3262:	void copy_siginfo_to_external32(struct compat_siginfo *, const struct kernel_siginfo *);
3202:	int copy_siginfo_to_user(siginfo_t *, const kernel_siginfo_t *);
631:	int dequeue_signal(struct task_struct *, sigset_t *, kernel_siginfo_t *);
2892:	long do_no_restart_syscall(struct restart_block *);
1912:	bool do_notify_parent(struct task_struct *, int);
1289:	int do_send_sig_info(int, struct kernel_siginfo *, struct task_struct *, enum pid_type);
3968:	int do_sigaction(int, struct k_sigaction *, struct k_sigaction *);
2829:	void exit_signals(struct task_struct *);
514:	void flush_itimer_signals(void);
541:	void flush_signal_handlers(struct task_struct *, int);
478:	void flush_signals(struct task_struct *);
463:	void flush_sigqueue(struct sigpending *);
1625:	void force_sig(int);
1742:	int force_sig_bnderr(void *, void *, void *);
1681:	int force_sig_fault(int, int, void *);
1658:	int force_sig_fault_to_task(int, int, void *, struct task_struct *);
1345:	int force_sig_info(struct kernel_siginfo *);
1713:	int force_sig_mceerr(int, void *, short);
1757:	int force_sig_pkuerr(void *, u32);
1774:	int force_sig_ptrace_errno_trap(int, void *);
1645:	void force_sigsegv(int);
2522:	bool get_signal(struct ksignal *);
1409:	int group_send_sig_info(int, struct kernel_siginfo *, struct task_struct *, enum pid_type);
526:	void ignore_signals(struct task_struct *);
4604:	void kdb_send_sig(struct task_struct *, int);
3945:	void kernel_sigaction(int, __sighandler_t);
1786:	int kill_pgrp(struct pid *, int, int);
1798:	int kill_pid(struct pid *, int, int);
1444:	int kill_pid_info(int, struct kernel_siginfo *, struct pid *);
1511:	int kill_pid_usb_asyncio(int, int, sigval_t, struct pid *, const struct cred *);
210:	int next_signal(struct sigpending *, sigset_t *);
2267:	void ptrace_notify(int);
184:	void recalc_sigpending(void);
178:	void recalc_sigpending_and_wake(struct task_struct *);
4070:	int restore_altstack(const stack_t *);
1619:	int send_sig(int, struct task_struct *, int);
1690:	int send_sig_fault(int, int, void *, struct task_struct *);
1602:	int send_sig_info(int, struct kernel_siginfo *, struct task_struct *);
1727:	int send_sig_mceerr(int, void *, short, struct task_struct *);
1848:	int send_sigqueue(struct sigqueue *, struct pid *, enum pid_type);
3002:	int set_compat_user_sigmask(const compat_sigset_t *, size_t);
2916:	void set_current_blocked(sigset_t *);
2983:	int set_user_sigmask(const sigset_t *, size_t);
3963:	void sigaction_compat_abi(struct k_sigaction *, struct k_sigaction *);
3166:	enum siginfo_layout siginfo_layout(unsigned int, int);
2789:	void signal_setup_done(int, struct ksignal *, int);
762:	void signal_wake_up_state(struct task_struct *, unsigned int);
4589:	void signals_init(void);
2946:	int sigprocmask(int, sigset_t *, sigset_t *);
1813:	struct sigqueue *sigqueue_alloc(void);
1823:	void sigqueue_free(struct sigqueue *);
339:	void task_clear_jobctl_pending(struct task_struct *, unsigned long);
315:	void task_clear_jobctl_trapping(struct task_struct *);
394:	void task_join_group_stop(struct task_struct *);
287:	bool task_set_jobctl_pending(struct task_struct *, unsigned long);
557:	bool unhandled_signal(struct task_struct *, int);
1353:	int zap_other_threads(struct task_struct *);
3235:	static int __copy_siginfo_from_user(int, kernel_siginfo_t *, const siginfo_t *);
3421:	static int __copy_siginfo_from_user32(int, struct kernel_siginfo *, const struct compat_siginfo *);
4440:	static long __do_sys_pause(const struct pt_regs *);
2886:	static long __do_sys_restart_syscall(const struct pt_regs *);
4401:	static long __do_sys_sgetmask(const struct pt_regs *);
491:	static void __flush_itimer_signals(struct sigpending *);
4355:	static long __se_compat_sys_sigaction(long, long, long);
3653:	static long __se_sys_kill(long, long);
3727:	static long __se_sys_pidfd_send_signal(long, long, long, long);
4247:	static long __se_sys_rt_sigaction(long, long, long, long);
3029:	static long __se_sys_rt_sigprocmask(long, long, long, long);
3509:	static long __se_sys_rt_sigtimedwait(long, long, long, long);
3542:	static long __se_sys_rt_sigtimedwait_time32(long, long, long, long);
4056:	static long __se_sys_sigaltstack(long, long);
4199:	static long __se_sys_sigprocmask(long, long, long);
1076:	static int __send_signal(int, struct kernel_siginfo *, struct task_struct *, enum pid_type, bool);
2897:	static void __set_task_blocked(struct task_struct *, const sigset_t *);
415:	static struct sigqueue *__sigqueue_alloc(int, struct task_struct *, gfp_t, int);
454:	static void __sigqueue_free(struct sigqueue *);
830:	static int check_kill_permission(int, struct kernel_siginfo *, struct task_struct *);
570:	static void collect_signal(int, struct sigpending *, kernel_siginfo_t *, bool *);
992:	static void complete_signal(int, struct task_struct *, enum pid_type);
709:	static int dequeue_synchronous_signal(kernel_siginfo_t *);
4095:	static int do_compat_sigaltstack(const compat_stack_t *, compat_stack_t *);
2447:	static void do_freezer_trap(void);
2418:	static void do_jobctl_trap(void);
2023:	static void do_notify_parent_cldstop(struct task_struct *, bool, int);
3858:	static int do_rt_sigqueueinfo(pid_t, int, kernel_siginfo_t *);
3901:	static int do_rt_tgsigqueueinfo(pid_t, pid_t, int, kernel_siginfo_t *);
3780:	static int do_send_specific(pid_t, pid_t, int, struct kernel_siginfo *);
4014:	static int do_sigaltstack(const stack_t *, stack_t *, unsigned long, size_t);
2300:	static bool do_signal_stop(int);
3084:	static void do_sigpending(sigset_t *);
3451:	static int do_sigtimedwait(const sigset_t *, kernel_siginfo_t *, const struct timespec64 *);
3809:	static int do_tkill(pid_t, pid_t, int);
782:	static void flush_sigqueue_mask(sigset_t *, struct sigpending *);
1315:	static int force_sig_info_to_task(struct kernel_siginfo *, struct task_struct *);
3147:	static bool known_siginfo_layout(unsigned int, int);
3343:	static int post_copy_siginfo_from_user32(kernel_siginfo_t *, const struct compat_siginfo *);
902:	static bool prepare_signal(int, struct task_struct *, bool);
2253:	static void ptrace_do_notify(int, int, int);
2474:	static int ptrace_signal(int, kernel_siginfo_t *);
2117:	static void ptrace_stop(int, int, int, kernel_siginfo_t *);
883:	static void ptrace_trap_notify(struct task_struct *);
156:	static bool recalc_sigpending_tsk(struct task_struct *);
2802:	static void retarget_shared_pending(struct task_struct *, sigset_t *, sigset_t *);
1214:	static int send_signal(int, struct kernel_siginfo *, struct task_struct *, enum pid_type);
1274:	static int setup_print_fatal_signals(char *);
4451:	static int sigsuspend(sigset_t *);
368:	static bool task_participate_group_stop(struct task_struct *);

File kernel/smp.c:
257:	void __smp_call_single_queue(int, struct llist_node *);
782:	void arch_disable_smp_support(void);
93:	void call_function_init(void);
444:	void flush_smp_call_function_from_idle(void);
315:	void generic_smp_call_function_single_interrupt(void);
901:	void kick_all_cpus_sync(void);
872:	void on_each_cpu_cond_mask(smp_cond_func_t, smp_call_func_t, void *, bool, const struct cpumask *);
823:	void setup_nr_cpu_ids(void);
758:	void smp_call_function(smp_call_func_t, void *, int);
582:	int smp_call_function_any(const struct cpumask *, smp_call_func_t, void *, int);
736:	void smp_call_function_many(const struct cpumask *, smp_call_func_t, void *, bool);
467:	int smp_call_function_single(int, smp_call_func_t, void *, int);
545:	int smp_call_function_single_async(int, struct __call_single_data *);
960:	int smp_call_on_cpu(unsigned int, int (*)(void *), void *, bool);
829:	void smp_init(void);
67:	int smpcfd_dead_cpu(unsigned int);
77:	int smpcfd_dying_cpu(unsigned int);
45:	int smpcfd_prepare_cpu(unsigned int);
915:	void wake_up_all_idle_cpus(void);
886:	static void do_nothing(void *);
334:	static void flush_smp_call_function_queue(bool);
279:	static int generic_exec_single(int, struct __call_single_data *);
807:	static int maxcpus(char *);
784:	static int nosmp(char *);
795:	static int nrcpus(char *);
620:	static void smp_call_function_many_cond(const struct cpumask *, smp_call_func_t, void *, unsigned int, smp_cond_func_t);
946:	static void smp_call_on_cpu_callback(struct work_struct *);

File kernel/smpboot.c:
352:	int cpu_check_up_prepare(int);
465:	bool cpu_report_death(void);
335:	int cpu_report_state(int);
408:	void cpu_set_state_online(int);
418:	bool cpu_wait_death(unsigned int, int);
30:	struct task_struct *idle_thread_get(unsigned int);
39:	void idle_thread_set_boot_cpu(void);
66:	void idle_threads_init(void);
213:	int smpboot_create_threads(unsigned int);
255:	int smpboot_park_threads(unsigned int);
289:	int smpboot_register_percpu_thread(struct smp_hotplug_thread *);
236:	int smpboot_unpark_threads(unsigned int);
318:	void smpboot_unregister_percpu_thread(struct smp_hotplug_thread *);
170:	static int __smpboot_create_thread(struct smp_hotplug_thread *, unsigned int);
266:	static void smpboot_destroy_threads(struct smp_hotplug_thread *);
106:	static int smpboot_thread_fn(void *);

File kernel/softirq.c:
255:	void __do_softirq(void);
172:	void __local_bh_enable_ip(unsigned long, unsigned int);
482:	void __raise_softirq_irqoff(unsigned int);
528:	void __tasklet_hi_schedule(struct tasklet_struct *);
521:	void __tasklet_schedule(struct tasklet_struct *);
165:	void _local_bh_enable(void);
760:	unsigned int arch_dynirq_lower_bound(unsigned int);
755:	int arch_early_irq_init(void);
750:	int arch_probe_nr_irqs(void);
330:	void do_softirq(void);
745:	int early_irq_init(void);
368:	void irq_enter(void);
351:	void irq_enter_rcu(void);
445:	void irq_exit(void);
433:	void irq_exit_rcu(void);
489:	void open_softirq(int, void (*)(struct softirq_action *));
473:	void raise_softirq(unsigned int);
456:	void raise_softirq_irqoff(unsigned int);
625:	void softirq_init(void);
598:	void tasklet_init(struct tasklet_struct *, void (*)(unsigned long), unsigned long);
610:	void tasklet_kill(struct tasklet_struct *);
671:	void tasklet_kill_immediate(struct tasklet_struct *, unsigned int);
586:	void tasklet_setup(struct tasklet_struct *, void (*)(struct tasklet_struct *));
640:	static int ksoftirqd_should_run(unsigned int);
645:	static void run_ksoftirqd(unsigned int);
730:	static int spawn_ksoftirqd(void);
694:	static int takeover_tasklets(unsigned int);
576:	static void tasklet_action(struct softirq_action *);
535:	static void tasklet_action_common(struct tasklet_head *, unsigned int, struct softirq_action *);
581:	static void tasklet_hi_action(struct softirq_action *);

File kernel/stacktrace.c:
393:	unsigned int filter_irq_stacks(unsigned long *, unsigned int);
24:	void stack_trace_print(const unsigned long *, unsigned int, int);
112:	unsigned int stack_trace_save(unsigned long *, unsigned int, unsigned int);
164:	unsigned int stack_trace_save_regs(struct pt_regs *, unsigned long *, unsigned int, unsigned int);
136:	unsigned int stack_trace_save_tsk(struct task_struct *, unsigned long *, unsigned int, unsigned int);
191:	int stack_trace_save_tsk_reliable(struct task_struct *, unsigned long *, unsigned int);
222:	unsigned int stack_trace_save_user(unsigned long *, unsigned int);
47:	int stack_trace_snprint(char *, size_t, const unsigned long *, unsigned int, int);
82:	static bool stack_trace_consume_entry(void *, unsigned long);
97:	static bool stack_trace_consume_entry_nosched(void *, unsigned long);

File kernel/static_call.c:
502:	long __static_call_return0(void);
123:	void __static_call_update(struct static_call_key *, void *, void *);
474:	int static_call_init(void);
462:	int static_call_text_reserved(void *, void *);
209:	static int __static_call_init(struct module *, struct static_call_site *, struct static_call_site *);
312:	static int __static_call_mod_text_reserved(void *, void *);
353:	static int static_call_add_module(struct module *);
392:	static void static_call_del_module(struct module *);
421:	static int static_call_module_notify(struct notifier_block *, unsigned long, void *);
65:	static int static_call_site_cmp(const void *, const void *);
81:	static void static_call_site_swap(void *, void *, int);

File kernel/stop_machine.c:
615:	int stop_machine(cpu_stop_fn_t, void *, const struct cpumask *);
579:	int stop_machine_cpuslocked(cpu_stop_fn_t, void *, const struct cpumask *);
649:	int stop_machine_from_inactive_cpu(cpu_stop_fn_t, void *, const struct cpumask *);
517:	void stop_machine_park(int);
543:	void stop_machine_unpark(int);
186:	void stop_machine_yield(const struct cpumask *);
128:	int stop_one_cpu(unsigned int, cpu_stop_fn_t, void *);
380:	bool stop_one_cpu_nowait(unsigned int, cpu_stop_fn_t, void *, struct cpu_stop_work *);
331:	int stop_two_cpus(unsigned int, unsigned int, cpu_stop_fn_t, void *);
418:	static int __stop_cpus(void *, cpu_stop_fn_t, const struct cpumask *);
531:	static void cpu_stop_create(unsigned int);
561:	static int cpu_stop_init(void);
536:	static void cpu_stop_park(unsigned int);
258:	static int cpu_stop_queue_two_works(int, struct cpu_stop_work *, int, struct cpu_stop_work *);
82:	static bool cpu_stop_queue_work(unsigned int, struct cpu_stop_work *);
469:	static int cpu_stop_should_run(unsigned int);
481:	static void cpu_stopper_thread(unsigned int);
192:	static int multi_cpu_stop(void *);
387:	static bool queue_stop_cpus_work(const struct cpumask *, void *, struct cpu_stop_done *, cpu_stop_fn_t);

File kernel/sys.c:
1433:	long __ia32_compat_sys_getrlimit(const struct pt_regs *);
1809:	long __ia32_compat_sys_getrusage(const struct pt_regs *);
1483:	long __ia32_compat_sys_old_getrlimit(const struct pt_regs *);
1413:	long __ia32_compat_sys_setrlimit(const struct pt_regs *);
2643:	long __ia32_compat_sys_sysinfo(const struct pt_regs *);
989:	long __ia32_compat_sys_times(const struct pt_regs *);
2533:	long __ia32_sys_getcpu(const struct pt_regs *);
1348:	long __ia32_sys_gethostname(const struct pt_regs *);
1119:	long __ia32_sys_getpgid(const struct pt_regs *);
267:	long __ia32_sys_getpriority(const struct pt_regs *);
783:	long __ia32_sys_getresgid(const struct pt_regs *);
700:	long __ia32_sys_getresuid(const struct pt_regs *);
1399:	long __ia32_sys_getrlimit(const struct pt_regs *);
1796:	long __ia32_sys_getrusage(const struct pt_regs *);
1133:	long __ia32_sys_getsid(const struct pt_regs *);
1253:	long __ia32_sys_newuname(const struct pt_regs *);
1464:	long __ia32_sys_old_getrlimit(const struct pt_regs *);
1294:	long __ia32_sys_olduname(const struct pt_regs *);
2276:	long __ia32_sys_prctl(const struct pt_regs *);
1622:	long __ia32_sys_prlimit64(const struct pt_regs *);
1374:	long __ia32_sys_setdomainname(const struct pt_regs *);
890:	long __ia32_sys_setfsgid(const struct pt_regs *);
846:	long __ia32_sys_setfsuid(const struct pt_regs *);
453:	long __ia32_sys_setgid(const struct pt_regs *);
1321:	long __ia32_sys_sethostname(const struct pt_regs *);
1020:	long __ia32_sys_setpgid(const struct pt_regs *);
197:	long __ia32_sys_setpriority(const struct pt_regs *);
407:	long __ia32_sys_setregid(const struct pt_regs *);
778:	long __ia32_sys_setresgid(const struct pt_regs *);
695:	long __ia32_sys_setresuid(const struct pt_regs *);
562:	long __ia32_sys_setreuid(const struct pt_regs *);
1669:	long __ia32_sys_setrlimit(const struct pt_regs *);
620:	long __ia32_sys_setuid(const struct pt_regs *);
2613:	long __ia32_sys_sysinfo(const struct pt_regs *);
970:	long __ia32_sys_times(const struct pt_regs *);
1822:	long __ia32_sys_umask(const struct pt_regs *);
1274:	long __ia32_sys_uname(const struct pt_regs *);
854:	long __sys_setfsgid(gid_t);
810:	long __sys_setfsuid(uid_t);
417:	long __sys_setgid(gid_t);
351:	long __sys_setregid(gid_t, gid_t);
722:	long __sys_setresgid(gid_t, gid_t, gid_t);
630:	long __sys_setresuid(uid_t, uid_t, uid_t);
502:	long __sys_setreuid(uid_t, uid_t);
578:	long __sys_setuid(uid_t);
2533:	long __x64_sys_getcpu(const struct pt_regs *);
1348:	long __x64_sys_gethostname(const struct pt_regs *);
1119:	long __x64_sys_getpgid(const struct pt_regs *);
267:	long __x64_sys_getpriority(const struct pt_regs *);
783:	long __x64_sys_getresgid(const struct pt_regs *);
700:	long __x64_sys_getresuid(const struct pt_regs *);
1399:	long __x64_sys_getrlimit(const struct pt_regs *);
1796:	long __x64_sys_getrusage(const struct pt_regs *);
1133:	long __x64_sys_getsid(const struct pt_regs *);
1253:	long __x64_sys_newuname(const struct pt_regs *);
1464:	long __x64_sys_old_getrlimit(const struct pt_regs *);
1294:	long __x64_sys_olduname(const struct pt_regs *);
2276:	long __x64_sys_prctl(const struct pt_regs *);
1622:	long __x64_sys_prlimit64(const struct pt_regs *);
1374:	long __x64_sys_setdomainname(const struct pt_regs *);
890:	long __x64_sys_setfsgid(const struct pt_regs *);
846:	long __x64_sys_setfsuid(const struct pt_regs *);
453:	long __x64_sys_setgid(const struct pt_regs *);
1321:	long __x64_sys_sethostname(const struct pt_regs *);
1020:	long __x64_sys_setpgid(const struct pt_regs *);
197:	long __x64_sys_setpriority(const struct pt_regs *);
407:	long __x64_sys_setregid(const struct pt_regs *);
778:	long __x64_sys_setresgid(const struct pt_regs *);
695:	long __x64_sys_setresuid(const struct pt_regs *);
562:	long __x64_sys_setreuid(const struct pt_regs *);
1669:	long __x64_sys_setrlimit(const struct pt_regs *);
620:	long __x64_sys_setuid(const struct pt_regs *);
2613:	long __x64_sys_sysinfo(const struct pt_regs *);
970:	long __x64_sys_times(const struct pt_regs *);
1822:	long __x64_sys_umask(const struct pt_regs *);
1274:	long __x64_sys_uname(const struct pt_regs *);
2263:	int arch_prctl_spec_ctrl_get(struct task_struct *, unsigned long);
2268:	int arch_prctl_spec_ctrl_set(struct task_struct *, unsigned long, unsigned long);
1543:	int do_prlimit(struct task_struct *, unsigned int, struct rlimit *, struct rlimit *);
1721:	void getrusage(struct task_struct *, int, struct rusage *);
1172:	int ksys_setsid(void);
951:	static long __do_sys_getegid(const struct pt_regs *);
939:	static long __do_sys_geteuid(const struct pt_regs *);
945:	static long __do_sys_getgid(const struct pt_regs *);
1126:	static long __do_sys_getpgrp(const struct pt_regs *);
905:	static long __do_sys_getpid(const struct pt_regs *);
922:	static long __do_sys_getppid(const struct pt_regs *);
911:	static long __do_sys_gettid(const struct pt_regs *);
933:	static long __do_sys_getuid(const struct pt_regs *);
1205:	static long __do_sys_setsid(const struct pt_regs *);
1809:	static long __se_compat_sys_getrusage(long, long);
2643:	static long __se_compat_sys_sysinfo(long);
1348:	static long __se_sys_gethostname(long, long);
267:	static long __se_sys_getpriority(long, long);
783:	static long __se_sys_getresgid(long, long, long);
700:	static long __se_sys_getresuid(long, long, long);
1796:	static long __se_sys_getrusage(long, long);
1133:	static long __se_sys_getsid(long);
1253:	static long __se_sys_newuname(long);
1464:	static long __se_sys_old_getrlimit(long, long);
1294:	static long __se_sys_olduname(long);
2276:	static long __se_sys_prctl(long, long, long, long, long);
1622:	static long __se_sys_prlimit64(long, long, long, long);
1374:	static long __se_sys_setdomainname(long, long);
1321:	static long __se_sys_sethostname(long, long);
1020:	static long __se_sys_setpgid(long, long);
197:	static long __se_sys_setpriority(long, long, long);
2613:	static long __se_sys_sysinfo(long);
1274:	static long __se_sys_uname(long);
1600:	static int check_prlimit_permission(struct task_struct *, unsigned int);
1091:	static int do_getpgid(pid_t);
957:	static void do_sys_times(struct tms *);
2550:	static int do_sysinfo(struct sysinfo *);
1227:	static int override_release(char *, size_t);
2066:	static int prctl_set_auxv(struct mm_struct *, unsigned long, unsigned long);
2096:	static int prctl_set_mm(int, unsigned long, unsigned long, unsigned long);
1828:	static int prctl_set_mm_exe_file(struct mm_struct *, unsigned int);
1958:	static int prctl_set_mm_map(int, const void *, unsigned long);
2245:	static int propagate_has_child_subreaper(struct task_struct *, void *);
173:	static int set_one_prio(struct task_struct *, int, int);
461:	static int set_user(struct cred *);
1896:	static int validate_prctl_map_addr(struct prctl_mm_map *);

File kernel/sys_ni.c:
39:	long __x64_sys_io_setup(const struct pt_regs *);
20:	long sys_ni_syscall(void);

File kernel/sysctl.c:
1452:	int proc_do_large_bitmap(struct ctl_table *, int, void *, size_t *, loff_t *);
1654:	int proc_do_static_key(struct ctl_table *, int, void *, size_t *, loff_t *);
829:	int proc_dointvec(struct ctl_table *, int, void *, size_t *, loff_t *);
1361:	int proc_dointvec_jiffies(struct ctl_table *, int, void *, size_t *, loff_t *);
986:	int proc_dointvec_minmax(struct ctl_table *, int, void *, size_t *, loff_t *);
1406:	int proc_dointvec_ms_jiffies(struct ctl_table *, int, void *, size_t *, loff_t *);
1383:	int proc_dointvec_userhz_jiffies(struct ctl_table *, int, void *, size_t *, loff_t *);
386:	int proc_dostring(struct ctl_table *, int, void *, size_t *, loff_t *);
869:	int proc_douintvec(struct ctl_table *, int, void *, size_t *, loff_t *);
1055:	int proc_douintvec_minmax(struct ctl_table *, int, void *, size_t *, loff_t *);
1244:	int proc_doulongvec_minmax(struct ctl_table *, int, void *, size_t *, loff_t *);
1267:	int proc_doulongvec_ms_jiffies_minmax(struct ctl_table *, int, void *, size_t *, loff_t *);
3588:	int sysctl_init(void);
598:	static int __do_proc_dointvec(void *, struct ctl_table *, int, void *, size_t *, loff_t *, int (*)(bool *, unsigned long *, int *, int, void *), void *);
769:	static int __do_proc_douintvec(void *, struct ctl_table *, int, void *, size_t *, loff_t *, int (*)(unsigned long *, unsigned int *, int, void *), void *);
1147:	static int __do_proc_doulongvec_minmax(void *, struct ctl_table *, int, void *, size_t *, loff_t *, unsigned long, unsigned long);
273:	static int _proc_do_string(char *, int, int, char *, size_t *, loff_t *);
215:	static int bpf_stats_handler(struct ctl_table *, int, void *, size_t *, loff_t *);
246:	static int bpf_unpriv_handler(struct ctl_table *, int, void *, size_t *, loff_t *);
554:	static int do_proc_dointvec_conv(bool *, unsigned long *, int *, int, void *);
1275:	static int do_proc_dointvec_jiffies_conv(bool *, unsigned long *, int *, int, void *);
944:	static int do_proc_dointvec_minmax_conv(bool *, unsigned long *, int *, int, void *);
1321:	static int do_proc_dointvec_ms_jiffies_conv(bool *, unsigned long *, int *, int, void *);
1298:	static int do_proc_dointvec_userhz_jiffies_conv(bool *, unsigned long *, int *, int, void *);
1066:	static int do_proc_dopipe_max_size_conv(unsigned long *, unsigned int *, int, void *);
581:	static int do_proc_douintvec_conv(unsigned long *, unsigned int *, int, void *);
1011:	static int do_proc_douintvec_minmax_conv(unsigned long *, unsigned int *, int, void *);
681:	static int do_proc_douintvec_w(unsigned int *, struct ctl_table *, void *, size_t *, loff_t *, int (*)(unsigned long *, unsigned int *, int, void *), void *);
1413:	static int proc_do_cad_pid(struct ctl_table *, int, void *, size_t *, loff_t *);
1107:	static int proc_dointvec_minmax_coredump(struct ctl_table *, int, void *, size_t *, loff_t *);
920:	static int proc_dointvec_minmax_sysadmin(struct ctl_table *, int, void *, size_t *, loff_t *);
836:	static int proc_dointvec_minmax_warn_RT_change(struct ctl_table *, int, void *, size_t *, loff_t *);
1086:	static int proc_dopipe_max_size(struct ctl_table *, int, void *, size_t *, loff_t *);
1117:	static int proc_dostring_coredump(struct ctl_table *, int, void *, size_t *, loff_t *);
352:	static bool proc_first_pos_non_zero_ignore(struct ctl_table *, loff_t *);
467:	static int proc_get_long(char **, size_t *, unsigned long *, bool *, const char *, char *, unsigned int);
527:	static void proc_put_long(void **, size_t *, unsigned long, bool);
880:	static int proc_taint(struct ctl_table *, int, void *, size_t *, loff_t *);
1128:	static int sysrq_sysctl_handler(struct ctl_table *, int, void *, size_t *, loff_t *);

File kernel/task_work.c:
32:	int task_work_add(struct task_struct *, struct callback_head *, enum task_work_notify_mode);
84:	struct callback_head *task_work_cancel(struct task_struct *, task_work_func_t);
118:	void task_work_run(void);

File kernel/taskstats.c:
583:	void taskstats_exit(struct task_struct *, int);
670:	void taskstats_init_early(void);
274:	static int add_del_listener(pid_t, const struct cpumask *, int);
385:	static int cgroupstats_user_cmd(struct sk_buff *, struct genl_info *);
155:	static void fill_stats(struct user_namespace *, struct pid_namespace *, struct task_struct *, struct taskstats *);
179:	static int fill_stats_for_pid(pid_t, struct taskstats *);
191:	static int fill_stats_for_tgid(pid_t, struct taskstats *);
355:	static struct taskstats *mk_reply(struct sk_buff *, int, u32);
333:	static int parse(struct nlattr *, struct cpumask *);
65:	static int prepare_reply(struct genl_info *, u8, struct sk_buff **, size_t);
109:	static void send_cpu_listeners(struct sk_buff *, struct listener_list *);
681:	static int taskstats_init(void);
550:	static struct taskstats *taskstats_tgid_alloc(struct task_struct *);
536:	static int taskstats_user_cmd(struct sk_buff *, struct genl_info *);

File kernel/time/alarmtimer.c:
429:	int alarm_cancel(struct alarm *);
225:	ktime_t alarm_expires_remaining(const struct alarm *);
441:	u64 alarm_forward(struct alarm *, ktime_t, ktime_t);
473:	u64 alarm_forward_now(struct alarm *, ktime_t);
342:	void alarm_init(struct alarm *, enum alarmtimer_type, enum alarmtimer_restart (*)(struct alarm *, ktime_t));
385:	void alarm_restart(struct alarm *);
356:	void alarm_start(struct alarm *, ktime_t);
376:	void alarm_start_relative(struct alarm *, ktime_t);
405:	int alarm_try_to_cancel(struct alarm *);
71:	struct rtc_device *alarmtimer_get_rtcdev(void);
684:	static ktime_t alarm_clock_get_ktime(clockid_t);
666:	static int alarm_clock_get_timespec(clockid_t, struct timespec64 *);
649:	static int alarm_clock_getres(const clockid_t, struct timespec64 *);
533:	static enum alarmtimer_restart alarm_handle_timer(struct alarm *, ktime_t);
628:	static void alarm_timer_arm(struct k_itimer *, ktime_t, bool, bool);
700:	static int alarm_timer_create(struct k_itimer *);
580:	static s64 alarm_timer_forward(struct k_itimer *, ktime_t);
813:	static int alarm_timer_nsleep(const clockid_t, int, const struct timespec64 *);
793:	static long alarm_timer_nsleep_restart(struct restart_block *);
567:	static void alarm_timer_rearm(struct k_itimer *);
592:	static ktime_t alarm_timer_remaining(struct k_itimer *, ktime_t);
603:	static int alarm_timer_try_to_cancel(struct k_itimer *);
616:	static void alarm_timer_wait_running(struct k_itimer *);
739:	static int alarmtimer_do_nsleep(struct alarm *, ktime_t, enum alarmtimer_type);
197:	static enum hrtimer_restart alarmtimer_fired(struct hrtimer *);
901:	static int alarmtimer_init(void);
721:	static enum alarmtimer_restart alarmtimer_nsleep_wakeup(struct alarm *, ktime_t);
303:	static int alarmtimer_resume(struct device *);
84:	static int alarmtimer_rtc_add_device(struct device *, struct class_interface *);
242:	static int alarmtimer_suspend(struct device *);
889:	static void get_boottime_timespec(struct timespec64 *);

File kernel/time/clockevents.c:
516:	int __clockevents_update_freq(struct clock_event_device *, u32);
85:	u64 clockevent_delta2ns(unsigned long, struct clock_event_device *);
505:	void clockevents_config_and_register(struct clock_event_device *, u32, unsigned long, unsigned long);
569:	void clockevents_exchange_device(struct clock_event_device *, struct clock_event_device *);
557:	void clockevents_handle_noop(struct clock_event_device *);
303:	int clockevents_program_event(struct clock_event_device *, ktime_t, bool);
444:	void clockevents_register_device(struct clock_event_device *);
604:	void clockevents_resume(void);
171:	void clockevents_shutdown(struct clock_event_device *);
592:	void clockevents_suspend(void);
147:	void clockevents_switch_state(struct clock_event_device *, enum clock_event_state);
181:	int clockevents_tick_resume(struct clock_event_device *);
429:	int clockevents_unbind_device(struct clock_event_device *, int);
541:	int clockevents_update_freq(struct clock_event_device *, u32);
633:	void tick_cleanup_dead_cpu(int);
622:	void tick_offline_cpu(unsigned int);
91:	static int __clockevents_switch_state(struct clock_event_device *, enum clock_event_state);
387:	static int __clockevents_try_unbind(struct clock_event_device *, int);
401:	static void __clockevents_unbind(void *);
32:	static u64 cev_delta2ns(unsigned long, struct clock_event_device *, bool);
472:	static void clockevents_config(struct clock_event_device *, u32);
769:	static int clockevents_init_sysfs(void);
233:	static int clockevents_program_min_delta(struct clock_event_device *);
359:	static int clockevents_replace(struct clock_event_device *);
671:	static ssize_t sysfs_show_current_tick_dev(struct device *, struct device_attribute *, char *);
688:	static ssize_t sysfs_unbind_tick_dev(struct device *, struct device_attribute *, const char *, size_t);
748:	static int tick_init_sysfs(void);

File kernel/time/clocksource.c:
1026:	int __clocksource_register_scale(struct clocksource *, u32, u32);
959:	void __clocksource_update_freq_scale(struct clocksource *, u32, u32);
767:	u64 clocks_calc_max_nsecs(u32, u32, u32, u64, u64 *);
45:	void clocks_calc_mult_shift(u32 *, u32 *, u32, u32, u32);
1070:	void clocksource_change_rating(struct clocksource *, int);
181:	void clocksource_mark_unstable(struct clocksource *);
713:	void clocksource_resume(void);
626:	void clocksource_start_suspend_timing(struct clocksource *, u64);
664:	u64 clocksource_stop_suspend_timing(struct clocksource *, u64);
701:	void clocksource_suspend(void);
731:	void clocksource_touch_watchdog(void);
1128:	int clocksource_unregister(struct clocksource *);
1162:	ssize_t sysfs_get_uname(const char *, char *, size_t);
833:	static void __clocksource_select(bool);
152:	static void __clocksource_unstable(struct clocksource *);
499:	static int __clocksource_watchdog_kthread(void);
1250:	static ssize_t available_clocksource_show(struct device *, struct device_attribute *, char *);
1335:	static int boot_override_clock(char *);
1317:	static int boot_override_clocksource(char *);
915:	static int clocksource_done_booting(void);
933:	static void clocksource_enqueue(struct clocksource *);
450:	static void clocksource_select_watchdog(bool);
596:	static void clocksource_suspend_select(bool);
1089:	static int clocksource_unbind(struct clocksource *);
231:	static void clocksource_verify_one_cpu(void *);
238:	static void clocksource_verify_percpu(struct clocksource *);
281:	static void clocksource_watchdog(struct timer_list *);
530:	static int clocksource_watchdog_kthread(void *);
134:	static void clocksource_watchdog_work(struct work_struct *);
197:	static bool cs_watchdog_read(struct clocksource *, u64 *, u64 *);
1149:	static ssize_t current_clocksource_show(struct device *, struct device_attribute *, char *);
1189:	static ssize_t current_clocksource_store(struct device *, struct device_attribute *, const char *, size_t);
1297:	static int init_clocksource_sysfs(void);
1216:	static ssize_t unbind_clocksource_store(struct device *, struct device_attribute *, const char *, size_t);

File kernel/time/hrtimer.c:
1355:	ktime_t __hrtimer_get_remaining(const struct hrtimer *, bool);
2016:	long __ia32_sys_nanosleep(const struct pt_regs *);
2037:	long __ia32_sys_nanosleep_time32(const struct pt_regs *);
2016:	long __x64_sys_nanosleep(const struct pt_regs *);
2037:	long __x64_sys_nanosleep_time32(const struct pt_regs *);
869:	void clock_was_set(void);
889:	void clock_was_set_delayed(void);
1502:	bool hrtimer_active(const struct hrtimer *);
1336:	int hrtimer_cancel(struct hrtimer *);
935:	u64 hrtimer_forward(struct hrtimer *, ktime_t, ktime_t);
1377:	u64 hrtimer_get_next_event(void);
1487:	void hrtimer_init(struct hrtimer *, clockid_t, enum hrtimer_mode);
1905:	void hrtimer_init_sleeper(struct hrtimer_sleeper *, clockid_t, enum hrtimer_mode);
1679:	void hrtimer_interrupt(struct clock_event_device *);
1981:	long hrtimer_nanosleep(ktime_t, const enum hrtimer_mode, const clockid_t);
1400:	u64 hrtimer_next_event_without(const struct hrtimer *);
1792:	void hrtimer_run_queues(void);
1850:	void hrtimer_sleeper_start_expires(struct hrtimer_sleeper *, enum hrtimer_mode);
1178:	void hrtimer_start_range_ns(struct hrtimer *, ktime_t, u64, const enum hrtimer_mode);
1214:	int hrtimer_try_to_cancel(struct hrtimer *);
2115:	int hrtimers_dead_cpu(unsigned int);
2162:	void hrtimers_init(void);
2058:	int hrtimers_prepare_cpu(unsigned int);
900:	void hrtimers_resume(void);
327:	ktime_t ktime_add_safe(const ktime_t, const ktime_t);
1914:	int nanosleep_copyout(struct restart_block *, struct timespec64 *);
2279:	int schedule_hrtimeout(ktime_t *, const enum hrtimer_mode);
2245:	int schedule_hrtimeout_range(ktime_t *, u64, const enum hrtimer_mode);
2176:	int schedule_hrtimeout_range_clock(ktime_t *, u64, const enum hrtimer_mode, clockid_t);
569:	static ktime_t __hrtimer_get_next_event(struct hrtimer_cpu_base *, unsigned int);
1439:	static void __hrtimer_init(struct hrtimer *, clockid_t, enum hrtimer_mode);
502:	static ktime_t __hrtimer_next_event_base(struct hrtimer_cpu_base *, const struct hrtimer *, unsigned int, ktime_t);
1615:	static void __hrtimer_run_queues(struct hrtimer_cpu_base *, ktime_t, unsigned long, unsigned int);
1110:	static int __hrtimer_start_range_ns(struct hrtimer *, ktime_t, u64, const enum hrtimer_mode, struct hrtimer_clock_base *);
1002:	static void __remove_hrtimer(struct hrtimer *, struct hrtimer_clock_base *, u8, int);
1540:	static void __run_hrtimer(struct hrtimer_cpu_base *, struct hrtimer_clock_base *, struct hrtimer *, ktime_t *, unsigned long);
2016:	static long __se_sys_nanosleep(long, long);
2037:	static long __se_sys_nanosleep_time32(long, long);
878:	static void clock_was_set_work(struct work_struct *);
1933:	static int do_nanosleep(struct hrtimer_sleeper *, enum hrtimer_mode);
978:	static int enqueue_hrtimer(struct hrtimer *, struct hrtimer_clock_base *, enum hrtimer_mode);
661:	static void hrtimer_force_reprogram(struct hrtimer_cpu_base *, int);
1968:	static long hrtimer_nanosleep_restart(struct restart_block *);
776:	static void hrtimer_reprogram(struct hrtimer *, bool);
1654:	static void hrtimer_run_softirq(struct softirq_action *);
1829:	static enum hrtimer_restart hrtimer_wakeup(struct hrtimer *);
2085:	static void migrate_hrtimer_list(struct hrtimer_clock_base *, struct hrtimer_clock_base *);
728:	static void retrigger_next_event(void *);
708:	static int setup_hrtimer_hres(char *);

File kernel/time/itimer.c:
141:	long __ia32_compat_sys_getitimer(const struct pt_regs *);
378:	long __ia32_compat_sys_setitimer(const struct pt_regs *);
306:	long __ia32_sys_alarm(const struct pt_regs *);
113:	long __ia32_sys_getitimer(const struct pt_regs *);
332:	long __ia32_sys_setitimer(const struct pt_regs *);
306:	long __x64_sys_alarm(const struct pt_regs *);
113:	long __x64_sys_getitimer(const struct pt_regs *);
332:	long __x64_sys_setitimer(const struct pt_regs *);
253:	void clear_itimer(void);
156:	enum hrtimer_restart it_real_fn(struct hrtimer *);
332:	static long __se_sys_setitimer(long, long, long);
76:	static int do_getitimer(int, struct itimerspec64 *);
206:	static int do_setitimer(int, struct itimerspec64 *, struct itimerspec64 *);
47:	static void get_cpu_itimer(struct task_struct *, unsigned int, struct itimerspec64 * const);
168:	static void set_cpu_itimer(struct task_struct *, unsigned int, const struct itimerspec64 * const, struct itimerspec64 * const);

File kernel/time/jiffies.c:
88:	struct clocksource *clocksource_default_clock(void);
95:	int register_refined_jiffies(long);
81:	static int init_jiffies_clocksource(void);
35:	static u64 jiffies_read(struct clocksource *);

File kernel/time/namespace.c:
133:	struct time_namespace *copy_time_ns(unsigned long, struct user_namespace *, struct time_namespace *);
23:	ktime_t do_timens_ktime_to_host(clockid_t, ktime_t, struct timens_offsets *);
229:	void free_time_ns(struct kref *);
367:	int proc_timens_set_offset(struct file *, struct task_struct *, struct proc_timens_offset *, int);
352:	void proc_timens_show_offsets(struct task_struct *, struct seq_file *);
283:	void timens_commit(struct task_struct *, struct time_namespace *);
311:	int timens_on_fork(struct nsproxy *, struct task_struct *);
78:	static struct time_namespace *clone_time_ns(struct user_namespace *, struct time_namespace *);
474:	static int time_ns_init(void);
262:	static struct ns_common *timens_for_children_get(struct task_struct *);
246:	static struct ns_common *timens_get(struct task_struct *);
289:	static int timens_install(struct nsset *, struct ns_common *);
329:	static struct user_namespace *timens_owner(struct ns_common *);
278:	static void timens_put(struct ns_common *);

File kernel/time/ntp.c:
716:	int __do_adjtimex(struct __kernel_timex *, const struct timespec64 *, s32 *, struct audit_ntp_data *);
351:	void ntp_clear(void);
380:	ktime_t ntp_get_next_leap(void);
1046:	void ntp_init(void);
625:	void ntp_notify_cmos_timer(void);
369:	u64 ntp_tick_length(void);
400:	int second_overflow(time64_t);
559:	int update_persistent_clock64(struct timespec64);
1034:	static int ntp_tick_adj_setup(char *);
259:	static void ntp_update_frequency(void);
296:	static void ntp_update_offset(long);
565:	static bool sync_cmos_clock(void);
614:	static void sync_hw_clock(struct work_struct *);

File kernel/time/posix-clock.c:
162:	int posix_clock_register(struct posix_clock *, struct device *);
182:	void posix_clock_unregister(struct posix_clock *);
199:	static int get_clock_desc(const clockid_t, struct posix_clock_desc *);
226:	static int pc_clock_adjtime(clockid_t, struct __kernel_timex *);
269:	static int pc_clock_getres(clockid_t, struct timespec64 *);
250:	static int pc_clock_gettime(clockid_t, struct timespec64 *);
288:	static int pc_clock_settime(clockid_t, const struct timespec64 *);
72:	static long posix_clock_ioctl(struct file *, unsigned int, unsigned long);
108:	static int posix_clock_open(struct inode *, struct file *);
56:	static __poll_t posix_clock_poll(struct file *, poll_table *);
39:	static ssize_t posix_clock_read(struct file *, char *, size_t, loff_t *);
134:	static int posix_clock_release(struct inode *, struct file *);

File kernel/time/posix-cpu-timers.c:
1106:	void clear_posix_cputimers_work(struct task_struct *);
486:	void posix_cpu_timers_exit(struct task_struct *);
490:	void posix_cpu_timers_exit_group(struct task_struct *);
23:	void posix_cputimers_group_init(struct posix_cputimers *, u64);
1123:	void posix_cputimers_init_work(void);
1311:	void run_posix_cpu_timers(void);
1338:	void set_process_cpu_timer(struct task_struct *, unsigned int, u64 *, u64 *);
267:	void thread_group_sample_cputime(struct task_struct *, u64 *);
38:	void update_rlimit_cpu(struct task_struct *, unsigned long);
499:	static void arm_timer(struct k_itimer *, struct task_struct *);
115:	static u64 bump_cpu_timer(struct k_itimer *, u64);
881:	static void check_cpu_itimer(struct task_struct *, struct cpu_itimer *, u64 *, u64, int);
908:	static void check_process_timers(struct task_struct *, struct list_head *);
831:	static void check_thread_timers(struct task_struct *, struct list_head *);
792:	static void collect_posix_cputimers(struct posix_cputimers *, u64 *, struct list_head *);
187:	static u64 cpu_clock_sample(const clockid_t, struct task_struct *);
331:	static u64 cpu_clock_sample_group(const clockid_t, struct task_struct *, bool);
532:	static void cpu_timer_fire(struct k_itimer *);
1379:	static int do_cpu_nanosleep(const clockid_t, int, const struct timespec64 *);
1206:	static void handle_posix_cpu_timers(struct task_struct *);
50:	static struct pid *pid_for_clock(const clockid_t, bool);
350:	static int posix_cpu_clock_get(const clockid_t, struct timespec64 *);
153:	static int posix_cpu_clock_getres(const clockid_t, struct timespec64 *);
173:	static int posix_cpu_clock_set(const clockid_t, const struct timespec64 *);
1477:	static int posix_cpu_nsleep(const clockid_t, int, const struct timespec64 *);
1504:	static long posix_cpu_nsleep_restart(struct restart_block *);
378:	static int posix_cpu_timer_create(struct k_itimer *);
414:	static int posix_cpu_timer_del(struct k_itimer *);
724:	static void posix_cpu_timer_get(struct k_itimer *, struct itimerspec64 *);
981:	static void posix_cpu_timer_rearm(struct k_itimer *);
572:	static int posix_cpu_timer_set(struct k_itimer *, int, struct itimerspec64 *, struct itimerspec64 *);
1098:	static void posix_cpu_timers_work(struct callback_head *);
1522:	static int process_cpu_clock_get(const clockid_t, struct timespec64 *);
1517:	static int process_cpu_clock_getres(const clockid_t, struct timespec64 *);
1532:	static int process_cpu_nsleep(const clockid_t, int, const struct timespec64 *);
1527:	static int process_cpu_timer_create(struct k_itimer *);
1542:	static int thread_cpu_clock_get(const clockid_t, struct timespec64 *);
1537:	static int thread_cpu_clock_getres(const clockid_t, struct timespec64 *);
1547:	static int thread_cpu_timer_create(struct k_itimer *);
248:	static void update_gt_cputime(struct task_cputime_atomic *, struct task_cputime *);

File kernel/time/posix-timers.c:
592:	long __ia32_compat_sys_timer_create(const struct pt_regs *);
1112:	long __ia32_sys_clock_adjtime(const struct pt_regs *);
1182:	long __ia32_sys_clock_adjtime32(const struct pt_regs *);
1129:	long __ia32_sys_clock_getres(const struct pt_regs *);
1200:	long __ia32_sys_clock_getres_time32(const struct pt_regs *);
1082:	long __ia32_sys_clock_gettime(const struct pt_regs *);
1164:	long __ia32_sys_clock_gettime32(const struct pt_regs *);
1245:	long __ia32_sys_clock_nanosleep(const struct pt_regs *);
1272:	long __ia32_sys_clock_nanosleep_time32(const struct pt_regs *);
1067:	long __ia32_sys_clock_settime(const struct pt_regs *);
1149:	long __ia32_sys_clock_settime32(const struct pt_regs *);
577:	long __ia32_sys_timer_create(const struct pt_regs *);
1004:	long __ia32_sys_timer_delete(const struct pt_regs *);
777:	long __ia32_sys_timer_getoverrun(const struct pt_regs *);
738:	long __ia32_sys_timer_gettime(const struct pt_regs *);
753:	long __ia32_sys_timer_gettime32(const struct pt_regs *);
938:	long __ia32_sys_timer_settime(const struct pt_regs *);
961:	long __ia32_sys_timer_settime32(const struct pt_regs *);
1112:	long __x64_sys_clock_adjtime(const struct pt_regs *);
1182:	long __x64_sys_clock_adjtime32(const struct pt_regs *);
1129:	long __x64_sys_clock_getres(const struct pt_regs *);
1200:	long __x64_sys_clock_getres_time32(const struct pt_regs *);
1082:	long __x64_sys_clock_gettime(const struct pt_regs *);
1164:	long __x64_sys_clock_gettime32(const struct pt_regs *);
1245:	long __x64_sys_clock_nanosleep(const struct pt_regs *);
1272:	long __x64_sys_clock_nanosleep_time32(const struct pt_regs *);
1067:	long __x64_sys_clock_settime(const struct pt_regs *);
1149:	long __x64_sys_clock_settime32(const struct pt_regs *);
577:	long __x64_sys_timer_create(const struct pt_regs *);
1004:	long __x64_sys_timer_delete(const struct pt_regs *);
777:	long __x64_sys_timer_getoverrun(const struct pt_regs *);
738:	long __x64_sys_timer_gettime(const struct pt_regs *);
753:	long __x64_sys_timer_gettime32(const struct pt_regs *);
938:	long __x64_sys_timer_settime(const struct pt_regs *);
961:	long __x64_sys_timer_settime32(const struct pt_regs *);
983:	int common_timer_del(struct k_itimer *);
670:	void common_timer_get(struct k_itimer *, struct itimerspec64 *);
858:	int common_timer_set(struct k_itimer *, int, struct itimerspec64 *, struct itimerspec64 *);
1100:	int do_clock_adjtime(const clockid_t, struct __kernel_timex *);
1057:	void exit_itimers(struct signal_struct *);
336:	int posix_timer_event(struct k_itimer *, int);
313:	void posixtimer_rearm(struct kernel_siginfo *);
614:	static struct k_itimer *__lock_timer(timer_t, unsigned long *);
1112:	static long __se_sys_clock_adjtime(long, long);
1182:	static long __se_sys_clock_adjtime32(long, long);
1129:	static long __se_sys_clock_getres(long, long);
1200:	static long __se_sys_clock_getres_time32(long, long);
1082:	static long __se_sys_clock_gettime(long, long);
1164:	static long __se_sys_clock_gettime32(long, long);
1245:	static long __se_sys_clock_nanosleep(long, long, long, long);
1272:	static long __se_sys_clock_nanosleep_time32(long, long, long, long);
1067:	static long __se_sys_clock_settime(long, long);
1149:	static long __se_sys_clock_settime32(long, long);
1004:	static long __se_sys_timer_delete(long);
938:	static long __se_sys_timer_settime(long, long, long, long);
961:	static long __se_sys_timer_settime32(long, long, long, long);
793:	static void common_hrtimer_arm(struct k_itimer *, ktime_t, bool, bool);
647:	static s64 common_hrtimer_forward(struct k_itimer *, ktime_t);
293:	static void common_hrtimer_rearm(struct k_itimer *);
640:	static ktime_t common_hrtimer_remaining(struct k_itimer *, ktime_t);
823:	static int common_hrtimer_try_to_cancel(struct k_itimer *);
1222:	static int common_nsleep(const clockid_t, int, const struct timespec64 *);
1232:	static int common_nsleep_timens(const clockid_t, int, const struct timespec64 *);
491:	static int common_timer_create(struct k_itimer *);
828:	static void common_timer_wait_running(struct k_itimer *);
498:	static int do_timer_create(clockid_t, struct sigevent *, timer_t *);
715:	static int do_timer_gettime(timer_t, struct itimerspec64 *);
898:	static int do_timer_settime(timer_t, int, struct itimerspec64 *, struct itimerspec64 *);
273:	static int init_posix_timers(void);
1038:	static void itimer_delete(struct k_itimer *);
469:	static void k_itimer_rcu_free(struct callback_head *);
188:	static int posix_clock_realtime_adj(const clockid_t, struct __kernel_timex *);
182:	static int posix_clock_realtime_set(const clockid_t, const struct timespec64 *);
247:	static ktime_t posix_get_boottime_ktime(const clockid_t);
240:	static int posix_get_boottime_timespec(const clockid_t, struct timespec64 *);
234:	static int posix_get_coarse_res(const clockid_t, struct timespec64 *);
263:	static int posix_get_hrtimer_res(clockid_t, struct timespec64 *);
226:	static int posix_get_monotonic_coarse(clockid_t, struct timespec64 *);
204:	static ktime_t posix_get_monotonic_ktime(clockid_t);
212:	static int posix_get_monotonic_raw(clockid_t, struct timespec64 *);
197:	static int posix_get_monotonic_timespec(clockid_t, struct timespec64 *);
220:	static int posix_get_realtime_coarse(clockid_t, struct timespec64 *);
176:	static ktime_t posix_get_realtime_ktime(clockid_t);
170:	static int posix_get_realtime_timespec(clockid_t, struct timespec64 *);
258:	static ktime_t posix_get_tai_ktime(clockid_t);
252:	static int posix_get_tai_timespec(clockid_t, struct timespec64 *);
140:	static int posix_timer_add(struct k_itimer *);
366:	static enum hrtimer_restart posix_timer_fn(struct hrtimer *);
478:	static void release_posix_timer(struct k_itimer *, int);
839:	static struct k_itimer *timer_wait_running(struct k_itimer *, unsigned long *);

File kernel/time/tick-broadcast-hrtimer.c:
106:	void tick_setup_hrtimer_broadcast(void);
99:	static enum hrtimer_restart bc_handler(struct hrtimer *);
43:	static int bc_set_next(ktime_t, struct clock_event_device *);
20:	static int bc_shutdown(struct clock_event_device *);

File kernel/time/tick-broadcast.c:
710:	int __tick_broadcast_oneshot_control(enum tick_broadcast_state);
945:	void hotplug_cpu__broadcast_tick_pull(int);
356:	void tick_broadcast_control(enum tick_broadcast_mode);
1005:	void tick_broadcast_init(void);
455:	void tick_broadcast_offline(unsigned int);
978:	int tick_broadcast_oneshot_active(void);
986:	bool tick_broadcast_oneshot_available(void);
929:	void tick_broadcast_switch_to_oneshot(void);
130:	int tick_broadcast_update_freq(struct clock_event_device *, u32);
544:	int tick_check_broadcast_expired(void);
584:	void tick_check_oneshot_broadcast_this_cpu(void);
163:	int tick_device_uses_broadcast(struct clock_event_device *, int);
54:	struct tick_device *tick_get_broadcast_device(void);
59:	struct cpumask *tick_get_broadcast_mask(void);
532:	struct cpumask *tick_get_broadcast_oneshot_mask(void);
94:	void tick_install_broadcast_device(struct clock_event_device *);
125:	int tick_is_broadcast_device(struct clock_event_device *);
245:	int tick_receive_broadcast(void);
497:	void tick_resume_broadcast(void);
489:	bool tick_resume_check_broadcast(void);
433:	void tick_set_periodic_handler(struct clock_event_device *, int);
467:	void tick_suspend_broadcast(void);
143:	static void err_broadcast(const struct cpumask *);
861:	static void tick_broadcast_clear_oneshot(int);
565:	static void tick_broadcast_set_event(struct clock_event_device *, int, ktime_t);
883:	static void tick_broadcast_setup_oneshot(struct clock_event_device *);
264:	static bool tick_do_broadcast(struct cpumask *);
604:	static void tick_handle_oneshot_broadcast(struct clock_event_device *);
318:	static void tick_handle_periodic_broadcast(struct clock_event_device *);

File kernel/time/tick-common.c:
395:	int tick_broadcast_oneshot_control(enum tick_broadcast_state);
341:	void tick_check_new_device(struct clock_event_device *);
328:	bool tick_check_replacement(struct clock_event_device *, struct clock_event_device *);
526:	void tick_freeze(void);
62:	struct tick_device *tick_get_device(int);
106:	void tick_handle_periodic(struct clock_event_device *);
413:	void tick_handover_do_timer(void);
577:	void tick_init(void);
277:	void tick_install_replacement(struct clock_event_device *);
70:	int tick_is_oneshot_available(void);
507:	void tick_resume(void);
470:	void tick_resume_local(void);
151:	void tick_setup_periodic(struct clock_event_device *, int);
430:	void tick_shutdown(unsigned int);
493:	void tick_suspend(void);
456:	void tick_suspend_local(void);
553:	void tick_unfreeze(void);
182:	static void giveup_do_timer(void *);
288:	static bool tick_check_percpu(struct clock_event_device *, struct clock_event_device *, int);
304:	static bool tick_check_preferred(struct clock_event_device *, struct clock_event_device *);
84:	static void tick_periodic(int);
204:	static void tick_setup_device(struct tick_device *, struct clock_event_device *, int, const struct cpumask *);

File kernel/time/tick-oneshot.c:
124:	int tick_init_highres(void);
106:	int tick_oneshot_mode_active(void);
23:	int tick_program_event(ktime_t, int);
50:	void tick_resume_oneshot(void);
61:	void tick_setup_oneshot(struct clock_event_device *, void (*)(struct clock_event_device *), ktime_t);
73:	int tick_switch_to_oneshot(void (*)(struct clock_event_device *));

File kernel/time/tick-sched.c:
468:	void __tick_nohz_task_switch(void);
654:	u64 get_cpu_idle_time_us(int, u64 *);
695:	u64 get_cpu_iowait_time_us(int, u64 *);
1451:	void tick_cancel_sched_timer(int);
1493:	int tick_check_oneshot_change(int);
1467:	void tick_clock_notify(void);
41:	struct tick_sched *tick_get_tick_sched(int);
1368:	void tick_irq_enter(void);
381:	void tick_nohz_dep_clear(enum tick_dep_bits);
413:	void tick_nohz_dep_clear_cpu(int, enum tick_dep_bits);
458:	void tick_nohz_dep_clear_signal(struct signal_struct *, enum tick_dep_bits);
432:	void tick_nohz_dep_clear_task(struct task_struct *, enum tick_dep_bits);
376:	void tick_nohz_dep_set(enum tick_dep_bits);
390:	void tick_nohz_dep_set_cpu(int, enum tick_dep_bits);
442:	void tick_nohz_dep_set_signal(struct task_struct *, enum tick_dep_bits);
425:	void tick_nohz_dep_set_task(struct task_struct *, enum tick_dep_bits);
297:	void tick_nohz_full_kick_cpu(int);
485:	void tick_nohz_full_setup(cpumask_var_t);
1199:	unsigned long tick_nohz_get_idle_calls(void);
1187:	unsigned long tick_nohz_get_idle_calls_cpu(int);
1137:	ktime_t tick_nohz_get_next_hrtimer(void);
1148:	ktime_t tick_nohz_get_sleep_length(ktime_t *);
1080:	void tick_nohz_idle_enter(void);
1256:	void tick_nohz_idle_exit(void);
1119:	bool tick_nohz_idle_got_tick(void);
1228:	void tick_nohz_idle_restart_tick(void);
1065:	void tick_nohz_idle_retain_tick(void);
1060:	void tick_nohz_idle_stop_tick(void);
505:	void tick_nohz_init(void);
1106:	void tick_nohz_irq_exit(void);
566:	bool tick_nohz_tick_stopped(void);
573:	bool tick_nohz_tick_stopped_cpu(int);
1478:	void tick_oneshot_notify(void);
1422:	void tick_setup_sched_timer(void);
942:	static void __tick_nohz_full_update_tick(struct tick_sched *, ktime_t);
966:	static bool can_stop_idle_tick(int, struct tick_sched *);
215:	static bool check_tick_dependency(atomic_t *);
269:	static void nohz_full_kick_func(struct irq_work *);
559:	static int setup_tick_nohz(char *);
1411:	static int skew_tick(char *);
55:	static void tick_do_update_jiffies64(ktime_t);
135:	static ktime_t tick_init_jiffy_update(void);
1206:	static void tick_nohz_account_idle_time(struct tick_sched *, ktime_t);
493:	static int tick_nohz_cpu_down(unsigned int);
285:	static void tick_nohz_full_kick(void);
955:	static void tick_nohz_full_update_tick(struct tick_sched *);
1286:	static void tick_nohz_handler(struct clock_event_device *);
1239:	static void tick_nohz_idle_update_tick(struct tick_sched *, ktime_t);
305:	static void tick_nohz_kick_task(struct task_struct *);
748:	static ktime_t tick_nohz_next_event(struct tick_sched *, int);
922:	static void tick_nohz_restart_sched_tick(struct tick_sched *, ktime_t);
833:	static void tick_nohz_stop_tick(struct tick_sched *, int);
1318:	static void tick_nohz_switch_to_nohz(void);
150:	static void tick_sched_do_timer(struct tick_sched *, ktime_t);
181:	static void tick_sched_handle(struct tick_sched *, struct pt_regs *);
1382:	static enum hrtimer_restart tick_sched_timer(struct hrtimer *);

File kernel/time/time.c:
224:	long __ia32_compat_sys_gettimeofday(const struct pt_regs *);
243:	long __ia32_compat_sys_settimeofday(const struct pt_regs *);
269:	long __ia32_sys_adjtimex(const struct pt_regs *);
349:	long __ia32_sys_adjtimex_time32(const struct pt_regs *);
140:	long __ia32_sys_gettimeofday(const struct pt_regs *);
199:	long __ia32_sys_settimeofday(const struct pt_regs *);
81:	long __ia32_sys_stime(const struct pt_regs *);
119:	long __ia32_sys_stime32(const struct pt_regs *);
62:	long __ia32_sys_time(const struct pt_regs *);
105:	long __ia32_sys_time32(const struct pt_regs *);
552:	unsigned long __msecs_to_jiffies(const unsigned int);
563:	unsigned long __usecs_to_jiffies(const unsigned int);
269:	long __x64_sys_adjtimex(const struct pt_regs *);
349:	long __x64_sys_adjtimex_time32(const struct pt_regs *);
140:	long __x64_sys_gettimeofday(const struct pt_regs *);
199:	long __x64_sys_settimeofday(const struct pt_regs *);
81:	long __x64_sys_stime(const struct pt_regs *);
119:	long __x64_sys_stime32(const struct pt_regs *);
62:	long __x64_sys_time(const struct pt_regs *);
105:	long __x64_sys_time32(const struct pt_regs *);
635:	unsigned long clock_t_to_jiffies(unsigned long);
169:	int do_sys_settimeofday64(const struct timespec64 *, const struct timezone *);
860:	int get_itimerspec64(struct itimerspec64 *, const struct __kernel_itimerspec *);
890:	int get_old_itimerspec32(struct itimerspec64 *, const struct old_itimerspec32 *);
842:	int get_old_timespec32(struct timespec64 *, const void *);
286:	int get_old_timex32(struct __kernel_timex *, const struct old_timex32 *);
781:	int get_timespec64(struct timespec64 *, const struct __kernel_timespec *);
700:	u64 jiffies64_to_msecs(const u64);
690:	u64 jiffies64_to_nsecs(u64);
652:	u64 jiffies_64_to_clock_t(u64);
621:	clock_t jiffies_to_clock_t(unsigned long);
374:	unsigned int jiffies_to_msecs(const unsigned long);
605:	void jiffies_to_timespec64(const unsigned long, struct timespec64 *);
391:	unsigned int jiffies_to_usecs(const unsigned long);
431:	time64_t mktime64(const unsigned int, const unsigned int, const unsigned int, const unsigned int, const unsigned int, const unsigned int);
452:	struct __kernel_old_timeval ns_to_kernel_old_timeval(const s64);
506:	struct timespec64 ns_to_timespec64(const s64);
674:	u64 nsec_to_clock_t(u64);
723:	u64 nsecs_to_jiffies64(u64);
875:	int put_itimerspec64(const struct itimerspec64 *, struct __kernel_itimerspec *);
901:	int put_old_itimerspec32(const struct itimerspec64 *, struct old_itimerspec32 *);
851:	int put_old_timespec32(const struct timespec64 *, void *);
318:	int put_old_timex32(struct old_timex32 *, const struct __kernel_timex *);
804:	int put_timespec64(const struct timespec64 *, struct __kernel_timespec *);
478:	void set_normalized_timespec64(struct timespec64 *, time64_t, s64);
765:	struct timespec64 timespec64_add_safe(const struct timespec64, const struct timespec64);
588:	unsigned long timespec64_to_jiffies(const struct timespec64 *);
269:	static long __se_sys_adjtimex(long);
349:	static long __se_sys_adjtimex_time32(long);
199:	static long __se_sys_settimeofday(long, long);

File kernel/time/timeconv.c:
78:	void time64_to_tm(time64_t, int, struct tm *);

File kernel/time/timecounter.c:
79:	u64 timecounter_cyc2time(struct timecounter *, u64);
8:	void timecounter_init(struct timecounter *, const struct cyclecounter *, u64);
52:	u64 timecounter_read(struct timecounter *);

File kernel/time/timekeeping.c:
1030:	time64_t __ktime_get_real_seconds(void);
2385:	int do_adjtimex(struct __kernel_timex *);
1297:	int do_settimeofday64(const struct timespec64 *);
2266:	void do_timer(unsigned long);
1190:	int get_device_system_crosststamp(int (*)(ktime_t *, struct system_counterval_t *, void *), void *, struct system_time_snapshot *, struct system_device_crosststamp *);
2223:	void getboottime64(struct timespec64 *);
821:	ktime_t ktime_get(void);
525:	u64 ktime_get_boot_fast_ns(void);
2232:	void ktime_get_coarse_real_ts64(struct timespec64 *);
2245:	void ktime_get_coarse_ts64(struct timespec64 *);
885:	ktime_t ktime_get_coarse_with_offset(enum tk_offsets);
613:	void ktime_get_fast_timestamps(struct ktime_timestamps *);
492:	u64 ktime_get_mono_fast_ns(void);
928:	ktime_t ktime_get_raw(void);
498:	u64 ktime_get_raw_fast_ns(void);
1491:	void ktime_get_raw_ts64(struct timespec64 *);
561:	u64 ktime_get_real_fast_ns(void);
1006:	time64_t ktime_get_real_seconds(void);
800:	void ktime_get_real_ts64(struct timespec64 *);
841:	u32 ktime_get_resolution_ns(void);
986:	time64_t ktime_get_seconds(void);
1041:	void ktime_get_snapshot(struct system_time_snapshot *);
954:	void ktime_get_ts64(struct timespec64 *);
2285:	ktime_t ktime_get_update_offsets_now(unsigned int *, ktime_t *, ktime_t *, ktime_t *);
864:	ktime_t ktime_get_with_offset(enum tk_offsets);
910:	ktime_t ktime_mono_to_any(ktime_t, enum tk_offsets);
658:	int pvclock_gtod_register_notifier(struct notifier_block *);
677:	int pvclock_gtod_unregister_notifier(struct notifier_block *);
1557:	void read_persistent_clock64(struct timespec64 *);
1576:	void read_persistent_wall_and_boot_offset(struct timespec64 *, struct timespec64 *);
1604:	void timekeeping_init(void);
1721:	void timekeeping_inject_sleeptime64(const struct timespec64 *);
1532:	u64 timekeeping_max_deferment(void);
1474:	int timekeeping_notify(struct clocksource *);
1748:	void timekeeping_resume(void);
1691:	bool timekeeping_rtc_skipresume(void);
1705:	bool timekeeping_rtc_skipsuspend(void);
1808:	int timekeeping_suspend(void);
1513:	int timekeeping_valid_for_hres(void);
1405:	void timekeeping_warp_clock(void);
2207:	void update_wall_time(void);
2470:	void xtime_update(unsigned long);
1659:	static void __timekeeping_inject_sleeptime(const struct timespec64 *, struct timekeeper *);
1432:	static int change_clocksource(void *);
77:	static u64 dummy_clock_read(struct clocksource *);
631:	static void halt_fast_timekeeper(const struct timekeeper *);
2082:	static u64 logarithmic_accumulation(u64, u32, unsigned int *, struct timekeeper *);
1072:	static int scale64_check_overflow(u64, u64, u64 *);
1971:	static void timekeeping_adjust(s64, struct timekeeper *);
2120:	static void timekeeping_advance(enum timekeeping_adv_mode);
771:	static void timekeeping_forward_now(struct timekeeper *);
1883:	static int timekeeping_init_ops(void);
1345:	static int timekeeping_inject_offset(const struct timespec64 *);
735:	static void timekeeping_update(struct timekeeper *, unsigned int);
149:	static void tk_set_wall_to_mono(struct timekeeper *, struct timespec64);
307:	static void tk_setup_internals(struct clocksource *, struct timekeeper *);
142:	static void tk_xtime_add(const struct timespec64 *, struct timekeeper *);
421:	static void update_fast_timekeeper(const struct tk_read_base *, struct tk_fast *);

File kernel/time/timekeeping_debug.c:
46:	void tk_debug_account_sleep_time(const struct timespec64 *);
38:	static int tk_debug_sleep_time_init(void);
36:	static int tk_debug_sleep_time_open(struct inode *, struct file *);
22:	static int tk_debug_sleep_time_show(struct seq_file *, void *);

File kernel/time/timer.c:
335:	unsigned long __round_jiffies(unsigned long, int);
361:	unsigned long __round_jiffies_relative(unsigned long, int);
422:	unsigned long __round_jiffies_up(unsigned long, int);
438:	unsigned long __round_jiffies_up_relative(unsigned long, int);
1141:	void add_timer(struct timer_list *);
1155:	void add_timer_on(struct timer_list *, int);
1198:	int del_timer(struct timer_list *);
1352:	int del_timer_sync(struct timer_list *);
1629:	u64 get_next_timer_interrupt(unsigned long, u64);
812:	void init_timer_key(struct timer_list *, void (*)(struct timer_list *), unsigned int, const char *, struct lock_class_key *);
2013:	void init_timers(void);
1106:	int mod_timer(struct timer_list *, unsigned long);
1080:	int mod_timer_pending(struct timer_list *, unsigned long);
2024:	void msleep(unsigned int);
2038:	unsigned long msleep_interruptible(unsigned int);
385:	unsigned long round_jiffies(unsigned long);
406:	unsigned long round_jiffies_relative(unsigned long);
456:	unsigned long round_jiffies_up(unsigned long);
471:	unsigned long round_jiffies_up_relative(unsigned long);
1771:	void run_local_timers(void);
1835:	long schedule_timeout(long);
1916:	long schedule_timeout_idle(long);
1891:	long schedule_timeout_interruptible(long);
1898:	long schedule_timeout_killable(long);
1905:	long schedule_timeout_uninterruptible(long);
1685:	void timer_clear_idle(void);
254:	int timer_migration_handler(struct ctl_table *, int, void *, size_t *, loff_t *);
1121:	int timer_reduce(struct timer_list *, unsigned long);
1952:	int timers_dead_cpu(unsigned int);
1937:	int timers_prepare_cpu(unsigned int);
249:	void timers_update_nohz(void);
1223:	int try_to_del_timer_sync(struct timer_list *);
1703:	void update_process_times(int);
2061:	void usleep_range_state(unsigned long, unsigned long, unsigned int);
1515:	static unsigned long __next_timer_interrupt(struct timer_base *);
510:	static int calc_wheel_index(unsigned long, unsigned long, unsigned long *);
1388:	static void call_timer_fn(struct timer_list *, void (*)(struct timer_list *), unsigned long);
1467:	static int collect_expired_timers(struct timer_base *, struct hlist_head *);
833:	static int detach_if_pending(struct timer_list *, struct timer_base *, bool);
578:	static void enqueue_timer(struct timer_base *, struct timer_list *, unsigned int, unsigned long);
1432:	static void expire_timers(struct timer_base *, struct hlist_head *);
929:	static struct timer_base *lock_timer_base(struct timer_list *, unsigned long *);
1924:	static void migrate_timer_list(struct timer_base *, struct hlist_head *);
1797:	static void process_timeout(struct timer_list *);
1759:	static void run_timer_softirq(struct softirq_action *);
241:	static void timer_update_keys(struct work_struct *);

File kernel/time/timer_list.c:
285:	void sysrq_timer_list_show(void);
31:	static void SEQ_printf(struct seq_file *, const char *, ...);
373:	static int init_timer_list_procfs(void);
73:	static void print_active_timers(struct seq_file *, struct hrtimer_clock_base *, u64);
112:	static void print_base(struct seq_file *, struct hrtimer_clock_base *, u64);
130:	static void print_cpu(struct seq_file *, int, u64);
45:	static void print_name_offset(struct seq_file *, void *);
193:	static void print_tickdevice(struct seq_file *, struct tick_device *, int);
355:	static void *timer_list_next(struct seq_file *, void *, loff_t *);
308:	static int timer_list_show(struct seq_file *, void *);
262:	static void timer_list_show_tickdevices_header(struct seq_file *);
344:	static void *timer_list_start(struct seq_file *, loff_t *);
362:	static void timer_list_stop(struct seq_file *, void *);

File kernel/time/vsyscall.c:
72:	void update_vsyscall(struct timekeeper *);
131:	void update_vsyscall_tz(void);
153:	unsigned long vdso_update_begin(void);
171:	void vdso_update_end(unsigned long);

File kernel/trace/./bpf_trace.h:
11:	int __traceiter_bpf_trace_printk(void *, const char *);
11:	static void __bpf_trace_bpf_trace_printk(void *, const char *);
11:	static void perf_trace_bpf_trace_printk(void *, const char *);
11:	static void trace_event_raw_event_bpf_trace_printk(void *, const char *);
11:	static enum print_line_t trace_raw_output_bpf_trace_printk(struct trace_iterator *, int, struct trace_event *);

File kernel/trace/blktrace.c:
148:	void __trace_note_message(struct blk_trace *, struct blkcg *, const char *, ...);
1127:	void blk_add_driver_data(struct request_queue *, struct request *, void *, size_t);
1968:	void blk_fill_rwbs(char *, unsigned int, int);
1954:	int blk_trace_init_sysfs(struct device *);
724:	int blk_trace_ioctl(struct block_device *, unsigned int, char *);
362:	int blk_trace_remove(struct request_queue *);
1959:	void blk_trace_remove_sysfs(struct device *);
609:	int blk_trace_setup(struct request_queue *, char *, dev_t, struct block_device *, char *);
770:	void blk_trace_shutdown(struct request_queue *);
699:	int blk_trace_startstop(struct request_queue *, int);
215:	static void __blk_add_trace(struct blk_trace *, sector_t, int, int, int, u32, int, int, void *, u64);
347:	static int __blk_trace_remove(struct request_queue *);
588:	static int __blk_trace_setup(struct request_queue *, char *, dev_t, struct block_device *, char *);
657:	static int __blk_trace_startstop(int, struct request_queue *, struct request_queue *);
897:	static void blk_add_trace_bio(struct request_queue *, struct bio *, u32, int);
928:	static void blk_add_trace_bio_backmerge(void *, struct request_queue *, struct request *, struct bio *);
915:	static void blk_add_trace_bio_bounce(void *, struct request_queue *, struct bio *);
921:	static void blk_add_trace_bio_complete(void *, struct request_queue *, struct bio *);
936:	static void blk_add_trace_bio_frontmerge(void *, struct request_queue *, struct request *, struct bio *);
944:	static void blk_add_trace_bio_queue(void *, struct request_queue *, struct bio *);
1053:	static void blk_add_trace_bio_remap(void *, struct request_queue *, struct bio *, dev_t, sector_t);
950:	static void blk_add_trace_getrq(void *, struct request_queue *, struct bio *, int);
987:	static void blk_add_trace_plug(void *, struct request_queue *);
828:	static void blk_add_trace_rq(struct request *, int, unsigned int, u32, u64);
879:	static void blk_add_trace_rq_complete(void *, struct request *, int, unsigned int);
850:	static void blk_add_trace_rq_insert(void *, struct request_queue *, struct request *);
857:	static void blk_add_trace_rq_issue(void *, struct request_queue *, struct request *);
864:	static void blk_add_trace_rq_merge(void *, struct request_queue *, struct request *);
1091:	static void blk_add_trace_rq_remap(void *, struct request_queue *, struct request *, dev_t, sector_t);
871:	static void blk_add_trace_rq_requeue(void *, struct request_queue *, struct request *);
969:	static void blk_add_trace_sleeprq(void *, struct request_queue *, struct bio *, int);
1019:	static void blk_add_trace_split(void *, struct request_queue *, struct bio *, unsigned int);
998:	static void blk_add_trace_unplug(void *, struct request_queue *, unsigned int, bool);
443:	static struct dentry *blk_create_buf_file_callback(const char *, struct dentry *, umode_t, struct rchan_buf *, int *);
374:	static ssize_t blk_dropped_read(struct file *, char *, size_t, loff_t *);
1320:	static void blk_log_action(struct trace_iterator *, const char *, bool);
1303:	static void blk_log_action_classic(struct trace_iterator *, const char *, bool);
1362:	static void blk_log_dump_pdu(struct trace_seq *, const struct trace_entry *, bool);
1401:	static void blk_log_generic(struct trace_seq *, const struct trace_entry *, bool);
1448:	static void blk_log_plug(struct trace_seq *, const struct trace_entry *, bool);
1437:	static void blk_log_remap(struct trace_seq *, const struct trace_entry *, bool);
1466:	static void blk_log_split(struct trace_seq *, const struct trace_entry *, bool);
1457:	static void blk_log_unplug(struct trace_seq *, const struct trace_entry *, bool);
1420:	static void blk_log_with_error(struct trace_seq *, const struct trace_entry *, bool);
392:	static ssize_t blk_msg_write(struct file *, const char *, size_t, loff_t *);
1147:	static void blk_register_tracepoints(void);
436:	static int blk_remove_buf_file_callback(struct dentry *);
423:	static int blk_subbuf_start_callback(struct rchan_buf *, void *, void *, size_t);
1574:	static enum print_line_t blk_trace_event_print(struct trace_iterator *, int, struct trace_event *);
1596:	static enum print_line_t blk_trace_event_print_binary(struct trace_iterator *, int, struct trace_event *);
313:	static void blk_trace_free(struct blk_trace *);
1691:	static int blk_trace_setup_queue(struct request_queue *, struct block_device *);
1776:	static int blk_trace_str2mask(const char *);
1502:	static int blk_tracer_init(struct trace_array *);
1489:	static void blk_tracer_print_header(struct seq_file *);
1604:	static enum print_line_t blk_tracer_print_line(struct trace_iterator *);
1613:	static int blk_tracer_set_flag(struct trace_array *, u32, u32, int);
1497:	static void blk_tracer_start(struct trace_array *);
1509:	static void blk_tracer_stop(struct trace_array *);
1187:	static void blk_unregister_tracepoints(void);
624:	static int compat_blk_trace_setup(struct request_queue *, char *, dev_t, struct block_device *, char *);
479:	static int do_blk_trace_setup(struct request_queue *, char *, dev_t, struct block_device *, struct blk_user_trace_setup *);
1214:	static void fill_rwbs(char *, const struct blk_io_trace *);
1647:	static int init_blk_tracer(void);
1541:	static enum print_line_t print_one_line(struct trace_iterator *, bool);
1835:	static ssize_t sysfs_blk_trace_attr_show(struct device *, struct device_attribute *, char *);
1879:	static ssize_t sysfs_blk_trace_attr_store(struct device *, struct device_attribute *, const char *, size_t);
69:	static void trace_note(struct blk_trace *, pid_t, int, const void *, size_t, u64);

File kernel/trace/bpf_trace.c:
1020:	u64 bpf_current_task_under_cgroup(u64, u64, u64, u64, u64);
1125:	u64 bpf_d_path(u64, u64, u64, u64, u64);
970:	u64 bpf_event_output(struct bpf_map *, u64, void *, u64, void *, u64, bpf_ctx_copy_t);
1009:	u64 bpf_get_current_task(u64, u64, u64, u64, u64);
2124:	int bpf_get_perf_event_info(const struct perf_event *, u32 *, u32 *, const char **, u64 *, u64 *);
2020:	struct bpf_raw_event_map *bpf_get_raw_tracepoint(const char *);
1662:	u64 bpf_get_stack_raw_tp(u64, u64, u64, u64, u64);
1434:	u64 bpf_get_stack_tp(u64, u64, u64, u64, u64);
1636:	u64 bpf_get_stackid_raw_tp(u64, u64, u64, u64, u64);
1411:	u64 bpf_get_stackid_tp(u64, u64, u64, u64, u64);
552:	const struct bpf_func_proto *bpf_get_trace_printk_proto(void);
916:	u64 bpf_perf_event_output(u64, u64, u64, u64, u64);
1606:	u64 bpf_perf_event_output_raw_tp(u64, u64, u64, u64, u64);
1387:	u64 bpf_perf_event_output_tp(u64, u64, u64, u64, u64);
826:	u64 bpf_perf_event_read(u64, u64, u64, u64, u64);
849:	u64 bpf_perf_event_read_value(u64, u64, u64, u64, u64);
1491:	u64 bpf_perf_prog_read_value(u64, u64, u64, u64, u64);
274:	u64 bpf_probe_read_compat(u64, u64, u64, u64, u64);
293:	u64 bpf_probe_read_compat_str(u64, u64, u64, u64, u64);
223:	u64 bpf_probe_read_kernel(u64, u64, u64, u64, u64);
258:	u64 bpf_probe_read_kernel_str(u64, u64, u64, u64, u64);
160:	u64 bpf_probe_read_user(u64, u64, u64, u64, u64);
197:	u64 bpf_probe_read_user_str(u64, u64, u64, u64, u64);
2114:	int bpf_probe_register(struct bpf_raw_event_map *, struct bpf_prog *);
2119:	int bpf_probe_unregister(struct bpf_raw_event_map *, struct bpf_prog *);
313:	u64 bpf_probe_write_user(u64, u64, u64, u64, u64);
1770:	int bpf_prog_test_run_tracing(struct bpf_prog *, const union bpf_attr *, union bpf_attr *);
2032:	void bpf_put_raw_tracepoint(struct bpf_raw_event_map *);
1517:	u64 bpf_read_branch_records(u64, u64, u64, u64, u64);
1101:	u64 bpf_send_signal(u64, u64, u64, u64, u64);
1113:	u64 bpf_send_signal_thread(u64, u64, u64, u64, u64);
578:	u64 bpf_seq_printf(u64, u64, u64, u64, u64);
778:	u64 bpf_seq_printf_btf(u64, u64, u64, u64, u64);
763:	u64 bpf_seq_write(u64, u64, u64, u64, u64);
1211:	u64 bpf_snprintf_btf(u64, u64, u64, u64, u64);
413:	u64 bpf_trace_printk(u64, u64, u64, u64, u64);
2083:	void bpf_trace_run1(struct bpf_prog *, u64);
2092:	void bpf_trace_run10(struct bpf_prog *, u64, u64, u64, u64, u64, u64, u64, u64, u64, u64);
2093:	void bpf_trace_run11(struct bpf_prog *, u64, u64, u64, u64, u64, u64, u64, u64, u64, u64, u64);
2094:	void bpf_trace_run12(struct bpf_prog *, u64, u64, u64, u64, u64, u64, u64, u64, u64, u64, u64, u64);
2084:	void bpf_trace_run2(struct bpf_prog *, u64, u64);
2085:	void bpf_trace_run3(struct bpf_prog *, u64, u64, u64);
2086:	void bpf_trace_run4(struct bpf_prog *, u64, u64, u64, u64);
2087:	void bpf_trace_run5(struct bpf_prog *, u64, u64, u64, u64, u64);
2088:	void bpf_trace_run6(struct bpf_prog *, u64, u64, u64, u64, u64, u64);
2089:	void bpf_trace_run7(struct bpf_prog *, u64, u64, u64, u64, u64, u64, u64);
2090:	void bpf_trace_run8(struct bpf_prog *, u64, u64, u64, u64, u64, u64, u64, u64);
2091:	void bpf_trace_run9(struct bpf_prog *, u64, u64, u64, u64, u64, u64, u64, u64, u64);
1238:	const struct bpf_func_proto *bpf_tracing_func_proto(enum bpf_func_id, const struct bpf_prog *);
1905:	int perf_event_attach_bpf_prog(struct perf_event *, struct bpf_prog *);
1947:	void perf_event_detach_bpf_prog(struct perf_event *);
1976:	int perf_event_query_prog_array(struct perf_event *, void *);
92:	unsigned int trace_call_bpf(struct trace_event_call *, void *);
1704:	const struct bpf_func_proto *tracing_prog_func_proto(enum bpf_func_id, const struct bpf_prog *);
1160:	static bool bpf_d_path_allowed(const struct bpf_prog *);
389:	static int bpf_do_trace_printk(const char *, ...);
2230:	static int bpf_event_init(void);
2186:	static int bpf_event_notify(struct notifier_block *, unsigned long, void *);
1060:	static int bpf_send_signal_common(u32, enum pid_type);
1052:	static void do_bpf_send_signal(struct irq_work *);
1340:	static const struct bpf_func_proto *kprobe_prog_func_proto(enum bpf_func_id, const struct bpf_prog *);
1359:	static bool kprobe_prog_is_valid_access(int, int, enum bpf_access_type, const struct bpf_prog *, struct bpf_insn_access_aux *);
1856:	static u32 pe_prog_convert_ctx_access(enum bpf_access_type, const struct bpf_insn *, struct bpf_insn *, struct bpf_prog *, u32 *);
1557:	static const struct bpf_func_proto *pe_prog_func_proto(enum bpf_func_id, const struct bpf_prog *);
1818:	static bool pe_prog_is_valid_access(int, int, enum bpf_access_type, const struct bpf_prog *, struct bpf_insn_access_aux *);
1689:	static const struct bpf_func_proto *raw_tp_prog_func_proto(enum bpf_func_id, const struct bpf_prog *);
1742:	static bool raw_tp_prog_is_valid_access(int, int, enum bpf_access_type, const struct bpf_prog *, struct bpf_insn_access_aux *);
1797:	static bool raw_tp_writable_prog_is_valid_access(int, int, enum bpf_access_type, const struct bpf_prog *, struct bpf_insn_access_aux *);
2171:	static int send_signal_irq_work_init(void);
1454:	static const struct bpf_func_proto *tp_prog_func_proto(enum bpf_func_id, const struct bpf_prog *);
1468:	static bool tp_prog_is_valid_access(int, int, enum bpf_access_type, const struct bpf_prog *, struct bpf_insn_access_aux *);
1756:	static bool tracing_prog_is_valid_access(int, int, enum bpf_access_type, const struct bpf_prog *, struct bpf_insn_access_aux *);

File kernel/trace/fgraph.c:
353:	int ftrace_graph_entry_stub(struct ftrace_graph_ent *);
551:	void ftrace_graph_exit_task(struct task_struct *);
270:	struct ftrace_ret_stack *ftrace_graph_get_ret_stack(struct task_struct *, int);
503:	void ftrace_graph_init_idle_task(struct task_struct *, int);
532:	void ftrace_graph_init_task(struct task_struct *);
39:	bool ftrace_graph_is_dead(void);
296:	unsigned long ftrace_graph_ret_addr(struct task_struct *, int *, unsigned long, unsigned long *);
348:	void ftrace_graph_sleep_time_control(bool);
52:	void ftrace_graph_stop(void);
232:	unsigned long ftrace_return_to_handler(unsigned long);
113:	int function_graph_enter(unsigned long, unsigned long, unsigned long, unsigned long *);
596:	int register_ftrace_graph(struct fgraph_ops *);
635:	void unregister_ftrace_graph(struct fgraph_ops *);
461:	void update_function_graph_func(void);
370:	static int alloc_retstack_tasklist(struct ftrace_ret_stack **);
447:	static int ftrace_graph_entry_test(struct ftrace_graph_ent *);
416:	static void ftrace_graph_probe_sched_switch(void *, bool, struct task_struct *, struct task_struct *);
59:	static int ftrace_push_return_trace(unsigned long, unsigned long, unsigned long *, unsigned long);
209:	static int ftrace_suspend_notifier_call(struct notifier_block *, unsigned long, void *);
563:	static int start_graph_tracing(void);

File kernel/trace/ftrace.c:
302:	int __register_ftrace_function(struct ftrace_ops *);
345:	int __unregister_ftrace_function(struct ftrace_ops *);
4357:	struct ftrace_func_mapper *allocate_ftrace_func_mapper(void);
3883:	char *arch_ftrace_match_adjust(char *, const char *);
3614:	void *arch_ftrace_trampoline_func(struct ftrace_ops *, struct dyn_ftrace *);
2754:	void arch_ftrace_update_code(int);
6897:	void arch_ftrace_update_trampoline(struct ftrace_ops *);
4793:	void clear_ftrace_function_probes(struct trace_array *);
4463:	void free_ftrace_func_mapper(struct ftrace_func_mapper *, ftrace_mapper_func);
2664:	int ftrace_arch_code_modify_prepare(void);
2021:	void ftrace_bug(int, struct dyn_ftrace *);
7202:	void ftrace_clear_pids(struct trace_array *);
6117:	void ftrace_create_filter_files(struct ftrace_ops *, struct dentry *);
6138:	void ftrace_destroy_filter_files(struct ftrace_ops *);
7602:	int ftrace_enable_sysctl(struct ctl_table *, int, void *, size_t *, loff_t *);
4927:	ssize_t ftrace_filter_write(struct file *, const char *, size_t, loff_t *);
5038:	struct ftrace_direct_func *ftrace_find_direct_func(unsigned long);
2387:	unsigned long ftrace_find_rec_direct(unsigned long);
1258:	void ftrace_free_filter(struct ftrace_ops *);
6850:	void ftrace_free_init_mem(void);
6777:	void ftrace_free_mem(struct module *, void *, void *);
4403:	int ftrace_func_mapper_add_ip(struct ftrace_func_mapper *, unsigned long, void *);
4381:	void **ftrace_func_mapper_find_ip(struct ftrace_func_mapper *, unsigned long);
4435:	void *ftrace_func_mapper_remove_ip(struct ftrace_func_mapper *, unsigned long);
2477:	unsigned long ftrace_get_addr_curr(struct dyn_ftrace *);
2436:	unsigned long ftrace_get_addr_new(struct dyn_ftrace *);
787:	void ftrace_graph_graph_time_control(bool);
6858:	void ftrace_init(void);
6965:	void ftrace_init_array_ops(struct trace_array *, ftrace_func_t);
6958:	void ftrace_init_global_array_ops(struct trace_array *);
6923:	void ftrace_init_trace_array(struct trace_array *);
7504:	void ftrace_init_tracefs(struct trace_array *, struct dentry *);
7512:	void ftrace_init_tracefs_toplevel(struct trace_array *, struct dentry *);
7539:	int ftrace_is_dead(void);
7529:	void ftrace_kill(void);
1585:	unsigned long ftrace_location(unsigned long);
1565:	unsigned long ftrace_location_range(unsigned long, unsigned long);
1142:	struct ftrace_func_entry *ftrace_lookup_ip(struct ftrace_hash *, unsigned long);
6641:	const char *ftrace_mod_address_lookup(unsigned long, unsigned long *, unsigned long *, char **, char *);
6662:	int ftrace_mod_get_kallsym(unsigned int, unsigned long *, char *, char *, char *, int *);
2678:	void ftrace_modify_all_code(int);
5282:	int ftrace_modify_direct_caller(struct ftrace_func_entry *, struct dyn_ftrace *, unsigned long, unsigned long);
6475:	void ftrace_module_enable(struct module *);
6547:	void ftrace_module_init(struct module *);
4934:	ssize_t ftrace_notrace_write(struct file *, const char *, size_t, loff_t *);
7089:	ftrace_func_t ftrace_ops_get_func(struct ftrace_ops *);
5434:	void ftrace_ops_set_global_filter(struct ftrace_ops *);
1478:	int ftrace_ops_test(struct ftrace_ops *, unsigned long, void *);
1052:	struct ftrace_ops *ftrace_ops_trampoline(unsigned long);
7149:	void ftrace_pid_follow_fork(struct trace_array *, bool);
584:	int ftrace_profile_pages_init(struct ftrace_profile_stat *);
2613:	struct ftrace_rec_iter *ftrace_rec_iter_next(struct ftrace_rec_iter *);
2638:	struct dyn_ftrace *ftrace_rec_iter_record(struct ftrace_rec_iter *);
2585:	struct ftrace_rec_iter *ftrace_rec_iter_start(void);
3763:	int ftrace_regex_open(struct ftrace_ops *, int, struct inode *, struct file *);
5625:	int ftrace_regex_release(struct inode *, struct file *);
6406:	void ftrace_release_mod(struct module *);
2544:	void ftrace_replace_code(int);
6977:	void ftrace_reset_array_ops(struct trace_array *);
2742:	void ftrace_run_stop_machine(int);
5599:	void ftrace_set_early_filter(struct ftrace_ops *, char *, int);
5461:	int ftrace_set_filter(struct ftrace_ops *, unsigned char *, int, int);
5419:	int ftrace_set_filter_ip(struct ftrace_ops *, unsigned long, int, int);
5496:	void ftrace_set_global_filter(unsigned char *, int, int);
5512:	void ftrace_set_global_notrace(unsigned char *, int, int);
5480:	int ftrace_set_notrace(struct ftrace_ops *, unsigned char *, int, int);
2908:	int ftrace_shutdown(struct ftrace_ops *, int);
2864:	int ftrace_startup(struct ftrace_ops *, int);
2233:	int ftrace_test_record(struct dyn_ftrace *, bool);
1600:	int ftrace_text_reserved(const void *, const void *);
2219:	int ftrace_update_record(struct dyn_ftrace *, bool);
1086:	bool is_ftrace_trampoline(unsigned long);
5347:	int modify_ftrace_direct(unsigned long, unsigned long, unsigned long);
4808:	int register_ftrace_command(struct ftrace_func_command *);
5087:	int register_ftrace_direct(unsigned long, unsigned long);
7555:	int register_ftrace_function(struct ftrace_ops *);
4522:	int register_ftrace_function_probe(char *, struct trace_array *, struct ftrace_probe_ops *, void *);
4831:	int unregister_ftrace_command(struct ftrace_func_command *);
5219:	int unregister_ftrace_direct(unsigned long, unsigned long);
7577:	int unregister_ftrace_function(struct ftrace_ops *);
4665:	int unregister_ftrace_function_probe_func(char *, struct trace_array *, struct ftrace_probe_ops *);
1150:	static void __add_hash_entry(struct ftrace_hash *, struct ftrace_func_entry *);
1243:	static void __free_ftrace_hash_rcu(struct callback_head *);
5829:	static int __ftrace_graph_open(struct file *, struct ftrace_graph_data *, struct inode *);
1637:	static bool __ftrace_hash_rec_update(struct ftrace_ops *, int, bool);
1863:	static int __ftrace_hash_update_ipmodify(struct ftrace_hash *, struct ftrace_hash *, struct ftrace_ops *);
2726:	static int __ftrace_modify_code(void *);
2509:	static int __ftrace_replace_code(struct dyn_ftrace *, bool);
5735:	static void *__g_next(loff_t *, struct seq_file *, loff_t *, struct seq_file *);
1162:	static int add_hash_entry(struct ftrace_hash *, unsigned long);
1317:	static struct ftrace_hash *alloc_and_copy_ftrace_hash(struct ftrace_hash *, int);
1265:	static struct ftrace_hash *alloc_ftrace_hash(int);
4138:	static int cache_mod(struct trace_array *, const char *, char *, int);
2398:	static void call_direct_funcs(unsigned long, unsigned long, struct ftrace_ops *, struct pt_regs *);
7164:	static void clear_ftrace_pids(struct trace_array *, int);
6746:	static void clear_func_from_hashes(struct ftrace_init_func *);
6351:	static void clear_mod_from_hash(struct ftrace_page *, struct ftrace_hash *);
1362:	static struct ftrace_hash *dup_hash(struct ftrace_hash *, int);
5192:	static struct ftrace_func_entry *find_direct_entry(unsigned long *, struct dyn_ftrace **);
7295:	static void *fnpid_next(struct seq_file *, void *, loff_t *);
7278:	static void *fnpid_start(struct seq_file *, loff_t *);
7242:	static void *fpid_next(struct seq_file *, void *, loff_t *);
7261:	static int fpid_show(struct seq_file *, void *);
7225:	static void *fpid_start(struct seq_file *, loff_t *);
7254:	static void fpid_stop(struct seq_file *, void *);
1234:	static void free_ftrace_hash(struct ftrace_hash *);
1288:	static int ftrace_add_mod(struct trace_array *, const char *, const char *, int);
5056:	static struct ftrace_direct_func *ftrace_alloc_direct_func(unsigned long);
3199:	static struct ftrace_page *ftrace_allocate_pages(unsigned long);
3699:	static int ftrace_avail_open(struct inode *, struct file *);
2077:	static int ftrace_check_record(struct dyn_ftrace *, bool, bool);
6171:	static int ftrace_cmp_ips(const void *, const void *);
1519:	static int ftrace_cmp_recs(const void *, const void *);
3722:	static int ftrace_enabled_open(struct inode *, struct file *);
3851:	static int ftrace_filter_open(struct inode *, struct file *);
7103:	static void ftrace_filter_pid_sched_switch_probe(void *, bool, struct task_struct *, struct task_struct *);
690:	static struct ftrace_profile *ftrace_find_profiled_func(unsigned long, struct ftrace_profile_stat *, struct ftrace_profile_stat *);
2239:	static struct ftrace_ops *ftrace_find_tramp_ops_any(struct dyn_ftrace *, struct dyn_ftrace *);
2293:	static struct ftrace_ops *ftrace_find_tramp_ops_curr(struct dyn_ftrace *, struct dyn_ftrace *);
2275:	static struct ftrace_ops *ftrace_find_tramp_ops_next(struct ftrace_ops *, struct dyn_ftrace *, struct dyn_ftrace *);
6390:	static void ftrace_free_mod_map(struct callback_head *);
5914:	static int ftrace_graph_notrace_open(struct inode *, struct file *);
5886:	static int ftrace_graph_open(struct inode *, struct file *);
5942:	static int ftrace_graph_release(struct inode *, struct file *);
6011:	static int ftrace_graph_set_hash(struct ftrace_hash *, char *);
6066:	static ssize_t ftrace_graph_write(struct file *, const char *, size_t, loff_t *);
4101:	static int ftrace_hash_move_and_update_ops(struct ftrace_ops *, struct ftrace_hash **, struct ftrace_hash *, int);
1819:	static void ftrace_hash_rec_update_modify(struct ftrace_ops *, int, int);
3888:	static int ftrace_match(char *, struct ftrace_glob *);
3972:	static int ftrace_match_record(struct ftrace_glob *, struct ftrace_glob *, int, struct dyn_ftrace *, struct dyn_ftrace *);
4285:	static int ftrace_mod_callback(struct trace_array *, struct ftrace_hash *, char *, char *, char *, int);
4318:	static int ftrace_mod_cmd_init(void);
7361:	static int ftrace_no_pid_open(struct inode *, struct file *);
7472:	static ssize_t ftrace_no_pid_write(struct file *, const char *, size_t, loff_t *);
3862:	static int ftrace_notrace_open(struct inode *, struct file *);
7059:	static void ftrace_ops_assist_func(unsigned long, unsigned long, struct ftrace_ops *, struct pt_regs *);
7040:	static void ftrace_ops_list_func(unsigned long, unsigned long, struct ftrace_ops *, struct pt_regs *);
7137:	static void ftrace_pid_follow_sched_process_exit(void *, struct task_struct *);
7122:	static void ftrace_pid_follow_sched_process_fork(void *, struct task_struct *, struct task_struct *);
142:	static void ftrace_pid_func(unsigned long, unsigned long, struct ftrace_ops *, struct pt_regs *);
7355:	static int ftrace_pid_open(struct inode *, struct file *);
7479:	static int ftrace_pid_release(struct inode *, struct file *);
7465:	static ssize_t ftrace_pid_write(struct file *, const char *, size_t, loff_t *);
6183:	static int ftrace_process_locs(struct module *, unsigned long *, unsigned long *);
4850:	static int ftrace_process_regex(char *, int, int, struct ftrace_iterator *, struct ftrace_iterator *);
723:	static struct ftrace_profile *ftrace_profile_alloc(struct ftrace_profile_stat *, unsigned long);
674:	static int ftrace_profile_init(void);
930:	static ssize_t ftrace_profile_read(struct file *, char *, size_t, loff_t *);
957:	static void ftrace_profile_tracefs(struct dentry *);
885:	static ssize_t ftrace_profile_write(struct file *, const char *, size_t, loff_t *);
2759:	static void ftrace_run_update_code(int);
4960:	static int ftrace_set_hash(struct ftrace_ops *, unsigned char *, int, unsigned long, int, int, int);
160:	static void ftrace_sync_ipi(void *);
2823:	static void ftrace_trampoline_free(struct ftrace_ops *);
3101:	static int ftrace_update_code(struct module *, struct ftrace_page *);
365:	static void ftrace_update_pid_func(void);
6901:	static void ftrace_update_trampoline(struct ftrace_ops *);
462:	static int function_stat_cmp(const void *, const void *);
490:	static int function_stat_headers(struct seq_file *);
426:	static void *function_stat_next(void *, int);
504:	static int function_stat_show(struct seq_file *, void *);
449:	static void *function_stat_start(struct tracer_stat *);
4324:	static void function_trace_probe_call(unsigned long, unsigned long, struct ftrace_ops *, struct pt_regs *);
5766:	static void *g_next(struct seq_file *, void *, loff_t *);
5799:	static int g_show(struct seq_file *, void *);
5772:	static void *g_start(struct seq_file *, loff_t *);
5794:	static void g_stop(struct seq_file *, void *);
1450:	static bool hash_contains_ip(unsigned long, struct ftrace_ops_hash *, struct ftrace_ops_hash *);
7366:	static void ignore_task_cpu(void *);
1531:	static struct dyn_ftrace *lookup_rec(unsigned long, unsigned long);
4010:	static int match_records(struct ftrace_hash *, char *, int, char *);
7390:	static ssize_t pid_write(const char *, size_t, loff_t *, int, struct file *, struct file *);
1970:	static void print_ip_ins(const char *, const unsigned char *);
4257:	static void process_cached_mods(const char *);
4187:	static void process_mod_list(struct list_head *, struct ftrace_ops *, char *, bool);
792:	static int profile_graph_entry(struct ftrace_graph_ent *);
809:	static void profile_graph_return(struct ftrace_graph_ret *);
6326:	static int referenced_filters(struct dyn_ftrace *);
4487:	static void release_probe(struct ftrace_func_probe *);
6556:	static void save_ftrace_mod_rec(struct ftrace_mod_map *, struct dyn_ftrace *);
5572:	static void set_ftrace_early_graph(char *, int);
5536:	static int set_ftrace_filter(char *);
5528:	static int set_ftrace_notrace(char *);
5549:	static int set_graph_function(char *);
5563:	static int set_graph_max_depth_function(char *);
5556:	static int set_graph_notrace_function(char *);
3480:	static void *t_func_next(loff_t *, struct seq_file *, struct seq_file *);
3425:	static void *t_mod_start(loff_t *, struct seq_file *, struct seq_file *);
3517:	static void *t_next(struct seq_file *, void *, loff_t *);
3273:	static void *t_probe_next(loff_t *, struct seq_file *, struct seq_file *);
3629:	static int t_show(struct seq_file *, void *);
3553:	static void *t_start(struct seq_file *, loff_t *);
3608:	static void t_stop(struct seq_file *, void *);
179:	static void update_ftrace_function(void);

File kernel/trace/ring_buffer.c:
1623:	struct trace_buffer *__ring_buffer_alloc(unsigned long, unsigned int, struct lock_class_key *);
5176:	void *ring_buffer_alloc_read_page(int, struct trace_buffer *, struct trace_buffer *);
3872:	unsigned long ring_buffer_bytes_cpu(struct trace_buffer *, int);
2157:	void ring_buffer_change_overwrite(struct trace_buffer *, int);
3934:	unsigned long ring_buffer_commit_overrun_cpu(struct trace_buffer *, int);
4662:	struct ring_buffer_event *ring_buffer_consume(struct trace_buffer *, int, u64 *, unsigned long *);
3541:	void ring_buffer_discard_commit(struct trace_buffer *, struct ring_buffer_event *);
3956:	unsigned long ring_buffer_dropped_events_cpu(struct trace_buffer *, int);
5033:	bool ring_buffer_empty(struct trace_buffer *);
5063:	bool ring_buffer_empty_cpu(int, struct trace_buffer *, struct trace_buffer *);
3996:	unsigned long ring_buffer_entries(struct trace_buffer *);
3892:	unsigned long ring_buffer_entries_cpu(struct trace_buffer *, int);
273:	void *ring_buffer_event_data(struct ring_buffer_event *);
238:	unsigned int ring_buffer_event_length(struct ring_buffer_event *);
299:	u64 ring_buffer_event_time_stamp(struct ring_buffer_event *);
1696:	void ring_buffer_free(struct trace_buffer *);
5223:	void ring_buffer_free_read_page(struct trace_buffer *, int, void *);
4830:	void ring_buffer_iter_advance(struct ring_buffer_iter *);
4615:	bool ring_buffer_iter_dropped(struct ring_buffer_iter *);
4083:	int ring_buffer_iter_empty(struct ring_buffer_iter *);
4633:	struct ring_buffer_event *ring_buffer_iter_peek(struct ring_buffer_iter *, u64 *);
4063:	void ring_buffer_iter_reset(struct ring_buffer_iter *);
3440:	struct ring_buffer_event *ring_buffer_lock_reserve(struct trace_buffer *, unsigned long);
3164:	void ring_buffer_nest_end(struct trace_buffer *);
3144:	void ring_buffer_nest_start(struct trace_buffer *);
1008:	void ring_buffer_normalize_time_stamp(struct trace_buffer *, int, u64 *);
770:	size_t ring_buffer_nr_dirty_pages(struct trace_buffer *, int);
758:	size_t ring_buffer_nr_pages(struct trace_buffer *, int);
3839:	u64 ring_buffer_oldest_event_ts(struct trace_buffer *, int);
3911:	unsigned long ring_buffer_overrun_cpu(struct trace_buffer *, int);
4019:	unsigned long ring_buffer_overruns(struct trace_buffer *);
4584:	struct ring_buffer_event *ring_buffer_peek(struct trace_buffer *, int, u64 *, unsigned long *);
924:	__poll_t ring_buffer_poll_wait(struct trace_buffer *, int, struct file *, poll_table *);
36:	int ring_buffer_print_entry_header(struct trace_seq *);
383:	int ring_buffer_print_page_header(struct trace_seq *);
3977:	unsigned long ring_buffer_read_events_cpu(struct trace_buffer *, int);
4802:	void ring_buffer_read_finish(struct ring_buffer_iter *);
5283:	int ring_buffer_read_page(struct trace_buffer *, void **, size_t, int, int);
4722:	struct ring_buffer_iter *ring_buffer_read_prepare(struct trace_buffer *, int, gfp_t);
4758:	void ring_buffer_read_prepare_sync(void);
4776:	void ring_buffer_read_start(struct ring_buffer_iter *);
3687:	void ring_buffer_record_disable(struct trace_buffer *);
3789:	void ring_buffer_record_disable_cpu(struct trace_buffer *, int);
3700:	void ring_buffer_record_enable(struct trace_buffer *);
3809:	void ring_buffer_record_enable_cpu(struct trace_buffer *, int);
3758:	bool ring_buffer_record_is_on(struct trace_buffer *);
3774:	bool ring_buffer_record_is_set_on(struct trace_buffer *);
3717:	void ring_buffer_record_off(struct trace_buffer *);
3740:	void ring_buffer_record_on(struct trace_buffer *);
4998:	void ring_buffer_reset(struct trace_buffer *);
4934:	void ring_buffer_reset_cpu(struct trace_buffer *, int);
4964:	void ring_buffer_reset_online_cpus(struct trace_buffer *);
1961:	int ring_buffer_resize(struct trace_buffer *, unsigned long, int);
1712:	void ring_buffer_set_clock(struct trace_buffer *, u64 (*)(void));
1718:	void ring_buffer_set_time_stamp_abs(struct trace_buffer *, bool);
4848:	unsigned long ring_buffer_size(struct trace_buffer *, int);
5096:	int ring_buffer_swap_cpu(struct trace_buffer *, struct trace_buffer *, int);
996:	u64 ring_buffer_time_stamp(struct trace_buffer *, int);
1723:	bool ring_buffer_time_stamp_abs(struct trace_buffer *);
3186:	int ring_buffer_unlock_commit(struct trace_buffer *, struct ring_buffer_event *);
813:	int ring_buffer_wait(struct trace_buffer *, int, int);
3587:	int ring_buffer_write(struct trace_buffer *, unsigned long, void *);
5452:	int trace_rb_cpu_prepare(unsigned int, struct hlist_node *);
1434:	static int __rb_allocate_pages(long, struct list_head *, int);
3207:	static struct ring_buffer_event *__rb_reserve_next(struct ring_buffer_per_cpu *, struct rb_event_info *);
2669:	static void rb_add_timestamp(struct ring_buffer_per_cpu *, struct ring_buffer_event **, struct rb_event_info *, u64 *, unsigned int *);
4345:	static void rb_advance_iter(struct ring_buffer_iter *);
4322:	static void rb_advance_reader(struct ring_buffer_per_cpu *);
1531:	static struct ring_buffer_per_cpu *rb_allocate_cpu_buffer(struct trace_buffer *, long, int);
4380:	static struct ring_buffer_event *rb_buffer_peek(struct ring_buffer_per_cpu *, u64 *, unsigned long *);
1382:	static int rb_check_list(struct ring_buffer_per_cpu *, struct list_head *);
1399:	static int rb_check_pages(struct ring_buffer_per_cpu *);
2980:	static void rb_commit(struct ring_buffer_per_cpu *, struct ring_buffer_event *);
1591:	static void rb_free_cpu_buffer(struct ring_buffer_per_cpu *);
4188:	static struct buffer_page *rb_get_reader_page(struct ring_buffer_per_cpu *);
2287:	static int rb_handle_head_page(struct ring_buffer_per_cpu *, struct buffer_page *, struct buffer_page *);
1853:	static int rb_insert_pages(struct ring_buffer_per_cpu *);
2186:	static struct ring_buffer_event *rb_iter_head_event(struct ring_buffer_iter *);
4453:	static struct ring_buffer_event *rb_iter_peek(struct ring_buffer_iter *, u64 *);
2516:	static struct ring_buffer_event *rb_move_tail(struct ring_buffer_per_cpu *, unsigned long, struct rb_event_info *);
3642:	static bool rb_per_cpu_empty(struct ring_buffer_per_cpu *);
1741:	static int rb_remove_pages(struct ring_buffer_per_cpu *, unsigned long);
4864:	static void rb_reset_cpu(struct ring_buffer_per_cpu *);
1252:	static struct buffer_page *rb_set_head_page(struct ring_buffer_per_cpu *);
792:	static void rb_wake_up_waiters(struct irq_work *);
4910:	static void reset_disabled_cpu_buffer(struct ring_buffer_per_cpu *);
1943:	static void update_pages_handler(struct work_struct *);

File kernel/trace/trace.c:
1056:	int __trace_bputs(unsigned long, const char *);
1005:	int __trace_puts(unsigned long, const char *, int);
3052:	void __trace_stack(struct trace_array *, unsigned int, int);
491:	int call_filter_check_discard(struct trace_event_call *, void *, struct trace_buffer *, struct ring_buffer_event *);
1445:	void disable_trace_on_warning(void);
9720:	void early_trace_init(void);
7384:	unsigned int err_pos(char *, const char *);
9393:	void ftrace_dump(enum ftrace_dump_mode);
777:	u64 ftrace_now(int);
2252:	int is_tracing_stopped(void);
1725:	void latency_fsnotify(struct trace_array *);
259:	unsigned long long ns2usecs(u64);
1506:	unsigned long nsecs_to_usecs(unsigned long);
3889:	void print_trace_header(struct seq_file *, struct trace_iterator *);
4122:	enum print_line_t print_trace_line(struct trace_iterator *);
376:	int register_ftrace_export(struct trace_export *);
2042:	int register_tracer(struct tracer *);
4892:	int set_tracer_flag(struct trace_array *, unsigned int, int);
8963:	int trace_array_destroy(struct trace_array *);
8751:	struct trace_array *trace_array_find(const char *);
8765:	struct trace_array *trace_array_find_get(const char *);
431:	int trace_array_get(struct trace_array *);
8901:	struct trace_array *trace_array_get_by_name(const char *);
3445:	int trace_array_init_printk(struct trace_array *);
3414:	int trace_array_printk(struct trace_array *, unsigned long, const char *, ...);
3459:	int trace_array_printk_buf(struct trace_buffer *, unsigned long, const char *, ...);
463:	void trace_array_put(struct trace_array *);
3387:	int trace_array_vprintk(struct trace_array *, unsigned long, const char *, struct __va_list_tag *);
2646:	struct ring_buffer_event *trace_buffer_lock_reserve(struct trace_buffer *, int, unsigned long, unsigned int);
2923:	void trace_buffer_unlock_commit_nostack(struct trace_buffer *, struct ring_buffer_event *);
2901:	void trace_buffer_unlock_commit_regs(struct trace_array *, struct trace_buffer *, struct ring_buffer_event *, unsigned int, struct pt_regs *);
2727:	void trace_buffered_event_disable(void);
2672:	void trace_buffered_event_enable(void);
1542:	bool trace_clock_in_ns(struct trace_array *);
8389:	struct dentry *trace_create_file(const char *, umode_t, struct dentry *, void *, const struct file_operations *);
4188:	void trace_default_header(struct seq_file *);
3080:	void trace_dump_stack(int);
4088:	int trace_empty(struct trace_iterator *);
2879:	void trace_event_buffer_commit(struct trace_event_buffer *);
2768:	struct ring_buffer_event *trace_event_buffer_lock_reserve(struct trace_buffer **, struct trace_event_file *, int, unsigned long, unsigned int);
570:	void trace_filter_add_remove_task(struct trace_pid_list *, struct task_struct *, struct task_struct *);
2448:	void trace_find_cmdline(int, char *);
518:	bool trace_find_filtered_pid(struct trace_pid_list *, pid_t);
3579:	struct trace_entry *trace_find_next_entry(struct trace_iterator *, int *, u64 *);
3625:	void *trace_find_next_entry_inc(struct trace_iterator *);
2474:	int trace_find_tgid(int);
504:	void trace_free_pid_list(struct trace_pid_list *);
2930:	void trace_function(struct trace_array *, unsigned long, unsigned long, unsigned int);
1585:	int trace_get_user(struct trace_parser *, const char *, size_t, loff_t *);
2582:	enum print_line_t trace_handle_return(struct trace_seq *);
540:	bool trace_ignore_this_task(struct trace_pid_list *, struct trace_pid_list *, struct task_struct *);
9734:	void trace_init(void);
9374:	void trace_init_global_iter(struct trace_iterator *);
4884:	int trace_keep_overwrite(struct tracer *, u32, int);
4172:	void trace_latency_header(struct seq_file *);
9526:	ssize_t trace_parse_run_command(struct file *, const char *, size_t, loff_t *, int (*)(int, char **));
1553:	int trace_parser_get_init(struct trace_parser *, int);
1568:	void trace_parser_put(struct trace_parser *);
606:	void *trace_pid_next(struct trace_pid_list *, void *, loff_t *);
657:	int trace_pid_show(struct seq_file *, void *);
633:	void *trace_pid_start(struct trace_pid_list *, loff_t *);
668:	int trace_pid_write(struct trace_pid_list *, struct trace_pid_list **, const char *, size_t);
3203:	void trace_printk_init_buffers(void);
9352:	void trace_printk_seq(struct trace_seq *);
3244:	void trace_printk_start_comm(void);
9505:	int trace_run_command(const char *, int (*)(int, char **));
4960:	int trace_set_options(struct trace_array *, char *);
3824:	unsigned long trace_total_entries(struct trace_array *);
3812:	unsigned long trace_total_entries_cpu(struct trace_array *, int);
3269:	int trace_vbprintk(unsigned long, const char *, struct __va_list_tag *);
3475:	int trace_vprintk(unsigned long, const char *, struct __va_list_tag *);
2846:	int tracepoint_printk_sysctl(struct ctl_table *, int, void *, size_t *, loff_t *);
5745:	int tracer_init(struct tracer *, struct trace_array *);
1460:	bool tracer_tracing_is_on(struct trace_array *);
1414:	void tracer_tracing_off(struct trace_array *);
954:	void tracer_tracing_on(struct trace_array *);
1246:	int tracing_alloc_snapshot(void);
1205:	int tracing_alloc_snapshot_instance(struct trace_array *);
474:	int tracing_check_open_get_tr(struct trace_array *);
1186:	void *tracing_cond_snapshot_data(struct trace_array *);
2618:	unsigned int tracing_gen_ctx(void);
2630:	unsigned int tracing_gen_ctx_dec(void);
2589:	unsigned int tracing_gen_ctx_flags(unsigned long);
9144:	int tracing_init_dentry(void);
4455:	bool tracing_is_disabled(void);
791:	int tracing_is_enabled(void);
1470:	int tracing_is_on(void);
3669:	void tracing_iter_reset(struct trace_iterator *, int);
7425:	void tracing_log_err(struct trace_array *, const char *, const char *, const char **, u8, u8);
4692:	loff_t tracing_lseek(struct file *, loff_t, int);
1439:	void tracing_off(void);
977:	void tracing_on(void);
4443:	int tracing_open_generic(struct inode *, struct file *);
4464:	int tracing_open_generic_tr(struct inode *, struct file *);
2567:	void tracing_record_cmdline(struct task_struct *);
2513:	void tracing_record_taskinfo(struct task_struct *, int);
2542:	void tracing_record_taskinfo_sched_switch(struct task_struct *, struct task_struct *, int);
2572:	void tracing_record_tgid(struct task_struct *);
2163:	void tracing_reset_all_online_cpus(void);
2143:	void tracing_reset_online_cpus(struct array_buffer *);
5853:	ssize_t tracing_resize_ring_buffer(struct trace_array *, unsigned long, int);
6822:	int tracing_set_clock(struct trace_array *, const char *);
4747:	int tracing_set_cpumask(struct trace_array *, cpumask_var_t);
6932:	int tracing_set_time_stamp_abs(struct trace_array *, bool);
5933:	int tracing_set_tracer(struct trace_array *, const char *);
1145:	void tracing_snapshot(void);
1269:	void tracing_snapshot_alloc(void);
1166:	void tracing_snapshot_cond(struct trace_array *, void *);
1356:	int tracing_snapshot_cond_disable(struct trace_array *);
1294:	int tracing_snapshot_cond_enable(struct trace_array *, void *, cond_update_fn_t);
1126:	void tracing_snapshot_instance(struct trace_array *);
2263:	void tracing_start(void);
2337:	void tracing_stop(void);
5889:	int tracing_update_buffers(void);
391:	int unregister_ftrace_export(struct trace_export *);
1800:	void update_max_tr(struct trace_array *, struct task_struct *, int, void *);
1843:	void update_max_tr_single(struct trace_array *, struct task_struct *, int);
3516:	static struct trace_entry *__find_next_entry(struct trace_iterator *, int *, unsigned long *, u64 *);
2972:	static void __ftrace_trace_stack(struct trace_buffer *, unsigned int, int, struct pt_regs *);
8927:	static int __remove_instance(struct trace_array *);
4847:	static int __set_tracer_option(struct trace_array *, struct tracer_flags *, int, struct tracer_opt *, struct tracer_opt *);
449:	static void __trace_array_put(struct trace_array *);
3332:	static int __trace_array_vprintk(struct trace_buffer *, unsigned long, const char *, struct __va_list_tag *);
2421:	static void __trace_find_cmdline(int, char *);
4331:	static struct trace_iterator *__tracing_open(struct inode *, struct file *, bool);
5787:	static int __tracing_resize_ring_buffer(struct trace_array *, unsigned long, int);
1755:	static void __update_max_tr(struct trace_array *, struct task_struct *, int);
3186:	static int alloc_percpu_trace_buffer(void);
2209:	static int allocate_cmdlines_buffer(unsigned int, struct saved_cmdlines_buffer *);
8648:	static int allocate_trace_buffer(struct trace_array *, struct array_buffer *, int);
8674:	static int allocate_trace_buffers(struct trace_array *, int);
4999:	static void apply_trace_boot_options(void);
221:	static int boot_alloc_snapshot(char *);
8596:	static ssize_t buffer_percent_read(struct file *, char *, size_t, loff_t *);
8610:	static ssize_t buffer_percent_write(struct file *, const char *, size_t, loff_t *);
7744:	static bool buffer_pipe_buf_get(struct pipe_inode_info *, struct pipe_buffer *);
7735:	static void buffer_pipe_buf_release(struct pipe_inode_info *, struct pipe_buffer *);
7766:	static void buffer_spd_release(struct splice_pipe_desc *, unsigned int);
9739:	static int clear_boot_tracer(void);
9010:	static void create_trace_instances(struct dentry *);
8447:	static void create_trace_option_files(struct trace_array *, struct tracer *);
2714:	static void disable_trace_buffered_event(void *);
97:	static int dummy_set_flag(struct trace_array *, u32, u32, int);
2707:	static void enable_trace_buffered_event(void *);
8006:	static void ftrace_count_snapshot(unsigned long, unsigned long, struct trace_array *, struct ftrace_probe_ops *, void *);
312:	static void ftrace_exports(struct ring_buffer_event *, int);
7998:	static void ftrace_snapshot(unsigned long, unsigned long, struct trace_array *, struct ftrace_probe_ops *, void *);
8066:	static void ftrace_snapshot_free(struct ftrace_probe_ops *, struct trace_array *, unsigned long, void *);
8050:	static int ftrace_snapshot_init(struct ftrace_probe_ops *, struct trace_array *, unsigned long, void *, void **);
8028:	static int ftrace_snapshot_print(struct seq_file *, unsigned long, struct ftrace_probe_ops *, void *);
8094:	static int ftrace_trace_snapshot_callback(struct trace_array *, struct ftrace_hash *, char *, char *, char *, int);
3098:	static void ftrace_trace_userstack(struct trace_buffer *, unsigned int, struct trace_array *, struct trace_array *);
3796:	static void get_total_entries(struct array_buffer *, unsigned long *, unsigned long *);
3774:	static void get_total_entries_cpu(struct array_buffer *, unsigned long *, unsigned long *, int);
9036:	static void init_tracer_tracefs(struct trace_array *, struct dentry *);
8863:	static int instance_mkdir(const char *);
8991:	static int instance_rmdir(const char *);
1712:	static int latency_fsnotify_init(void);
1687:	static void latency_fsnotify_workfn(struct work_struct *);
1694:	static void latency_fsnotify_workfn_irq(struct irq_work *);
2811:	static void output_printk(struct trace_event_buffer *);
3491:	static struct trace_entry *peek_next_entry(struct trace_iterator *, int, u64 *, unsigned long *);
4066:	static enum print_line_t print_bin_fmt(struct trace_iterator *);
3870:	static void print_func_help_header_irq(struct array_buffer *, struct seq_file *, unsigned int);
4036:	static enum print_line_t print_hex_fmt(struct trace_iterator *);
4011:	static enum print_line_t print_raw_fmt(struct trace_iterator *);
3979:	static enum print_line_t print_trace_fmt(struct trace_iterator *);
8540:	static ssize_t rb_simple_read(struct file *, char *, size_t, loff_t *);
8554:	static ssize_t rb_simple_write(struct file *, const char *, size_t, loff_t *);
5761:	static int resize_buffer_duplicate_size(struct array_buffer *, struct array_buffer *, int);
3642:	static void *s_next(struct seq_file *, void *, loff_t *);
4268:	static int s_show(struct seq_file *, void *);
3702:	static void *s_start(struct seq_file *, loff_t *);
3760:	static void s_stop(struct seq_file *, void *);
5401:	static void *saved_cmdlines_next(struct seq_file *, void *, loff_t *);
5445:	static int saved_cmdlines_show(struct seq_file *, void *);
5421:	static void *saved_cmdlines_start(struct seq_file *, loff_t *);
5439:	static void saved_cmdlines_stop(struct seq_file *, void *);
5344:	static void *saved_tgids_next(struct seq_file *, void *, loff_t *);
5362:	static int saved_tgids_show(struct seq_file *, void *);
5351:	static void *saved_tgids_start(struct seq_file *, loff_t *);
5358:	static void saved_tgids_stop(struct seq_file *, void *);
1476:	static int set_buf_size(char *);
187:	static int set_cmdline_ftrace(char *);
197:	static int set_ftrace_dump_on_oops(char *);
243:	static int set_trace_boot_clock(char *);
233:	static int set_trace_boot_options(char *);
251:	static int set_tracepoint_printk(char *);
1491:	static int set_tracing_thresh(char *);
4655:	static int show_traces_open(struct inode *, struct file *);
4677:	static int show_traces_release(struct inode *, struct file *);
7120:	static int snapshot_raw_open(struct inode *, struct file *);
213:	static int stop_trace_on_warning(char *);
4599:	static void *t_next(struct seq_file *, void *, loff_t *);
4632:	static int t_show(struct seq_file *, void *);
4612:	static void *t_start(struct seq_file *, loff_t *);
4627:	static void t_stop(struct seq_file *, void *);
8798:	static struct trace_array *trace_array_create(const char *);
8778:	static int trace_array_create_dir(struct trace_array *);
9115:	static struct vfsmount *trace_automount(struct dentry *, void *);
3636:	static void trace_consume(struct trace_iterator *);
9318:	static int trace_die_handler(struct notifier_block *, unsigned long, void *);
7306:	static ssize_t trace_min_max_read(struct file *, char *, size_t, loff_t *);
7260:	static ssize_t trace_min_max_write(struct file *, const char *, size_t, loff_t *);
9231:	static int trace_module_notify(struct notifier_block *, unsigned long, void *);
8331:	static ssize_t trace_options_core_read(struct file *, char *, size_t, loff_t *);
8350:	static ssize_t trace_options_core_write(struct file *, const char *, size_t, loff_t *);
8405:	static struct dentry *trace_options_init_dentry(struct trace_array *);
8246:	static ssize_t trace_options_read(struct file *, char *, size_t, loff_t *);
8261:	static ssize_t trace_options_write(struct file *, const char *, size_t, loff_t *);
9304:	static int trace_panic_handler(struct notifier_block *, unsigned long, void *);
2386:	static int trace_save_cmdline(struct task_struct *);
9591:	static int tracer_alloc_buffers(void);
9254:	static int tracer_init_tracefs(void);
7577:	static int tracing_buffers_open(struct inode *, struct file *);
7617:	static __poll_t tracing_buffers_poll(struct file *, poll_table *);
7626:	static ssize_t tracing_buffers_read(struct file *, char *, size_t, loff_t *);
7699:	static int tracing_buffers_release(struct inode *, struct file *);
7776:	static ssize_t tracing_buffers_splice_read(struct file *, loff_t *, struct pipe_inode_info *, size_t, unsigned int);
6884:	static int tracing_clock_open(struct inode *, struct file *);
6807:	static int tracing_clock_show(struct seq_file *, void *);
6856:	static ssize_t tracing_clock_write(struct file *, const char *, size_t, loff_t *);
4720:	static ssize_t tracing_cpumask_read(struct file *, char *, size_t, loff_t *);
4782:	static ssize_t tracing_cpumask_write(struct file *, const char *, size_t, loff_t *);
6540:	static ssize_t tracing_entries_read(struct file *, char *, size_t, loff_t *);
6588:	static ssize_t tracing_entries_write(struct file *, const char *, size_t, loff_t *);
7525:	static int tracing_err_log_open(struct inode *, struct file *);
7557:	static int tracing_err_log_release(struct inode *, struct file *);
7476:	static void *tracing_err_log_seq_next(struct seq_file *, void *, loff_t *);
7499:	static int tracing_err_log_seq_show(struct seq_file *, void *);
7467:	static void *tracing_err_log_seq_start(struct seq_file *, loff_t *);
7483:	static void tracing_err_log_seq_stop(struct seq_file *, void *);
6654:	static int tracing_free_buffer_release(struct inode *, struct file *);
6640:	static ssize_t tracing_free_buffer_write(struct file *, const char *, size_t, loff_t *);
8198:	static void tracing_init_tracefs_percpu(struct trace_array *, long);
6750:	static ssize_t tracing_mark_raw_write(struct file *, const char *, size_t, loff_t *);
6670:	static ssize_t tracing_mark_write(struct file *, const char *, size_t, loff_t *);
6138:	static ssize_t tracing_max_lat_read(struct file *, char *, size_t, loff_t *);
6145:	static ssize_t tracing_max_lat_write(struct file *, const char *, size_t, loff_t *);
4537:	static int tracing_open(struct inode *, struct file *);
6153:	static int tracing_open_pipe(struct inode *, struct file *);
6257:	static __poll_t tracing_poll_pipe(struct file *, poll_table *);
7967:	static ssize_t tracing_read_dyn_info(struct file *, char *, size_t, loff_t *);
6305:	static ssize_t tracing_read_pipe(struct file *, char *, size_t, loff_t *);
5331:	static ssize_t tracing_readme_read(struct file *, char *, size_t, loff_t *);
4478:	static int tracing_release(struct inode *, struct file *);
4520:	static int tracing_release_generic_tr(struct inode *, struct file *);
6214:	static int tracing_release_pipe(struct inode *, struct file *);
5501:	static int tracing_resize_saved_cmdlines(unsigned int);
5462:	static int tracing_saved_cmdlines_open(struct inode *, struct file *);
5481:	static ssize_t tracing_saved_cmdlines_size_read(struct file *, char *, size_t, loff_t *);
5524:	static ssize_t tracing_saved_cmdlines_size_write(struct file *, const char *, size_t, loff_t *);
5382:	static int tracing_saved_tgids_open(struct inode *, struct file *);
9762:	static int tracing_set_default_clock(void);
5731:	static ssize_t tracing_set_trace_read(struct file *, char *, size_t, loff_t *);
6041:	static ssize_t tracing_set_trace_write(struct file *, const char *, size_t, loff_t *);
4528:	static int tracing_single_release_tr(struct inode *, struct file *);
1095:	static void tracing_snapshot_instance_cond(struct trace_array *, void *);
6971:	static int tracing_snapshot_open(struct inode *, struct file *);
7095:	static int tracing_snapshot_release(struct inode *, struct file *);
7013:	static ssize_t tracing_snapshot_write(struct file *, const char *, size_t, loff_t *);
6400:	static void tracing_spd_release_pipe(struct splice_pipe_desc *, unsigned int);
6453:	static ssize_t tracing_splice_read_pipe(struct file *, loff_t *, struct pipe_inode_info *, size_t, unsigned int);
7894:	static ssize_t tracing_stats_read(struct file *, char *, size_t, loff_t *);
6104:	static ssize_t tracing_thresh_read(struct file *, char *, size_t, loff_t *);
6111:	static ssize_t tracing_thresh_write(struct file *, const char *, size_t, loff_t *);
6916:	static int tracing_time_stamp_mode_open(struct inode *, struct file *);
6900:	static int tracing_time_stamp_mode_show(struct seq_file *, void *);
6616:	static ssize_t tracing_total_entries_read(struct file *, char *, size_t, loff_t *);
5045:	static int tracing_trace_options_open(struct inode *, struct file *);
4818:	static int tracing_trace_options_show(struct seq_file *, void *);
5020:	static ssize_t tracing_trace_options_write(struct file *, const char *, size_t, loff_t *);
6265:	static int tracing_wait_pipe(struct file *);
4686:	static ssize_t tracing_write_stub(struct file *, const char *, size_t, loff_t *);

File kernel/trace/trace_boot.c:
102:	static int trace_boot_add_kprobe_event(struct xbc_node *, const char *);
139:	static int trace_boot_add_synth_event(struct xbc_node *, const char *);
83:	static void trace_boot_enable_events(struct trace_array *, struct xbc_node *);
279:	static void trace_boot_enable_tracer(struct trace_array *, struct xbc_node *);
333:	static int trace_boot_init(void);
308:	static void trace_boot_init_instances(struct xbc_node *);
175:	static void trace_boot_init_one_event(struct trace_array *, struct xbc_node *, struct xbc_node *);
299:	static void trace_boot_init_one_instance(struct trace_array *, struct xbc_node *);
247:	static void trace_boot_set_ftrace_filter(struct trace_array *, struct xbc_node *);
25:	static void trace_boot_set_instance_options(struct trace_array *, struct xbc_node *);

File kernel/trace/trace_clock.c:
57:	u64 trace_clock(void);
155:	u64 trace_clock_counter(void);
94:	u64 trace_clock_global(void);
70:	u64 trace_clock_jiffies(void);
32:	u64 trace_clock_local(void);

File kernel/trace/trace_dynevent.c:
21:	int dyn_event_register(struct dyn_event_operations *);
34:	int dyn_event_release(int, char **, struct dyn_event_operations *);
108:	void *dyn_event_seq_next(struct seq_file *, void *, loff_t *);
102:	void *dyn_event_seq_start(struct seq_file *, loff_t *);
113:	void dyn_event_seq_stop(struct seq_file *, void *);
146:	int dyn_events_release_all(struct dyn_event_operations *);
245:	int dynevent_arg_add(struct dynevent_cmd *, struct dynevent_arg *, dynevent_check_arg_fn_t);
381:	void dynevent_arg_init(struct dynevent_arg *, char);
290:	int dynevent_arg_pair_add(struct dynevent_cmd *, struct dynevent_arg_pair *, dynevent_check_arg_fn_t);
408:	void dynevent_arg_pair_init(struct dynevent_arg_pair *, char, char);
358:	void dynevent_cmd_init(struct dynevent_cmd *, char *, int, enum dynevent_type, dynevent_create_fn_t);
433:	int dynevent_create(struct dynevent_cmd *);
325:	int dynevent_str_add(struct dynevent_cmd *, const char *);
78:	static int create_dyn_event(int, char **);
173:	static int dyn_event_open(struct inode *, struct file *);
118:	static int dyn_event_seq_show(struct seq_file *, void *);
190:	static ssize_t dyn_event_write(struct file *, const char *, size_t, loff_t *);
207:	static int init_dynamic_event(void);

File kernel/trace/trace_event_perf.c:
492:	int perf_ftrace_event_register(struct trace_event_call *, enum trace_reg, void *);
290:	void perf_kprobe_destroy(struct perf_event *);
248:	int perf_kprobe_init(struct perf_event *, bool);
355:	int perf_trace_add(struct perf_event *, int);
395:	void *perf_trace_buf_alloc(int, struct pt_regs **, int *);
421:	void perf_trace_buf_update(void *, u16);
382:	void perf_trace_del(struct perf_event *, int);
239:	void perf_trace_destroy(struct perf_event *);
217:	int perf_trace_init(struct perf_event *);
345:	void perf_uprobe_destroy(struct perf_event *);
302:	int perf_uprobe_init(struct perf_event *, unsigned long, bool);
431:	static void perf_ftrace_function_call(unsigned long, unsigned long, struct ftrace_ops *, struct pt_regs *);
195:	static int perf_trace_event_init(struct trace_event_call *, struct perf_event *);
27:	static int perf_trace_event_perm(struct trace_event_call *, struct perf_event *);
96:	static int perf_trace_event_reg(struct trace_event_call *, struct perf_event *);
154:	static void perf_trace_event_unreg(struct perf_event *, struct perf_event *);

File kernel/trace/trace_events.c:
2698:	struct trace_event_file *__find_event_file(struct trace_array *, const char *, const char *);
3168:	void __trace_early_add_events(struct trace_array *);
3289:	int event_trace_add_tracer(struct dentry *, struct trace_array *);
3337:	int event_trace_del_tracer(struct trace_array *);
3472:	int event_trace_init(void);
2721:	struct trace_event_file *find_event_file(struct trace_array *, const char *, const char *);
836:	int ftrace_set_clr_event(struct trace_array *, char *, int);
2526:	int trace_add_event_call(struct trace_event_call *);
912:	int trace_array_set_clr_event(struct trace_array *, const char *, const char *, bool);
134:	int trace_define_field(struct trace_event_call *, const char *, const char *, int, int, int, int);
251:	void *trace_event_buffer_reserve(struct trace_event_buffer *, struct trace_event_file *, unsigned long);
321:	void trace_event_enable_cmd_record(bool);
483:	int trace_event_enable_disable(struct trace_event_file *, int, int);
343:	void trace_event_enable_tgid_record(bool);
2417:	void trace_event_eval_update(struct trace_eval_map **, int);
534:	void trace_event_follow_fork(struct trace_array *, bool);
206:	int trace_event_get_offsets(struct trace_event_call *);
232:	bool trace_event_ignore_this_pid(struct trace_event_file *);
3502:	void trace_event_init(void);
220:	int trace_event_raw_init(struct trace_event_call *);
283:	int trace_event_reg(struct trace_event_call *, enum trace_reg, void *);
90:	struct ftrace_event_field *trace_find_event_field(struct trace_event_call *, char *);
2753:	struct trace_event_file *trace_get_event_file(const char *, const char *, const char *);
2808:	void trace_put_event_file(struct trace_event_file *);
2587:	int trace_remove_event_call(struct trace_event_call *);
888:	int trace_set_clr_event(const char *, const char *, int);
640:	static void __ftrace_clear_event_pids(struct trace_array *, int);
365:	static int __ftrace_event_enable_disable(struct trace_event_file *, int, int);
777:	static int __ftrace_set_clr_event_nolock(struct trace_array *, const char *, const char *, const char *, int);
690:	static void __put_system(struct event_subsystem *);
721:	static void __put_system_dir(struct trace_subsystem_dir *);
107:	static int __trace_define_field(struct list_head *, const char *, const char *, int, int, int, int);
3148:	static void __trace_early_add_event_dirs(struct trace_array *);
3220:	static int create_event_toplevel_files(struct dentry *, struct trace_array *);
2018:	static struct event_subsystem *create_new_subsystem(const char *);
3371:	static void early_enable_events(struct trace_array *, bool);
2319:	static char *eval_replace(char *, struct trace_eval_map *, int);
2163:	static int event_create_dir(struct dentry *, struct trace_event_file *);
2126:	static int event_define_fields(struct trace_event_call *);
2857:	static void event_enable_count_probe(unsigned long, unsigned long, struct trace_array *, struct ftrace_probe_ops *, void *);
2953:	static void event_enable_free(struct ftrace_probe_ops *, struct trace_array *, unsigned long, void *);
3006:	static int event_enable_func(struct trace_array *, struct ftrace_hash *, char *, char *, char *, int);
2915:	static int event_enable_init(struct ftrace_probe_ops *, struct trace_array *, unsigned long, void *, void **);
2885:	static int event_enable_print(struct seq_file *, unsigned long, struct ftrace_probe_ops *, void *);
2840:	static void event_enable_probe(unsigned long, unsigned long, struct trace_array *, struct ftrace_probe_ops *, void *);
1130:	static ssize_t event_enable_read(struct file *, char *, size_t, loff_t *);
1160:	static ssize_t event_enable_write(struct file *, const char *, size_t, loff_t *);
507:	static void event_filter_pid_sched_process_exit(void *, struct task_struct *);
520:	static void event_filter_pid_sched_process_fork(void *, struct task_struct *, struct task_struct *);
574:	static void event_filter_pid_sched_switch_probe_post(void *, bool, struct task_struct *, struct task_struct *);
550:	static void event_filter_pid_sched_switch_probe_pre(void *, bool, struct task_struct *, struct task_struct *);
607:	static void event_filter_pid_sched_wakeup_probe_post(void *, struct task_struct *);
589:	static void event_filter_pid_sched_wakeup_probe_pre(void *, struct task_struct *);
1431:	static ssize_t event_filter_read(struct file *, char *, size_t, loff_t *);
1464:	static ssize_t event_filter_write(struct file *, const char *, size_t, loff_t *);
1416:	static ssize_t event_id_read(struct file *, char *, size_t, loff_t *);
2286:	static int event_init(struct trace_event_call *);
1712:	static ssize_t event_pid_write(const char *, size_t, loff_t *, int, struct file *, struct file *);
2258:	static void event_remove(struct trace_event_call *);
2051:	static struct dentry *event_subsystem_dir(struct trace_array *, const char *, struct trace_event_file *, struct dentry *);
3399:	static int event_trace_enable(void);
3445:	static int event_trace_enable_again(void);
1288:	static void *f_next(struct seq_file *, void *, loff_t *);
1320:	static int f_show(struct seq_file *, void *);
1370:	static void *f_start(struct seq_file *, loff_t *);
2938:	static int free_probe_data(void *);
1946:	static int ftrace_event_avail_open(struct inode *, struct file *);
1788:	static ssize_t ftrace_event_npid_write(struct file *, const char *, size_t, loff_t *);
1781:	static ssize_t ftrace_event_pid_write(struct file *, const char *, size_t, loff_t *);
1936:	static int ftrace_event_release(struct inode *, struct file *);
1997:	static int ftrace_event_set_npid_open(struct inode *, struct file *);
1955:	static int ftrace_event_set_open(struct inode *, struct file *);
1976:	static int ftrace_event_set_pid_open(struct inode *, struct file *);
929:	static ssize_t ftrace_event_write(struct file *, const char *, size_t, loff_t *);
1663:	static void ignore_task_cpu(void *);
1079:	static void *np_next(struct seq_file *, void *, loff_t *);
1116:	static void *np_start(struct seq_file *, loff_t *);
1073:	static void *p_next(struct seq_file *, void *, loff_t *);
1110:	static void *p_start(struct seq_file *, loff_t *);
1122:	static void p_stop(struct seq_file *, void *);
1682:	static void register_pid_events(struct trace_array *);
751:	static void remove_event_file_dir(struct trace_event_file *);
1009:	static void *s_next(struct seq_file *, void *, loff_t *);
1024:	static void *s_start(struct seq_file *, loff_t *);
3208:	static int setup_trace_event(char *);
1639:	static ssize_t show_header(struct file *, char *, size_t, loff_t *);
1587:	static ssize_t subsystem_filter_read(struct file *, char *, size_t, loff_t *);
1614:	static ssize_t subsystem_filter_write(struct file *, const char *, size_t, loff_t *);
1495:	static int subsystem_open(struct inode *, struct file *);
1567:	static int subsystem_release(struct inode *, struct file *);
1196:	static ssize_t system_enable_read(struct file *, char *, size_t, loff_t *);
1243:	static ssize_t system_enable_write(struct file *, const char *, size_t, loff_t *);
1545:	static int system_tr_open(struct inode *, struct file *);
969:	static void *t_next(struct seq_file *, void *, loff_t *);
1041:	static int t_show(struct seq_file *, void *);
991:	static void *t_start(struct seq_file *, loff_t *);
1053:	static void t_stop(struct seq_file *, void *);
2459:	static struct trace_event_file *trace_create_new_event(struct trace_event_call *, struct trace_array *);
177:	static int trace_define_common_fields(void);
165:	static int trace_define_generic_fields(void);
190:	static void trace_destroy_fields(struct trace_event_call *);
1398:	static int trace_format_open(struct inode *, struct file *);
2654:	static int trace_module_notify(struct notifier_block *, unsigned long, void *);
2341:	static void update_event_printk(struct trace_event_call *, struct trace_eval_map *);
2831:	static void update_event_probe(struct event_probe_data *, struct event_probe_data *);

File kernel/trace/trace_events_filter.c:
1797:	int apply_event_filter(struct trace_event_file *, char *);
1848:	int apply_subsystem_event_filter(struct trace_subsystem_dir *, char *);
1756:	int create_event_filter(struct trace_array *, struct trace_event_call *, char *, bool, struct event_filter **);
1081:	int filter_assign_type(const char *);
896:	int filter_match_preds(struct event_filter *, void *);
821:	enum regex_type filter_parse_regex(char *, int, char **, int *);
1040:	void free_event_filter(struct event_filter *);
1893:	void ftrace_profile_free_filter(struct perf_event *);
2056:	int ftrace_profile_set_filter(struct perf_event *, int, char *);
982:	void print_event_filter(struct trace_event_file *, struct trace_seq *);
992:	void print_subsystem_event_filter(struct event_subsystem *, struct trace_seq *);
1030:	static void __free_filter(struct event_filter *);
1941:	static int __ftrace_function_set_filter(int, char *, int, struct function_filter_data *);
929:	static void append_filter_err(struct trace_array *, struct filter_parse_error *, struct event_filter *);
1408:	static int calc_stack(const char *, int *, int *, int *);
1732:	static int create_filter(struct trace_array *, struct trace_event_call *, char *, bool, struct event_filter **);
1677:	static int create_filter_start(char *, bool, struct filter_parse_error **, struct event_filter **);
654:	static int filter_pred_16(struct filter_pred *, void *);
653:	static int filter_pred_32(struct filter_pred *, void *);
652:	static int filter_pred_64(struct filter_pred *, void *);
655:	static int filter_pred_8(struct filter_pred *, void *);
647:	static int filter_pred_BAND_s16(struct filter_pred *, void *);
645:	static int filter_pred_BAND_s32(struct filter_pred *, void *);
643:	static int filter_pred_BAND_s64(struct filter_pred *, void *);
649:	static int filter_pred_BAND_s8(struct filter_pred *, void *);
648:	static int filter_pred_BAND_u16(struct filter_pred *, void *);
646:	static int filter_pred_BAND_u32(struct filter_pred *, void *);
644:	static int filter_pred_BAND_u64(struct filter_pred *, void *);
650:	static int filter_pred_BAND_u8(struct filter_pred *, void *);
647:	static int filter_pred_GE_s16(struct filter_pred *, void *);
645:	static int filter_pred_GE_s32(struct filter_pred *, void *);
643:	static int filter_pred_GE_s64(struct filter_pred *, void *);
649:	static int filter_pred_GE_s8(struct filter_pred *, void *);
648:	static int filter_pred_GE_u16(struct filter_pred *, void *);
646:	static int filter_pred_GE_u32(struct filter_pred *, void *);
644:	static int filter_pred_GE_u64(struct filter_pred *, void *);
650:	static int filter_pred_GE_u8(struct filter_pred *, void *);
647:	static int filter_pred_GT_s16(struct filter_pred *, void *);
645:	static int filter_pred_GT_s32(struct filter_pred *, void *);
643:	static int filter_pred_GT_s64(struct filter_pred *, void *);
649:	static int filter_pred_GT_s8(struct filter_pred *, void *);
648:	static int filter_pred_GT_u16(struct filter_pred *, void *);
646:	static int filter_pred_GT_u32(struct filter_pred *, void *);
644:	static int filter_pred_GT_u64(struct filter_pred *, void *);
650:	static int filter_pred_GT_u8(struct filter_pred *, void *);
647:	static int filter_pred_LE_s16(struct filter_pred *, void *);
645:	static int filter_pred_LE_s32(struct filter_pred *, void *);
643:	static int filter_pred_LE_s64(struct filter_pred *, void *);
649:	static int filter_pred_LE_s8(struct filter_pred *, void *);
648:	static int filter_pred_LE_u16(struct filter_pred *, void *);
646:	static int filter_pred_LE_u32(struct filter_pred *, void *);
644:	static int filter_pred_LE_u64(struct filter_pred *, void *);
650:	static int filter_pred_LE_u8(struct filter_pred *, void *);
647:	static int filter_pred_LT_s16(struct filter_pred *, void *);
645:	static int filter_pred_LT_s32(struct filter_pred *, void *);
643:	static int filter_pred_LT_s64(struct filter_pred *, void *);
649:	static int filter_pred_LT_s8(struct filter_pred *, void *);
648:	static int filter_pred_LT_u16(struct filter_pred *, void *);
646:	static int filter_pred_LT_u32(struct filter_pred *, void *);
644:	static int filter_pred_LT_u64(struct filter_pred *, void *);
650:	static int filter_pred_LT_u8(struct filter_pred *, void *);
736:	static int filter_pred_comm(struct filter_pred *, void *);
710:	static int filter_pred_cpu(struct filter_pred *, void *);
745:	static int filter_pred_none(struct filter_pred *, void *);
671:	static int filter_pred_pchar(struct filter_pred *, void *);
658:	static int filter_pred_string(struct filter_pred *, void *);
694:	static int filter_pred_strloc(struct filter_pred *, void *);
2025:	static int ftrace_function_set_filter(struct perf_event *, struct event_filter *, struct event_filter *);
1152:	static int parse_pred(const char *, void *, int, struct filter_parse_error *, struct filter_pred **);
410:	static struct prog_entry *predicate_parse(const char *, int, int, void *, struct filter_parse_error *, parse_pred_fn);
1505:	static int process_preds(struct trace_event_call *, const char *, struct event_filter *, struct filter_parse_error *);
1590:	static int process_system_preds(struct trace_subsystem_dir *, struct trace_array *, struct filter_parse_error *, char *);
787:	static int regex_match_end(char *, struct regex *, int);
771:	static int regex_match_front(char *, struct regex *, int);
762:	static int regex_match_full(char *, struct regex *, int);
797:	static int regex_match_glob(char *, struct regex *, int);
779:	static int regex_match_middle(char *, struct regex *, int);

File kernel/trace/trace_events_hist.c:
5851:	int register_trigger_hist_cmd(void);
5981:	int register_trigger_hist_enable_disable_cmds(void);
3675:	static int __create_val_field(struct hist_trigger_data *, unsigned int, struct trace_event_file *, char *, char *, unsigned long);
3541:	static int action_create(struct hist_trigger_data *, struct action_data *);
3006:	static void action_data_destroy(struct action_data *);
3146:	static int action_parse(struct trace_array *, char *, struct action_data *, enum handler_id);
611:	static void action_trace(struct hist_trigger_data *, struct tracing_map_elt *, void *, struct ring_buffer_event *, void *, struct action_data *, u64 *);
4248:	static bool actions_match(struct hist_trigger_data *, struct hist_trigger_data *);
2797:	static bool check_track_val_changed(u64, u64);
2789:	static bool check_track_val_max(u64, u64);
750:	static bool check_var_refs(struct hist_trigger_data *);
2849:	static bool cond_snapshot_update(struct trace_array *, void *);
1532:	static int contains_operator(char *);
2697:	static struct field_var *create_field_var(struct hist_trigger_data *, struct trace_event_file *, char *);
2459:	static struct hist_field *create_field_var_hist(struct hist_trigger_data *, char *, char *, char *);
4394:	static struct hist_trigger_data *create_hist_data(unsigned int, struct hist_trigger_attrs *, struct trace_event_file *, bool);
1605:	static struct hist_field *create_hist_field(struct hist_trigger_data *, struct ftrace_event_field *, unsigned long, char *);
3955:	static int create_hist_fields(struct hist_trigger_data *, struct trace_event_file *);
3777:	static int create_key_field(struct hist_trigger_data *, unsigned int, unsigned int, struct trace_event_file *, char *);
3997:	static int create_sort_keys(struct hist_trigger_data *);
4348:	static int create_tracing_map_fields(struct hist_trigger_data *);
3742:	static int create_val_fields(struct hist_trigger_data *, struct trace_event_file *);
2655:	static struct hist_field *create_var(struct hist_trigger_data *, struct trace_event_file *, char *, int, const char *);
3712:	static int create_var_field(struct hist_trigger_data *, unsigned int, struct trace_event_file *, char *, char *);
1829:	static struct hist_field *create_var_ref(struct hist_trigger_data *, struct hist_field *, char *, char *);
4332:	static void destroy_hist_data(struct hist_trigger_data *);
1585:	static void destroy_hist_field(struct hist_field *, unsigned int);
1724:	static void destroy_hist_fields(struct hist_trigger_data *);
1175:	static void destroy_hist_trigger_attrs(struct hist_trigger_attrs *);
5321:	static struct event_trigger_ops *event_hist_get_trigger_ops(char *, char *);
4801:	static int event_hist_open(struct inode *, struct file *);
4541:	static void event_hist_trigger(struct event_trigger_data *, void *, struct ring_buffer_event *);
5257:	static void event_hist_trigger_free(struct event_trigger_ops *, struct event_trigger_data *);
5668:	static int event_hist_trigger_func(struct event_command *, struct trace_event_file *, char *, char *, char *);
5229:	static int event_hist_trigger_init(struct event_trigger_ops *, struct event_trigger_data *);
5299:	static void event_hist_trigger_named_free(struct event_trigger_ops *, struct event_trigger_data *);
5287:	static int event_hist_trigger_named_init(struct event_trigger_ops *, struct event_trigger_data *);
5120:	static int event_hist_trigger_print(struct seq_file *, struct event_trigger_ops *, struct event_trigger_data *);
1463:	static void expr_field_str(struct hist_field *, char *);
1480:	static char *expr_str(struct hist_field *, unsigned int);
784:	static bool field_has_hist_vars(struct hist_field *, unsigned int);
719:	static struct hist_field *find_any_var_ref(struct hist_trigger_data *, unsigned int);
2377:	static struct hist_trigger_data *find_compatible_hist(struct hist_trigger_data *, struct trace_event_file *);
996:	static struct hist_field *find_event_var(struct hist_trigger_data *, char *, char *, char *);
964:	static struct hist_field *find_match_var(struct hist_trigger_data *, char *);
2413:	static struct hist_field *find_synthetic_field_var(struct hist_trigger_data *, char *, char *, char *);
911:	static struct trace_event_file *find_var_file(struct trace_array *, char *, char *, char *);
1441:	static const char *get_hist_field_flags(struct hist_field *, struct hist_field *);
5880:	static void hist_enable_count_trigger(struct event_trigger_data *, void *, struct ring_buffer_event *);
5921:	static struct event_trigger_ops *hist_enable_get_trigger_ops(char *, char *);
5862:	static void hist_enable_trigger(struct event_trigger_data *, void *, struct ring_buffer_event *);
5938:	static void hist_enable_unreg_all(struct trace_event_file *);
163:	static u64 hist_field_counter(struct hist_field *, struct tracing_map_elt *, struct ring_buffer_event *, void *);
642:	static u64 hist_field_cpu(struct hist_field *, struct tracing_map_elt *, struct ring_buffer_event *, void *);
181:	static u64 hist_field_dynstring(struct hist_field *, struct tracing_map_elt *, struct ring_buffer_event *, void *);
203:	static u64 hist_field_log2(struct hist_field *, struct tracing_map_elt *, struct ring_buffer_event *, void *);
229:	static u64 hist_field_minus(struct hist_field *, struct tracing_map_elt *, struct ring_buffer_event *, void *);
1085:	static const char *hist_field_name(struct hist_field *, unsigned int);
155:	static u64 hist_field_none(struct hist_field *, struct tracing_map_elt *, struct ring_buffer_event *, void *);
215:	static u64 hist_field_plus(struct hist_field *, struct tracing_map_elt *, struct ring_buffer_event *, void *);
5092:	static void hist_field_print(struct seq_file *, struct hist_field *);
193:	static u64 hist_field_pstring(struct hist_field *, struct tracing_map_elt *, struct ring_buffer_event *, void *);
271:	static u64 hist_field_s16(struct hist_field *, struct tracing_map_elt *, struct ring_buffer_event *, void *);
269:	static u64 hist_field_s32(struct hist_field *, struct tracing_map_elt *, struct ring_buffer_event *, void *);
267:	static u64 hist_field_s64(struct hist_field *, struct tracing_map_elt *, struct ring_buffer_event *, void *);
273:	static u64 hist_field_s8(struct hist_field *, struct tracing_map_elt *, struct ring_buffer_event *, void *);
171:	static u64 hist_field_string(struct hist_field *, struct tracing_map_elt *, struct ring_buffer_event *, void *);
626:	static u64 hist_field_timestamp(struct hist_field *, struct tracing_map_elt *, struct ring_buffer_event *, void *);
272:	static u64 hist_field_u16(struct hist_field *, struct tracing_map_elt *, struct ring_buffer_event *, void *);
270:	static u64 hist_field_u32(struct hist_field *, struct tracing_map_elt *, struct ring_buffer_event *, void *);
268:	static u64 hist_field_u64(struct hist_field *, struct tracing_map_elt *, struct ring_buffer_event *, void *);
274:	static u64 hist_field_u8(struct hist_field *, struct tracing_map_elt *, struct ring_buffer_event *, void *);
243:	static u64 hist_field_unary_minus(struct hist_field *, struct tracing_map_elt *, struct ring_buffer_event *, void *);
1022:	static u64 hist_field_var_ref(struct hist_field *, struct tracing_map_elt *, struct ring_buffer_event *, void *);
5432:	static int hist_register_trigger(char *, struct event_trigger_ops *, struct event_trigger_data *, struct trace_event_file *);
4776:	static int hist_show(struct seq_file *, void *);
1378:	static int hist_trigger_elt_data_alloc(struct tracing_map_elt *);
1371:	static void hist_trigger_elt_data_free(struct tracing_map_elt *);
1427:	static void hist_trigger_elt_data_init(struct tracing_map_elt *);
4448:	static void hist_trigger_elt_update(struct hist_trigger_data *, struct tracing_map_elt *, void *, struct ring_buffer_event *, u64 *);
4694:	static void hist_trigger_entry_print(struct seq_file *, struct hist_trigger_data *, void *, struct tracing_map_elt *);
5361:	static bool hist_trigger_match(bool, struct event_trigger_data *, struct event_trigger_data *, struct event_trigger_data *, struct event_trigger_data *, struct event_trigger_data *);
4613:	static void hist_trigger_print_key(struct seq_file *, struct hist_trigger_data *, void *, struct tracing_map_elt *);
4595:	static void hist_trigger_stacktrace_print(struct seq_file *, unsigned long *, unsigned int);
5636:	static void hist_unreg_all(struct trace_event_file *);
5584:	static void hist_unregister_trigger(char *, struct event_trigger_ops *, struct event_trigger_data *, struct trace_event_file *);
1742:	static int init_var_ref(struct hist_field *, struct hist_field *, char *, char *);
3981:	static int is_descending(struct trace_array *, const char *);
1861:	static bool is_var_ref(char *);
547:	static void last_cmd_set(struct trace_event_file *, char *);
1889:	static char *local_field_var_ref(struct hist_trigger_data *, char *, char *, char *);
3609:	static struct action_data *onmatch_parse(struct trace_array *, char *);
2993:	static void ontrack_action(struct hist_trigger_data *, struct tracing_map_elt *, void *, struct ring_buffer_event *, void *, struct action_data *, u64 *);
3100:	static int parse_action_params(struct trace_array *, char *, struct action_data *);
4101:	static int parse_actions(struct hist_trigger_data *);
1217:	static int parse_assignment(struct trace_array *, char *, struct hist_trigger_attrs *);
2030:	static struct hist_field *parse_atom(struct hist_trigger_data *, struct trace_event_file *, char *, unsigned long *, char *);
2207:	static struct hist_field *parse_expr(struct hist_trigger_data *, struct trace_event_file *, char *, unsigned long, char *, unsigned int);
1940:	static struct ftrace_event_field *parse_field(struct hist_trigger_data *, struct trace_event_file *, char *, unsigned long *);
1288:	static struct hist_trigger_attrs *parse_hist_trigger_attrs(struct trace_array *, char *);
1156:	static int parse_map_size(char *);
2096:	static struct hist_field *parse_unary(struct hist_trigger_data *, struct trace_event_file *, char *, unsigned long, char *, unsigned int);
3902:	static int parse_var_defs(struct hist_trigger_data *);
4195:	static void print_action_spec(struct seq_file *, struct hist_trigger_data *, struct action_data *);
4306:	static void print_actions_spec(struct seq_file *, struct hist_trigger_data *);
848:	static void remove_hist_vars(struct hist_trigger_data *);
1039:	static bool resolve_var_refs(struct hist_trigger_data *, void *, u64 *, bool);
824:	static int save_hist_vars(struct hist_trigger_data *);
2882:	static void save_track_data_snapshot(struct hist_trigger_data *, struct tracing_map_elt *, void *, struct ring_buffer_event *, void *, struct action_data *, u64 *);
2646:	static void save_track_data_vars(struct hist_trigger_data *, struct tracing_map_elt *, void *, struct ring_buffer_event *, void *, struct action_data *, u64 *);
3432:	static int trace_action_create(struct hist_trigger_data *, struct action_data *);
502:	static struct track_data *track_data_alloc(unsigned int, struct action_data *, struct hist_trigger_data *);
3050:	static int track_data_create(struct hist_trigger_data *, struct action_data *);
3025:	static void track_data_destroy(struct hist_trigger_data *, struct action_data *);
484:	static void track_data_free(struct track_data *);
3251:	static struct action_data *track_data_parse(struct hist_trigger_data *, char *, enum handler_id);
2960:	static void track_data_print(struct seq_file *, struct hist_trigger_data *, struct tracing_map_elt *, struct action_data *);
2919:	static void track_data_snapshot_print(struct seq_file *, struct hist_trigger_data *);

File kernel/trace/trace_events_synth.c:
1057:	int __synth_event_gen_cmd_start(struct dynevent_cmd *, const char *, struct module *, ...);
730:	struct synth_event *find_synth_event(const char *);
920:	int synth_event_add_field(struct dynevent_cmd *, const char *, const char *);
964:	int synth_event_add_field_str(struct dynevent_cmd *, const char *);
1007:	int synth_event_add_fields(struct dynevent_cmd *, struct synth_field_desc *, unsigned int);
1869:	int synth_event_add_next_val(u64, struct synth_event_trace_state *);
1904:	int synth_event_add_val(const char *, u64, struct synth_event_trace_state *);
1428:	void synth_event_cmd_init(struct dynevent_cmd *, char *, int);
1301:	int synth_event_create(const char *, struct synth_field_desc *, unsigned int, struct module *);
1352:	int synth_event_delete(const char *);
1126:	int synth_event_gen_cmd_array_start(struct dynevent_cmd *, const char *, struct module *, struct synth_field_desc *, unsigned int);
1521:	int synth_event_trace(struct trace_event_file *, unsigned int, ...);
1625:	int synth_event_trace_array(struct trace_event_file *, u64 *, unsigned int);
1931:	int synth_event_trace_end(struct synth_event_trace_state *);
1727:	int synth_event_trace_start(struct trace_event_file *, struct synth_event_trace_state *);
1194:	static int __create_synth_event(int, const char *, const char **);
520:	static int __set_synth_event_print_fmt(struct synth_event *, char *, int);
1751:	static int __synth_event_add_val(const char *, u64, struct synth_event_trace_state *);
1978:	static int __synth_event_show(struct seq_file *, struct synth_event *);
834:	static struct synth_event *alloc_synth_event(const char *, int, struct synth_field **);
1386:	static int create_or_delete_synth_event(int, char **);
1942:	static int create_synth_event(int, const char **);
815:	static void free_synth_event(struct synth_event *);
582:	static struct synth_field *parse_synth_field(int, const char **, int *);
311:	static enum print_line_t print_synth_event(struct trace_iterator *, int, struct trace_event *);
752:	static int register_synth_event(struct synth_event *);
1163:	static int save_cmdstr(int, const char *, const char **);
555:	static int set_synth_event_print_fmt(struct trace_event_call *);
892:	static int synth_event_check_arg_fn(void *);
111:	static int synth_event_define_fields(struct trace_event_call *);
90:	static bool synth_event_is_busy(struct dyn_event *);
97:	static bool synth_event_match(const char *, const char *, int, const char **, struct dyn_event *);
1961:	static int synth_event_release(struct dyn_event *);
1401:	static int synth_event_run_command(struct dynevent_cmd *);
2006:	static int synth_event_show(struct seq_file *, struct dyn_event *);
2032:	static int synth_events_open(struct inode *, struct file *);
2015:	static int synth_events_seq_show(struct seq_file *, void *);
2049:	static ssize_t synth_events_write(struct file *, const char *, size_t, loff_t *);
244:	static const char *synth_field_fmt(char *);
200:	static int synth_field_size(char *);
165:	static int synth_field_string_size(char *);
430:	static void trace_event_raw_event_synth(void *, u64 *, unsigned int *);
2081:	static int trace_events_synth_init(void);
2069:	static int trace_events_synth_init_early(void);
394:	static unsigned int trace_string(struct synth_trace_event *, struct synth_event *, char *, bool, unsigned int, unsigned int *);

File kernel/trace/trace_events_trigger.c:
481:	void clear_event_triggers(struct trace_array *);
864:	void del_named_trigger(struct event_trigger_data *);
1510:	int event_enable_register_trigger(char *, struct event_trigger_ops *, struct event_trigger_data *, struct trace_event_file *);
1313:	void event_enable_trigger_free(struct event_trigger_ops *, struct event_trigger_data *);
1359:	int event_enable_trigger_func(struct event_command *, struct trace_event_file *, char *, char *, char *);
1287:	int event_enable_trigger_print(struct seq_file *, struct event_trigger_ops *, struct event_trigger_data *);
1552:	void event_enable_unregister_trigger(char *, struct event_trigger_ops *, struct event_trigger_data *, struct trace_event_file *);
418:	int event_trigger_init(struct event_trigger_ops *, struct event_trigger_data *);
56:	enum event_trigger_type event_triggers_call(struct trace_event_file *, void *, struct ring_buffer_event *);
99:	void event_triggers_post_call(struct trace_event_file *, enum event_trigger_type);
807:	struct event_trigger_data *find_named_trigger(const char *);
934:	struct event_trigger_data *get_named_trigger_data(struct event_trigger_data *);
830:	bool is_named_trigger(struct event_trigger_data *);
897:	void pause_named_trigger(struct event_trigger_data *);
329:	int register_event_command(struct event_command *);
1658:	int register_trigger_cmds(void);
849:	int save_named_trigger(const char *, struct event_trigger_data *);
927:	void set_named_trigger_data(struct event_trigger_data *, struct event_trigger_data *);
738:	int set_trigger_filter(char *, struct event_trigger_data *, struct trace_event_file *);
447:	int trace_event_trigger_enable_disable(struct trace_event_file *, int);
20:	void trigger_data_free(struct event_trigger_data *);
217:	int trigger_process_regex(struct trace_event_file *, char *);
911:	void unpause_named_trigger(struct event_trigger_data *);
352:	int unregister_event_command(struct event_command *);
506:	void update_cond_flag(struct trace_event_file *);
872:	static void __pause_named_trigger(struct event_trigger_data *, bool);
1269:	static void event_enable_count_trigger(struct event_trigger_data *, void *, struct ring_buffer_event *);
1583:	static struct event_trigger_ops *event_enable_get_trigger_ops(char *, char *);
1257:	static void event_enable_trigger(struct event_trigger_data *, void *, struct ring_buffer_event *);
628:	static int event_trigger_callback(struct event_command *, struct trace_event_file *, char *, char *, char *);
436:	static void event_trigger_free(struct event_trigger_ops *, struct event_trigger_data *);
305:	static int event_trigger_open(struct inode *, struct file *);
386:	static int event_trigger_print(const char *, struct seq_file *, void *, char *);
176:	static int event_trigger_regex_open(struct file *, struct inode *);
312:	static int event_trigger_release(struct inode *, struct file *);
298:	static ssize_t event_trigger_write(struct file *, const char *, size_t, loff_t *);
1036:	static struct event_trigger_ops *onoff_get_trigger_ops(char *, char *);
1099:	static int register_snapshot_trigger(char *, struct event_trigger_ops *, struct event_trigger_data *, struct trace_event_file *);
541:	static int register_trigger(char *, struct event_trigger_ops *, struct event_trigger_data *, struct trace_event_file *);
1630:	static int register_trigger_enable_disable_cmds(void);
1644:	static int register_trigger_traceon_traceoff_cmds(void);
1086:	static void snapshot_count_trigger(struct event_trigger_data *, void *, struct ring_buffer_event *);
1132:	static struct event_trigger_ops *snapshot_get_trigger_ops(char *, char *);
1074:	static void snapshot_trigger(struct event_trigger_data *, void *, struct ring_buffer_event *);
1110:	static int snapshot_trigger_print(struct seq_file *, struct event_trigger_ops *, struct event_trigger_data *);
1186:	static void stacktrace_count_trigger(struct event_trigger_data *, void *, struct ring_buffer_event *);
1221:	static struct event_trigger_ops *stacktrace_get_trigger_ops(char *, char *);
1179:	static void stacktrace_trigger(struct event_trigger_data *, void *, struct ring_buffer_event *);
1199:	static int stacktrace_trigger_print(struct seq_file *, struct event_trigger_ops *, struct event_trigger_data *);
976:	static void traceoff_count_trigger(struct event_trigger_data *, void *, struct ring_buffer_event *);
966:	static void traceoff_trigger(struct event_trigger_data *, void *, struct ring_buffer_event *);
1000:	static int traceoff_trigger_print(struct seq_file *, struct event_trigger_ops *, struct event_trigger_data *);
950:	static void traceon_count_trigger(struct event_trigger_data *, void *, struct ring_buffer_event *);
940:	static void traceon_trigger(struct event_trigger_data *, void *, struct ring_buffer_event *);
992:	static int traceon_trigger_print(struct seq_file *, struct event_trigger_ops *, struct event_trigger_data *);
115:	static void *trigger_next(struct seq_file *, void *, loff_t *);
147:	static int trigger_show(struct seq_file *, void *);
126:	static void *trigger_start(struct seq_file *, loff_t *);
142:	static void trigger_stop(struct seq_file *, void *);
588:	static void unregister_trigger(char *, struct event_trigger_ops *, struct event_trigger_data *, struct trace_event_file *);

File kernel/trace/trace_export.c:
186:	bool ftrace_event_is_function(struct trace_event_call *);
18:	static int ftrace_event_register(struct trace_event_call *, enum trace_reg, void *);

File kernel/trace/trace_functions.c:
37:	int ftrace_allocate_ftrace_ops(struct trace_array *);
65:	int ftrace_create_function_files(struct trace_array *, struct dentry *);
83:	void ftrace_destroy_function_files(struct trace_array *);
59:	void ftrace_free_ftrace_ops(struct trace_array *);
812:	int init_function_trace(void);
577:	static void ftrace_count_free(struct ftrace_probe_ops *, struct trace_array *, unsigned long, void *);
561:	static int ftrace_count_init(struct ftrace_probe_ops *, struct trace_array *, unsigned long, void *, void **);
728:	static int ftrace_cpudump_callback(struct trace_array *, struct ftrace_hash *, char *, char *, char *, int);
553:	static int ftrace_cpudump_print(struct seq_file *, unsigned long, struct ftrace_probe_ops *, void *);
494:	static void ftrace_cpudump_probe(unsigned long, unsigned long, struct trace_array *, struct ftrace_probe_ops *, void *);
712:	static int ftrace_dump_callback(struct trace_array *, struct ftrace_hash *, char *, char *, char *, int);
546:	static int ftrace_dump_print(struct seq_file *, unsigned long, struct ftrace_probe_ops *, void *);
484:	static void ftrace_dump_probe(unsigned long, unsigned long, struct trace_array *, struct ftrace_probe_ops *, void *);
416:	static void ftrace_stacktrace(unsigned long, unsigned long, struct trace_array *, struct ftrace_probe_ops *, void *);
697:	static int ftrace_stacktrace_callback(struct trace_array *, struct ftrace_hash *, char *, char *, char *, int);
424:	static void ftrace_stacktrace_count(unsigned long, unsigned long, struct trace_array *, struct ftrace_probe_ops *, void *);
539:	static int ftrace_stacktrace_print(struct seq_file *, unsigned long, struct ftrace_probe_ops *, void *);
678:	static int ftrace_trace_onoff_callback(struct trace_array *, struct ftrace_hash *, char *, char *, char *, int);
639:	static int ftrace_trace_probe_callback(struct trace_array *, struct ftrace_probe_ops *, char *, char *, int, char *, struct ftrace_hash *);
374:	static void ftrace_traceoff(unsigned long, unsigned long, struct trace_array *, struct ftrace_probe_ops *, void *);
355:	static void ftrace_traceoff_count(unsigned long, unsigned long, struct trace_array *, struct ftrace_probe_ops *, void *);
532:	static int ftrace_traceoff_print(struct seq_file *, unsigned long, struct ftrace_probe_ops *, void *);
363:	static void ftrace_traceon(unsigned long, unsigned long, struct trace_array *, struct ftrace_probe_ops *, void *);
347:	static void ftrace_traceon_count(unsigned long, unsigned long, struct trace_array *, struct ftrace_probe_ops *, void *);
524:	static int ftrace_traceon_print(struct seq_file *, unsigned long, struct ftrace_probe_ops *, void *);
240:	static int func_set_flag(struct trace_array *, u32, u32, int);
180:	static void function_stack_trace_call(unsigned long, unsigned long, struct ftrace_ops *, struct pt_regs *);
131:	static void function_trace_call(unsigned long, unsigned long, struct ftrace_ops *, struct pt_regs *);
89:	static int function_trace_init(struct trace_array *);
118:	static void function_trace_reset(struct trace_array *);
125:	static void function_trace_start(struct trace_array *);
768:	static int init_func_cmd_traceon(void);

File kernel/trace/trace_functions_graph.c:
97:	int __trace_graph_entry(struct trace_array *, struct ftrace_graph_ent *, unsigned int);
216:	void __trace_graph_return(struct trace_array *, struct ftrace_graph_ret *, unsigned int);
1240:	void graph_trace_close(struct trace_iterator *);
1198:	void graph_trace_open(struct trace_iterator *);
1037:	enum print_line_t print_graph_function_flags(struct trace_iterator *, u32);
1179:	void print_graph_headers_flags(struct seq_file *, u32);
263:	void set_graph_array(struct trace_array *);
126:	int trace_graph_entry(struct ftrace_graph_ent *);
209:	void trace_graph_function(struct trace_array *, unsigned long, unsigned long, unsigned int);
235:	void trace_graph_return(struct ftrace_graph_ret *);
559:	void trace_print_graph_duration(unsigned long long, struct trace_seq *);
1133:	static void __print_graph_headers_flags(struct seq_file *, u32, struct trace_array *, struct trace_array *);
1251:	static int func_graph_set_flag(struct trace_array *, u32, u32, int);
1317:	static ssize_t graph_depth_read(struct file *, char *, size_t, loff_t *);
1299:	static ssize_t graph_depth_write(struct file *, const char *, size_t, loff_t *);
298:	static int graph_trace_init(struct trace_array *);
314:	static void graph_trace_reset(struct trace_array *);
323:	static int graph_trace_update_thresh(struct trace_array *);
1350:	static int init_graph_trace(void);
1335:	static int init_graph_tracefs(void);
968:	static enum print_line_t print_graph_comment(struct trace_seq *, struct trace_entry *, struct trace_iterator *, u32);
592:	static void print_graph_duration(unsigned long long, struct trace_seq *, u32, struct trace_array *);
863:	static enum print_line_t print_graph_entry(struct ftrace_graph_ent_entry *, struct trace_seq *, struct trace_iterator *, u32);
1098:	static enum print_line_t print_graph_function(struct trace_iterator *);
1104:	static enum print_line_t print_graph_function_event(struct trace_iterator *, int, struct trace_event *);
1174:	static void print_graph_headers(struct seq_file *);
511:	static void print_graph_irq(struct trace_iterator *, unsigned long, enum trace_type, int, pid_t, u32);
343:	static void print_graph_proc(struct trace_seq *, pid_t);
717:	static void print_graph_prologue(struct trace_iterator *, struct trace_seq *, int, unsigned long, u32);
899:	static enum print_line_t print_graph_return(struct ftrace_graph_ret *, struct trace_seq *, struct trace_iterator *, u32, struct trace_entry *, struct trace_entry *);
272:	static void trace_graph_thresh_return(struct ftrace_graph_ret *);

File kernel/trace/trace_hwlat.c:
137:	void trace_hwlat_callback(bool);
164:	static int get_sample(void);
415:	static ssize_t hwlat_read(struct file *, char *, size_t, loff_t *);
584:	static int hwlat_tracer_init(struct trace_array *);
609:	static void hwlat_tracer_reset(struct trace_array *);
568:	static void hwlat_tracer_start(struct trace_array *);
577:	static void hwlat_tracer_stop(struct trace_array *);
452:	static ssize_t hwlat_width_write(struct file *, const char *, size_t, loff_t *);
491:	static ssize_t hwlat_window_write(struct file *, const char *, size_t, loff_t *);
630:	static int init_hwlat_tracer(void);
534:	static int init_tracefs(void);
325:	static int kthread_fn(void *);
278:	static void move_to_next_cpu(void);
360:	static int start_kthread(struct trace_array *);
104:	static void trace_hwlat_sample(struct hwlat_sample *);

File kernel/trace/trace_kdb.c:
23:	static void ftrace_dump_buf(int, long);
95:	static int kdb_ftdump(int, const char **);
150:	static int kdb_ftrace_register(void);

File kernel/trace/trace_kprobe.c:
1041:	int __kprobe_event_add_fields(struct dynevent_cmd *, ...);
972:	int __kprobe_event_gen_cmd_start(struct dynevent_cmd *, bool, const char *, const char *, ...);
1657:	int bpf_get_kprobe_info(const struct perf_event *, u32 *, const char **, u64 *, u64 *, bool);
1804:	struct trace_event_call *create_local_trace_kprobe(char *, void *, unsigned long, bool);
1845:	void destroy_local_trace_kprobe(struct trace_event_call *);
942:	void kprobe_event_cmd_init(struct dynevent_cmd *, char *, int);
1085:	int kprobe_event_delete(const char *);
229:	bool trace_kprobe_error_injectable(struct trace_event_call *);
220:	bool trace_kprobe_on_func_entry(struct trace_event_call *);
332:	static void __disable_trace_kprobe(struct trace_probe *);
482:	static int __register_trace_kprobe(struct trace_kprobe *);
520:	static void __unregister_trace_kprobe(struct trace_kprobe *);
439:	static bool __within_notrace_func(unsigned long);
257:	static struct trace_kprobe *alloc_trace_kprobe(const char *, const char *, void *, const char *, unsigned long, int, int, bool);
589:	static int append_trace_kprobe(struct trace_kprobe *, struct trace_kprobe *);
917:	static int create_or_delete_trace_kprobe(int, char **);
403:	static int disable_trace_kprobe(struct trace_event_call *, struct trace_event_file *);
1864:	static void enable_boot_kprobe_events(void);
352:	static int enable_trace_kprobe(struct trace_event_call *, struct trace_event_file *);
305:	static struct trace_kprobe *find_trace_kprobe(const char *, const char *);
1922:	static int init_kprobe_trace(void);
1906:	static int init_kprobe_trace_early(void);
1719:	static int kprobe_dispatcher(struct kprobe *, struct pt_regs *);
1540:	static int kprobe_event_define_fields(struct trace_event_call *);
1575:	static int kprobe_perf_func(struct trace_kprobe *, struct pt_regs *);
1693:	static int kprobe_register(struct trace_event_call *, enum trace_reg, void *);
1415:	static void kprobe_trace_func(struct trace_kprobe *, struct pt_regs *);
1737:	static int kretprobe_dispatcher(struct kretprobe_instance *, struct pt_regs *);
1555:	static int kretprobe_event_define_fields(struct trace_event_call *);
1624:	static void kretprobe_perf_func(struct trace_kprobe *, struct kretprobe_instance *, struct pt_regs *);
1462:	static void kretprobe_trace_func(struct trace_kprobe *, struct kretprobe_instance *, struct pt_regs *);
1474:	static enum print_line_t print_kprobe_event(struct trace_iterator *, int, struct trace_event *);
1504:	static enum print_line_t print_kretprobe_event(struct trace_iterator *, int, struct trace_event *);
1148:	static int probes_open(struct inode *, struct file *);
1182:	static int probes_profile_seq_show(struct seq_file *, void *);
1131:	static int probes_seq_show(struct seq_file *, void *);
1165:	static ssize_t probes_write(struct file *, const char *, size_t, loff_t *);
1332:	static int process_fetch_insn(struct fetch_insn *, struct pt_regs *, void *, void *);
1206:	static int profile_open(struct inode *, struct file *);
627:	static int register_trace_kprobe(struct trace_kprobe *);
29:	static int set_kprobe_boot_events(char *);
718:	static int trace_kprobe_create(int, const char **);
135:	static bool trace_kprobe_is_busy(struct dyn_event *);
164:	static bool trace_kprobe_match(const char *, const char *, int, const char **, struct dyn_event *);
676:	static int trace_kprobe_module_callback(void *, unsigned long, struct notifier_block *);
1095:	static int trace_kprobe_release(struct dyn_event *);
928:	static int trace_kprobe_run_command(struct dynevent_cmd *);
1105:	static int trace_kprobe_show(struct seq_file *, struct dyn_event *);
536:	static int unregister_trace_kprobe(struct trace_kprobe *);
456:	static bool within_notrace_func(struct trace_kprobe *);

File kernel/trace/trace_nop.c:
64:	static int nop_set_flag(struct trace_array *, u32, u32, int);
47:	static int nop_trace_init(struct trace_array *);
54:	static void nop_trace_reset(struct trace_array *);

File kernel/trace/trace_osnoise.c:
938:	int osnoise_arch_register(void);
946:	void osnoise_arch_unregister(void);
875:	void osnoise_trace_irq_entry(int);
898:	void osnoise_trace_irq_exit(int, const char *);
835:	void trace_osnoise_callback(bool);
607:	static void __timerlat_dump_stack(struct trace_buffer *, struct trace_stack *, unsigned int);
472:	static void __trace_osnoise_sample(struct osnoise_sample *, struct trace_buffer *);
2320:	static int init_osnoise_tracer(void);
2025:	static int init_tracefs(void);
1771:	static int osnoise_cpu_die(unsigned int);
1762:	static int osnoise_cpu_init(unsigned int);
1805:	static ssize_t osnoise_cpus_read(struct file *, char *, size_t, loff_t *);
1853:	static ssize_t osnoise_cpus_write(struct file *, const char *, size_t, loff_t *);
2074:	static int osnoise_hook_events(void);
1733:	static void osnoise_hotplug_workfn(struct work_struct *);
1426:	static int osnoise_main(void *);
92:	static int osnoise_register_instance(struct trace_array *);
2198:	static int osnoise_tracer_init(struct trace_array *);
2174:	static void osnoise_tracer_start(struct trace_array *);
2192:	static void osnoise_tracer_stop(struct trace_array *);
119:	static void osnoise_unregister_instance(struct trace_array *);
2109:	static int osnoise_workload_start(void);
2148:	static void osnoise_workload_stop(void);
427:	static void print_osnoise_headers(struct seq_file *);
516:	static void print_timerlat_headers(struct seq_file *);
1269:	static int run_osnoise(void);
1671:	static int start_kthread(unsigned int);
1704:	static int start_per_cpu_kthreads(void);
1656:	static void stop_per_cpu_kthreads(void);
1461:	static enum hrtimer_restart timerlat_irq(struct hrtimer *);
1577:	static int timerlat_main(void *);
2266:	static int timerlat_tracer_init(struct trace_array *);
2287:	static void timerlat_tracer_reset(struct trace_array *);
2229:	static void timerlat_tracer_start(struct trace_array *);
2249:	static void timerlat_tracer_stop(struct trace_array *);
918:	static void trace_irqentry_callback(void *, int, struct irqaction *);
929:	static void trace_irqexit_callback(void *, int, struct irqaction *, int);
1151:	static void trace_sched_switch_callback(void *, bool, struct task_struct *, struct task_struct *);
1006:	static void trace_softirq_entry_callback(void *, unsigned int);
1029:	static void trace_softirq_exit_callback(void *, unsigned int);
553:	static void trace_timerlat_sample(struct timerlat_sample *);
1546:	static int wait_next_period(struct timerlat_variables *);

File kernel/trace/trace_output.c:
797:	int __unregister_trace_event(struct trace_event *);
658:	struct trace_event *ftrace_find_event(int);
728:	int register_trace_event(struct trace_event *);
416:	int seq_print_ip_sym(struct trace_seq *, unsigned long, unsigned long);
703:	void trace_event_read_lock(void);
708:	void trace_event_read_unlock(void);
522:	char trace_find_mark(unsigned long long);
822:	enum print_line_t trace_nop_print(struct trace_iterator *, int, struct trace_event *);
326:	int trace_output_call(struct trace_iterator *, char *, char *, ...);
233:	const char *trace_print_array_seq(struct trace_seq *, const void *, int, size_t);
193:	const char *trace_print_bitmask_seq(struct trace_seq *, void *, unsigned int);
38:	enum print_line_t trace_print_bprintk_msg_only(struct trace_iterator *);
25:	enum print_line_t trace_print_bputs_msg_only(struct trace_iterator *);
580:	int trace_print_context(struct trace_iterator *);
65:	const char *trace_print_flags_seq(struct trace_seq *, const char *, unsigned long, const struct trace_print_flags *);
278:	const char *trace_print_hex_dump_seq(struct trace_seq *, const char *, int, int, int, const void *, size_t, bool);
217:	const char *trace_print_hex_seq(struct trace_seq *, const unsigned char *, int, bool);
618:	int trace_print_lat_context(struct trace_iterator *);
440:	int trace_print_lat_fmt(struct trace_seq *, struct trace_entry *);
51:	enum print_line_t trace_print_printk_msg_only(struct trace_iterator *);
103:	const char *trace_print_symbols_seq(struct trace_seq *, unsigned long, const struct trace_print_flags *);
292:	int trace_raw_output_prep(struct trace_iterator *, struct trace_event *);
808:	int unregister_trace_event(struct trace_event *);
1498:	static int init_events(void);
536:	static int lat_print_timestamp(struct trace_iterator *, u64);
357:	static void seq_print_sym(struct trace_seq *, unsigned long, bool);
383:	static int seq_print_user_ip(struct trace_seq *, struct mm_struct *, unsigned long, unsigned long);
1373:	static enum print_line_t trace_bprint_print(struct trace_iterator *, int, struct trace_event *);
1391:	static enum print_line_t trace_bprint_raw(struct trace_iterator *, int, struct trace_event *);
1329:	static enum print_line_t trace_bputs_print(struct trace_iterator *, int, struct trace_event *);
1347:	static enum print_line_t trace_bputs_raw(struct trace_iterator *, int, struct trace_event *);
1002:	static enum print_line_t trace_ctx_hex(struct trace_iterator *, int, struct trace_event *);
932:	static enum print_line_t trace_ctx_print(struct trace_iterator *, int, struct trace_event *);
966:	static enum print_line_t trace_ctx_raw(struct trace_iterator *, int, struct trace_event *);
1014:	static enum print_line_t trace_ctxwake_bin(struct trace_iterator *, int, struct trace_event *);
979:	static int trace_ctxwake_hex(struct trace_iterator *, char);
906:	static enum print_line_t trace_ctxwake_print(struct trace_iterator *, char *);
944:	static int trace_ctxwake_raw(struct trace_iterator *, char);
879:	static enum print_line_t trace_fn_bin(struct trace_iterator *, int, struct trace_event *);
865:	static enum print_line_t trace_fn_hex(struct trace_iterator *, int, struct trace_event *);
851:	static enum print_line_t trace_fn_raw(struct trace_iterator *, int, struct trace_event *);
831:	static enum print_line_t trace_fn_trace(struct trace_iterator *, int, struct trace_event *);
1149:	static enum print_line_t trace_hwlat_print(struct trace_iterator *, int, struct trace_event *);
1183:	static enum print_line_t trace_hwlat_raw(struct trace_iterator *, int, struct trace_event *);
1213:	static enum print_line_t trace_osnoise_print(struct trace_iterator *, int, struct trace_event *);
1250:	static enum print_line_t trace_osnoise_raw(struct trace_iterator *, int, struct trace_event *);
1416:	static enum print_line_t trace_print_print(struct trace_iterator *, int, struct trace_event *);
1430:	static enum print_line_t trace_print_raw(struct trace_iterator *, int, struct trace_event *);
1452:	static enum print_line_t trace_raw_data(struct trace_iterator *, int, struct trace_event *);
1059:	static enum print_line_t trace_stack_print(struct trace_iterator *, int, struct trace_event *);
1283:	static enum print_line_t trace_timerlat_print(struct trace_iterator *, int, struct trace_event *);
1301:	static enum print_line_t trace_timerlat_raw(struct trace_iterator *, int, struct trace_event *);
1095:	static enum print_line_t trace_user_stack_print(struct trace_iterator *, int, struct trace_event *);
1008:	static enum print_line_t trace_wake_hex(struct trace_iterator *, int, struct trace_event *);
938:	static enum print_line_t trace_wake_print(struct trace_iterator *, int, struct trace_event *);
972:	static enum print_line_t trace_wake_raw(struct trace_iterator *, int, struct trace_event *);

File kernel/trace/trace_printk.c:
218:	int __ftrace_vbprintk(unsigned long, const char *, struct __va_list_tag *);
245:	int __ftrace_vprintk(unsigned long, const char *, struct __va_list_tag *);
200:	int __trace_bprintk(unsigned long, const char *, ...);
230:	int __trace_printk(unsigned long, const char *, ...);
190:	void trace_printk_control(bool);
350:	static int ftrace_formats_open(struct inode *, struct file *);
53:	static void hold_module_trace_bprintk_format(const char **, const char **);
384:	static int init_trace_printk(void);
368:	static int init_trace_printk_function_export(void);
88:	static int module_trace_bprintk_format_notify(struct notifier_block *, unsigned long, void *);
294:	static void *t_next(struct seq_file *, void *, loff_t *);
300:	static int t_show(struct seq_file *, void *);
288:	static void *t_start(struct seq_file *, loff_t *);
337:	static void t_stop(struct seq_file *, void *);

File kernel/trace/trace_probe.c:
163:	void __trace_probe_log_err(int, int);
46:	int print_type_s16(struct trace_seq *, void *, void *);
47:	int print_type_s32(struct trace_seq *, void *, void *);
48:	int print_type_s64(struct trace_seq *, void *, void *);
45:	int print_type_s8(struct trace_seq *, void *, void *);
62:	int print_type_string(struct trace_seq *, void *, void *);
54:	int print_type_symbol(struct trace_seq *, void *, void *);
42:	int print_type_u16(struct trace_seq *, void *, void *);
43:	int print_type_u32(struct trace_seq *, void *, void *);
44:	int print_type_u64(struct trace_seq *, void *, void *);
41:	int print_type_u8(struct trace_seq *, void *, void *);
50:	int print_type_x16(struct trace_seq *, void *, void *);
51:	int print_type_x32(struct trace_seq *, void *, void *);
52:	int print_type_x64(struct trace_seq *, void *, void *);
49:	int print_type_x8(struct trace_seq *, void *, void *);
1073:	int trace_probe_add_file(struct trace_probe *, struct trace_event_file *);
955:	int trace_probe_append(struct trace_probe *, struct trace_probe *);
977:	void trace_probe_cleanup(struct trace_probe *);
1124:	int trace_probe_compare_arg_type(struct trace_probe *, struct trace_probe *);
1088:	struct event_file_link *trace_probe_get_file_link(struct trace_probe *, struct trace_event_file *);
988:	int trace_probe_init(struct trace_probe *, const char *, const char *, bool);
153:	void trace_probe_log_clear(void);
145:	void trace_probe_log_init(const char *, int, const char **);
158:	void trace_probe_log_set_index(int);
1145:	bool trace_probe_match_command_args(struct trace_probe *, int, const char **);
1051:	int trace_probe_register_event_call(struct trace_probe *);
1101:	int trace_probe_remove_file(struct trace_probe *, struct trace_event_file *);
969:	void trace_probe_unlink(struct trace_probe *);
922:	int traceprobe_define_arg_fields(struct trace_event_call *, size_t, struct trace_probe *);
789:	void traceprobe_free_probe_arg(struct probe_arg *);
229:	int traceprobe_parse_event_name(const char **, const char **, char *, int);
748:	int traceprobe_parse_probe_arg(struct trace_probe *, int, char *, unsigned int);
903:	int traceprobe_set_print_fmt(struct trace_probe *, bool);
208:	int traceprobe_split_symbol_offset(char *, long *);
805:	int traceprobe_update_arg(struct probe_arg *);
340:	static int __parse_imm_string(char *, char **, int);
841:	static int __set_print_fmt(struct trace_probe *, char *, int, bool);
101:	static const struct fetch_type *find_fetch_type(const char *);
354:	static int parse_probe_arg(char *, struct fetch_insn **, struct fetch_insn *, unsigned int, int, const struct fetch_type *);
272:	static int parse_probe_vars(char *, struct fetch_insn *, unsigned int, int, const struct fetch_type *);
543:	static int traceprobe_parse_probe_arg_body(char *, ssize_t *, struct probe_arg *, unsigned int, int);

File kernel/trace/trace_sched_switch.c:
131:	void tracing_start_cmdline_record(void);
141:	void tracing_start_tgid_record(void);
136:	void tracing_stop_cmdline_record(void);
146:	void tracing_stop_tgid_record(void);
24:	static void probe_sched_switch(void *, bool, struct task_struct *, struct task_struct *);
38:	static void probe_sched_wakeup(void *, struct task_struct *);
50:	static int tracing_sched_register(void);
90:	static void tracing_start_sched_switch(int);

File kernel/trace/trace_sched_wakeup.c:
497:	static void __wakeup_reset(struct trace_array *);
68:	static int func_prolog_preempt_disable(struct trace_array *, struct trace_array_cpu **, unsigned int *);
799:	static int init_wakeup_tracer(void);
523:	static void probe_wakeup(void *, struct task_struct *);
363:	static void probe_wakeup_migrate_task(void *, struct task_struct *, int);
428:	static void probe_wakeup_sched_switch(struct task_struct *, struct task_struct *, bool, void *);
326:	static int start_func_tracer(struct trace_array *, int);
599:	static void start_wakeup_tracer(struct trace_array *);
372:	static void tracing_sched_switch_trace(struct trace_array *, struct task_struct *, struct task_struct *, unsigned int);
400:	static void tracing_sched_wakeup_trace(struct trace_array *, struct task_struct *, struct task_struct *, unsigned int);
703:	static int wakeup_dl_tracer_init(struct trace_array *);
311:	static int wakeup_flag_changed(struct trace_array *, u32, int);
115:	static int wakeup_graph_entry(struct ftrace_graph_ent *);
144:	static void wakeup_graph_return(struct ftrace_graph_ret *);
198:	static void wakeup_print_header(struct seq_file *);
186:	static enum print_line_t wakeup_print_line(struct trace_iterator *);
509:	static void wakeup_reset(struct trace_array *);
693:	static int wakeup_rt_tracer_init(struct trace_array *);
173:	static void wakeup_trace_close(struct trace_iterator *);
167:	static void wakeup_trace_open(struct trace_iterator *);
211:	static void wakeup_tracer_call(unsigned long, unsigned long, struct ftrace_ops *, struct pt_regs *);
683:	static int wakeup_tracer_init(struct trace_array *);
713:	static void wakeup_tracer_reset(struct trace_array *);
728:	static void wakeup_tracer_start(struct trace_array *);
734:	static void wakeup_tracer_stop(struct trace_array *);

File kernel/trace/trace_seq.c:
51:	int trace_print_seq(struct seq_file *, struct trace_seq *);
111:	void trace_seq_bitmask(struct trace_seq *, const unsigned long *, int);
175:	void trace_seq_bprintf(struct trace_seq *, const char *, const u32 *);
377:	int trace_seq_hex_dump(struct trace_seq *, const char *, int, int, int, const void *, size_t, bool);
324:	int trace_seq_path(struct trace_seq *, const struct path *);
81:	void trace_seq_printf(struct trace_seq *, const char *, ...);
233:	void trace_seq_putc(struct trace_seq *, unsigned char);
259:	void trace_seq_putmem(struct trace_seq *, const void *, unsigned int);
285:	void trace_seq_putmem_hex(struct trace_seq *, const void *, unsigned int);
205:	void trace_seq_puts(struct trace_seq *, const char *);
370:	int trace_seq_to_user(struct trace_seq *, char *, int);
141:	void trace_seq_vprintf(struct trace_seq *, const char *, struct __va_list_tag *);

File kernel/trace/trace_stack.c:
518:	int stack_trace_sysctl(struct ctl_table *, int, void *, size_t *, loff_t *);
155:	static void check_stack(unsigned long, unsigned long *);
543:	static int enable_stacktrace(char *);
325:	static ssize_t stack_max_size_read(struct file *, char *, size_t, loff_t *);
339:	static ssize_t stack_max_size_write(struct file *, const char *, size_t, loff_t *);
292:	static void stack_trace_call(unsigned long, unsigned long, struct ftrace_ops *, struct pt_regs *);
498:	static int stack_trace_filter_open(struct inode *, struct file *);
555:	static int stack_trace_init(void);
477:	static int stack_trace_open(struct inode *, struct file *);
389:	static void *t_next(struct seq_file *, void *, loff_t *);
436:	static int t_show(struct seq_file *, void *);
395:	static void *t_start(struct seq_file *, loff_t *);
409:	static void t_stop(struct seq_file *, void *);

File kernel/trace/trace_stat.c:
308:	int register_stat_tracer(struct tracer_stat *);
351:	void unregister_stat_tracer(struct tracer_stat *);
47:	static void __reset_stat_session(struct stat_session *);
113:	static int dummy_cmp(const void *, const void *);
75:	static int insert_stat(struct rb_root *, void *, cmp_func_t);
123:	static int stat_seq_init(struct stat_session *);
195:	static void *stat_seq_next(struct seq_file *, void *, loff_t *);
214:	static int stat_seq_show(struct seq_file *, void *);
171:	static void *stat_seq_start(struct seq_file *, loff_t *);
208:	static void stat_seq_stop(struct seq_file *, void *);
233:	static int tracing_stat_open(struct inode *, struct file *);
261:	static int tracing_stat_release(struct inode *, struct file *);

File kernel/trace/trace_syscalls.c:
521:	unsigned long arch_syscall_addr(int);
115:	const char *get_syscall_name(int);
526:	void init_ftrace_syscalls(void);
212:	static int __set_enter_print_fmt(struct syscall_metadata *, char *, int);
83:	static struct syscall_metadata *find_syscall_meta(unsigned long);
293:	static void ftrace_syscall_enter(void *, struct pt_regs *, long);
341:	static void ftrace_syscall_exit(void *, struct pt_regs *, long);
461:	static int init_syscall_trace(struct trace_event_call *);
570:	static int perf_call_bpf_enter(struct trace_event_call *, struct pt_regs *, struct syscall_trace_enter *, struct syscall_metadata *, struct syscall_metadata *);
588:	static void perf_syscall_enter(void *, struct pt_regs *, long);
688:	static void perf_syscall_exit(void *, struct pt_regs *, long);
659:	static void perf_sysenter_disable(struct trace_event_call *, struct trace_event_call *);
639:	static int perf_sysenter_enable(struct trace_event_call *, struct trace_event_call *);
755:	static void perf_sysexit_disable(struct trace_event_call *, struct trace_event_call *);
735:	static int perf_sysexit_enable(struct trace_event_call *, struct trace_event_call *);
127:	static enum print_line_t print_syscall_enter(struct trace_iterator *, int, struct trace_event *);
174:	static enum print_line_t print_syscall_exit(struct trace_iterator *, int, struct trace_event *);
239:	static int set_syscall_print_fmt(struct trace_event_call *);
272:	static int syscall_enter_define_fields(struct trace_event_call *);
771:	static int syscall_enter_register(struct trace_event_call *, enum trace_reg, void *);
799:	static int syscall_exit_register(struct trace_event_call *, enum trace_reg, void *);
24:	static struct list_head *syscall_get_enter_fields(struct trace_event_call *);

File kernel/trace/trace_uprobe.c:
1422:	int bpf_get_uprobe_info(const struct perf_event *, u32 *, const char **, u64 *, bool);
1585:	struct trace_event_call *create_local_trace_uprobe(char *, unsigned long, unsigned long, bool);
1633:	void destroy_local_trace_uprobe(struct trace_event_call *);
1075:	static void __probe_event_disable(struct trace_probe *);
1343:	static void __uprobe_perf_func(struct trace_uprobe *, unsigned long, struct pt_regs *, struct uprobe_cpu_buffer *, int);
945:	static void __uprobe_trace_func(struct trace_uprobe *, unsigned long, struct pt_regs *, struct uprobe_cpu_buffer *, int, struct trace_event_file *);
338:	static struct trace_uprobe *alloc_trace_uprobe(const char *, const char *, int, bool);
438:	static int append_trace_uprobe(struct trace_uprobe *, struct trace_uprobe *);
723:	static int create_or_delete_trace_uprobe(int, char **);
375:	static struct trace_uprobe *find_probe_event(const char *, const char *);
1644:	static int init_uprobe_trace(void);
1018:	static enum print_line_t print_uprobe_event(struct trace_iterator *, int, struct trace_event *);
1154:	static void probe_event_disable(struct trace_event_call *, struct trace_event_file *);
1093:	static int probe_event_enable(struct trace_event_call *, struct trace_event_file *, filter_func_t);
779:	static int probes_open(struct inode *, struct file *);
813:	static int probes_profile_seq_show(struct seq_file *, void *);
762:	static int probes_seq_show(struct seq_file *, void *);
796:	static ssize_t probes_write(struct file *, const char *, size_t, loff_t *);
220:	static int process_fetch_insn(struct fetch_insn *, struct pt_regs *, void *, void *);
834:	static int profile_open(struct inode *, struct file *);
490:	static int register_trace_uprobe(struct trace_uprobe *);
537:	static int trace_uprobe_create(int, const char **);
1246:	static bool trace_uprobe_filter_add(struct trace_uprobe_filter *, struct perf_event *);
407:	static bool trace_uprobe_has_same_uprobe(struct trace_uprobe *, struct trace_uprobe *);
277:	static bool trace_uprobe_is_busy(struct dyn_event *);
312:	static bool trace_uprobe_match(const char *, const char *, int, const char **, struct dyn_event *);
1446:	static int trace_uprobe_register(struct trace_event_call *, enum trace_reg, void *);
734:	static int trace_uprobe_release(struct dyn_event *);
742:	static int trace_uprobe_show(struct seq_file *, struct dyn_event *);
907:	static void uprobe_buffer_disable(void);
860:	static int uprobe_buffer_init(void);
1479:	static int uprobe_dispatcher(struct uprobe_consumer *, struct pt_regs *);
1179:	static int uprobe_event_define_fields(struct trace_event_call *);
1274:	static int uprobe_perf_close(struct trace_event_call *, struct perf_event *);
1326:	static bool uprobe_perf_filter(struct uprobe_consumer *, enum uprobe_filter_ctx, struct mm_struct *);
1299:	static int uprobe_perf_open(struct trace_event_call *, struct perf_event *);
1516:	static int uretprobe_dispatcher(struct uprobe_consumer *, unsigned long, struct pt_regs *);
472:	static int validate_ref_ctr_offset(struct trace_uprobe *);

File kernel/trace/tracing_map.c:
270:	int tracing_map_add_key_field(struct tracing_map *, unsigned int, tracing_map_cmp_fn_t);
227:	int tracing_map_add_sum_field(struct tracing_map *);
244:	int tracing_map_add_var(struct tracing_map *);
693:	void tracing_map_clear(struct tracing_map *);
136:	int tracing_map_cmp_none(void *, void *);
167:	tracing_map_cmp_fn_t tracing_map_cmp_num(int, int);
128:	int tracing_map_cmp_string(void *, void *);
763:	struct tracing_map *tracing_map_create(unsigned int, unsigned int, const struct tracing_map_ops *, void *);
671:	void tracing_map_destroy(struct tracing_map *);
935:	void tracing_map_destroy_sort_entries(struct tracing_map_sort_entry **, unsigned int);
824:	int tracing_map_init(struct tracing_map *);
634:	struct tracing_map_elt *tracing_map_insert(struct tracing_map *, void *);
656:	struct tracing_map_elt *tracing_map_lookup(struct tracing_map *, void *);
56:	u64 tracing_map_read_sum(struct tracing_map_elt *, unsigned int);
103:	u64 tracing_map_read_var(struct tracing_map_elt *, unsigned int);
122:	u64 tracing_map_read_var_once(struct tracing_map_elt *, unsigned int);
71:	void tracing_map_set_var(struct tracing_map_elt *, unsigned int, u64);
1069:	int tracing_map_sort_entries(struct tracing_map *, struct tracing_map_sort_key *, unsigned int, struct tracing_map_sort_entry ***);
39:	void tracing_map_update_sum(struct tracing_map_elt *, unsigned int, u64);
86:	bool tracing_map_var_set(struct tracing_map_elt *, unsigned int);
840:	static int cmp_entries_dup(const void *, const void *);
885:	static int cmp_entries_key(const void *, const void *);
854:	static int cmp_entries_sum(const void *, const void *);
452:	static struct tracing_map_elt *get_free_elt(struct tracing_map *);
998:	static void sort_secondary(struct tracing_map *, const struct tracing_map_sort_entry **, unsigned int, struct tracing_map_sort_key *, struct tracing_map_sort_key *);
483:	static int tracing_map_alloc_elts(struct tracing_map *);
321:	static struct tracing_map_array *tracing_map_array_alloc(unsigned int, unsigned int);
298:	static void tracing_map_array_free(struct tracing_map_array *);
141:	static int tracing_map_cmp_atomic64(void *, void *);
162:	static int tracing_map_cmp_s16(void *, void *);
160:	static int tracing_map_cmp_s32(void *, void *);
158:	static int tracing_map_cmp_s64(void *, void *);
164:	static int tracing_map_cmp_s8(void *, void *);
163:	static int tracing_map_cmp_u16(void *, void *);
161:	static int tracing_map_cmp_u32(void *, void *);
159:	static int tracing_map_cmp_u64(void *, void *);
165:	static int tracing_map_cmp_u8(void *, void *);
403:	static struct tracing_map_elt *tracing_map_elt_alloc(struct tracing_map *);
358:	static void tracing_map_elt_clear(struct tracing_map_elt *);
389:	static void tracing_map_elt_free(struct tracing_map_elt *);
467:	static void tracing_map_free_elts(struct tracing_map *);

File kernel/tracepoint.c:
767:	void for_each_kernel_tracepoint(void (*)(struct tracepoint *, void *), void *);
609:	int register_tracepoint_module_notifier(struct notifier_block *);
780:	int syscall_regfunc(void);
796:	void syscall_unregfunc(void);
592:	bool trace_module_has_bad_taint(struct module *);
550:	int tracepoint_probe_register(struct tracepoint *, void *, void *);
522:	int tracepoint_probe_register_prio(struct tracepoint *, void *, void *, int);
493:	int tracepoint_probe_register_prio_may_exist(struct tracepoint *, void *, void *, int);
564:	int tracepoint_probe_unregister(struct tracepoint *, void *, void *);
633:	int unregister_tracepoint_module_notifier(struct notifier_block *);
180:	static struct tracepoint_func *func_add(struct tracepoint_func **, struct tracepoint_func *, int);
248:	static void *func_remove(struct tracepoint_func **, struct tracepoint_func *);
749:	static int init_tracepoints(void);
119:	static void rcu_free_old_probes(struct callback_head *);
124:	static int release_early_probes(void);
114:	static void srcu_free_old_probes(struct callback_head *);
102:	static void tp_stub_func(void);
344:	static int tracepoint_add_func(struct tracepoint *, struct tracepoint_func *, int, bool);
723:	static int tracepoint_module_notify(struct notifier_block *, unsigned long, void *);
417:	static int tracepoint_remove_func(struct tracepoint *, struct tracepoint_func *);

File kernel/tsacct.c:
162:	void acct_account_cputime(struct task_struct *);
171:	void acct_clear_integrals(struct task_struct *);
147:	void acct_update_integrals(struct task_struct *);
20:	void bacct_add_tsk(struct user_namespace *, struct pid_namespace *, struct taskstats *, struct task_struct *);
86:	void xacct_add_tsk(struct taskstats *, struct task_struct *);

File kernel/ucount.c:
231:	void dec_ucount(struct ucounts *, enum ucount_type);
208:	struct ucounts *inc_ucount(struct user_namespace *, kuid_t, enum ucount_type);
121:	void retire_userns_sysctls(struct user_namespace *);
97:	bool setup_userns_sysctls(struct user_namespace *);
144:	static struct ucounts *get_ucounts(struct user_namespace *, kuid_t);
179:	static void put_ucounts(struct ucounts *);
29:	static int set_is_seen(struct ctl_table_set *);
24:	static struct ctl_table_set *set_lookup(struct ctl_table_root *);
34:	static int set_permissions(struct ctl_table_header *, struct ctl_table *);
241:	static int user_namespace_sysctl_init(void);

File kernel/uid16.c:
23:	long __ia32_sys_chown16(const struct pt_regs *);
33:	long __ia32_sys_fchown16(const struct pt_regs *);
154:	long __ia32_sys_getgroups16(const struct pt_regs *);
87:	long __ia32_sys_getresgid16(const struct pt_regs *);
64:	long __ia32_sys_getresuid16(const struct pt_regs *);
28:	long __ia32_sys_lchown16(const struct pt_regs *);
109:	long __ia32_sys_setfsgid16(const struct pt_regs *);
104:	long __ia32_sys_setfsuid16(const struct pt_regs *);
43:	long __ia32_sys_setgid16(const struct pt_regs *);
177:	long __ia32_sys_setgroups16(const struct pt_regs *);
38:	long __ia32_sys_setregid16(const struct pt_regs *);
81:	long __ia32_sys_setresgid16(const struct pt_regs *);
58:	long __ia32_sys_setresuid16(const struct pt_regs *);
48:	long __ia32_sys_setreuid16(const struct pt_regs *);
53:	long __ia32_sys_setuid16(const struct pt_regs *);
23:	long __x64_sys_chown16(const struct pt_regs *);
33:	long __x64_sys_fchown16(const struct pt_regs *);
154:	long __x64_sys_getgroups16(const struct pt_regs *);
87:	long __x64_sys_getresgid16(const struct pt_regs *);
64:	long __x64_sys_getresuid16(const struct pt_regs *);
28:	long __x64_sys_lchown16(const struct pt_regs *);
109:	long __x64_sys_setfsgid16(const struct pt_regs *);
104:	long __x64_sys_setfsuid16(const struct pt_regs *);
43:	long __x64_sys_setgid16(const struct pt_regs *);
177:	long __x64_sys_setgroups16(const struct pt_regs *);
38:	long __x64_sys_setregid16(const struct pt_regs *);
81:	long __x64_sys_setresgid16(const struct pt_regs *);
58:	long __x64_sys_setresuid16(const struct pt_regs *);
48:	long __x64_sys_setreuid16(const struct pt_regs *);
53:	long __x64_sys_setuid16(const struct pt_regs *);
218:	static long __do_sys_getegid16(const struct pt_regs *);
208:	static long __do_sys_geteuid16(const struct pt_regs *);
213:	static long __do_sys_getgid16(const struct pt_regs *);
203:	static long __do_sys_getuid16(const struct pt_regs *);
154:	static long __se_sys_getgroups16(long, long);
87:	static long __se_sys_getresgid16(long, long, long);
64:	static long __se_sys_getresuid16(long, long, long);
177:	static long __se_sys_setgroups16(long, long);

File kernel/umh.c:
294:	int __usermodehelper_disable(enum umh_disable_depth);
280:	void __usermodehelper_set_disable_depth(enum umh_disable_depth);
472:	int call_usermodehelper(const char *, char **, char **, int);
402:	int call_usermodehelper_exec(struct subprocess_info *, int);
356:	struct subprocess_info *call_usermodehelper_setup(const char *, char **, char **, gfp_t, int (*)(struct subprocess_info *, struct cred *), void (*)(struct subprocess_info *), void *);
240:	long usermodehelper_read_lock_wait(long);
210:	int usermodehelper_read_trylock(void);
267:	void usermodehelper_read_unlock(void);
65:	static int call_usermodehelper_exec_async(void *);
158:	static void call_usermodehelper_exec_work(struct work_struct *);
486:	static int proc_cap_handler(struct ctl_table *, int, void *, size_t *, loff_t *);

File kernel/user-return-notifier.c:
35:	void fire_user_return_notifiers(void);
15:	void user_return_notifier_register(struct user_return_notifier *);
26:	void user_return_notifier_unregister(struct user_return_notifier *);

File kernel/user.c:
175:	struct user_struct *alloc_uid(kuid_t);
153:	struct user_struct *find_user(kuid_t);
164:	void free_uid(struct user_struct *);
212:	static int uid_cache_init(void);
121:	static struct user_struct *uid_hash_find(kuid_t, struct hlist_head *, struct hlist_head *);

File kernel/user_namespace.c:
204:	void __put_user_ns(struct user_namespace *);
69:	int create_user_ns(struct cred *);
1288:	bool current_in_userns(const struct user_namespace *);
474:	gid_t from_kgid(struct user_namespace *, kgid_t);
498:	gid_t from_kgid_munged(struct user_namespace *, kgid_t);
541:	projid_t from_kprojid(struct user_namespace *, kprojid_t);
566:	projid_t from_kprojid_munged(struct user_namespace *, kprojid_t);
406:	uid_t from_kuid(struct user_namespace *, kuid_t);
431:	uid_t from_kuid_munged(struct user_namespace *, kuid_t);
1279:	bool in_userns(const struct user_namespace *, const struct user_namespace *);
455:	kgid_t make_kgid(struct user_namespace *, gid_t);
522:	kprojid_t make_kprojid(struct user_namespace *, projid_t);
387:	kuid_t make_kuid(struct user_namespace *, uid_t);
1346:	struct ns_common *ns_get_owner(struct ns_common *);
1104:	ssize_t proc_gid_map_write(struct file *, const char *, size_t, loff_t *);
1121:	ssize_t proc_projid_map_write(struct file *, const char *, size_t, loff_t *);
1181:	int proc_setgroups_show(struct seq_file *, void *);
1192:	ssize_t proc_setgroups_write(struct file *, const char *, size_t, loff_t *);
1087:	ssize_t proc_uid_map_write(struct file *, const char *, size_t, loff_t *);
155:	int unshare_userns(unsigned long, struct cred **);
1259:	bool userns_may_setgroups(const struct user_namespace *);
789:	static int cmp_extents_forward(const void *, const void *);
804:	static int cmp_extents_reverse(const void *, const void *);
224:	static int cmp_map_id(const void *, const void *);
175:	static void free_user_ns(struct work_struct *);
599:	static int gid_m_show(struct seq_file *, void *);
664:	static void *gid_m_start(struct seq_file *, loff_t *);
678:	static void *m_next(struct seq_file *, void *, loff_t *);
684:	static void m_stop(struct seq_file *, void *);
291:	static u32 map_id_range_down(struct uid_gid_map *, u32, u32);
354:	static u32 map_id_up(struct uid_gid_map *, u32);
899:	static ssize_t map_write(struct file *, const char *, size_t, loff_t *, int, struct uid_gid_map *, struct uid_gid_map *);
1139:	static bool new_idmap_permitted(const struct file *, struct user_namespace *, int, struct uid_gid_map *);
620:	static int projid_m_show(struct seq_file *, void *);
671:	static void *projid_m_start(struct seq_file *, loff_t *);
578:	static int uid_m_show(struct seq_file *, void *);
657:	static void *uid_m_start(struct seq_file *, loff_t *);
1379:	static int user_namespaces_init(void);
1299:	static struct ns_common *userns_get(struct task_struct *);
1315:	static int userns_install(struct nsset *, struct ns_common *);
1364:	static struct user_namespace *userns_owner(struct ns_common *);
1310:	static void userns_put(struct ns_common *);

File kernel/utsname.c:
89:	struct uts_namespace *copy_utsname(unsigned long, struct user_namespace *, struct uts_namespace *);
106:	void free_uts_ns(struct kref *);
172:	void uts_ns_init(void);
45:	static struct uts_namespace *clone_uts_ns(struct user_namespace *, struct uts_namespace *);
122:	static struct ns_common *utsns_get(struct task_struct *);
143:	static int utsns_install(struct nsset *, struct ns_common *);
158:	static struct user_namespace *utsns_owner(struct ns_common *);
138:	static void utsns_put(struct ns_common *);

File kernel/utsname_sysctl.c:
130:	void uts_proc_notify(enum uts_proc);
32:	static int proc_do_uts_string(struct ctl_table *, int, void *, size_t *, loff_t *);
138:	static int utsname_sysctl_init(void);

File kernel/watchdog.c:
78:	void hardlockup_detector_disable(void);
313:	bool is_hardlockup(void);
625:	void lockup_detector_cleanup(void);
767:	void lockup_detector_init(void);
542:	int lockup_detector_offline_cpu(unsigned int);
530:	int lockup_detector_online_cpu(unsigned int);
638:	void lockup_detector_soft_poweroff(void);
702:	int proc_nmi_watchdog(struct ctl_table *, int, void *, size_t *, loff_t *);
714:	int proc_soft_watchdog(struct ctl_table *, int, void *, size_t *, loff_t *);
692:	int proc_watchdog(struct ctl_table *, int, void *, size_t *, loff_t *);
747:	int proc_watchdog_cpumask(struct ctl_table *, int, void *, size_t *, loff_t *);
724:	int proc_watchdog_thresh(struct ctl_table *, int, void *, size_t *, loff_t *);
276:	void touch_all_softlockup_watchdogs(void);
269:	void touch_softlockup_watchdog(void);
260:	void touch_softlockup_watchdog_sched(void);
294:	void touch_softlockup_watchdog_sync(void);
113:	void watchdog_nmi_disable(unsigned int);
107:	int watchdog_nmi_enable(unsigned int);
119:	int watchdog_nmi_probe(void);
132:	void watchdog_nmi_stop(void);
83:	static int hardlockup_panic_setup(char *);
554:	static void lockup_detector_reconfigure(void);
153:	static void lockup_detector_update_enable(void);
195:	static int nosoftlockup_setup(char *);
188:	static int nowatchdog_setup(char *);
665:	static int proc_watchdog_common(int, struct ctl_table *, int, void *, size_t *, loff_t *);
646:	static void proc_watchdog_update(void);
341:	static int softlockup_fn(void *);
515:	static int softlockup_start_fn(void *);
496:	static int softlockup_stop_fn(void *);
480:	static void watchdog_disable(unsigned int);
454:	static void watchdog_enable(unsigned int);
202:	static int watchdog_thresh_setup(char *);
357:	static enum hrtimer_restart watchdog_timer_fn(struct hrtimer *);

File kernel/watchdog_hld.c:
502:	int __hardlockup_detector_perf_init(void *);
30:	void arch_touch_nmi_watchdog(void);
443:	void hardlockup_detector_perf_cleanup(void);
425:	void hardlockup_detector_perf_disable(void);
410:	void hardlockup_detector_perf_enable(void);
518:	int hardlockup_detector_perf_init(void);
485:	void hardlockup_detector_perf_restart(void);
466:	void hardlockup_detector_perf_stop(void);
285:	void refresh_hld_last_timestamp(void);
300:	void watchdog_hardlockup_check(struct pt_regs *);
240:	void watchdog_update_hrtimer_threshold(u64);
384:	static int hardlockup_detector_event_create(void);
374:	static void watchdog_overflow_callback(struct perf_event *, struct perf_sample_data *, struct pt_regs *);

File kernel/workqueue.c:
4257:	struct workqueue_struct *alloc_workqueue(const char *, unsigned int, int, ...);
3355:	struct workqueue_attrs *alloc_workqueue_attrs(void);
4072:	int apply_workqueue_attrs(struct workqueue_struct *, const struct workqueue_attrs *);
3249:	bool cancel_delayed_work(struct delayed_work *);
3264:	bool cancel_delayed_work_sync(struct delayed_work *);
3168:	bool cancel_work_sync(struct work_struct *);
4519:	bool current_is_workqueue_rescuer(void);
4503:	struct work_struct *current_work(void);
1615:	void delayed_work_timer_fn(struct timer_list *);
4376:	void destroy_workqueue(struct workqueue_struct *);
2931:	void drain_workqueue(struct workqueue_struct *);
3319:	int execute_in_process_context(work_func_t, struct execute_work *);
3186:	bool flush_delayed_work(struct delayed_work *);
3204:	bool flush_rcu_work(struct rcu_work *);
3066:	bool flush_work(struct work_struct *);
2769:	void flush_workqueue(struct workqueue_struct *);
3339:	void free_workqueue_attrs(struct workqueue_attrs *);
5183:	void freeze_workqueues_begin(void);
5216:	bool freeze_workqueues_busy(void);
1705:	bool mod_delayed_work_on(int, struct workqueue_struct *, struct delayed_work *, unsigned long);
4638:	void print_worker_info(const char *, struct task_struct *);
1667:	bool queue_delayed_work_on(int, struct workqueue_struct *, struct delayed_work *, unsigned long);
1745:	bool queue_rcu_work(struct workqueue_struct *, struct rcu_work *);
1584:	bool queue_work_node(int, struct workqueue_struct *, struct work_struct *);
1513:	bool queue_work_on(int, struct workqueue_struct *, struct work_struct *);
3281:	int schedule_on_each_cpu(work_func_t);
4612:	void set_worker_desc(const char *, ...);
4774:	void show_workqueue_state(void);
5258:	void thaw_workqueues(void);
4579:	unsigned int work_busy(struct work_struct *);
5135:	long work_on_cpu(int, long (*)(void *), void *);
5158:	long work_on_cpu_safe(int, long (*)(void *), void *);
4544:	bool workqueue_congested(int, struct workqueue_struct *);
6027:	void workqueue_init(void);
5949:	void workqueue_init_early(void);
5091:	int workqueue_offline_cpu(unsigned int);
5064:	int workqueue_online_cpu(unsigned int);
5051:	int workqueue_prepare_cpu(unsigned int);
4473:	void workqueue_set_max_active(struct workqueue_struct *, int);
5329:	int workqueue_set_unbound_cpumask(cpumask_var_t);
5669:	int workqueue_sysfs_register(struct workqueue_struct *);
4850:	void wq_worker_comm(char *, size_t, struct task_struct *);
932:	work_func_t wq_worker_last_func(struct task_struct *);
847:	void wq_worker_running(struct task_struct *);
866:	void wq_worker_sleeping(struct task_struct *);
3086:	static bool __cancel_work_timer(struct work_struct *, bool);
3031:	static bool __flush_work(struct work_struct *, bool);
1624:	static void __queue_delayed_work(int, struct workqueue_struct *, struct delayed_work *, unsigned long);
1396:	static void __queue_work(int, struct workqueue_struct *, struct work_struct *);
4171:	static int alloc_and_link_pwqs(struct workqueue_struct *);
3800:	static struct pool_workqueue *alloc_unbound_pwq(struct workqueue_struct *, const struct workqueue_attrs *);
4026:	static int apply_workqueue_attrs_locked(struct workqueue_struct *, const struct workqueue_attrs *);
3902:	static void apply_wqattrs_cleanup(struct apply_wqattrs_ctx *);
3992:	static void apply_wqattrs_commit(struct apply_wqattrs_ctx *);
3919:	static struct apply_wqattrs_ctx *apply_wqattrs_prepare(struct workqueue_struct *, const struct workqueue_attrs *);
2594:	static void check_flush_dependency(struct workqueue_struct *, struct work_struct *);
3372:	static void copy_workqueue_attrs(struct workqueue_attrs *, const struct workqueue_attrs *);
1907:	static struct worker *create_worker(struct worker_pool *);
3077:	static int cwt_wakefn(wait_queue_entry_t *, unsigned int, int, void *);
1967:	static void destroy_worker(struct worker *);
2722:	static bool flush_workqueue_prep_pwqs(struct workqueue_struct *, int, int);
3597:	static struct worker_pool *get_unbound_pool(const struct workqueue_attrs *);
1987:	static void idle_worker_timeout(struct timer_list *);
3761:	static void init_pwq(struct pool_workqueue *, struct workqueue_struct *, struct worker_pool *);
4229:	static int init_rescuer(struct workqueue_struct *);
3417:	static int init_worker_pool(struct worker_pool *);
1326:	static void insert_work(struct pool_workqueue *, struct work_struct *, struct list_head *, unsigned int);
3779:	static void link_pwq(struct pool_workqueue *);
5407:	static ssize_t max_active_show(struct device *, struct device_attribute *, char *);
5415:	static ssize_t max_active_store(struct device *, struct device_attribute *, const char *, size_t);
2078:	static void maybe_create_worker(struct worker_pool *);
1057:	static void move_linked_works(struct work_struct *, struct list_head *, struct work_struct **);
5398:	static ssize_t per_cpu_show(struct device *, struct device_attribute *, char *);
2035:	static void pool_mayday_timeout(struct timer_list *);
4674:	static void pr_cont_pool_info(struct worker_pool *);
4682:	static void pr_cont_work(bool, struct work_struct *);
2163:	static void process_one_work(struct worker *, struct work_struct *);
1102:	static void put_pwq(struct pool_workqueue *);
1126:	static void put_pwq_unlocked(struct pool_workqueue *);
3531:	static void put_unbound_pool(struct worker_pool *);
1139:	static void pwq_activate_delayed_work(struct work_struct *);
3713:	static void pwq_adjust_max_active(struct pool_workqueue *);
1170:	static void pwq_dec_nr_in_flight(struct pool_workqueue *, int);
3667:	static void pwq_unbound_release_workfn(struct work_struct *);
3499:	static void rcu_free_pool(struct callback_head *);
3657:	static void rcu_free_pwq(struct callback_head *);
3484:	static void rcu_free_wq(struct callback_head *);
1725:	static void rcu_work_rcufn(struct callback_head *);
4964:	static void rebind_workers(struct worker_pool *);
2462:	static int rescuer_thread(void *);
5033:	static void restore_unbound_workers_cpumask(struct worker_pool *, int);
4696:	static void show_pwq(struct pool_workqueue *);
2975:	static bool start_flush_work(struct work_struct *, struct wq_barrier *, bool);
1236:	static int try_to_grab_pending(struct work_struct *, bool, unsigned long *);
4905:	static void unbind_workers(int);
5117:	static void work_for_cpu_fn(struct work_struct *);
1844:	static void worker_attach_to_pool(struct worker *, struct worker_pool *);
1874:	static void worker_detach_from_pool(struct worker *);
1769:	static void worker_enter_idle(struct worker *);
533:	static int worker_pool_assign_id(struct worker_pool *);
2358:	static int worker_thread(void *);
5283:	static int workqueue_apply_unbound_cpumask(void);
2621:	static void wq_barrier_func(struct work_struct *);
3844:	static bool wq_calc_node_cpumask(const struct workqueue_attrs *, int, int, cpumask_t *);
4213:	static int wq_clamp_max_active(int, unsigned int, const char *);
5512:	static ssize_t wq_cpumask_show(struct device *, struct device_attribute *, char *);
5525:	static ssize_t wq_cpumask_store(struct device *, struct device_attribute *, const char *, size_t);
5647:	static void wq_device_release(struct device *);
5459:	static ssize_t wq_nice_show(struct device *, struct device_attribute *, char *);
5487:	static ssize_t wq_nice_store(struct device *, struct device_attribute *, const char *, size_t);
5895:	static void wq_numa_init(void);
5549:	static ssize_t wq_numa_show(struct device *, struct device_attribute *, char *);
5563:	static ssize_t wq_numa_store(struct device *, struct device_attribute *, const char *, size_t);
5437:	static ssize_t wq_pool_ids_show(struct device *, struct device_attribute *, char *);
1368:	static int wq_select_unbound_cpu(int);
5635:	static int wq_sysfs_init(void);
5601:	static ssize_t wq_unbound_cpumask_show(struct device *, struct device_attribute *, char *);
5614:	static ssize_t wq_unbound_cpumask_store(struct device *, struct device_attribute *, const char *, size_t);
4108:	static void wq_update_unbound_numa(struct workqueue_struct *, int, bool);
3397:	static bool wqattrs_equal(const struct workqueue_attrs *, const struct workqueue_attrs *);
3386:	static u32 wqattrs_hash(const struct workqueue_attrs *, const struct workqueue_attrs *);

File lib/argv_split.c:
35:	void argv_free(char **);
60:	char **argv_split(gfp_t, const char *, int *);

File lib/asn1_decoder.c:
167:	int asn1_ber_decoder(const struct asn1_decoder *, void *, const unsigned char *, size_t);
57:	static int asn1_find_indefinite_length(const unsigned char *, size_t, size_t *, size_t *, const char **);

File lib/assoc_array.c:
1346:	void assoc_array_apply_edit(struct assoc_array_edit *);
1410:	void assoc_array_cancel_edit(struct assoc_array_edit *);
1275:	struct assoc_array_edit *assoc_array_clear(struct assoc_array *, const struct assoc_array_ops *);
1079:	struct assoc_array_edit *assoc_array_delete(struct assoc_array *, const struct assoc_array_ops *, const void *);
441:	void assoc_array_destroy(struct assoc_array *, const struct assoc_array_ops *);
304:	void *assoc_array_find(const struct assoc_array *, const struct assoc_array_ops *, const void *);
1454:	int assoc_array_gc(struct assoc_array *, const struct assoc_array_ops *, bool (*)(void *, void *), void *);
964:	struct assoc_array_edit *assoc_array_insert(struct assoc_array *, const struct assoc_array_ops *, const void *, void *);
1031:	void assoc_array_insert_set_object(struct assoc_array_edit *, void *);
133:	int assoc_array_iterate(const struct assoc_array *, int (*)(const void *, void *), void *);
1046:	static int assoc_array_delete_collapse_iterator(const void *, void *);
343:	static void assoc_array_destroy_subtree(struct assoc_array_ptr *, const struct assoc_array_ops *);
474:	static bool assoc_array_insert_into_terminal_node(struct assoc_array_edit *, const struct assoc_array_ops *, const void *, struct assoc_array_walk_result *, struct assoc_array_walk_result *);
793:	static bool assoc_array_insert_mid_shortcut(struct assoc_array_edit *, struct assoc_array_walk_result *, const struct assoc_array_ops *);
1301:	static void assoc_array_rcu_cleanup(struct callback_head *);
19:	static int assoc_array_subtree_iterate(const struct assoc_array_ptr *, const struct assoc_array_ptr *, int (*)(const void *, void *), void *);
170:	static enum assoc_array_walk_status assoc_array_walk(const struct assoc_array_ops *, const void *, struct assoc_array_walk_result *, const struct assoc_array *, const struct assoc_array *);

File lib/bcd.c:
5:	unsigned int _bcd2bin(unsigned char);
11:	unsigned char _bin2bcd(unsigned int);

File lib/bitmap.c:
238:	int __bitmap_and(unsigned long *, const unsigned long *, const unsigned long *, unsigned int);
276:	int __bitmap_andnot(unsigned long *, const unsigned long *, const unsigned long *, unsigned int);
370:	void __bitmap_clear(unsigned long *, unsigned int, int);
82:	void __bitmap_complement(unsigned long *, const unsigned long *, unsigned int);
46:	int __bitmap_equal(const unsigned long *, const unsigned long *, unsigned int);
304:	int __bitmap_intersects(const unsigned long *, const unsigned long *, unsigned int);
254:	void __bitmap_or(unsigned long *, const unsigned long *, const unsigned long *, unsigned int);
62:	bool __bitmap_or_equal(const unsigned long *, const unsigned long *, const unsigned long *, unsigned int);
292:	void __bitmap_replace(unsigned long *, const unsigned long *, const unsigned long *, const unsigned long *, unsigned int);
349:	void __bitmap_set(unsigned long *, unsigned int, int);
146:	void __bitmap_shift_left(unsigned long *, const unsigned long *, unsigned int, unsigned int);
101:	void __bitmap_shift_right(unsigned long *, const unsigned long *, unsigned int, unsigned int);
319:	int __bitmap_subset(const unsigned long *, const unsigned long *, unsigned int);
334:	int __bitmap_weight(const unsigned long *, unsigned int);
265:	void __bitmap_xor(unsigned long *, const unsigned long *, const unsigned long *, unsigned int);
1246:	unsigned long *bitmap_alloc(unsigned int, gfp_t);
1215:	int bitmap_allocate_region(unsigned long *, unsigned int, int);
913:	int bitmap_bitremap(int, const unsigned long *, const unsigned long *, int);
208:	void bitmap_cut(unsigned long *, const unsigned long *, unsigned int, unsigned int, unsigned int);
1173:	int bitmap_find_free_region(unsigned long *, unsigned int, int);
404:	unsigned long bitmap_find_next_zero_area_off(unsigned long *, unsigned long, unsigned long, unsigned int, unsigned long, unsigned long);
1069:	void bitmap_fold(unsigned long *, const unsigned long *, unsigned int, unsigned int);
1259:	void bitmap_free(const unsigned long *);
1272:	void bitmap_from_arr32(unsigned long *, const u32 *, unsigned int);
1030:	void bitmap_onto(unsigned long *, const unsigned long *, const unsigned long *, unsigned int);
822:	unsigned int bitmap_ord_to_pos(const unsigned long *, unsigned int, unsigned int);
737:	int bitmap_parse(const char *, unsigned int, unsigned long *, int);
444:	int bitmap_parse_user(const char *, unsigned int, unsigned long *, int);
638:	int bitmap_parselist(const char *, unsigned long *, int);
679:	int bitmap_parselist_user(const char *, unsigned int, unsigned long *, int);
478:	int bitmap_print_to_pagebuf(bool, char *, const unsigned long *, int);
1198:	void bitmap_release_region(unsigned long *, unsigned int, int);
866:	void bitmap_remap(unsigned long *, const unsigned long *, const unsigned long *, const unsigned long *, unsigned int);
1295:	void bitmap_to_arr32(u32 *, const unsigned long *, unsigned int);
1253:	unsigned long *bitmap_zalloc(unsigned int, gfp_t);
574:	static const char *bitmap_parse_region(const char *, struct region *);

File lib/bootconfig.c:
870:	void xbc_debug_dump(void);
750:	void xbc_destroy_all(void);
774:	int xbc_init(char *, const char **, int *);
225:	int xbc_node_compose_key_after(struct xbc_node *, struct xbc_node *, char *, size_t);
154:	struct xbc_node *xbc_node_find_child(struct xbc_node *, const char *);
316:	const char *xbc_node_find_next_key_value(struct xbc_node *, struct xbc_node **);
274:	struct xbc_node *xbc_node_find_next_leaf(struct xbc_node *, struct xbc_node *);
191:	const char *xbc_node_find_value(struct xbc_node *, const char *, struct xbc_node **);
89:	struct xbc_node *xbc_node_get_child(struct xbc_node *);
115:	const char *xbc_node_get_data(struct xbc_node *);
103:	struct xbc_node *xbc_node_get_next(struct xbc_node *);
77:	struct xbc_node *xbc_node_get_parent(struct xbc_node *);
65:	int xbc_node_index(struct xbc_node *);
51:	struct xbc_node *xbc_root_node(void);
546:	static int __xbc_add_key(char *);
446:	static int __xbc_close_brace(char *);
576:	static int __xbc_parse_keys(char *);
465:	static int __xbc_parse_value(char **, char **);
416:	static char *skip_comment(char *);
370:	static struct xbc_node *xbc_add_sibling(char *, u32);
334:	static int xbc_init_node(struct xbc_node *, char *, u32);
126:	static bool xbc_node_match_prefix(struct xbc_node *, const char **);
640:	static int xbc_parse_key(char **, char *);
593:	static int xbc_parse_kv(char **, char *, int);
681:	static int xbc_verify_tree(void);

File lib/bsearch.c:
31:	void *bsearch(const void *, const void *, size_t, size_t, cmp_func_t);

File lib/btree.c:
81:	void *btree_alloc(gfp_t, void *);
199:	void btree_destroy(struct btree_head *);
87:	void btree_free(void *, void *);
311:	void *btree_get_prev(struct btree_head *, struct btree_geo *, unsigned long *);
764:	size_t btree_grim_visitor(struct btree_head *, struct btree_geo *, unsigned long, void (*)(void *, unsigned long, unsigned long *, size_t, void *), void *);
189:	int btree_init(struct btree_head *);
182:	void btree_init_mempool(struct btree_head *, mempool_t *);
510:	int btree_insert(struct btree_head *, struct btree_geo *, unsigned long *, void *, gfp_t);
207:	void *btree_last(struct btree_head *, struct btree_geo *, unsigned long *);
241:	void *btree_lookup(struct btree_head *, struct btree_geo *, unsigned long *);
639:	int btree_merge(struct btree_head *, struct btree_head *, struct btree_geo *, gfp_t);
629:	void *btree_remove(struct btree_head *, struct btree_geo *, unsigned long *);
271:	int btree_update(struct btree_head *, struct btree_geo *, unsigned long *, void *);
746:	size_t btree_visitor(struct btree_head *, struct btree_geo *, unsigned long, void (*)(void *, unsigned long, unsigned long *, size_t, void *), void *);
736:	void visitor128(void *, unsigned long, unsigned long *, size_t, void *);
716:	void visitor32(void *, unsigned long, unsigned long *, size_t, void *);
726:	void visitor64(void *, unsigned long, unsigned long *, size_t, void *);
707:	void visitorl(void *, unsigned long, unsigned long *, size_t, void *);
676:	static size_t __btree_for_each(struct btree_head *, struct btree_geo *, unsigned long *, unsigned long, void (*)(void *, unsigned long, unsigned long *, size_t, void *), void *, int, int, size_t);
448:	static int btree_insert_level(struct btree_head *, struct btree_geo *, unsigned long *, void *, int, gfp_t);
790:	static void btree_module_exit(void);
783:	static int btree_module_init(void);
591:	static void *btree_remove_level(struct btree_head *, struct btree_geo *, unsigned long *, int);
702:	static void empty(void *, unsigned long, unsigned long *, size_t, void *);
388:	static unsigned long *find_level(struct btree_geo *, unsigned long *, int, struct btree_head *, struct btree_head *);
363:	static int getpos(unsigned long *, unsigned long *, struct btree_geo *, struct btree_geo *);
520:	static void merge(struct btree_head *, struct btree_geo *, int, unsigned long *, int, unsigned long *, int, unsigned long *, int);
540:	static void rebalance(struct btree_head *, struct btree_geo *, unsigned long *, int, unsigned long *, int);

File lib/bucket_locks.c:
14:	int __alloc_bucket_spinlocks(spinlock_t **, unsigned int *, size_t, unsigned int, gfp_t, const char *, struct lock_class_key *);
50:	void free_bucket_spinlocks(spinlock_t *);

File lib/bug.c:
133:	struct bug_entry *find_bug(unsigned long);
217:	void generic_bug_clear_once(void);
119:	void module_bug_cleanup(struct module *);
88:	void module_bug_finalize(const Elf64_Ehdr *, const Elf64_Shdr *, struct module *);
144:	enum bug_trap_type report_bug(unsigned long, struct pt_regs *);

File lib/bust_spinlocks.c:
20:	void bust_spinlocks(int);

File lib/check_signature.c:
16:	int check_signature(const volatile void *, const unsigned char *, int);

File lib/clz_ctz.c:
49:	int __clzdi2(long);
25:	int __clzsi2(int);
55:	int __ctzdi2(long);
18:	int __ctzsi2(int);

File lib/cmdline.c:
50:	int get_option(char **, int *);
87:	char *get_options(const char *, int, int *);
125:	unsigned long long memparse(const char *, char **);
201:	char *next_arg(char *, char **, char **);
177:	bool parse_option_str(const char *, const char *);

File lib/cpu_rmap.c:
25:	struct cpu_rmap *alloc_cpu_rmap(unsigned int, gfp_t);
138:	int cpu_rmap_add(struct cpu_rmap *, void *);
85:	int cpu_rmap_put(struct cpu_rmap *);
155:	int cpu_rmap_update(struct cpu_rmap *, u16, const struct cpumask *);
225:	void free_irq_cpu_rmap(struct cpu_rmap *);
285:	int irq_cpu_rmap_add(struct cpu_rmap *, int);
250:	static void irq_cpu_rmap_notify(struct irq_affinity_notify *, const cpumask_t *);
265:	static void irq_cpu_rmap_release(struct kref *);

File lib/cpumask.c:
165:	void alloc_bootmem_cpumask_var(cpumask_var_t *);
144:	bool alloc_cpumask_var(cpumask_var_t *, gfp_t);
113:	bool alloc_cpumask_var_node(cpumask_var_t *, gfp_t, int);
246:	int cpumask_any_and_distribute(const struct cpumask *, const struct cpumask *);
53:	int cpumask_any_but(const struct cpumask *, unsigned int);
206:	unsigned int cpumask_local_spread(unsigned int, int);
17:	unsigned int cpumask_next(int, const struct cpumask *);
34:	int cpumask_next_and(int, const struct cpumask *, const struct cpumask *);
77:	int cpumask_next_wrap(int, const struct cpumask *, int, bool);
189:	void free_bootmem_cpumask_var(cpumask_var_t);
179:	void free_cpumask_var(cpumask_var_t);
150:	bool zalloc_cpumask_var(cpumask_var_t *, gfp_t);
128:	bool zalloc_cpumask_var_node(cpumask_var_t *, gfp_t, int);

File lib/crc-ccitt.c:
99:	u16 crc_ccitt(u16, const u8 *, size_t);
114:	u16 crc_ccitt_false(u16, const u8 *, size_t);

File lib/crc-t10dif.c:
86:	__u16 crc_t10dif(const unsigned char *, size_t);
63:	__u16 crc_t10dif_update(__u16, const unsigned char *, size_t);
100:	static void crc_t10dif_mod_fini(void);
92:	static int crc_t10dif_mod_init(void);
24:	static int crc_t10dif_notify(struct notifier_block *, unsigned long, void *);
36:	static void crc_t10dif_rehash(struct work_struct *);
110:	static int crc_t10dif_transform_show(char *, const struct kernel_param *);

File lib/crc16.c:
55:	u16 crc16(u16, const u8 *, size_t);

File lib/crc32.c:
200:	u32 __crc32c_le(u32, const unsigned char *, size_t);
278:	u32 __crc32c_le_shift(u32, size_t);
340:	u32 crc32_be(u32, const unsigned char *, size_t);
195:	u32 crc32_le(u32, const unsigned char *, size_t);
273:	u32 crc32_le_shift(u32, size_t);
243:	static u32 crc32_generic_shift(u32, size_t, u32);

File lib/crypto/aes.c:
309:	void aes_decrypt(const struct crypto_aes_ctx *, u8 *, const u8 *);
258:	void aes_encrypt(const struct crypto_aes_ctx *, u8 *, const u8 *);
185:	int aes_expandkey(struct crypto_aes_ctx *, const u8 *, unsigned int);
125:	static u32 inv_mix_columns(u32);
163:	static u32 subw(u32);

File lib/crypto/chacha.c:
76:	void chacha_block_generic(u32 *, u8 *, int);
103:	void hchacha_block_generic(const u32 *, u32 *, int);
16:	static void chacha_permute(u32 *, int);

File lib/crypto/sha256.c:
277:	void sha224_final(struct sha256_state *, u8 *);
238:	void sha224_update(struct sha256_state *, const u8 *, unsigned int);
283:	void sha256(const u8 *, unsigned int, u8 *);
271:	void sha256_final(struct sha256_state *, u8 *);
209:	void sha256_update(struct sha256_state *, const u8 *, unsigned int);
244:	static void __sha256_final(struct sha256_state *, u8 *, int);
46:	static void sha256_transform(u32 *, const u8 *);

File lib/debug_locks.c:
39:	int debug_locks_off(void);

File lib/dec_and_lock.c:
21:	int _atomic_dec_and_lock(atomic_t *, spinlock_t *);
37:	int _atomic_dec_and_lock_irqsave(atomic_t *, spinlock_t *, unsigned long *);

File lib/decompress.c:
63:	decompress_fn decompress_method(const unsigned char *, long, const char **);

File lib/decompress_bunzip2.c:
679:	int bunzip2(unsigned char *, long, long (*)(void *, unsigned long), long (*)(void *, unsigned long), unsigned char *, long *, void (*)(char *));
116:	static unsigned int get_bits(struct bunzip_data *, char);
156:	static int get_next_block(struct bunzip_data *);
621:	static long nofill(void *, unsigned long);
629:	static int start_bunzip(struct bunzip_data **, void *, long, long (*)(void *, unsigned long));

File lib/decompress_inflate.c:
42:	int __gunzip(unsigned char *, long, long (*)(void *, unsigned long), long (*)(void *, unsigned long), unsigned char *, long, long *, void (*)(char *));
200:	int gunzip(unsigned char *, long, long (*)(void *, unsigned long), long (*)(void *, unsigned long), unsigned char *, long *, void (*)(char *));
36:	static long nofill(void *, unsigned long);

File lib/decompress_unlz4.c:
31:	int unlz4(u8 *, long, long (*)(void *, unsigned long), long (*)(void *, unsigned long), u8 *, long *, void (*)(char *));

File lib/decompress_unlzma.c:
537:	int unlzma(unsigned char *, long, long (*)(void *, unsigned long), long (*)(void *, unsigned long), unsigned char *, long *, void (*)(char *));
85:	static long nofill(void *, unsigned long);
131:	static void rc_do_normalize(struct rc *);
174:	static int rc_get_bit(struct rc *, uint16_t *, int *);
91:	static void rc_read(struct rc *);
42:	static long long read_int(unsigned char *, int);

File lib/decompress_unlzo.c:
41:	long parse_header(u8 *, long *, long);
98:	int unlzo(u8 *, long, long (*)(void *, unsigned long), long (*)(void *, unsigned long), u8 *, long *, void (*)(char *));

File lib/decompress_unxz.c:
251:	int unxz(unsigned char *, long, long (*)(void *, unsigned long), long (*)(void *, unsigned long), unsigned char *, long *, void (*)(char *));

File lib/decompress_unzstd.c:
331:	int unzstd(unsigned char *, long, long (*)(void *, unsigned long), long (*)(void *, unsigned long), unsigned char *, long *, void (*)(char *));
163:	static int __unzstd(unsigned char *, long, long (*)(void *, unsigned long), long (*)(void *, unsigned long), unsigned char *, long *, void (*)(char *), long);
123:	static int decompress_single(const u8 *, long, u8 *, long, long *, void (*)(char *));
92:	static int handle_zstd_error(size_t, void (*)(char *));

File lib/devres.c:
266:	void *devm_ioport_map(struct device *, unsigned long, unsigned int);
294:	void devm_ioport_unmap(struct device *, void *);
64:	void *devm_ioremap(struct device *, resource_size_t, resource_size_t);
15:	void devm_ioremap_release(struct device *, void *);
175:	void *devm_ioremap_resource(struct device *, const struct resource *);
191:	void *devm_ioremap_resource_wc(struct device *, const struct resource *);
79:	void *devm_ioremap_uc(struct device *, resource_size_t, resource_size_t);
94:	void *devm_ioremap_wc(struct device *, resource_size_t, resource_size_t);
108:	void devm_iounmap(struct device *, void *);
227:	void *devm_of_iomap(struct device *, struct device_node *, int, resource_size_t *);
362:	void *pcim_iomap(struct pci_dev *, int, unsigned long);
411:	int pcim_iomap_regions(struct pci_dev *, int, const char *);
464:	int pcim_iomap_regions_request_all(struct pci_dev *, int, const char *);
337:	void * const *pcim_iomap_table(struct pci_dev *);
384:	void pcim_iounmap(struct pci_dev *, void *);
488:	void pcim_iounmap_regions(struct pci_dev *, int);
25:	static void *__devm_ioremap(struct device *, resource_size_t, resource_size_t, enum devm_ioremap_type);
117:	static void *__devm_ioremap_resource(struct device *, const struct resource *, enum devm_ioremap_type);
244:	static void devm_ioport_map_release(struct device *, void *);
20:	static int devm_ioremap_match(struct device *, void *, void *);
313:	static void pcim_iomap_release(struct device *, void *);

File lib/digsig.c:
199:	int digsig_verify(struct key *, const char *, int, const char *, int);
271:	static void digsig_cleanup(void);
259:	static int digsig_init(void);
67:	static int digsig_verify_rsa(struct key *, const char *, int, const char *, int);

File lib/dim/dim.c:
57:	void dim_calc_stats(struct dim_sample *, struct dim_sample *, struct dim_stats *);
8:	bool dim_on_top(struct dim *);
40:	void dim_park_on_top(struct dim *);
49:	void dim_park_tired(struct dim *);
22:	void dim_turn(struct dim *);

File lib/dim/net_dim.c:
218:	void net_dim(struct dim *, struct dim_sample);
75:	struct dim_cq_moder net_dim_get_def_rx_moderation(u8);
95:	struct dim_cq_moder net_dim_get_def_tx_moderation(u8);
65:	struct dim_cq_moder net_dim_get_rx_moderation(u8, int);
85:	struct dim_cq_moder net_dim_get_tx_moderation(u8, int);
137:	static int net_dim_stats_compare(struct dim_stats *, struct dim_stats *);
104:	static int net_dim_step(struct dim *);

File lib/dim/rdma_dim.c:
76:	void rdma_dim(struct dim *, u64);

File lib/dump_stack.c:
88:	void dump_stack(void);
45:	void dump_stack_print_info(const char *);
28:	void dump_stack_set_arch_desc(const char *, ...);
69:	void show_regs_print_info(const char *);

File lib/dynamic_debug.c:
641:	void __dynamic_dev_dbg(struct _ddebug *, const struct device *, const char *, ...);
711:	void __dynamic_ibdev_dbg(struct _ddebug *, const struct ib_device *, const char *, ...);
672:	void __dynamic_netdev_dbg(struct _ddebug *, const struct net_device *, const char *, ...);
621:	void __dynamic_pr_debug(struct _ddebug *, const char *, ...);
944:	int ddebug_add_module(struct _ddebug *, unsigned int, const char *);
1006:	int ddebug_dyndbg_module_param_cb(char *, char *, const char *);
1022:	int ddebug_remove_module(const char *);
561:	int dynamic_debug_exec_queries(const char *, const char *);
148:	static int ddebug_change(const struct ddebug_query *, struct flag_settings *);
994:	static int ddebug_dyndbg_boot_param_cb(char *, char *, const char *, void *);
518:	static int ddebug_exec_queries(char *, const char *);
485:	static int ddebug_exec_query(char *, const char *);
369:	static int ddebug_parse_query(char **, int, struct ddebug_query *, const char *);
859:	static void *ddebug_proc_next(struct seq_file *, void *, loff_t *);
916:	static int ddebug_proc_open(struct inode *, struct file *);
878:	static int ddebug_proc_show(struct seq_file *, void *);
836:	static void *ddebug_proc_start(struct seq_file *, loff_t *);
904:	static void ddebug_proc_stop(struct seq_file *, void *);
764:	static ssize_t ddebug_proc_write(struct file *, const char *, size_t, loff_t *);
747:	static int ddebug_setup_query(char *);
1012:	static void ddebug_table_free(struct ddebug_table *);
236:	static int ddebug_tokenize(char *, char **, int);
1078:	static int dynamic_debug_init(void);
1055:	static int dynamic_debug_init_control(void);
589:	static char *dynamic_emit_prefix(const struct _ddebug *, char *);
306:	static int parse_linerange(struct ddebug_query *, const char *);
122:	static void vpr_info_dq(const struct ddebug_query *, const char *);

File lib/dynamic_queue_limits.c:
18:	void dql_completed(struct dql *, unsigned int);
131:	void dql_init(struct dql *, unsigned int);
116:	void dql_reset(struct dql *);

File lib/earlycpio.c:
59:	struct cpio_data find_cpio_data(const char *, void *, size_t, long *);

File lib/errname.c:
216:	const char *errname(int);

File lib/error-inject.c:
39:	int get_injectable_error_type(unsigned long);
23:	bool within_error_injection_list(unsigned long);
128:	static int ei_module_callback(struct notifier_block *, unsigned long, void *);
204:	static int ei_open(struct inode *, struct file *);
169:	static void *ei_seq_next(struct seq_file *, void *, loff_t *);
188:	static int ei_seq_show(struct seq_file *, void *);
158:	static void *ei_seq_start(struct seq_file *, loff_t *);
164:	static void ei_seq_stop(struct seq_file *, void *);
233:	static int init_error_injection(void);
57:	static void populate_error_injection_list(struct error_injection_entry *, struct error_injection_entry *, void *);

File lib/errseq.c:
144:	int errseq_check(errseq_t *, errseq_t);
174:	int errseq_check_and_advance(errseq_t *, errseq_t *);
122:	errseq_t errseq_sample(errseq_t *);
58:	errseq_t errseq_set(errseq_t *, int);

File lib/extable.c:
116:	const struct exception_table_entry *search_extable(const struct exception_table_entry *, const size_t, unsigned long);
64:	void sort_extable(struct exception_table_entry *, struct exception_table_entry *);
76:	void trim_init_extable(struct module *);
95:	static int cmp_ex_search(const void *, const void *);
52:	static int cmp_ex_sort(const void *, const void *);
28:	static void swap_ex(void *, void *, int);

File lib/find_bit.c:
107:	unsigned long find_first_bit(const unsigned long *, unsigned long);
125:	unsigned long find_first_zero_bit(const unsigned long *, unsigned long);
140:	unsigned long find_last_bit(const unsigned long *, unsigned long);
94:	unsigned long find_next_and_bit(const unsigned long *, const unsigned long *, unsigned long, unsigned long);
76:	unsigned long find_next_bit(const unsigned long *, unsigned long, unsigned long);
181:	unsigned long find_next_clump8(unsigned long *, const unsigned long *, unsigned long, unsigned long);
85:	unsigned long find_next_zero_bit(const unsigned long *, unsigned long, unsigned long);
31:	static unsigned long _find_next_bit(const unsigned long *, const unsigned long *, unsigned long, unsigned long, unsigned long, unsigned long);

File lib/flex_proportions.c:
220:	void __fprop_inc_percpu(struct fprop_global *, struct fprop_local_percpu *);
259:	void __fprop_inc_percpu_max(struct fprop_global *, struct fprop_local_percpu *, int);
131:	void __fprop_inc_single(struct fprop_global *, struct fprop_local_single *);
227:	void fprop_fraction_percpu(struct fprop_global *, struct fprop_local_percpu *, unsigned long *, unsigned long *);
139:	void fprop_fraction_single(struct fprop_global *, struct fprop_local_single *, unsigned long *, unsigned long *);
51:	void fprop_global_destroy(struct fprop_global *);
38:	int fprop_global_init(struct fprop_global *, gfp_t);
184:	void fprop_local_destroy_percpu(struct fprop_local_percpu *);
102:	void fprop_local_destroy_single(struct fprop_local_single *);
172:	int fprop_local_init_percpu(struct fprop_local_percpu *, gfp_t);
94:	int fprop_local_init_single(struct fprop_local_single *);
64:	bool fprop_new_period(struct fprop_global *, int);
189:	static void fprop_reflect_period_percpu(struct fprop_local_percpu *, struct fprop_global *, struct fprop_global *);
106:	static void fprop_reflect_period_single(struct fprop_local_single *, struct fprop_global *, struct fprop_global *);

File lib/fonts/fonts.c:
82:	const struct font_desc *find_font(const char *);
109:	const struct font_desc *get_default_font(int, int, u32, u32);

File lib/genalloc.c:
823:	struct gen_pool *devm_gen_pool_create(struct device *, int, int, const char *);
183:	int gen_pool_add_owner(struct gen_pool *, unsigned long, phys_addr_t, size_t, int, void *);
276:	unsigned long gen_pool_alloc_algo_owner(struct gen_pool *, size_t, genpool_algo_t, void *, void **);
579:	size_t gen_pool_avail(struct gen_pool *);
748:	unsigned long gen_pool_best_fit(unsigned long *, unsigned long, unsigned long, unsigned int, void *, struct gen_pool *, unsigned long);
152:	struct gen_pool *gen_pool_create(int, int);
241:	void gen_pool_destroy(struct gen_pool *);
340:	void *gen_pool_dma_alloc(struct gen_pool *, size_t, dma_addr_t *);
361:	void *gen_pool_dma_alloc_algo(struct gen_pool *, size_t, dma_addr_t *, genpool_algo_t, void *);
394:	void *gen_pool_dma_alloc_align(struct gen_pool *, size_t, dma_addr_t *, int);
418:	void *gen_pool_dma_zalloc(struct gen_pool *, size_t, dma_addr_t *);
439:	void *gen_pool_dma_zalloc_algo(struct gen_pool *, size_t, dma_addr_t *, genpool_algo_t, void *);
465:	void *gen_pool_dma_zalloc_align(struct gen_pool *, size_t, dma_addr_t *, int);
645:	unsigned long gen_pool_first_fit(unsigned long *, unsigned long, unsigned long, unsigned int, void *, struct gen_pool *, unsigned long);
663:	unsigned long gen_pool_first_fit_align(unsigned long *, unsigned long, unsigned long, unsigned int, void *, struct gen_pool *, unsigned long);
724:	unsigned long gen_pool_first_fit_order_align(unsigned long *, unsigned long, unsigned long, unsigned int, void *, struct gen_pool *, unsigned long);
690:	unsigned long gen_pool_fixed_alloc(unsigned long *, unsigned long, unsigned long, unsigned int, void *, struct gen_pool *, unsigned long);
530:	void gen_pool_for_each_chunk(struct gen_pool *, void (*)(struct gen_pool *, struct gen_pool_chunk *, void *), void *);
486:	void gen_pool_free_owner(struct gen_pool *, unsigned long, size_t, void **);
800:	struct gen_pool *gen_pool_get(struct device *, const char *);
552:	bool gen_pool_has_addr(struct gen_pool *, unsigned long, size_t);
621:	void gen_pool_set_algo(struct gen_pool *, genpool_algo_t, void *);
598:	size_t gen_pool_size(struct gen_pool *);
216:	phys_addr_t gen_pool_virt_to_phys(struct gen_pool *, unsigned long);
120:	static unsigned long bitmap_clear_ll(unsigned long *, unsigned long, unsigned long);
779:	static int devm_gen_pool_match(struct device *, void *, void *);
774:	static void devm_gen_pool_release(struct device *, void *);

File lib/generic-radix-tree.c:
230:	void __genradix_free(struct __genradix *);
162:	void *__genradix_iter_peek(struct genradix_iter *, struct __genradix *, size_t);
217:	int __genradix_prealloc(struct __genradix *, size_t, gfp_t);
54:	void *__genradix_ptr(struct __genradix *, size_t);
104:	void *__genradix_ptr_alloc(struct __genradix *, size_t, gfp_t);
204:	static void genradix_free_recurse(struct genradix_node *, unsigned int);

File lib/glob.c:
40:	bool glob_match(const char *, const char *);

File lib/hexdump.c:
66:	char *bin2hex(char *, const void *, size_t);
45:	int hex2bin(u8 *, const char *, size_t);
106:	int hex_dump_to_buffer(const void *, size_t, int, int, char *, size_t, bool);
26:	int hex_to_bin(char);
240:	void print_hex_dump(const char *, const char *, int, int, int, const void *, size_t, bool);

File lib/idr.c:
380:	int ida_alloc_range(struct ida *, unsigned int, unsigned int, gfp_t);
540:	void ida_destroy(struct ida *);
487:	void ida_free(struct ida *, unsigned int);
79:	int idr_alloc(struct idr *, void *, int, int, gfp_t);
117:	int idr_alloc_cyclic(struct idr *, void *, int, int, gfp_t);
33:	int idr_alloc_u32(struct idr *, void *, u32 *, unsigned long, gfp_t);
172:	void *idr_find(const struct idr *, unsigned long);
195:	int idr_for_each(const struct idr *, int (*)(int, void *, void *), void *);
264:	void *idr_get_next(struct idr *, int *);
227:	void *idr_get_next_ul(struct idr *, unsigned long *);
152:	void *idr_remove(struct idr *, unsigned long);
290:	void *idr_replace(struct idr *, void *, unsigned long);

File lib/interval_tree.c:
10:	void interval_tree_insert(struct interval_tree_node *, struct rb_root_cached *);
10:	struct interval_tree_node *interval_tree_iter_first(struct rb_root_cached *, unsigned long, unsigned long);
10:	struct interval_tree_node *interval_tree_iter_next(struct interval_tree_node *, unsigned long, unsigned long);
10:	void interval_tree_remove(struct interval_tree_node *, struct rb_root_cached *);
10:	static void interval_tree_augment_rotate(struct rb_node *, struct rb_node *);

File lib/iomap.c:
362:	void *ioport_map(unsigned long, unsigned int);
369:	void ioport_unmap(void *);
78:	unsigned int ioread16(const void *);
332:	void ioread16_rep(const void *, void *, unsigned long);
83:	unsigned int ioread16be(const void *);
88:	unsigned int ioread32(const void *);
336:	void ioread32_rep(const void *, void *, unsigned long);
93:	unsigned int ioread32be(const void *);
151:	u64 ioread64_hi_lo(const void *);
145:	u64 ioread64_lo_hi(const void *);
164:	u64 ioread64be_hi_lo(const void *);
157:	u64 ioread64be_lo_hi(const void *);
73:	unsigned int ioread8(const void *);
328:	void ioread8_rep(const void *, void *, unsigned long);
193:	void iowrite16(u16, void *);
348:	void iowrite16_rep(void *, const void *, unsigned long);
197:	void iowrite16be(u16, void *);
201:	void iowrite32(u32, void *);
352:	void iowrite32_rep(void *, const void *, unsigned long);
205:	void iowrite32be(u32, void *);
246:	void iowrite64_hi_lo(u64, void *);
240:	void iowrite64_lo_hi(u64, void *);
258:	void iowrite64be_hi_lo(u64, void *);
252:	void iowrite64be_lo_hi(u64, void *);
189:	void iowrite8(u8, void *);
344:	void iowrite8_rep(void *, const void *, unsigned long);
380:	void pci_iounmap(struct pci_dev *, void *);

File lib/iomap_copy.c:
42:	void __ioread32_copy(void *, const void *, size_t);
19:	void __iowrite32_copy(void *, const void *, size_t);
63:	void __iowrite64_copy(void *, const void *, size_t);

File lib/iov_iter.c:
1744:	ssize_t __import_iovec(int, const struct iovec *, unsigned int, unsigned int, struct iovec **, struct iov_iter *, bool);
765:	size_t _copy_from_iter(void *, size_t, struct iov_iter *);
846:	size_t _copy_from_iter_flushcache(void *, size_t, struct iov_iter *);
785:	bool _copy_from_iter_full(void *, size_t, struct iov_iter *);
867:	bool _copy_from_iter_full_nocache(void *, size_t, struct iov_iter *);
812:	size_t _copy_from_iter_nocache(void *, size_t, struct iov_iter *);
728:	size_t _copy_mc_to_iter(const void *, size_t, struct iov_iter *);
630:	size_t _copy_to_iter(const void *, size_t, struct iov_iter *);
937:	size_t copy_page_from_iter(struct page *, size_t, size_t, struct iov_iter *);
915:	size_t copy_page_to_iter(struct page *, size_t, size_t, struct iov_iter *);
1450:	size_t csum_and_copy_from_iter(void *, size_t, __wsum *, struct iov_iter *);
1489:	bool csum_and_copy_from_iter_full(void *, size_t, __wsum *, struct iov_iter *);
1531:	size_t csum_and_copy_to_iter(const void *, size_t, void *, struct iov_iter *);
1641:	const void *dup_iter(struct iov_iter *, struct iov_iter *, gfp_t);
1577:	size_t hash_and_copy_to_iter(const void *, size_t, void *, struct iov_iter *);
1813:	ssize_t import_iovec(int, const struct iovec *, unsigned int, unsigned int, struct iovec **, struct iov_iter *);
1822:	int import_single_range(int, void *, size_t, struct iovec *, struct iov_iter *);
1075:	void iov_iter_advance(struct iov_iter *, size_t);
1234:	unsigned long iov_iter_alignment(const struct iov_iter *);
1188:	void iov_iter_bvec(struct iov_iter *, unsigned int, const struct bio_vec *, unsigned long, size_t);
997:	size_t iov_iter_copy_from_user_atomic(struct page *, struct iov_iter *, unsigned long, size_t);
1225:	void iov_iter_discard(struct iov_iter *, unsigned int, size_t);
430:	int iov_iter_fault_in_readable(struct iov_iter *, size_t);
1837:	int iov_iter_for_each_range(struct iov_iter *, size_t, int (*)(struct kvec *, void *), void *);
1255:	unsigned long iov_iter_gap_alignment(const struct iov_iter *);
1321:	ssize_t iov_iter_get_pages(struct iov_iter *, struct page **, size_t, unsigned int, size_t *);
1400:	ssize_t iov_iter_get_pages_alloc(struct iov_iter *, struct page ***, size_t, size_t *);
448:	void iov_iter_init(struct iov_iter *, unsigned int, const struct iovec *, unsigned long, size_t);
1175:	void iov_iter_kvec(struct iov_iter *, unsigned int, const struct kvec *, unsigned long, size_t);
1596:	int iov_iter_npages(const struct iov_iter *, int);
1201:	void iov_iter_pipe(struct iov_iter *, unsigned int, struct pipe_inode_info *, size_t);
1089:	void iov_iter_revert(struct iov_iter *, size_t);
1160:	size_t iov_iter_single_seg_count(const struct iov_iter *);
983:	size_t iov_iter_zero(size_t, struct iov_iter *);
1709:	struct iovec *iovec_from_user(const struct iovec *, unsigned long, unsigned long, struct iovec *, bool);
1662:	static int copy_compat_iovec_from_user(struct iovec *, const struct iovec *, unsigned long);
1694:	static int copy_iovec_from_user(struct iovec *, const struct iovec *, unsigned long);
671:	static size_t copy_mc_pipe_to_iter(const void *, size_t, struct iov_iter *);
658:	static unsigned long copy_mc_to_page(struct page *, size_t, const char *, size_t);
248:	static size_t copy_page_from_iter_iovec(struct page *, size_t, size_t, struct iov_iter *);
164:	static size_t copy_page_to_iter_iovec(struct page *, size_t, size_t, struct iov_iter *);
375:	static size_t copy_page_to_iter_pipe(struct page *, size_t, size_t, struct iov_iter *);
559:	static size_t copy_pipe_to_iter(const void *, size_t, struct iov_iter *);
153:	static int copyin(void *, const void *, size_t);
142:	static int copyout(void *, const void *, size_t);
649:	static int copyout_mc(void *, const void *, size_t);
594:	static size_t csum_and_copy_to_pipe_iter(const void *, size_t, struct csum_state *, struct iov_iter *);
469:	static void memcpy_from_page(char *, struct page *, size_t, size_t);
476:	static void memcpy_to_page(struct page *, size_t, const char *, size_t);
483:	static void memzero_page(struct page *, size_t, size_t);
1047:	static void pipe_advance(struct iov_iter *, size_t);
1367:	static ssize_t pipe_get_pages_alloc(struct iov_iter *, struct page ***, size_t, size_t *);
956:	static size_t pipe_zero(size_t, struct iov_iter *);
511:	static size_t push_pipe(struct iov_iter *, size_t, int *, size_t *);
333:	static bool sanity(const struct iov_iter *);

File lib/irq_poll.c:
68:	void irq_poll_complete(struct irq_poll *);
145:	void irq_poll_disable(struct irq_poll *);
162:	void irq_poll_enable(struct irq_poll *);
179:	void irq_poll_init(struct irq_poll *, int, irq_poll_fn *);
27:	void irq_poll_sched(struct irq_poll *);
51:	static void __irq_poll_complete(struct irq_poll *);
188:	static int irq_poll_cpu_dead(unsigned int);
203:	static int irq_poll_setup(void);
78:	static void irq_poll_softirq(struct softirq_action *);

File lib/is_single_threaded.c:
15:	bool current_is_single_threaded(void);

File lib/kasprintf.c:
53:	char *kasprintf(gfp_t, const char *, ...);
15:	char *kvasprintf(gfp_t, const char *, struct __va_list_tag *);
43:	const char *kvasprintf_const(gfp_t, const char *, struct __va_list_tag *);

File lib/kfifo.c:
24:	int __kfifo_alloc(struct __kfifo *, unsigned int, size_t, gfp_t);
562:	void __kfifo_dma_in_finish_r(struct __kfifo *, unsigned int, size_t);
356:	unsigned int __kfifo_dma_in_prepare(struct __kfifo *, struct scatterlist *, int, unsigned int);
548:	unsigned int __kfifo_dma_in_prepare_r(struct __kfifo *, struct scatterlist *, int, unsigned int, size_t);
585:	void __kfifo_dma_out_finish_r(struct __kfifo *, size_t);
369:	unsigned int __kfifo_dma_out_prepare(struct __kfifo *, struct scatterlist *, int, unsigned int);
571:	unsigned int __kfifo_dma_out_prepare_r(struct __kfifo *, struct scatterlist *, int, unsigned int, size_t);
55:	void __kfifo_free(struct __kfifo *);
210:	int __kfifo_from_user(struct __kfifo *, const void *, unsigned long, unsigned int *);
499:	int __kfifo_from_user_r(struct __kfifo *, const void *, unsigned long, unsigned int *, size_t);
113:	unsigned int __kfifo_in(struct __kfifo *, const void *, unsigned int);
438:	unsigned int __kfifo_in_r(struct __kfifo *, const void *, unsigned int, size_t);
66:	int __kfifo_init(struct __kfifo *, void *, unsigned int, size_t);
432:	unsigned int __kfifo_len_r(struct __kfifo *, size_t);
382:	unsigned int __kfifo_max_r(unsigned int, size_t);
166:	unsigned int __kfifo_out(struct __kfifo *, void *, unsigned int);
152:	unsigned int __kfifo_out_peek(struct __kfifo *, void *, unsigned int);
464:	unsigned int __kfifo_out_peek_r(struct __kfifo *, void *, unsigned int, size_t);
476:	unsigned int __kfifo_out_r(struct __kfifo *, void *, unsigned int, size_t);
270:	int __kfifo_to_user(struct __kfifo *, void *, unsigned long, unsigned int *);
523:	int __kfifo_to_user_r(struct __kfifo *, void *, unsigned long, unsigned int *, size_t);
175:	static unsigned long kfifo_copy_from_user(struct __kfifo *, const void *, unsigned int, unsigned int, unsigned int *);
89:	static void kfifo_copy_in(struct __kfifo *, const void *, unsigned int, unsigned int);
128:	static void kfifo_copy_out(struct __kfifo *, void *, unsigned int, unsigned int);
236:	static unsigned long kfifo_copy_to_user(struct __kfifo *, void *, unsigned int, unsigned int, unsigned int *);
334:	static unsigned int setup_sgl(struct __kfifo *, struct scatterlist *, int, unsigned int, unsigned int);
295:	static int setup_sgl_buf(struct scatterlist *, void *, int, unsigned int);

File lib/klist.c:
162:	void klist_add_before(struct klist_node *, struct klist_node *);
146:	void klist_add_behind(struct klist_node *, struct klist_node *);
122:	void klist_add_head(struct klist_node *, struct klist *);
134:	void klist_add_tail(struct klist_node *, struct klist *);
228:	void klist_del(struct klist_node *);
84:	void klist_init(struct klist *, void (*)(struct klist_node *), void (*)(struct klist_node *));
311:	void klist_iter_exit(struct klist_iter *);
297:	void klist_iter_init(struct klist *, struct klist_iter *);
280:	void klist_iter_init_node(struct klist *, struct klist_iter *, struct klist_node *);
375:	struct klist_node *klist_next(struct klist_iter *);
265:	int klist_node_attached(struct klist_node *);
333:	struct klist_node *klist_prev(struct klist_iter *);
238:	void klist_remove(struct klist_node *);
204:	static int klist_dec_and_del(struct klist_node *);
108:	static void klist_node_init(struct klist *, struct klist_node *);
209:	static void klist_put(struct klist_node *, bool);
183:	static void klist_release(struct kref *);

File lib/kobject.c:
1067:	const struct kobj_ns_type_operations *kobj_child_ns_ops(struct kobject *);
1082:	bool kobj_ns_current_may_mount(enum kobj_ns_type);
1135:	void kobj_ns_drop(enum kobj_ns_type, void *);
1095:	void *kobj_ns_grab_current(enum kobj_ns_type);
1122:	const void *kobj_ns_initial(enum kobj_ns_type);
1109:	const void *kobj_ns_netlink(enum kobj_ns_type, struct sock *);
1077:	const struct kobj_ns_type_operations *kobj_ns_ops(struct kobject *);
1028:	int kobj_ns_type_register(const struct kobj_ns_type_operations *);
1055:	int kobj_ns_type_registered(enum kobj_ns_type);
426:	int kobject_add(struct kobject *, struct kobject *, const char *, ...);
780:	struct kobject *kobject_create(void);
805:	struct kobject *kobject_create_and_add(const char *, struct kobject *);
635:	void kobject_del(struct kobject *);
652:	struct kobject *kobject_get(struct kobject *);
48:	void kobject_get_ownership(struct kobject *, kuid_t *, kgid_t *);
171:	char *kobject_get_path(struct kobject *, gfp_t);
665:	struct kobject *kobject_get_unless_zero(struct kobject *);
349:	void kobject_init(struct kobject *, struct kobj_type *);
464:	int kobject_init_and_add(struct kobject *, struct kobj_type *, struct kobject *, const char *, ...);
554:	int kobject_move(struct kobject *, struct kobject *);
28:	const void *kobject_namespace(struct kobject *);
746:	void kobject_put(struct kobject *);
490:	int kobject_rename(struct kobject *, const char *);
324:	int kobject_set_name(struct kobject *, const char *, ...);
281:	int kobject_set_name_vargs(struct kobject *, const char *, struct __va_list_tag *);
1005:	struct kset *kset_create_and_add(const char *, const struct kset_uevent_ops *, struct kobject *);
908:	struct kobject *kset_find_obj(struct kset *, const char *);
828:	void kset_init(struct kset *);
870:	int kset_register(struct kset *);
890:	void kset_unregister(struct kset *);
602:	static void __kobject_del(struct kobject *);
83:	static int create_dir(struct kobject *);
758:	static void dynamic_kobj_release(struct kobject *);
147:	static void fill_kobj_path(struct kobject *, char *, int);
836:	static ssize_t kobj_attr_show(struct kobject *, struct attribute *, char *);
848:	static ssize_t kobj_attr_store(struct kobject *, struct attribute *, const char *, size_t);
201:	static void kobj_kset_leave(struct kobject *);
225:	static int kobject_add_internal(struct kobject *);
679:	static void kobject_cleanup(struct kobject *);
935:	static void kset_get_ownership(struct kobject *, kuid_t *, kgid_t *);
927:	static void kset_release(struct kobject *);

File lib/kobject_uevent.c:
654:	int add_uevent_var(struct kobj_uevent_env *, const char *, ...);
192:	int kobject_synth_uevent(struct kobject *, const char *, size_t);
640:	int kobject_uevent(struct kobject *, enum kobject_action);
457:	int kobject_uevent_env(struct kobject *, enum kobject_action, char **);
279:	static struct sk_buff *alloc_uevent_skb(struct kobj_uevent_env *, const char *, const char *);
114:	static int kobject_action_args(const char *, size_t, struct kobj_uevent_env **);
808:	static int kobject_uevent_init(void);
381:	static int kobject_uevent_net_broadcast(struct kobject *, struct kobj_uevent_env *, const char *, const char *);
682:	static int uevent_net_broadcast(struct sock *, struct sk_buff *, struct netlink_ext_ack *);
342:	static int uevent_net_broadcast_tagged(struct sock *, struct kobj_uevent_env *, const char *, const char *);
309:	static int uevent_net_broadcast_untagged(struct kobj_uevent_env *, const char *, const char *);
789:	static void uevent_net_exit(struct net *);
757:	static int uevent_net_init(struct net *);
752:	static void uevent_net_rcv(struct sk_buff *);
725:	static int uevent_net_rcv_skb(struct sk_buff *, struct nlmsghdr *, struct netlink_ext_ack *);
419:	static void zap_modalias_env(struct kobj_uevent_env *);

File lib/kstrtox.c:
191:	int _kstrtol(const char *, unsigned int, long *);
175:	int _kstrtoul(const char *, unsigned int, unsigned long *);
87:	unsigned int _parse_integer(const char *, unsigned int, unsigned long long *);
24:	const char *_parse_integer_fixup_radix(const char *, unsigned int *);
49:	unsigned int _parse_integer_limit(const char *, unsigned int, unsigned long long *, size_t);
335:	int kstrtobool(const char *, bool *);
377:	int kstrtobool_from_user(const char *, size_t, bool *);
251:	int kstrtoint(const char *, unsigned int, int *);
409:	int kstrtoint_from_user(const char *, size_t, unsigned int, int *);
150:	int kstrtoll(const char *, unsigned int, long long *);
405:	int kstrtoll_from_user(const char *, size_t, unsigned int, long long *);
281:	int kstrtos16(const char *, unsigned int, s16 *);
411:	int kstrtos16_from_user(const char *, size_t, unsigned int, s16 *);
311:	int kstrtos8(const char *, unsigned int, s8 *);
413:	int kstrtos8_from_user(const char *, size_t, unsigned int, s8 *);
266:	int kstrtou16(const char *, unsigned int, u16 *);
410:	int kstrtou16_from_user(const char *, size_t, unsigned int, u16 *);
296:	int kstrtou8(const char *, unsigned int, u8 *);
412:	int kstrtou8_from_user(const char *, size_t, unsigned int, u8 *);
221:	int kstrtouint(const char *, unsigned int, unsigned int *);
408:	int kstrtouint_from_user(const char *, size_t, unsigned int, unsigned int *);
406:	int kstrtoul_from_user(const char *, size_t, unsigned int, unsigned long *);
127:	int kstrtoull(const char *, unsigned int, unsigned long long *);
404:	int kstrtoull_from_user(const char *, size_t, unsigned int, unsigned long long *);
92:	static int _kstrtoull(const char *, unsigned int, unsigned long long *);

File lib/list_debug.c:
20:	bool __list_add_valid(struct list_head *, struct list_head *, struct list_head *);
38:	bool __list_del_entry_valid(struct list_head *);

File lib/list_sort.c:
185:	void list_sort(void *, struct list_head *, list_cmp_func_t);

File lib/llist.c:
26:	bool llist_add_batch(struct llist_node *, struct llist_node *, struct llist_head *);
53:	struct llist_node *llist_del_first(struct llist_head *);
79:	struct llist_node *llist_reverse_order(struct llist_node *);

File lib/lockref.c:
44:	void lockref_get(struct lockref *);
199:	int lockref_get_not_dead(struct lockref *);
63:	int lockref_get_not_zero(struct lockref *);
120:	int lockref_get_or_lock(struct lockref *);
187:	void lockref_mark_dead(struct lockref *);
91:	int lockref_put_not_zero(struct lockref *);
164:	int lockref_put_or_lock(struct lockref *);
146:	int lockref_put_return(struct lockref *);

File lib/logic_pio.c:
128:	struct logic_pio_hwaddr *find_io_range_by_fwnode(struct fwnode_handle *);
36:	int logic_pio_register_range(struct logic_pio_hwaddr *);
173:	resource_size_t logic_pio_to_hwaddr(unsigned long);
210:	unsigned long logic_pio_trans_cpuaddr(resource_size_t);
192:	unsigned long logic_pio_trans_hwaddr(struct fwnode_handle *, resource_size_t, resource_size_t);
112:	void logic_pio_unregister_range(struct logic_pio_hwaddr *);

File lib/lz4/lz4_decompress.c:
474:	int LZ4_decompress_fast(const char *, char *, int);
636:	int LZ4_decompress_fast_continue(LZ4_streamDecode_t *, const char *, char *, int);
693:	int LZ4_decompress_fast_usingDict(const char *, char *, int, const char *, int);
456:	int LZ4_decompress_safe(const char *, char *, int, int);
583:	int LZ4_decompress_safe_continue(LZ4_streamDecode_t *, const char *, char *, int, int);
506:	int LZ4_decompress_safe_forceExtDict(const char *, char *, int, int, const void *, size_t);
465:	int LZ4_decompress_safe_partial(const char *, char *, int, int, int);
675:	int LZ4_decompress_safe_usingDict(const char *, char *, int, int, const char *, int);
484:	int LZ4_decompress_safe_withPrefix64k(const char *, char *, int, int);
560:	int LZ4_setStreamDecode(LZ4_streamDecode_t *, const char *, int);
517:	static int LZ4_decompress_fast_extDict(const char *, char *, int, const void *, size_t);
494:	static int LZ4_decompress_safe_withSmallPrefix(const char *, char *, int, int, size_t);

File lib/lzo/lzo1x_compress.c:
381:	int lzo1x_1_compress(const unsigned char *, size_t, unsigned char *, size_t *, void *);
304:	int lzogeneric1x_1_compress(const unsigned char *, size_t, unsigned char *, size_t *, void *, const unsigned char);
388:	int lzorle1x_1_compress(const unsigned char *, size_t, unsigned char *, size_t *, void *);
22:	static size_t lzo1x_1_do_compress(const unsigned char *, size_t, unsigned char *, size_t *, size_t, void *, signed char *, const unsigned char);

File lib/lzo/lzo1x_decompress_safe.c:
39:	int lzo1x_decompress_safe(const unsigned char *, size_t, unsigned char *, size_t *);

File lib/math/div64.c:
188:	u32 iter_div_u64_rem(u64, u32, u64 *);

File lib/math/gcd.c:
23:	unsigned long gcd(unsigned long, unsigned long);

File lib/math/int_pow.c:
19:	u64 int_pow(u64, unsigned int);

File lib/math/int_sqrt.c:
19:	unsigned long int_sqrt(unsigned long);

File lib/math/lcm.c:
8:	unsigned long lcm(unsigned long, unsigned long);
17:	unsigned long lcm_not_zero(unsigned long, unsigned long);

File lib/math/rational.c:
34:	void rational_best_approximation(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long *, unsigned long *);

File lib/math/reciprocal_div.c:
14:	struct reciprocal_value reciprocal_value(u32);
32:	struct reciprocal_value_adv reciprocal_value_adv(u32, u8);

File lib/memcat_p.c:
10:	void **__memcat_p(void **, void **);

File lib/memregion.c:
9:	int memregion_alloc(gfp_t);
15:	void memregion_free(int);

File lib/memweight.c:
11:	size_t memweight(const void *, size_t);

File lib/mpi/ec.c:
1188:	void mpi_ec_add_points(MPI_POINT, MPI_POINT, MPI_POINT, struct mpi_ec_ctx *);
1401:	int mpi_ec_curve_point(MPI_POINT, struct mpi_ec_ctx *);
648:	void mpi_ec_deinit(struct mpi_ec_ctx *);
678:	int mpi_ec_get_affine(MPI, MPI, MPI_POINT, struct mpi_ec_ctx *);
564:	void mpi_ec_init(struct mpi_ec_ctx *, enum gcry_mpi_ec_models, enum ecc_dialects, int, MPI, MPI, MPI);
1210:	void mpi_ec_mul_point(MPI_POINT, MPI, MPI_POINT, struct mpi_ec_ctx *);
72:	void mpi_point_free_parts(MPI_POINT);
63:	void mpi_point_init(MPI_POINT);
37:	MPI_POINT mpi_point_new(unsigned int);
51:	void mpi_point_release(MPI_POINT);
1069:	static void add_points_edwards(MPI_POINT, MPI_POINT, MPI_POINT, struct mpi_ec_ctx *);
931:	static void add_points_weierstrass(MPI_POINT, MPI_POINT, MPI_POINT, struct mpi_ec_ctx *);
842:	static void dup_point_edwards(MPI_POINT, MPI_POINT, struct mpi_ec_ctx *);
753:	static void dup_point_weierstrass(MPI_POINT, MPI_POINT, struct mpi_ec_ctx *);
122:	static void ec_addm(MPI, MPI, MPI, struct mpi_ec_ctx *);
199:	static void ec_addm_25519(MPI, MPI, MPI, struct mpi_ec_ctx *);
306:	static void ec_addm_448(MPI, MPI, MPI, struct mpi_ec_ctx *);
143:	static void ec_mul2(MPI, MPI, struct mpi_ec_ctx *);
291:	static void ec_mul2_25519(MPI, MPI, struct mpi_ec_ctx *);
443:	static void ec_mul2_448(MPI, MPI, struct mpi_ec_ctx *);
136:	static void ec_mulm(MPI, MPI, MPI, struct mpi_ec_ctx *);
242:	static void ec_mulm_25519(MPI, MPI, MPI, struct mpi_ec_ctx *);
346:	static void ec_mulm_448(MPI, MPI, MPI, struct mpi_ec_ctx *);
160:	static void ec_pow2(MPI, const MPI, struct mpi_ec_ctx *);
296:	static void ec_pow2_25519(MPI, const MPI, struct mpi_ec_ctx *);
448:	static void ec_pow2_448(MPI, const MPI, struct mpi_ec_ctx *);
128:	static void ec_subm(MPI, MPI, MPI, struct mpi_ec_ctx *);
221:	static void ec_subm_25519(MPI, MPI, MPI, struct mpi_ec_ctx *);
326:	static void ec_subm_448(MPI, MPI, MPI, struct mpi_ec_ctx *);
1163:	static void montgomery_ladder(MPI_POINT, MPI_POINT, MPI_POINT, MPI_POINT, MPI, struct mpi_ec_ctx *);
915:	static void mpi_ec_dup_point(MPI_POINT, MPI_POINT, struct mpi_ec_ctx *);
88:	static void point_resize(MPI_POINT, struct mpi_ec_ctx *);

File lib/mpi/generic_mpih-add1.c:
21:	mpi_limb_t mpihelp_add_n(mpi_ptr_t, mpi_ptr_t, mpi_ptr_t, mpi_size_t);

File lib/mpi/generic_mpih-lshift.c:
28:	mpi_limb_t mpihelp_lshift(mpi_ptr_t, mpi_ptr_t, mpi_size_t, unsigned int);

File lib/mpi/generic_mpih-mul1.c:
20:	mpi_limb_t mpihelp_mul_1(mpi_ptr_t, mpi_ptr_t, mpi_size_t, mpi_limb_t);

File lib/mpi/generic_mpih-mul2.c:
20:	mpi_limb_t mpihelp_addmul_1(mpi_ptr_t, mpi_ptr_t, mpi_size_t, mpi_limb_t);

File lib/mpi/generic_mpih-mul3.c:
20:	mpi_limb_t mpihelp_submul_1(mpi_ptr_t, mpi_ptr_t, mpi_size_t, mpi_limb_t);

File lib/mpi/generic_mpih-rshift.c:
29:	mpi_limb_t mpihelp_rshift(mpi_ptr_t, mpi_ptr_t, mpi_size_t, unsigned int);

File lib/mpi/generic_mpih-sub1.c:
20:	mpi_limb_t mpihelp_sub_n(mpi_ptr_t, mpi_ptr_t, mpi_ptr_t, mpi_size_t);

File lib/mpi/mpi-add.c:
67:	void mpi_add(MPI, MPI, MPI);
20:	void mpi_add_ui(MPI, MPI, unsigned long);
143:	void mpi_addm(MPI, MPI, MPI, MPI);
134:	void mpi_sub(MPI, MPI, MPI);
150:	void mpi_subm(MPI, MPI, MPI, MPI);

File lib/mpi/mpi-bit.c:
140:	void mpi_clear_bit(MPI, unsigned int);
122:	void mpi_clear_highbit(MPI, unsigned int);
40:	unsigned int mpi_get_nbits(MPI);
272:	void mpi_lshift(MPI, MPI, unsigned int);
250:	void mpi_lshift_limbs(MPI, unsigned int);
30:	void mpi_normalize(MPI);
178:	void mpi_rshift(MPI, MPI, unsigned int);
158:	void mpi_rshift_limbs(MPI, unsigned int);
80:	void mpi_set_bit(MPI, unsigned int);
99:	void mpi_set_highbit(MPI, unsigned int);
62:	int mpi_test_bit(MPI, unsigned int);

File lib/mpi/mpi-cmp.c:
84:	int mpi_cmp(MPI, MPI);
23:	int mpi_cmp_ui(MPI, unsigned long);
90:	int mpi_cmpabs(MPI, MPI);
44:	static int do_mpi_cmp(MPI, MPI, int);

File lib/mpi/mpi-div.c:
43:	void mpi_fdiv_q(MPI, MPI, MPI);
50:	void mpi_fdiv_qr(MPI, MPI, MPI, MPI);
20:	void mpi_fdiv_r(MPI, MPI, MPI);
83:	void mpi_tdiv_qr(MPI, MPI, MPI, MPI);
78:	void mpi_tdiv_r(MPI, MPI, MPI);

File lib/mpi/mpi-inv.c:
27:	int mpi_invm(MPI, MPI, MPI);

File lib/mpi/mpi-mod.c:
65:	void mpi_barrett_free(mpi_barrett_t);
36:	mpi_barrett_t mpi_barrett_init(MPI, int);
25:	void mpi_mod(MPI, MPI, MPI);
93:	void mpi_mod_barrett(MPI, MPI, mpi_barrett_t);
151:	void mpi_mul_barrett(MPI, MPI, MPI, mpi_barrett_t);

File lib/mpi/mpi-mul.c:
16:	void mpi_mul(MPI, MPI, MPI);
86:	void mpi_mulm(MPI, MPI, MPI, MPI);

File lib/mpi/mpi-pow.c:
24:	int mpi_powm(MPI, MPI, MPI, MPI);

File lib/mpi/mpi-sub-ui.c:
37:	int mpi_sub_ui(MPI, MPI, unsigned long);

File lib/mpi/mpicoder.c:
135:	int mpi_fromstr(MPI, const char *);
329:	void *mpi_get_buffer(MPI, unsigned int *, int *);
82:	int mpi_key_length(const void *, unsigned int, unsigned int *, unsigned int *);
573:	int mpi_print(enum gcry_mpi_format, unsigned char *, size_t, size_t *, MPI);
269:	int mpi_read_buffer(MPI, uint8_t *, unsigned int, unsigned int *, int *);
106:	MPI mpi_read_from_buffer(const void *, unsigned int *);
36:	MPI mpi_read_raw_data(const void *, size_t);
456:	MPI mpi_read_raw_from_sgl(struct scatterlist *, unsigned int);
221:	MPI mpi_scanval(const char *);
373:	int mpi_write_to_sgl(MPI, struct scatterlist *, unsigned int, int *);
544:	static void twocompl(unsigned char *, unsigned int);

File lib/mpi/mpih-cmp.c:
25:	int mpihelp_cmp(mpi_ptr_t, mpi_ptr_t, mpi_size_t);

File lib/mpi/mpih-div.c:
379:	mpi_limb_t mpihelp_divmod_1(mpi_ptr_t, mpi_ptr_t, mpi_size_t, mpi_limb_t);
189:	mpi_limb_t mpihelp_divrem(mpi_ptr_t, mpi_size_t, mpi_ptr_t, mpi_size_t, mpi_ptr_t, mpi_size_t);
29:	mpi_limb_t mpihelp_mod_1(mpi_ptr_t, mpi_size_t, mpi_limb_t);

File lib/mpi/mpih-mul.c:
245:	void mpih_sqr_n(mpi_ptr_t, mpi_ptr_t, mpi_size_t, mpi_ptr_t);
207:	void mpih_sqr_n_basecase(mpi_ptr_t, mpi_ptr_t, mpi_size_t);
452:	int mpihelp_mul(mpi_ptr_t, mpi_ptr_t, mpi_size_t, mpi_ptr_t, mpi_size_t, mpi_limb_t *);
346:	int mpihelp_mul_karatsuba_case(mpi_ptr_t, mpi_ptr_t, mpi_size_t, mpi_ptr_t, mpi_size_t, struct karatsuba_ctx *);
321:	void mpihelp_mul_n(mpi_ptr_t, mpi_ptr_t, mpi_ptr_t, mpi_size_t);
418:	void mpihelp_release_karatsuba_ctx(struct karatsuba_ctx *);
95:	static void mul_n(mpi_ptr_t, mpi_ptr_t, mpi_ptr_t, mpi_size_t, mpi_ptr_t);
55:	static mpi_limb_t mul_n_basecase(mpi_ptr_t, mpi_ptr_t, mpi_ptr_t, mpi_size_t);

File lib/mpi/mpiutil.c:
87:	MPI mpi_alloc(unsigned int);
218:	MPI mpi_alloc_like(MPI);
114:	mpi_ptr_t mpi_alloc_limb_space(unsigned int);
286:	MPI mpi_alloc_set_ui(unsigned long);
132:	void mpi_assign_limb_space(MPI, mpi_ptr_t, unsigned int);
166:	void mpi_clear(MPI);
70:	MPI mpi_const(enum gcry_mpi_constants);
195:	MPI mpi_copy(MPI);
175:	void mpi_free(MPI);
124:	void mpi_free_limb_space(mpi_ptr_t);
143:	int mpi_resize(MPI, unsigned int);
250:	MPI mpi_set(MPI, MPI);
270:	MPI mpi_set_ui(MPI, unsigned long);
235:	void mpi_snatch(MPI, MPI);
300:	void mpi_swap_cond(MPI, MPI, unsigned long);
29:	static int mpi_init(void);

File lib/net_utils.c:
7:	bool mac_pton(const char *, u8 *);

File lib/nlattr.c:
680:	int __nla_parse(struct nlattr **, int, const struct nlattr *, int, const struct nla_policy *, unsigned int, struct netlink_ext_ack *);
976:	void __nla_put(struct sk_buff *, int, int, const void *);
997:	void __nla_put_64bit(struct sk_buff *, int, int, const void *, int);
1016:	void __nla_put_nohdr(struct sk_buff *, int, const void *);
843:	struct nlattr *__nla_reserve(struct sk_buff *, int, int);
871:	struct nlattr *__nla_reserve_64bit(struct sk_buff *, int, int, int);
890:	void *__nla_reserve_nohdr(struct sk_buff *, int);
626:	int __nla_validate(const struct nlattr *, int, int, const struct nla_policy *, unsigned int, struct netlink_ext_ack *);
1101:	int nla_append(struct sk_buff *, int, const void *);
698:	struct nlattr *nla_find(const struct nlattr *, int, int);
223:	void nla_get_range_signed(const struct nla_policy *, struct netlink_range_validation_signed *);
114:	void nla_get_range_unsigned(const struct nla_policy *, struct netlink_range_validation *);
795:	int nla_memcmp(const struct nlattr *, const void *, size_t);
777:	int nla_memcpy(void *, const struct nlattr *, int);
647:	int nla_policy_len(const struct nla_policy *, int);
1035:	int nla_put(struct sk_buff *, int, int, const void *);
1056:	int nla_put_64bit(struct sk_buff *, int, int, const void *, int);
1082:	int nla_put_nohdr(struct sk_buff *, int, const void *);
908:	struct nlattr *nla_reserve(struct sk_buff *, int, int);
931:	struct nlattr *nla_reserve_64bit(struct sk_buff *, int, int, int);
957:	void *nla_reserve_nohdr(struct sk_buff *, int);
812:	int nla_strcmp(const struct nlattr *, const char *);
749:	char *nla_strdup(const struct nlattr *, gfp_t);
723:	size_t nla_strlcpy(char *, const struct nlattr *, size_t);
558:	static int __nla_validate_parse(const struct nlattr *, int, int, const struct nla_policy *, unsigned int, struct netlink_ext_ack *, struct nlattr **, unsigned int);
302:	static int nla_validate_int_range(const struct nla_policy *, const struct nlattr *, struct netlink_ext_ack *, unsigned int);
357:	static int validate_nla(const struct nlattr *, int, const struct nla_policy *, unsigned int, struct netlink_ext_ack *, unsigned int);

File lib/nmi_backtrace.c:
92:	bool nmi_cpu_backtrace(struct pt_regs *);
36:	void nmi_trigger_cpumask_backtrace(const cpumask_t *, bool, void (*)(cpumask_t *));

File lib/nodemask.c:
6:	int __next_node_in(int, const nodemask_t *);
21:	int node_random(const nodemask_t *);

File lib/oid_registry.c:
26:	enum OID look_up_OID(const void *, size_t);
106:	int parse_OID(const void *, size_t, enum OID *);
187:	int sprint_OID(enum OID, char *, size_t);
130:	int sprint_oid(const void *, size_t, char *, size_t);

File lib/once.c:
60:	void __do_once_done(bool *, struct static_key_true *, unsigned long *, struct module *);
42:	bool __do_once_start(bool *, unsigned long *);
14:	static void once_deferred(struct work_struct *);

File lib/parser.c:
232:	int match_hex(substring_t *, int *);
185:	int match_int(substring_t *, int *);
217:	int match_octal(substring_t *, int *);
320:	char *match_strdup(const substring_t *);
299:	size_t match_strlcpy(char *, const substring_t *, size_t);
105:	int match_token(char *, const struct match_token *, substring_t *);
202:	int match_u64(substring_t *, u64 *);
249:	bool match_wildcard(const char *, const char *);
126:	static int match_number(substring_t *, int *, int);
24:	static int match_one(char *, const char *, substring_t *);

File lib/pci_iomap.c:
111:	void *pci_iomap(struct pci_dev *, int, unsigned long);
28:	void *pci_iomap_range(struct pci_dev *, int, unsigned long, unsigned long);
132:	void *pci_iomap_wc(struct pci_dev *, int, unsigned long);
68:	void *pci_iomap_wc_range(struct pci_dev *, int, unsigned long, unsigned long);

File lib/percpu-refcount.c:
128:	void percpu_ref_exit(struct percpu_ref *);
62:	int percpu_ref_init(struct percpu_ref *, percpu_ref_func_t *, unsigned int, gfp_t);
402:	bool percpu_ref_is_zero(struct percpu_ref *);
375:	void percpu_ref_kill_and_confirm(struct percpu_ref *, percpu_ref_func_t *);
433:	void percpu_ref_reinit(struct percpu_ref *);
455:	void percpu_ref_resurrect(struct percpu_ref *);
298:	void percpu_ref_switch_to_atomic(struct percpu_ref *, percpu_ref_func_t *);
320:	void percpu_ref_switch_to_atomic_sync(struct percpu_ref *);
345:	void percpu_ref_switch_to_percpu(struct percpu_ref *);
106:	static void __percpu_ref_exit(struct percpu_ref *);
257:	static void __percpu_ref_switch_mode(struct percpu_ref *, percpu_ref_func_t *);
148:	static void percpu_ref_call_confirm_rcu(struct callback_head *);
202:	static void percpu_ref_noop_confirm_switch(struct percpu_ref *);
165:	static void percpu_ref_switch_to_atomic_rcu(struct callback_head *);

File lib/percpu_counter.c:
221:	int __percpu_counter_compare(struct percpu_counter *, s64, s32);
141:	int __percpu_counter_init(struct percpu_counter *, s64, gfp_t, struct lock_class_key *);
124:	s64 __percpu_counter_sum(struct percpu_counter *);
82:	void percpu_counter_add_batch(struct percpu_counter *, s64, s32);
165:	void percpu_counter_destroy(struct percpu_counter *);
60:	void percpu_counter_set(struct percpu_counter *, s64);
107:	void percpu_counter_sync(struct percpu_counter *);
187:	static int compute_batch_value(unsigned int);
195:	static int percpu_counter_cpu_dead(unsigned int);
244:	static int percpu_counter_startup(void);

File lib/pldmfw/pldmfw.c:
832:	int pldmfw_flash_image(struct pldmfw *, const struct firmware *);
628:	bool pldmfw_op_pci_match_record(struct pldmfw *, struct pldmfw_record *);
65:	static int pldm_check_fw_space(size_t, size_t, struct pldmfw_priv *, struct pldmfw_priv *);
91:	static int pldm_move_fw_offset(struct pldmfw_priv *, size_t);
441:	static int pldm_parse_components(struct pldmfw_priv *);
259:	static int pldm_parse_desc_tlvs(struct pldmfw_priv *, struct pldmfw_record *, u8);
123:	static int pldm_parse_header(struct pldmfw_priv *);
584:	static int pldm_parse_image(struct pldmfw_priv *);
320:	static int pldm_parse_one_record(struct pldmfw_priv *, const struct __pldmfw_record_info *);
737:	static int pldm_send_component_tables(struct pldmfw_priv *);
543:	static void pldmfw_free_priv(struct pldmfw_priv *);

File lib/plist.c:
73:	void plist_add(struct plist_node *, struct plist_head *);
112:	void plist_del(struct plist_node *, struct plist_head *);
145:	void plist_requeue(struct plist_node *, struct plist_head *);

File lib/radix-tree.c:
745:	void *__radix_tree_lookup(const struct xarray *, unsigned long, struct xa_node **, void ***);
873:	void __radix_tree_replace(struct xarray *, struct xa_node *, void **, void *);
1557:	void idr_destroy(struct idr *);
1474:	void **idr_get_free(struct xarray *, struct radix_tree_iter *, gfp_t, unsigned long);
1467:	void idr_preload(gfp_t);
1443:	void *radix_tree_delete(struct xarray *, unsigned long);
1411:	void *radix_tree_delete_item(struct xarray *, unsigned long, void *);
1260:	unsigned int radix_tree_gang_lookup(const struct xarray *, void **, unsigned long, unsigned int);
1300:	unsigned int radix_tree_gang_lookup_tag(const struct xarray *, void **, unsigned long, unsigned int, unsigned int);
1341:	unsigned int radix_tree_gang_lookup_tag_slot(const struct xarray *, void ***, unsigned long, unsigned int, unsigned int);
1592:	void radix_tree_init(void);
701:	int radix_tree_insert(struct xarray *, unsigned long, void *);
1392:	void radix_tree_iter_delete(struct xarray *, struct radix_tree_iter *, void **);
928:	void radix_tree_iter_replace(struct xarray *, const struct radix_tree_iter *, void **, void *);
1133:	void **radix_tree_iter_resume(void **, struct radix_tree_iter *);
1057:	void radix_tree_iter_tag_clear(struct xarray *, const struct radix_tree_iter *, unsigned int);
815:	void *radix_tree_lookup(const struct xarray *, unsigned long);
792:	void **radix_tree_lookup_slot(const struct xarray *, unsigned long);
376:	int radix_tree_maybe_preload(gfp_t);
1152:	void **radix_tree_next_chunk(const struct xarray *, struct radix_tree_iter *, unsigned int);
288:	void radix_tree_node_rcu_free(struct callback_head *);
363:	int radix_tree_preload(gfp_t);
912:	void radix_tree_replace_slot(struct xarray *, void **, void *);
1026:	void *radix_tree_tag_clear(struct xarray *, unsigned long, unsigned int);
1078:	int radix_tree_tag_get(const struct xarray *, unsigned long, unsigned int);
964:	void *radix_tree_tag_set(struct xarray *, unsigned long, unsigned int);
1454:	int radix_tree_tagged(const struct xarray *, unsigned int);
596:	static int __radix_tree_create(struct xarray *, unsigned long, struct xa_node **, void ***);
1362:	static bool __radix_tree_delete(struct xarray *, struct xa_node *, void **);
320:	static int __radix_tree_preload(gfp_t, unsigned int);
541:	static bool delete_node(struct xarray *, struct xa_node *);
992:	static void node_tag_clear(struct xarray *, struct xa_node *, unsigned int, unsigned int);
1576:	static int radix_tree_cpu_dead(unsigned int);
406:	static int radix_tree_extend(struct xarray *, gfp_t, unsigned long, unsigned int);
654:	static void radix_tree_free_nodes(struct xa_node *);
231:	static struct xa_node *radix_tree_node_alloc(gfp_t, struct xa_node *, struct xarray *, unsigned int, unsigned int, unsigned int, unsigned int);
1568:	static void radix_tree_node_ctor(void *);

File lib/random32.c:
400:	void prandom_bytes(void *, size_t);
74:	void prandom_bytes_state(struct rnd_state *, void *, size_t);
432:	void prandom_seed(u32);
110:	void prandom_seed_full_state(struct rnd_state *);
384:	u32 prandom_u32(void);
52:	u32 prandom_u32_state(struct rnd_state *);
462:	static int prandom_init_early(void);
619:	static int prandom_init_late(void);
497:	static void prandom_reseed(struct timer_list *);
555:	static void prandom_timer_start(struct random_ready_callback *);

File lib/ratelimit.c:
27:	int ___ratelimit(struct ratelimit_state *, const char *);

File lib/rbtree.c:
410:	void __rb_erase_color(struct rb_node *, struct rb_root *, void (*)(struct rb_node *, struct rb_node *));
456:	void __rb_insert_augmented(struct rb_node *, struct rb_root *, void (*)(struct rb_node *, struct rb_node *));
440:	void rb_erase(struct rb_node *, struct rb_root *);
466:	struct rb_node *rb_first(const struct rb_root *);
623:	struct rb_node *rb_first_postorder(const struct rb_root *);
434:	void rb_insert_color(struct rb_node *, struct rb_root *);
479:	struct rb_node *rb_last(const struct rb_root *);
492:	struct rb_node *rb_next(const struct rb_node *);
604:	struct rb_node *rb_next_postorder(const struct rb_node *);
524:	struct rb_node *rb_prev(const struct rb_node *);
553:	void rb_replace_node(struct rb_node *, struct rb_node *, struct rb_root *);
570:	void rb_replace_node_rcu(struct rb_node *, struct rb_node *, struct rb_root *);

File lib/refcount.c:
144:	bool refcount_dec_and_lock(refcount_t *, spinlock_t *);
172:	bool refcount_dec_and_lock_irqsave(refcount_t *, spinlock_t *, unsigned long *);
113:	bool refcount_dec_and_mutex_lock(refcount_t *, struct mutex *);
55:	bool refcount_dec_if_one(refcount_t *);
74:	bool refcount_dec_not_one(refcount_t *);
13:	void refcount_warn_saturate(refcount_t *, enum refcount_saturation_type);

File lib/rhashtable.c:
1174:	struct rhash_lock_head **__rht_bucket_nested(const struct bucket_table *, unsigned int);
1168:	void rhashtable_destroy(struct rhashtable *);
1130:	void rhashtable_free_and_destroy(struct rhashtable *, void (*)(void *, void *), void *);
1015:	int rhashtable_init(struct rhashtable *, const struct rhashtable_params *);
629:	void *rhashtable_insert_slow(struct rhashtable *, const void *, struct rhash_head *);
665:	void rhashtable_walk_enter(struct rhashtable *, struct rhashtable_iter *);
687:	void rhashtable_walk_exit(struct rhashtable_iter *);
859:	void *rhashtable_walk_next(struct rhashtable_iter *);
898:	void *rhashtable_walk_peek(struct rhashtable_iter *);
714:	int rhashtable_walk_start_check(struct rhashtable_iter *);
930:	void rhashtable_walk_stop(struct rhashtable_iter *);
1086:	int rhltable_init(struct rhltable *, const struct rhashtable_params *);
1203:	struct rhash_lock_head **rht_bucket_nested(const struct bucket_table *, unsigned int);
1214:	struct rhash_lock_head **rht_bucket_nested_insert(struct rhashtable *, struct bucket_table *, unsigned int);
787:	static void *__rhashtable_walk_find_next(struct rhashtable_iter *);
175:	static struct bucket_table *bucket_table_alloc(size_t, gfp_t, struct rhashtable *);
109:	static void bucket_table_free(const struct bucket_table *);
117:	static void bucket_table_free_rcu(struct callback_head *);
37:	static u32 head_hashfn(struct rhashtable *, const struct bucket_table *, const struct rhash_head *);
147:	static struct bucket_table *nested_bucket_table_alloc(size_t, gfp_t, struct rhashtable *);
122:	static union nested_table *nested_table_alloc(union nested_table **, bool, struct rhashtable *);
75:	static void nested_table_free(unsigned int, union nested_table *, union nested_table *);
439:	static int rhashtable_insert_rehash(struct rhashtable *, struct bucket_table *);
968:	static u32 rhashtable_jhash2(const void *, u32, u32);
274:	static int rhashtable_rehash_chain(struct rhashtable *, unsigned int);
224:	static int rhashtable_rehash_one(struct rhashtable *, struct rhash_lock_head **, unsigned int);
312:	static int rhashtable_rehash_table(struct rhashtable *);
387:	static int rhashtable_shrink(struct rhashtable *);
587:	static void *rhashtable_try_insert(struct rhashtable *, const void *, struct rhash_head *);
407:	static void rht_deferred_worker(struct work_struct *);

File lib/sbitmap.c:
424:	int __sbitmap_queue_get(struct sbitmap_queue *);
452:	int __sbitmap_queue_get_shallow(struct sbitmap_queue *, unsigned int);
649:	void sbitmap_add_wait_queue(struct sbitmap_queue *, struct sbq_wait_state *, struct sbq_wait *);
227:	bool sbitmap_any_bit_set(const struct sbitmap *);
286:	void sbitmap_bitmap_show(struct sbitmap *, struct seq_file *);
661:	void sbitmap_del_wait_queue(struct sbq_wait *);
683:	void sbitmap_finish_wait(struct sbitmap_queue *, struct sbq_wait_state *, struct sbq_wait *);
157:	int sbitmap_get(struct sbitmap *, unsigned int, bool);
192:	int sbitmap_get_shallow(struct sbitmap *, unsigned int, unsigned long);
44:	int sbitmap_init_node(struct sbitmap *, unsigned int, int, gfp_t, int);
671:	void sbitmap_prepare_to_wait(struct sbitmap_queue *, struct sbq_wait_state *, struct sbq_wait *, int);
562:	void sbitmap_queue_clear(struct sbitmap_queue *, unsigned int, unsigned int);
355:	int sbitmap_queue_init_node(struct sbitmap_queue *, unsigned int, bool, gfp_t, int, int);
483:	void sbitmap_queue_min_shallow_depth(struct sbitmap_queue *, unsigned int);
417:	void sbitmap_queue_resize(struct sbitmap_queue *, unsigned int);
613:	void sbitmap_queue_show(struct sbitmap_queue *, struct seq_file *);
592:	void sbitmap_queue_wake_all(struct sbitmap_queue *);
555:	void sbitmap_queue_wake_up(struct sbitmap_queue *);
89:	void sbitmap_resize(struct sbitmap *, unsigned int);
264:	void sbitmap_show(struct sbitmap *, struct seq_file *);
107:	static int __sbitmap_get_word(unsigned long *, unsigned long, unsigned int, bool);
239:	static unsigned int __sbitmap_weight(const struct sbitmap *, bool);
514:	static bool __sbq_wake_up(struct sbitmap_queue *);
139:	static int sbitmap_find_bit_in_index(struct sbitmap *, int, unsigned int, bool);
398:	static void sbitmap_queue_update_wake_batch(struct sbitmap_queue *, unsigned int);

File lib/scatterlist.c:
266:	int __sg_alloc_table(struct sg_table *, unsigned int, unsigned int, struct scatterlist *, unsigned int, gfp_t, sg_alloc_fn *);
428:	struct scatterlist *__sg_alloc_table_from_pages(struct sg_table *, struct page **, unsigned int, unsigned int, unsigned long, unsigned int, struct scatterlist *, unsigned int, gfp_t);
192:	void __sg_free_table(struct sg_table *, unsigned int, unsigned int, sg_free_fn *);
722:	bool __sg_page_iter_dma_next(struct sg_dma_page_iter *);
698:	bool __sg_page_iter_next(struct sg_page_iter *);
681:	void __sg_page_iter_start(struct sg_page_iter *, struct scatterlist *, unsigned int, unsigned long);
355:	int sg_alloc_table(struct sg_table *, unsigned int, gfp_t);
545:	int sg_alloc_table_from_pages(struct sg_table *, struct page **, unsigned int, unsigned int, unsigned long, gfp_t);
921:	size_t sg_copy_buffer(struct scatterlist *, unsigned int, void *, size_t, off_t, bool);
967:	size_t sg_copy_from_buffer(struct scatterlist *, unsigned int, const void *, size_t);
984:	size_t sg_copy_to_buffer(struct scatterlist *, unsigned int, void *, size_t);
239:	void sg_free_table(struct sg_table *);
138:	void sg_init_one(struct scatterlist *, const void *, unsigned int);
124:	void sg_init_table(struct scatterlist *, unsigned int);
101:	struct scatterlist *sg_last(struct scatterlist *, unsigned int);
844:	bool sg_miter_next(struct sg_mapping_iter *);
807:	bool sg_miter_skip(struct sg_mapping_iter *, off_t);
755:	void sg_miter_start(struct sg_mapping_iter *, struct scatterlist *, unsigned int, unsigned int);
881:	void sg_miter_stop(struct sg_mapping_iter *);
45:	int sg_nents(struct scatterlist *);
68:	int sg_nents_for_len(struct scatterlist *, u64);
23:	struct scatterlist *sg_next(struct scatterlist *);
1002:	size_t sg_pcopy_from_buffer(struct scatterlist *, unsigned int, const void *, size_t, off_t);
1020:	size_t sg_pcopy_to_buffer(struct scatterlist *, unsigned int, void *, size_t, off_t);
1036:	size_t sg_zero_buffer(struct scatterlist *, unsigned int, size_t, off_t);
621:	struct scatterlist *sgl_alloc(unsigned long long, gfp_t, unsigned int *);
567:	struct scatterlist *sgl_alloc_order(unsigned long long, unsigned int, bool, gfp_t, unsigned int *);
673:	void sgl_free(struct scatterlist *);
641:	void sgl_free_n_order(struct scatterlist *, int, int);
663:	void sgl_free_order(struct scatterlist *, int);
149:	static struct scatterlist *sg_kmalloc(unsigned int, gfp_t);

File lib/seq_buf.c:
114:	int seq_buf_bprintf(struct seq_buf *, const char *, const u32 *);
361:	int seq_buf_hex_dump(struct seq_buf *, const char *, int, int, int, const void *, size_t, bool);
270:	int seq_buf_path(struct seq_buf *, const struct path *, const char *);
40:	int seq_buf_print_seq(struct seq_file *, struct seq_buf *);
83:	int seq_buf_printf(struct seq_buf *, const char *, ...);
170:	int seq_buf_putc(struct seq_buf *, unsigned char);
194:	int seq_buf_putmem(struct seq_buf *, const void *, unsigned int);
222:	int seq_buf_putmem_hex(struct seq_buf *, const void *, unsigned int);
142:	int seq_buf_puts(struct seq_buf *, const char *);
311:	int seq_buf_to_user(struct seq_buf *, char *, int);
57:	int seq_buf_vprintf(struct seq_buf *, const char *, struct __va_list_tag *);

File lib/sg_pool.c:
111:	int sg_alloc_table_chained(struct sg_table *, int, struct scatterlist *, unsigned int);
84:	void sg_free_table_chained(struct sg_table *, unsigned int);
62:	static struct scatterlist *sg_pool_alloc(unsigned int, gfp_t);
179:	static void sg_pool_exit(void);
54:	static void sg_pool_free(struct scatterlist *, unsigned int);
141:	static int sg_pool_init(void);

File lib/sha1.c:
196:	void sha1_init(__u32 *);
84:	void sha1_transform(__u32 *, const char *, __u32 *);

File lib/show_mem.c:
11:	void show_mem(unsigned int, nodemask_t *);

File lib/siphash.c:
286:	u32 __hsiphash_unaligned(const void *, size_t, const hsiphash_key_t *);
86:	u64 __siphash_unaligned(const void *, size_t, const siphash_key_t *);
323:	u32 hsiphash_1u32(const u32, const hsiphash_key_t *);
337:	u32 hsiphash_2u32(const u32, const u32, const hsiphash_key_t *);
355:	u32 hsiphash_3u32(const u32, const u32, const u32, const hsiphash_key_t *);
376:	u32 hsiphash_4u32(const u32, const u32, const u32, const u32, const hsiphash_key_t *);
214:	u64 siphash_1u32(const u32, const siphash_key_t *);
123:	u64 siphash_1u64(const u64, const siphash_key_t *);
140:	u64 siphash_2u64(const u64, const u64, const siphash_key_t *);
222:	u64 siphash_3u32(const u32, const u32, const u32, const siphash_key_t *);
162:	u64 siphash_3u64(const u64, const u64, const u64, const siphash_key_t *);
190:	u64 siphash_4u64(const u64, const u64, const u64, const u64, const siphash_key_t *);

File lib/sort.c:
266:	void sort(void *, size_t, size_t, cmp_func_t, swap_func_t);
199:	void sort_r(void *, size_t, size_t, cmp_r_func_t, swap_func_t, const void *);
133:	static void do_swap(void *, void *, size_t, swap_func_t);

File lib/string.c:
771:	int __sysfs_match_string(const char * const *, size_t, const char *);
962:	int bcmp(const void *, const void *, size_t);
1150:	void fortify_panic(const char *);
737:	int match_string(const char * const *, size_t, const char *);
1054:	void *memchr(const void *, int, size_t);
1087:	void *memchr_inv(const void *, int, size_t);
936:	int memcmp(const void *, const void *, size_t);
979:	void *memscan(void *, int, size_t);
525:	char *skip_spaces(const char *);
291:	char *stpcpy(char * restrict, const char * restrict);
69:	int strcasecmp(const char *, const char *);
306:	char *strcat(char *, const char *);
433:	char *strchr(const char *, int);
452:	char *strchrnul(const char *, int);
382:	int strcmp(const char *, const char *);
89:	char *strcpy(char *, const char *);
625:	__kernel_size_t strcspn(const char *, const char *);
541:	char *strim(char *);
355:	size_t strlcat(char *, const char *, size_t);
141:	size_t strlcpy(char *, const char *, size_t);
564:	size_t strlen(const char *);
43:	int strncasecmp(const char *, const char *, size_t);
329:	char *strncat(char *, const char *, size_t);
506:	char *strnchr(const char *, size_t, int);
471:	char *strnchrnul(const char *, size_t, int);
406:	int strncmp(const char *, const char *, size_t);
114:	char *strncpy(char *, const char *, size_t);
581:	__kernel_size_t strnlen(const char *, size_t);
1026:	char *strnstr(const char *, const char *, size_t);
649:	char *strpbrk(const char *, const char *);
484:	char *strrchr(const char *, int);
1141:	char *strreplace(char *, char, char);
180:	ssize_t strscpy(char *, const char *, size_t);
261:	ssize_t strscpy_pad(char *, const char *, size_t);
676:	char *strsep(char **, const char *);
598:	__kernel_size_t strspn(const char *, const char *);
1000:	char *strstr(const char *, const char *);
703:	bool sysfs_streq(const char *, const char *);

File lib/string_helpers.c:
663:	void kfree_strarray(char **, size_t);
569:	char *kstrdup_quotable(const char *, gfp_t);
597:	char *kstrdup_quotable_cmdline(struct task_struct *, gfp_t);
630:	char *kstrdup_quotable_file(struct file *, gfp_t);
497:	int string_escape_mem(const char *, size_t, char *, size_t, unsigned int, const char *);
546:	int string_escape_mem_ascii(const char *, size_t, char *, size_t);
34:	void string_get_size(u64, u64, const enum string_size_units, char *, int);
268:	int string_unescape(char *, char *, size_t, unsigned int);
418:	static bool escape_hex(unsigned char, char **, char *);

File lib/strncpy_from_user.c:
113:	long strncpy_from_user(char *, const char *, long);

File lib/strnlen_user.c:
92:	long strnlen_user(const char *, long);

File lib/syscall.c:
69:	int task_current_syscall(struct task_struct *, struct syscall_info *);
8:	static int collect_syscall(struct task_struct *, struct syscall_info *);

File lib/textsearch.c:
313:	void textsearch_destroy(struct ts_config *);
231:	unsigned int textsearch_find_continuous(struct ts_config *, struct ts_state *, const void *, unsigned int);
263:	struct ts_config *textsearch_prepare(const char *, const void *, unsigned int, gfp_t, int);
143:	int textsearch_register(struct ts_ops *);
178:	int textsearch_unregister(struct ts_ops *);
204:	static unsigned int get_linear_data(unsigned int, const u8 **, struct ts_config *, struct ts_state *);

File lib/timerqueue.c:
27:	bool timerqueue_add(struct timerqueue_head *, struct timerqueue_node *);
63:	bool timerqueue_del(struct timerqueue_head *, struct timerqueue_node *);
83:	struct timerqueue_node *timerqueue_iterate_next(struct timerqueue_node *);

File lib/ucs2_string.c:
83:	unsigned long ucs2_as_utf8(u8 *, const ucs2_char_t *, unsigned long);
18:	unsigned long ucs2_strlen(const ucs2_char_t *);
36:	int ucs2_strncmp(const ucs2_char_t *, const ucs2_char_t *, size_t);
7:	unsigned long ucs2_strnlen(const ucs2_char_t *, size_t);
29:	unsigned long ucs2_strsize(const ucs2_char_t *, unsigned long);
55:	unsigned long ucs2_utf8size(const ucs2_char_t *);

File lib/usercopy.c:
10:	unsigned long _copy_from_user(void *, const void *, unsigned long);
26:	unsigned long _copy_to_user(void *, const void *, unsigned long);
54:	int check_zeroed_user(const void *, size_t);

File lib/uuid.c:
43:	void generate_random_guid(unsigned char *);
33:	void generate_random_uuid(unsigned char *);
60:	void guid_gen(guid_t *);
123:	int guid_parse(const char *, guid_t *);
68:	void uuid_gen(uuid_t *);
88:	bool uuid_is_valid(const char *);
129:	int uuid_parse(const char *, uuid_t *);
105:	static int __uuid_parse(const char *, __u8 *, const u8 *);

File lib/vsprintf.c:
3329:	int bprintf(u32 *, size_t, const char *, ...);
3130:	int bstr_printf(char *, size_t, const char *, const u32 *);
2179:	int no_hash_pointers_enable(char *);
371:	int num_to_str(char *, int, unsigned long long, unsigned int);
815:	int ptr_to_hashval(const void *, unsigned long *);
2889:	int scnprintf(char *, size_t, const char *, ...);
117:	long simple_strtol(const char *, char **, unsigned int);
149:	long long simple_strtoll(const char *, char **, unsigned int);
103:	unsigned long simple_strtoul(const char *, char **, unsigned int);
2865:	int snprintf(char *, size_t, const char *, ...);
2934:	int sprintf(char *, const char *, ...);
3625:	int sscanf(const char *, const char *, ...);
2971:	int vbin_printf(u32 *, size_t, const char *, struct __va_list_tag *);
2837:	int vscnprintf(char *, size_t, const char *, struct __va_list_tag *);
2668:	int vsnprintf(char *, size_t, const char *, struct __va_list_tag *);
2916:	int vsprintf(char *, const char *, struct __va_list_tag *);
3350:	int vsscanf(const char *, const char *, struct __va_list_tag *);
1763:	static char *address_val(char *, char *, const void *, struct printf_spec, const char *);
959:	static char *bdev_name(char *, char *, struct block_device *, struct printf_spec, const char *);
1235:	static char *bitmap_list_string(char *, char *, unsigned long *, struct printf_spec, const char *);
1191:	static char *bitmap_string(char *, char *, unsigned long *, struct printf_spec, const char *);
698:	static int check_pointer(char **, char *, const void *, struct printf_spec);
1898:	static char *clock(char *, char *, struct clk *, struct printf_spec, const char *);
1788:	static char *date_str(char *, char *, const struct rtc_time *, bool);
739:	static int debug_boot_weak_hash_enable(char *);
900:	static char *dentry_name(char *, char *, const struct dentry *, struct printf_spec, const char *);
2056:	static char *device_node_string(char *, char *, struct printf_spec, struct device_node *, const char *, const char *);
750:	static void enable_ptr_key_workfn(struct work_struct *);
1622:	static char *escaped_string(char *, char *, u8 *, struct printf_spec, const char *);
949:	static char *file_dentry_name(char *, char *, const struct file *, struct printf_spec, const char *);
759:	static void fill_random_ptr_key(struct random_ready_callback *);
2006:	static char *flags_string(char *, char *, void *, struct printf_spec, const char *);
2446:	static int format_decode(const char *, struct printf_spec *);
1919:	static char *format_flags(char *, char *, unsigned long, const struct trace_print_flags *);
1967:	static char *format_page_flags(char *, char *, unsigned long);
2034:	static char *fwnode_full_name_string(struct fwnode_handle *, char *, char *);
2146:	static char *fwnode_string(char *, char *, struct fwnode_handle *, struct printf_spec, const char *);
1140:	static char *hex_string(char *, char *, u8 *, struct printf_spec, const char *);
769:	static int initialize_ptr_random(void);
1479:	static char *ip4_addr_string(char *, char *, const u8 *, struct printf_spec, const char *);
1552:	static char *ip4_addr_string_sa(char *, char *, const struct sockaddr_in *, struct printf_spec, const char *);
1316:	static char *ip4_string(char *, const u8 *, const char *);
1465:	static char *ip6_addr_string(char *, char *, const u8 *, struct printf_spec, const char *);
1490:	static char *ip6_addr_string_sa(char *, char *, const struct sockaddr_in6 *, struct printf_spec, const char *);
1366:	static char *ip6_compressed_string(char *, const char *);
1449:	static char *ip6_string(char *, const char *, const char *);
1587:	static char *ip_addr_string(char *, char *, const void *, struct printf_spec, const char *);
1275:	static char *mac_address_string(char *, char *, u8 *, struct printf_spec, const char *);
1741:	static char *netdev_bits(char *, char *, const void *, struct printf_spec, const char *);
448:	static char *number(char *, char *, unsigned long long, struct printf_spec);
2329:	static char *pointer(const char *, char *, char *, void *, struct printf_spec);
820:	static char *ptr_to_id(char *, char *, const void *, struct printf_spec);
282:	static char *put_dec(char *, unsigned long long);
256:	static char *put_dec_full8(char *, unsigned int);
214:	static char *put_dec_trunc8(char *, unsigned int);
1039:	static char *resource_string(char *, char *, struct resource *, struct printf_spec, const char *, const char *);
853:	static char *restricted_pointer(char *, char *, const void *, struct printf_spec);
1823:	static char *rtc_str(char *, char *, const struct rtc_time *, struct printf_spec, const char *);
2623:	static void set_field_width(struct printf_spec *, int);
2632:	static void set_precision(struct printf_spec *, int);
56:	static unsigned long long simple_strntoull(const char *, size_t, char **, unsigned int);
156:	static int skip_atoi(const char **);
569:	static char *special_hex_number(char *, char *, unsigned long long, int);
713:	static char *string(char *, char *, const char *, struct printf_spec);
982:	static char *symbol_string(char *, char *, void *, struct printf_spec, const char *);
1861:	static char *time64_str(char *, char *, const time64_t, struct printf_spec, const char *);
1884:	static char *time_and_date(char *, char *, void *, struct printf_spec, const char *);
1807:	static char *time_str(char *, char *, const struct rtc_time *, bool);
1696:	static char *uuid_string(char *, char *, const u8 *, struct printf_spec, const char *);
1680:	static char *va_format(char *, char *, struct va_format *, struct printf_spec, const char *);
609:	static char *widen_string(char *, int, char *, struct printf_spec);

File lib/win_minmax.c:
67:	u32 minmax_running_max(struct minmax *, u32, u32, u32);
85:	u32 minmax_running_min(struct minmax *, u32, u32, u32);

File lib/xarray.c:
1804:	int __xa_alloc(struct xarray *, u32 *, void *, struct xa_limit, gfp_t);
1853:	int __xa_alloc_cyclic(struct xarray *, u32 *, void *, struct xa_limit, u32 *, gfp_t);
1910:	void __xa_clear_mark(struct xarray *, unsigned long, xa_mark_t);
1597:	void *__xa_cmpxchg(struct xarray *, unsigned long, void *, void *, gfp_t);
1486:	void *__xa_erase(struct xarray *, unsigned long);
1635:	int __xa_insert(struct xarray *, unsigned long, void *, gfp_t);
1892:	void __xa_set_mark(struct xarray *, unsigned long, xa_mark_t);
1532:	void *__xa_store(struct xarray *, unsigned long, void *, gfp_t);
1183:	void *__xas_next(struct xa_state *);
1144:	void *__xas_prev(struct xa_state *);
1980:	void xa_clear_mark(struct xarray *, unsigned long, xa_mark_t);
2173:	void xa_delete_node(struct xa_node *, xa_update_node_t);
2199:	void xa_destroy(struct xarray *);
1505:	void *xa_erase(struct xarray *, unsigned long);
2152:	unsigned int xa_extract(struct xarray *, void **, unsigned long, unsigned long, unsigned int, xa_mark_t);
2005:	void *xa_find(struct xarray *, unsigned long *, unsigned long, xa_mark_t);
2055:	void *xa_find_after(struct xarray *, unsigned long *, unsigned long, xa_mark_t);
1932:	bool xa_get_mark(struct xarray *, unsigned long, xa_mark_t);
1753:	int xa_get_order(struct xarray *, unsigned long);
1448:	void *xa_load(struct xarray *, unsigned long);
1962:	void xa_set_mark(struct xarray *, unsigned long, xa_mark_t);
1569:	void *xa_store(struct xarray *, unsigned long, void *, gfp_t);
1710:	void *xa_store_range(struct xarray *, unsigned long, unsigned long, void *, gfp_t);
902:	void xas_clear_mark(const struct xa_state *, xa_mark_t);
703:	void xas_create_range(struct xa_state *);
1231:	void *xas_find(struct xa_state *, unsigned long);
1388:	void *xas_find_conflict(struct xa_state *);
1300:	void *xas_find_marked(struct xa_state *, unsigned long, xa_mark_t);
854:	bool xas_get_mark(const struct xa_state *, xa_mark_t);
936:	void xas_init_marks(const struct xa_state *);
231:	void *xas_load(struct xa_state *);
297:	bool xas_nomem(struct xa_state *, gfp_t);
1114:	void xas_pause(struct xa_state *);
873:	void xas_set_mark(const struct xa_state *, xa_mark_t);
1050:	void xas_split(struct xa_state *, void *, unsigned int);
1000:	void xas_split_alloc(struct xa_state *, void *, unsigned int, gfp_t);
772:	void *xas_store(struct xa_state *, void *);
324:	static bool __xas_nomem(struct xa_state *, gfp_t);
969:	static void node_set_marks(struct xa_node *, unsigned int, struct xa_node *, unsigned int);
358:	static void *xas_alloc(struct xa_state *, unsigned int);
638:	static void *xas_create(struct xa_state *, bool);
558:	static int xas_expand(struct xa_state *, void *);
2105:	static unsigned int xas_extract_marked(struct xa_state *, void **, unsigned long, unsigned int, xa_mark_t);
2086:	static unsigned int xas_extract_present(struct xa_state *, void **, unsigned long, unsigned int);
522:	static void xas_free_nodes(struct xa_state *, struct xa_node *);
436:	static void xas_shrink(struct xa_state *);
179:	static void *xas_start(struct xa_state *);

File lib/xxhash.c:
102:	uint32_t xxh32(const void *, const size_t, const uint32_t);
79:	void xxh32_copy_state(struct xxh32_state *, const struct xxh32_state *);
339:	uint32_t xxh32_digest(const struct xxh32_state *);
242:	void xxh32_reset(struct xxh32_state *, const uint32_t);
270:	int xxh32_update(struct xxh32_state *, const void *, const size_t);
172:	uint64_t xxh64(const void *, const size_t, const uint64_t);
85:	void xxh64_copy_state(struct xxh64_state *, const struct xxh64_state *);
444:	uint64_t xxh64_digest(const struct xxh64_state *);
256:	void xxh64_reset(struct xxh64_state *, const uint64_t);
377:	int xxh64_update(struct xxh64_state *, const void *, const size_t);

File lib/xz/xz_dec_bcj.c:
527:	struct xz_dec_bcj *xz_dec_bcj_create(bool);
536:	enum xz_ret xz_dec_bcj_reset(struct xz_dec_bcj *, uint8_t);
417:	enum xz_ret xz_dec_bcj_run(struct xz_dec_bcj *, struct xz_dec_lzma2 *, struct xz_buf *);
345:	static void bcj_apply(struct xz_dec_bcj *, uint8_t *, size_t *, size_t);
288:	static size_t bcj_armthumb(struct xz_dec_bcj *, uint8_t *, size_t);
399:	static void bcj_flush(struct xz_dec_bcj *, struct xz_buf *);
181:	static size_t bcj_ia64(struct xz_dec_bcj *, uint8_t *, size_t);

File lib/xz/xz_dec_lzma2.c:
1125:	struct xz_dec_lzma2 *xz_dec_lzma2_create(enum xz_mode, uint32_t);
1187:	void xz_dec_lzma2_end(struct xz_dec_lzma2 *);
1149:	enum xz_ret xz_dec_lzma2_reset(struct xz_dec_lzma2 *, uint8_t);
948:	enum xz_ret xz_dec_lzma2_run(struct xz_dec_lzma2 *, struct xz_buf *);
346:	static bool dict_repeat(struct dictionary *, uint32_t *, uint32_t);
374:	static void dict_uncompressed(struct dictionary *, struct xz_buf *, uint32_t *);
863:	static bool lzma2_lzma(struct xz_dec_lzma2 *, struct xz_buf *);
636:	static void lzma_len(struct xz_dec_lzma2 *, struct lzma_len_dec *, uint32_t);
598:	static void lzma_literal(struct xz_dec_lzma2 *);
739:	static bool lzma_main(struct xz_dec_lzma2 *);
663:	static void lzma_match(struct xz_dec_lzma2 *, uint32_t);
705:	static void lzma_rep_match(struct xz_dec_lzma2 *, uint32_t);

File lib/xz/xz_dec_stream.c:
828:	void xz_dec_end(struct xz_dec *);
786:	struct xz_dec *xz_dec_init(enum xz_mode, uint32_t);
816:	void xz_dec_reset(struct xz_dec *);
750:	enum xz_ret xz_dec_run(struct xz_dec *, struct xz_buf *);
218:	static enum xz_ret dec_block(struct xz_dec *, struct xz_buf *);
449:	static enum xz_ret dec_block_header(struct xz_dec *);
296:	static enum xz_ret dec_index(struct xz_dec *, struct xz_buf *);
549:	static enum xz_ret dec_main(struct xz_dec *, struct xz_buf *);
175:	static enum xz_ret dec_vli(struct xz_dec *, const uint8_t *, size_t *, size_t);
157:	static bool fill_temp(struct xz_dec *, struct xz_buf *);

File lib/zlib_deflate/deflate.c:
329:	int zlib_deflate(z_streamp, int);
468:	int zlib_deflateEnd(z_streamp);
188:	int zlib_deflateInit2(z_streamp, int, int, int, int, int);
282:	int zlib_deflateReset(z_streamp);
1143:	int zlib_deflate_dfltcc_enabled(void);
1127:	int zlib_deflate_workspacesize(int, int);
916:	static block_state deflate_fast(deflate_state *, int);
1010:	static block_state deflate_slow(deflate_state *, int);
857:	static block_state deflate_stored(deflate_state *, int);
737:	static void fill_window(deflate_state *);
523:	static void lm_init(deflate_state *);
558:	static uInt longest_match(deflate_state *, IPos);
496:	static int read_buf(z_streamp, Byte *, unsigned int);

File lib/zlib_deflate/deftree.c:
775:	void zlib_tr_align(deflate_state *);
802:	ulg zlib_tr_flush_block(deflate_state *, char *, ulg, int);
241:	void zlib_tr_init(deflate_state *);
738:	void zlib_tr_stored_block(deflate_state *, char *, ulg, int);
754:	void zlib_tr_stored_type_only(deflate_state *);
915:	int zlib_tr_tally(deflate_state *, unsigned int, unsigned int);
484:	static void build_tree(deflate_state *, tree_desc *);
964:	static void compress_block(deflate_state *, ct_data *, ct_data *);
353:	static void gen_bitlen(deflate_state *, tree_desc *);
441:	static void gen_codes(ct_data *, int, ush *);
317:	static void pqdownheap(deflate_state *, ct_data *, int);
572:	static void scan_tree(deflate_state *, ct_data *, int);
706:	static void send_all_trees(deflate_state *, int, int, int);
618:	static void send_tree(deflate_state *, ct_data *, int);
171:	static void tr_static_init(void);

File lib/zlib_inflate/inffast.c:
67:	void inflate_fast(z_streamp, unsigned int);

File lib/zlib_inflate/inflate.c:
331:	int zlib_inflate(z_streamp, int);
770:	int zlib_inflateEnd(z_streamp);
785:	int zlib_inflateIncomp(z_stream *);
59:	int zlib_inflateInit2(z_streamp, int);
33:	int zlib_inflateReset(z_streamp);
28:	int zlib_inflate_workspacesize(void);
120:	static void zlib_updatewindow(z_streamp, unsigned int);

File lib/zlib_inflate/inftrees.c:
23:	int zlib_inflate_table(codetype, unsigned short *, unsigned int, code **, unsigned int *, unsigned short *);

File lib/zlib_inflate/infutil.c:
9:	int zlib_inflate_blob(void *, unsigned int, const void *, unsigned int);

File lib/zstd/compress.c:
90:	size_t ZSTD_CCtxWorkspaceBound(ZSTD_compressionParameters);
2845:	size_t ZSTD_CDictWorkspaceBound(ZSTD_compressionParameters);
3023:	size_t ZSTD_CStreamInSize(void);
3024:	size_t ZSTD_CStreamOutSize(void);
2973:	size_t ZSTD_CStreamWorkspaceBound(ZSTD_compressionParameters);
180:	ZSTD_compressionParameters ZSTD_adjustCParams(ZSTD_compressionParameters, unsigned long long, size_t);
148:	size_t ZSTD_checkCParams(ZSTD_compressionParameters);
2760:	size_t ZSTD_compressBegin(ZSTD_CCtx *, int);
2747:	size_t ZSTD_compressBegin_advanced(ZSTD_CCtx *, const void *, size_t, ZSTD_parameters, unsigned long long);
2914:	size_t ZSTD_compressBegin_usingCDict(ZSTD_CCtx *, const ZSTD_CDict *, unsigned long long);
2754:	size_t ZSTD_compressBegin_usingDict(ZSTD_CCtx *, const void *, size_t, int);
2546:	size_t ZSTD_compressBlock(ZSTD_CCtx *, void *, size_t, const void *, size_t);
2252:	void ZSTD_compressBlock_greedy_extDict(ZSTD_CCtx *, const void *, size_t);
38:	size_t ZSTD_compressBound(size_t);
2831:	size_t ZSTD_compressCCtx(ZSTD_CCtx *, void *, size_t, const void *, size_t, ZSTD_parameters);
2539:	size_t ZSTD_compressContinue(ZSTD_CCtx *, void *, size_t, const void *, size_t);
2806:	size_t ZSTD_compressEnd(ZSTD_CCtx *, void *, size_t, const void *, size_t);
3223:	size_t ZSTD_compressStream(ZSTD_CStream *, ZSTD_outBuffer *, ZSTD_inBuffer *);
2930:	size_t ZSTD_compress_usingCDict(ZSTD_CCtx *, void *, size_t, const void *, size_t, const ZSTD_CDict *);
2825:	size_t ZSTD_compress_usingDict(ZSTD_CCtx *, void *, size_t, const void *, size_t, const void *, size_t, ZSTD_parameters);
348:	size_t ZSTD_copyCCtx(ZSTD_CCtx *, const ZSTD_CCtx *, unsigned long long);
2982:	ZSTD_CStream *ZSTD_createCStream_advanced(ZSTD_customMem);
3251:	size_t ZSTD_endStream(ZSTD_CStream *, ZSTD_outBuffer *);
3238:	size_t ZSTD_flushStream(ZSTD_CStream *, ZSTD_outBuffer *);
132:	size_t ZSTD_freeCCtx(ZSTD_CCtx *);
2899:	size_t ZSTD_freeCDict(ZSTD_CDict *);
3002:	size_t ZSTD_freeCStream(ZSTD_CStream *);
2544:	size_t ZSTD_getBlockSizeMax(ZSTD_CCtx *);
3411:	ZSTD_compressionParameters ZSTD_getCParams(int, unsigned long long, size_t);
3437:	ZSTD_parameters ZSTD_getParams(int, unsigned long long, size_t);
141:	const seqStore_t *ZSTD_getSeqStore(const ZSTD_CCtx *);
122:	ZSTD_CCtx *ZSTD_initCCtx(void *, size_t);
2893:	ZSTD_CDict *ZSTD_initCDict(const void *, size_t, ZSTD_parameters, void *, size_t);
3092:	ZSTD_CStream *ZSTD_initCStream(ZSTD_parameters, unsigned long long, void *, size_t);
3105:	ZSTD_CStream *ZSTD_initCStream_usingCDict(const ZSTD_CDict *, unsigned long long, void *, size_t);
337:	void ZSTD_invalidateRepCodes(ZSTD_CCtx *);
3295:	int ZSTD_maxCLevel(void);
434:	size_t ZSTD_noCompressBlock(void *, size_t, const void *, size_t);
3047:	size_t ZSTD_resetCStream(ZSTD_CStream *, unsigned long long);
563:	void ZSTD_seqToCodes(const seqStore_t *);
1743:	static size_t ZSTD_BtFindBestMatch_selectMLS(ZSTD_CCtx *, const BYTE *, const BYTE * const, size_t *, const U32, const U32);
1775:	static size_t ZSTD_BtFindBestMatch_selectMLS_extDict(ZSTD_CCtx *, const BYTE *, const BYTE * const, size_t *, const U32, const U32);
2049:	static void ZSTD_compressBlock_btlazy2(ZSTD_CCtx *, const void *, size_t);
2264:	static void ZSTD_compressBlock_btlazy2_extDict(ZSTD_CCtx *, const void *, size_t);
2272:	static void ZSTD_compressBlock_btopt(ZSTD_CCtx *, const void *, size_t);
2284:	static void ZSTD_compressBlock_btopt2(ZSTD_CCtx *, const void *, size_t);
2308:	static void ZSTD_compressBlock_btopt2_extDict(ZSTD_CCtx *, const void *, size_t);
2296:	static void ZSTD_compressBlock_btopt_extDict(ZSTD_CCtx *, const void *, size_t);
1383:	static void ZSTD_compressBlock_doubleFast(ZSTD_CCtx *, const void *, size_t);
1543:	static void ZSTD_compressBlock_doubleFast_extDict(ZSTD_CCtx *, const void *, size_t);
1395:	static void ZSTD_compressBlock_doubleFast_extDict_generic(ZSTD_CCtx *, const void *, size_t, const U32);
1104:	static void ZSTD_compressBlock_fast(ZSTD_CCtx *, const void *, size_t);
1220:	static void ZSTD_compressBlock_fast_extDict(ZSTD_CCtx *, const void *, size_t);
1116:	static void ZSTD_compressBlock_fast_extDict_generic(ZSTD_CCtx *, const void *, size_t, const U32);
2055:	static void ZSTD_compressBlock_greedy(ZSTD_CCtx *, const void *, size_t);
2333:	static size_t ZSTD_compressBlock_internal(ZSTD_CCtx *, void *, size_t, const void *, size_t);
2053:	static void ZSTD_compressBlock_lazy(ZSTD_CCtx *, const void *, size_t);
2051:	static void ZSTD_compressBlock_lazy2(ZSTD_CCtx *, const void *, size_t);
2259:	static void ZSTD_compressBlock_lazy2_extDict(ZSTD_CCtx *, const void *, size_t);
2254:	static void ZSTD_compressBlock_lazy_extDict(ZSTD_CCtx *, const void *, size_t);
2490:	static size_t ZSTD_compressContinue_internal(ZSTD_CCtx *, void *, size_t, const void *, size_t, U32, U32);
3129:	static size_t ZSTD_compressStream_generic(ZSTD_CStream *, void *, size_t *, const void *, size_t *, const ZSTD_flush_e);
907:	static size_t ZSTD_count(const BYTE *, const BYTE *, const BYTE * const);
940:	static size_t ZSTD_count_2segments(const BYTE *, const BYTE *, const BYTE *, const BYTE *, const BYTE *);
2847:	static ZSTD_CDict *ZSTD_createCDict_advanced(const void *, size_t, unsigned int, ZSTD_parameters, ZSTD_customMem);
1561:	static U32 ZSTD_insertBt1(ZSTD_CCtx *, const BYTE * const, const U32, const BYTE * const, U32, U32);
1643:	static size_t ZSTD_insertBtAndFindBestMatch(ZSTD_CCtx *, const BYTE * const, const BYTE * const, size_t *, U32, const U32, U32);
2557:	static size_t ZSTD_loadDictionaryContent(ZSTD_CCtx *, const void *, size_t);
2626:	static size_t ZSTD_loadZstdDictionary(ZSTD_CCtx *, const void *, size_t);
443:	static size_t ZSTD_noCompressLiterals(void *, size_t, const void *, size_t);
242:	static size_t ZSTD_resetCCtx_advanced(ZSTD_CCtx *, ZSTD_parameters, U64, const ZSTD_compResetPolicy_e);
3026:	static size_t ZSTD_resetCStream_internal(ZSTD_CStream *, unsigned long long);
1724:	static void ZSTD_updateTree(ZSTD_CCtx *, const BYTE * const, const BYTE * const, const U32, const U32);
2431:	static size_t ZSTD_writeFrameHeader(void *, size_t, U64, U32, ZSTD_parameters, ZSTD_parameters);

File lib/zstd/decompress.c:
104:	size_t ZSTD_DCtxWorkspaceBound(void);
1989:	size_t ZSTD_DDictWorkspaceBound(void);
2277:	size_t ZSTD_DStreamInSize(void);
2278:	size_t ZSTD_DStreamOutSize(void);
2184:	size_t ZSTD_DStreamWorkspaceBound(size_t);
155:	void ZSTD_copyDCtx(ZSTD_DCtx *, const ZSTD_DCtx *);
126:	ZSTD_DCtx *ZSTD_createDCtx_advanced(ZSTD_customMem);
432:	size_t ZSTD_decodeLiteralsBlock(ZSTD_DCtx *, const void *, size_t);
794:	size_t ZSTD_decodeSeqHeaders(ZSTD_DCtx *, int *, const void *, size_t);
106:	size_t ZSTD_decompressBegin(ZSTD_DCtx *);
1969:	size_t ZSTD_decompressBegin_usingDict(ZSTD_DCtx *, const void *, size_t);
1479:	size_t ZSTD_decompressBlock(ZSTD_DCtx *, void *, size_t, const void *, size_t);
1743:	size_t ZSTD_decompressContinue(ZSTD_DCtx *, void *, size_t, const void *, size_t);
1712:	size_t ZSTD_decompressDCtx(ZSTD_DCtx *, void *, size_t, const void *, size_t);
2298:	size_t ZSTD_decompressStream(ZSTD_DStream *, ZSTD_outBuffer *, ZSTD_inBuffer *);
2147:	size_t ZSTD_decompress_usingDDict(ZSTD_DCtx *, void *, size_t, const void *, size_t, const ZSTD_DDict *);
1707:	size_t ZSTD_decompress_usingDict(ZSTD_DCtx *, void *, size_t, const void *, size_t, const void *, size_t);
319:	unsigned long long ZSTD_findDecompressedSize(const void *, size_t);
1510:	size_t ZSTD_findFrameCompressedSize(const void *, size_t);
147:	size_t ZSTD_freeDCtx(ZSTD_DCtx *);
2089:	size_t ZSTD_freeDDict(ZSTD_DDict *);
2256:	size_t ZSTD_freeDStream(ZSTD_DStream *);
1497:	size_t ZSTD_generateNxBytes(void *, size_t, BYTE, size_t);
2118:	unsigned int ZSTD_getDictID_fromDDict(const ZSTD_DDict *);
2105:	unsigned int ZSTD_getDictID_fromDict(const void *, size_t);
2135:	unsigned int ZSTD_getDictID_fromFrame(const void *, size_t);
297:	unsigned long long ZSTD_getFrameContentSize(const void *, size_t);
207:	size_t ZSTD_getFrameParams(ZSTD_frameParams *, const void *, size_t);
394:	size_t ZSTD_getcBlockSize(const void *, size_t, blockProperties_t *);
141:	ZSTD_DCtx *ZSTD_initDCtx(void *, size_t);
2083:	ZSTD_DDict *ZSTD_initDDict(const void *, size_t, void *, size_t);
2214:	ZSTD_DStream *ZSTD_initDStream(size_t, void *, size_t);
2247:	ZSTD_DStream *ZSTD_initDStream_usingDDict(size_t, const ZSTD_DDict *, void *, size_t);
1490:	size_t ZSTD_insertBlock(ZSTD_DCtx *, const void *, size_t);
172:	unsigned int ZSTD_isFrame(const void *, size_t);
1738:	int ZSTD_isSkipFrame(ZSTD_DCtx *);
1723:	ZSTD_nextInputType_e ZSTD_nextInputType(ZSTD_DCtx *);
1721:	size_t ZSTD_nextSrcSizeToDecompress(ZSTD_DCtx *);
2280:	size_t ZSTD_resetDStream(ZSTD_DStream *);
1253:	static seq_t ZSTD_decodeSequenceLong(seqState_t *, const unsigned int);
1643:	static size_t ZSTD_decompressMultiFrame(ZSTD_DCtx *, void *, size_t, const void *, size_t, const void *, size_t, const ZSTD_DDict *);
1093:	static size_t ZSTD_decompressSequences(ZSTD_DCtx *, void *, size_t, const void *, size_t);
1348:	static size_t ZSTD_decompressSequencesLong(ZSTD_DCtx *, void *, size_t, const void *, size_t);
880:	static size_t ZSTD_execSequenceLast7(BYTE *, BYTE * const, const BYTE **, const BYTE * const, const BYTE * const, const BYTE * const, const BYTE * const, seq_t, seq_t);
1874:	static size_t ZSTD_loadEntropy(ZSTD_entropyTables_t *, const void * const, const size_t);

File lib/zstd/entropy_common.c:
52:	unsigned int FSE_isError(size_t);
59:	size_t FSE_readNCount(short *, unsigned int *, unsigned int *, const void *, size_t);
49:	unsigned int FSE_versionNumber(void);
167:	size_t HUF_readStats_wksp(BYTE *, size_t, U32 *, U32 *, U32 *, const void *, size_t, void *, size_t);

File lib/zstd/fse_compress.c:
197:	size_t FSE_NCountWriteBound(unsigned int, unsigned int);
666:	size_t FSE_buildCTable_raw(FSE_CTable *, unsigned int);
702:	size_t FSE_buildCTable_rle(FSE_CTable *, BYTE);
92:	size_t FSE_buildCTable_wksp(FSE_CTable *, const short *, unsigned int, unsigned int, void *, size_t);
795:	size_t FSE_compressBound(size_t);
785:	size_t FSE_compress_usingCTable(void *, size_t, const void *, size_t, const FSE_CTable *);
448:	size_t FSE_countFast_wksp(unsigned int *, unsigned int *, const void *, size_t, unsigned int *);
324:	size_t FSE_count_simple(unsigned int *, unsigned int *, const void *, size_t);
458:	size_t FSE_count_wksp(unsigned int *, unsigned int *, const void *, size_t, unsigned int *);
608:	size_t FSE_normalizeCount(short *, unsigned int, const unsigned int *, size_t, unsigned int);
511:	unsigned int FSE_optimalTableLog(unsigned int, size_t, unsigned int);
493:	unsigned int FSE_optimalTableLog_internal(unsigned int, size_t, unsigned int, unsigned int);
477:	size_t FSE_sizeof_CTable(unsigned int, unsigned int);
301:	size_t FSE_writeNCount(void *, size_t, const short *, unsigned int, unsigned int);
724:	static size_t FSE_compress_usingCTable_generic(void *, size_t, const void *, size_t, const FSE_CTable *, const unsigned int);
357:	static size_t FSE_count_parallel_wksp(unsigned int *, unsigned int *, const void *, size_t, unsigned int, unsigned int * const);
203:	static size_t FSE_writeNCount_generic(void *, size_t, const short *, unsigned int, unsigned int, unsigned int);

File lib/zstd/fse_decompress.c:
180:	size_t FSE_buildDTable_raw(FSE_DTable *, unsigned int);
163:	size_t FSE_buildDTable_rle(FSE_DTable *, BYTE);
88:	size_t FSE_buildDTable_wksp(FSE_DTable *, const short *, unsigned int, unsigned int, void *, size_t);
275:	size_t FSE_decompress_usingDTable(void *, size_t, const void *, size_t, const FSE_DTable *);
287:	size_t FSE_decompress_wksp(void *, size_t, const void *, size_t, unsigned int, void *, size_t);

File lib/zstd/huf_compress.c:
420:	size_t HUF_buildCTable_wksp(HUF_CElt *, const U32 *, U32, U32, void *, size_t);
754:	size_t HUF_compress1X_repeat(void *, size_t, const void *, size_t, unsigned int, unsigned int, void *, size_t, HUF_CElt *, HUF_repeat *, int);
538:	size_t HUF_compress1X_usingCTable(void *, size_t, const void *, size_t, const HUF_CElt *);
748:	size_t HUF_compress1X_wksp(void *, size_t, const void *, size_t, unsigned int, unsigned int, void *, size_t);
767:	size_t HUF_compress4X_repeat(void *, size_t, const void *, size_t, unsigned int, unsigned int, void *, size_t, HUF_CElt *, HUF_repeat *, int);
581:	size_t HUF_compress4X_usingCTable(void *, size_t, const void *, size_t, const HUF_CElt *);
761:	size_t HUF_compress4X_wksp(void *, size_t, const void *, size_t, unsigned int, unsigned int, void *, size_t);
526:	size_t HUF_compressBound(size_t);
82:	size_t HUF_compressWeights_wksp(void *, size_t, const void *, size_t, void *, size_t);
68:	unsigned int HUF_optimalTableLog(unsigned int, size_t, unsigned int);
203:	size_t HUF_readCTable_wksp(HUF_CElt *, U32, const void *, size_t, void *, size_t);
152:	size_t HUF_writeCTable_wksp(void *, size_t, const HUF_CElt *, U32, U32, void *, size_t);
653:	static size_t HUF_compress_internal(void *, size_t, const void *, size_t, unsigned int, unsigned int, unsigned int, void *, size_t, HUF_CElt *, HUF_repeat *, int);
290:	static U32 HUF_setMaxHeight(nodeElt *, U32, U32);
389:	static void HUF_sort(nodeElt *, const U32 *, U32);

File lib/zstd/huf_decompress.c:
232:	size_t HUF_decompress1X2_DCtx_wksp(HUF_DTable *, void *, size_t, const void *, size_t, void *, size_t);
224:	size_t HUF_decompress1X2_usingDTable(void *, size_t, const void *, size_t, const HUF_DTable *);
692:	size_t HUF_decompress1X4_DCtx_wksp(HUF_DTable *, void *, size_t, const void *, size_t, void *, size_t);
684:	size_t HUF_decompress1X4_usingDTable(void *, size_t, const void *, size_t, const HUF_DTable *);
939:	size_t HUF_decompress1X_DCtx_wksp(HUF_DTable *, void *, size_t, const void *, size_t, void *, size_t);
844:	size_t HUF_decompress1X_usingDTable(void *, size_t, const void *, size_t, const HUF_DTable *);
363:	size_t HUF_decompress4X2_DCtx_wksp(HUF_DTable *, void *, size_t, const void *, size_t, void *, size_t);
355:	size_t HUF_decompress4X2_usingDTable(void *, size_t, const void *, size_t, const HUF_DTable *);
825:	size_t HUF_decompress4X4_DCtx_wksp(HUF_DTable *, void *, size_t, const void *, size_t, void *, size_t);
817:	size_t HUF_decompress4X4_usingDTable(void *, size_t, const void *, size_t, const HUF_DTable *);
901:	size_t HUF_decompress4X_DCtx_wksp(HUF_DTable *, void *, size_t, const void *, size_t, void *, size_t);
924:	size_t HUF_decompress4X_hufOnly_wksp(HUF_DTable *, void *, size_t, const void *, size_t, void *, size_t);
851:	size_t HUF_decompress4X_usingDTable(void *, size_t, const void *, size_t, const HUF_DTable *);
90:	size_t HUF_readDTableX2_wksp(HUF_DTable *, const void *, size_t, void *, size_t);
482:	size_t HUF_readDTableX4_wksp(HUF_DTable *, const void *, size_t, void *, size_t);
887:	U32 HUF_selectDecoder(size_t, size_t);
199:	static size_t HUF_decompress1X2_usingDTable_internal(void *, size_t, const void *, size_t, const HUF_DTable *);
655:	static size_t HUF_decompress1X4_usingDTable_internal(void *, size_t, const void *, size_t, const HUF_DTable *);
247:	static size_t HUF_decompress4X2_usingDTable_internal(void *, size_t, const void *, size_t, const HUF_DTable *);
707:	static size_t HUF_decompress4X4_usingDTable_internal(void *, size_t, const void *, size_t, const HUF_DTable *);
394:	static void HUF_fillDTableX4Level2(HUF_DEltX4 *, U32, const U32, const U32 *, const int, const sortedSymbol_t *, const U32, U32, U16);

File lib/zstd/zstd_common.c:
71:	void ZSTD_free(void *, ZSTD_customMem);
35:	ZSTD_customMem ZSTD_initStack(void *, size_t);
69:	void *ZSTD_malloc(size_t, ZSTD_customMem);
58:	void *ZSTD_stackAlloc(void *, size_t);
51:	void *ZSTD_stackAllocAll(void *, size_t *);
63:	void ZSTD_stackFree(void *, void *);

File lib/zstd/zstd_opt.h:
365:	static U32 ZSTD_BtGetAllMatches_selectMLS(ZSTD_CCtx *, const BYTE *, const BYTE * const, const U32, const U32, ZSTD_match_t *, const U32);
389:	static U32 ZSTD_BtGetAllMatches_selectMLS_extDict(ZSTD_CCtx *, const BYTE *, const BYTE * const, const U32, const U32, ZSTD_match_t *, const U32);
235:	static U32 ZSTD_insertBtAndGetAllMatches(ZSTD_CCtx *, const BYTE * const, const BYTE * const, U32, const U32, U32, ZSTD_match_t *, const U32);

File mm/backing-dev.c:
734:	struct backing_dev_info *bdi_alloc(int);
912:	const char *bdi_dev_name(struct backing_dev_info *);
785:	struct backing_dev_info *bdi_get_by_id(u64);
906:	void bdi_put(struct backing_dev_info *);
836:	int bdi_register(struct backing_dev_info *, const char *, ...);
801:	int bdi_register_va(struct backing_dev_info *, const char *, struct __va_list_tag *);
848:	void bdi_set_owner(struct backing_dev_info *, struct device *);
868:	void bdi_unregister(struct backing_dev_info *);
926:	void clear_bdi_congested(struct backing_dev_info *, int);
959:	long congestion_wait(int, long);
940:	void set_bdi_congested(struct backing_dev_info *, int);
990:	long wait_iff_congested(int, long);
661:	void wb_blkcg_offline(struct blkcg *);
577:	struct bdi_writeback *wb_get_create(struct backing_dev_info *, struct cgroup_subsys_state *, gfp_t);
544:	struct bdi_writeback *wb_get_lookup(struct backing_dev_info *, struct cgroup_subsys_state *);
643:	void wb_memcg_offline(struct mem_cgroup *);
264:	void wb_wakeup_delayed(struct bdi_writeback *);
220:	static int bdi_class_init(void);
105:	static int bdi_debug_stats_open(struct inode *, struct file *);
46:	static int bdi_debug_stats_show(struct seq_file *, void *);
715:	static int bdi_init(struct backing_dev_info *);
595:	static int cgwb_bdi_init(struct backing_dev_info *);
611:	static void cgwb_bdi_unregister(struct backing_dev_info *);
427:	static int cgwb_create(struct backing_dev_info *, struct cgroup_subsys_state *, gfp_t);
679:	static int cgwb_init(void);
410:	static void cgwb_kill(struct bdi_writeback *);
403:	static void cgwb_release(struct percpu_ref *);
381:	static void cgwb_release_workfn(struct work_struct *);
235:	static int default_bdi_init(void);
199:	static ssize_t max_ratio_show(struct device *, struct device_attribute *, char *);
182:	static ssize_t max_ratio_store(struct device *, struct device_attribute *, const char *, size_t);
180:	static ssize_t min_ratio_show(struct device *, struct device_attribute *, char *);
163:	static ssize_t min_ratio_store(struct device *, struct device_attribute *, const char *, size_t);
161:	static ssize_t read_ahead_kb_show(struct device *, struct device_attribute *, char *);
132:	static ssize_t read_ahead_kb_store(struct device *, struct device_attribute *, const char *, size_t);
201:	static ssize_t stable_pages_required_show(struct device *, struct device_attribute *, char *);
356:	static void wb_exit(struct bdi_writeback *);
280:	static int wb_init(struct bdi_writeback *, struct backing_dev_info *, gfp_t);
335:	static void wb_shutdown(struct bdi_writeback *);

File mm/balloon_compaction.c:
124:	struct page *balloon_page_alloc(void);
177:	struct page *balloon_page_dequeue(struct balloon_dev_info *);
146:	void balloon_page_enqueue(struct balloon_dev_info *, struct page *);
206:	bool balloon_page_isolate(struct page *, isolate_mode_t);
76:	size_t balloon_page_list_dequeue(struct balloon_dev_info *, struct list_head *, size_t);
40:	size_t balloon_page_list_enqueue(struct balloon_dev_info *, struct list_head *);
233:	int balloon_page_migrate(struct address_space *, struct page *, struct page *, enum migrate_mode);
220:	void balloon_page_putback(struct page *);
14:	static void balloon_page_enqueue_one(struct balloon_dev_info *, struct page *);

File mm/bootmem_info.c:
16:	void get_page_bootmem(unsigned long, struct page *, unsigned long);
24:	void put_page_bootmem(struct page *);
101:	void register_page_bootmem_info_node(struct pglist_data *);
77:	static void register_page_bootmem_info_section(unsigned long);

File mm/cleancache.c:
176:	int __cleancache_get_page(struct page *);
113:	void __cleancache_init_fs(struct super_block *);
127:	void __cleancache_init_shared_fs(struct super_block *);
291:	void __cleancache_invalidate_fs(struct super_block *);
273:	void __cleancache_invalidate_inode(struct address_space *);
243:	void __cleancache_invalidate_page(struct address_space *, struct page *);
215:	void __cleancache_put_page(struct page *);
51:	int cleancache_register_ops(const struct cleancache_ops *);
144:	static int cleancache_get_key(struct inode *, struct cleancache_filekey *);
36:	static void cleancache_register_ops_sb(struct super_block *, void *);
303:	static int init_cleancache(void);

File mm/compaction.c:
114:	int PageMovable(struct page *);
138:	void __ClearPageMovable(struct page *);
130:	void __SetPageMovable(struct page *, struct address_space *);
198:	void compaction_defer_reset(struct zone *, int, bool);
175:	bool compaction_deferred(struct zone *, int);
2698:	int compaction_register_node(struct node *);
212:	bool compaction_restarting(struct zone *, int);
2167:	enum compact_result compaction_suitable(struct zone *, int, unsigned int, int);
2703:	void compaction_unregister_node(struct node *);
2205:	bool compaction_zonelist_suitable(struct alloc_context *, int, int);
160:	void defer_compaction(struct zone *, int);
700:	unsigned long isolate_freepages_range(struct compact_control *, unsigned long, unsigned long);
1151:	unsigned long isolate_migratepages_range(struct compact_control *, unsigned long, unsigned long);
2899:	int kcompactd_run(int);
2920:	void kcompactd_stop(int);
386:	void reset_isolation_suitable(pg_data_t *);
2671:	int sysctl_compaction_handler(struct ctl_table *, int, void *, size_t *, loff_t *);
2511:	enum compact_result try_to_compact_pages(gfp_t, unsigned int, unsigned int, const struct alloc_context *, enum compact_priority, struct page **);
2812:	void wakeup_kcompactd(pg_data_t *, int, int);
1995:	static enum compact_result __compact_finished(struct compact_control *);
2124:	static enum compact_result __compaction_suitable(struct zone *, int, unsigned int, int, unsigned long);
258:	static bool __reset_isolation_pfn(struct zone *, unsigned long, bool, bool);
334:	static void __reset_isolation_suitable(struct zone *);
2105:	static enum compact_result compact_finished(struct compact_control *);
499:	static bool compact_lock_irqsave(spinlock_t *, unsigned long *, struct compact_control *);
2616:	static void compact_node(int);
2238:	static enum compact_result compact_zone(struct compact_control *, struct capture_control *);
2449:	static enum compact_result compact_zone_order(struct zone *, int, gfp_t, enum compact_priority, unsigned int, int, struct page **);
1624:	static struct page *compaction_alloc(struct page *, unsigned long);
1649:	static void compaction_free(struct page *, unsigned long);
1703:	static unsigned long fast_find_migrateblock(struct compact_control *);
1345:	static unsigned long fast_isolate_freepages(struct compact_control *);
1507:	static void isolate_freepages(struct compact_control *);
553:	static unsigned long isolate_freepages_block(struct compact_control *, unsigned long *, unsigned long, struct list_head *, unsigned int, bool);
1817:	static isolate_migrate_t isolate_migratepages(struct compact_control *);
800:	static unsigned long isolate_migratepages_block(struct compact_control *, unsigned long, unsigned long, isolate_mode_t);
2842:	static int kcompactd(void *);
2936:	static int kcompactd_cpu_online(unsigned int);
2734:	static void kcompactd_do_work(pg_data_t *);
2953:	static int kcompactd_init(void);
1276:	static void move_freelist_tail(struct list_head *, struct page *);
244:	static bool pageblock_skip_persistent(struct page *);
2588:	static void proactive_compact_node(pg_data_t *);
71:	static unsigned long release_freepages(struct list_head *);
87:	static void split_map_pages(struct list_head *);
2681:	static ssize_t sysfs_compact_node(struct device *, struct device_attribute *, const char *, size_t);

File mm/debug.c:
45:	void __dump_page(struct page *, const char *);
190:	void dump_page(struct page *, const char *);

File mm/dmapool.c:
314:	void *dma_pool_alloc(struct dma_pool *, gfp_t, dma_addr_t *);
130:	struct dma_pool *dma_pool_create(const char *, struct device *, size_t, size_t, size_t);
267:	void dma_pool_destroy(struct dma_pool *);
404:	void dma_pool_free(struct dma_pool *, void *, dma_addr_t);
498:	struct dma_pool *dmam_pool_create(const char *, struct device *, size_t, size_t, size_t);
523:	void dmam_pool_destroy(struct dma_pool *);
479:	static int dmam_pool_match(struct device *, void *, void *);
472:	static void dmam_pool_release(struct device *, void *);
219:	static struct dma_page *pool_alloc_page(struct dma_pool *, gfp_t);
65:	static ssize_t show_pools(struct device *, struct device_attribute *, char *);

File mm/dynamic_hugetlb.c:
626:	struct page *alloc_huge_page_from_dhugetlb_pool(struct hstate *, struct dhugetlb_pool *, bool);
491:	struct page *alloc_page_from_dhugetlb_pool(gfp_t, unsigned int, unsigned int);
592:	int dhugetlb_acct_memory(struct hstate *, long, struct hugetlbfs_inode_info *);
879:	bool dhugetlb_hide_files(struct cftype *);
1077:	void dynamic_hugetlb_init(void);
585:	bool file_has_mem_in_hpool(struct hugetlbfs_inode_info *);
667:	void free_huge_page_to_dhugetlb_pool(struct page *, bool);
550:	void free_page_list_to_dhugetlb_pool(struct list_head *);
540:	bool free_page_to_dhugetlb_pool(struct page *);
821:	int hugetlb_pool_destroy(struct cgroup *);
1012:	int hugetlb_pool_info_show(struct seq_file *, void *);
780:	void hugetlb_pool_inherit(struct mem_cgroup *, struct mem_cgroup *);
566:	void link_hpool(struct hugetlbfs_inode_info *);
974:	u64 normal_pages_disabled_read(struct cgroup_subsys_state *, struct cftype *);
959:	int normal_pages_disabled_write(struct cgroup_subsys_state *, struct cftype *, u64);
417:	int task_has_mem_in_hpool(struct task_struct *);
576:	void unlink_hpool(struct hugetlbfs_inode_info *);
951:	ssize_t write_1G_reserved_pages(struct kernfs_open_file *, char *, size_t, loff_t);
943:	ssize_t write_2M_reserved_pages(struct kernfs_open_file *, char *, size_t, loff_t);
986:	ssize_t write_hugepage_to_hpool(struct kernfs_open_file *, char *, size_t, loff_t);
447:	static struct page *__alloc_page_from_dhugetlb_pool(void);
510:	static void __free_page_to_dhugetlb_pool(struct page *);
22:	static void add_new_page_to_pool(struct dhugetlb_pool *, struct page *, int);
131:	static int add_pages_to_percpu_pool(struct dhugetlb_pool *, struct percpu_pages_pool *, unsigned long);
702:	static int alloc_hugepage_from_hugetlb(struct dhugetlb_pool *, unsigned long, unsigned long);
177:	static void clear_percpu_pools(struct dhugetlb_pool *);
1108:	static int dynamic_hugetlb_setup(char *);
388:	static struct dhugetlb_pool *find_hpool_by_dhugetlb_pagelist(struct page *);
400:	static struct dhugetlb_pool *find_hpool_by_task(struct task_struct *);
743:	static int free_hugepage_to_hugetlb(struct dhugetlb_pool *);
324:	static bool get_hpool_unless_zero(struct dhugetlb_pool *);
199:	static int hpool_merge_page(struct dhugetlb_pool *, int, bool);
89:	static int hpool_split_page(struct dhugetlb_pool *, int);
787:	static int hugetlb_pool_create(struct mem_cgroup *, unsigned long);
292:	static int hugetlb_pool_merge_all_pages(struct dhugetlb_pool *);
331:	static void put_hpool(struct dhugetlb_pool *);
159:	static void reclaim_pages_from_percpu_pool(struct dhugetlb_pool *, struct percpu_pages_pool *, unsigned long);
349:	static int set_hpool_in_dhugetlb_pagelist(unsigned long, struct dhugetlb_pool *);
886:	static ssize_t update_reserved_pages(char *, int, struct mem_cgroup *, struct mem_cgroup *);

File mm/early_ioremap.c:
254:	void copy_from_early_mem(void *, phys_addr_t, unsigned long);
217:	void *early_ioremap(resource_size_t, unsigned long);
45:	void early_ioremap_reset(void);
75:	void early_ioremap_setup(void);
41:	void early_ioremap_shutdown(void);
168:	void early_iounmap(void *, unsigned long);
224:	void *early_memremap(resource_size_t, unsigned long);
34:	pgprot_t early_memremap_pgprot_adjust(resource_size_t, unsigned long, pgprot_t);
244:	void *early_memremap_prot(resource_size_t, unsigned long, unsigned long);
233:	void *early_memremap_ro(resource_size_t, unsigned long);
300:	void early_memunmap(void *, unsigned long);
106:	static void *__early_ioremap(resource_size_t, unsigned long, pgprot_t);
87:	static int check_early_ioremap_leak(void);
24:	static int early_ioremap_debug_setup(char *);

File mm/fadvise.c:
206:	long __ia32_sys_fadvise64_64(const struct pt_regs *);
206:	long __x64_sys_fadvise64_64(const struct pt_regs *);
32:	int generic_fadvise(struct file *, loff_t, loff_t, int);
192:	int ksys_fadvise64_64(int, loff_t, loff_t, int);
181:	int vfs_fadvise(struct file *, loff_t, loff_t, int);

File mm/filemap.c:
817:	int __add_to_page_cache_locked(struct page *, struct address_space *, unsigned long, gfp_t, void **);
222:	void __delete_from_page_cache(struct page *, void *);
396:	int __filemap_fdatawrite_range(struct address_space *, loff_t, loff_t, int);
666:	void __filemap_set_wb_err(struct address_space *, int);
3590:	ssize_t __generic_file_write_iter(struct kiocb *, struct iov_iter *);
1525:	void __lock_page(struct page *);
1543:	int __lock_page_async(struct page *, struct wait_page_queue *);
1534:	int __lock_page_killable(struct page *);
1559:	int __lock_page_or_retry(struct page *, struct mm_struct *, unsigned int);
952:	struct page *__page_cache_alloc(gfp_t);
1399:	void add_page_wait_queue(struct page *, wait_queue_entry_t *);
913:	int add_to_page_cache_locked(struct page *, struct address_space *, unsigned long, gfp_t);
921:	int add_to_page_cache_lru(struct page *, struct address_space *, unsigned long, gfp_t);
257:	void delete_from_page_cache(struct page *);
333:	void delete_from_page_cache_batch(struct address_space *, struct pagevec *);
3363:	void dio_warn_stale_pagecache(struct file *);
1463:	void end_page_writeback(struct page *);
698:	int file_check_and_advance_wb_err(struct file *);
587:	int file_fdatawait_range(struct file *, loff_t, loff_t);
742:	int file_write_and_wait_range(struct file *, loff_t, loff_t);
355:	int filemap_check_errors(struct address_space *);
2906:	vm_fault_t filemap_fault(struct vm_fault *);
610:	int filemap_fdatawait_keep_errors(struct address_space *);
541:	int filemap_fdatawait_range(struct address_space *, loff_t, loff_t);
563:	int filemap_fdatawait_range_keep_errors(struct address_space *, loff_t, loff_t);
423:	int filemap_fdatawrite(struct address_space *);
429:	int filemap_fdatawrite_range(struct address_space *, loff_t, loff_t);
445:	int filemap_flush(struct address_space *);
3031:	void filemap_map_pages(struct vm_fault *, unsigned long, unsigned long);
3102:	vm_fault_t filemap_page_mkwrite(struct vm_fault *);
463:	bool filemap_range_has_page(struct address_space *, loff_t, loff_t);
636:	int filemap_write_and_wait_range(struct address_space *, loff_t, loff_t);
1892:	unsigned int find_get_entries(struct address_space *, unsigned long, unsigned long, struct pagevec *, unsigned long *);
2061:	unsigned int find_get_pages_contig(struct address_space *, unsigned long, unsigned int, struct page **);
2009:	unsigned int find_get_pages_range(struct address_space *, unsigned long *, unsigned long, unsigned int, struct page **);
2118:	unsigned int find_get_pages_range_tag(struct address_space *, unsigned long *, unsigned long, xa_mark_t, unsigned int, struct page **);
1944:	unsigned int find_lock_entries(struct address_space *, unsigned long, unsigned long, struct pagevec *, unsigned long *);
2452:	ssize_t generic_file_buffered_read(struct kiocb *, struct iov_iter *, ssize_t);
3382:	ssize_t generic_file_direct_write(struct kiocb *, struct iov_iter *);
3136:	int generic_file_mmap(struct file *, struct vm_area_struct *);
2596:	ssize_t generic_file_read_iter(struct kiocb *, struct iov_iter *);
3150:	int generic_file_readonly_mmap(struct file *, struct vm_area_struct *);
3678:	ssize_t generic_file_write_iter(struct kiocb *, struct iov_iter *);
3485:	ssize_t generic_perform_write(struct file *, struct iov_iter *, loff_t);
3467:	struct page *grab_cache_page_write_begin(struct address_space *, unsigned long, unsigned int);
2710:	loff_t mapping_seek_hole_data(struct address_space *, loff_t, loff_t, int);
1610:	unsigned long page_cache_next_miss(struct address_space *, unsigned long, unsigned long);
1646:	unsigned long page_cache_prev_miss(struct address_space *, unsigned long, unsigned long);
1497:	void page_endio(struct page *, bool, int);
1747:	struct page *pagecache_get_page(struct address_space *, unsigned long, int, gfp_t);
991:	void pagecache_init(void);
3339:	int pagecache_write_begin(struct file *, struct address_space *, loff_t, unsigned int, unsigned int, struct page **, void **);
3350:	int pagecache_write_end(struct file *, struct address_space *, loff_t, unsigned int, unsigned int, struct page *, void *);
1383:	void put_and_wait_on_page_locked(struct page *);
3308:	struct page *read_cache_page(struct address_space *, unsigned long, int (*)(void *, struct page *), void *);
3331:	struct page *read_cache_page_gfp(struct address_space *, unsigned long, gfp_t);
777:	int replace_page_cache_page(struct page *, struct page *, gfp_t);
3713:	int try_to_release_page(struct page *, gfp_t);
1449:	void unlock_page(struct page *);
1321:	void wait_on_page_bit(struct page *, int);
1328:	int wait_on_page_bit_killable(struct page *, int);
494:	static void __filemap_fdatawait_range(struct address_space *, loff_t, loff_t);
1335:	static int __wait_on_page_locked_async(struct page *, struct wait_page_queue *, bool);
2859:	static struct file *do_async_mmap_readahead(struct vm_fault *, struct page *);
3187:	static struct page *do_read_cache_page(struct address_space *, unsigned long, int (*)(void *, struct page *), void *, gfp_t);
2809:	static struct file *do_sync_mmap_readahead(struct vm_fault *);
2350:	static int generic_file_buffered_read_get_pages(struct kiocb *, struct iov_iter *, struct page **, unsigned int);
2249:	static struct page *generic_file_buffered_read_pagenotuptodate(struct kiocb *, struct file *, struct iov_iter *, struct page *, loff_t, loff_t);
2194:	static struct page *generic_file_buffered_read_readpage(struct kiocb *, struct file *, struct address_space *, struct page *);
2183:	static int lock_page_for_iocb(struct kiocb *, struct page *);
2769:	static int lock_page_maybe_drop_mmap(struct vm_fault *, struct page *, struct file **);
1676:	static struct page *mapping_get_entry(struct address_space *, unsigned long);
121:	static void page_cache_delete(struct address_space *, struct page *, void *);
285:	static void page_cache_delete_batch(struct address_space *, struct pagevec *);
232:	static void page_cache_free_page(struct page *, struct address_space *, struct address_space *);
147:	static void unaccount_page_cache_page(struct address_space *, struct page *);
3175:	static struct page *wait_on_page_read(struct page *);
1035:	static int wake_page_function(wait_queue_entry_t *, unsigned int, int, void *);
1086:	static void wake_up_page_bit(struct page *, int);

File mm/frame_vector.c:
202:	struct frame_vector *frame_vector_create(unsigned int);
234:	void frame_vector_destroy(struct frame_vector *);
153:	int frame_vector_to_pages(struct frame_vector *);
179:	void frame_vector_to_pfns(struct frame_vector *);
34:	int get_vaddr_frames(unsigned long, unsigned int, unsigned int, struct frame_vector *);
123:	void put_vaddr_frames(struct frame_vector *);

File mm/frontswap.c:
190:	void __frontswap_init(unsigned int, unsigned long *);
353:	void __frontswap_invalidate_area(unsigned int);
331:	void __frontswap_invalidate_page(unsigned int, unsigned long);
294:	int __frontswap_load(struct page *);
245:	int __frontswap_store(struct page *);
215:	bool __frontswap_test(struct swap_info_struct *, unsigned long);
470:	unsigned long frontswap_curr_pages(void);
113:	void frontswap_register_ops(struct frontswap_ops *);
446:	void frontswap_shrink(unsigned long);
181:	void frontswap_tmem_exclusive_gets(bool);
172:	void frontswap_writethrough(bool);
371:	static unsigned long __frontswap_curr_pages(void);
482:	static int init_frontswap(void);

File mm/gup.c:
1573:	int __mm_populate(unsigned long, unsigned long, int);
1513:	int do_mm_populate(struct mm_struct *, unsigned long, unsigned long, int);
1273:	int fixup_user_fault(struct mm_struct *, unsigned long, unsigned int, bool *);
865:	struct page *follow_page(struct vm_area_struct *, unsigned long, unsigned int);
1638:	struct page *get_dump_page(unsigned long);
2007:	long get_user_pages(unsigned long, unsigned long, unsigned int, struct page **, struct vm_area_struct **);
2902:	int get_user_pages_fast(unsigned long, int, unsigned int, struct page **);
2857:	int get_user_pages_fast_only(unsigned long, int, unsigned int, struct page **);
2051:	long get_user_pages_locked(unsigned long, unsigned long, unsigned int, struct page **, int *);
1960:	long get_user_pages_remote(struct mm_struct *, unsigned long, unsigned long, unsigned int, struct page **, struct vm_area_struct **, int *);
2091:	long get_user_pages_unlocked(unsigned long, unsigned long, struct page **, unsigned int);
3039:	long pin_user_pages(unsigned long, unsigned long, unsigned int, struct page **, struct vm_area_struct **);
2935:	int pin_user_pages_fast(unsigned long, int, unsigned int, struct page **);
2953:	int pin_user_pages_fast_only(unsigned long, int, unsigned int, struct page **);
3075:	long pin_user_pages_locked(unsigned long, unsigned long, unsigned int, struct page **, int *);
3006:	long pin_user_pages_remote(struct mm_struct *, unsigned long, unsigned long, unsigned int, struct page **, struct vm_area_struct **, int *);
3058:	long pin_user_pages_unlocked(unsigned long, unsigned long, struct page **, unsigned int);
1470:	long populate_vma_page_range(struct vm_area_struct *, unsigned long, unsigned long, int *);
197:	bool try_grab_page(struct page *, unsigned int);
239:	void unpin_user_page(struct page *);
380:	void unpin_user_page_range_dirty_lock(struct page *, unsigned long, bool);
404:	void unpin_user_pages(struct page **, unsigned long);
319:	void unpin_user_pages_dirty_lock(struct page **, unsigned long, bool);
1096:	static long __get_user_pages(struct mm_struct *, unsigned long, unsigned long, unsigned int, struct page **, struct vm_area_struct **, int *);
1871:	static long __get_user_pages_remote(struct mm_struct *, unsigned long, unsigned long, unsigned int, struct page **, struct vm_area_struct **, int *);
2316:	static int __gup_device_huge(unsigned long, unsigned long, unsigned long, unsigned int, struct page **, int *);
1786:	static long __gup_longterm_locked(struct mm_struct *, unsigned long, unsigned long, struct page **, struct vm_area_struct **, unsigned int);
780:	static struct page *follow_p4d_mask(struct vm_area_struct *, unsigned long, pgd_t *, unsigned int, struct follow_page_context *);
825:	static struct page *follow_page_mask(struct vm_area_struct *, unsigned long, unsigned int, struct follow_page_context *);
475:	static struct page *follow_page_pte(struct vm_area_struct *, unsigned long, pmd_t *, unsigned int, struct dev_pagemap **);
625:	static struct page *follow_pmd_mask(struct vm_area_struct *, unsigned long, unsigned int, struct follow_page_context *, pud_t *, pud_t *);
740:	static struct page *follow_pud_mask(struct vm_area_struct *, unsigned long, unsigned int, struct follow_page_context *, p4d_t *, p4d_t *);
877:	static int get_gate_page(struct mm_struct *, unsigned long, unsigned int, struct vm_area_struct **, struct page **);
2483:	static int gup_huge_pmd(pmd_t, pmd_t *, unsigned long, unsigned long, unsigned int, struct page **, int *);
2517:	static int gup_huge_pud(pud_t, pud_t *, unsigned long, unsigned long, unsigned int, struct page **, int *);
2651:	static int gup_p4d_range(pgd_t, unsigned long, unsigned long, unsigned int, struct page **, int *, pgd_t *);
2676:	static void gup_pgd_range(unsigned long, unsigned long, unsigned int, struct page **, int *);
2580:	static int gup_pmd_range(pud_t, unsigned long, unsigned long, unsigned int, struct page **, int *, pud_t *);
2222:	static int gup_pte_range(pmd_t, unsigned long, unsigned long, unsigned int, struct page **, int *);
2623:	static int gup_pud_range(p4d_t, unsigned long, unsigned long, unsigned int, struct page **, int *, p4d_t *);
2789:	static int internal_get_user_pages_fast(unsigned long, unsigned long, unsigned int, struct page **);
1851:	static bool is_valid_gup_flags(unsigned int);
2742:	static unsigned long lockless_pages_from_mm(unsigned long, unsigned long, unsigned int, struct page **);
161:	static void put_compound_head(struct page *, int, unsigned int);
48:	static void put_page_refs(struct page *, int);
113:	static struct page *try_grab_compound_head(struct page *, int, unsigned int);
2206:	static void undo_dev_pagemap(int *, int, unsigned int, struct page **);

File mm/hmm.c:
571:	int hmm_range_fault(struct hmm_range *);
119:	static unsigned int hmm_range_need_fault(const struct hmm_vma_walk *, const unsigned long *, unsigned long, unsigned long);
61:	static int hmm_vma_fault(unsigned long, unsigned long, unsigned int, struct mm_walk *, struct mm_walk *);
185:	static int hmm_vma_handle_pmd(struct mm_walk *, unsigned long, unsigned long, unsigned long *, pmd_t);
229:	static int hmm_vma_handle_pte(struct mm_walk *, unsigned long, unsigned long, pmd_t *, unsigned long *, pte_t *, pte_t *);
145:	static int hmm_vma_walk_hole(unsigned long, unsigned long, int, struct mm_walk *);
471:	static int hmm_vma_walk_hugetlb_entry(pte_t *, unsigned long, unsigned long, unsigned long, struct mm_walk *);
318:	static int hmm_vma_walk_pmd(pmd_t *, unsigned long, unsigned long, struct mm_walk *);
408:	static int hmm_vma_walk_pud(pud_t *, unsigned long, unsigned long, struct mm_walk *);
510:	static int hmm_vma_walk_test(unsigned long, unsigned long, struct mm_walk *);

File mm/huge_memory.c:
1912:	spinlock_t *__pmd_trans_huge_lock(pmd_t *, struct vm_area_struct *);
1929:	spinlock_t *__pud_trans_huge_lock(pud_t *, struct vm_area_struct *);
2221:	void __split_huge_pmd(struct vm_area_struct *, pmd_t *, unsigned long, bool, struct page *);
1981:	void __split_huge_pud(struct vm_area_struct *, pud_t *, unsigned long);
2650:	bool can_split_huge_page(struct page *, int *);
1808:	int change_huge_pmd(struct vm_area_struct *, pmd_t *, unsigned long, pgprot_t, unsigned long);
1026:	int copy_huge_pmd(struct mm_struct *, struct mm_struct *, pmd_t *, pmd_t *, unsigned long, struct vm_area_struct *, struct vm_area_struct *);
1194:	int copy_huge_pud(struct mm_struct *, struct mm_struct *, pud_t *, pud_t *, unsigned long, struct vm_area_struct *);
2816:	void deferred_split_huge_page(struct page *);
724:	vm_fault_t do_huge_pmd_anonymous_page(struct vm_fault *);
1424:	vm_fault_t do_huge_pmd_numa_page(struct vm_fault *, pmd_t);
1284:	vm_fault_t do_huge_pmd_wp_page(struct vm_fault *, pmd_t);
977:	struct page *follow_devmap_pmd(struct vm_area_struct *, unsigned long, pmd_t *, int, struct dev_pagemap **);
1149:	struct page *follow_devmap_pud(struct vm_area_struct *, unsigned long, pud_t *, int, struct dev_pagemap **);
1353:	struct page *follow_trans_huge_pmd(struct vm_area_struct *, unsigned long, pmd_t *, unsigned int);
2802:	void free_transhuge_page(struct page *);
1263:	void huge_pmd_set_accessed(struct vm_fault *, pmd_t);
1241:	void huge_pud_set_accessed(struct vm_fault *, pud_t);
530:	bool is_transparent_hugepage(struct page *);
1584:	bool madvise_free_huge_pmd(struct mmu_gather *, struct vm_area_struct *, pmd_t *, unsigned long, unsigned long);
492:	pmd_t maybe_pmd_mkwrite(pmd_t, struct vm_area_struct *);
128:	struct page *mm_get_huge_zero_page(struct mm_struct *);
142:	void mm_put_huge_zero_page(struct mm_struct *);
1754:	bool move_huge_pmd(struct vm_area_struct *, unsigned long, unsigned long, pmd_t *, pmd_t *);
2615:	int page_trans_huge_mapcount(struct page *, int *);
519:	void prep_transhuge_page(struct page *);
3011:	void remove_migration_pmd(struct page_vma_mapped_walk *, struct page *);
2985:	void set_pmd_migration_entry(struct page_vma_mapped_walk *, struct page *);
215:	ssize_t single_hugepage_flag_show(struct kobject *, struct kobj_attribute *, char *, enum transparent_hugepage_flag);
223:	ssize_t single_hugepage_flag_store(struct kobject *, struct kobj_attribute *, const char *, size_t, enum transparent_hugepage_flag);
2683:	int split_huge_page_to_list(struct page *, struct list_head *);
2300:	void split_huge_pmd_address(struct vm_area_struct *, unsigned long, bool, struct page *);
577:	unsigned long thp_get_unmapped_area(struct file *, unsigned long, unsigned long, unsigned long, unsigned long);
2567:	int total_mapcount(struct page *);
74:	bool transparent_hugepage_active(struct vm_area_struct *);
2325:	void vma_adjust_trans_huge(struct vm_area_struct *, unsigned long, unsigned long, long);
845:	vm_fault_t vmf_insert_pfn_pmd_prot(struct vm_fault *, pfn_t, pgprot_t, bool);
936:	vm_fault_t vmf_insert_pfn_pud_prot(struct vm_fault *, pfn_t, pgprot_t, bool);
1663:	int zap_huge_pmd(struct mmu_gather *, struct vm_area_struct *, pmd_t *, unsigned long);
1942:	int zap_huge_pud(struct mmu_gather *, struct vm_area_struct *, pud_t *, unsigned long);
594:	static vm_fault_t __do_huge_pmd_anonymous_page(struct vm_fault *, struct page *, gfp_t);
2478:	static void __split_huge_page(struct page *, struct list_head *, unsigned long);
2413:	static void __split_huge_page_tail(struct page *, int, struct list_head *, struct lruvec *);
2040:	static void __split_huge_pmd_locked(struct vm_area_struct *, pmd_t *, unsigned long, bool);
2006:	static void __split_huge_zero_page_pmd(struct vm_area_struct *, unsigned long, pmd_t *);
2853:	static unsigned long deferred_split_count(struct shrinker *, struct shrink_control *);
2866:	static unsigned long deferred_split_scan(struct shrinker *, struct shrink_control *);
245:	static ssize_t defrag_show(struct kobject *, struct kobj_attribute *, char *);
259:	static ssize_t defrag_store(struct kobject *, struct kobj_attribute *, const char *, size_t);
176:	static ssize_t enabled_show(struct kobject *, struct kobj_attribute *, char *);
187:	static ssize_t enabled_store(struct kobject *, struct kobj_attribute *, const char *, size_t);
91:	static struct page *get_huge_zero_page(void);
311:	static ssize_t hpage_pmd_size_show(struct kobject *, struct kobj_attribute *, char *);
382:	static int hugepage_init(void);
785:	static void insert_pfn_pmd(struct vm_area_struct *, unsigned long, pmd_t *, pfn_t, pgprot_t, bool, pgtable_t);
887:	static void insert_pfn_pud(struct vm_area_struct *, unsigned long, pud_t *, pfn_t, pgprot_t, bool);
1743:	static pmd_t move_soft_dirty_pmd(pmd_t);
119:	static void put_huge_zero_page(void);
461:	static int setup_transparent_hugepage(char *);
148:	static unsigned long shrink_huge_zero_page_count(struct shrinker *, struct shrink_control *);
155:	static unsigned long shrink_huge_zero_page_scan(struct shrinker *, struct shrink_control *);
2975:	static int split_huge_pages_debugfs(void);
2972:	static int split_huge_pages_fops_open(struct inode *, struct file *);
2932:	static int split_huge_pages_set(u64, void *);
296:	static ssize_t use_zero_page_show(struct kobject *, struct kobj_attribute *, char *);
302:	static ssize_t use_zero_page_store(struct kobject *, struct kobj_attribute *, const char *, size_t);

File mm/hugetlb.c:
1745:	int PageHeadHuge(struct page *);
1731:	int PageHuge(struct page *);
2633:	int __alloc_bootmem_huge_page(struct hstate *, int);
4242:	void __unmap_hugepage_range(struct mmu_gather *, struct vm_area_struct *, unsigned long, unsigned long, struct page *);
4367:	void __unmap_hugepage_range_final(struct mmu_gather *, struct vm_area_struct *, unsigned long, unsigned long, struct page *);
5705:	void adjust_range_if_pmd_sharing_possible(struct vm_area_struct *, unsigned long *, unsigned long *);
2487:	struct page *alloc_huge_page(struct vm_area_struct *, unsigned long, int);
2139:	struct page *alloc_huge_page_nodemask(struct hstate *, int, nodemask_t *, gfp_t);
2158:	struct page *alloc_huge_page_vma(struct hstate *, struct vm_area_struct *, unsigned long);
3518:	bool arch_hugetlb_valid_size(unsigned long);
4131:	int copy_hugetlb_page_range(struct mm_struct *, struct mm_struct *, struct vm_area_struct *);
1948:	int dissolve_free_huge_page(struct page *);
2034:	int dissolve_free_huge_pages(unsigned long, unsigned long);
5916:	struct page *follow_huge_addr(struct mm_struct *, unsigned long, int);
5923:	struct page *follow_huge_pd(struct vm_area_struct *, unsigned long, hugepd_t, int, int);
5994:	struct page *follow_huge_pgd(struct mm_struct *, unsigned long, pgd_t *, int);
5931:	struct page *follow_huge_pmd(struct mm_struct *, unsigned long, pmd_t *, int);
5984:	struct page *follow_huge_pud(struct mm_struct *, unsigned long, pud_t *, int);
5181:	long follow_hugetlb_page(struct mm_struct *, struct vm_area_struct *, struct page **, struct vm_area_struct **, unsigned long *, unsigned long *, long, unsigned int, int *);
1566:	void free_huge_page(struct page *);
4649:	int huge_add_to_page_cache(struct page *, struct address_space *, unsigned long);
5744:	pte_t *huge_pmd_share(struct mm_struct *, unsigned long, pud_t *);
5804:	int huge_pmd_unshare(struct mm_struct *, struct vm_area_struct *, unsigned long *, pte_t *);
5843:	pte_t *huge_pte_alloc(struct mm_struct *, unsigned long, unsigned long);
5881:	pte_t *huge_pte_offset(struct mm_struct *, unsigned long, unsigned long);
110:	struct hugepage_subpool *hugepage_new_subpool(struct hstate *, long, long);
134:	void hugepage_put_subpool(struct hugepage_subpool *);
3523:	void hugetlb_add_hstate(unsigned int);
1773:	unsigned long hugetlb_basepage_index(struct page *);
5367:	unsigned long hugetlb_change_protection(struct vm_area_struct *, unsigned long, unsigned long, pgprot_t);
4881:	vm_fault_t hugetlb_fault(struct mm_struct *, struct vm_area_struct *, unsigned long, unsigned int);
4858:	u32 hugetlb_fault_mutex_hash(struct address_space *, unsigned long);
748:	void hugetlb_fix_reserve_counts(struct inode *);
5044:	int hugetlb_mcopy_atomic_pte(struct mm_struct *, pte_t *, struct vm_area_struct *, unsigned long, unsigned long, struct page **);
3813:	int hugetlb_mempolicy_sysctl_handler(struct ctl_table *, int, void *, size_t *, loff_t *);
3551:	bool hugetlb_node_alloc_supported(void);
3821:	int hugetlb_overcommit_handler(struct ctl_table *, int, void *, size_t *, loff_t *);
1760:	struct address_space *hugetlb_page_mapping_lock_write(struct page *);
3852:	void hugetlb_report_meminfo(struct seq_file *);
3882:	int hugetlb_report_node_meminfo(char *, int, int);
3916:	void hugetlb_report_usage(struct seq_file *, struct mm_struct *);
5459:	int hugetlb_reserve_pages(struct inode *, long, long, struct vm_area_struct *, vm_flags_t);
3898:	void hugetlb_show_meminfo(void);
3804:	int hugetlb_sysctl_handler(struct ctl_table *, int, void *, size_t *, loff_t *);
3923:	unsigned long hugetlb_total_pages(void);
5622:	long hugetlb_unreserve_pages(struct inode *, long, long, long);
4105:	bool is_hugetlb_entry_migration(pte_t);
6002:	bool isolate_huge_page(struct page *, struct list_head *);
810:	unsigned long linear_hugepage_index(struct vm_area_struct *, unsigned long);
6030:	void move_hugetlb_state(struct page *, struct page *, int);
1658:	bool prep_compound_gigantic_page(struct page *, unsigned int);
6020:	void putback_active_hugepage(struct page *);
1002:	void reset_vma_resv_huge_pages(struct vm_area_struct *);
898:	struct resv_map *resv_map_alloc(void);
929:	void resv_map_release(struct kref *);
1555:	struct hstate *size_to_hstate(unsigned long);
4386:	void unmap_hugepage_range(struct vm_area_struct *, unsigned long, unsigned long, struct page *);
821:	unsigned long vma_kernel_pagesize(struct vm_area_struct *);
835:	unsigned long vma_mmu_pagesize(struct vm_area_struct *);
3090:	static ssize_t __nr_hugepages_store_common(bool, struct hstate *, int, unsigned long, size_t);
1443:	static void __update_and_free_page(struct hstate *, struct page *);
2348:	static long __vma_reservation_common(struct hstate *, struct vm_area_struct *, unsigned long, enum vma_resv_mode);
1410:	static void add_hugetlb_page(struct hstate *, struct page *, bool);
372:	static long add_reservation_in_range(struct resv_map *, long, long, struct hugetlb_cgroup *, struct hstate *, long *);
1787:	static struct page *alloc_buddy_huge_page(gfp_t, int, nodemask_t *, nodemask_t *, struct hstate *, struct hstate *);
1838:	static struct page *alloc_fresh_huge_page(struct hstate *, gfp_t, int, nodemask_t *, nodemask_t *);
1878:	static int alloc_pool_huge_page(struct hstate *, nodemask_t *, nodemask_t *);
2056:	static struct page *alloc_surplus_huge_page(struct hstate *, gfp_t, int, nodemask_t *);
445:	static int allocate_file_region_entries(struct resv_map *, int);
3745:	static unsigned int allowed_mems_nr(struct hstate *);
337:	static void coalesce_file_region(struct resv_map *, struct file_region *);
3701:	static int default_hugepagesz_setup(char *);
1083:	static struct page *dequeue_huge_page_node_exact(struct hstate *, int);
1107:	static struct page *dequeue_huge_page_nodemask(struct hstate *, gfp_t, int, nodemask_t *, struct mempolicy *);
1151:	static struct page *dequeue_huge_page_vma(struct hstate *, struct vm_area_struct *, unsigned long, int, long);
1264:	static void destroy_compound_gigantic_page(struct page *, unsigned int);
1072:	static void enqueue_huge_page(struct hstate *, struct page *);
1284:	static void free_gigantic_page(struct page *, unsigned int);
1491:	static void free_hpage_workfn(struct work_struct *);
3203:	static ssize_t free_hugepages_show(struct kobject *, struct kobj_attribute *, char *);
2675:	static void gather_bootmem_prealloc(void);
2179:	static int gather_surplus_pages(struct hstate *, long);
152:	static long hugepage_subpool_get_pages(struct hugepage_subpool *, long, struct hugetlbfs_inode_info *);
201:	static long hugepage_subpool_put_pages(struct hugepage_subpool *, long, struct hugetlbfs_inode_info *);
3562:	static int hugepages_setup(char *);
3653:	static int hugepagesz_setup(char *);
3933:	static int hugetlb_acct_memory(struct hstate *, long, struct hugetlbfs_inode_info *);
4472:	static vm_fault_t hugetlb_cow(struct mm_struct *, struct vm_area_struct *, unsigned long, pte_t *, struct page *, spinlock_t *);
2734:	static void hugetlb_hstate_alloc_pages(struct hstate *);
2703:	static void hugetlb_hstate_alloc_pages_onenode(struct hstate *, int);
3442:	static int hugetlb_init(void);
4672:	static vm_fault_t hugetlb_no_page(struct mm_struct *, struct vm_area_struct *, struct address_space *, unsigned long, unsigned long, pte_t *, unsigned int);
3379:	static void hugetlb_register_node(struct node *);
3781:	static int hugetlb_sysctl_handler_common(bool, struct ctl_table *, int, void *, size_t *, loff_t *);
3261:	static int hugetlb_sysfs_add_hstate(struct hstate *, struct kobject *, struct kobject **, const struct attribute_group *);
3354:	static void hugetlb_unregister_node(struct node *);
4001:	static void hugetlb_vm_op_close(struct vm_area_struct *);
4050:	static vm_fault_t hugetlb_vm_op_fault(struct vm_fault *);
3983:	static void hugetlb_vm_op_open(struct vm_area_struct *);
4037:	static unsigned long hugetlb_vm_op_pagesize(struct vm_area_struct *);
4030:	static int hugetlb_vm_op_split(struct vm_area_struct *, unsigned long);
4633:	static bool hugetlbfs_pagecache_present(struct vm_area_struct *, unsigned long, struct hstate *, struct hstate *);
4118:	static bool is_hugetlb_entry_hwpoisoned(pte_t);
3060:	static struct hstate *kobj_to_hstate(struct kobject *, int *);
4075:	static pte_t make_huge_pte(struct page *, int, struct vm_area_struct *, struct vm_area_struct *);
3165:	static ssize_t nr_hugepages_mempolicy_store(struct kobject *, struct kobj_attribute *, const char *, size_t);
3140:	static ssize_t nr_hugepages_show(struct kobject *, struct kobj_attribute *, char *);
3146:	static ssize_t nr_hugepages_store(struct kobject *, struct kobj_attribute *, const char *, size_t);
3174:	static ssize_t nr_overcommit_hugepages_show(struct kobject *, struct kobj_attribute *, char *);
3181:	static ssize_t nr_overcommit_hugepages_store(struct kobject *, struct kobj_attribute *, const char *, size_t);
1643:	static void prep_new_huge_page(struct hstate *, struct page *, int);
316:	static void put_uncharge_info(struct file_region *, struct file_region *);
282:	static void record_hugetlb_cgroup_uncharge_info(struct hugetlb_cgroup *, struct hstate *, struct resv_map *, struct file_region *);
622:	static void region_abort(struct resv_map *, long, long, long);
518:	static long region_add(struct resv_map *, long, long, long, struct hstate *, struct hugetlb_cgroup *);
586:	static long region_chg(struct resv_map *, long, long, long *);
645:	static long region_del(struct resv_map *, long, long);
1360:	static void remove_hugetlb_page(struct hstate *, struct page *, bool);
1909:	static struct page *remove_pool_huge_page(struct hstate *, nodemask_t *, bool);
2454:	static void restore_reserve_on_error(struct hstate *, struct vm_area_struct *, unsigned long, struct page *);
3220:	static ssize_t resv_hugepages_show(struct kobject *, struct kobj_attribute *, char *);
2274:	static void return_unused_surplus_pages(struct hstate *, unsigned long);
2898:	static int set_max_huge_pages(struct hstate *, unsigned long, int, nodemask_t *);
3228:	static ssize_t surplus_hugepages_show(struct kobject *, struct kobj_attribute *, char *);
4416:	static void unmap_ref_private(struct vm_area_struct *, struct page *, unsigned long, struct mm_struct *);
1526:	static void update_and_free_page(struct hstate *, struct page *, bool);
1010:	static bool vma_has_reserves(struct vm_area_struct *, long);

File mm/hugetlb_cgroup.c:
274:	int hugetlb_cgroup_charge_cgroup(int, unsigned long, struct hugetlb_cgroup **);
280:	int hugetlb_cgroup_charge_cgroup_rsvd(int, unsigned long, struct hugetlb_cgroup **);
298:	void hugetlb_cgroup_commit_charge(int, unsigned long, struct hugetlb_cgroup *, struct page *);
305:	void hugetlb_cgroup_commit_charge_rsvd(int, unsigned long, struct hugetlb_cgroup *, struct page *);
759:	void hugetlb_cgroup_file_init(void);
778:	void hugetlb_cgroup_migrate(struct page *, struct page *);
368:	void hugetlb_cgroup_uncharge_cgroup(int, unsigned long, struct hugetlb_cgroup *);
374:	void hugetlb_cgroup_uncharge_cgroup_rsvd(int, unsigned long, struct hugetlb_cgroup *);
380:	void hugetlb_cgroup_uncharge_counter(struct resv_map *, unsigned long, unsigned long);
392:	void hugetlb_cgroup_uncharge_file_region(struct resv_map *, struct file_region *, unsigned long, bool);
338:	void hugetlb_cgroup_uncharge_page(int, unsigned long, struct page *);
344:	void hugetlb_cgroup_uncharge_page_rsvd(int, unsigned long, struct page *);
231:	static int __hugetlb_cgroup_charge_cgroup(int, unsigned long, struct hugetlb_cgroup **, bool);
618:	static void __hugetlb_cgroup_file_dfl_init(int);
682:	static void __hugetlb_cgroup_file_legacy_init(int);
350:	static void __hugetlb_cgroup_uncharge_cgroup(int, unsigned long, struct hugetlb_cgroup *, bool);
315:	static void __hugetlb_cgroup_uncharge_page(int, unsigned long, struct page *, bool);
130:	static struct cgroup_subsys_state *hugetlb_cgroup_css_alloc(struct cgroup_subsys_state *);
146:	static void hugetlb_cgroup_css_free(struct cgroup_subsys_state *);
197:	static void hugetlb_cgroup_css_offline(struct cgroup_subsys_state *);
424:	static u64 hugetlb_cgroup_read_u64(struct cgroup_subsys_state *, struct cftype *);
456:	static int hugetlb_cgroup_read_u64_max(struct seq_file *, void *);
548:	static ssize_t hugetlb_cgroup_reset(struct kernfs_open_file *, char *, size_t, loff_t);
498:	static ssize_t hugetlb_cgroup_write(struct kernfs_open_file *, char *, size_t, const char *, loff_t);
542:	static ssize_t hugetlb_cgroup_write_dfl(struct kernfs_open_file *, char *, size_t, loff_t);
536:	static ssize_t hugetlb_cgroup_write_legacy(struct kernfs_open_file *, char *, size_t, loff_t);
613:	static int hugetlb_events_local_show(struct seq_file *, void *);
608:	static int hugetlb_events_show(struct seq_file *, void *);
578:	static char *mem_fmt(char *, unsigned long, int);

File mm/hugetlb_vmemmap.c:
218:	int alloc_huge_page_vmemmap(struct hstate *, struct page *);
246:	void free_huge_page_vmemmap(struct hstate *, struct page *);
267:	void hugetlb_vmemmap_init(struct hstate *);
187:	static int early_hugetlb_free_vmemmap_param(char *);

File mm/interval_tree.c:
75:	void anon_vma_interval_tree_insert(struct anon_vma_chain *, struct rb_root_cached *);
92:	struct anon_vma_chain *anon_vma_interval_tree_iter_first(struct rb_root_cached *, unsigned long, unsigned long);
99:	struct anon_vma_chain *anon_vma_interval_tree_iter_next(struct anon_vma_chain *, unsigned long, unsigned long);
85:	void anon_vma_interval_tree_remove(struct anon_vma_chain *, struct rb_root_cached *);
23:	void vma_interval_tree_insert(struct vm_area_struct *, struct rb_root_cached *);
28:	void vma_interval_tree_insert_after(struct vm_area_struct *, struct vm_area_struct *, struct rb_root_cached *);
23:	struct vm_area_struct *vma_interval_tree_iter_first(struct rb_root_cached *, unsigned long, unsigned long);
23:	struct vm_area_struct *vma_interval_tree_iter_next(struct vm_area_struct *, unsigned long, unsigned long);
23:	void vma_interval_tree_remove(struct vm_area_struct *, struct rb_root_cached *);
71:	static void __anon_vma_interval_tree_augment_rotate(struct rb_node *, struct rb_node *);
71:	static struct anon_vma_chain *__anon_vma_interval_tree_subtree_search(struct anon_vma_chain *, unsigned long, unsigned long);
23:	static void vma_interval_tree_augment_rotate(struct rb_node *, struct rb_node *);
23:	static struct vm_area_struct *vma_interval_tree_subtree_search(struct vm_area_struct *, unsigned long, unsigned long);

File mm/ioremap.c:
31:	int ioremap_page_range(unsigned long, unsigned long, phys_addr_t, pgprot_t);
21:	static int set_nohugeiomap(char *);

File mm/khugepaged.c:
473:	int __khugepaged_enter(struct mm_struct *);
526:	void __khugepaged_exit(struct mm_struct *);
1434:	void collapse_pte_mapped_thp(struct mm_struct *, unsigned long);
345:	int hugepage_madvise(struct vm_area_struct *, unsigned long *, int);
400:	void khugepaged_destroy(void);
506:	int khugepaged_enter_vma_merge(struct vm_area_struct *, unsigned long);
384:	int khugepaged_init(void);
2353:	void khugepaged_min_free_kbytes_update(void);
2324:	int start_stop_khugepaged(void);
736:	static void __collapse_huge_page_copy(pte_t *, struct page *, struct vm_area_struct *, spinlock_t *, struct list_head *, unsigned long);
598:	static int __collapse_huge_page_isolate(struct vm_area_struct *, unsigned long, pte_t *, struct list_head *);
1001:	static bool __collapse_huge_page_swapin(struct mm_struct *, struct vm_area_struct *, unsigned long, pmd_t *, int);
151:	static ssize_t alloc_sleep_millisecs_show(struct kobject *, struct kobj_attribute *, char *);
158:	static ssize_t alloc_sleep_millisecs_store(struct kobject *, struct kobj_attribute *, const char *, size_t);
1634:	static void collapse_file(struct mm_struct *, struct file *, unsigned long, struct page **, int);
1057:	static void collapse_huge_page(struct mm_struct *, unsigned long, struct page **, int, int, int);
1384:	static void collect_mm_slot(struct mm_slot *);
213:	static ssize_t full_scans_show(struct kobject *, struct kobj_attribute *, char *);
440:	static bool hugepage_vma_check(struct vm_area_struct *, unsigned long);
968:	static int hugepage_vma_revalidate(struct mm_struct *, unsigned long, struct vm_area_struct **);
587:	static bool is_refcount_suitable(struct page *);
2259:	static int khugepaged(void *);
791:	static void khugepaged_alloc_sleep(void);
1532:	static int khugepaged_collapse_pte_mapped_thps(struct mm_slot *);
222:	static ssize_t khugepaged_defrag_show(struct kobject *, struct kobj_attribute *, char *);
228:	static ssize_t khugepaged_defrag_store(struct kobject *, struct kobj_attribute *, const char *, size_t);
2197:	static void khugepaged_do_scan(void);
834:	static int khugepaged_find_target_node(void);
247:	static ssize_t khugepaged_max_ptes_none_show(struct kobject *, struct kobj_attribute *, char *);
253:	static ssize_t khugepaged_max_ptes_none_store(struct kobject *, struct kobj_attribute *, const char *, size_t);
299:	static ssize_t khugepaged_max_ptes_shared_show(struct kobject *, struct kobj_attribute *, char *);
306:	static ssize_t khugepaged_max_ptes_shared_store(struct kobject *, struct kobj_attribute *, const char *, size_t);
272:	static ssize_t khugepaged_max_ptes_swap_show(struct kobject *, struct kobj_attribute *, char *);
279:	static ssize_t khugepaged_max_ptes_swap_store(struct kobject *, struct kobj_attribute *, const char *, size_t);
803:	static bool khugepaged_scan_abort(int);
1971:	static void khugepaged_scan_file(struct mm_struct *, struct file *, unsigned long, struct page **);
2059:	static unsigned int khugepaged_scan_mm_slot(unsigned int, struct page **);
1223:	static int khugepaged_scan_pmd(struct mm_struct *, struct vm_area_struct *, unsigned long, struct page **);
2239:	static void khugepaged_wait_work(void);
204:	static ssize_t pages_collapsed_show(struct kobject *, struct kobj_attribute *, char *);
179:	static ssize_t pages_to_scan_show(struct kobject *, struct kobj_attribute *, char *);
185:	static ssize_t pages_to_scan_store(struct kobject *, struct kobj_attribute *, const char *, size_t);
558:	static void release_pte_page(struct page *);
567:	static void release_pte_pages(pte_t *, pte_t *, struct list_head *);
1555:	static void retract_page_tables(struct address_space *, unsigned long);
123:	static ssize_t scan_sleep_millisecs_show(struct kobject *, struct kobj_attribute *, char *);
130:	static ssize_t scan_sleep_millisecs_store(struct kobject *, struct kobj_attribute *, const char *, size_t);
2280:	static void set_recommended_min_free_kbytes(void);

File mm/ksm.c:
2499:	int __ksm_enter(struct mm_struct *);
2538:	void __ksm_exit(struct mm_struct *);
2439:	int ksm_madvise(struct vm_area_struct *, unsigned long, unsigned long, int, unsigned long *);
2576:	struct page *ksm_might_need_to_copy(struct page *, struct vm_area_struct *, unsigned long);
2676:	void ksm_migrate_page(struct page *, struct page *);
2611:	void rmap_walk_ksm(struct page *, struct rmap_walk_control *);
1503:	static struct page *__stable_node_chain(struct stable_node **, struct stable_node **, struct rb_root *, bool);
592:	static struct stable_node *alloc_stable_node_chain(struct stable_node *, struct rb_root *);
535:	static void break_cow(struct rmap_item *);
471:	static int break_ksm(struct vm_area_struct *, unsigned long);
1026:	static u32 calc_checksum(struct page *);
2038:	static void cmp_and_merge_page(struct page *, struct rmap_item *);
521:	static struct vm_area_struct *find_mergeable_vma(struct mm_struct *, unsigned long);
3134:	static ssize_t full_scans_show(struct kobject *, struct kobj_attribute *, char *);
696:	static struct page *get_ksm_page(struct stable_node *, enum get_ksm_page_flags);
554:	static struct page *get_mergeable_page(struct rmap_item *, struct rmap_item *);
2199:	static struct rmap_item *get_next_rmap_item(struct mm_slot *, struct rmap_item **, unsigned long);
2753:	static void ksm_check_stable_tree(unsigned long, unsigned long);
2390:	static void ksm_do_scan(unsigned int);
3167:	static int ksm_init(void);
2782:	static int ksm_memory_callback(struct notifier_block *, unsigned long, void *);
2410:	static int ksm_scan_thread(void *);
307:	static int ksm_slab_init(void);
3015:	static ssize_t max_page_sharing_show(struct kobject *, struct kobj_attribute *, char *);
3021:	static ssize_t max_page_sharing_store(struct kobject *, struct kobj_attribute *, const char *, size_t);
2936:	static ssize_t merge_across_nodes_show(struct kobject *, struct kobj_attribute *, char *);
2942:	static ssize_t merge_across_nodes_store(struct kobject *, struct kobj_attribute *, const char *, size_t);
3056:	static ssize_t pages_shared_show(struct kobject *, struct kobj_attribute *, char *);
3063:	static ssize_t pages_sharing_show(struct kobject *, struct kobj_attribute *, char *);
2864:	static ssize_t pages_to_scan_show(struct kobject *, struct kobj_attribute *, char *);
2870:	static ssize_t pages_to_scan_store(struct kobject *, struct kobj_attribute *, const char *, size_t);
3070:	static ssize_t pages_unshared_show(struct kobject *, struct kobj_attribute *, char *);
3077:	static ssize_t pages_volatile_show(struct kobject *, struct kobj_attribute *, char *);
941:	static int remove_all_stable_nodes(void);
633:	static void remove_node_from_stable_tree(struct stable_node *);
775:	static void remove_rmap_item_from_tree(struct rmap_item *);
878:	static int remove_stable_node(struct stable_node *);
1122:	static int replace_page(struct vm_area_struct *, struct page *, struct page *, pte_t);
2887:	static ssize_t run_show(struct kobject *, struct kobj_attribute *, char *);
2893:	static ssize_t run_store(struct kobject *, struct kobj_attribute *, const char *, size_t);
2227:	static struct rmap_item *scan_get_next_rmap_item(struct page **);
2840:	static ssize_t sleep_millisecs_show(struct kobject *, struct kobj_attribute *, char *);
2846:	static ssize_t sleep_millisecs_store(struct kobject *, struct kobj_attribute *, const char *, size_t);
3109:	static ssize_t stable_node_chains_prune_millisecs_show(struct kobject *, struct kobj_attribute *, char *);
3117:	static ssize_t stable_node_chains_prune_millisecs_store(struct kobject *, struct kobj_attribute *, const char *, size_t);
3101:	static ssize_t stable_node_chains_show(struct kobject *, struct kobj_attribute *, char *);
1357:	static struct page *stable_node_dup(struct stable_node **, struct stable_node **, struct rb_root *, bool);
3094:	static ssize_t stable_node_dups_show(struct kobject *, struct kobj_attribute *, char *);
1997:	static void stable_tree_append(struct rmap_item *, struct stable_node *, bool);
1806:	static struct stable_node *stable_tree_insert(struct page *);
1554:	static struct page *stable_tree_search(struct page *);
1204:	static int try_to_merge_one_page(struct vm_area_struct *, struct page *, struct page *);
1279:	static int try_to_merge_with_ksm_page(struct rmap_item *, struct page *, struct page *);
967:	static int unmerge_and_remove_all_rmap_items(void);
846:	static int unmerge_ksm_pages(struct vm_area_struct *, unsigned long, unsigned long);
1926:	static struct rmap_item *unstable_tree_search_insert(struct rmap_item *, struct page *, struct page **);
2993:	static ssize_t use_zero_pages_show(struct kobject *, struct kobj_attribute *, char *);
2998:	static ssize_t use_zero_pages_store(struct kobject *, struct kobj_attribute *, const char *, size_t);
2701:	static void wait_while_offlining(void);
1035:	static int write_protect_page(struct vm_area_struct *, struct page *, pte_t *);

File mm/list_lru.c:
590:	int __list_lru_init(struct list_lru *, bool, struct lock_class_key *, struct shrinker *);
115:	bool list_lru_add(struct list_lru *, struct list_head *);
190:	unsigned long list_lru_count_node(struct list_lru *, int);
174:	unsigned long list_lru_count_one(struct list_lru *, int, struct mem_cgroup *);
139:	bool list_lru_del(struct list_lru *, struct list_head *);
630:	void list_lru_destroy(struct list_lru *);
159:	void list_lru_isolate(struct list_lru_one *, struct list_head *);
166:	void list_lru_isolate_move(struct list_lru_one *, struct list_head *, struct list_head *);
288:	unsigned long list_lru_walk_node(struct list_lru *, int, list_lru_walk_cb, void *, unsigned long *);
258:	unsigned long list_lru_walk_one(struct list_lru *, int, struct mem_cgroup *, list_lru_walk_cb, void *, unsigned long *);
274:	unsigned long list_lru_walk_one_irq(struct list_lru *, int, struct mem_cgroup *, list_lru_walk_cb, void *, unsigned long *);
570:	void memcg_drain_all_list_lrus(int, struct mem_cgroup *);
510:	int memcg_update_all_list_lrus(int);
200:	static unsigned long __list_lru_walk_one(struct list_lru_node *, int, list_lru_walk_cb, void *, unsigned long *);
331:	static int __memcg_init_list_lru_node(struct list_lru_memcg *, int, int);
383:	static void kvfree_rcu_local(struct callback_head *);
531:	static void memcg_drain_list_lru_node(struct list_lru *, int, int, struct mem_cgroup *);
391:	static int memcg_update_list_lru_node(struct list_lru_node *, int, int);

File mm/maccess.c:
25:	long copy_from_kernel_nofault(void *, const void *, size_t);
9:	bool copy_from_kernel_nofault_allowed(const void *, size_t);
205:	long copy_from_user_nofault(void *, const void *, size_t);
51:	long copy_to_kernel_nofault(void *, const void *, size_t);
232:	long copy_to_user_nofault(void *, const void *, size_t);
65:	long strncpy_from_kernel_nofault(char *, const void *, long);
268:	long strncpy_from_user_nofault(char *, const void *, long);
309:	long strnlen_user_nofault(const void *, long);

File mm/madvise.c:
1161:	long __ia32_sys_madvise(const struct pt_regs *);
1166:	long __ia32_sys_process_madvise(const struct pt_regs *);
1161:	long __x64_sys_madvise(const struct pt_regs *);
1166:	long __x64_sys_process_madvise(const struct pt_regs *);
1063:	int do_madvise(struct mm_struct *, unsigned long, size_t, int);
1166:	static long __se_sys_process_madvise(long, long, long, long, long);
224:	static void force_shm_swapin_readahead(struct vm_area_struct *, unsigned long, unsigned long, struct address_space *);
67:	static long madvise_behavior(struct vm_area_struct *, struct vm_area_struct **, unsigned long, unsigned long, int);
497:	static long madvise_cold(struct vm_area_struct *, struct vm_area_struct **, unsigned long, unsigned long);
306:	static int madvise_cold_or_pageout_pte_range(pmd_t *, unsigned long, unsigned long, struct mm_walk *);
766:	static long madvise_dontneed_free(struct vm_area_struct *, struct vm_area_struct **, unsigned long, unsigned long, int);
568:	static int madvise_free_pte_range(pmd_t *, unsigned long, unsigned long, struct mm_walk *);
705:	static int madvise_free_single_vma(struct vm_area_struct *, unsigned long, unsigned long);
877:	static int madvise_inject_error(int, unsigned long, unsigned long);
546:	static long madvise_pageout(struct vm_area_struct *, struct vm_area_struct **, unsigned long, unsigned long);
828:	static long madvise_remove(struct vm_area_struct *, struct vm_area_struct **, unsigned long, unsigned long);
258:	static long madvise_willneed(struct vm_area_struct *, struct vm_area_struct **, unsigned long, unsigned long);
185:	static int swapin_walk_pmd_entry(pmd_t *, unsigned long, unsigned long, struct mm_walk *);

File mm/mapping_dirty_helpers.c:
323:	unsigned long clean_record_shared_mapping_range(struct address_space *, unsigned long, unsigned long, unsigned long, unsigned long *, unsigned long *, unsigned long *);
274:	unsigned long wp_shared_mapping_range(struct address_space *, unsigned long, unsigned long);
86:	static int clean_record_pte(pte_t *, unsigned long, unsigned long, struct mm_walk *);
123:	static int wp_clean_pmd_entry(pmd_t *, unsigned long, unsigned long, struct mm_walk *);
209:	static void wp_clean_post_vma(struct mm_walk *);
180:	static int wp_clean_pre_vma(unsigned long, unsigned long, struct mm_walk *);
153:	static int wp_clean_pud_entry(pud_t *, unsigned long, unsigned long, struct mm_walk *);
229:	static int wp_clean_test_walk(unsigned long, unsigned long, struct mm_walk *);
32:	static int wp_pte(pte_t *, unsigned long, unsigned long, struct mm_walk *);

File mm/memblock.c:
1594:	void __memblock_free_late(phys_addr_t, phys_addr_t);
1177:	void __next_mem_pfn_range(int *, int, unsigned long *, unsigned long *, int *);
1256:	void __next_mem_pfn_range_in_zone(u64 *, struct zone *, unsigned long *, unsigned long *);
998:	void __next_mem_range(u64 *, int, enum memblock_flags, struct memblock_type *, struct memblock_type *, phys_addr_t *, phys_addr_t *, int *);
1093:	void __next_mem_range_rev(u64 *, int, enum memblock_flags, struct memblock_type *, struct memblock_type *, phys_addr_t *, phys_addr_t *, int *);
682:	int memblock_add(phys_addr_t, phys_addr_t);
665:	int memblock_add_node(phys_addr_t, phys_addr_t, int);
1493:	void *memblock_alloc_exact_nid_raw(phys_addr_t, phys_addr_t, phys_addr_t, phys_addr_t, int);
1329:	phys_addr_t memblock_alloc_range_nid(phys_addr_t, phys_addr_t, phys_addr_t, phys_addr_t, int, bool);
1567:	void *memblock_alloc_try_nid(phys_addr_t, phys_addr_t, phys_addr_t, phys_addr_t, int);
1531:	void *memblock_alloc_try_nid_raw(phys_addr_t, phys_addr_t, phys_addr_t, phys_addr_t, int);
1893:	void memblock_allow_resize(void);
1679:	void memblock_cap_memory_range(phys_addr_t, phys_addr_t);
887:	int memblock_clear_hotplug(phys_addr_t, phys_addr_t);
925:	int memblock_clear_nomap(phys_addr_t, phys_addr_t);
361:	void memblock_discard(void);
1887:	void memblock_dump_all(void);
1631:	phys_addr_t memblock_end_of_DRAM(void);
1659:	void memblock_enforce_memory_limit(phys_addr_t);
318:	phys_addr_t memblock_find_in_range(phys_addr_t, phys_addr_t, phys_addr_t, phys_addr_t);
801:	int memblock_free(phys_addr_t, phys_addr_t);
1988:	unsigned long memblock_free_all(void);
1842:	phys_addr_t memblock_get_current_limit(void);
1751:	bool memblock_is_map_memory(phys_addr_t);
1746:	bool memblock_is_memory(phys_addr_t);
1785:	bool memblock_is_region_memory(phys_addr_t, phys_addr_t);
1807:	bool memblock_is_region_reserved(phys_addr_t, phys_addr_t);
1741:	bool memblock_is_reserved(phys_addr_t);
875:	int memblock_mark_hotplug(phys_addr_t, phys_addr_t);
937:	int memblock_mark_memmap(phys_addr_t, phys_addr_t);
899:	int memblock_mark_mirror(phys_addr_t, phys_addr_t);
913:	int memblock_mark_nomap(phys_addr_t, phys_addr_t);
1707:	void memblock_mem_limit_remove_map(phys_addr_t);
180:	bool memblock_overlaps_region(struct memblock_type *, phys_addr_t, phys_addr_t);
1395:	phys_addr_t memblock_phys_alloc_range(phys_addr_t, phys_addr_t, phys_addr_t, phys_addr_t);
1417:	phys_addr_t memblock_phys_alloc_try_nid(phys_addr_t, phys_addr_t, int);
1615:	phys_addr_t memblock_phys_mem_size(void);
783:	int memblock_remove(phys_addr_t, phys_addr_t);
812:	int memblock_reserve(phys_addr_t, phys_addr_t);
1620:	phys_addr_t memblock_reserved_size(void);
1760:	int memblock_search_pfn_nid(unsigned long, unsigned long *, unsigned long *);
1837:	void memblock_set_current_limit(phys_addr_t);
1220:	int memblock_set_node(phys_addr_t, phys_addr_t, struct memblock_type *, int);
1626:	phys_addr_t memblock_start_of_DRAM(void);
1812:	void memblock_trim_memory(phys_addr_t);
1970:	void reset_all_zones_managed_pages(void);
1962:	void reset_node_managed_pages(pg_data_t *);
1638:	static phys_addr_t __find_max_addr(phys_addr_t);
1898:	static int early_memblock(char *);
1937:	static unsigned long free_low_memory_core_early(void);
567:	static int memblock_add_range(struct memblock_type *, phys_addr_t, phys_addr_t, int, enum memblock_flags);
1443:	static void *memblock_alloc_internal(phys_addr_t, phys_addr_t, phys_addr_t, phys_addr_t, int, bool);
398:	static int memblock_double_array(struct memblock_type *, phys_addr_t, phys_addr_t);
1847:	static void memblock_dump(struct memblock_type *);
283:	static phys_addr_t memblock_find_in_range_node(phys_addr_t, phys_addr_t, phys_addr_t, phys_addr_t, int, enum memblock_flags);
533:	static void memblock_insert_region(struct memblock_type *, int, phys_addr_t, phys_addr_t, int, enum memblock_flags);
708:	static int memblock_isolate_range(struct memblock_type *, phys_addr_t, phys_addr_t, int *, int *);
496:	static void memblock_merge_regions(struct memblock_type *);
768:	static int memblock_remove_range(struct memblock_type *, phys_addr_t, phys_addr_t);
339:	static void memblock_remove_region(struct memblock_type *, unsigned long);
1723:	static int memblock_search(struct memblock_type *, phys_addr_t);
845:	static int memblock_setclr_flag(phys_addr_t, phys_addr_t, int, int);
942:	static bool should_skip_region(struct memblock_type *, struct memblock_region *, int, int);

File mm/memcontrol.c:
816:	void __count_memcg_events(struct mem_cgroup *, enum vm_event_item, unsigned long);
3046:	int __memcg_kmem_charge_page(struct page *, gfp_t, int);
3069:	void __memcg_kmem_uncharge_page(struct page *, int);
775:	void __mod_lruvec_slab_state(void *, enum node_stat_item, int);
764:	void __mod_lruvec_state(struct lruvec *, enum node_stat_item, int);
736:	void __mod_memcg_lruvec_state(struct lruvec *, enum node_stat_item, int);
701:	void __mod_memcg_state(struct mem_cgroup *, int, int);
2132:	void __unlock_page_memcg(struct mem_cgroup *);
922:	struct mem_cgroup *get_mem_cgroup_from_mm(struct mm_struct *);
956:	struct mem_cgroup *get_mem_cgroup_from_page(struct page *);
2909:	struct obj_cgroup *get_obj_cgroup_from_current(void);
1275:	struct lruvec *lock_page_lruvec(struct page *);
1290:	struct lruvec *lock_page_lruvec_irq(struct page *);
1305:	struct lruvec *lock_page_lruvec_irqsave(struct page *, unsigned long *);
2073:	struct mem_cgroup *lock_page_memcg(struct page *);
6867:	void mem_cgroup_calculate_protection(struct mem_cgroup *, struct mem_cgroup *);
6928:	int mem_cgroup_charge(struct page *, struct mm_struct *, gfp_t);
7251:	bool mem_cgroup_charge_skmem(struct mem_cgroup *, unsigned int);
418:	struct cgroup_subsys_state *mem_cgroup_css_from_page(struct page *);
4752:	void mem_cgroup_flush_foreign(struct bdi_writeback *);
683:	void mem_cgroup_flush_stats(void);
5363:	struct mem_cgroup *mem_cgroup_from_id(unsigned short);
2873:	struct mem_cgroup *mem_cgroup_from_obj(void *);
900:	struct mem_cgroup *mem_cgroup_from_task(struct task_struct *);
1633:	unsigned long mem_cgroup_get_max(struct mem_cgroup *);
7524:	long mem_cgroup_get_nr_swap_pages(struct mem_cgroup *);
2008:	struct mem_cgroup *mem_cgroup_get_oom_group(struct task_struct *, struct mem_cgroup *);
2523:	void mem_cgroup_handle_over_high(void);
1010:	struct mem_cgroup *mem_cgroup_iter(struct mem_cgroup *, struct mem_cgroup *, struct mem_cgroup_reclaim_cookie *);
1125:	void mem_cgroup_iter_break(struct mem_cgroup *, struct mem_cgroup *);
7171:	void mem_cgroup_migrate(struct page *, struct page *);
1943:	bool mem_cgroup_oom_synchronize(bool);
1234:	struct lruvec *mem_cgroup_page_lruvec(struct page *, struct pglist_data *);
1579:	void mem_cgroup_print_oom_context(struct mem_cgroup *, struct task_struct *);
2055:	void mem_cgroup_print_oom_group(struct mem_cgroup *);
1600:	void mem_cgroup_print_oom_meminfo(struct mem_cgroup *);
1182:	int mem_cgroup_scan_tasks(struct mem_cgroup *, int (*)(struct task_struct *, void *), void *);
1652:	unsigned long mem_cgroup_size(struct mem_cgroup *);
7214:	void mem_cgroup_sk_alloc(struct sock *);
7237:	void mem_cgroup_sk_free(struct sock *);
3322:	unsigned long mem_cgroup_soft_limit_reclaim(pg_data_t *, int, gfp_t, unsigned long *);
7537:	bool mem_cgroup_swap_full(struct page *);
7391:	void mem_cgroup_swapout(struct page *, swp_entry_t);
4699:	void mem_cgroup_track_foreign_dirty_slowpath(struct page *, struct bdi_writeback *);
7457:	int mem_cgroup_try_charge_swap(struct page *, swp_entry_t);
7129:	void mem_cgroup_uncharge(struct page *);
7152:	void mem_cgroup_uncharge_list(struct list_head *);
7285:	void mem_cgroup_uncharge_skmem(struct mem_cgroup *, unsigned int);
7503:	void mem_cgroup_uncharge_swap(swp_entry_t, unsigned int);
1331:	void mem_cgroup_update_lru_size(struct lruvec *, enum lru_list, int, int);
4602:	struct wb_domain *mem_cgroup_wb_domain(struct bdi_writeback *);
4630:	void mem_cgroup_wb_stats(struct bdi_writeback *, unsigned long *, unsigned long *, unsigned long *, unsigned long *);
2841:	int memcg_alloc_page_obj_cgroups(struct page *, struct kmem_cache *, gfp_t);
372:	void memcg_get_cache_ids(void);
3909:	bool memcg_low_priority_scan_tasks(int (*)(struct task_struct *, void *), void *);
3953:	void memcg_print_bad_task(void *, int);
377:	void memcg_put_cache_ids(void);
247:	struct vmpressure *memcg_to_vmpressure(struct mem_cgroup *);
799:	void mod_memcg_obj_state(void *, int, int);
3170:	int obj_cgroup_charge(struct obj_cgroup *, gfp_t, size_t);
3201:	void obj_cgroup_uncharge(struct obj_cgroup *, size_t);
443:	ino_t page_cgroup_ino(struct page *);
3211:	void split_page_memcg(struct page *, unsigned int);
3970:	int sysctl_memcg_qos_handler(struct ctl_table *, int, void *, size_t *, loff_t *);
2150:	void unlock_page_memcg(struct page *);
254:	struct cgroup_subsys_state *vmpressure_to_css(struct vmpressure *);
1134:	static void __invalidate_reclaim_iterators(struct mem_cgroup *, struct mem_cgroup *);
6175:	static void __mem_cgroup_clear_mc(void);
5414:	static void __mem_cgroup_free(struct mem_cgroup *);
481:	static void __mem_cgroup_insert_exceeded(struct mem_cgroup_per_node *, struct mem_cgroup_tree_per_node *, unsigned long);
608:	static struct mem_cgroup_per_node *__mem_cgroup_largest_soft_limit_node(struct mem_cgroup_tree_per_node *);
4231:	static void __mem_cgroup_threshold(struct mem_cgroup *, bool);
4328:	static int __mem_cgroup_usage_register_event(struct mem_cgroup *, struct eventfd_ctx *, const char *, enum res_type);
4420:	static void __mem_cgroup_usage_unregister_event(struct mem_cgroup *, struct eventfd_ctx *, enum res_type);
6564:	static void __memory_events_show(struct seq_file *, atomic_long_t *);
7297:	static int cgroup_memory(char *);
4293:	static int compare_thresholds(const void *, const void *);
2292:	static void drain_all_stock(struct mem_cgroup *);
2244:	static void drain_local_stock(struct work_struct *);
3102:	static void drain_obj_stock(struct memcg_stock_pcp *);
2226:	static void drain_stock(struct memcg_stock_pcp *);
689:	static void flush_memcg_stats_dwork(struct work_struct *);
6031:	static enum mc_target_type get_mctgt_type(struct vm_area_struct *, unsigned long, pte_t, union mc_target *);
6082:	static enum mc_target_type get_mctgt_type_thp(pmd_t, union mc_target *, unsigned long, struct vm_area_struct *);
2819:	static struct mem_cgroup *get_mem_cgroup_from_objcg(struct obj_cgroup *);
2367:	static void high_work_func(struct work_struct *);
5804:	static struct page *mc_handle_present_pte(struct vm_area_struct *, unsigned long, pte_t);
5825:	static struct page *mc_handle_swap_pte(pte_t, swp_entry_t *, struct vm_area_struct *);
5430:	static struct mem_cgroup *mem_cgroup_alloc(void);
6490:	static void mem_cgroup_bind(struct cgroup_subsys_state *);
6234:	static int mem_cgroup_can_attach(struct cgroup_taskset *);
6308:	static void mem_cgroup_cancel_attach(struct cgroup_taskset *);
841:	static void mem_cgroup_charge_statistics(struct mem_cgroup *, int, struct page *);
6215:	static void mem_cgroup_clear_mc(void);
6151:	static unsigned long mem_cgroup_count_precharge(struct mm_struct *);
6114:	static int mem_cgroup_count_precharge_pte_range(pmd_t *, unsigned long, unsigned long, struct mm_walk *);
5497:	static struct cgroup_subsys_state *mem_cgroup_css_alloc(struct cgroup_subsys_state *);
5630:	static void mem_cgroup_css_free(struct cgroup_subsys_state *);
5594:	static void mem_cgroup_css_offline(struct cgroup_subsys_state *);
5566:	static int mem_cgroup_css_online(struct cgroup_subsys_state *);
5623:	static void mem_cgroup_css_released(struct cgroup_subsys_state *);
5666:	static void mem_cgroup_css_reset(struct cgroup_subsys_state *);
5682:	static void mem_cgroup_css_rstat_flush(struct cgroup_subsys_state *, int);
5770:	static int mem_cgroup_do_precharge(unsigned long);
3439:	static ssize_t mem_cgroup_force_empty_write(struct kernfs_open_file *, char *, size_t, loff_t);
3450:	static u64 mem_cgroup_hierarchy_read(struct cgroup_subsys_state *, struct cftype *);
3456:	static int mem_cgroup_hierarchy_write(struct cgroup_subsys_state *, struct cftype *, u64);
5336:	static void mem_cgroup_id_get_many(struct mem_cgroup *, unsigned int);
7366:	static struct mem_cgroup *mem_cgroup_id_get_online(struct mem_cgroup *);
5342:	static void mem_cgroup_id_put_many(struct mem_cgroup *, unsigned int);
7330:	static int mem_cgroup_init(void);
1798:	static void mem_cgroup_mark_under_oom(struct mem_cgroup *);
5896:	static int mem_cgroup_move_account(struct page *, bool, struct mem_cgroup *, struct mem_cgroup *);
6431:	static void mem_cgroup_move_charge(void);
6314:	static int mem_cgroup_move_charge_pte_range(pmd_t *, unsigned long, unsigned long, struct mm_walk *);
3787:	static u64 mem_cgroup_move_charge_read(struct cgroup_subsys_state *, struct cftype *);
3794:	static int mem_cgroup_move_charge_write(struct cgroup_subsys_state *, struct cftype *, u64);
3243:	static int mem_cgroup_move_swap_account(swp_entry_t, struct mem_cgroup *, struct mem_cgroup *);
6465:	static void mem_cgroup_move_task(void);
3999:	static unsigned long mem_cgroup_node_nr_lru_pages(struct mem_cgroup *, int, unsigned int, bool);
1867:	static enum oom_status mem_cgroup_oom(struct mem_cgroup *, gfp_t, int);
4556:	static int mem_cgroup_oom_control_read(struct seq_file *, void *);
4567:	static int mem_cgroup_oom_control_write(struct cgroup_subsys_state *, struct cftype *, u64);
4320:	static void mem_cgroup_oom_notify(struct mem_cgroup *);
4517:	static int mem_cgroup_oom_register_event(struct mem_cgroup *, struct eventfd_ctx *, const char *);
1748:	static bool mem_cgroup_oom_trylock(struct mem_cgroup *);
1787:	static void mem_cgroup_oom_unlock(struct mem_cgroup *);
4539:	static void mem_cgroup_oom_unregister_event(struct mem_cgroup *, struct eventfd_ctx *);
1657:	static bool mem_cgroup_out_of_memory(struct mem_cgroup *, gfp_t, int);
3513:	static u64 mem_cgroup_read_u64(struct cgroup_subsys_state *, struct cftype *);
3750:	static ssize_t mem_cgroup_reset(struct kernfs_open_file *, char *, size_t, loff_t);
3268:	static int mem_cgroup_resize_max(struct mem_cgroup *, unsigned long, bool);
1686:	static int mem_cgroup_soft_reclaim(struct mem_cgroup *, pg_data_t *, gfp_t, unsigned long *);
7702:	static int mem_cgroup_swap_init(void);
4207:	static u64 mem_cgroup_swappiness_read(struct cgroup_subsys_state *, struct cftype *);
4215:	static int mem_cgroup_swappiness_write(struct cgroup_subsys_state *, struct cftype *, u64);
1396:	static bool mem_cgroup_under_move(struct mem_cgroup *);
1808:	static void mem_cgroup_unmark_under_oom(struct mem_cgroup *);
556:	static void mem_cgroup_update_tree(struct mem_cgroup *, struct page *);
4408:	static int mem_cgroup_usage_register_event(struct mem_cgroup *, struct eventfd_ctx *, const char *);
4505:	static void mem_cgroup_usage_unregister_event(struct mem_cgroup *, struct eventfd_ctx *);
3706:	static ssize_t mem_cgroup_write(struct kernfs_open_file *, char *, size_t, loff_t);
885:	static void memcg_check_events(struct mem_cgroup *, struct page *);
4870:	static void memcg_event_ptable_queue_proc(struct file *, wait_queue_head_t *, poll_table *);
4814:	static void memcg_event_remove(struct work_struct *);
4837:	static int memcg_event_wake(wait_queue_entry_t *, unsigned int, int, void *);
2332:	static int memcg_hotplug_cpu_dead(unsigned int);
7315:	static int memcg_kswapd(char *);
4037:	static int memcg_numa_stat_show(struct seq_file *, void *);
3594:	static void memcg_offline_kmem(struct mem_cgroup *);
3557:	static int memcg_online_kmem(struct mem_cgroup *);
1830:	static int memcg_oom_wake_function(wait_queue_entry_t *, unsigned int, int, void *);
3854:	static s64 memcg_qos_read(struct cgroup_subsys_state *, struct cftype *);
3863:	static int memcg_qos_write(struct cgroup_subsys_state *, struct cftype *, s64);
328:	static void memcg_reparent_objcgs(struct mem_cgroup *, struct mem_cgroup *);
4117:	static int memcg_stat_show(struct seq_file *, void *);
4597:	static void memcg_wb_domain_size_changed(struct mem_cgroup *);
4888:	static ssize_t memcg_write_event_control(struct kernfs_open_file *, char *, size_t, loff_t);
6503:	static u64 memory_current_read(struct cgroup_subsys_state *, struct cftype *);
6582:	static int memory_events_local_show(struct seq_file *, void *);
6574:	static int memory_events_show(struct seq_file *, void *);
5075:	static int memory_high_show(struct seq_file *, void *);
5081:	static ssize_t memory_high_write(struct kernfs_open_file *, char *, size_t, loff_t);
5052:	static int memory_low_show(struct seq_file *, void *);
5058:	static ssize_t memory_low_write(struct kernfs_open_file *, char *, size_t, loff_t);
6511:	static int memory_max_show(struct seq_file *, void *);
6517:	static ssize_t memory_max_write(struct kernfs_open_file *, char *, size_t, loff_t);
5029:	static int memory_min_show(struct seq_file *, void *);
5035:	static ssize_t memory_min_write(struct kernfs_open_file *, char *, size_t, loff_t);
6604:	static int memory_numa_stat_show(struct seq_file *, void *);
6634:	static int memory_oom_group_show(struct seq_file *, void *);
6643:	static ssize_t memory_oom_group_write(struct kernfs_open_file *, char *, size_t, loff_t);
1498:	static char *memory_stat_format(struct mem_cgroup *);
6590:	static int memory_stat_show(struct seq_file *, void *);
1481:	static int memory_stats_init(void);
4414:	static int memsw_cgroup_usage_register_event(struct mem_cgroup *, struct eventfd_ctx *, const char *);
4511:	static void memsw_cgroup_usage_unregister_event(struct mem_cgroup *, struct eventfd_ctx *);
3004:	static int obj_cgroup_charge_pages(struct obj_cgroup *, gfp_t, unsigned int);
265:	static void obj_cgroup_release(struct percpu_ref *);
2982:	static void obj_cgroup_uncharge_pages(struct obj_cgroup *, unsigned int);
2342:	static unsigned long reclaim_high(struct mem_cgroup *, unsigned int, gfp_t);
3148:	static void refill_obj_stock(struct obj_cgroup *, unsigned int);
2267:	static void refill_stock(struct mem_cgroup *, unsigned int);
7563:	static int setup_swap_account(char *);
7573:	static u64 swap_current_read(struct cgroup_subsys_state *, struct cftype *);
7627:	static int swap_events_show(struct seq_file *, void *);
2467:	static u64 swap_find_max_overage(struct mem_cgroup *);
7581:	static int swap_high_show(struct seq_file *, void *);
7587:	static ssize_t swap_high_write(struct kernfs_open_file *, char *, size_t, loff_t);
7604:	static int swap_max_show(struct seq_file *, void *);
7610:	static ssize_t swap_max_write(struct kernfs_open_file *, char *, size_t, loff_t);
2610:	static int try_charge(struct mem_cgroup *, gfp_t, unsigned int);
7016:	static void uncharge_batch(const struct uncharge_gather *);
7039:	static void uncharge_page(struct page *, struct uncharge_gather *);

File mm/memfd.c:
250:	long __ia32_sys_memfd_create(const struct pt_regs *);
250:	long __x64_sys_memfd_create(const struct pt_regs *);
221:	long memfd_fcntl(struct file *, unsigned int, unsigned long);
250:	static long __se_sys_memfd_create(long, long);
120:	static unsigned int *memfd_file_seals_ptr(struct file *);
31:	static void memfd_tag_pins(struct xa_state *);
66:	static int memfd_wait_for_pins(struct address_space *);

File mm/memory-failure.c:
177:	int hwpoison_filter(struct page *);
1321:	int memory_failure(unsigned long, int);
1527:	void memory_failure_queue(unsigned long, int);
1573:	void memory_failure_queue_kick(int);
269:	void shake_page(struct page *, int);
1922:	int soft_offline_page(unsigned long, int);
1616:	int unpoison_memory(unsigned long);
1702:	static int __get_any_page(struct page *, unsigned long, int);
1802:	static int __soft_offline_page(struct page *);
913:	static void action_result(unsigned long, enum mf_action_page_type, enum mf_result);
335:	static void add_to_kill(struct task_struct *, struct page *, struct vm_area_struct *, struct list_head *);
472:	static void collect_procs_anon(struct page *, struct list_head *, int);
508:	static void collect_procs_file(struct page *, struct list_head *, int);
595:	static int delete_from_lru_cache(struct page *);
292:	static unsigned long dev_pagemap_mapping_shift(struct page *, struct vm_area_struct *);
1735:	static int get_any_page(struct page *, unsigned long, int);
955:	static int get_hwpoison_page(struct page *);
989:	static bool hwpoison_user_mappings(struct page *, unsigned long, int, struct page **, struct page **);
1108:	static int identify_page_state(unsigned long, struct page *, unsigned long);
1765:	static bool isolate_page(struct page *, struct list_head *);
384:	static void kill_procs(struct list_head *, int, bool, unsigned long, int);
810:	static int me_huge_page(struct page *, unsigned long);
658:	static int me_kernel(struct page *, unsigned long);
675:	static int me_pagecache_clean(struct page *, unsigned long);
716:	static int me_pagecache_dirty(struct page *, unsigned long);
794:	static int me_swapcache_clean(struct page *, unsigned long);
782:	static int me_swapcache_dirty(struct page *, unsigned long);
666:	static int me_unknown(struct page *, unsigned long);
1217:	static int memory_failure_dev_pagemap(unsigned long, int, struct dev_pagemap *);
1150:	static int memory_failure_hugetlb(unsigned long, int);
1582:	static int memory_failure_init(void);
1548:	static void memory_failure_work_func(struct work_struct *);
68:	static bool page_handle_poison(struct page *, bool, bool);
1894:	static void put_ref_page(struct page *);
620:	static int truncate_error_page(struct page *, unsigned long, struct address_space *);
1131:	static int try_to_split_thp_page(struct page *, const char *);

File mm/memory.c:
5000:	int __access_remote_vm(struct task_struct *, struct mm_struct *, unsigned long, void *, int, unsigned int);
1628:	pte_t *__get_locked_pte(struct mm_struct *, unsigned long, spinlock_t **);
4747:	int __p4d_alloc(struct mm_struct *, pgd_t *, unsigned long);
4794:	int __pmd_alloc(struct mm_struct *, pud_t *, unsigned long);
425:	int __pte_alloc(struct mm_struct *, pmd_t *);
459:	int __pte_alloc_kernel(pmd_t *);
4770:	int __pud_alloc(struct mm_struct *, p4d_t *, unsigned long);
5086:	int access_process_vm(struct task_struct *, unsigned long, void *, int, unsigned int);
5075:	int access_remote_vm(struct mm_struct *, unsigned long, void *, int, unsigned int);
3898:	vm_fault_t alloc_set_pte(struct vm_fault *, struct page *);
2600:	int apply_to_existing_page_range(struct mm_struct *, unsigned long, unsigned long, pte_fn_t, void *);
2586:	int apply_to_page_range(struct mm_struct *, unsigned long, unsigned long, pte_fn_t, void *);
5233:	void clear_huge_page(struct page *, unsigned long, unsigned int);
5301:	long copy_huge_page_from_user(struct page *, const void *, unsigned int, bool);
1128:	int copy_page_range(struct vm_area_struct *, struct vm_area_struct *);
5280:	void copy_user_huge_page(struct page *, struct page *, unsigned long, struct vm_area_struct *, unsigned int);
3334:	vm_fault_t do_swap_page(struct vm_fault *);
3961:	vm_fault_t finish_fault(struct vm_fault *);
3035:	vm_fault_t finish_mkwrite_fault(struct vm_fault *);
4814:	int follow_invalidate_pte(struct mm_struct *, unsigned long, struct mmu_notifier_range *, pte_t **, pmd_t **, spinlock_t **);
4922:	int follow_pfn(struct vm_area_struct *, unsigned long, unsigned long *);
4942:	int follow_phys(struct vm_area_struct *, unsigned long, unsigned int, unsigned long *, resource_size_t *);
4902:	int follow_pte(struct mm_struct *, unsigned long, pte_t **, spinlock_t **);
328:	void free_pgd_range(struct mmu_gather *, unsigned long, unsigned long, unsigned long, unsigned long);
390:	void free_pgtables(struct mmu_gather *, struct vm_area_struct *, unsigned long, unsigned long);
4970:	int generic_access_phys(struct vm_area_struct *, unsigned long, void *, int, int);
4694:	vm_fault_t handle_mm_fault(struct vm_area_struct *, unsigned long, unsigned int, struct pt_regs *);
159:	void mm_trace_rss_stat(struct mm_struct *, int, long);
5107:	void print_vma_addr(char *, unsigned long);
2281:	int remap_pfn_range(struct vm_area_struct *, unsigned long, unsigned long, unsigned long, pgprot_t);
166:	void sync_mm_rss(struct mm_struct *);
3243:	void unmap_mapping_page(struct page *);
3274:	void unmap_mapping_pages(struct address_space *, unsigned long, unsigned long, bool);
3308:	void unmap_mapping_range(struct address_space *, const loff_t, const loff_t, int);
1436:	void unmap_page_range(struct mmu_gather *, struct vm_area_struct *, unsigned long, unsigned long, struct zap_details *);
1518:	void unmap_vmas(struct mmu_gather *, struct vm_area_struct *, unsigned long, unsigned long);
1833:	int vm_insert_page(struct vm_area_struct *, unsigned long, struct page *);
1774:	int vm_insert_pages(struct vm_area_struct *, unsigned long, struct page **, unsigned long *);
2358:	int vm_iomap_memory(struct vm_area_struct *, phys_addr_t, unsigned long);
1903:	int vm_map_pages(struct vm_area_struct *, struct page **, unsigned long);
1923:	int vm_map_pages_zero(struct vm_area_struct *, struct page **, unsigned long);
594:	struct page *vm_normal_page(struct vm_area_struct *, unsigned long, pte_t);
650:	struct page *vm_normal_page_pmd(struct vm_area_struct *, unsigned long, pmd_t);
2152:	vm_fault_t vmf_insert_mixed(struct vm_area_struct *, unsigned long, pfn_t);
2164:	vm_fault_t vmf_insert_mixed_mkwrite(struct vm_area_struct *, unsigned long, pfn_t);
2145:	vm_fault_t vmf_insert_mixed_prot(struct vm_area_struct *, unsigned long, pfn_t, pgprot_t);
2052:	vm_fault_t vmf_insert_pfn(struct vm_area_struct *, unsigned long, unsigned long);
2004:	vm_fault_t vmf_insert_pfn_prot(struct vm_area_struct *, unsigned long, unsigned long, pgprot_t);
1540:	void zap_page_range(struct vm_area_struct *, unsigned long, unsigned long);
1595:	void zap_vma_ptes(struct vm_area_struct *, unsigned long, unsigned long);
2545:	static int __apply_to_page_range(struct mm_struct *, unsigned long, unsigned long, pte_fn_t, void *, bool);
3696:	static vm_fault_t __do_fault(struct vm_fault *);
4538:	static vm_fault_t __handle_mm_fault(struct vm_area_struct *, unsigned long, unsigned int);
2073:	static vm_fault_t __vm_insert_mixed(struct vm_area_struct *, unsigned long, pfn_t, pgprot_t, bool);
1860:	static int __vm_map_pages(struct vm_area_struct *, struct page **, unsigned long, unsigned long);
179:	static void add_mm_counter_fast(struct mm_struct *, int, int);
2509:	static int apply_to_p4d_range(struct mm_struct *, pgd_t *, unsigned long, unsigned long, pte_fn_t, void *, bool, pgtbl_mod_mask *);
2435:	static int apply_to_pmd_range(struct mm_struct *, pud_t *, unsigned long, unsigned long, pte_fn_t, void *, bool, pgtbl_mod_mask *);
2392:	static int apply_to_pte_range(struct mm_struct *, pmd_t *, unsigned long, unsigned long, pte_fn_t, void *, bool, pgtbl_mod_mask *);
2473:	static int apply_to_pud_range(struct mm_struct *, p4d_t *, unsigned long, unsigned long, pte_fn_t, void *, bool, pgtbl_mod_mask *);
5211:	static void clear_gigantic_page(struct page *, unsigned int, unsigned long);
5226:	static void clear_subpage(int, void *, unsigned long);
698:	static unsigned long copy_nonpresent_pte(struct mm_struct *, struct mm_struct *, pte_t *, pte_t *, struct vm_area_struct *, int *, unsigned long, struct vm_area_struct *);
923:	static int copy_pte_range(struct vm_area_struct *, struct vm_area_struct *, pmd_t *, pmd_t *, unsigned long, unsigned long);
5272:	static void copy_subpage(int, void *, unsigned long);
5247:	static void copy_user_gigantic_page(struct page *, struct page *, unsigned int, struct vm_area_struct *, unsigned long);
137:	static int disable_randmaps(char *);
3580:	static vm_fault_t do_anonymous_page(struct vm_fault *);
4128:	static vm_fault_t do_cow_fault(struct vm_fault *);
4209:	static vm_fault_t do_fault(struct vm_fault *);
4046:	static vm_fault_t do_fault_around(struct vm_fault *);
4274:	static vm_fault_t do_numa_page(struct vm_fault *);
2746:	static vm_fault_t do_page_mkwrite(struct vm_fault *);
4101:	static vm_fault_t do_read_fault(struct vm_fault *);
3818:	static vm_fault_t do_set_pmd(struct vm_fault *, struct page *);
4166:	static vm_fault_t do_shared_fault(struct vm_fault *);
3127:	static vm_fault_t do_wp_page(struct vm_fault *);
4010:	static int fault_around_bytes_fops_open(struct inode *, struct file *);
3990:	static int fault_around_bytes_get(void *, u64 *);
4000:	static int fault_around_bytes_set(void *, u64);
4013:	static int fault_around_debugfs(void);
2780:	static vm_fault_t fault_dirty_shared_page(struct vm_fault *);
4441:	static vm_fault_t handle_pte_fault(struct vm_fault *);
152:	static int init_zero_pfn(void);
1666:	static int insert_page(unsigned long, struct page *, pgprot_t, struct vm_area_struct *, struct vm_area_struct *);
1930:	static vm_fault_t insert_pfn(struct vm_area_struct *, unsigned long, pfn_t, pgprot_t, bool);
3750:	static int pmd_devmap_trans_unstable(pmd_t *);
501:	static void print_bad_pte(struct vm_area_struct *, unsigned long, pte_t, struct page *);
3755:	static vm_fault_t pte_alloc_one_map(struct vm_fault *);
2176:	static int remap_pte_range(struct mm_struct *, pmd_t *, unsigned long, unsigned long, unsigned long, pgprot_t);
1457:	static void unmap_single_vma(struct mmu_gather *, struct vm_area_struct *, unsigned long, unsigned long, struct zap_details *);
1606:	static pmd_t *walk_to_pmd(struct mm_struct *, unsigned long);
2872:	static vm_fault_t wp_page_copy(struct vm_fault *);
3075:	static vm_fault_t wp_page_shared(struct vm_fault *);
3057:	static vm_fault_t wp_pfn_shared(struct vm_fault *);
1567:	static void zap_page_range_single(struct vm_area_struct *, unsigned long, unsigned long, struct zap_details *);
1207:	static unsigned long zap_pte_range(struct mmu_gather *, struct vm_area_struct *, pmd_t *, unsigned long, unsigned long, struct zap_details *);

File mm/memory_hotplug.c:
993:	int __add_memory(int, u64, u64, mhp_t);
194:	int __add_pages(int, unsigned long, unsigned long, struct mhp_params *);
1654:	void __remove_memory(int, u64, u64);
417:	void __remove_pages(unsigned long, unsigned long, struct vmem_altmap *);
1008:	int add_memory(int, u64, u64, mhp_t);
1041:	int add_memory_driver_managed(int, u64, u64, const char *, mhp_t);
907:	int add_memory_resource(int, struct resource *, mhp_t);
1168:	int do_migrate_range(unsigned long, unsigned long);
477:	void generic_online_page(struct page *, unsigned int);
58:	void get_online_mems(void);
87:	void mem_hotplug_begin(void);
93:	void mem_hotplug_done(void);
576:	void move_pfn_range_to_zone(struct zone *, unsigned long, unsigned long, struct vmem_altmap *, int);
1687:	int offline_and_remove_memory(int, u64, u64);
1344:	int offline_pages(unsigned long, unsigned long);
665:	int online_pages(unsigned long, unsigned long, int, int);
63:	void put_online_mems(void);
1669:	int remove_memory(int, u64, u64);
355:	void remove_pfn_range_from_zone(struct zone *, unsigned long, unsigned long);
458:	int restore_online_page_callback(online_page_callback_t);
439:	int set_online_page_callback(online_page_callback_t);
1075:	struct zone *test_pages_in_a_zone(unsigned long, unsigned long);
1569:	void try_offline_node(int);
872:	int try_online_node(int);
653:	struct zone *zone_for_pfn_range(int, int, unsigned long, unsigned long);
845:	static int __try_online_node(int, bool);
172:	static int check_hotplug_memory_addressable(unsigned long, unsigned long);
882:	static int check_hotplug_memory_range(u64, u64);
1515:	static int check_memblock_offlined_cb(struct memory_block *, void *);
1548:	static int check_no_memblock_for_node_cb(struct memory_block *, void *);
1261:	static int cmdline_parse_movable_node(char *);
1335:	static int count_system_ram_pages_cb(unsigned long, unsigned long, void *);
260:	static unsigned long find_biggest_section_pfn(int, struct zone *, unsigned long, unsigned long);
239:	static unsigned long find_smallest_section_pfn(int, struct zone *, unsigned long, unsigned long);
769:	static pg_data_t *hotadd_new_pgdat(int);
895:	static int online_memory_block(struct memory_block *, void *);
102:	static struct resource *register_memory_resource(u64, u64, const char *);
1121:	static int scan_movable_pages(unsigned long, unsigned long, unsigned long *);
76:	static int setup_memhp_default_state(char *);
284:	static void shrink_zone_span(struct zone *, unsigned long, unsigned long);
1603:	static int try_remove_memory(int, u64, u64);

File mm/mempolicy.c:
1822:	struct mempolicy *__get_vma_policy(struct vm_area_struct *, unsigned long);
1686:	long __ia32_compat_sys_get_mempolicy(const struct pt_regs *);
1737:	long __ia32_compat_sys_mbind(const struct pt_regs *);
1759:	long __ia32_compat_sys_migrate_pages(const struct pt_regs *);
1716:	long __ia32_compat_sys_set_mempolicy(const struct pt_regs *);
1677:	long __ia32_sys_get_mempolicy(const struct pt_regs *);
1518:	long __ia32_sys_mbind(const struct pt_regs *);
1639:	long __ia32_sys_migrate_pages(const struct pt_regs *);
1545:	long __ia32_sys_set_mempolicy(const struct pt_regs *);
2343:	struct mempolicy *__mpol_dup(struct mempolicy *);
2367:	bool __mpol_equal(struct mempolicy *, struct mempolicy *);
352:	void __mpol_put(struct mempolicy *);
1677:	long __x64_sys_get_mempolicy(const struct pt_regs *);
1518:	long __x64_sys_mbind(const struct pt_regs *);
1639:	long __x64_sys_migrate_pages(const struct pt_regs *);
1545:	long __x64_sys_set_mempolicy(const struct pt_regs *);
2298:	struct page *alloc_pages(gfp_t, unsigned int);
2216:	struct page *alloc_pages_vma(gfp_t, int, struct vm_area_struct *, unsigned long, int, bool);
691:	unsigned long change_prot_numa(struct vm_area_struct *, unsigned long, unsigned long);
1153:	int do_migrate_pages(struct mm_struct *, const nodemask_t *, const nodemask_t *, int);
156:	struct mempolicy *get_task_policy(struct task_struct *);
2069:	int huge_node(struct vm_area_struct *, unsigned long, gfp_t, struct mempolicy **, nodemask_t **);
2104:	bool init_nodemask_of_mempolicy(nodemask_t *);
2147:	bool mempolicy_nodemask_intersects(struct task_struct *, const nodemask_t *);
1968:	unsigned int mempolicy_slab_node(void);
2761:	void mpol_free_shared_policy(struct shared_policy *);
2502:	int mpol_misplaced(struct page *, struct vm_area_struct *, unsigned long);
2917:	int mpol_parse_str(char *, struct mempolicy **);
2574:	void mpol_put_task_policy(struct task_struct *);
443:	void mpol_rebind_mm(struct mm_struct *, nodemask_t *);
432:	void mpol_rebind_task(struct task_struct *, const nodemask_t *);
2736:	int mpol_set_shared_policy(struct shared_policy *, struct vm_area_struct *, struct mempolicy *);
2697:	void mpol_shared_policy_init(struct shared_policy *, struct mempolicy *);
2465:	struct mempolicy *mpol_shared_policy_lookup(struct shared_policy *, unsigned long);
3049:	void mpol_to_str(char *, int, struct mempolicy *);
2884:	void numa_default_policy(void);
136:	int numa_map_to_online_node(int);
2826:	void numa_policy_init(void);
1916:	nodemask_t *policy_nodemask(struct mempolicy *, gfp_t);
2321:	int vma_dup_policy(struct vm_area_struct *, struct vm_area_struct *);
1794:	bool vma_migratable(struct vm_area_struct *);
1870:	bool vma_policy_mof(struct vm_area_struct *);
1686:	static long __se_compat_sys_get_mempolicy(long, long, long, long, long);
1737:	static long __se_compat_sys_mbind(long, long, long, long, long, long);
1759:	static long __se_compat_sys_migrate_pages(long, long, long, long);
1716:	static long __se_compat_sys_set_mempolicy(long, long, long);
2183:	static struct page *alloc_page_interleave(gfp_t, unsigned int, unsigned int);
1480:	static int copy_nodes_to_user(unsigned long *, unsigned long, nodemask_t *);
982:	static long do_get_mempolicy(int *, nodemask_t *, unsigned long, unsigned long);
1311:	static long do_mbind(unsigned long, unsigned long, unsigned short, unsigned short, nodemask_t *, unsigned long);
905:	static long do_set_mempolicy(unsigned short, unsigned short, nodemask_t *);
1419:	static int get_nodes(nodemask_t *, const unsigned long *, unsigned long);
1648:	static int kernel_get_mempolicy(int *, unsigned long *, unsigned long, unsigned long, unsigned long);
1496:	static long kernel_mbind(unsigned long, unsigned long, unsigned long, const unsigned long *, unsigned long, unsigned int);
1551:	static int kernel_migrate_pages(pid_t, unsigned long, const unsigned long *, const unsigned long *);
1526:	static long kernel_set_mempolicy(int, const unsigned long *, unsigned long);
965:	static int lookup_node(struct mm_struct *, unsigned long);
841:	static int mbind_range(struct mm_struct *, unsigned long, unsigned long, struct mempolicy *);
1082:	static int migrate_page_add(struct page *, struct list_head *, unsigned long);
1114:	static int migrate_to_node(struct mm_struct *, int, int, int);
307:	static struct mempolicy *mpol_new(unsigned short, unsigned short, nodemask_t *);
229:	static int mpol_new_interleave(struct mempolicy *, const nodemask_t *);
237:	static int mpol_new_preferred(struct mempolicy *, const nodemask_t *);
359:	static void mpol_rebind_default(struct mempolicy *, const nodemask_t *);
363:	static void mpol_rebind_nodemask(struct mempolicy *, const nodemask_t *);
414:	static void mpol_rebind_policy(struct mempolicy *, const nodemask_t *);
383:	static void mpol_rebind_preferred(struct mempolicy *, const nodemask_t *);
185:	static void mpol_relative_nodemask(nodemask_t *, const nodemask_t *, const nodemask_t *);
265:	static int mpol_set_nodemask(struct mempolicy *, const nodemask_t *, struct nodemask_scratch *);
1259:	static struct page *new_page(struct page *, unsigned long);
2015:	static unsigned int offset_il_node(struct mempolicy *, unsigned long);
1929:	static int policy_node(gfp_t, struct mempolicy *, int);
622:	static int queue_pages_hugetlb(pte_t *, unsigned long, unsigned long, unsigned long, struct mm_walk *);
508:	static int queue_pages_pmd(pmd_t *, spinlock_t *, unsigned long, struct mm_walk *, unsigned long);
558:	static int queue_pages_pte_range(pmd_t *, unsigned long, unsigned long, struct mm_walk *);
710:	static int queue_pages_test_walk(unsigned long, unsigned long, struct mm_walk *);
2799:	static int setup_numabalancing(char *);
2622:	static int shared_policy_replace(struct shared_policy *, unsigned long, unsigned long, struct sp_node *);
2585:	static void sp_delete(struct shared_policy *, struct sp_node *);
2441:	static void sp_insert(struct shared_policy *, struct sp_node *);
2408:	static struct sp_node *sp_lookup(unsigned long, unsigned long, struct shared_policy *, struct shared_policy *);
808:	static int vma_replace_policy(struct vm_area_struct *, struct mempolicy *);

File mm/mempool.c:
373:	void *mempool_alloc(mempool_t *, gfp_t);
543:	void *mempool_alloc_pages(gfp_t, void *);
507:	void *mempool_alloc_slab(gfp_t, void *);
251:	mempool_t *mempool_create(int, mempool_alloc_t *, mempool_free_t *, void *);
259:	mempool_t *mempool_create_node(int, mempool_alloc_t *, mempool_free_t *, void *, gfp_t, int);
168:	void mempool_destroy(mempool_t *);
149:	void mempool_exit(mempool_t *);
450:	void mempool_free(void *, mempool_t *);
550:	void mempool_free_pages(void *, void *);
515:	void mempool_free_slab(void *, void *);
226:	int mempool_init(mempool_t *, int, mempool_alloc_t *, mempool_free_t *, void *);
178:	int mempool_init_node(mempool_t *, int, mempool_alloc_t *, mempool_free_t *, void *, gfp_t, int);
533:	void mempool_kfree(void *, void *);
526:	void *mempool_kmalloc(gfp_t, void *);
297:	int mempool_resize(mempool_t *, int);

File mm/memremap.c:
425:	void *devm_memremap_pages(struct device *, struct dev_pagemap *);
442:	void devm_memunmap_pages(struct device *, struct dev_pagemap *);
495:	void free_devmap_managed_page(struct page *);
469:	struct dev_pagemap *get_dev_pagemap(unsigned long, struct dev_pagemap *);
33:	unsigned long memremap_compat_align(void);
314:	void *memremap_pages(struct dev_pagemap *, int);
168:	void memunmap_pages(struct dev_pagemap *);
83:	bool pgmap_pfn_valid(struct dev_pagemap *, unsigned long);
456:	void vmem_altmap_free(struct vmem_altmap *, unsigned long);
448:	unsigned long vmem_altmap_offset(struct vmem_altmap *);
192:	static void dev_pagemap_percpu_release(struct percpu_ref *);
187:	static void devm_memremap_pages_release(void *);
200:	static int pagemap_range(struct dev_pagemap *, struct mhp_params *, int, int);
139:	static void pageunmap_range(struct dev_pagemap *, int);

File mm/migrate.c:
1960:	long __ia32_compat_sys_move_pages(const struct pt_regs *);
1951:	long __ia32_sys_move_pages(const struct pt_regs *);
312:	void __migration_entry_wait(struct mm_struct *, pte_t *, spinlock_t *);
1951:	long __x64_sys_move_pages(const struct pt_regs *);
1539:	struct page *alloc_migration_target(struct page *, unsigned long);
842:	int buffer_migrate_page(struct address_space *, struct page *, struct page *, enum migrate_mode);
855:	int buffer_migrate_page_norefs(struct address_space *, struct page *, struct page *, enum migrate_mode);
86:	int isolate_movable_page(struct page *, isolate_mode_t);
525:	int migrate_huge_page_move_mapping(struct address_space *, struct page *, struct page *);
2072:	int migrate_misplaced_page(struct page *, struct vm_area_struct *, int);
2127:	int migrate_misplaced_transhuge_page(struct mm_struct *, struct vm_area_struct *, pmd_t *, pmd_t, unsigned long, struct page *, int);
698:	int migrate_page(struct address_space *, struct page *, struct page *, enum migrate_mode);
677:	void migrate_page_copy(struct page *, struct page *);
403:	int migrate_page_move_mapping(struct address_space *, struct page *, struct page *, int);
604:	void migrate_page_states(struct page *, struct page *);
1415:	int migrate_pages(struct list_head *, new_page_t *, free_page_t *, unsigned long, enum migrate_mode, int);
65:	int migrate_prep(void);
79:	int migrate_prep_local(void);
3073:	void migrate_vma_finalize(struct migrate_vma *);
2987:	void migrate_vma_pages(struct migrate_vma *);
2799:	int migrate_vma_setup(struct migrate_vma *);
345:	void migration_entry_wait(struct mm_struct *, pmd_t *, unsigned long);
353:	void migration_entry_wait_huge(struct vm_area_struct *, struct mm_struct *, pte_t *);
361:	void pmd_migration_entry_wait(struct mm_struct *, pmd_t *);
2061:	bool pmd_trans_migrating(pmd_t);
148:	void putback_movable_page(struct page *);
169:	void putback_movable_pages(struct list_head *);
294:	void remove_migration_ptes(struct page *, struct page *, bool);
758:	static int __buffer_migrate_page(struct address_space *, struct page *, struct page *, enum migrate_mode, bool);
562:	static void __copy_gigantic_page(struct page *, struct page *, int);
1020:	static int __unmap_and_move(struct page *, struct page *, int, enum migrate_mode);
1620:	static int add_page_for_migration(struct mm_struct *, unsigned long, int, struct list_head *, bool);
2008:	static struct page *alloc_misplaced_dst_page(struct page *, unsigned long);
579:	static void copy_huge_page(struct page *, struct page *);
1715:	static int do_pages_move(struct mm_struct *, nodemask_t, unsigned long, const void **, const int *, int *, int);
1840:	static int do_pages_stat(struct mm_struct *, unsigned long, const void **, int *);
1801:	static void do_pages_stat_array(struct mm_struct *, unsigned long, const void **, int *);
380:	static int expected_page_refs(struct address_space *, struct page *);
1870:	static struct mm_struct *find_mm_struct(pid_t, nodemask_t *);
1921:	static int kernel_move_pages(pid_t, unsigned long, const void **, const int *, int *, int);
2524:	static bool migrate_vma_check_page(struct page *);
2495:	static void migrate_vma_collect(struct migrate_vma *);
2259:	static int migrate_vma_collect_hole(unsigned long, unsigned long, int, struct mm_walk *);
2302:	static int migrate_vma_collect_pmd(pmd_t *, unsigned long, unsigned long, struct mm_walk *);
2847:	static void migrate_vma_insert_page(unsigned long, struct page *, unsigned long *, unsigned long *, struct migrate_vma *, struct migrate_vma *);
2578:	static void migrate_vma_prepare(struct migrate_vma *);
2688:	static void migrate_vma_unmap(struct migrate_vma *);
1685:	static int move_pages_and_store_status(int, struct list_head *, int *, int, int, unsigned long, struct mm_struct *);
943:	static int move_to_new_page(struct page *, struct page *, enum migrate_mode);
2023:	static int numamigrate_isolate_page(struct page *, pg_data_t *);
205:	static bool remove_migration_pte(struct page *, struct vm_area_struct *, unsigned long, void *);
1168:	static int unmap_and_move(new_page_t *, free_page_t *, unsigned long, struct page *, int, enum migrate_mode, enum migrate_reason);
1274:	static int unmap_and_move_huge_page(new_page_t *, free_page_t *, unsigned long, struct page *, int, enum migrate_mode, int);
865:	static int writeout(struct address_space *, struct page *);

File mm/mincore.c:
229:	long __ia32_sys_mincore(const struct pt_regs *);
229:	long __x64_sys_mincore(const struct pt_regs *);
71:	static int __mincore_unmapped_range(unsigned long, unsigned long, struct vm_area_struct *, unsigned char *);
229:	static long __se_sys_mincore(long, long, long);
184:	static long do_mincore(unsigned long, unsigned long, unsigned char *);
24:	static int mincore_hugetlb(pte_t *, unsigned long, unsigned long, unsigned long, struct mm_walk *);
51:	static unsigned char mincore_page(struct address_space *, unsigned long);
99:	static int mincore_pte_range(pmd_t *, unsigned long, unsigned long, struct mm_walk *);
90:	static int mincore_unmapped_range(unsigned long, unsigned long, int, struct mm_walk *);

File mm/mlock.c:
694:	long __ia32_sys_mlock(const struct pt_regs *);
699:	long __ia32_sys_mlock2(const struct pt_regs *);
775:	long __ia32_sys_mlockall(const struct pt_regs *);
712:	long __ia32_sys_munlock(const struct pt_regs *);
694:	long __x64_sys_mlock(const struct pt_regs *);
699:	long __x64_sys_mlock2(const struct pt_regs *);
775:	long __x64_sys_mlockall(const struct pt_regs *);
712:	long __x64_sys_munlock(const struct pt_regs *);
29:	bool can_do_mlock(void);
59:	void clear_page_mlock(struct page *);
90:	void mlock_vma_page(struct page *);
167:	unsigned int munlock_vma_page(struct page *);
421:	void munlock_vma_pages_range(struct vm_area_struct *, unsigned long, unsigned long);
821:	int user_shm_lock(size_t, struct user_struct *);
843:	void user_shm_unlock(size_t, struct user_struct *);
804:	static long __do_sys_munlockall(const struct pt_regs *);
114:	static void __munlock_isolated_page(struct page *);
139:	static void __munlock_isolation_failed(struct page *);
259:	static void __munlock_pagevec(struct pagevec *, struct zone *);
350:	static unsigned long __munlock_pagevec_fill(struct pagevec *, struct vm_area_struct *, struct zone *, unsigned long, unsigned long);
215:	static bool __putback_lru_fast_prepare(struct page *, struct pagevec *, int *);
775:	static long __se_sys_mlockall(long);
712:	static long __se_sys_munlock(long, long);
739:	static int apply_mlockall_flags(int);
559:	static int apply_vma_lock_flags(unsigned long, size_t, vm_flags_t);
647:	static int do_mlock(unsigned long, size_t, vm_flags_t);
495:	static int mlock_fixup(struct vm_area_struct *, struct vm_area_struct **, unsigned long, unsigned long, vm_flags_t);

File mm/mm_init.c:
148:	void mm_compute_batch(int);
65:	void mminit_verify_pageflags_layout(void);
27:	void mminit_verify_zonelist(void);
187:	static int mm_compute_batch_init(void);
169:	static int mm_compute_batch_notifier(struct notifier_block *, unsigned long, void *);
199:	static int mm_sysfs_init(void);
134:	static int set_mminit_loglevel(char *);

File mm/mmap.c:
1419:	unsigned long __do_mmap_mm(struct mm_struct *, struct file *, unsigned long, unsigned long, unsigned long, unsigned long, vm_flags_t, unsigned long, unsigned long *, struct list_head *);
3102:	int __do_munmap(struct mm_struct *, unsigned long, size_t, struct list_head *, bool);
199:	long __ia32_sys_brk(const struct pt_regs *);
1898:	long __ia32_sys_mmap_pgoff(const struct pt_regs *);
3252:	long __ia32_sys_munmap(const struct pt_regs *);
3262:	long __ia32_sys_remap_file_pages(const struct pt_regs *);
3024:	int __split_vma(struct mm_struct *, struct vm_area_struct *, unsigned long, int);
748:	int __vma_adjust(struct vm_area_struct *, unsigned long, unsigned long, unsigned long, struct vm_area_struct *, struct vm_area_struct *);
642:	void __vma_link_rb(struct mm_struct *, struct vm_area_struct *, struct rb_node **, struct rb_node *);
199:	long __x64_sys_brk(const struct pt_regs *);
1898:	long __x64_sys_mmap_pgoff(const struct pt_regs *);
3252:	long __x64_sys_munmap(const struct pt_regs *);
3262:	long __x64_sys_remap_file_pages(const struct pt_regs *);
3817:	struct vm_area_struct *_install_special_mapping(struct mm_struct *, unsigned long, unsigned long, unsigned long, const struct vm_special_mapping *);
3576:	struct vm_area_struct *copy_vma(struct vm_area_struct **, unsigned long, unsigned long, unsigned long, bool *);
1825:	unsigned long do_mmap(struct file *, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long *, struct list_head *);
3212:	int do_munmap(struct mm_struct *, unsigned long, size_t, struct list_head *);
3465:	void exit_mmap(struct mm_struct *);
2790:	int expand_downwards(struct vm_area_struct *, unsigned long);
2903:	int expand_stack(struct vm_area_struct *, unsigned long);
2909:	struct vm_area_struct *find_extend_vma(struct mm_struct *, unsigned long);
1323:	struct anon_vma *find_mergeable_anon_vma(struct vm_area_struct *);
2596:	struct vm_area_struct *find_vma(struct mm_struct *, unsigned long);
2633:	struct vm_area_struct *find_vma_prev(struct mm_struct *, unsigned long, struct vm_area_struct **);
2552:	unsigned long get_unmapped_area(struct file *, unsigned long, unsigned long, unsigned long, unsigned long);
3539:	int insert_vm_struct(struct mm_struct *, struct vm_area_struct *);
3826:	int install_special_mapping(struct mm_struct *, unsigned long, unsigned long, unsigned long, struct page **);
1838:	unsigned long ksys_mmap_pgoff(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long);
3655:	bool may_expand_vm(struct mm_struct *, unsigned long, vm_flags_t);
3997:	void mm_drop_all_locks(struct mm_struct *);
3917:	int mm_take_all_locks(struct mm_struct *);
4019:	void mmap_init(void);
2176:	unsigned long mmap_region(struct file *, unsigned long, unsigned long, vm_flags_t, unsigned long, struct list_head *);
3088:	int split_vma(struct mm_struct *, struct vm_area_struct *, unsigned long, int);
167:	void unlink_file_vma(struct vm_area_struct *);
3458:	int vm_brk(unsigned long, unsigned long);
3431:	int vm_brk_flags(unsigned long, unsigned long, unsigned long);
117:	pgprot_t vm_get_page_prot(unsigned long);
3246:	int vm_munmap(unsigned long, size_t);
3680:	void vm_stat_account(struct mm_struct *, vm_flags_t, long);
2394:	unsigned long vm_unmapped_area(struct vm_unmapped_area_info *);
3800:	bool vma_is_special_mapping(const struct vm_area_struct *, const struct vm_special_mapping *);
1166:	struct vm_area_struct *vma_merge(struct mm_struct *, struct vm_area_struct *, unsigned long, unsigned long, unsigned long, struct anon_vma *, struct file *, unsigned long, struct mempolicy *, struct vm_userfaultfd_ctx);
133:	void vma_set_page_prot(struct vm_area_struct *);
1935:	int vma_wants_writenotify(struct vm_area_struct *, pgprot_t);
3763:	static struct vm_area_struct *__install_special_mapping(struct mm_struct *, unsigned long, unsigned long, unsigned long, void *, const struct vm_operations_struct *);
1983:	static unsigned long __mmap_region(struct mm_struct *, struct file *, unsigned long, unsigned long, vm_flags_t, unsigned long, struct list_head *);
150:	static void __remove_shared_vm_struct(struct vm_area_struct *, struct file *, struct address_space *);
199:	static long __se_sys_brk(long);
3262:	static long __se_sys_remap_file_pages(long, long, long, long, long);
3218:	static int __vm_munmap(unsigned long, size_t, bool);
666:	static void __vma_link_file(struct vm_area_struct *);
470:	static void __vma_rb_erase(struct vm_area_struct *, struct rb_root *);
1273:	static int anon_vma_compatible(struct vm_area_struct *, struct vm_area_struct *);
2867:	static int cmdline_parse_stack_guard_gap(char *);
3363:	static int do_brk_flags(unsigned long, unsigned long, unsigned long, struct list_head *);
1712:	static unsigned long do_user_swap(struct mm_struct *, unsigned long, unsigned long, struct page **, unsigned long);
4058:	static int init_admin_reserve(void);
4130:	static int init_reserve_notifier(void);
4037:	static int init_user_reserve(void);
1629:	static int pages_can_be_swapped(struct mm_struct *, unsigned long, unsigned long, struct page ***);
182:	static struct vm_area_struct *remove_vma(struct vm_area_struct *);
4087:	static int reserve_mem_notifier(struct notifier_block *, unsigned long, void *);
3697:	static void special_mapping_close(struct vm_area_struct *);
3733:	static vm_fault_t special_mapping_fault(struct vm_fault *);
3706:	static int special_mapping_mremap(struct vm_area_struct *);
3701:	static const char *special_mapping_name(struct vm_area_struct *);
2962:	static void unmap_region(struct mm_struct *, struct vm_area_struct *, struct vm_area_struct *, unsigned long, unsigned long);
2183:	static unsigned long unmapped_area(struct vm_unmapped_area_info *);
2286:	static unsigned long unmapped_area_topdown(struct vm_unmapped_area_info *);
3862:	static void vm_lock_mapping(struct address_space *, struct mm_struct *);
443:	static void vma_gap_callbacks_rotate(struct rb_node *, struct rb_node *);
452:	static void vma_gap_update(struct vm_area_struct *);
694:	static void vma_link(struct mm_struct *, struct vm_area_struct *, struct vm_area_struct *, struct rb_node **, struct rb_node *);

File mm/mmap_lock.c:
234:	void __mmap_lock_do_trace_acquire_returned(struct mm_struct *, bool, bool);
241:	void __mmap_lock_do_trace_released(struct mm_struct *, bool);
228:	void __mmap_lock_do_trace_start_locking(struct mm_struct *, bool);
81:	int trace_mmap_lock_reg(void);
119:	void trace_mmap_lock_unreg(void);
56:	static void free_memcg_path_bufs(void);
199:	static const char *get_mm_memcg_path(struct mm_struct *);

File mm/mmu_gather.c:
66:	bool __tlb_remove_page_size(struct mmu_gather *, struct page *, int);
299:	void tlb_finish_mmu(struct mmu_gather *, unsigned long, unsigned long);
246:	void tlb_flush_mmu(struct mmu_gather *);
264:	void tlb_gather_mmu(struct mmu_gather *, struct mm_struct *, unsigned long, unsigned long);
207:	void tlb_remove_table(struct mmu_gather *, void *);
154:	static void tlb_remove_table_rcu(struct callback_head *);
137:	static void tlb_remove_table_smp_sync(void *);
196:	static void tlb_table_flush(struct mmu_gather *);

File mm/mmu_notifier.c:
427:	void __mmu_notifier_change_pte(struct mm_struct *, unsigned long, pte_t);
365:	int __mmu_notifier_clear_flush_young(struct mm_struct *, unsigned long, unsigned long);
385:	int __mmu_notifier_clear_young(struct mm_struct *, unsigned long, unsigned long);
607:	void __mmu_notifier_invalidate_range(struct mm_struct *, unsigned long, unsigned long);
592:	void __mmu_notifier_invalidate_range_end(struct mmu_notifier_range *, bool);
536:	int __mmu_notifier_invalidate_range_start(struct mmu_notifier_range *);
629:	int __mmu_notifier_register(struct mmu_notifier *, struct mm_struct *);
348:	void __mmu_notifier_release(struct mm_struct *);
810:	void __mmu_notifier_subscriptions_destroy(struct mm_struct *);
405:	int __mmu_notifier_test_young(struct mm_struct *, unsigned long);
1002:	int mmu_interval_notifier_insert(struct mmu_interval_notifier *, struct mm_struct *, unsigned long, unsigned long, const struct mmu_interval_notifier_ops *);
1024:	int mmu_interval_notifier_insert_locked(struct mmu_interval_notifier *, struct mm_struct *, unsigned long, unsigned long, const struct mmu_interval_notifier_ops *);
1056:	void mmu_interval_notifier_remove(struct mmu_interval_notifier *);
186:	unsigned long mmu_interval_read_begin(struct mmu_interval_notifier *);
781:	struct mmu_notifier *mmu_notifier_get_locked(const struct mmu_notifier_ops *, struct mm_struct *);
902:	void mmu_notifier_put(struct mmu_notifier *);
1120:	bool mmu_notifier_range_update_to_read_only(const struct mmu_notifier_range *);
729:	int mmu_notifier_register(struct mmu_notifier *, struct mm_struct *);
1113:	void mmu_notifier_synchronize(void);
827:	void mmu_notifier_unregister(struct mmu_notifier *, struct mm_struct *);
920:	static int __mmu_interval_notifier_insert(struct mmu_interval_notifier *, struct mm_struct *, struct mmu_notifier_subscriptions *, unsigned long, unsigned long, const struct mmu_interval_notifier_ops *);
742:	static struct mmu_notifier *find_get_mmu_notifier(struct mm_struct *, const struct mmu_notifier_ops *);
869:	static void mmu_notifier_free_rcu(struct callback_head *);
475:	static int mn_hlist_invalidate_range_start(struct mmu_notifier_subscriptions *, struct mmu_notifier_range *);
299:	static void mn_hlist_release(struct mmu_notifier_subscriptions *, struct mm_struct *);
129:	static void mn_itree_inv_end(struct mmu_notifier_subscriptions *);
94:	static struct mmu_interval_notifier *mn_itree_inv_start_range(struct mmu_notifier_subscriptions *, const struct mmu_notifier_range *, unsigned long *);
444:	static int mn_itree_invalidate(struct mmu_notifier_subscriptions *, const struct mmu_notifier_range *);
261:	static void mn_itree_release(struct mmu_notifier_subscriptions *, struct mm_struct *);

File mm/mmzone.c:
56:	struct zoneref *__next_zones_zonelist(struct zoneref *, enum zone_type, nodemask_t *);
13:	struct pglist_data *first_online_pgdat(void);
89:	void lruvec_init(struct lruvec *);
18:	struct pglist_data *next_online_pgdat(struct pglist_data *);
30:	struct zone *next_zone(struct zone *);
101:	int page_cpupid_xchg_last(struct page *, int);

File mm/mprotect.c:
641:	long __ia32_sys_mprotect(const struct pt_regs *);
655:	long __ia32_sys_pkey_alloc(const struct pt_regs *);
685:	long __ia32_sys_pkey_free(const struct pt_regs *);
649:	long __ia32_sys_pkey_mprotect(const struct pt_regs *);
641:	long __x64_sys_mprotect(const struct pt_regs *);
655:	long __x64_sys_pkey_alloc(const struct pt_regs *);
685:	long __x64_sys_pkey_free(const struct pt_regs *);
649:	long __x64_sys_pkey_mprotect(const struct pt_regs *);
354:	unsigned long change_protection(struct vm_area_struct *, unsigned long, unsigned long, pgprot_t, unsigned long);
399:	int mprotect_fixup(struct vm_area_struct *, struct vm_area_struct **, unsigned long, unsigned long, unsigned long);
655:	static long __se_sys_pkey_alloc(long, long);
685:	static long __se_sys_pkey_free(long);
324:	static unsigned long change_protection_range(struct vm_area_struct *, unsigned long, unsigned long, pgprot_t, unsigned long);
38:	static unsigned long change_pte_range(struct vm_area_struct *, pmd_t *, unsigned long, unsigned long, pgprot_t, unsigned long);
512:	static int do_mprotect_pkey(unsigned long, size_t, unsigned long, int);
378:	static int prot_none_hugetlb_entry(pte_t *, unsigned long, unsigned long, unsigned long, struct mm_walk *);
371:	static int prot_none_pte_entry(pte_t *, unsigned long, unsigned long, struct mm_walk *);
386:	static int prot_none_test(unsigned long, unsigned long, struct mm_walk *);

File mm/mremap.c:
889:	long __ia32_sys_mremap(const struct pt_regs *);
889:	long __x64_sys_mremap(const struct pt_regs *);
480:	unsigned long move_page_tables(struct vm_area_struct *, unsigned long, struct vm_area_struct *, unsigned long, unsigned long, bool);
889:	static long __se_sys_mremap(long, long, long, long, long);
72:	static pud_t *alloc_new_pud(struct mm_struct *, unsigned long, struct vm_area_struct *);
35:	static pud_t *get_old_pud(struct mm_struct *, unsigned long);
342:	static bool move_huge_pud(struct vm_area_struct *, unsigned long, pud_t *, pud_t *, unsigned long);
225:	static bool move_normal_pmd(struct vm_area_struct *, unsigned long, pmd_t *, pmd_t *, unsigned long);
293:	static bool move_normal_pud(struct vm_area_struct *, unsigned long, pud_t *, pud_t *, unsigned long);
136:	static void move_ptes(struct vm_area_struct *, pmd_t *, unsigned long, unsigned long, pmd_t *, unsigned long, bool, struct vm_area_struct *);
563:	static unsigned long move_vma(struct vm_area_struct *, unsigned long, unsigned long, unsigned long, unsigned long, bool *, unsigned long, struct vm_userfaultfd_ctx *, struct list_head *);
775:	static unsigned long mremap_to(unsigned long, unsigned long, unsigned long, unsigned long, bool *, unsigned long, struct vm_userfaultfd_ctx *, struct list_head *, struct list_head *);
705:	static struct vm_area_struct *vma_to_resize(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long *);

File mm/msync.c:
32:	long __ia32_sys_msync(const struct pt_regs *);
32:	long __x64_sys_msync(const struct pt_regs *);
32:	static long __se_sys_msync(long, long, long);

File mm/oom_kill.c:
560:	bool __oom_reap_task_mm(struct mm_struct *);
774:	void exit_oom_victim(void);
136:	struct task_struct *find_lock_task_mm(struct task_struct *);
202:	long oom_badness(struct task_struct *, unsigned long);
806:	bool oom_killer_disable(long);
785:	void oom_killer_enable(void);
1133:	bool out_of_memory(struct oom_control *);
1217:	void pagefault_out_of_memory(void);
538:	bool process_shares_mm(struct task_struct *, struct mm_struct *);
1073:	int register_oom_notifier(struct notifier_block *);
1079:	int unregister_oom_notifier(struct notifier_block *);
905:	static void __oom_kill_process(struct task_struct *, const char *);
252:	static enum oom_constraint constrained_alloc(struct oom_control *);
500:	static void dump_header(struct oom_control *, struct task_struct *);
428:	static int dump_task(struct task_struct *, void *);
745:	static void mark_oom_victim(struct task_struct *);
89:	static bool oom_cpuset_eligible(struct task_struct *, struct oom_control *, struct oom_control *);
351:	static int oom_evaluate_task(struct task_struct *, void *);
723:	static int oom_init(void);
992:	static int oom_kill_memcg_member(struct task_struct *, void *);
1002:	static void oom_kill_process(struct oom_control *, const char *);
656:	static void oom_reap_task(struct task_struct *);
615:	static bool oom_reap_task_mm(struct task_struct *, struct mm_struct *);
687:	static int oom_reaper(void *);
858:	static bool task_will_free_mem(struct task_struct *);
707:	static void wake_oom_reaper(struct task_struct *);

File mm/page-writeback.c:
2619:	void __cancel_dirty_page(struct page *);
2401:	int __set_page_dirty_no_writeback(struct page *);
2468:	int __set_page_dirty_nobuffers(struct page *);
2761:	int __test_set_page_writeback(struct page *, bool);
2445:	void account_page_cleaned(struct page *, struct bdi_writeback *, struct address_space *);
2415:	void account_page_dirtied(struct page *, struct address_space *);
2507:	void account_page_redirty(struct page *);
1872:	void balance_dirty_pages_ratelimited(struct address_space *);
685:	int bdi_set_max_ratio(struct backing_dev_info *, unsigned int);
664:	int bdi_set_min_ratio(struct backing_dev_info *, unsigned int);
2656:	int clear_page_dirty_for_io(struct page *);
518:	int dirty_background_bytes_handler(struct ctl_table *, int, void *, size_t *, loff_t *);
507:	int dirty_background_ratio_handler(struct ctl_table *, int, void *, size_t *, loff_t *);
543:	int dirty_bytes_handler(struct ctl_table *, int, void *, size_t *, loff_t *);
529:	int dirty_ratio_handler(struct ctl_table *, int, void *, size_t *, loff_t *);
1981:	int dirty_writeback_centisecs_handler(struct ctl_table *, int, void *, size_t *, loff_t *);
2339:	int do_writepages(struct address_space *, struct writeback_control *);
2321:	int generic_writepages(struct address_space *, struct writeback_control *);
453:	void global_dirty_limits(unsigned long *, unsigned long *);
2017:	void laptop_io_completion(struct backing_dev_info *);
2004:	void laptop_mode_timer_fn(struct timer_list *);
2027:	void laptop_sync_completion(void);
496:	bool node_dirty_ok(struct pglist_data *);
2086:	void page_writeback_init(void);
2530:	int redirty_page_for_writepage(struct writeback_control *, struct page *);
2552:	int set_page_dirty(struct page *);
2595:	int set_page_dirty_lock(struct page *);
2110:	void tag_pages_for_writeback(struct address_space *, unsigned long, unsigned long);
2717:	int test_clear_page_writeback(struct page *);
2839:	void wait_for_stable_page(struct page *);
2822:	void wait_on_page_writeback(struct page *);
780:	unsigned long wb_calc_thresh(struct bdi_writeback *, unsigned long);
650:	void wb_domain_exit(struct wb_domain *);
636:	int wb_domain_init(struct wb_domain *, gfp_t);
1936:	bool wb_over_bg_thresh(struct bdi_writeback *);
1384:	void wb_update_bandwidth(struct bdi_writeback *, unsigned long);
603:	void wb_writeout_inc(struct bdi_writeback *);
2163:	int write_cache_pages(struct address_space *, struct writeback_control *, writepage_t, void *);
2369:	int write_one_page(struct page *);
2051:	void writeback_set_ratelimit(void);
753:	static unsigned long __wb_calc_thresh(struct dirty_throttle_control *);
1334:	static void __wb_update_bandwidth(struct dirty_throttle_control *, struct dirty_throttle_control *, unsigned long, bool);
2302:	static int __writepage(struct page *, struct writeback_control *, void *);
1550:	static void balance_dirty_pages(struct bdi_writeback *, unsigned long);
1399:	static unsigned long dirty_poll_interval(unsigned long, unsigned long);
387:	static void domain_dirty_limits(struct dirty_throttle_control *);
1151:	static void domain_update_bandwidth(struct dirty_throttle_control *, unsigned long);
2064:	static int page_writeback_cpu_online(unsigned int);
1427:	static long wb_min_pause(struct bdi_writeback *, long, unsigned long, unsigned long, int *);
893:	static void wb_position_ratio(struct dirty_throttle_control *);
1176:	static void wb_update_dirty_ratelimit(struct dirty_throttle_control *, unsigned long, unsigned long);
617:	static void writeout_period(struct timer_list *);

File mm/page_alloc.c:
6899:	unsigned long __absent_pages_in_range(int, unsigned long, unsigned long);
5142:	struct page *__alloc_pages(gfp_t, unsigned int, int, nodemask_t *);
4995:	unsigned long __alloc_pages_bulk(gfp_t, int, nodemask_t *, int, struct list_head *, struct page **);
3036:	void __drain_all_pages(struct zone *, bool);
1574:	int __early_pfn_to_nid(unsigned long, struct mminit_pfnnid_cache *);
5241:	void __free_pages(struct page *, unsigned int);
1536:	void __free_pages_core(struct page *, unsigned int);
5216:	unsigned long __get_free_pages(gfp_t, unsigned int);
3308:	int __isolate_free_page(struct page *, unsigned int);
9041:	void __offline_isolated_pages(unsigned long, unsigned long);
5293:	void __page_frag_cache_drain(struct page *, unsigned int);
1634:	struct page *__pageblock_pfn_to_page(unsigned long, unsigned long, struct zone *);
3365:	void __putback_isolated_page(struct page *, unsigned int, int);
6646:	void __zone_set_pageset_high_and_batch(struct zone *, unsigned long, unsigned long);
3628:	bool __zone_watermark_ok(struct zone *, unsigned int, unsigned long, int, unsigned int, long);
6922:	unsigned long absent_pages_in_range(unsigned long, unsigned long);
7847:	void adjust_managed_page_count(struct page *, long);
8933:	struct page *alloc_contig_pages(unsigned long, gfp_t, int, nodemask_t *);
8734:	int alloc_contig_range(unsigned long, unsigned long, unsigned int, gfp_t);
8419:	void *alloc_large_system_hash(const char *, unsigned long, unsigned long, int, int, unsigned int *, unsigned int *, unsigned long, unsigned long);
5404:	void *alloc_pages_exact(size_t, gfp_t);
5429:	void *alloc_pages_exact_nid(int, size_t, gfp_t);
7682:	bool arch_has_descending_max_zone_pfns(void);
6547:	void arch_memmap_init(unsigned long, int, unsigned long, unsigned long);
6231:	void build_all_zonelists(pg_data_t *);
1684:	void clear_zone_contiguous(struct zone *);
1906:	int deferred_page_init_max_threads(const struct cpumask *);
3121:	void drain_all_pages(struct zone *);
2998:	void drain_local_pages(struct zone *);
2940:	void drain_zone_pages(struct zone *, struct per_cpu_pages *);
1594:	int early_pfn_to_nid(unsigned long);
7420:	unsigned long find_min_pfn_with_active_regions(void);
2605:	int find_suitable_fallback(struct free_area *, unsigned int, int, bool, bool *);
7700:	void free_area_init(unsigned long *);
7176:	void free_area_init_core_hotplug(int);
7346:	void free_area_init_memoryless_node(int);
693:	void free_compound_page(struct page *);
8971:	void free_contig_range(unsigned long, unsigned int);
5251:	void free_pages(unsigned long, unsigned int);
5450:	void free_pages_exact(void *, size_t);
1207:	bool free_pages_prepare(struct page *, unsigned int, bool);
7858:	unsigned long free_reserved_area(void *, void *, int, const char *);
3228:	void free_unref_page(struct page *);
3248:	void free_unref_page_list(struct list_head *);
9181:	enum node_type get_node_type(int);
6783:	void get_pfn_range_for_nid(unsigned int, unsigned long *, unsigned long *);
529:	unsigned long get_pfnblock_flags_mask(struct page *, unsigned long, unsigned long);
5227:	unsigned long get_zeroed_page(gfp_t);
4522:	bool gfp_pfmemalloc_allowed(gfp_t);
8542:	struct page *has_unmovable_pages(struct zone *, struct page *, int, int);
6750:	void init_currently_empty_zone(struct zone *, unsigned long, unsigned long);
8198:	int init_per_zone_wmark_min(void);
9083:	bool is_free_buddy_page(struct page *);
8333:	int lowmem_reserve_ratio_sysctl_handler(struct ctl_table *, int, void *, size_t *, loff_t *);
3133:	void mark_free_pages(struct zone *);
7901:	void mem_init_print_info(const char *);
1609:	void memblock_free_pages(struct page *, unsigned long, unsigned int);
6509:	void memmap_init(void);
6295:	void memmap_init_zone(unsigned long, int, unsigned long, unsigned long, unsigned long, enum meminit_context, struct vmem_altmap *, int);
6355:	void memmap_init_zone_device(struct zone *, unsigned long, unsigned long, struct dev_pagemap *);
8236:	int min_free_kbytes_sysctl_handler(struct ctl_table *, int, void *, size_t *, loff_t *);
2412:	int move_freepages_block(struct zone *, struct page *, int, int *);
7383:	unsigned long node_map_pfn_alignment(void);
5503:	unsigned long nr_free_buffer_pages(void);
5911:	int numa_zonelist_order_handler(struct ctl_table *, int, void *, size_t *, loff_t *);
8007:	void page_alloc_init(void);
2078:	void page_alloc_init_late(void);
5302:	void *page_frag_alloc(struct page_frag_cache *, unsigned int, gfp_t);
5364:	void page_frag_free(void *);
8354:	int percpu_pagelist_fraction_sysctl_handler(struct ctl_table *, int, void *, size_t *, loff_t *);
252:	void pm_restore_gfp_mask(void);
261:	void pm_restrict_gfp_mask(void);
269:	bool pm_suspended_storage(void);
2273:	void post_alloc_hook(struct page *, unsigned int, gfp_t);
699:	void prep_compound_page(struct page *, unsigned int);
2287:	void prep_new_page(struct page *, unsigned int, gfp_t, unsigned int);
1494:	void reserve_bootmem_region(phys_addr_t, phys_addr_t);
7964:	void set_dma_reserve(unsigned long);
9177:	void set_node_type(int, enum node_type);
577:	void set_pageblock_migratetype(struct page *, int);
7094:	void set_pageblock_order(void);
547:	void set_pfnblock_flags_mask(struct page *, unsigned long, unsigned long, unsigned long);
1662:	void set_zone_contiguous(struct zone *);
7355:	void setup_nr_node_ids(void);
6705:	void setup_per_cpu_pageset(void);
8165:	void setup_per_zone_wmarks(void);
6687:	void setup_zone_pageset(struct zone *);
3593:	bool should_fail_alloc_page(gfp_t, unsigned int);
5665:	void show_free_areas(unsigned int, nodemask_t *);
5515:	long si_mem_available(void);
5561:	void si_meminfo(struct sysinfo *);
5575:	void si_meminfo_node(struct sysinfo *, int);
3294:	void split_page(struct page *, unsigned int);
8309:	int sysctl_min_slab_ratio_sysctl_handler(struct ctl_table *, int, void *, size_t *, loff_t *);
8282:	int sysctl_min_unmapped_ratio_sysctl_handler(struct ctl_table *, int, void *, size_t *, loff_t *);
9140:	bool take_page_off_buddy(struct page *);
4010:	void warn_alloc(gfp_t, nodemask_t *, const char *, ...);
8252:	int watermark_scale_factor_sysctl_handler(struct ctl_table *, int, void *, size_t *, loff_t *);
9004:	void zone_pcp_disable(struct zone *);
9011:	void zone_pcp_enable(struct zone *);
9017:	void zone_pcp_reset(struct zone *);
8989:	void zone_pcp_update(struct zone *);
3692:	bool zone_watermark_ok(struct zone *, unsigned int, unsigned long, int, unsigned int);
3739:	bool zone_watermark_ok_safe(struct zone *, unsigned int, unsigned long, int);
8665:	static int __alloc_contig_migrate_range(struct compact_control *, unsigned long, unsigned long);
4148:	static struct page *__alloc_pages_direct_compact(gfp_t, unsigned int, unsigned int, const struct alloc_context *, enum compact_priority, enum compact_result *);
6155:	static void __build_all_zonelists(void *);
1518:	static void __free_pages_ok(struct page *, unsigned int, fpi_t);
1444:	static void __init_single_page(struct page *, unsigned long, int, unsigned long);
8096:	static void __setup_per_zone_wmarks(void);
2071:	static bool _deferred_grow_zone(struct zone *, unsigned int);
6832:	static void adjust_zone_range_for_zone_movable(int, unsigned long, unsigned long, unsigned long *, unsigned long *, unsigned long);
639:	static void bad_page(struct page *, const char *);
6199:	static void build_all_zonelists_init(void);
6030:	static void build_zonelists(pg_data_t *);
5871:	static int build_zonerefs_node(pg_data_t *, struct zoneref *);
6979:	static void calculate_node_totalpages(struct pglist_data *, unsigned long, unsigned long);
8026:	static void calculate_totalreserve_pages(void);
1130:	static void check_free_page_bad(struct page *);
2192:	static void check_new_page_bad(struct page *);
7791:	static int cmdline_parse_core(char *, unsigned long *, unsigned long *);
7822:	static int cmdline_parse_kernelcore(char *);
7838:	static int cmdline_parse_movablecore(char *);
1749:	static void deferred_free_pages(unsigned long, unsigned long);
1690:	static void deferred_free_range(unsigned long, unsigned long);
2004:	static bool deferred_grow_zone(struct zone *, unsigned int);
1841:	static unsigned long deferred_init_maxorder(u64 *, struct zone *, unsigned long *, unsigned long *);
1807:	static bool deferred_init_mem_pfn_range_in_zone(u64 *, struct zone *, unsigned long *, unsigned long *, unsigned long);
1912:	static int deferred_init_memmap(void *);
1885:	static void deferred_init_memmap_chunk(unsigned long, unsigned long, void *);
1775:	static unsigned long deferred_init_pages(struct zone *, unsigned long, unsigned long);
3008:	static void drain_local_pages_wq(struct work_struct *);
2961:	static void drain_pages_zone(unsigned int, struct zone *);
7430:	static unsigned long early_calculate_totalpages(void);
185:	static int early_init_on_alloc(char *);
203:	static int early_init_on_free(char *);
5938:	static int find_next_best_node(int, nodemask_t *);
7454:	static void find_zone_movable_pfns_for_nodes(void);
7196:	static void free_area_init_core(struct pglist_data *);
7320:	static void free_area_init_node(int);
1430:	static void free_one_page(struct zone *, struct page *, unsigned long, unsigned int, int, fpi_t);
1312:	static bool free_pcp_prepare(struct page *);
1346:	static void free_pcppages_bulk(struct zone *, int, struct per_cpu_pages *);
3193:	static void free_unref_page_commit(struct page *, unsigned long);
3181:	static bool free_unref_page_prepare(struct page *, unsigned long);
3823:	static struct page *get_page_from_freelist(gfp_t, unsigned int, int, const struct alloc_context *);
1463:	static void init_reserved_page(unsigned long);
6455:	static void init_unavailable_range(unsigned long, unsigned long, int, int);
1196:	static void kernel_init_free_pages(struct page *, int);
5373:	static void *make_alloc_exact(unsigned long, unsigned int, size_t);
5474:	static unsigned long nr_free_zone_pages(int);
7969:	static int page_alloc_cpu_dead(unsigned int);
6625:	static void pageset_init(struct per_cpu_pageset *);
8878:	static bool pfn_range_valid_contig(struct zone *, unsigned long, unsigned long);
7142:	static void pgdat_init_internals(struct pglist_data *);
2640:	static void reserve_highatomic_pageblock(struct page *, struct zone *, unsigned int);
2887:	static int rmqueue_bulk(struct zone *, unsigned long, struct list_head *, int, unsigned int, unsigned int);
3431:	static struct page *rmqueue_pcplist(struct zone *, struct zone *, int, unsigned int, gfp_t);
7997:	static int set_hashdist(char *);
8296:	static void setup_min_slab_ratio(void);
8268:	static void setup_min_unmapped_ratio(void);
8067:	static void setup_per_zone_lowmem_reserve(void);
5611:	static bool show_mem_node_skip(int, nodemask_t *, unsigned int);
2523:	static void steal_suitable_fallback(struct zone *, struct page *, unsigned int, int, bool);
2682:	static bool unreserve_highatomic_pageblock(const struct alloc_context *, bool);
4427:	static void wake_all_kswapds(unsigned int, gfp_t, const struct alloc_context *);
6929:	static unsigned long zone_absent_pages_in_node(int, unsigned long, unsigned long, unsigned long);
6553:	static int zone_batchsize(struct zone *);
6733:	static void zone_pcp_init(struct zone *);
6662:	static void zone_set_pageset_high_and_batch(struct zone *);

File mm/page_cache_limit.c:
252:	int kpagecache_limitd_run(int);
72:	void kpagecache_limitd_stop(int);
59:	int proc_page_cache_limit(struct ctl_table *, int, void *, size_t *, loff_t *);
111:	void wakeup_all_kpagecache_limitd(void);
223:	static int __kpagecache_limitd_run(int);
268:	static int kpagecache_limitd_init(void);
196:	static int pagecache_limitd(void *);
45:	static void setup_pagecache_limit(int);

File mm/page_counter.c:
50:	void page_counter_cancel(struct page_counter *, unsigned long);
67:	void page_counter_charge(struct page_counter *, unsigned long);
244:	int page_counter_memparse(const char *, const char *, unsigned long *);
225:	void page_counter_set_low(struct page_counter *, unsigned long);
169:	int page_counter_set_max(struct page_counter *, unsigned long);
208:	void page_counter_set_min(struct page_counter *, unsigned long);
94:	bool page_counter_try_charge(struct page_counter *, unsigned long, struct page_counter **);
151:	void page_counter_uncharge(struct page_counter *, unsigned long);
16:	static void propagate_protected_usage(struct page_counter *, unsigned long);

File mm/page_idle.c:
114:	static ssize_t page_idle_bitmap_read(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t, size_t);
159:	static ssize_t page_idle_bitmap_write(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t, size_t);
88:	static void page_idle_clear_pte_refs(struct page *);
47:	static bool page_idle_clear_pte_refs_one(struct page *, struct vm_area_struct *, unsigned long, void *);
32:	static struct page *page_idle_get_page(unsigned long);
210:	static int page_idle_init(void);

File mm/page_io.c:
304:	int __swap_writepage(struct page *, struct writeback_control *, bio_end_io_t *);
48:	void end_swap_bio_write(struct bio *);
146:	int generic_swapfile_activate(struct swap_info_struct *, struct file *, sector_t *);
375:	int swap_readpage(struct page *, bool);
461:	int swap_set_page_dirty(struct page *);
247:	int swap_writepage(struct page *, struct writeback_control *);
120:	static void end_swap_bio_read(struct bio *);
29:	static struct bio *get_swap_bio(gfp_t, struct page *, bio_end_io_t *);
72:	static void swap_slot_free_notify(struct page *);

File mm/page_isolation.c:
183:	int start_isolate_page_range(unsigned long, unsigned long, unsigned int, int);
284:	int test_pages_isolated(unsigned long, unsigned long, int);
221:	void undo_isolate_page_range(unsigned long, unsigned long, unsigned int);
18:	static int set_migratetype_isolate(struct page *, int, int);
67:	static void unset_migratetype_isolate(struct page *, unsigned int);

File mm/page_reporting.c:
50:	void __page_reporting_notify(void);
315:	int page_reporting_register(struct page_reporting_dev_info *);
349:	void page_reporting_unregister(struct page_reporting_dev_info *);
109:	static int page_reporting_cycle(struct page_reporting_dev_info *, struct zone *, unsigned int, unsigned int, struct scatterlist *, unsigned int *);
68:	static void page_reporting_drain(struct scatterlist *, unsigned int, bool, struct page_reporting_dev_info *);
270:	static void page_reporting_process(struct work_struct *);
223:	static int page_reporting_process_zone(struct page_reporting_dev_info *, struct scatterlist *, struct zone *);

File mm/page_vma_mapped.c:
303:	int page_mapped_in_vma(struct page *, struct vm_area_struct *);
149:	bool page_vma_mapped_walk(struct page_vma_mapped_walk *);
85:	static bool check_pte(struct page_vma_mapped_walk *);
16:	static bool map_pte(struct page_vma_mapped_walk *);

File mm/pagewalk.c:
515:	int walk_page_mapping(struct address_space *, unsigned long, unsigned long, const struct mm_walk_ops *, void *);
379:	int walk_page_range(struct mm_struct *, unsigned long, unsigned long, const struct mm_walk_ops *, void *);
440:	int walk_page_range_novma(struct mm_struct *, unsigned long, unsigned long, const struct mm_walk_ops *, pgd_t *, void *);
461:	int walk_page_vma(struct vm_area_struct *, const struct mm_walk_ops *, void *);
314:	static int __walk_page_range(unsigned long, unsigned long, struct mm_walk *);
245:	static int walk_hugetlb_range(unsigned long, unsigned long, struct mm_walk *);
168:	static int walk_p4d_range(pgd_t *, unsigned long, unsigned long, struct mm_walk *);
288:	static int walk_page_test(unsigned long, unsigned long, struct mm_walk *);
201:	static int walk_pgd_range(unsigned long, unsigned long, struct mm_walk *);
61:	static int walk_pmd_range(unsigned long, unsigned long, struct mm_walk *, pud_t *, pud_t *);
41:	static int walk_pte_range(unsigned long, unsigned long, struct mm_walk *, pmd_t *, pmd_t *);
119:	static int walk_pud_range(unsigned long, unsigned long, struct mm_walk *, p4d_t *, p4d_t *);

File mm/percpu-vm.c:
192:	static int __pcpu_map_pages(unsigned long, struct page **, int);
81:	static int pcpu_alloc_pages(struct page **, int, int, gfp_t, struct pcpu_chunk *);
332:	static struct pcpu_chunk *pcpu_create_chunk(enum pcpu_chunk_type, gfp_t);
53:	static void pcpu_free_pages(struct page **, int, int, struct pcpu_chunk *);
213:	static int pcpu_map_pages(struct pcpu_chunk *, struct page **, int, int);
275:	static int pcpu_populate_chunk(struct pcpu_chunk *, int, int, gfp_t);
184:	static void pcpu_post_unmap_tlb_flush(struct pcpu_chunk *, int, int);
152:	static void pcpu_unmap_pages(struct pcpu_chunk *, struct page **, int, int);

File mm/percpu.c:
1961:	void *__alloc_percpu(size_t, size_t);
1948:	void *__alloc_percpu_gfp(size_t, size_t, gfp_t);
1983:	void *__alloc_reserved_percpu(size_t, size_t);
2325:	bool __is_kernel_percpu_address(unsigned long, unsigned long *);
2271:	void free_percpu(void *);
2361:	bool is_kernel_percpu_address(unsigned long);
2448:	struct pcpu_alloc_info *pcpu_alloc_alloc_info(int, int);
3037:	int pcpu_embed_first_chunk(size_t, size_t, size_t, pcpu_fc_cpu_distance_fn_t *, pcpu_fc_alloc_fn_t, pcpu_fc_free_fn_t);
2483:	void pcpu_free_alloc_info(struct pcpu_alloc_info *);
3369:	unsigned long pcpu_nr_pages(void);
3166:	int pcpu_page_first_chunk(size_t, pcpu_fc_alloc_fn_t, pcpu_fc_free_fn_t, pcpu_fc_populate_pte_fn_t);
2599:	void pcpu_setup_first_chunk(const struct pcpu_alloc_info *, void *);
2389:	phys_addr_t per_cpu_ptr_to_phys(void *);
530:	static void __pcpu_chunk_move(struct pcpu_chunk *, int, bool);
1732:	static void *pcpu_alloc(size_t, size_t, bool, gfp_t);
1220:	static int pcpu_alloc_area(struct pcpu_chunk *, int, size_t, int);
1449:	static struct pcpu_chunk *pcpu_alloc_chunk(enum pcpu_chunk_type, gfp_t);
1349:	static struct pcpu_chunk *pcpu_alloc_first_chunk(unsigned long, int);
1997:	static void pcpu_balance_free(enum pcpu_chunk_type, bool);
2048:	static void pcpu_balance_populated(enum pcpu_chunk_type);
2241:	static void pcpu_balance_workfn(struct work_struct *);
786:	static void pcpu_block_refresh_hint(struct pcpu_chunk *, int);
642:	static void pcpu_block_update(struct pcpu_block_md *, int, int);
821:	static void pcpu_block_update_hint_alloc(struct pcpu_chunk *, int, int);
968:	static void pcpu_block_update_hint_free(struct pcpu_chunk *, int, int);
2868:	static struct pcpu_alloc_info *pcpu_build_alloc_info(size_t, size_t, size_t, pcpu_fc_cpu_distance_fn_t *);
1616:	static struct pcpu_chunk *pcpu_chunk_addr_search(void *);
1558:	static void pcpu_chunk_depopulated(struct pcpu_chunk *, int, int);
1534:	static void pcpu_chunk_populated(struct pcpu_chunk *, int, int);
757:	static void pcpu_chunk_refresh_hint(struct pcpu_chunk *, bool);
562:	static void pcpu_chunk_relocate(struct pcpu_chunk *, int);
2495:	static void pcpu_dump_alloc_info(const char *, const struct pcpu_alloc_info *);
1114:	static int pcpu_find_block_fit(struct pcpu_chunk *, int, size_t, bool);
1280:	static int pcpu_free_area(struct pcpu_chunk *, int);
1323:	static void pcpu_init_md_blocks(struct pcpu_chunk *);
508:	static void *pcpu_mem_zalloc(size_t, gfp_t);
1679:	static void pcpu_memcg_free_hook(struct pcpu_chunk *, int, size_t);
1659:	static void pcpu_memcg_post_alloc_hook(struct obj_cgroup *, struct pcpu_chunk *, int, size_t);
1638:	static enum pcpu_chunk_type pcpu_memcg_pre_alloc_hook(size_t, gfp_t, struct obj_cgroup **);
424:	static void pcpu_next_fit_region(struct pcpu_chunk *, int, int, int *, int *);
369:	static void pcpu_next_md_free_region(struct pcpu_chunk *, int *, int *);
2138:	static void pcpu_reclaim_populated(enum pcpu_chunk_type);
2808:	static int percpu_alloc_setup(char *);
3379:	static int percpu_enable_async(void);

File mm/pgtable-generic.c:
28:	void p4d_clear_bad(p4d_t *);
21:	void pgd_clear_bad(pgd_t *);
161:	void pgtable_trans_huge_deposit(struct mm_struct *, pmd_t *, pgtable_t);
177:	pgtable_t pgtable_trans_huge_withdraw(struct mm_struct *, pmd_t *);
48:	void pmd_clear_bad(pmd_t *);
133:	pmd_t pmdp_huge_clear_flush(struct vm_area_struct *, unsigned long, pmd_t *);
194:	pmd_t pmdp_invalidate(struct vm_area_struct *, unsigned long, pmd_t *);
90:	pte_t ptep_clear_flush(struct vm_area_struct *, unsigned long, pte_t *);
36:	void pud_clear_bad(pud_t *);
146:	pud_t pudp_huge_clear_flush(struct vm_area_struct *, unsigned long, pud_t *);

File mm/process_vm_access.c:
292:	long __ia32_sys_process_vm_readv(const struct pt_regs *);
299:	long __ia32_sys_process_vm_writev(const struct pt_regs *);
292:	long __x64_sys_process_vm_readv(const struct pt_regs *);
299:	long __x64_sys_process_vm_writev(const struct pt_regs *);
254:	static ssize_t process_vm_rw(pid_t, const struct iovec *, unsigned long, const struct iovec *, unsigned long, unsigned long, int);
151:	static ssize_t process_vm_rw_core(pid_t, struct iov_iter *, const struct iovec *, unsigned long, int, unsigned long);
71:	static int process_vm_rw_single_vec(unsigned long, unsigned long, struct iov_iter *, struct page **, struct mm_struct *, int, struct task_struct *);

File mm/readahead.c:
637:	long __ia32_sys_readahead(const struct pt_regs *);
637:	long __x64_sys_readahead(const struct pt_regs *);
249:	void do_page_cache_ra(struct readahead_control *, unsigned long, unsigned long);
34:	void file_ra_state_init(struct file_ra_state *, struct address_space *);
274:	void force_page_cache_ra(struct readahead_control *, struct file_ra_state *, unsigned long);
611:	ssize_t ksys_readahead(int, loff_t, size_t);
581:	void page_cache_async_ra(struct readahead_control *, struct file_ra_state *, struct page *, unsigned long);
174:	void page_cache_ra_unbounded(struct readahead_control *, unsigned long, unsigned long);
552:	void page_cache_sync_ra(struct readahead_control *, struct file_ra_state *, unsigned long);
89:	int read_cache_pages(struct address_space *, struct list_head *, int (*)(void *, struct page *), void *);
311:	static unsigned long get_init_ra_size(unsigned long, unsigned long);
435:	static void ondemand_readahead(struct readahead_control *, struct file_ra_state *, bool, unsigned long);
48:	static void read_cache_pages_invalidate_page(struct address_space *, struct page *);
117:	static void read_pages(struct readahead_control *, struct list_head *, bool);

File mm/rmap.c:
182:	int __anon_vma_prepare(struct vm_area_struct *);
1818:	void __put_anon_vma(struct anon_vma *);
274:	int anon_vma_clone(struct vm_area_struct *, struct vm_area_struct *);
328:	int anon_vma_fork(struct vm_area_struct *, struct vm_area_struct *);
452:	void anon_vma_init(void);
1121:	void do_page_add_anon_rmap(struct page *, struct vm_area_struct *, unsigned long, int);
680:	void flush_tlb_batched_pending(struct mm_struct *);
1986:	void hugepage_add_anon_rmap(struct page *, struct vm_area_struct *, unsigned long);
2000:	void hugepage_add_new_anon_rmap(struct page *, struct vm_area_struct *, unsigned long);
728:	pmd_t *mm_find_pmd(struct mm_struct *, unsigned long);
1110:	void page_add_anon_rmap(struct page *, struct vm_area_struct *, unsigned long, bool);
1211:	void page_add_file_rmap(struct page *, bool);
1179:	void page_add_new_anon_rmap(struct page *, struct vm_area_struct *, unsigned long, bool);
708:	unsigned long page_address_in_vma(struct page *, struct vm_area_struct *);
485:	struct anon_vma *page_get_anon_vma(struct page *);
528:	struct anon_vma *page_lock_anon_vma_read(struct page *);
983:	int page_mkclean(struct page *);
1018:	void page_move_anon_rmap(struct page *, struct vm_area_struct *);
854:	int page_referenced(struct page *, int, struct mem_cgroup *, unsigned long *);
1338:	void page_remove_rmap(struct page *, bool);
590:	void page_unlock_anon_vma_read(struct anon_vma *);
1959:	void rmap_walk(struct page *, struct rmap_walk_control *);
1970:	void rmap_walk_locked(struct page *, struct rmap_walk_control *);
1802:	void try_to_munlock(struct page *);
1758:	bool try_to_unmap(struct page *, enum ttu_flags);
602:	void try_to_unmap_flush(void);
615:	void try_to_unmap_flush_dirty(void);
389:	void unlink_anon_vmas(struct vm_area_struct *);
1043:	static void __page_set_anon_rmap(struct page *, struct vm_area_struct *, unsigned long, int);
443:	static void anon_vma_ctor(void *);
1738:	static bool invalid_migration_vma(struct vm_area_struct *, void *);
975:	static bool invalid_mkclean_vma(struct vm_area_struct *, void *);
833:	static bool invalid_page_referenced_vma(struct vm_area_struct *, void *);
901:	static bool page_mkclean_one(struct page *, struct vm_area_struct *, unsigned long, void *);
1743:	static int page_not_mapped(struct page *);
771:	static bool page_referenced_one(struct page *, struct vm_area_struct *, unsigned long, void *);
1285:	static void page_remove_anon_compound_rmap(struct page *);
1244:	static void page_remove_file_rmap(struct page *, bool);
1863:	static void rmap_walk_anon(struct page *, struct rmap_walk_control *, bool);
1916:	static void rmap_walk_file(struct page *, struct rmap_walk_control *, bool);
1387:	static bool try_to_unmap_one(struct page *, struct vm_area_struct *, unsigned long, void *);

File mm/shmem.c:
404:	bool shmem_charge(struct inode *, long);
4169:	struct file *shmem_file_setup(const char *, loff_t, unsigned long);
4182:	struct file *shmem_file_setup_with_mnt(struct vfsmount *, const char *, loff_t, unsigned long);
2123:	unsigned long shmem_get_unmapped_area(struct file *, unsigned long, unsigned long, unsigned long, unsigned long);
181:	int shmem_getpage(struct inode *, unsigned long, struct page **, enum sgp_type);
4012:	bool shmem_huge_enabled(struct vm_area_struct *);
3922:	int shmem_init(void);
3894:	int shmem_init_fs_context(struct fs_context *);
4158:	struct file *shmem_kernel_file_setup(const char *, loff_t, unsigned long);
2230:	int shmem_lock(struct file *, int, struct user_struct *);
2343:	bool shmem_mapping(struct address_space *);
2481:	int shmem_mcopy_atomic_pte(struct mm_struct *, pmd_t *, struct vm_area_struct *, unsigned long, unsigned long, struct page **);
2492:	int shmem_mfill_zeropage_pte(struct mm_struct *, pmd_t *, struct vm_area_struct *, unsigned long);
809:	unsigned long shmem_partial_swap_usage(struct address_space *, unsigned long, unsigned long);
4237:	struct page *shmem_read_mapping_page_gfp(struct address_space *, unsigned long, gfp_t);
841:	unsigned long shmem_swap_usage(struct vm_area_struct *);
1057:	void shmem_truncate_range(struct inode *, loff_t, loff_t);
424:	void shmem_uncharge(struct inode *, long);
871:	void shmem_unlock_mapping(struct address_space *);
1315:	int shmem_unuse(unsigned int, bool, unsigned long *);
4193:	int shmem_zero_setup(struct vm_area_struct *);
286:	bool vma_is_shmem(struct vm_area_struct *);
4115:	static struct file *__shmem_file_setup(struct vfsmount *, const char *, loff_t, unsigned long, unsigned int);
696:	static int shmem_add_to_page_cache(struct page *, struct address_space *, unsigned long, void *, gfp_t, struct mm_struct *);
1573:	static struct page *shmem_alloc_and_acct_page(gfp_t, struct inode *, unsigned long, bool, int);
1535:	static struct page *shmem_alloc_hugepage(gfp_t, struct shmem_inode_info *, unsigned long, int);
3760:	static struct inode *shmem_alloc_inode(struct super_block *);
1559:	static struct page *shmem_alloc_page(gfp_t, struct shmem_inode_info *, unsigned long, int);
2919:	static int shmem_create(struct inode *, struct dentry *, umode_t, bool);
769:	static void shmem_delete_from_page_cache(struct page *, void *);
3776:	static void shmem_destroy_inode(struct inode *);
3958:	static ssize_t shmem_enabled_show(struct kobject *, struct kobj_attribute *, char *);
3981:	static ssize_t shmem_enabled_store(struct kobject *, struct kobj_attribute *, const char *, size_t);
3311:	static int shmem_encode_fh(struct inode *, __u32 *, int *, struct inode *);
1151:	static void shmem_evict_inode(struct inode *);
2700:	static long shmem_fallocate(struct file *, int, loff_t, loff_t);
2040:	static vm_fault_t shmem_fault(struct vm_fault *);
3288:	static struct dentry *shmem_fh_to_dentry(struct super_block *, struct fid *, int, int);
2680:	static loff_t shmem_file_llseek(struct file *, loff_t, int);
2570:	static ssize_t shmem_file_read_iter(struct kiocb *, struct iov_iter *);
3647:	static int shmem_fill_super(struct super_block *, struct fs_context *);
1188:	static int shmem_find_swap_entries(struct address_space *, unsigned long, unsigned int, struct page **, unsigned long *, unsigned int, bool);
3738:	static void shmem_free_fc(struct fs_context *);
3769:	static void shmem_free_in_core_inode(struct inode *);
369:	static void shmem_free_inode(struct super_block *, struct super_block *);
790:	static int shmem_free_swap(struct address_space *, unsigned long, void *);
2280:	static struct inode *shmem_get_inode(struct super_block *, const struct inode *, umode_t, dev_t, unsigned long);
3134:	static const char *shmem_get_link(struct dentry *, struct inode *, struct delayed_call *);
3266:	static struct dentry *shmem_get_parent(struct dentry *);
2219:	static struct mempolicy *shmem_get_policy(struct vm_area_struct *, unsigned long);
3733:	static int shmem_get_tree(struct fs_context *);
1064:	static int shmem_getattr(const struct path *, struct kstat *, u32, unsigned int);
1795:	static int shmem_getpage_gfp(struct inode *, unsigned long, struct page **, enum sgp_type, gfp_t, struct vm_area_struct *, struct vm_fault *, vm_fault_t *);
3782:	static void shmem_init_inode(void *);
3169:	static int shmem_initxattrs(struct inode *, const struct xattr *, void *);
2928:	static int shmem_link(struct dentry *, struct inode *, struct dentry *);
3245:	static ssize_t shmem_listxattr(struct dentry *, char *, size_t);
3271:	static int shmem_match(struct inode *, void *);
2348:	static int shmem_mfill_atomic_pte(struct mm_struct *, pmd_t *, struct vm_area_struct *, unsigned long, unsigned long, bool, struct page **);
2909:	static int shmem_mkdir(struct inode *, struct dentry *, umode_t);
2857:	static int shmem_mknod(struct inode *, struct dentry *, umode_t, dev_t);
2258:	static int shmem_mmap(struct file *, struct vm_area_struct *);
509:	static int shmem_parse_huge(const char *);
3382:	static int shmem_parse_one(struct fs_context *, struct fs_parameter *);
3471:	static int shmem_parse_options(struct fs_context *, void *);
3128:	static void shmem_put_link(void *);
3636:	static void shmem_put_super(struct super_block *);
391:	static void shmem_recalc_inode(struct inode *);
3522:	static int shmem_reconfigure(struct fs_context *);
3034:	static int shmem_rename2(struct inode *, struct dentry *, struct inode *, struct dentry *, unsigned int);
1622:	static int shmem_replace_page(struct page **, gfp_t, struct shmem_inode_info *, unsigned long);
304:	static int shmem_reserve_inode(struct super_block *, ino_t *);
2970:	static int shmem_rmdir(struct inode *, struct dentry *);
2213:	static int shmem_set_policy(struct vm_area_struct *, struct mempolicy *);
1084:	static int shmem_setattr(struct dentry *, struct iattr *);
3585:	static int shmem_show_options(struct seq_file *, struct dentry *);
2832:	static int shmem_statfs(struct dentry *, struct kstatfs *);
1519:	static struct page *shmem_swapin(swp_entry_t, gfp_t, struct shmem_inode_info *, unsigned long);
1695:	static int shmem_swapin_page(struct inode *, unsigned long, struct page **, enum sgp_type, gfp_t, struct vm_area_struct *, vm_fault_t *);
3075:	static int shmem_symlink(struct inode *, struct dentry *, const char *);
2886:	static int shmem_tmpfile(struct inode *, struct dentry *, umode_t);
919:	static void shmem_undo_range(struct inode *, loff_t, loff_t, bool);
2956:	static int shmem_unlink(struct inode *, struct dentry *);
1267:	static int shmem_unuse_inode(struct inode *, unsigned int, bool, unsigned long *);
1235:	static int shmem_unuse_swap_entries(struct inode *, struct pagevec, unsigned long *);
667:	static long shmem_unused_huge_count(struct super_block *, struct shrink_control *);
656:	static long shmem_unused_huge_scan(struct super_block *, struct shrink_control *);
550:	static unsigned long shmem_unused_huge_shrink(struct shmem_sb_info *, struct shrink_control *, unsigned long);
2514:	static int shmem_write_begin(struct file *, struct address_space *, loff_t, unsigned int, unsigned int, struct page **, void **);
2535:	static int shmem_write_end(struct file *, struct address_space *, loff_t, unsigned int, unsigned int, struct page *, void *);
1360:	static int shmem_writepage(struct page *, struct writeback_control *);
3202:	static int shmem_xattr_handler_get(const struct xattr_handler *, struct dentry *, struct inode *, const char *, void *, size_t);
3212:	static int shmem_xattr_handler_set(const struct xattr_handler *, struct dentry *, struct inode *, const char *, const void *, size_t, int);
2033:	static int synchronous_wake_function(wait_queue_entry_t *, unsigned int, int, void *);

File mm/shuffle.c:
154:	void __shuffle_free_memory(pg_data_t *);
81:	void __shuffle_zone(struct zone *);
162:	bool shuffle_pick_tail(void);
15:	static int shuffle_show(char *, const struct kernel_param *);
20:	static int shuffle_store(const char *, const struct kernel_param *);
37:	static struct page *shuffle_valid_page(struct zone *, unsigned long, int);

File mm/slab_common.c:
118:	int __kmem_cache_alloc_bulk(struct kmem_cache *, gfp_t, size_t, void **);
106:	void __kmem_cache_free_bulk(struct kmem_cache *, size_t, void **);
866:	int cache_random_seq_create(struct kmem_cache *, unsigned int, gfp_t);
886:	void cache_random_seq_destroy(struct kmem_cache *);
529:	void create_boot_cache(struct kmem_cache *, const char *, unsigned int, slab_flags_t, unsigned int, unsigned int);
559:	struct kmem_cache *create_kmalloc_cache(const char *, unsigned int, slab_flags_t, unsigned int, unsigned int);
754:	void create_kmalloc_caches(slab_flags_t);
966:	void dump_unreclaimable_slab(void);
185:	struct kmem_cache *find_mergeable(unsigned int, unsigned int, slab_flags_t, const char *, void (*)(void *));
1115:	void kfree_sensitive(const void *);
797:	gfp_t kmalloc_fix_flags(gfp_t);
814:	void *kmalloc_order(size_t, gfp_t, unsigned int);
837:	void *kmalloc_order_trace(size_t, gfp_t, unsigned int);
621:	struct kmem_cache *kmalloc_slab(size_t, gfp_t);
400:	struct kmem_cache *kmem_cache_create(const char *, unsigned int, unsigned int, slab_flags_t, void (*)(void *));
301:	struct kmem_cache *kmem_cache_create_usercopy(const char *, unsigned int, unsigned int, slab_flags_t, unsigned int, unsigned int, void (*)(void *));
477:	void kmem_cache_destroy(struct kmem_cache *);
510:	int kmem_cache_shrink(struct kmem_cache *);
82:	unsigned int kmem_cache_size(struct kmem_cache *);
1087:	void *krealloc(const void *, size_t, gfp_t);
1141:	size_t ksize(const void *);
1001:	int memcg_slab_show(struct seq_file *, void *);
701:	void setup_kmalloc_cache_index_table(void);
1179:	int should_failslab(struct kmem_cache *, gfp_t);
522:	bool slab_is_available(void);
470:	void slab_kmem_cache_release(struct kmem_cache *);
927:	void *slab_next(struct seq_file *, void *, loff_t *);
921:	void *slab_start(struct seq_file *, loff_t *);
932:	void slab_stop(struct seq_file *, void *);
165:	int slab_unmergeable(struct kmem_cache *);
937:	static void cache_show(struct kmem_cache *, struct seq_file *);
232:	static struct kmem_cache *create_cache(const char *, unsigned int, unsigned int, slab_flags_t, unsigned int, unsigned int, void (*)(void *), struct kmem_cache *);
738:	static void new_kmalloc_cache(int, enum kmalloc_cache_type, slab_flags_t);
67:	static int setup_slab_nomerge(char *);
441:	static int shutdown_cache(struct kmem_cache *);
408:	static void slab_caches_to_rcu_destroy_workfn(struct work_struct *);
1045:	static int slab_proc_init(void);
956:	static int slab_show(struct seq_file *, void *);
1031:	static int slabinfo_open(struct inode *, struct file *);

File mm/slub.c:
4086:	void __check_heap_object(const void *, unsigned long, struct page *, bool);
4005:	void *__kmalloc(size_t, gfp_t);
4046:	void *__kmalloc_node(size_t, gfp_t, int);
4536:	void *__kmalloc_node_track_caller(size_t, gfp_t, int, unsigned long);
4513:	void *__kmalloc_track_caller(size_t, gfp_t, unsigned long);
4469:	struct kmem_cache *__kmem_cache_alias(const char *, unsigned int, unsigned int, slab_flags_t, void (*)(void *));
4494:	int __kmem_cache_create(struct kmem_cache *, slab_flags_t);
3944:	bool __kmem_cache_empty(struct kmem_cache *);
3621:	void __kmem_cache_release(struct kmem_cache *);
4189:	int __kmem_cache_shrink(struct kmem_cache *);
3958:	int __kmem_cache_shutdown(struct kmem_cache *);
4141:	size_t __ksize(const void *);
146:	void *fixup_red_left(struct kmem_cache *, void *);
5798:	void get_slabinfo(struct kmem_cache *, struct slabinfo *);
4159:	void kfree(const void *);
2934:	void *kmem_cache_alloc(struct kmem_cache *, gfp_t);
3326:	int kmem_cache_alloc_bulk(struct kmem_cache *, gfp_t, size_t, void **);
2957:	void *kmem_cache_alloc_node(struct kmem_cache *, gfp_t, int);
2969:	void *kmem_cache_alloc_node_trace(struct kmem_cache *, gfp_t, int, size_t);
2946:	void *kmem_cache_alloc_trace(struct kmem_cache *, gfp_t, size_t);
1434:	slab_flags_t kmem_cache_flags(unsigned int, slab_flags_t, const char *);
3190:	void kmem_cache_free(struct kmem_cache *, void *);
3307:	void kmem_cache_free_bulk(struct kmem_cache *, size_t, void **);
4409:	void kmem_cache_init(void);
4464:	void kmem_cache_init_late(void);
752:	void object_err(struct kmem_cache *, struct page *, u8 *, char *);
653:	void print_tracking(struct kmem_cache *, void *);
5820:	void slabinfo_show_stats(struct seq_file *, struct kmem_cache *);
5824:	ssize_t slabinfo_write(struct file *, const char *, size_t, loff_t *);
5711:	void sysfs_slab_release(struct kmem_cache *);
5705:	void sysfs_slab_unlink(struct kmem_cache *);
2686:	static void *___slab_alloc(struct kmem_cache *, gfp_t, int, unsigned long, struct kmem_cache_cpu *);
1860:	static void __free_slab(struct kmem_cache *, struct page *);
2993:	static void __slab_free(struct kmem_cache *, struct page *, void *, void *, int, unsigned long);
4700:	static int add_location(struct loc_track *, const struct track *, struct kmem_cache *);
5167:	static ssize_t aliases_show(struct kmem_cache *, char *);
5092:	static ssize_t align_show(struct kmem_cache *, char *);
5329:	static ssize_t alloc_calls_show(struct kmem_cache *, char *);
1167:	static int alloc_debug_processing(struct kmem_cache *, struct page *, void *, unsigned long);
4680:	static int alloc_loc_track(struct loc_track *, unsigned long, gfp_t);
1771:	static struct page *allocate_slab(struct kmem_cache *, gfp_t, int);
4380:	static struct kmem_cache *bootstrap(struct kmem_cache *);
5245:	static ssize_t cache_dma_show(struct kmem_cache *, char *);
3699:	static int calculate_sizes(struct kmem_cache *, int);
796:	static int check_bytes_and_report(struct kmem_cache *, struct page *, u8 *, char *, u8 *, unsigned int, unsigned int);
916:	static int check_object(struct kmem_cache *, struct page *, void *, u8);
972:	static int check_slab(struct kmem_cache *, struct page *);
2526:	static int count_free(struct page *);
2538:	static unsigned long count_partial(struct kmem_cache_node *, int (*)(struct page *));
5136:	static ssize_t cpu_partial_show(struct kmem_cache *, char *);
5141:	static ssize_t cpu_partial_store(struct kmem_cache *, const char *, size_t);
5179:	static ssize_t cpu_slabs_show(struct kmem_cache *, char *);
5618:	static char *create_unique_id(struct kmem_cache *);
5159:	static ssize_t ctor_show(struct kmem_cache *, char *);
2186:	static void deactivate_slab(struct kmem_cache *, struct page *, void *, struct kmem_cache_cpu *);
5258:	static ssize_t destroy_by_rcu_show(struct kmem_cache *, char *);
1899:	static void discard_slab(struct kmem_cache *, struct page *);
3573:	static void early_kmem_cache_node_alloc(int);
2473:	static void flush_cpu_slab(void *);
5337:	static ssize_t free_calls_show(struct kmem_cache *, char *);
1230:	static int free_debug_processing(struct kmem_cache *, struct page *, void *, void *, int, unsigned long);
4673:	static void free_loc_track(struct loc_track *);
3922:	static void free_partial(struct kmem_cache *, struct kmem_cache_node *);
2034:	static void *get_any_partial(struct kmem_cache *, gfp_t, struct kmem_cache_cpu *);
469:	static unsigned long *get_map(struct kmem_cache *, struct page *);
1985:	static void *get_partial_node(struct kmem_cache *, struct kmem_cache_node *, struct kmem_cache_cpu *, gfp_t);
2480:	static bool has_cpu_slab(int, void *);
5238:	static ssize_t hwcache_align_show(struct kmem_cache *, char *);
1664:	static int init_cache_random_seq(struct kmem_cache *);
3628:	static int init_kmem_cache_nodes(struct kmem_cache *);
773:	static void init_object(struct kmem_cache *, void *, u8);
4029:	static void *kmalloc_large_node(size_t, gfp_t, int);
3835:	static int kmem_cache_open(struct kmem_cache *, slab_flags_t);
5590:	static void kmem_cache_release(struct kobject *);
4790:	static int list_locations(struct kmem_cache *, char *, enum track_item);
3893:	static void list_slab_objects(struct kmem_cache *, struct page *, const char *);
5116:	static ssize_t min_partial_show(struct kmem_cache *, char *);
5121:	static ssize_t min_partial_store(struct kmem_cache *, const char *, size_t);
5098:	static ssize_t object_size_show(struct kmem_cache *, char *);
5191:	static ssize_t objects_partial_show(struct kmem_cache *, char *);
5185:	static ssize_t objects_show(struct kmem_cache *, char *);
5104:	static ssize_t objs_per_slab_show(struct kmem_cache *, char *);
1003:	static int on_freelist(struct kmem_cache *, struct page *, void *);
5110:	static ssize_t order_show(struct kmem_cache *, char *);
1293:	static char *parse_slub_debug_flags(char *, slab_flags_t *, char **, bool);
5173:	static ssize_t partial_show(struct kmem_cache *, char *);
5296:	static ssize_t poison_show(struct kmem_cache *, char *);
663:	static void print_page_info(struct page *);
561:	static void print_section(char *, char *, u8 *, unsigned int);
634:	static void print_track(struct track *, unsigned long, const char *);
713:	static void print_trailer(struct kmem_cache *, struct page *, u8 *);
4776:	static void process_slab(struct loc_track *, struct kmem_cache *, struct page *, enum track_item);
2398:	static void put_cpu_partial(struct kmem_cache *, struct page *, int);
487:	static void put_map(unsigned long *);
1884:	static void rcu_free_slab(struct callback_head *);
5232:	static ssize_t reclaim_account_show(struct kmem_cache *, char *);
5289:	static ssize_t red_zone_show(struct kmem_cache *, char *);
5371:	static ssize_t remote_node_defrag_ratio_show(struct kmem_cache *, char *);
5376:	static ssize_t remote_node_defrag_ratio_store(struct kmem_cache *, const char *, size_t);
1083:	static void remove_full(struct page *, struct kmem_cache_node *, struct kmem_cache *);
789:	static void restore_bytes(struct kmem_cache *, u8, void *, void *, char *);
5277:	static ssize_t sanity_checks_show(struct kmem_cache *, char *);
600:	static void set_track(void *, enum track_item, unsigned long, struct kmem_cache *, struct kmem_cache *);
1629:	static void *setup_object(struct kmem_cache *, void *, struct page *);
1370:	static int setup_slub_debug(char *);
3986:	static int setup_slub_max_order(char *);
4950:	static int setup_slub_memcg_sysfs(char *);
3996:	static int setup_slub_min_objects(char *);
3977:	static int setup_slub_min_order(char *);
4963:	static ssize_t show_slab_objects(struct kmem_cache *, char *, unsigned long);
5359:	static ssize_t shrink_store(struct kmem_cache *, const char *, size_t);
5553:	static ssize_t slab_attr_show(struct kobject *, struct attribute *, char *);
5572:	static ssize_t slab_attr_store(struct kobject *, struct attribute *, const char *, size_t);
671:	static void slab_bug(struct kmem_cache *, char *, ...);
759:	static void slab_err(struct kmem_cache *, struct page *, const char *, ...);
687:	static void slab_fix(struct kmem_cache *, char *, ...);
4338:	static int slab_memory_callback(struct notifier_block *, unsigned long, void *);
2554:	static void slab_out_of_memory(struct kmem_cache *, gfp_t, int);
880:	static int slab_pad_check(struct kmem_cache *, struct page *);
5086:	static ssize_t slab_size_show(struct kmem_cache *, char *);
5752:	static int slab_sysfs_init(void);
5197:	static ssize_t slabs_cpu_partial_show(struct kmem_cache *, char *);
5265:	static ssize_t slabs_show(struct kmem_cache *, char *);
2497:	static int slub_cpu_dead(unsigned int);
5303:	static ssize_t store_user_show(struct kmem_cache *, char *);
5651:	static int sysfs_slab_add(struct kmem_cache *);
5729:	static int sysfs_slab_alias(struct kmem_cache *, const char *);
5271:	static ssize_t total_objects_show(struct kmem_cache *, char *);
1052:	static void trace(struct kmem_cache *, struct page *, void *, int);
5283:	static ssize_t trace_show(struct kmem_cache *, char *);
2330:	static void unfreeze_partials(struct kmem_cache *, struct kmem_cache_cpu *);
5252:	static ssize_t usersize_show(struct kmem_cache *, char *);
5310:	static ssize_t validate_show(struct kmem_cache *, char *);
4580:	static void validate_slab(struct kmem_cache *, struct page *);
4605:	static int validate_slab_node(struct kmem_cache *, struct kmem_cache_node *);
5315:	static ssize_t validate_store(struct kmem_cache *, const char *, size_t);

File mm/sparse-vmemmap.c:
605:	struct page *__populate_section_memmap(unsigned long, unsigned long, int, struct vmem_altmap *);
402:	void *vmemmap_alloc_block(unsigned long, int);
430:	void *vmemmap_alloc_block_buf(unsigned long, int, struct vmem_altmap *);
549:	p4d_t *vmemmap_p4d_populate(pgd_t *, unsigned long, int);
561:	pgd_t *vmemmap_pgd_populate(unsigned long, int);
525:	pmd_t *vmemmap_pmd_populate(pud_t *, unsigned long, int);
573:	int vmemmap_populate_basepages(unsigned long, unsigned long, int, struct vmem_altmap *);
497:	pte_t *vmemmap_pte_populate(pmd_t *, unsigned long, int, struct vmem_altmap *);
537:	pud_t *vmemmap_pud_populate(p4d_t *, unsigned long, int);
364:	int vmemmap_remap_alloc(unsigned long, unsigned long, unsigned long, gfp_t);
277:	int vmemmap_remap_free(unsigned long, unsigned long, unsigned long);
486:	void vmemmap_verify(pte_t *, int, unsigned long, unsigned long);
393:	static void *__earlyonly_bootmem_alloc(int, unsigned long, unsigned long, unsigned long);
56:	static int split_vmemmap_huge_pmd(pmd_t *, unsigned long, struct vmemmap_remap_walk *);
514:	static void *vmemmap_alloc_block_zero(int, unsigned long);
158:	static int vmemmap_p4d_range(pgd_t *, unsigned long, unsigned long, struct vmemmap_remap_walk *);
115:	static int vmemmap_pmd_range(unsigned long, unsigned long, struct vmemmap_remap_walk *, pud_t *, pud_t *);
233:	static void vmemmap_remap_pte(pte_t *, unsigned long, struct vmemmap_remap_walk *);
178:	static int vmemmap_remap_range(unsigned long, unsigned long, struct vmemmap_remap_walk *);
248:	static void vmemmap_restore_pte(pte_t *, unsigned long, struct vmemmap_remap_walk *);

File mm/sparse.c:
113:	unsigned long __section_nr(struct mem_section *);
343:	size_t mem_section_usage_size(void);
155:	void mminit_validate_memmodel_limits(unsigned long *, unsigned long *);
631:	void offline_mem_sections(unsigned long, unsigned long);
612:	void online_mem_sections(unsigned long, unsigned long);
907:	int sparse_add_section(int, unsigned long, unsigned long, struct vmem_altmap *);
498:	void *sparse_buffer_alloc(unsigned long);
320:	struct page *sparse_decode_mem_map(unsigned long, unsigned long);
578:	void sparse_init(void);
968:	void sparse_remove_section(struct mem_section *, unsigned long, unsigned long, unsigned long, struct vmem_altmap *);
221:	void subsection_map_init(unsigned long, unsigned long);
516:	void vmemmap_populate_print_last(void);
378:	static void check_usemap_section_nr(int, struct mem_section_usage *);
675:	static int clear_subsection_map(unsigned long, unsigned long);
253:	static void memory_present(int, unsigned long, unsigned long);
847:	static struct page *section_activate(int, unsigned long, unsigned long, struct vmem_altmap *);
799:	static void section_deactivate(unsigned long, unsigned long, struct vmem_altmap *);
190:	static void section_mark_present(struct mem_section *);
489:	static void sparse_buffer_fini(void);
63:	static struct mem_section *sparse_index_alloc(int);
82:	static int sparse_index_init(unsigned long, int);
524:	static void sparse_init_nid(int, unsigned long, unsigned long, unsigned long);
328:	static void sparse_init_one_section(struct mem_section *, unsigned long, struct page *, struct mem_section_usage *, unsigned long);
212:	static void subsection_mask_set(unsigned long *, unsigned long, unsigned long);

File mm/swap.c:
1013:	void __pagevec_lru_add(struct pagevec *);
945:	void __pagevec_release(struct pagevec *);
114:	void __put_page(struct page *);
652:	void deactivate_file_page(struct page *);
681:	void deactivate_page(struct page *);
193:	int get_kernel_page(unsigned long, int, struct page **);
165:	int get_kernel_pages(const struct kvec *, int, int, struct page **);
717:	void lru_add_drain(void);
748:	void lru_add_drain_all(void);
611:	void lru_add_drain_cpu(int);
724:	void lru_add_drain_cpu_zone(struct zone *);
454:	void lru_cache_add(struct page *);
478:	void lru_cache_add_inactive_or_unevictable(struct page *, struct vm_area_struct *);
262:	void lru_note_cost(struct lruvec *, bool, unsigned int);
302:	void lru_note_cost_page(struct page *);
414:	void mark_page_accessed(struct page *);
702:	void mark_page_lazyfree(struct page *);
1072:	unsigned int pagevec_lookup_range(struct pagevec *, struct address_space *, unsigned long *, unsigned long);
1091:	unsigned int pagevec_lookup_range_nr_tag(struct pagevec *, struct address_space *, unsigned long *, unsigned long, xa_mark_t, unsigned int);
1081:	unsigned int pagevec_lookup_range_tag(struct pagevec *, struct address_space *, unsigned long *, unsigned long, xa_mark_t);
1040:	void pagevec_remove_exceptionals(struct pagevec *);
1119:	void put_devmap_managed_page(struct page *);
140:	void put_pages_list(struct list_head *);
856:	void release_pages(struct page **, int);
246:	void rotate_reclaimable_page(struct page *);
1103:	void swap_setup(void);
308:	static void __activate_page(struct page *, struct lruvec *);
79:	static void __page_cache_release(struct page *);
956:	static void __pagevec_lru_add_fn(struct page *, struct lruvec *);
340:	static void activate_page(struct page *);
736:	static void lru_add_drain_per_cpu(struct work_struct *);
520:	static void lru_deactivate_file_fn(struct page *, struct lruvec *);
564:	static void lru_deactivate_fn(struct page *, struct lruvec *);
581:	static void lru_lazyfree_fn(struct page *, struct lruvec *);
204:	static void pagevec_lru_move_fn(struct pagevec *, void (*)(struct page *, struct lruvec *));
229:	static void pagevec_move_tail_fn(struct page *, struct lruvec *);

File mm/swap_cgroup.c:
162:	unsigned short lookup_swap_cgroup_id(swp_entry_t);
97:	unsigned short swap_cgroup_cmpxchg(swp_entry_t, unsigned short, unsigned short);
126:	unsigned short swap_cgroup_record(swp_entry_t, unsigned short, unsigned int);
203:	void swap_cgroup_swapoff(int);
167:	int swap_cgroup_swapon(int, unsigned long);

File mm/swap_slots.c:
69:	void disable_swap_slots_cache_lock(void);
240:	void enable_swap_slots_cache(void);
274:	int free_swap_slot(swp_entry_t);
306:	swp_entry_t get_swap_page(struct page *);
86:	void reenable_swap_slots_cache_unlock(void);
114:	static int alloc_swap_slot_cache(unsigned int);
169:	static void drain_slots_cache_cpu(unsigned int, bool, unsigned int);
232:	static int free_slot_cache(unsigned int);

File mm/swap_state.c:
177:	void __delete_from_swap_cache(struct page *, swp_entry_t, void *);
441:	struct page *__read_swap_cache_async(swp_entry_t, gfp_t, struct vm_area_struct *, unsigned long, bool *);
208:	int add_to_swap(struct page *);
126:	int add_to_swap_cache(struct page *, swp_entry_t, gfp_t, void **);
277:	void clear_shadow_from_swap_cache(int, unsigned long, unsigned long);
264:	void delete_from_swap_cache(struct page *);
720:	void exit_swap_address_space(unsigned int);
417:	struct page *find_get_incore_page(struct address_space *, unsigned long);
325:	void free_page_and_swap_cache(struct page *);
336:	void free_pages_and_swap_cache(struct page **, int);
110:	void *get_shadow_from_swap_cache(swp_entry_t);
697:	int init_swap_address_space(unsigned int, unsigned long);
358:	struct page *lookup_swap_cache(swp_entry_t, struct vm_area_struct *, unsigned long);
547:	struct page *read_swap_cache_async(swp_entry_t, gfp_t, struct vm_area_struct *, unsigned long, bool);
99:	void show_swap_cache_info(void);
639:	struct page *swap_cluster_readahead(swp_entry_t, gfp_t, struct vm_fault *);
881:	struct page *swapin_readahead(swp_entry_t, gfp_t, struct vm_fault *);
71:	unsigned long total_swapcache_pages(void);
921:	static int swap_init_sysfs(void);
740:	static void swap_ra_info(struct vm_fault *, struct vma_swap_readahead *);
822:	static struct page *swap_vma_readahead(swp_entry_t, gfp_t, struct vm_fault *);
890:	static ssize_t vma_ra_enabled_show(struct kobject *, struct kobj_attribute *, char *);
895:	static ssize_t vma_ra_enabled_store(struct kobject *, struct kobj_attribute *, const char *, size_t);

File mm/swapfile.c:
2564:	long __ia32_sys_swapoff(const struct pt_regs *);
3164:	long __ia32_sys_swapon(const struct pt_regs *);
3577:	unsigned long __page_file_index(struct page *);
3571:	struct address_space *__page_file_mapping(struct page *);
1506:	int __swap_count(swp_entry_t);
1537:	int __swp_swapcount(swp_entry_t);
2564:	long __x64_sys_swapoff(const struct pt_regs *);
3164:	long __x64_sys_swapon(const struct pt_regs *);
3599:	int add_swap_count_continuation(swp_entry_t, gfp_t);
2360:	int add_swap_extent(struct swap_info_struct *, unsigned long, unsigned long, sector_t);
3814:	void cgroup_throttle_swaprate(struct page *, gfp_t);
1883:	unsigned int count_swap_pages(int, int);
1845:	int find_first_swap(dev_t *);
1790:	int free_swap_and_cache(swp_entry_t);
2981:	unsigned long generic_max_swapfile_size(void);
1306:	struct swap_info_struct *get_swap_device(swp_entry_t);
1136:	swp_entry_t get_swap_page_of_type(int);
1050:	int get_swap_pages(int, swp_entry_t *, int);
2553:	bool has_usable_swap(void);
2323:	sector_t map_swap_page(struct page *, struct block_device **);
2988:	unsigned long max_swapfile_size(void);
3562:	struct swap_info_struct *page_swap_info(struct page *);
1487:	int page_swapcount(struct page *);
1383:	void put_swap_page(struct page *, swp_entry_t);
1711:	bool reuse_swap_page(struct page *, int *);
3427:	void si_swapinfo(struct sysinfo *);
1431:	int split_swap_cluster(swp_entry_t);
3535:	int swap_duplicate(swp_entry_t);
1371:	void swap_free(swp_entry_t);
223:	sector_t swap_page_sector(struct page *);
3523:	void swap_shmem_alloc(swp_entry_t);
1818:	int swap_type_of(dev_t, sector_t);
1454:	void swapcache_free_entries(swp_entry_t *, int);
3552:	int swapcache_prepare(swp_entry_t);
1867:	sector_t swapdev_block(int, unsigned long);
3557:	struct swap_info_struct *swp_swap_info(swp_entry_t);
1554:	int swp_swapcount(swp_entry_t);
1751:	int try_to_free_swap(struct page *);
2172:	int try_to_unuse(unsigned int, bool, unsigned long);
665:	static void __del_from_avail_list(struct swap_info_struct *);
2564:	static long __se_sys_swapoff(long);
3164:	static long __se_sys_swapon(long, long);
3455:	static int __swap_duplicate(swp_entry_t, unsigned char);
1334:	static unsigned char __swap_entry_free(struct swap_info_struct *, swp_entry_t);
1231:	static unsigned char __swap_entry_free_locked(struct swap_info_struct *, unsigned long, unsigned char);
126:	static int __try_to_reclaim_swap(struct swap_info_struct *, unsigned long, unsigned long);
2499:	static void _enable_swap_info(struct swap_info_struct *);
1188:	static struct swap_info_struct *_swap_info_get(swp_entry_t);
697:	static void add_to_avail_list(struct swap_info_struct *);
2881:	static struct swap_info_struct *alloc_swap_info(void);
412:	static void cluster_list_add_tail(struct swap_cluster_list *, struct swap_cluster_info *, unsigned int);
673:	static void del_from_avail_list(struct swap_info_struct *);
2333:	static void destroy_swap_extents(struct swap_info_struct *);
170:	static int discard_swap(struct swap_info_struct *);
2286:	static void drain_mmlist(void);
2520:	static void enable_swap_info(struct swap_info_struct *, int, unsigned char *, struct swap_cluster_info *, unsigned long *);
3795:	static void free_swap_count_continuations(struct swap_info_struct *);
547:	static void inc_cluster_info_page(struct swap_info_struct *, struct swap_cluster_info *, unsigned long);
2306:	static sector_t map_swap_entry(swp_entry_t, struct block_device **);
2873:	static int max_swapfiles_check(void);
204:	static struct swap_extent *offset_to_swap_extent(struct swap_info_struct *, unsigned long);
1639:	static int page_trans_huge_map_swapcount(struct page *, int *, int *);
2864:	static int procswaps_init(void);
2993:	static unsigned long read_swap_header(struct swap_info_struct *, union swap_header *, struct inode *);
2543:	static void reinsert_swap_info(struct swap_info_struct *);
770:	static int scan_swap_map_slots(struct swap_info_struct *, unsigned char, int, swp_entry_t *);
611:	static bool scan_swap_map_try_ssd_cluster(struct swap_info_struct *, unsigned long *, unsigned long *);
2430:	static int setup_swap_extents(struct swap_info_struct *, sector_t *);
2470:	static void setup_swap_info(struct swap_info_struct *, int, unsigned char *, struct swap_cluster_info *);
3069:	static int setup_swap_map_and_extents(struct swap_info_struct *, union swap_header *, unsigned char *, struct swap_cluster_info *, unsigned long, sector_t *);
987:	static int swap_alloc_cluster(struct swap_info_struct *, swp_entry_t *);
452:	static void swap_cluster_schedule_discard(struct swap_info_struct *, unsigned int);
3711:	static bool swap_count_continued(struct swap_info_struct *, unsigned long, unsigned char);
504:	static void swap_discard_work(struct work_struct *);
481:	static void swap_do_scheduled_discard(struct swap_info_struct *);
1350:	static void swap_entry_free(struct swap_info_struct *, swp_entry_t);
1022:	static void swap_free_cluster(struct swap_info_struct *, unsigned long);
2782:	static void *swap_next(struct seq_file *, void *, loff_t *);
1596:	static bool swap_page_trans_huge_swapped(struct swap_info_struct *, swp_entry_t);
709:	static void swap_range_free(struct swap_info_struct *, unsigned long, unsigned int);
2807:	static int swap_show(struct seq_file *, void *);
2761:	static void *swap_start(struct seq_file *, loff_t *);
2802:	static void swap_stop(struct seq_file *, void *);
1520:	static int swap_swapcount(struct swap_info_struct *, swp_entry_t);
3844:	static int swapfile_init(void);
2841:	static int swaps_open(struct inode *, struct file *);
2746:	static __poll_t swaps_poll(struct file *, poll_table *);
1447:	static int swp_entry_cmp(const void *, const void *);
2116:	static int unuse_mm(struct mm_struct *, unsigned int, bool, unsigned long *);
1914:	static int unuse_pte(struct vm_area_struct *, pmd_t *, unsigned long, swp_entry_t, struct page *);
1954:	static int unuse_pte_range(struct vm_area_struct *, pmd_t *, unsigned long, unsigned long, unsigned int, bool, unsigned long *);
2093:	static int unuse_vma(struct vm_area_struct *, unsigned int, bool, unsigned long *);

File mm/truncate.c:
146:	void do_invalidatepage(struct page *, unsigned int, unsigned int);
226:	int generic_error_remove_page(struct address_space *, struct page *);
246:	int invalidate_inode_page(struct page *);
722:	int invalidate_inode_pages2(struct address_space *);
631:	int invalidate_inode_pages2_range(struct address_space *, unsigned long, unsigned long);
533:	unsigned long invalidate_mapping_pages(struct address_space *, unsigned long, unsigned long);
569:	void invalidate_mapping_pagevec(struct address_space *, unsigned long, unsigned long, unsigned long *);
558:	unsigned long node_invalidate_mapping_pages(struct address_space *, int, unsigned long, unsigned long);
806:	void pagecache_isize_extended(struct inode *, loff_t, loff_t);
211:	int truncate_inode_page(struct address_space *, struct page *);
422:	void truncate_inode_pages(struct address_space *, loff_t);
437:	void truncate_inode_pages_final(struct address_space *);
282:	void truncate_inode_pages_range(struct address_space *, loff_t, loff_t);
743:	void truncate_pagecache(struct inode *, loff_t);
851:	void truncate_pagecache_range(struct inode *, loff_t, loff_t);
776:	void truncate_setsize(struct inode *, loff_t);
467:	static unsigned long __invalidate_mapping_pages(struct address_space *, unsigned long, unsigned long, unsigned long *, int);
45:	static void clear_shadow_entry(struct address_space *, unsigned long, void *);
583:	static int invalidate_complete_page2(struct address_space *, struct page *);
170:	static void truncate_cleanup_page(struct page *);
58:	static void truncate_exceptional_pvec_entries(struct address_space *, struct pagevec *, unsigned long *);

File mm/usercopy.c:
258:	void __check_object_size(const void *, unsigned long, bool);
83:	void usercopy_abort(const char *, const char *, bool, unsigned long, unsigned long);
72:	void usercopy_warn(const char *, const char *, bool, unsigned long, unsigned long);
34:	static int check_stack_object(const void *, unsigned long);
297:	static int parse_hardened_usercopy(char *);
304:	static int set_hardened_usercopy(void);

File mm/userfaultfd.c:
651:	ssize_t mcopy_atomic(struct mm_struct *, unsigned long, unsigned long, unsigned long, bool *, __u64);
659:	ssize_t mfill_zeropage(struct mm_struct *, unsigned long, unsigned long, bool *);
665:	int mwriteprotect_range(struct mm_struct *, unsigned long, unsigned long, bool, bool *);
51:	static int mcopy_atomic_pte(struct mm_struct *, pmd_t *, struct vm_area_struct *, unsigned long, unsigned long, struct page **, bool);
170:	static int mfill_zeropage_pte(struct vm_area_struct *, unsigned long, struct mm_struct *, pmd_t *, pmd_t *);
205:	static pmd_t *mm_alloc_pmd(struct mm_struct *, unsigned long);

File mm/util.c:
440:	int __account_locked_vm(struct mm_struct *, unsigned long, bool, struct task_struct *, bool);
737:	int __page_mapcount(struct page *);
884:	int __vm_enough_memory(struct mm_struct *, long, int);
276:	void __vma_link_list(struct mm_struct *, struct vm_area_struct *, struct vm_area_struct *);
294:	void __vma_unlink_list(struct mm_struct *, struct vm_area_struct *);
483:	int account_locked_vm(struct mm_struct *, unsigned long, bool);
937:	int get_cmdline(struct task_struct *, char *, int);
39:	void kfree_const(const void *);
126:	void *kmemdup(const void *, size_t, gfp_t);
146:	char *kmemdup_nul(const char *, size_t, gfp_t);
53:	char *kstrdup(const char *, gfp_t);
80:	const char *kstrdup_const(const char *, gfp_t);
99:	char *kstrndup(const char *, size_t, gfp_t);
608:	void kvfree(const void *);
626:	void kvfree_sensitive(const void *, size_t);
554:	void *kvmalloc_node(size_t, gfp_t, int);
635:	void *kvrealloc(const void *, size_t, size_t, gfp_t);
986:	int memcmp_pages(struct page *, struct page *);
171:	void *memdup_user(const void *, size_t);
253:	void *memdup_user_nul(const void *, size_t);
815:	int overcommit_kbytes_handler(struct ctl_table *, int, void *, size_t *, loff_t *);
779:	int overcommit_policy_handler(struct ctl_table *, int, void *, size_t *, loff_t *);
763:	int overcommit_ratio_handler(struct ctl_table *, int, void *, size_t *, loff_t *);
690:	struct anon_vma *page_anon_vma(struct page *);
671:	bool page_mapped(struct page *);
701:	struct address_space *page_mapping(struct page *);
729:	struct address_space *page_mapping_file(struct page *);
661:	void *page_rmapping(struct page *);
320:	unsigned long randomize_stack_top(unsigned long);
221:	char *strndup_user(const char *, long);
829:	unsigned long vm_commit_limit(void);
862:	unsigned long vm_memory_committed(void);
522:	unsigned long vm_mmap(struct file *, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long);
499:	unsigned long vm_mmap_pgoff(struct file *, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long);
309:	int vma_is_stack_for_current(struct vm_area_struct *);
197:	void *vmemdup_user(const void *, size_t);
774:	static void sync_overcommit_as(struct work_struct *);

File mm/vmacache.c:
61:	struct vm_area_struct *vmacache_find(struct mm_struct *, unsigned long);
35:	void vmacache_update(unsigned long, struct vm_area_struct *);

File mm/vmalloc.c:
2456:	struct vm_struct *__get_vm_area_caller(unsigned long, unsigned long, unsigned long, unsigned long, const void *);
3096:	void *__vmalloc(unsigned long, gfp_t);
3081:	void *__vmalloc_node(unsigned long, unsigned long, gfp_t, int, const void *);
2981:	void *__vmalloc_node_range(unsigned long, unsigned long, unsigned long, unsigned long, gfp_t, pgprot_t, unsigned long, int, const void *);
2501:	struct vm_struct *find_vm_area(const void *);
3707:	void free_vm_area(struct vm_struct *);
2475:	struct vm_struct *get_vm_area(unsigned long, unsigned long);
2483:	struct vm_struct *get_vm_area_caller(unsigned long, unsigned long, const void *);
77:	bool is_vmalloc_addr(const void *);
647:	int is_vmalloc_or_module_addr(const void *);
637:	int map_kernel_range(unsigned long, unsigned long, pgprot_t, struct page **);
631:	int map_kernel_range_noflush(unsigned long, unsigned long, pgprot_t, struct page **);
4049:	void pcpu_free_vm_areas(struct vm_struct **, int);
3807:	struct vm_struct **pcpu_get_vm_areas(const unsigned long *, const size_t *, int, size_t);
1603:	int register_vmap_purge_notifier(struct notifier_block *);
3698:	int remap_vmalloc_hugepage_range(struct vm_area_struct *, void *, unsigned long);
3637:	int remap_vmalloc_hugepage_range_partial(struct vm_area_struct *, unsigned long, void *, unsigned long, unsigned long);
3611:	int remap_vmalloc_range(struct vm_area_struct *, void *, unsigned long);
3550:	int remap_vmalloc_range_partial(struct vm_area_struct *, unsigned long, void *, unsigned long, unsigned long);
2522:	struct vm_struct *remove_vm_area(const void *);
1656:	void set_iounmap_nonlazy(void);
2380:	void unmap_kernel_range(unsigned long, unsigned long);
413:	void unmap_kernel_range_noflush(unsigned long, unsigned long);
1609:	int unregister_vmap_purge_notifier(struct notifier_block *);
2715:	void vfree(const void *);
2679:	void vfree_atomic(const void *);
2248:	void vm_area_add_early(struct vm_struct *);
2276:	void vm_area_register_early(struct vm_struct *, size_t);
2186:	void *vm_map_ram(struct page **, unsigned int, int);
2130:	void vm_unmap_aliases(void);
2144:	void vm_unmap_ram(const void *, unsigned int);
3115:	void *vmalloc(unsigned long);
3236:	void *vmalloc_32(unsigned long);
3252:	void *vmalloc_32_user(unsigned long);
3270:	void *vmalloc_hugepage(unsigned long);
3290:	void *vmalloc_hugepage_user(unsigned long);
2330:	void vmalloc_init(void);
3131:	void *vmalloc_no_huge(unsigned long);
3190:	void *vmalloc_node(unsigned long, int);
819:	unsigned long vmalloc_nr_pages(void);
667:	struct page *vmalloc_to_page(const void *);
727:	unsigned long vmalloc_to_pfn(const void *);
3168:	void *vmalloc_user(unsigned long);
2763:	void *vmap(struct page **, unsigned int, unsigned long, pgprot_t);
2803:	void *vmap_hugepage(struct page **, unsigned int, unsigned long, pgprot_t);
2858:	void *vmap_pfn(unsigned long *, unsigned int, pgprot_t);
304:	int vmap_range(unsigned long, unsigned long, phys_addr_t, pgprot_t, unsigned int);
3404:	long vread(char *, char *, unsigned long);
2739:	void vunmap(const void *);
3483:	long vwrite(char *, char *, unsigned long);
3152:	void *vzalloc(unsigned long);
3208:	void *vzalloc_node(unsigned long, int);
2418:	static struct vm_struct *__get_vm_area_node(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, int, gfp_t, const void *);
1664:	static bool __purge_vmap_area_lazy(unsigned long, unsigned long);
2877:	static void *__vmalloc_area_node(struct vm_struct *, gfp_t, pgprot_t, unsigned int, int);
2608:	static void __vunmap(const void *, int);
2077:	static void _vm_unmap_aliases(unsigned long, unsigned long, int);
3304:	static int aligned_vread(char *, char *, unsigned long);
3343:	static int aligned_vwrite(char *, char *, unsigned long);
1487:	static struct vmap_area *alloc_vmap_area(unsigned long, unsigned long, unsigned long, unsigned long, int, gfp_t);
1786:	static struct vmap_area *find_vmap_area(unsigned long);
1466:	static void free_vmap_area(struct vmap_area *);
1749:	static void free_vmap_area_noflush(struct vmap_area *);
810:	static void free_vmap_area_rb_augment_cb_rotate(struct rb_node *, struct rb_node *);
1935:	static void free_vmap_block(struct vmap_block *);
93:	static void free_work(struct work_struct *);
1032:	static void insert_vmap_area(struct vmap_area *, struct list_head *, struct rb_root *);
1044:	static void insert_vmap_area_augment(struct vmap_area *, struct rb_node *, struct list_head *, struct rb_root *);
1883:	static void *new_vmap_block(unsigned int, gfp_t);
4190:	static int proc_vmalloc_init(void);
1946:	static void purge_fragmented_blocks(int);
1736:	static void purge_vmap_area_lazy(void);
3766:	static unsigned long pvm_determine_end_from_reverse(struct vmap_area **, unsigned long);
4070:	static void *s_next(struct seq_file *, void *, loff_t *);
4120:	static int s_show(struct seq_file *, void *);
4060:	static void *s_start(struct seq_file *, loff_t *);
4075:	static void s_stop(struct seq_file *, void *);
58:	static int set_hugevmalloc(char *);
51:	static int set_nohugevmalloc(char *);
4107:	static void show_purge_info(struct seq_file *);
1989:	static void *vb_alloc(unsigned long, gfp_t);
2042:	static void vb_free(unsigned long, unsigned long);
2558:	static void vm_remove_mappings(struct vm_struct *, int);
2289:	static void vmap_init_free_space(void);
249:	static int vmap_p4d_range(pgd_t *, unsigned long, unsigned long, phys_addr_t, pgprot_t, unsigned int, pgtbl_mod_mask *);
500:	static int vmap_pages_p4d_range(pgd_t *, unsigned long, unsigned long, pgprot_t, struct page **, int *, pgtbl_mod_mask *);
464:	static int vmap_pages_pmd_range(pud_t *, unsigned long, unsigned long, pgprot_t, struct page **, int *, pgtbl_mod_mask *);
436:	static int vmap_pages_pte_range(pmd_t *, unsigned long, unsigned long, pgprot_t, struct page **, int *, pgtbl_mod_mask *);
545:	static int vmap_pages_range_noflush(unsigned long, unsigned long, pgprot_t, struct page **, unsigned int);
2839:	static int vmap_pfn_apply(pte_t *, unsigned long, void *);
148:	static int vmap_pmd_range(pud_t *, unsigned long, unsigned long, phys_addr_t, pgprot_t, unsigned int, pgtbl_mod_mask *);
103:	static int vmap_pte_range(pmd_t *, unsigned long, unsigned long, phys_addr_t, pgprot_t, pgtbl_mod_mask *);
198:	static int vmap_pud_range(p4d_t *, unsigned long, unsigned long, phys_addr_t, pgprot_t, unsigned int, pgtbl_mod_mask *);
275:	static int vmap_range_noflush(unsigned long, unsigned long, phys_addr_t, pgprot_t, unsigned int);
518:	static int vmap_small_pages_range_noflush(unsigned long, unsigned long, pgprot_t, struct page **);
377:	static void vunmap_p4d_range(pgd_t *, unsigned long, unsigned long, pgtbl_mod_mask *);
329:	static void vunmap_pmd_range(unsigned long, unsigned long, pgtbl_mod_mask *, pud_t *, pud_t *);
354:	static void vunmap_pud_range(unsigned long, unsigned long, pgtbl_mod_mask *, p4d_t *, p4d_t *);

File mm/vmpressure.c:
240:	void vmpressure(gfp_t, struct mem_cgroup *, bool, unsigned long, unsigned long);
462:	void vmpressure_cleanup(struct vmpressure *);
447:	void vmpressure_init(struct vmpressure *);
323:	void vmpressure_prio(gfp_t, struct mem_cgroup *, int);
362:	int vmpressure_register_event(struct mem_cgroup *, struct eventfd_ctx *, const char *);
423:	void vmpressure_unregister_event(struct mem_cgroup *, struct eventfd_ctx *);
121:	static enum vmpressure_levels vmpressure_calc_level(unsigned long, unsigned long);
181:	static void vmpressure_work_fn(struct work_struct *);

File mm/vmscan.c:
1756:	int __isolate_lru_page_prepare(struct page *, isolate_mode_t);
4652:	unsigned long __shrink_node_page_cache(int, gfp_t, unsigned long, enum page_cache_reclaim_flag);
4593:	int add_page_for_swap(struct page *, struct list_head *);
275:	int alloc_shrinker_info(struct mem_cgroup *);
4549:	void check_move_unevictable_pages(struct pagevec *);
923:	void drop_slab(void);
904:	void drop_slab_node(int);
603:	void free_prealloced_shrinker(struct shrinker *);
261:	void free_shrinker_info(struct mem_cgroup *);
4622:	struct page *get_page_from_vaddr(struct mm_struct *, unsigned long);
1975:	int isolate_lru_page(struct page *);
4313:	int kswapd_run(int);
4336:	void kswapd_stop(int);
557:	unsigned long lruvec_lru_size(struct lruvec *, enum lru_list, int);
3557:	unsigned long mem_cgroup_shrink_node(struct mem_cgroup *, gfp_t, bool, pg_data_t *, unsigned long *);
4493:	int node_reclaim(struct pglist_data *, gfp_t, unsigned int);
579:	int prealloc_shrinker(struct shrinker *);
1183:	void putback_lru_page(struct page *);
1707:	unsigned int reclaim_clean_pages_from_list(struct zone *, struct list_head *);
2327:	unsigned long reclaim_pages(struct list_head *);
624:	int register_shrinker(struct shrinker *);
616:	void register_shrinker_prepared(struct shrinker *);
1160:	int remove_mapping(struct address_space *, struct page *);
415:	void reparent_shrinker_deferred(struct mem_cgroup *);
344:	void set_shrinker_bit(struct mem_cgroup *, int, int);
4279:	unsigned long shrink_all_memory(unsigned long);
3596:	unsigned long try_to_free_mem_cgroup_pages(struct mem_cgroup *, unsigned long, gfp_t, bool);
3511:	unsigned long try_to_free_pages(struct zonelist *, int, gfp_t, nodemask_t *);
638:	void unregister_shrinker(struct shrinker *);
4225:	void wakeup_kswapd(struct zone *, gfp_t, int, enum zone_type);
538:	unsigned long zone_reclaimable_pages(struct zone *);
4439:	static int __node_reclaim(struct pglist_data *, gfp_t, unsigned int);
1064:	static int __remove_mapping(struct address_space *, struct page *, bool, struct mem_cgroup *);
3635:	static void age_active_anon(struct pglist_data *, struct scan_control *);
3378:	static bool allow_direct_reclaim(pg_data_t *);
3820:	static int balance_pgdat(pg_data_t *, int, int);
3718:	static void clear_pgdat_congested(pg_data_t *);
657:	static unsigned long do_shrink_slab(struct shrink_control *, struct shrinker *, int);
3280:	static unsigned long do_try_to_free_pages(struct zonelist *, struct scan_control *);
223:	static int expand_one_shrinker_info(struct mem_cgroup *, int, int, int, int);
307:	static int expand_shrinker_info(int);
2459:	static void get_scan_count(struct lruvec *, struct scan_control *, unsigned long *);
2424:	static bool inactive_is_low(struct lruvec *, enum lru_list);
2840:	static bool is_memcg_kswapd_stopped(struct scan_control *, struct scan_control *);
1850:	static unsigned long isolate_lru_pages(unsigned long, struct lruvec *, struct list_head *, unsigned long *, struct scan_control *, enum lru_list);
4140:	static int kswapd(void *);
4346:	static int kswapd_init(void);
4043:	static void kswapd_try_to_sleep(pg_data_t *, int, int, unsigned int);
2038:	static unsigned int move_pages_to_lru(struct lruvec *, struct list_head *);
4409:	static unsigned long node_pagecache_reclaimable(struct pglist_data *);
1250:	static void page_check_dirty_writeback(struct page *, bool *, bool *);
1196:	static enum page_references page_check_references(struct page *, struct scan_control *, struct scan_control *);
990:	static pageout_t pageout(struct page *, struct address_space *);
3685:	static bool pgdat_balanced(pg_data_t *, int, int);
360:	static int prealloc_memcg_shrinker(struct shrinker *);
187:	static void set_task_reclaim_state(struct task_struct *, struct reclaim_state *);
2232:	static void shrink_active_list(unsigned long, struct lruvec *, struct scan_control *, enum lru_list);
2125:	static unsigned long shrink_inactive_list(unsigned long, struct lruvec *, struct scan_control *, enum lru_list);
2655:	static void shrink_lruvec(struct lruvec *, struct scan_control *);
2929:	static void shrink_node(pg_data_t *, struct scan_control *);
2863:	static void shrink_node_memcgs(pg_data_t *, struct scan_control *);
1282:	static unsigned int shrink_page_list(struct list_head *, struct pglist_data *, struct scan_control *, struct reclaim_stat *, bool);
856:	static unsigned long shrink_slab(gfp_t, int, struct mem_cgroup *, int);
755:	static unsigned long shrink_slab_memcg(gfp_t, int, struct mem_cgroup *, int);
3167:	static void shrink_zones(struct zonelist *, struct scan_control *);
3252:	static void snapshot_refaults(struct mem_cgroup *, pg_data_t *);
3427:	static bool throttle_direct_reclaim(gfp_t, struct zonelist *, nodemask_t *);

File mm/vmstat.c:
470:	void __dec_node_page_state(struct page *, enum node_stat_item);
446:	void __dec_node_state(struct pglist_data *, enum node_stat_item);
464:	void __dec_zone_page_state(struct page *, enum zone_stat_item);
430:	void __dec_zone_state(struct zone *, enum zone_stat_item);
424:	void __inc_node_page_state(struct page *, enum node_stat_item);
400:	void __inc_node_state(struct pglist_data *, enum node_stat_item);
953:	void __inc_numa_state(struct zone *, enum numa_stat_item);
418:	void __inc_zone_page_state(struct page *, enum zone_stat_item);
384:	void __inc_zone_state(struct zone *, enum zone_stat_item);
336:	void __mod_node_page_state(struct pglist_data *, enum node_stat_item, long);
316:	void __mod_zone_page_state(struct zone *, enum zone_stat_item, long);
131:	void all_vm_events(unsigned long *);
196:	int calculate_normal_threshold(struct zone *);
172:	int calculate_pressure_threshold(struct zone *);
861:	void cpu_vm_stats_fold(int);
607:	void dec_node_page_state(struct page *, enum node_stat_item);
540:	void dec_zone_page_state(struct page *, enum zone_stat_item);
927:	void drain_zonestat(struct zone *, struct per_cpu_pageset *);
1104:	unsigned int extfrag_for_order(struct zone *, unsigned int);
1118:	int fragmentation_index(struct zone *, unsigned int);
601:	void inc_node_page_state(struct page *, enum node_stat_item);
596:	void inc_node_state(struct pglist_data *, enum node_stat_item);
534:	void inc_zone_page_state(struct page *, enum zone_stat_item);
2030:	void init_mm_internals(void);
589:	void mod_node_page_state(struct pglist_data *, enum node_stat_item, long);
527:	void mod_zone_page_state(struct zone *, enum zone_stat_item, long);
1017:	unsigned long node_page_state(struct pglist_data *, enum node_stat_item);
1006:	unsigned long node_page_state_pages(struct pglist_data *, enum node_stat_item);
1925:	void quiet_vmstat(void);
246:	void refresh_zone_stat_thresholds(void);
291:	void set_pgdat_percpu_threshold(pg_data_t *, int (*)(struct zone *));
973:	unsigned long sum_zone_node_page_state(int, enum zone_stat_item);
990:	unsigned long sum_zone_numa_state(int, enum numa_stat_item);
78:	int sysctl_vm_numa_stat_handler(struct ctl_table *, int, void *, size_t *, loff_t *);
145:	void vm_events_fold_cpu(int);
1820:	int vmstat_refresh(struct ctl_table *, int, void *, size_t *, loff_t *);
1076:	static int __fragmentation_index(unsigned int, struct contig_page_info *);
2178:	static int extfrag_debug_init(void);
2176:	static int extfrag_open(struct inode *, struct file *);
2160:	static int extfrag_show(struct seq_file *, void *);
2136:	static void extfrag_show_print(struct seq_file *, pg_data_t *, struct zone *);
698:	static int fold_diff(int *, int *, int *);
1376:	static void *frag_next(struct seq_file *, void *, loff_t *);
1428:	static int frag_show(struct seq_file *, void *);
1363:	static void *frag_start(struct seq_file *, loff_t *);
1384:	static void frag_stop(struct seq_file *, void *);
1987:	static void init_cpu_node_state(void);
1893:	static bool need_update(int);
1576:	static int pagetypeinfo_show(struct seq_file *, void *);
1494:	static void pagetypeinfo_showblockcount_print(struct seq_file *, pg_data_t *, struct zone *);
1435:	static void pagetypeinfo_showfree_print(struct seq_file *, pg_data_t *, struct zone *);
759:	static int refresh_cpu_vm_stats(bool);
1815:	static void refresh_vm_stats(struct work_struct *);
1975:	static void start_shepherd_timer(void);
2134:	static int unusable_open(struct inode *, struct file *);
2114:	static int unusable_show(struct seq_file *, void *);
2086:	static void unusable_show_print(struct seq_file *, pg_data_t *, struct zone *);
2010:	static int vmstat_cpu_dead(unsigned int);
2004:	static int vmstat_cpu_down_prep(unsigned int);
1997:	static int vmstat_cpu_online(unsigned int);
1769:	static void *vmstat_next(struct seq_file *, void *, loff_t *);
1955:	static void vmstat_shepherd(struct work_struct *);
1777:	static int vmstat_show(struct seq_file *, void *);
1730:	static void *vmstat_start(struct seq_file *, loff_t *);
1796:	static void vmstat_stop(struct seq_file *, void *);
1870:	static void vmstat_update(struct work_struct *);
1708:	static int zoneinfo_show(struct seq_file *, void *);
1622:	static void zoneinfo_show_print(struct seq_file *, pg_data_t *, struct zone *);

File mm/workingset.c:
396:	void workingset_activation(struct page *);
227:	void workingset_age_nonresident(struct lruvec *, unsigned long);
253:	void *workingset_eviction(struct page *, struct mem_cgroup *);
282:	void workingset_refault(struct page *, void *);
432:	void workingset_update_node(struct xa_node *);
457:	static unsigned long count_shadow_nodes(struct shrinker *, struct shrink_control *);
571:	static unsigned long scan_shadow_nodes(struct shrinker *, struct shrink_control *);
515:	static enum lru_status shadow_lru_isolate(struct list_head *, struct list_lru_one *, spinlock_t *, void *);
592:	static int workingset_init(void);

File mm/zbud.c:
355:	int zbud_alloc(struct zbud_pool *, size_t, gfp_t, unsigned long *);
307:	struct zbud_pool *zbud_create_pool(gfp_t, const struct zbud_ops *);
331:	void zbud_destroy_pool(struct zbud_pool *);
430:	void zbud_free(struct zbud_pool *, unsigned long);
605:	u64 zbud_get_pool_size(struct zbud_pool *);
584:	void *zbud_map(struct zbud_pool *, unsigned long);
502:	int zbud_reclaim_page(struct zbud_pool *, unsigned int);
594:	void zbud_unmap(struct zbud_pool *, unsigned long);
623:	static void exit_zbud(void);
610:	static int init_zbud(void);
141:	static void *zbud_zpool_create(const char *, gfp_t, const struct zpool_ops *, struct zpool *);
129:	static int zbud_zpool_evict(struct zbud_pool *, unsigned long);
165:	static void zbud_zpool_free(void *, unsigned long);
160:	static int zbud_zpool_malloc(void *, size_t, gfp_t, unsigned long *);
189:	static void *zbud_zpool_map(void *, unsigned long, enum zpool_mapmode);
170:	static int zbud_zpool_shrink(void *, unsigned int, unsigned int *);
199:	static u64 zbud_zpool_total_size(void *);

File mm/zpool.c:
404:	bool zpool_can_sleep_mapped(struct zpool *);
156:	struct zpool *zpool_create_pool(const char *, const char *, gfp_t, const struct zpool_ops *);
216:	void zpool_destroy_pool(struct zpool *);
393:	bool zpool_evictable(struct zpool *);
295:	void zpool_free(struct zpool *, unsigned long);
375:	u64 zpool_get_total_size(struct zpool *);
238:	const char *zpool_get_type(struct zpool *);
122:	bool zpool_has_pool(char *);
275:	int zpool_malloc(struct zpool *, size_t, gfp_t, unsigned long *);
254:	bool zpool_malloc_support_movable(struct zpool *);
346:	void *zpool_map_handle(struct zpool *, unsigned long, enum zpool_mapmode);
41:	void zpool_register_driver(struct zpool_driver *);
317:	int zpool_shrink(struct zpool *, unsigned int, unsigned int *);
362:	void zpool_unmap_handle(struct zpool *, unsigned long);
60:	int zpool_unregister_driver(struct zpool_driver *);
78:	static struct zpool_driver *zpool_get_driver(const char *);
98:	static void zpool_put_driver(struct zpool_driver *);

File mm/zsmalloc.c:
2271:	unsigned long zs_compact(struct zs_pool *);
2361:	struct zs_pool *zs_create_pool(const char *);
2477:	void zs_destroy_pool(struct zs_pool *);
1494:	void zs_free(struct zs_pool *, unsigned long);
1224:	unsigned long zs_get_total_pages(struct zs_pool *);
1355:	size_t zs_huge_class_size(struct zs_pool *);
1413:	unsigned long zs_malloc(struct zs_pool *, size_t, gfp_t);
1245:	void *zs_map_object(struct zs_pool *, unsigned long, enum zs_mapmode);
2291:	void zs_pool_stats(struct zs_pool *, struct zs_pool_stats *);
1304:	void zs_unmap_object(struct zs_pool *, unsigned long);
2188:	static void SetZsPageMovable(struct zs_pool *, struct zspage *, struct zspage *);
931:	static void __free_zspage(struct zs_pool *, struct size_class *, struct zspage *);
2220:	static unsigned long __zs_compact(struct zs_pool *, struct size_class *);
1132:	static void *__zs_map_object(struct mapping_area *, struct page **, int, int);
1160:	static void __zs_unmap_object(struct page **, int, int, struct mapping_area *, struct mapping_area *);
1059:	static struct zspage *alloc_zspage(struct zs_pool *, struct size_class *, gfp_t);
2143:	static void async_free_zspage(struct work_struct *);
1023:	static void create_page_chain(struct size_class *, struct zspage *, struct page **);
1606:	static unsigned long find_alloced_obj(struct size_class *, struct page *, int *);
762:	static enum fullness_group fix_fullness_group(struct size_class *, struct zspage *);
979:	static void init_zspage(struct size_class *, struct zspage *);
716:	static void insert_zspage(struct size_class *, struct zspage *, enum fullness_group);
1699:	static struct zspage *isolate_zspage(struct size_class *, bool);
1649:	static int migrate_zspage(struct size_class *, struct zs_compact_control *, struct zs_pool *);
1469:	static void obj_free(struct size_class *, unsigned long);
1361:	static unsigned long obj_malloc(struct size_class *, struct zspage *, unsigned long);
890:	static void pin_tag(unsigned long);
1847:	static void replace_sub_page(struct size_class *, struct zspage *, struct page *, struct page *);
900:	static void reset_page(struct page *);
910:	static int trylock_zspage(struct zspage *);
1200:	static int zs_cpu_dead(unsigned int);
1192:	static int zs_cpu_prepare(unsigned int);
2537:	static void zs_exit(void);
2510:	static int zs_init(void);
1758:	static int zs_init_fs_context(struct fs_context *);
1539:	static void zs_object_copy(struct size_class *, unsigned long, unsigned long);
1870:	static bool zs_page_isolate(struct page *, isolate_mode_t);
1926:	static int zs_page_migrate(struct address_space *, struct page *, struct page *, enum migrate_mode);
2055:	static void zs_page_putback(struct page *);
2314:	static unsigned long zs_shrinker_count(struct shrinker *, struct shrink_control *);
2297:	static unsigned long zs_shrinker_scan(struct shrinker *, struct shrink_control *);
579:	static void zs_stat_exit(void);
643:	static int zs_stats_size_open(struct inode *, struct file *);
586:	static int zs_stats_size_show(struct seq_file *, void *);
383:	static void *zs_zpool_create(const char *, gfp_t, const struct zpool_ops *, struct zpool *);
395:	static void zs_zpool_destroy(void *);
406:	static void zs_zpool_free(void *, unsigned long);
400:	static int zs_zpool_malloc(void *, size_t, gfp_t, unsigned long *);
411:	static void *zs_zpool_map(void *, unsigned long, enum zpool_mapmode);
436:	static u64 zs_zpool_total_size(void *);
431:	static void zs_zpool_unmap(void *, unsigned long);

File mm/zswap.c:
753:	static int __zswap_param_set(const char *, const struct kernel_param *, char *, char *);
651:	static struct zswap_pool *__zswap_pool_create_fallback(void);
503:	static struct zswap_pool *__zswap_pool_current(void);
725:	static void __zswap_pool_empty(struct kref *);
711:	static void __zswap_pool_release(struct work_struct *);
1440:	static int init_zswap(void);
575:	static void shrink_worker(struct work_struct *);
848:	static int zswap_compressor_param_set(const char *, const struct kernel_param *);
484:	static int zswap_cpu_comp_dead(unsigned int, struct hlist_node *);
445:	static int zswap_cpu_comp_prepare(unsigned int, struct hlist_node *);
1424:	static void zswap_debugfs_exit(void);
1393:	static int zswap_debugfs_init(void);
429:	static int zswap_dstmem_dead(unsigned int);
408:	static int zswap_dstmem_prepare(unsigned int);
860:	static int zswap_enabled_param_set(const char *, const struct kernel_param *);
372:	static void zswap_entry_put(struct zswap_tree *, struct zswap_entry *);
350:	static void zswap_free_entry(struct zswap_entry *);
1362:	static void zswap_frontswap_init(unsigned int);
1344:	static void zswap_frontswap_invalidate_area(unsigned int);
1320:	static void zswap_frontswap_invalidate_page(unsigned int, unsigned long);
1246:	static int zswap_frontswap_load(unsigned int, unsigned long, struct page *);
1081:	static int zswap_frontswap_store(unsigned int, unsigned long, struct page *);
585:	static struct zswap_pool *zswap_pool_create(char *, char *);
693:	static void zswap_pool_destroy(struct zswap_pool *);
555:	static struct zswap_pool *zswap_pool_find_get(char *, char *);
703:	static int zswap_pool_get(struct zswap_pool *);
536:	static struct zswap_pool *zswap_pool_last_get(void);
743:	static void zswap_pool_put(struct zswap_pool *);
927:	static int zswap_writeback_entry(struct zpool *, unsigned long);
854:	static int zswap_zpool_param_set(const char *, const struct kernel_param *);

File net/802/fc.c:
102:	struct net_device *alloc_fcdev(int);
32:	static int fc_header(struct sk_buff *, struct net_device *, unsigned short, const void *, const void *, unsigned int);
78:	static void fc_setup(struct net_device *);

File net/8021q/vlan_core.c:
75:	struct net_device *__vlan_find_dev_deep_rcu(struct net_device *, __be16, u16);
101:	struct net_device *vlan_dev_real_dev(const struct net_device *);
112:	u16 vlan_dev_vlan_id(const struct net_device *);
118:	__be16 vlan_dev_vlan_proto(const struct net_device *);
9:	bool vlan_do_receive(struct sk_buff **);
282:	void vlan_filter_drop_vids(struct vlan_info *, __be16);
253:	int vlan_filter_push_vids(struct vlan_info *, __be16);
226:	int vlan_for_each(struct net_device *, int (*)(struct net_device *, int, void *), void *);
443:	bool vlan_uses_dev(const struct net_device *);
317:	int vlan_vid_add(struct net_device *, __be16, u16);
370:	void vlan_vid_del(struct net_device *, __be16, u16);
395:	int vlan_vids_add_by_dev(struct net_device *, const struct net_device *);
426:	void vlan_vids_del_by_dev(struct net_device *, const struct net_device *);
204:	static int vlan_add_rx_filter_info(struct net_device *, __be16, u16);
508:	static int vlan_gro_complete(struct sk_buff *, int);
456:	static struct sk_buff *vlan_gro_receive(struct list_head *, struct sk_buff *);
143:	static void vlan_info_rcu_free(struct callback_head *);
215:	static int vlan_kill_rx_filter_info(struct net_device *, __be16, u16);
543:	static int vlan_offload_init(void);

File net/bpf/test_run.c:
125:	int bpf_fentry_test1(int);
130:	int bpf_fentry_test2(int, u64);
135:	int bpf_fentry_test3(char, int, u64);
140:	int bpf_fentry_test4(void *, char, int, u64);
145:	int bpf_fentry_test5(u64, void *, short, int, u64);
150:	int bpf_fentry_test6(u64, void *, short, int, void *, u64);
159:	int bpf_fentry_test7(struct bpf_fentry_test_t *);
164:	int bpf_fentry_test8(struct bpf_fentry_test_t *);
169:	int bpf_modify_return_test(int, int *);
687:	int bpf_prog_test_run_flow_dissector(struct bpf_prog *, const union bpf_attr *, union bpf_attr *);
263:	int bpf_prog_test_run_raw_tp(struct bpf_prog *, const union bpf_attr *, union bpf_attr *);
490:	int bpf_prog_test_run_skb(struct bpf_prog *, const union bpf_attr *, union bpf_attr *);
203:	int bpf_prog_test_run_tracing(struct bpf_prog *, const union bpf_attr *, union bpf_attr *);
624:	int bpf_prog_test_run_xdp(struct bpf_prog *, const union bpf_attr *, union bpf_attr *);
254:	static void __bpf_prog_test_run_raw_tp(void *);
357:	static int bpf_ctx_finish(union bpf_attr *, const void *, u32, const union bpf_attr *, const union bpf_attr *);
326:	static void *bpf_ctx_init(const union bpf_attr *, u32);
86:	static int bpf_test_finish(union bpf_attr *, const void *, u32, u32, u32, const union bpf_attr *, const union bpf_attr *);
178:	static void *bpf_test_init(u32, u32, u32, const union bpf_attr *, const union bpf_attr *);
19:	static int bpf_test_run(struct bpf_prog *, void *, u32, u32 *, u32 *, bool);
397:	static int convert___skb_to_skb(struct sk_buff *, struct __sk_buff *);

File net/compat.c:
36:	int __get_compat_msghdr(struct msghdr *, struct compat_msghdr *, struct sockaddr **, compat_uptr_t *, compat_size_t *);
394:	long __ia32_compat_sys_recv(const struct pt_regs *);
399:	long __ia32_compat_sys_recvfrom(const struct pt_regs *);
415:	long __ia32_compat_sys_recvmmsg_time32(const struct pt_regs *);
406:	long __ia32_compat_sys_recvmmsg_time64(const struct pt_regs *);
379:	long __ia32_compat_sys_recvmsg(const struct pt_regs *);
365:	long __ia32_compat_sys_sendmmsg(const struct pt_regs *);
351:	long __ia32_compat_sys_sendmsg(const struct pt_regs *);
424:	long __ia32_compat_sys_socketcall(const struct pt_regs *);
141:	int cmsghdr_from_user_compat_to_kern(struct msghdr *, struct sock *, unsigned char *, int);
88:	int get_compat_msghdr(struct msghdr *, struct compat_msghdr *, struct sockaddr **, struct iovec **);
228:	int put_cmsg_compat(struct msghdr *, int, int, int, void *);
291:	void scm_detach_fds_compat(struct msghdr *, struct scm_cookie *);
424:	static long __se_compat_sys_socketcall(long, long);

File net/core/bpf_sk_storage.c:
748:	int bpf_iter_bpf_sk_storage_map(struct bpf_iter_meta *, struct bpf_map *, struct sock *, void *);
198:	int bpf_sk_storage_clone(const struct sock *, struct sock *);
300:	u64 bpf_sk_storage_delete(u64, u64, u64, u64, u64);
437:	struct bpf_sk_storage_diag *bpf_sk_storage_diag_alloc(const struct nlattr *);
409:	void bpf_sk_storage_diag_free(struct bpf_sk_storage_diag *);
584:	int bpf_sk_storage_diag_put(struct bpf_sk_storage_diag *, struct sock *, struct sk_buff *, int, unsigned int *);
58:	void bpf_sk_storage_free(struct sock *);
267:	u64 bpf_sk_storage_get(u64, u64, u64, u64, u64);
752:	static int __bpf_sk_storage_map_seq_show(struct seq_file *, struct bpf_local_storage_elem *);
161:	static int bpf_fd_sk_storage_delete_elem(struct bpf_map *, void *);
124:	static void *bpf_fd_sk_storage_lookup_elem(struct bpf_map *, void *);
141:	static int bpf_fd_sk_storage_update_elem(struct bpf_map *, void *, void *, u64);
801:	static int bpf_iter_attach_map(struct bpf_prog *, union bpf_iter_link_info *, struct bpf_iter_aux_info *);
831:	static void bpf_iter_detach_map(struct bpf_iter_aux_info *);
792:	static int bpf_iter_init_sk_storage_map(void *, struct bpf_iter_aux_info *);
530:	static int bpf_sk_storage_diag_put_all(struct sock *, struct sk_buff *, int, unsigned int *);
866:	static int bpf_sk_storage_map_iter_init(void);
658:	static struct bpf_local_storage_elem *bpf_sk_storage_map_seq_find_next(struct bpf_iter_seq_sk_storage_map_info *, struct bpf_local_storage_elem *);
731:	static void *bpf_sk_storage_map_seq_next(struct seq_file *, void *, loff_t *);
778:	static int bpf_sk_storage_map_seq_show(struct seq_file *, void *);
718:	static void *bpf_sk_storage_map_seq_start(struct seq_file *, loff_t *);
783:	static void bpf_sk_storage_map_seq_stop(struct seq_file *, void *);
494:	static int diag_get(struct bpf_local_storage_data *, struct sk_buff *);
118:	static int notsupp_get_next_key(struct bpf_map *, void *, void *);
316:	static int sk_storage_charge(struct bpf_local_storage_map *, void *, u32);
106:	static struct bpf_map *sk_storage_map_alloc(union bpf_attr *);
97:	static void sk_storage_map_free(struct bpf_map *);
331:	static struct bpf_local_storage **sk_storage_ptr(void *);
322:	static void sk_storage_uncharge(struct bpf_local_storage_map *, void *, u32);

File net/core/datagram.c:
350:	int __sk_queue_drop_skb(struct sock *, struct sk_buff_head *, struct sk_buff *, unsigned int, void (*)(struct sock *, struct sk_buff *));
330:	void __skb_free_datagram_locked(struct sock *, struct sk_buff *, int);
287:	struct sk_buff *__skb_recv_datagram(struct sock *, struct sk_buff_head *, unsigned int, int *, int *);
242:	struct sk_buff *__skb_try_recv_datagram(struct sock *, struct sk_buff_head *, unsigned int, int *, int *, struct sk_buff **);
167:	struct sk_buff *__skb_try_recv_from_queue(struct sock *, struct sk_buff_head *, unsigned int, int *, int *, struct sk_buff **);
88:	int __skb_wait_for_more_packets(struct sock *, struct sk_buff_head *, int *, long *, const struct sk_buff *);
619:	int __zerocopy_sg_from_iter(struct sock *, struct sk_buff *, struct iov_iter *, size_t);
797:	__poll_t datagram_poll(struct file *, struct socket *, poll_table *);
748:	int skb_copy_and_csum_datagram_msg(struct sk_buff *, int, struct msghdr *);
507:	int skb_copy_and_hash_datagram_iter(const struct sk_buff *, int, struct iov_iter *, int, struct ahash_request *);
547:	int skb_copy_datagram_from_iter(struct sk_buff *, int, struct iov_iter *, int);
529:	int skb_copy_datagram_iter(const struct sk_buff *, int, struct iov_iter *, int);
323:	void skb_free_datagram(struct sock *, struct sk_buff *);
396:	int skb_kill_datagram(struct sock *, struct sk_buff *, unsigned int);
312:	struct sk_buff *skb_recv_datagram(struct sock *, unsigned int, int, int *);
699:	int zerocopy_sg_from_iter(struct sk_buff *, struct iov_iter *);
412:	static int __skb_datagram_iter(const struct sk_buff *, int, struct iov_iter *, int, bool, size_t (*)(const void *, size_t, void *, struct iov_iter *), void *);
75:	static int receiver_wake_function(wait_queue_entry_t *, unsigned int, int, void *);
516:	static size_t simple_copy_to_iter(const void *, size_t, void *, struct iov_iter *);

File net/core/dev.c:
8449:	int __dev_change_flags(struct net_device *, unsigned int, struct netlink_ext_ack *);
4209:	int __dev_direct_xmit(struct sk_buff *, u16);
2223:	int __dev_forward_skb(struct net_device *, struct sk_buff *);
1112:	struct net_device *__dev_get_by_flags(struct net *, unsigned short, unsigned short);
928:	struct net_device *__dev_get_by_index(struct net *, int);
861:	struct net_device *__dev_get_by_name(struct net *, const char *);
1072:	struct net_device *__dev_getfirstbyhwtype(struct net *, unsigned short);
3118:	void __dev_kfree_skb_any(struct sk_buff *, enum skb_free_reason);
3096:	void __dev_kfree_skb_irq(struct sk_buff *, enum skb_free_reason);
8515:	void __dev_notify_flags(struct net_device *, unsigned int, unsigned int);
556:	void __dev_remove_pack(struct packet_type *);
8568:	int __dev_set_mtu(struct net_device *, int);
8383:	void __dev_set_rx_mode(struct net_device *);
6415:	void __napi_schedule(struct napi_struct *);
6468:	void __napi_schedule_irqoff(struct napi_struct *);
9729:	int __netdev_update_features(struct net_device *);
6794:	void __netif_napi_del(struct napi_struct *);
3055:	void __netif_schedule(struct Qdisc *);
2620:	int __netif_set_xps_queue(struct net_device *, const unsigned long *, u16, bool);
6290:	__sum16 __skb_gro_checksum_complete(struct sk_buff *);
3378:	struct sk_buff *__skb_gso_segment(struct sk_buff *, netdev_features_t, bool);
10546:	struct net_device *alloc_netdev_mqs(int, const char *, unsigned char, void (*)(struct net_device *), unsigned int, unsigned int);
9372:	int bpf_xdp_link_attach(const union bpf_attr *, struct bpf_prog *);
2071:	int call_netdevice_notifiers(unsigned long, struct net_device *);
609:	void dev_add_offload(struct packet_offload *);
533:	void dev_add_pack(struct packet_type *);
1264:	int dev_alloc_name(struct net_device *, const char *);
8803:	int dev_change_carrier(struct net_device *, bool);
8552:	int dev_change_flags(struct net_device *, unsigned int, struct netlink_ext_ack *);
1296:	int dev_change_name(struct net_device *, const char *);
10807:	int dev_change_net_namespace(struct net_device *, struct net *, const char *);
8928:	int dev_change_proto_down(struct net_device *, bool);
8948:	int dev_change_proto_down_generic(struct net_device *, bool);
8966:	void dev_change_proto_down_reason(struct net_device *, unsigned long, u32);
8662:	int dev_change_tx_queue_len(struct net_device *, unsigned long);
9435:	int dev_change_xdp_fd(struct net_device *, struct netlink_ext_ack *, int, int, u32);
1664:	void dev_close(struct net_device *);
1635:	void dev_close_many(struct list_head *, bool);
1685:	void dev_disable_lro(struct net_device *);
10471:	void dev_fetch_sw_netstats(struct rtnl_link_stats64 *, const struct pcpu_sw_netstats *);
832:	int dev_fill_metadata_dst(struct net_device *, struct sk_buff *);
2254:	int dev_forward_skb(struct net_device *, struct sk_buff *);
1436:	int dev_get_alias(const struct net_device *, char *, size_t);
977:	struct net_device *dev_get_by_index(struct net *, int);
952:	struct net_device *dev_get_by_index_rcu(struct net *, int);
903:	struct net_device *dev_get_by_name(struct net *, const char *);
882:	struct net_device *dev_get_by_name_rcu(struct net *, const char *);
1000:	struct net_device *dev_get_by_napi_id(unsigned int);
8424:	unsigned int dev_get_flags(const struct net_device *);
814:	int dev_get_iflink(const struct net_device *);
8768:	int dev_get_mac_address(struct sockaddr *, struct net *, char *);
8822:	int dev_get_phys_port_id(struct net_device *, struct netdev_phys_item_id *);
8841:	int dev_get_phys_port_name(struct net_device *, char *, size_t);
8864:	int dev_get_port_parent_id(struct net_device *, struct netdev_phys_item_id *, bool);
10444:	struct rtnl_link_stats64 *dev_get_stats(struct net_device *, struct rtnl_link_stats64 *);
1058:	struct net_device *dev_getbyhwaddr_rcu(struct net *, unsigned short, const char *);
1085:	struct net_device *dev_getfirstbyhwtype(struct net *, unsigned short);
3590:	struct sk_buff *dev_hard_start_xmit(struct sk_buff *, struct net_device *, struct netdev_queue *, int *);
10498:	struct netdev_queue *dev_ingress_queue_create(struct net_device *);
3867:	int dev_loopback_xmit(struct net *, struct sock *, struct sk_buff *);
2306:	bool dev_nit_active(struct net_device *);
1564:	int dev_open(struct net_device *, struct netlink_ext_ack *);
3999:	u16 dev_pick_tx_cpu_id(struct net_device *, struct sk_buff *, struct net_device *);
3992:	u16 dev_pick_tx_zero(struct net_device *, struct sk_buff *, struct net_device *);
8706:	int dev_pre_changeaddr_notify(struct net_device *, const char *, struct netlink_ext_ack *);
4197:	int dev_queue_xmit(struct sk_buff *);
4203:	int dev_queue_xmit_accel(struct sk_buff *, struct net_device *);
2317:	void dev_queue_xmit_nit(struct sk_buff *, struct net_device *);
667:	void dev_remove_offload(struct packet_offload *);
588:	void dev_remove_pack(struct packet_type *);
1399:	int dev_set_alias(struct net_device *, const char *, size_t);
8371:	int dev_set_allmulti(struct net_device *, int);
8694:	void dev_set_group(struct net_device *, int);
8729:	int dev_set_mac_address(struct net_device *, struct sockaddr *, struct netlink_ext_ack *);
8756:	int dev_set_mac_address_user(struct net_device *, struct sockaddr *, struct netlink_ext_ack *);
8644:	int dev_set_mtu(struct net_device *, int);
8605:	int dev_set_mtu_ext(struct net_device *, int, struct netlink_ext_ack *);
8312:	int dev_set_promiscuity(struct net_device *, int);
8411:	void dev_set_rx_mode(struct net_device *);
1138:	bool dev_valid_name(const char *);
8581:	int dev_validate_mtu(struct net_device *, int, struct netlink_ext_ack *);
9041:	u32 dev_xdp_prog_id(struct net_device *, enum bpf_xdp_mode);
4760:	int do_xdp_generic(struct bpf_prog *, struct sk_buff *);
10665:	void free_netdev(struct net_device *);
4736:	void generic_xdp_tx(struct sk_buff *, struct bpf_prog *);
6091:	struct packet_offload *gro_find_complete_by_type(__be16);
6077:	struct packet_offload *gro_find_receive_by_type(__be16);
10175:	int init_dummy_netdev(struct net_device *);
2202:	bool is_skb_forwardable(const struct net_device *, const struct sk_buff *);
6602:	void napi_busy_loop(unsigned int, bool (*)(void *, unsigned long), void *);
6477:	bool napi_complete_done(struct napi_struct *, int);
6764:	void napi_disable(struct napi_struct *);
6182:	struct sk_buff *napi_get_frags(struct napi_struct *);
5840:	void napi_gro_flush(struct napi_struct *, bool);
6270:	gro_result_t napi_gro_frags(struct napi_struct *);
6141:	gro_result_t napi_gro_receive(struct napi_struct *, struct sk_buff *);
6434:	bool napi_schedule_prep(struct napi_struct *);
2124:	void net_dec_egress_queue(void);
2108:	void net_dec_ingress_queue(void);
2169:	void net_disable_timestamp(void);
2149:	void net_enable_timestamp(void);
2118:	void net_inc_egress_queue(void);
2102:	void net_inc_ingress_queue(void);
8068:	void netdev_adjacent_change_abort(struct net_device *, struct net_device *, struct net_device *);
8048:	void netdev_adjacent_change_commit(struct net_device *, struct net_device *, struct net_device *);
8020:	int netdev_adjacent_change_prepare(struct net_device *, struct net_device *, struct net_device *, struct netlink_ext_ack *);
7076:	void *netdev_adjacent_get_private(struct list_head *);
8182:	void netdev_adjacent_rename_links(struct net_device *, char *);
11136:	void netdev_alert(const struct net_device *, const char *, ...);
2904:	int netdev_bind_sb_channel_queue(struct net_device *, struct net_device *, u8, u16, u16);
8095:	void netdev_bonding_info_change(struct net_device *, struct netdev_bonding_info *);
750:	unsigned long netdev_boot_base(const char *, int);
774:	int netdev_boot_setup(char *);
720:	int netdev_boot_setup_check(struct net_device *);
9846:	void netdev_change_features(struct net_device *);
1718:	const char *netdev_cmd_to_name(enum netdev_cmd);
4033:	struct netdev_queue *netdev_core_pick_tx(struct net_device *, struct sk_buff *, struct net_device *);
11137:	void netdev_crit(const struct net_device *, const char *, ...);
11066:	const char *netdev_drivername(const struct net_device *);
11135:	void netdev_emerg(const struct net_device *, const char *, ...);
11138:	void netdev_err(const struct net_device *, const char *, ...);
1456:	void netdev_features_change(struct net_device *);
10526:	void netdev_freemem(struct net_device *);
1021:	int netdev_get_name(struct net *, char *, int);
8120:	struct net_device *netdev_get_xmit_slave(struct net_device *, struct sk_buff *, bool);
7014:	bool netdev_has_any_upper_dev(struct net_device *);
6971:	bool netdev_has_upper_dev(struct net_device *, struct net_device *);
6995:	bool netdev_has_upper_dev_all_rcu(struct net_device *, struct net_device *);
11002:	netdev_features_t netdev_increment_features(netdev_features_t, netdev_features_t, netdev_features_t);
11141:	void netdev_info(const struct net_device *, const char *, ...);
5046:	bool netdev_is_rx_handler_busy(struct net_device *);
8207:	void *netdev_lower_dev_get_private(struct net_device *, struct net_device *);
7600:	void *netdev_lower_get_first_private_rcu(struct net_device *);
7322:	void *netdev_lower_get_next(struct net_device *, struct list_head **);
7267:	void *netdev_lower_get_next_private(struct net_device *, struct list_head **);
7293:	void *netdev_lower_get_next_private_rcu(struct net_device *, struct list_head **);
8231:	void netdev_lower_state_changed(struct net_device *, void *);
7029:	struct net_device *netdev_master_upper_dev_get(struct net_device *);
7619:	struct net_device *netdev_master_upper_dev_get_rcu(struct net_device *);
7926:	int netdev_master_upper_dev_link(struct net_device *, struct net_device *, void *, void *, struct netlink_ext_ack *);
302:	int netdev_name_node_alt_create(struct net_device *, const char *);
329:	int netdev_name_node_alt_destroy(struct net_device *, const char *);
7465:	struct net_device *netdev_next_lower_dev_rcu(struct net_device *, struct list_head **);
11140:	void netdev_notice(const struct net_device *, const char *, ...);
1494:	void netdev_notify_peers(struct net_device *);
4006:	u16 netdev_pick_tx(struct net_device *, struct sk_buff *, struct net_device *);
8907:	bool netdev_port_same_parent_id(struct net_device *, struct net_device *);
11101:	void netdev_printk(const char *, const struct net_device *, const char *, ...);
10234:	int netdev_refcnt_read(const struct net_device *);
2843:	void netdev_reset_tc(struct net_device *);
10337:	void netdev_run_todo(void);
3425:	void netdev_rx_csum_fault(struct net_device *, struct sk_buff *);
5067:	int netdev_rx_handler_register(struct net_device *, rx_handler_func_t *, void *);
5093:	void netdev_rx_handler_unregister(struct net_device *);
10518:	void netdev_set_default_ethtool_ops(struct net_device *, const struct ethtool_ops *);
2871:	int netdev_set_num_tc(struct net_device *, u8);
2930:	int netdev_set_sb_channel(struct net_device *, u16);
2857:	int netdev_set_tc_queue(struct net_device *, u8, u16, u16);
1470:	void netdev_state_change(struct net_device *);
10410:	void netdev_stats_to_stats64(struct rtnl_link_stats64 *, const struct net_device_stats *);
2421:	int netdev_txq_to_tc(struct net_device *, unsigned int);
2886:	void netdev_unbind_sb_channel(struct net_device *, struct net_device *);
9829:	void netdev_update_features(struct net_device *);
7898:	int netdev_upper_dev_link(struct net_device *, struct net_device *, struct netlink_ext_ack *);
7981:	void netdev_upper_dev_unlink(struct net_device *, struct net_device *);
7094:	struct net_device *netdev_upper_get_next_dev_rcu(struct net_device *, struct list_head **);
7369:	int netdev_walk_all_lower_dev(struct net_device *, int (*)(struct net_device *, struct netdev_nested_priv *), struct netdev_nested_priv *);
7195:	int netdev_walk_all_upper_dev_rcu(struct net_device *, int (*)(struct net_device *, struct netdev_nested_priv *), struct netdev_nested_priv *);
11139:	void netdev_warn(const struct net_device *, const char *, ...);
3149:	void netif_device_attach(struct net_device *);
3134:	void netif_device_detach(struct net_device *);
3034:	int netif_get_num_default_rss_queues(void);
6734:	void netif_napi_add(struct net_device *, struct napi_struct *, int (*)(struct napi_struct *, int), int);
5628:	int netif_receive_skb(struct sk_buff *);
5376:	int netif_receive_skb_core(struct sk_buff *);
5651:	void netif_receive_skb_list(struct list_head *);
4840:	int netif_rx(struct sk_buff *);
4870:	int netif_rx_any_context(struct sk_buff *);
4853:	int netif_rx_ni(struct sk_buff *);
3071:	void netif_schedule_queue(struct netdev_queue *);
3006:	int netif_set_real_num_rx_queues(struct net_device *, unsigned int);
2954:	int netif_set_real_num_tx_queues(struct net_device *, unsigned int);
2818:	int netif_set_xps_queue(struct net_device *, const struct cpumask *, u16);
3541:	netdev_features_t netif_skb_features(struct sk_buff *);
9862:	void netif_stacked_transfer_operstate(const struct net_device *, struct net_device *);
9970:	void netif_tx_stop_all_queues(struct net_device *);
3083:	void netif_tx_wake_queue(struct netdev_queue *);
3494:	netdev_features_t passthru_features_check(struct sk_buff *, struct net_device *, netdev_features_t);
10222:	int register_netdev(struct net_device *);
9999:	int register_netdevice(struct net_device *);
1822:	int register_netdevice_notifier(struct notifier_block *);
1981:	int register_netdevice_notifier_dev_net(struct net_device *, struct notifier_block *, struct netdev_net_notifier *);
1942:	int register_netdevice_notifier_net(struct net *, struct notifier_block *);
4445:	bool rps_may_expire_flow(struct net_device *, u16, u32, u16);
3221:	int skb_checksum_help(struct sk_buff *);
3262:	int skb_crc32c_csum_help(struct sk_buff *);
3627:	int skb_csum_hwoffload_help(struct sk_buff *, const netdev_features_t);
3325:	struct sk_buff *skb_mac_gso_segment(struct sk_buff *, netdev_features_t);
3302:	__be16 skb_network_protocol(struct sk_buff *, int *);
10717:	void synchronize_net(void);
10785:	void unregister_netdev(struct net_device *);
10761:	void unregister_netdevice_many(struct list_head *);
1869:	int unregister_netdevice_notifier(struct notifier_block *);
1998:	int unregister_netdevice_notifier_dev_net(struct net_device *, struct notifier_block *, struct netdev_net_notifier *);
1969:	int unregister_netdevice_notifier_net(struct net *, struct notifier_block *);
10740:	void unregister_netdevice_queue(struct net_device *, struct list_head *);
3693:	struct sk_buff *validate_xmit_skb_list(struct sk_buff *, struct net_device *, bool *);
6954:	static int ____netdev_has_upper_dev(struct net_device *, struct netdev_nested_priv *);
1171:	static int __dev_alloc_name(struct net *, const char *, char *);
1582:	static void __dev_close_many(struct list_head *);
1503:	static int __dev_open(struct net_device *, struct netlink_ext_ack *);
4087:	static int __dev_queue_xmit(struct sk_buff *, struct net_device *);
636:	static void __dev_remove_offload(struct packet_offload *);
8326:	static int __dev_set_allmulti(struct net_device *, int, bool);
8253:	static int __dev_set_promiscuity(struct net_device *, int, bool);
3925:	static int __get_xps_queue_idx(struct net_device *, struct sk_buff *, struct xps_dev_maps *, unsigned int);
7662:	static int __netdev_adjacent_dev_insert(struct net_device *, struct net_device *, struct list_head *, void *, bool);
7724:	static void __netdev_adjacent_dev_remove(struct net_device *, struct net_device *, u16, struct list_head *);
7993:	static void __netdev_adjacent_dev_set(struct net_device *, struct net_device *, bool);
7242:	static bool __netdev_has_upper_dev(struct net_device *, struct net_device *);
321:	static void __netdev_name_node_alt_destroy(struct netdev_name_node *);
11082:	static void __netdev_printk(const char *, const struct net_device *, struct va_format *);
7527:	static int __netdev_update_lower_level(struct net_device *, struct netdev_nested_priv *);
7520:	static int __netdev_update_upper_level(struct net_device *, struct netdev_nested_priv *);
7815:	static int __netdev_upper_dev_link(struct net_device *, struct net_device *, bool, void *, void *, struct netdev_nested_priv *, struct netlink_ext_ack *);
7941:	static void __netdev_upper_dev_unlink(struct net_device *, struct net_device *, struct netdev_nested_priv *);
7416:	static int __netdev_walk_all_lower_dev(struct net_device *, struct netdev_nested_priv *, int (*)(struct net_device *, struct netdev_nested_priv *));
7146:	static int __netdev_walk_all_upper_dev(struct net_device *, int (*)(struct net_device *, struct netdev_nested_priv *), struct netdev_nested_priv *);
5450:	static int __netif_receive_skb(struct sk_buff *);
5144:	static int __netif_receive_skb_core(struct sk_buff **, bool, struct packet_type **);
5475:	static void __netif_receive_skb_list(struct list_head *);
5408:	static void __netif_receive_skb_list_core(struct list_head *, bool);
5348:	static int __netif_receive_skb_one_core(struct sk_buff *, bool);
1891:	static int __register_netdevice_notifier_net(struct net *, struct notifier_block *, bool);
9285:	static void bpf_xdp_link_dealloc(struct bpf_link *);
9279:	static int bpf_xdp_link_detach(struct bpf_link *);
9306:	static int bpf_xdp_link_fill_link_info(const struct bpf_link *, struct bpf_link_info *);
9262:	static void bpf_xdp_link_release(struct bpf_link *);
9292:	static void bpf_xdp_link_show_fdinfo(const struct bpf_link *, struct seq_file *);
9321:	static int bpf_xdp_link_update(struct bpf_link *, struct bpf_prog *, struct bpf_prog *);
6564:	static void busy_poll_stop(struct napi_struct *, void *);
2032:	static int call_netdevice_notifiers_info(unsigned long, struct netdev_notifier_info *);
1778:	static int call_netdevice_register_net_notifiers(struct notifier_block *, struct net *);
1767:	static void call_netdevice_unregister_notifiers(struct notifier_block *, struct net_device *);
2514:	static void clean_xps_maps(struct net_device *, const unsigned long *, struct xps_dev_maps *, unsigned int, u16, u16, bool);
11156:	static void default_device_exit(struct net *);
11218:	static void default_device_exit_batch(struct list_head *);
1236:	static int dev_alloc_name_ns(struct net *, struct net_device *, const char *);
10926:	static int dev_cpu_dead(unsigned int);
1709:	static void dev_disable_gro_hw(struct net_device *);
1270:	static int dev_get_valid_name(struct net *, struct net_device *, const char *);
5967:	static enum gro_result dev_gro_receive(struct napi_struct *, struct sk_buff *);
9127:	static int dev_xdp_attach(struct net_device *, struct netlink_ext_ack *, struct bpf_xdp_link *, struct bpf_prog *, struct bpf_prog *, u32);
9243:	static int dev_xdp_detach_link(struct net_device *, struct bpf_xdp_link *, struct netlink_ext_ack *);
9062:	static int dev_xdp_install(struct net_device *, enum bpf_xdp_mode, bpf_op_t, struct netlink_ext_ack *, u32, struct bpf_prog *);
9096:	static void dev_xdp_uninstall(struct net_device *);
4548:	static int enqueue_to_backlog(struct sk_buff *, int, unsigned int *);
2579:	static struct xps_map *expand_xps_map(struct xps_map *, int, u16, bool);
5726:	static void flush_all_backlogs(void);
5669:	static void flush_backlog(struct work_struct *);
5505:	static int generic_xdp_install(struct net_device *, struct netdev_bpf *);
4337:	static int get_rps_cpu(struct net_device *, struct sk_buff *, struct rps_dev_flow **);
5853:	static struct list_head *gro_list_prepare(struct napi_struct *, struct sk_buff *);
5771:	static void gro_normal_one(struct napi_struct *, struct sk_buff *, int);
5923:	static void gro_pull_from_frag0(struct sk_buff *, int);
3476:	static netdev_features_t harmonize_features(struct sk_buff *, netdev_features_t);
358:	static void list_netdevice(struct net_device *);
6233:	static struct sk_buff *napi_frags_skb(struct napi_struct *);
5781:	static int napi_gro_complete(struct napi_struct *, struct sk_buff *);
6675:	static void napi_hash_add(struct napi_struct *);
6808:	static int napi_poll(struct napi_struct *, struct list_head *);
6157:	static void napi_reuse_skb(struct napi_struct *, struct sk_buff *);
6105:	static void napi_skb_free_stolen_head(struct sk_buff *);
6707:	static enum hrtimer_restart napi_watchdog(struct hrtimer *);
11269:	static int net_dev_init(void);
6313:	static void net_rps_send_ipi(struct softnet_data *);
6874:	static void net_rx_action(struct softirq_action *);
4885:	static void net_tx_action(struct softirq_action *);
8132:	static void netdev_adjacent_add_links(struct net_device *);
8157:	static void netdev_adjacent_del_links(struct net_device *);
693:	static int netdev_boot_setup_add(char *, struct ifmap *);
11143:	static void netdev_exit(struct net *);
9645:	static netdev_features_t netdev_fix_features(struct net_device *, netdev_features_t);
11034:	static int netdev_init(struct net *);
266:	static void netdev_name_node_add(struct net *, struct netdev_name_node *);
278:	static struct netdev_name_node *netdev_name_node_lookup(struct net *, const char *);
290:	static struct netdev_name_node *netdev_name_node_lookup_rcu(struct net *, const char *);
9621:	static void netdev_sync_lower_features(struct net_device *, struct net_device *, netdev_features_t);
9601:	static netdev_features_t netdev_sync_upper_features(struct net_device *, struct net_device *, netdev_features_t);
10258:	static void netdev_wait_allrefs(struct net_device *);
9882:	static int netif_alloc_rx_queues(struct net_device *);
4617:	static u32 netif_receive_generic_xdp(struct sk_buff *, struct xdp_buff *, struct bpf_prog *);
5553:	static int netif_receive_skb_internal(struct sk_buff *);
5580:	static void netif_receive_skb_list_internal(struct list_head *);
2537:	static void netif_reset_xps_queues(struct net_device *, u16, u16);
4790:	static int netif_rx_internal(struct sk_buff *);
2135:	static void netstamp_clear(struct work_struct *);
6356:	static int process_backlog(struct napi_struct *, int);
3721:	static void qdisc_pkt_len_init(struct sk_buff *);
2450:	static bool remove_xps_queue(struct xps_dev_maps *, int, u16);
9592:	static void rollback_registered(struct net_device *);
9501:	static void rollback_registered_many(struct list_head *);
4473:	static void rps_trigger_softirq(void *);
4508:	static bool skb_flow_limit(struct sk_buff *, unsigned int);
3196:	static void skb_warn_bad_offload(const struct sk_buff *);
377:	static void unlist_netdevice(struct net_device *);
3638:	static struct sk_buff *validate_xmit_skb(struct sk_buff *, struct net_device *, bool *);
3618:	static struct sk_buff *validate_xmit_vlan(struct sk_buff *, netdev_features_t);
3572:	static int xmit_one(struct sk_buff *, struct net_device *, struct netdev_queue *, bool);

File net/core/dev_addr_lists.c:
417:	void __hw_addr_init(struct netdev_hw_addr_list *);
292:	int __hw_addr_ref_sync_dev(struct netdev_hw_addr_list *, struct net_device *, int (*)(struct net_device *, const unsigned char *, int), int (*)(struct net_device *, const unsigned char *, int));
351:	void __hw_addr_ref_unsync_dev(struct netdev_hw_addr_list *, struct net_device *, int (*)(struct net_device *, const unsigned char *, int));
192:	int __hw_addr_sync(struct netdev_hw_addr_list *, struct netdev_hw_addr_list *, int);
237:	int __hw_addr_sync_dev(struct netdev_hw_addr_list *, struct net_device *, int (*)(struct net_device *, const unsigned char *), int (*)(struct net_device *, const unsigned char *));
211:	void __hw_addr_unsync(struct netdev_hw_addr_list *, struct netdev_hw_addr_list *, int);
385:	void __hw_addr_unsync_dev(struct netdev_hw_addr_list *, struct net_device *, int (*)(struct net_device *, const unsigned char *));
490:	int dev_addr_add(struct net_device *, const unsigned char *, unsigned char);
518:	int dev_addr_del(struct net_device *, const unsigned char *, unsigned char);
436:	void dev_addr_flush(struct net_device *);
454:	int dev_addr_init(struct net_device *);
790:	int dev_mc_add(struct net_device *, const unsigned char *);
746:	int dev_mc_add_excl(struct net_device *, const unsigned char *);
803:	int dev_mc_add_global(struct net_device *, const unsigned char *);
831:	int dev_mc_del(struct net_device *, const unsigned char *);
845:	int dev_mc_del_global(struct net_device *, const unsigned char *);
939:	void dev_mc_flush(struct net_device *);
953:	void dev_mc_init(struct net_device *);
863:	int dev_mc_sync(struct net_device *, struct net_device *);
893:	int dev_mc_sync_multiple(struct net_device *, struct net_device *);
918:	void dev_mc_unsync(struct net_device *, struct net_device *);
584:	int dev_uc_add(struct net_device *, const unsigned char *);
553:	int dev_uc_add_excl(struct net_device *, const unsigned char *);
606:	int dev_uc_del(struct net_device *, const unsigned char *);
717:	void dev_uc_flush(struct net_device *);
731:	void dev_uc_init(struct net_device *);
633:	int dev_uc_sync(struct net_device *, struct net_device *);
663:	int dev_uc_sync_multiple(struct net_device *, struct net_device *);
688:	void dev_uc_unsync(struct net_device *, struct net_device *);
769:	static int __dev_mc_add(struct net_device *, const unsigned char *, bool);
45:	static int __hw_addr_add_ex(struct netdev_hw_addr_list *, const unsigned char *, int, unsigned char, bool, bool, int);
19:	static int __hw_addr_create_ex(struct netdev_hw_addr_list *, const unsigned char *, int, unsigned char, bool, bool);
88:	static int __hw_addr_del_entry(struct netdev_hw_addr_list *, struct netdev_hw_addr *, bool, bool);
112:	static int __hw_addr_del_ex(struct netdev_hw_addr_list *, const unsigned char *, int, unsigned char, bool, bool);
406:	static void __hw_addr_flush(struct netdev_hw_addr_list *);
168:	static int __hw_addr_sync_multiple(struct netdev_hw_addr_list *, struct netdev_hw_addr_list *, int);
133:	static int __hw_addr_sync_one(struct netdev_hw_addr_list *, struct netdev_hw_addr *, int);

File net/core/dev_ioctl.c:
54:	int dev_ifconf(struct net *, struct ifconf *, int);
389:	int dev_ioctl(struct net *, unsigned int, struct ifreq *, bool *);
354:	void dev_load(struct net *, const char *);
39:	int register_gifconf(unsigned int, gifconf_func_t *);
241:	static int dev_ifsioc(struct net *, struct ifreq *, unsigned int);

File net/core/devlink.c:
7968:	struct devlink *devlink_alloc(const struct devlink_ops *, size_t);
10245:	int devlink_compat_flash_update(struct net_device *, const char *);
10273:	int devlink_compat_phys_port_name_get(struct net_device *, char *, size_t);
10224:	void devlink_compat_running_version(struct net_device *, char *, size_t);
10291:	int devlink_compat_switch_id_get(struct net_device *, struct netdev_phys_item_id *);
2097:	int devlink_dpipe_action_put(struct sk_buff *, struct devlink_dpipe_action *);
2502:	void devlink_dpipe_entry_clear(struct devlink_dpipe_entry *);
2487:	int devlink_dpipe_entry_ctx_append(struct devlink_dpipe_dump_ctx *, struct devlink_dpipe_entry *);
2494:	int devlink_dpipe_entry_ctx_close(struct devlink_dpipe_dump_ctx *);
2454:	int devlink_dpipe_entry_ctx_prepare(struct devlink_dpipe_dump_ctx *);
8485:	int devlink_dpipe_headers_register(struct devlink *, struct devlink_dpipe_headers *);
8502:	void devlink_dpipe_headers_unregister(struct devlink *);
2049:	int devlink_dpipe_match_put(struct sk_buff *, struct devlink_dpipe_match *);
8524:	bool devlink_dpipe_table_counter_enabled(struct devlink *, const char *);
8550:	int devlink_dpipe_table_register(struct devlink *, const char *, struct devlink_dpipe_table_ops *, void *, bool);
8748:	int devlink_dpipe_table_resource_set(struct devlink *, const char *, u64, u64);
8593:	void devlink_dpipe_table_unregister(struct devlink *, const char *);
3404:	void devlink_flash_update_begin_notify(struct devlink *);
3414:	void devlink_flash_update_end_notify(struct devlink *);
3424:	void devlink_flash_update_status_notify(struct devlink *, const char *, const char *, unsigned long, unsigned long);
3443:	void devlink_flash_update_timeout_notify(struct devlink *, const char *, const char *, unsigned long);
5386:	int devlink_fmsg_arr_pair_nest_end(struct devlink_fmsg *);
5366:	int devlink_fmsg_arr_pair_nest_start(struct devlink_fmsg *, const char *);
5419:	int devlink_fmsg_binary_pair_nest_end(struct devlink_fmsg *);
5405:	int devlink_fmsg_binary_pair_nest_start(struct devlink_fmsg *, const char *);
5612:	int devlink_fmsg_binary_pair_put(struct devlink_fmsg *, const char *, const void *, u32);
5497:	int devlink_fmsg_binary_put(struct devlink_fmsg *, const void *, u16);
5507:	int devlink_fmsg_bool_pair_put(struct devlink_fmsg *, const char *, bool);
5451:	int devlink_fmsg_bool_put(struct devlink_fmsg *, bool);
5304:	int devlink_fmsg_obj_nest_end(struct devlink_fmsg *);
5287:	int devlink_fmsg_obj_nest_start(struct devlink_fmsg *);
5338:	int devlink_fmsg_pair_nest_start(struct devlink_fmsg *, const char *);
5591:	int devlink_fmsg_string_pair_put(struct devlink_fmsg *, const char *, const char *);
5487:	int devlink_fmsg_string_put(struct devlink_fmsg *, const char *);
5549:	int devlink_fmsg_u32_pair_put(struct devlink_fmsg *, const char *, u32);
5469:	int devlink_fmsg_u32_put(struct devlink_fmsg *, u32);
5570:	int devlink_fmsg_u64_pair_put(struct devlink_fmsg *, const char *, u64);
5478:	int devlink_fmsg_u64_put(struct devlink_fmsg *, u64);
5528:	int devlink_fmsg_u8_pair_put(struct devlink_fmsg *, const char *, u8);
5460:	int devlink_fmsg_u8_put(struct devlink_fmsg *, u8);
8074:	void devlink_free(struct devlink *);
6207:	int devlink_health_report(struct devlink_health_reporter *, const char *, void *);
5952:	struct devlink_health_reporter *devlink_health_reporter_create(struct devlink *, const struct devlink_health_reporter_ops *, u64, void *);
6005:	void devlink_health_reporter_destroy(struct devlink_health_reporter *);
5844:	void *devlink_health_reporter_priv(struct devlink_health_reporter *);
6127:	void devlink_health_reporter_recovery_done(struct devlink_health_reporter *);
6313:	void devlink_health_reporter_state_update(struct devlink_health_reporter *, enum devlink_health_reporter_state);
5067:	int devlink_info_board_serial_number_put(struct devlink_info_req *, const char *);
5055:	int devlink_info_driver_name_put(struct devlink_info_req *, const char *);
5061:	int devlink_info_serial_number_put(struct devlink_info_req *, const char *);
5105:	int devlink_info_version_fixed_put(struct devlink_info_req *, const char *, const char *);
5123:	int devlink_info_version_running_put(struct devlink_info_req *, const char *, const char *);
5114:	int devlink_info_version_stored_put(struct devlink_info_req *, const char *, const char *);
3123:	bool devlink_is_reload_failed(const struct devlink *);
102:	struct net *devlink_net(const struct devlink *);
113:	void devlink_net_set(struct devlink *, struct net *);
9069:	int devlink_param_driverinit_value_get(struct devlink *, u32, union devlink_param_value *);
9092:	int devlink_param_driverinit_value_set(struct devlink *, u32, union devlink_param_value);
9163:	void devlink_param_value_changed(struct devlink *, u32);
9208:	void devlink_param_value_str_fill(union devlink_param_value *, const char *);
8931:	void devlink_params_publish(struct devlink *);
8897:	int devlink_params_register(struct devlink *, const struct devlink_param *, size_t);
8952:	void devlink_params_unpublish(struct devlink *);
8914:	void devlink_params_unregister(struct devlink *, const struct devlink_param *, size_t);
8329:	void devlink_port_attrs_pci_pf_set(struct devlink_port *, u32, u16, bool);
8356:	void devlink_port_attrs_pci_vf_set(struct devlink_port *, u32, u16, u16, bool);
8306:	void devlink_port_attrs_set(struct devlink_port *, struct devlink_port_attrs *);
5917:	struct devlink_health_reporter *devlink_port_health_reporter_create(struct devlink_port *, const struct devlink_health_reporter_ops *, u64, void *);
6021:	void devlink_port_health_reporter_destroy(struct devlink_health_reporter *);
9113:	int devlink_port_param_driverinit_value_get(struct devlink_port *, u32, union devlink_param_value *);
9139:	int devlink_port_param_driverinit_value_set(struct devlink_port *, u32, union devlink_param_value);
9187:	void devlink_port_param_value_changed(struct devlink_port *, u32);
8975:	int devlink_port_params_register(struct devlink_port *, const struct devlink_param *, size_t);
8996:	void devlink_port_params_unregister(struct devlink_port *, const struct devlink_param *, size_t);
9276:	struct devlink_region *devlink_port_region_create(struct devlink_port *, const struct devlink_port_region_ops *, u32, u64);
8141:	int devlink_port_register(struct devlink *, struct devlink_port *, unsigned int);
8276:	void devlink_port_type_clear(struct devlink_port *);
8244:	void devlink_port_type_eth_set(struct devlink_port *, struct net_device *);
8264:	void devlink_port_type_ib_set(struct devlink_port *, struct ib_device *);
8172:	void devlink_port_unregister(struct devlink_port *);
9227:	struct devlink_region *devlink_region_create(struct devlink *, const struct devlink_region_ops *, u32, u64);
9323:	void devlink_region_destroy(struct devlink_region *);
9399:	int devlink_region_snapshot_create(struct devlink_region *, u8 *, u32);
9357:	int devlink_region_snapshot_id_get(struct devlink *, u32 *);
9379:	void devlink_region_snapshot_id_put(struct devlink *, u32);
8006:	int devlink_register(struct devlink *, struct device *);
8058:	void devlink_reload_disable(struct devlink *);
8042:	void devlink_reload_enable(struct devlink *);
3166:	void devlink_remote_reload_actions_performed(struct devlink *, enum devlink_reload_limit, u32);
8779:	void devlink_resource_occ_get_register(struct devlink *, u64, devlink_resource_occ_get_t *, void *);
8805:	void devlink_resource_occ_get_unregister(struct devlink *, u64);
8622:	int devlink_resource_register(struct devlink *, const char *, u64, u64, u64, const struct devlink_resource_size_params *);
8719:	int devlink_resource_size_get(struct devlink *, u64, u64 *);
8687:	void devlink_resources_unregister(struct devlink *, struct devlink_resource *);
8432:	int devlink_sb_register(struct devlink *, unsigned int, u32, u16, u16, u16, u16);
8464:	void devlink_sb_unregister(struct devlink *, unsigned int);
9898:	void *devlink_trap_ctx_priv(void *);
9996:	int devlink_trap_groups_register(struct devlink *, const struct devlink_trap_group *, size_t);
10033:	void devlink_trap_groups_unregister(struct devlink *, const struct devlink_trap_group *, size_t);
10134:	int devlink_trap_policers_register(struct devlink *, const struct devlink_trap_policer *, size_t);
10175:	void devlink_trap_policers_unregister(struct devlink *, const struct devlink_trap_policer *, size_t);
9872:	void devlink_trap_report(struct devlink *, struct sk_buff *, void *, struct devlink_port *, const struct flow_action_cookie *);
9775:	int devlink_traps_register(struct devlink *, const struct devlink_trap *, size_t, void *);
9815:	void devlink_traps_unregister(struct devlink *, const struct devlink_trap *, size_t);
8023:	void devlink_unregister(struct devlink *);
10188:	static void __devlink_compat_running_version(struct devlink *, char *, size_t);
3377:	static void __devlink_flash_update_notify(struct devlink *, enum devlink_command, struct devlink_flash_notify *);
5883:	static struct devlink_health_reporter *__devlink_health_reporter_create(struct devlink *, const struct devlink_health_reporter_ops *, u64, void *);
3983:	static int __devlink_nl_cmd_param_set_doit(struct devlink *, unsigned int, struct list_head *, struct genl_info *, enum devlink_command);
9009:	static int __devlink_param_driverinit_value_get(struct list_head *, u32, union devlink_param_value *);
9032:	static int __devlink_param_driverinit_value_set(struct devlink *, unsigned int, struct list_head *, u32, union devlink_param_value, enum devlink_command);
8833:	static int __devlink_params_register(struct devlink *, unsigned int, struct list_head *, const struct devlink_param *, size_t, enum devlink_command, enum devlink_command);
8375:	static int __devlink_port_phys_port_name_get(struct devlink_port *, char *, size_t);
8187:	static void __devlink_port_type_set(struct devlink_port *, enum devlink_port_type, void *);
4495:	static int __devlink_region_snapshot_create(struct devlink_region *, u8 *, u32);
4472:	static int __devlink_region_snapshot_id_get(struct devlink *, u32 *);
3130:	static void __devlink_reload_stats_update(struct devlink *, u32 *, enum devlink_reload_limit, u32);
4403:	static void __devlink_snapshot_id_decrement(struct devlink *, u32);
4367:	static int __devlink_snapshot_id_increment(struct devlink *, u32);
6942:	static int __devlink_trap_action_set(struct devlink *, struct devlink_trap_item *, enum devlink_trap_action, struct netlink_ext_ack *);
7168:	static int __devlink_trap_group_action_set(struct devlink *, enum devlink_trap_action, struct netlink_ext_ack *, struct devlink_trap_group_item *, struct devlink_trap_group_item *);
1749:	static int __sb_tc_pool_bind_get_dumpit(struct sk_buff *, int, int *, struct devlink *, struct devlink_sb *, u32, u32);
2324:	static int devlink_dpipe_action_values_put(struct sk_buff *, struct devlink_dpipe_value *, unsigned int);
2124:	static int devlink_dpipe_actions_put(struct devlink_dpipe_table *, struct sk_buff *);
2524:	static int devlink_dpipe_entries_fill(struct genl_info *, struct devlink_dpipe_table *, int, enum devlink_command);
2386:	static int devlink_dpipe_entry_put(struct sk_buff *, struct devlink_dpipe_entry *);
2577:	static int devlink_dpipe_fields_put(struct sk_buff *, const struct devlink_dpipe_header *);
2604:	static int devlink_dpipe_header_put(struct sk_buff *, struct devlink_dpipe_header *);
2639:	static int devlink_dpipe_headers_fill(struct genl_info *, struct devlink_dpipe_headers *, int, enum devlink_command);
2361:	static int devlink_dpipe_match_values_put(struct sk_buff *, struct devlink_dpipe_value *, unsigned int);
2076:	static int devlink_dpipe_matches_put(struct devlink_dpipe_table *, struct sk_buff *);
2185:	static int devlink_dpipe_send_and_alloc_skb(struct sk_buff **, struct genl_info *);
2145:	static int devlink_dpipe_table_put(struct sk_buff *, struct devlink_dpipe_table *);
2201:	static int devlink_dpipe_tables_fill(struct genl_info *, struct list_head *, const char *, int, enum devlink_command);
2295:	static int devlink_dpipe_value_put(struct sk_buff *, struct devlink_dpipe_value *);
5794:	static int devlink_fmsg_dumpit(struct devlink_fmsg *, struct sk_buff *, struct netlink_callback *, enum devlink_command);
5261:	static void devlink_fmsg_free(struct devlink_fmsg *);
5663:	static int devlink_fmsg_item_fill_data(struct devlink_fmsg_item *, struct sk_buff *);
5272:	static int devlink_fmsg_nest_common(struct devlink_fmsg *, int);
5691:	static int devlink_fmsg_prepare_skb(struct devlink_fmsg *, struct sk_buff *, int *);
5315:	static int devlink_fmsg_put_name(struct devlink_fmsg *, const char *);
5429:	static int devlink_fmsg_put_value(struct devlink_fmsg *, const void *, u16, u8);
5740:	static int devlink_fmsg_snd(struct devlink_fmsg *, struct genl_info *, int, enum devlink_command);
121:	static struct devlink *devlink_get_from_attrs(struct net *, struct nlattr **);
6166:	static int devlink_health_do_dump(struct devlink_health_reporter *, void *, struct netlink_ext_ack *);
6255:	static struct devlink_health_reporter *devlink_health_reporter_get_from_attrs(struct devlink *, struct nlattr **);
5986:	static void devlink_health_reporter_put(struct devlink_health_reporter *);
6135:	static int devlink_health_reporter_recover(struct devlink_health_reporter *, void *, struct netlink_ext_ack *);
5075:	static int devlink_info_version_put(struct devlink_info_req *, int, const char *, const char *);
10338:	static int devlink_init(void);
3040:	static struct net *devlink_netns_get(struct sk_buff *, struct genl_info *);
2554:	static int devlink_nl_cmd_dpipe_entries_get(struct sk_buff *, struct genl_info *);
2704:	static int devlink_nl_cmd_dpipe_headers_get(struct sk_buff *, struct genl_info *);
2738:	static int devlink_nl_cmd_dpipe_table_counters_set(struct sk_buff *, struct genl_info *);
2281:	static int devlink_nl_cmd_dpipe_table_get(struct sk_buff *, struct genl_info *);
1984:	static int devlink_nl_cmd_eswitch_get_doit(struct sk_buff *, struct genl_info *);
2006:	static int devlink_nl_cmd_eswitch_set_doit(struct sk_buff *, struct genl_info *);
3460:	static int devlink_nl_cmd_flash_update(struct sk_buff *, struct genl_info *);
847:	static int devlink_nl_cmd_get_doit(struct sk_buff *, struct genl_info *);
867:	static int devlink_nl_cmd_get_dumpit(struct sk_buff *, struct netlink_callback *);
6494:	static int devlink_nl_cmd_health_reporter_diagnose_doit(struct sk_buff *, struct genl_info *);
6577:	static int devlink_nl_cmd_health_reporter_dump_clear_doit(struct sk_buff *, struct genl_info *);
6539:	static int devlink_nl_cmd_health_reporter_dump_get_dumpit(struct sk_buff *, struct netlink_callback *);
6330:	static int devlink_nl_cmd_health_reporter_get_doit(struct sk_buff *, struct genl_info *);
6364:	static int devlink_nl_cmd_health_reporter_get_dumpit(struct sk_buff *, struct netlink_callback *);
6477:	static int devlink_nl_cmd_health_reporter_recover_doit(struct sk_buff *, struct genl_info *);
6435:	static int devlink_nl_cmd_health_reporter_set_doit(struct sk_buff *, struct genl_info *);
6599:	static int devlink_nl_cmd_health_reporter_test_doit(struct sk_buff *, struct genl_info *);
5162:	static int devlink_nl_cmd_info_get_doit(struct sk_buff *, struct genl_info *);
5187:	static int devlink_nl_cmd_info_get_dumpit(struct sk_buff *, struct netlink_callback *);
3956:	static int devlink_nl_cmd_param_get_doit(struct sk_buff *, struct genl_info *);
3824:	static int devlink_nl_cmd_param_get_dumpit(struct sk_buff *, struct netlink_callback *);
4041:	static int devlink_nl_cmd_param_set_doit(struct sk_buff *, struct genl_info *);
897:	static int devlink_nl_cmd_port_get_doit(struct sk_buff *, struct genl_info *);
921:	static int devlink_nl_cmd_port_get_dumpit(struct sk_buff *, struct netlink_callback *);
4141:	static int devlink_nl_cmd_port_param_get_doit(struct sk_buff *, struct genl_info *);
4091:	static int devlink_nl_cmd_port_param_get_dumpit(struct sk_buff *, struct netlink_callback *);
4170:	static int devlink_nl_cmd_port_param_set_doit(struct sk_buff *, struct genl_info *);
1042:	static int devlink_nl_cmd_port_set_doit(struct sk_buff *, struct genl_info *);
1080:	static int devlink_nl_cmd_port_split_doit(struct sk_buff *, struct genl_info *);
1125:	static int devlink_nl_cmd_port_unsplit_doit(struct sk_buff *, struct genl_info *);
4685:	static int devlink_nl_cmd_region_del(struct sk_buff *, struct genl_info *);
4624:	static int devlink_nl_cmd_region_get_devlink_dumpit(struct sk_buff *, struct netlink_callback *, struct devlink *, int *, int);
4550:	static int devlink_nl_cmd_region_get_doit(struct sk_buff *, struct genl_info *);
4662:	static int devlink_nl_cmd_region_get_dumpit(struct sk_buff *, struct netlink_callback *);
4728:	static int devlink_nl_cmd_region_new(struct sk_buff *, struct genl_info *);
4843:	static int devlink_nl_cmd_region_read_chunk_fill(struct sk_buff *, u8 *, u32, u64, struct devlink *);
4917:	static int devlink_nl_cmd_region_read_dumpit(struct sk_buff *, struct netlink_callback *);
3250:	static int devlink_nl_cmd_reload(struct sk_buff *, struct genl_info *);
3006:	static int devlink_nl_cmd_resource_dump(struct sk_buff *, struct genl_info *);
2826:	static int devlink_nl_cmd_resource_set(struct sk_buff *, struct genl_info *);
1176:	static int devlink_nl_cmd_sb_get_doit(struct sk_buff *, struct genl_info *);
1203:	static int devlink_nl_cmd_sb_get_dumpit(struct sk_buff *, struct netlink_callback *);
1913:	static int devlink_nl_cmd_sb_occ_max_clear_doit(struct sk_buff *, struct genl_info *);
1897:	static int devlink_nl_cmd_sb_occ_snapshot_doit(struct sk_buff *, struct genl_info *);
1285:	static int devlink_nl_cmd_sb_pool_get_doit(struct sk_buff *, struct genl_info *);
1347:	static int devlink_nl_cmd_sb_pool_get_dumpit(struct sk_buff *, struct netlink_callback *);
1400:	static int devlink_nl_cmd_sb_pool_set_doit(struct sk_buff *, struct genl_info *);
1491:	static int devlink_nl_cmd_sb_port_pool_get_doit(struct sk_buff *, struct genl_info *);
1560:	static int devlink_nl_cmd_sb_port_pool_get_dumpit(struct sk_buff *, struct netlink_callback *);
1613:	static int devlink_nl_cmd_sb_port_pool_set_doit(struct sk_buff *, struct genl_info *);
1705:	static int devlink_nl_cmd_sb_tc_pool_bind_get_doit(struct sk_buff *, struct genl_info *);
1801:	static int devlink_nl_cmd_sb_tc_pool_bind_get_dumpit(struct sk_buff *, struct netlink_callback *);
1858:	static int devlink_nl_cmd_sb_tc_pool_bind_set_doit(struct sk_buff *, struct genl_info *);
6868:	static int devlink_nl_cmd_trap_get_doit(struct sk_buff *, struct genl_info *);
6903:	static int devlink_nl_cmd_trap_get_dumpit(struct sk_buff *, struct netlink_callback *);
7090:	static int devlink_nl_cmd_trap_group_get_doit(struct sk_buff *, struct genl_info *);
7125:	static int devlink_nl_cmd_trap_group_get_dumpit(struct sk_buff *, struct netlink_callback *);
7274:	static int devlink_nl_cmd_trap_group_set_doit(struct sk_buff *, struct genl_info *);
7396:	static int devlink_nl_cmd_trap_policer_get_doit(struct sk_buff *, struct genl_info *);
7431:	static int devlink_nl_cmd_trap_policer_get_dumpit(struct sk_buff *, struct netlink_callback *);
7523:	static int devlink_nl_cmd_trap_policer_set_doit(struct sk_buff *, struct genl_info *);
6985:	static int devlink_nl_cmd_trap_set_doit(struct sk_buff *, struct genl_info *);
1929:	static int devlink_nl_eswitch_fill(struct sk_buff *, struct devlink *, u32, u32, int, enum devlink_command);
603:	static int devlink_nl_fill(struct sk_buff *, struct devlink *, enum devlink_command, u32, u32, int);
3333:	static int devlink_nl_flash_update_fill(struct sk_buff *, struct devlink *, enum devlink_command, struct devlink_flash_notify *);
6032:	static int devlink_nl_health_reporter_fill(struct sk_buff *, struct devlink *, struct devlink_health_reporter *, enum devlink_command, u32, u32, int);
5133:	static int devlink_nl_info_fill(struct sk_buff *, struct devlink *, u32, u32, int, struct netlink_ext_ack *, enum devlink_command);
3706:	static int devlink_nl_param_fill(struct sk_buff *, struct devlink *, unsigned int, struct devlink_param_item *, enum devlink_command, u32, u32, int);
3657:	static int devlink_nl_param_value_fill_one(struct sk_buff *, enum devlink_param_type, enum devlink_param_cmode, union devlink_param_value);
660:	static int devlink_nl_port_attrs_put(struct sk_buff *, struct devlink_port *);
757:	static int devlink_nl_port_fill(struct sk_buff *, struct devlink *, struct devlink_port *, enum devlink_command, u32, u32, int, struct netlink_ext_ack *);
715:	static int devlink_nl_port_function_attrs_put(struct sk_buff *, struct devlink_port *, struct netlink_ext_ack *);
452:	static void devlink_nl_post_doit(const struct genl_ops *, struct sk_buff *, struct genl_info *);
415:	static int devlink_nl_pre_doit(const struct genl_ops *, struct sk_buff *, struct genl_info *);
473:	static int devlink_nl_put_handle(struct sk_buff *, struct devlink *);
4231:	static int devlink_nl_region_fill(struct sk_buff *, struct devlink *, u32, u32, int, struct devlink_region *, enum devlink_command);
4335:	static void devlink_nl_region_notify(struct devlink_region *, struct devlink_snapshot *, enum devlink_command);
4277:	static struct sk_buff *devlink_nl_region_notify_build(struct devlink_region *, struct devlink_snapshot *, enum devlink_command, u32, u32);
4204:	static int devlink_nl_region_snapshots_id_put(struct sk_buff *, struct devlink_region *, struct devlink *);
3219:	static int devlink_nl_reload_actions_performed_snd(struct devlink *, u32, struct genl_info *, enum devlink_command);
1138:	static int devlink_nl_sb_fill(struct sk_buff *, struct devlink *, struct devlink_sb *, u32, u32, int, enum devlink_command);
1242:	static int devlink_nl_sb_pool_fill(struct sk_buff *, struct devlink *, struct devlink_sb *, u16, u32, u32, int, enum devlink_command);
1432:	static int devlink_nl_sb_port_pool_fill(struct sk_buff *, struct devlink *, struct devlink_port *, struct devlink_sb *, u16, u32, u32, int, enum devlink_command);
1641:	static int devlink_nl_sb_tc_pool_bind_fill(struct sk_buff *, struct devlink *, struct devlink_port *, struct devlink_sb *, u16, enum devlink_sb_pool_type, u32, u32, int, enum devlink_command);
6818:	static int devlink_nl_trap_fill(struct sk_buff *, struct devlink *, const struct devlink_trap_item *, enum devlink_command, u32, u32, int);
7049:	static int devlink_nl_trap_group_fill(struct sk_buff *, struct devlink *, const struct devlink_trap_group_item *, enum devlink_command, u32, u32, int);
7355:	static int devlink_nl_trap_policer_fill(struct sk_buff *, struct devlink *, const struct devlink_trap_policer_item *, enum devlink_command, u32, u32, int);
639:	static void devlink_notify(struct devlink *, enum devlink_command);
3798:	static void devlink_param_notify(struct devlink *, unsigned int, struct devlink_param_item *, enum devlink_command);
4076:	static void devlink_param_unregister_one(struct devlink *, unsigned int, struct list_head *, enum devlink_command, const struct devlink_param *, const struct devlink_param *);
3899:	static int devlink_param_value_get_from_info(union devlink_param_value *, struct genl_info *, const struct devlink_param *, struct genl_info *, const struct devlink_param *);
10309:	static void devlink_pernet_pre_exit(struct net *);
820:	static void devlink_port_notify(struct devlink_port *, enum devlink_command);
8201:	static void devlink_port_type_netdev_checks(struct net_device *, struct devlink_port *);
8095:	static void devlink_port_type_warn(struct work_struct *);
6102:	static void devlink_recover_notify(struct devlink_health_reporter *, enum devlink_command);
4535:	static void devlink_region_snapshot_del(struct devlink_region *, struct devlink_snapshot *);
3181:	static int devlink_reload(struct devlink *, struct net *, enum devlink_reload_action, enum devlink_reload_limit, u32 *, struct netlink_ext_ack *);
520:	static int devlink_reload_stat_put(struct sk_buff *, enum devlink_reload_limit, u32);
540:	static int devlink_reload_stats_put(struct sk_buff *, struct devlink *, bool);
2937:	static int devlink_resource_fill(struct genl_info *, int, enum devlink_command);
2757:	static struct devlink_resource *devlink_resource_find(struct devlink *, struct devlink_resource *, u64);
2884:	static int devlink_resource_put(struct sk_buff *, struct devlink_resource *, struct devlink *);
2857:	static int devlink_resource_size_params_put(struct devlink_resource *, struct sk_buff *);
3018:	static int devlink_resources_validate(struct devlink *, struct devlink_resource *, struct genl_info *);
9625:	static void devlink_trap_group_notify(struct devlink *, const struct devlink_trap_group_item *, enum devlink_command);
9926:	static int devlink_trap_group_register(struct devlink *, const struct devlink_trap_group *);
9972:	static void devlink_trap_group_unregister(struct devlink *, const struct devlink_trap_group *, const struct devlink_trap_group *);
6741:	static int devlink_trap_metadata_put(struct sk_buff *, const struct devlink_trap *);
9666:	static void devlink_trap_notify(struct devlink *, const struct devlink_trap_item *, enum devlink_command);
10047:	static void devlink_trap_policer_notify(struct devlink *, const struct devlink_trap_policer_item *, enum devlink_command);
10073:	static int devlink_trap_policer_register(struct devlink *, const struct devlink_trap_policer *);
7474:	static int devlink_trap_policer_set(struct devlink *, struct devlink_trap_policer_item *, struct genl_info *);
7323:	static int devlink_trap_policer_stats_put(struct sk_buff *, struct devlink *, const struct devlink_trap_policer *);
10108:	static void devlink_trap_policer_unregister(struct devlink *, const struct devlink_trap_policer *);
9691:	static int devlink_trap_register(struct devlink *, const struct devlink_trap *, void *);
6789:	static int devlink_trap_stats_put(struct sk_buff *, struct devlink_stats *);
9735:	static void devlink_trap_unregister(struct devlink *, const struct devlink_trap *);

File net/core/drop_monitor.c:
1553:	static int dropmon_net_event(struct notifier_block *, unsigned long, void *);
1749:	static void exit_net_drop_monitor(void);
1710:	static int init_net_drop_monitor(void);
1289:	static int net_dm_cmd_config(struct sk_buff *, struct genl_info *);
1398:	static int net_dm_cmd_config_get(struct sk_buff *, struct genl_info *);
1533:	static int net_dm_cmd_stats_get(struct sk_buff *, struct genl_info *);
1347:	static int net_dm_cmd_trace(struct sk_buff *, struct genl_info *);
1371:	static int net_dm_config_fill(struct sk_buff *, struct genl_info *, struct genl_info *);
324:	static int net_dm_hw_entry_put(struct sk_buff *, const struct net_dm_hw_entry *);
820:	static struct devlink_trap_metadata *net_dm_hw_metadata_copy(const struct devlink_trap_metadata *);
1018:	static int net_dm_hw_monitor_start(struct netlink_ext_ack *);
1074:	static void net_dm_hw_monitor_stop(struct netlink_ext_ack *);
878:	static void net_dm_hw_packet_report(struct sk_buff *);
749:	static int net_dm_hw_packet_report_fill(struct sk_buff *, struct sk_buff *, size_t);
721:	static size_t net_dm_hw_packet_report_size(size_t, const struct devlink_trap_metadata *);
913:	static void net_dm_hw_packet_work(struct work_struct *);
302:	static struct net_dm_hw_entries *net_dm_hw_reset_per_cpu_data(struct per_cpu_dm_data *);
1482:	static int net_dm_hw_stats_put(struct sk_buff *);
376:	static int net_dm_hw_summary_report_fill(struct sk_buff *, const struct net_dm_hw_entries *);
407:	static void net_dm_hw_summary_work(struct work_struct *);
933:	static void net_dm_hw_trap_packet_probe(void *, const struct devlink *, struct sk_buff *, const struct devlink_trap_metadata *);
437:	static void net_dm_hw_trap_summary_probe(const struct devlink_trap_metadata *, struct sk_buff *, const struct devlink *, void *);
1636:	static void net_dm_nl_post_doit(const struct genl_ops *, struct sk_buff *, struct genl_info *);
1628:	static int net_dm_nl_pre_doit(const struct genl_ops *, struct sk_buff *, struct genl_info *);
661:	static void net_dm_packet_report(struct sk_buff *);
602:	static int net_dm_packet_report_fill(struct sk_buff *, struct sk_buff *, size_t);
577:	static int net_dm_packet_report_in_port_put(struct sk_buff *, int, const char *);
491:	static void net_dm_packet_trace_kfree_skb_hit(void *, struct sk_buff *, void *);
534:	static void net_dm_packet_trace_napi_poll_hit(void *, struct napi_struct *, int, int);
694:	static void net_dm_packet_work(struct work_struct *);
1506:	static int net_dm_stats_fill(struct sk_buff *, struct genl_info *, struct genl_info *);
1438:	static int net_dm_stats_put(struct sk_buff *);
1164:	static void net_dm_trace_off_set(void);
1108:	static int net_dm_trace_on_set(struct netlink_ext_ack *);
132:	static struct sk_buff *reset_per_cpu_data(struct per_cpu_dm_data *);
208:	static void sched_send_work(struct timer_list *);
189:	static void send_dm_alert(struct work_struct *);
215:	static void trace_drop_common(void *, struct sk_buff *);
265:	static void trace_kfree_skb_hit(void *, struct sk_buff *, void *);
270:	static void trace_napi_poll_hit(void *, struct napi_struct *, int, int);

File net/core/dst.c:
229:	void __dst_destroy_metrics_generic(struct dst_entry *, unsigned long);
79:	void *dst_alloc(struct dst_ops *, struct net_device *, int, int, unsigned short);
240:	struct dst_entry *dst_blackhole_check(struct dst_entry *, u32);
245:	u32 *dst_blackhole_cow_metrics(struct dst_entry *, unsigned long);
270:	unsigned int dst_blackhole_mtu(const struct dst_entry *);
250:	struct neighbour *dst_blackhole_neigh_lookup(const struct dst_entry *, struct sk_buff *, const void *);
264:	void dst_blackhole_redirect(struct dst_entry *, struct sock *, struct sk_buff *);
257:	void dst_blackhole_update_pmtu(struct dst_entry *, struct sock *, struct sk_buff *, u32, bool);
199:	u32 *dst_cow_metrics_generic(struct dst_entry *, unsigned long);
103:	struct dst_entry *dst_destroy(struct dst_entry *);
154:	void dst_dev_put(struct dst_entry *);
30:	int dst_discard_out(struct net *, struct sock *, struct sk_buff *);
47:	void dst_init(struct dst_entry *, struct dst_ops *, struct net_device *, int, int, unsigned short);
169:	void dst_release(struct dst_entry *);
184:	void dst_release_immediate(struct dst_entry *);
300:	struct metadata_dst *metadata_dst_alloc(u8, enum metadata_type, gfp_t);
326:	struct metadata_dst *metadata_dst_alloc_percpu(u8, enum metadata_type, gfp_t);
315:	void metadata_dst_free(struct metadata_dst *);
343:	void metadata_dst_free_percpu(struct metadata_dst *);
288:	static void __metadata_dst_init(struct metadata_dst *, enum metadata_type, u8);
138:	static void dst_destroy_rcu(struct callback_head *);

File net/core/dst_cache.c:
152:	void dst_cache_destroy(struct dst_cache *);
63:	struct dst_entry *dst_cache_get(struct dst_cache *);
72:	struct rtable *dst_cache_get_ip4(struct dst_cache *, __be32 *);
120:	struct dst_entry *dst_cache_get_ip6(struct dst_cache *, struct in6_addr *);
140:	int dst_cache_init(struct dst_cache *, gfp_t);
166:	void dst_cache_reset_now(struct dst_cache *);
90:	void dst_cache_set_ip4(struct dst_cache *, struct dst_entry *, __be32);
105:	void dst_cache_set_ip6(struct dst_cache *, struct dst_entry *, const struct in6_addr *);
27:	static void dst_cache_per_cpu_dst_set(struct dst_cache_pcpu *, struct dst_entry *, u32);
38:	static struct dst_entry *dst_cache_per_cpu_get(struct dst_cache *, struct dst_cache_pcpu *);

File net/core/fib_notifier.c:
18:	int call_fib_notifier(struct notifier_block *, enum fib_event_type, struct fib_notifier_info *);
29:	int call_fib_notifiers(struct net *, enum fib_event_type, struct fib_notifier_info *);
143:	struct fib_notifier_ops *fib_notifier_ops_register(const struct fib_notifier_ops *, struct net *);
164:	void fib_notifier_ops_unregister(struct fib_notifier_ops *);
99:	int register_fib_notifier(struct net *, struct notifier_block *, void (*)(struct notifier_block *), struct netlink_ext_ack *);
121:	int unregister_fib_notifier(struct net *, struct notifier_block *);
194:	static int fib_notifier_init(void);
180:	static void fib_notifier_net_exit(struct net *);
171:	static int fib_notifier_net_init(struct net *);
40:	static unsigned int fib_seq_sum(struct net *);

File net/core/fib_rules.c:
55:	int fib_default_rule_add(struct fib_rules_ops *, u32, u32, u32);
861:	int fib_nl_delrule(struct sk_buff *, struct nlmsghdr *, struct netlink_ext_ack *);
753:	int fib_nl_newrule(struct sk_buff *, struct nlmsghdr *, struct netlink_ext_ack *);
37:	bool fib_rule_matchall(const struct fib_rule *);
378:	int fib_rules_dump(struct net *, struct notifier_block *, int, struct netlink_ext_ack *);
292:	int fib_rules_lookup(struct fib_rules_ops *, struct flowi *, int, struct fib_lookup_arg *);
164:	struct fib_rules_ops *fib_rules_register(const struct fib_rules_ops *, struct net *);
400:	unsigned int fib_rules_seq_read(struct net *, int);
198:	void fib_rules_unregister(struct fib_rules_ops *);
1193:	static void attach_rules(struct list_head *, struct net_device *);
1068:	static int dump_rules(struct sk_buff *, struct netlink_callback *, struct fib_rules_ops *);
516:	static int fib_nl2rule(struct nlmsghdr *, struct netlink_ext_ack *, struct fib_rules_ops *, struct nlattr **, struct fib_rule **, bool *, struct sk_buff *, struct sk_buff *);
1121:	static int fib_nl_dumprule(struct sk_buff *, struct netlink_callback *);
987:	static int fib_nl_fill_rule(struct sk_buff *, struct fib_rule *, u32, u32, int, int, struct fib_rules_ops *);
186:	static void fib_rules_cleanup_ops(struct fib_rules_ops *);
1220:	static int fib_rules_event(struct notifier_block *, unsigned long, void *);
1272:	static int fib_rules_init(void);
1262:	static void fib_rules_net_exit(struct net *);
1255:	static int fib_rules_net_init(struct net *);
104:	static struct fib_rules_ops *lookup_rules_ops(struct net *, int);
1165:	static void notify_rule_change(int, struct fib_rule *, struct fib_rules_ops *, struct nlmsghdr *, u32);
686:	static int rule_exists(struct fib_rules_ops *, struct fib_rule_hdr *, struct nlattr **, struct fib_rule *);
417:	static struct fib_rule *rule_find(struct fib_rules_ops *, struct fib_rule_hdr *, struct nlattr **, struct fib_rule *, bool);

File net/core/filter.c:
5173:	u64 bpf_bind(u64, u64, u64, u64, u64);
3960:	void bpf_clear_redirect_map(struct bpf_map *);
2420:	u64 bpf_clone_redirect(u64, u64, u64, u64, u64);
1991:	u64 bpf_csum_diff(u64, u64, u64, u64, u64);
2050:	u64 bpf_csum_level(u64, u64, u64, u64, u64);
2030:	u64 bpf_csum_update(u64, u64, u64, u64, u64);
10308:	unsigned int bpf_dispatcher_xdp_func(const void *, const struct bpf_insn *, unsigned int (*)(const void *, const struct bpf_insn *));
1750:	u64 bpf_flow_dissector_load_bytes(u64, u64, u64, u64, u64);
3052:	u64 bpf_get_cgroup_classid(u64, u64, u64, u64, u64);
3023:	u64 bpf_get_cgroup_classid_curr(u64, u64, u64, u64, u64);
3076:	u64 bpf_get_hash_recalc(u64, u64, u64, u64, u64);
6382:	u64 bpf_get_listener_sock(u64, u64, u64, u64, u64);
4648:	u64 bpf_get_netns_cookie_sock(u64, u64, u64, u64, u64);
4660:	u64 bpf_get_netns_cookie_sock_addr(u64, u64, u64, u64, u64);
3064:	u64 bpf_get_route_realm(u64, u64, u64, u64, u64);
4591:	u64 bpf_get_socket_cookie(u64, u64, u64, u64, u64);
4615:	u64 bpf_get_socket_cookie_sock(u64, u64, u64, u64, u64);
4603:	u64 bpf_get_socket_cookie_sock_addr(u64, u64, u64, u64, u64);
4627:	u64 bpf_get_socket_cookie_sock_ops(u64, u64, u64, u64, u64);
4672:	u64 bpf_get_socket_uid(u64, u64, u64, u64, u64);
6864:	bool bpf_helper_changes_pkt_data(void *);
1894:	u64 bpf_l3_csum_replace(u64, u64, u64, u64, u64);
1938:	u64 bpf_l4_csum_replace(u64, u64, u64, u64, u64);
5637:	u64 bpf_lwt_in_push_encap(u64, u64, u64, u64, u64);
5655:	u64 bpf_lwt_xmit_push_encap(u64, u64, u64, u64, u64);
2568:	u64 bpf_msg_apply_bytes(u64, u64, u64, u64, u64);
2582:	u64 bpf_msg_cork_bytes(u64, u64, u64, u64, u64);
2884:	u64 bpf_msg_pop_data(u64, u64, u64, u64, u64);
2596:	u64 bpf_msg_pull_data(u64, u64, u64, u64, u64);
2722:	u64 bpf_msg_push_data(u64, u64, u64, u64, u64);
10310:	void bpf_prog_change_xdp(struct bpf_prog *, struct bpf_prog *);
1357:	int bpf_prog_create(struct bpf_prog **, struct sock_fprog_kern *);
1402:	int bpf_prog_create_from_user(struct bpf_prog **, struct sock_fprog *, bpf_aux_classic_check_t, bool);
1445:	void bpf_prog_destroy(struct bpf_prog *);
2498:	u64 bpf_redirect(u64, u64, u64, u64, u64);
2540:	u64 bpf_redirect_neigh(u64, u64, u64, u64, u64);
2519:	u64 bpf_redirect_peer(u64, u64, u64, u64, u64);
9892:	struct sock *bpf_run_sk_reuseport(struct sock_reuseport *, struct sock *, struct bpf_prog *, struct sk_buff *, u32);
3109:	u64 bpf_set_hash(u64, u64, u64, u64, u64);
3093:	u64 bpf_set_hash_invalid(u64, u64, u64, u64, u64);
4530:	u64 bpf_sk_ancestor_cgroup_id(u64, u64, u64, u64, u64);
6606:	u64 bpf_sk_assign(u64, u64, u64, u64, u64);
4518:	u64 bpf_sk_cgroup_id(u64, u64, u64, u64, u64);
1851:	u64 bpf_sk_fullsock(u64, u64, u64, u64, u64);
10127:	u64 bpf_sk_lookup_assign(u64, u64, u64, u64, u64);
6046:	u64 bpf_sk_lookup_tcp(u64, u64, u64, u64, u64);
6065:	u64 bpf_sk_lookup_udp(u64, u64, u64, u64, u64);
6084:	u64 bpf_sk_release(u64, u64, u64, u64, u64);
3595:	u64 bpf_skb_adjust_room(u64, u64, u64, u64, u64);
4504:	u64 bpf_skb_ancestor_cgroup_id(u64, u64, u64, u64, u64);
3034:	u64 bpf_skb_cgroup_classid(u64, u64, u64, u64, u64);
4474:	u64 bpf_skb_cgroup_id(u64, u64, u64, u64, u64);
3787:	u64 bpf_skb_change_head(u64, u64, u64, u64, u64);
3334:	u64 bpf_skb_change_proto(u64, u64, u64, u64, u64);
3720:	u64 bpf_skb_change_tail(u64, u64, u64, u64, u64);
3373:	u64 bpf_skb_change_type(u64, u64, u64, u64, u64);
6399:	u64 bpf_skb_ecn_set_ce(u64, u64, u64, u64, u64);
4159:	u64 bpf_skb_event_output(u64, u64, u64, u64, u64);
5540:	u64 bpf_skb_fib_lookup(u64, u64, u64, u64, u64);
164:	u64 bpf_skb_get_nlattr(u64, u64, u64, u64, u64);
184:	u64 bpf_skb_get_nlattr_nest(u64, u64, u64, u64, u64);
159:	u64 bpf_skb_get_pay_offset(u64, u64, u64, u64, u64);
4203:	u64 bpf_skb_get_tunnel_key(u64, u64, u64, u64, u64);
4273:	u64 bpf_skb_get_tunnel_opt(u64, u64, u64, u64, u64);
5217:	u64 bpf_skb_get_xfrm_state(u64, u64, u64, u64, u64);
1720:	u64 bpf_skb_load_bytes(u64, u64, u64, u64, u64);
1784:	u64 bpf_skb_load_bytes_relative(u64, u64, u64, u64, u64);
235:	u64 bpf_skb_load_helper_16(u64, u64, u64, u64, u64);
255:	u64 bpf_skb_load_helper_16_no_cache(u64, u64, u64, u64, u64);
262:	u64 bpf_skb_load_helper_32(u64, u64, u64, u64, u64);
282:	u64 bpf_skb_load_helper_32_no_cache(u64, u64, u64, u64, u64);
208:	u64 bpf_skb_load_helper_8(u64, u64, u64, u64, u64);
228:	u64 bpf_skb_load_helper_8_no_cache(u64, u64, u64, u64, u64);
1829:	u64 bpf_skb_pull_data(u64, u64, u64, u64, u64);
4309:	u64 bpf_skb_set_tunnel_key(u64, u64, u64, u64, u64);
4382:	u64 bpf_skb_set_tunnel_opt(u64, u64, u64, u64, u64);
1683:	u64 bpf_skb_store_bytes(u64, u64, u64, u64, u64);
4432:	u64 bpf_skb_under_cgroup(u64, u64, u64, u64, u64);
3153:	u64 bpf_skb_vlan_pop(u64, u64, u64, u64, u64);
3127:	u64 bpf_skb_vlan_push(u64, u64, u64, u64, u64);
6027:	u64 bpf_skc_lookup_tcp(u64, u64, u64, u64, u64);
10324:	u64 bpf_skc_to_tcp6_sock(u64, u64, u64, u64, u64);
10390:	u64 bpf_skc_to_tcp_request_sock(u64, u64, u64, u64, u64);
10345:	u64 bpf_skc_to_tcp_sock(u64, u64, u64, u64, u64);
10361:	u64 bpf_skc_to_tcp_timewait_sock(u64, u64, u64, u64, u64);
10413:	u64 bpf_skc_to_udp6_sock(u64, u64, u64, u64, u64);
5007:	u64 bpf_sock_addr_getsockopt(u64, u64, u64, u64, u64);
4990:	u64 bpf_sock_addr_setsockopt(u64, u64, u64, u64, u64);
6186:	u64 bpf_sock_addr_sk_lookup_tcp(u64, u64, u64, u64, u64);
6205:	u64 bpf_sock_addr_sk_lookup_udp(u64, u64, u64, u64, u64);
6167:	u64 bpf_sock_addr_skc_lookup_tcp(u64, u64, u64, u64, u64);
7695:	bool bpf_sock_common_is_valid_access(int, int, enum bpf_access_type, struct bpf_insn_access_aux *);
8641:	u32 bpf_sock_convert_ctx_access(enum bpf_access_type, const struct bpf_insn *, struct bpf_insn *, struct bpf_prog *, u32 *);
7707:	bool bpf_sock_is_valid_access(int, int, struct bpf_insn_access_aux *, enum bpf_access_type);
5148:	u64 bpf_sock_ops_cb_flags_set(u64, u64, u64, u64, u64);
5109:	u64 bpf_sock_ops_getsockopt(u64, u64, u64, u64, u64);
6680:	u64 bpf_sock_ops_load_hdr_opt(u64, u64, u64, u64, u64);
6836:	u64 bpf_sock_ops_reserve_hdr_opt(u64, u64, u64, u64, u64);
5024:	u64 bpf_sock_ops_setsockopt(u64, u64, u64, u64, u64);
6758:	u64 bpf_sock_ops_store_hdr_opt(u64, u64, u64, u64, u64);
6470:	u64 bpf_tcp_check_syncookie(u64, u64, u64, u64, u64);
6537:	u64 bpf_tcp_gen_syncookie(u64, u64, u64, u64, u64);
6367:	u64 bpf_tcp_sock(u64, u64, u64, u64, u64);
6243:	u32 bpf_tcp_sock_convert_ctx_access(enum bpf_access_type, const struct bpf_insn *, struct bpf_insn *, struct bpf_prog *, u32 *);
6224:	bool bpf_tcp_sock_is_valid_access(int, int, enum bpf_access_type, struct bpf_insn_access_aux *);
7922:	void bpf_warn_invalid_xdp_action(u32);
3828:	u64 bpf_xdp_adjust_head(u64, u64, u64, u64, u64);
3891:	u64 bpf_xdp_adjust_meta(u64, u64, u64, u64, u64);
3856:	u64 bpf_xdp_adjust_tail(u64, u64, u64, u64, u64);
4551:	u64 bpf_xdp_event_output(u64, u64, u64, u64, u64);
5506:	u64 bpf_xdp_fib_lookup(u64, u64, u64, u64, u64);
4087:	u64 bpf_xdp_redirect(u64, u64, u64, u64, u64);
4110:	u64 bpf_xdp_redirect_map(u64, u64, u64, u64, u64);
6144:	u64 bpf_xdp_sk_lookup_tcp(u64, u64, u64, u64, u64);
6098:	u64 bpf_xdp_sk_lookup_udp(u64, u64, u64, u64, u64);
6121:	u64 bpf_xdp_skc_lookup_tcp(u64, u64, u64, u64, u64);
6438:	u32 bpf_xdp_sock_convert_ctx_access(enum bpf_access_type, const struct bpf_insn *, struct bpf_insn *, struct bpf_prog *, u32 *);
6423:	bool bpf_xdp_sock_is_valid_access(int, int, enum bpf_access_type, struct bpf_insn_access_aux *);
84:	int copy_bpf_fprog_from_user(struct sock_fprog *, sockptr_t, int);
1569:	int sk_attach_bpf(u32, struct sock *);
1524:	int sk_attach_filter(struct sock_fprog *, struct sock *);
9813:	int sk_detach_filter(struct sock *);
1225:	bool sk_filter_charge(struct sock *, struct sk_filter *);
120:	int sk_filter_trim_cap(struct sock *, struct sk_buff *, unsigned int);
1201:	void sk_filter_uncharge(struct sock *, struct sk_filter *);
9833:	int sk_get_filter(struct sock *, struct sock_filter *, unsigned int);
1586:	int sk_reuseport_attach_bpf(u32, struct sock *);
1542:	int sk_reuseport_attach_filter(struct sock_fprog *, struct sock *);
9962:	u64 sk_reuseport_load_bytes(u64, u64, u64, u64, u64);
9979:	u64 sk_reuseport_load_bytes_relative(u64, u64, u64, u64, u64);
1631:	void sk_reuseport_prog_free(struct bpf_prog *);
9908:	u64 sk_select_reuseport(u64, u64, u64, u64, u64);
3553:	u64 sk_skb_adjust_room(u64, u64, u64, u64, u64);
3805:	u64 sk_skb_change_head(u64, u64, u64, u64, u64);
3738:	u64 sk_skb_change_tail(u64, u64, u64, u64, u64);
1872:	u64 sk_skb_pull_data(u64, u64, u64, u64, u64);
2463:	int skb_do_redirect(struct sk_buff *);
3936:	void xdp_do_flush(void);
4055:	int xdp_do_generic_redirect(struct net_device *, struct sk_buff *, struct xdp_buff *, struct bpf_prog *);
3977:	int xdp_do_redirect(struct net_device *, struct xdp_buff *, struct bpf_prog *);
2158:	static int __bpf_redirect(struct sk_buff *, struct net_device *, u32);
2226:	static int __bpf_redirect_neigh_v6(struct sk_buff *, struct net_device *, struct bpf_nh_params *);
2122:	static int __bpf_redirect_no_mac(struct sk_buff *, struct net_device *, u32);
5931:	static struct sock *__bpf_skc_lookup(struct sk_buff *, struct bpf_sock_tuple *, u32, struct net *, u32, u8, u64, u64);
1478:	static struct bpf_prog *__get_filter(struct sock_fprog *, struct sock *);
1451:	static int __sk_attach_prog(struct bpf_prog *, struct sock *);
4917:	static int _bpf_getsockopt(struct sock *, int, int, char *, int);
4690:	static int _bpf_setsockopt(struct sock *, int, int, char *, int);
1051:	static int bpf_check_classic(const struct sock_filter *, unsigned int);
8283:	static u32 bpf_convert_ctx_access(enum bpf_access_type, const struct bpf_insn *, struct bpf_insn *, struct bpf_prog *, u32 *);
555:	static int bpf_convert_filter(struct sock_filter *, int, struct bpf_prog *, int *, bool *);
5263:	static int bpf_fib_set_fwd_params(struct bpf_fib_lookup *, const struct neighbour *, const struct net_device *);
7795:	static int bpf_gen_ld_abs(const struct bpf_insn *, struct bpf_insn *);
4408:	static const struct bpf_func_proto *bpf_get_skb_set_tunnel_proto(enum bpf_func_id);
5277:	static int bpf_ipv4_fib_lookup(struct net *, struct bpf_fib_lookup *, u32, bool);
5394:	static int bpf_ipv6_fib_lookup(struct net *, struct bpf_fib_lookup *, u32, bool);
1237:	static struct bpf_prog *bpf_migrate_filter(struct bpf_prog *);
7747:	static int bpf_noop_prologue(struct bpf_insn *, bool, const struct bpf_prog *);
2276:	static int bpf_out_neigh_v4(struct sk_buff *, struct net_device *, struct bpf_nh_params *, struct net *);
2168:	static int bpf_out_neigh_v6(struct sk_buff *, struct net_device *, struct bpf_nh_params *, struct net *);
1129:	static int bpf_prog_store_orig_filter(struct bpf_prog *, const struct sock_fprog *);
6636:	static const u8 *bpf_search_tcp_opt(const u8 *, const u8 *, u8, const u8 *, u8, bool *);
10435:	static const struct bpf_func_proto *bpf_sk_base_func_proto(enum bpf_func_id);
4146:	static unsigned long bpf_skb_copy(void *, const void *, unsigned long, unsigned long);
3189:	static int bpf_skb_generic_pop(struct sk_buff *, u32, u32);
3172:	static int bpf_skb_generic_push(struct sk_buff *, u32, u32);
3664:	static int bpf_skb_grow_rcsum(struct sk_buff *, unsigned int);
7487:	static bool bpf_skb_is_valid_access(int, int, enum bpf_access_type, struct bpf_insn_access_aux *, const struct bpf_prog *);
3414:	static int bpf_skb_net_grow(struct sk_buff *, u32, u32, u64);
3512:	static int bpf_skb_net_shrink(struct sk_buff *, u32, u32, u64);
3241:	static int bpf_skb_proto_4_to_6(struct sk_buff *);
3280:	static int bpf_skb_proto_6_to_4(struct sk_buff *);
3675:	static int bpf_skb_trim_rcsum(struct sk_buff *, unsigned int);
5041:	static int bpf_sock_ops_get_syn(int, const u8 **, struct bpf_sock_ops_kern *, struct bpf_sock_ops_kern *);
4544:	static unsigned long bpf_xdp_copy(void *, const void *, unsigned long, unsigned long);
7044:	static const struct bpf_func_proto *cg_skb_func_proto(enum bpf_func_id, const struct bpf_prog *);
7569:	static bool cg_skb_is_valid_access(int, int, enum bpf_access_type, const struct bpf_prog *, struct bpf_insn_access_aux *);
907:	static int check_load_and_stores(const struct sock_filter *, int);
336:	static bool convert_bpf_extensions(struct sock_filter *, struct bpf_insn **);
466:	static bool convert_bpf_ld_abs(struct sock_filter *, struct bpf_insn **);
8230:	static u32 flow_dissector_convert_ctx_access(enum bpf_access_type, const struct bpf_insn *, struct bpf_insn *, struct bpf_prog *, u32 *);
7383:	static const struct bpf_func_proto *flow_dissector_func_proto(enum bpf_func_id, const struct bpf_prog *);
8196:	static bool flow_dissector_is_valid_access(int, int, enum bpf_access_type, const struct bpf_prog *, struct bpf_insn_access_aux *);
7421:	static const struct bpf_func_proto *lwt_in_func_proto(enum bpf_func_id, const struct bpf_prog *);
7613:	static bool lwt_is_valid_access(int, int, enum bpf_access_type, const struct bpf_prog *, struct bpf_insn_access_aux *);
7394:	static const struct bpf_func_proto *lwt_out_func_proto(enum bpf_func_id, const struct bpf_prog *);
7471:	static const struct bpf_func_proto *lwt_seg6local_func_proto(enum bpf_func_id, const struct bpf_prog *);
7432:	static const struct bpf_func_proto *lwt_xmit_func_proto(enum bpf_func_id, const struct bpf_prog *);
7022:	static const struct bpf_func_proto *sk_filter_func_proto(enum bpf_func_id, const struct bpf_prog *);
7541:	static bool sk_filter_is_valid_access(int, int, enum bpf_access_type, const struct bpf_prog *, struct bpf_insn_access_aux *);
1195:	static void sk_filter_release(struct sk_filter *);
1182:	static void sk_filter_release_rcu(struct callback_head *);
5880:	static struct sock *sk_lookup(struct net *, struct bpf_sock_tuple *, int, int, u8, u8);
10211:	static u32 sk_lookup_convert_ctx_access(enum bpf_access_type, const struct bpf_insn *, struct bpf_insn *, struct bpf_prog *, u32 *);
10164:	static const struct bpf_func_proto *sk_lookup_func_proto(enum bpf_func_id, const struct bpf_prog *);
10178:	static bool sk_lookup_is_valid_access(int, int, enum bpf_access_type, const struct bpf_prog *, struct bpf_insn_access_aux *);
9529:	static u32 sk_msg_convert_ctx_access(enum bpf_access_type, const struct bpf_insn *, struct bpf_insn *, struct bpf_prog *, u32 *);
7296:	static const struct bpf_func_proto *sk_msg_func_proto(enum bpf_func_id, const struct bpf_prog *);
8152:	static bool sk_msg_is_valid_access(int, int, enum bpf_access_type, const struct bpf_prog *, struct bpf_insn_access_aux *);
10074:	static u32 sk_reuseport_convert_ctx_access(enum bpf_access_type, const struct bpf_insn *, struct bpf_insn *, struct bpf_prog *, u32 *);
9999:	static const struct bpf_func_proto *sk_reuseport_func_proto(enum bpf_func_id, const struct bpf_prog *);
10015:	static bool sk_reuseport_is_valid_access(int, int, enum bpf_access_type, const struct bpf_prog *, struct bpf_insn_access_aux *);
9483:	static u32 sk_skb_convert_ctx_access(enum bpf_access_type, const struct bpf_insn *, struct bpf_insn *, struct bpf_prog *, u32 *);
7342:	static const struct bpf_func_proto *sk_skb_func_proto(enum bpf_func_id, const struct bpf_prog *);
8115:	static bool sk_skb_is_valid_access(int, int, enum bpf_access_type, const struct bpf_prog *, struct bpf_insn_access_aux *);
8109:	static int sk_skb_prologue(struct bpf_insn *, bool, const struct bpf_prog *);
8966:	static u32 sock_addr_convert_ctx_access(enum bpf_access_type, const struct bpf_insn *, struct bpf_insn *, struct bpf_prog *, u32 *);
6944:	static const struct bpf_func_proto *sock_addr_func_proto(enum bpf_func_id, const struct bpf_prog *);
7932:	static bool sock_addr_is_valid_access(int, int, enum bpf_access_type, const struct bpf_prog *, struct bpf_insn_access_aux *);
6906:	static const struct bpf_func_proto *sock_filter_func_proto(enum bpf_func_id, const struct bpf_prog *);
7736:	static bool sock_filter_is_valid_access(int, int, enum bpf_access_type, const struct bpf_prog *, struct bpf_insn_access_aux *);
9055:	static u32 sock_ops_convert_ctx_access(enum bpf_access_type, const struct bpf_insn *, struct bpf_insn *, struct bpf_prog *, u32 *);
7254:	static const struct bpf_func_proto *sock_ops_func_proto(enum bpf_func_id, const struct bpf_prog *);
8049:	static bool sock_ops_is_valid_access(int, int, enum bpf_access_type, const struct bpf_prog *, struct bpf_insn_access_aux *);
8816:	static u32 tc_cls_act_convert_ctx_access(enum bpf_access_type, const struct bpf_insn *, struct bpf_insn *, struct bpf_prog *, u32 *);
7089:	static const struct bpf_func_proto *tc_cls_act_func_proto(enum bpf_func_id, const struct bpf_prog *);
7836:	static bool tc_cls_act_is_valid_access(int, int, enum bpf_access_type, const struct bpf_prog *, struct bpf_insn_access_aux *);
7830:	static int tc_cls_act_prologue(struct bpf_insn *, bool, const struct bpf_prog *);
8840:	static u32 xdp_convert_ctx_access(enum bpf_access_type, const struct bpf_insn *, struct bpf_insn *, struct bpf_prog *, u32 *);
4013:	static int xdp_do_generic_redirect_map(struct net_device *, struct sk_buff *, struct xdp_buff *, struct bpf_prog *, struct bpf_map *);
7210:	static const struct bpf_func_proto *xdp_func_proto(enum bpf_func_id, const struct bpf_prog *);
7885:	static bool xdp_is_valid_access(int, int, enum bpf_access_type, const struct bpf_prog *, struct bpf_insn_access_aux *);

File net/core/flow_dissector.c:
1701:	__u32 __get_hash_from_flowi6(const struct flowi6 *, struct flow_keys *);
904:	bool __skb_flow_dissect(const struct net *, const struct sk_buff *, struct flow_dissector *, void *, void *, __be16, int, int, unsigned int);
115:	__be32 __skb_flow_get_ports(const struct sk_buff *, int, u8, void *, int);
1608:	void __skb_get_hash(struct sk_buff *);
1584:	u32 __skb_get_hash_symmetric(const struct sk_buff *);
1630:	u32 __skb_get_poff(const struct sk_buff *, void *, const struct flow_keys_basic *, int);
856:	bool bpf_flow_dissect(struct bpf_prog *, struct bpf_flow_dissector *, __be16, int, int, unsigned int);
73:	int flow_dissector_bpf_prog_attach_check(struct net *, struct bpf_prog *);
1473:	__be32 flow_get_u32_dst(const struct flow_keys *);
1457:	__be32 flow_get_u32_src(const struct flow_keys *);
1538:	u32 flow_hash_from_keys(struct flow_keys *);
1564:	void make_flow_keys_digest(struct flow_keys_digest *, const struct flow_keys *);
237:	void skb_flow_dissect_ct(const struct sk_buff *, struct flow_dissector *, void *, u16 *, size_t);
386:	void skb_flow_dissect_hash(const struct sk_buff *, struct flow_dissector *, void *);
204:	void skb_flow_dissect_meta(const struct sk_buff *, struct flow_dissector *, void *);
277:	void skb_flow_dissect_tunnel_info(const struct sk_buff *, struct flow_dissector *, void *);
42:	void skb_flow_dissector_init(struct flow_dissector *, const struct flow_dissector_key *, unsigned int);
161:	void skb_flow_get_icmp_tci(const struct sk_buff *, struct flow_dissector_key_icmp *, void *, int, int);
1621:	__u32 skb_get_hash_perturb(const struct sk_buff *, const siphash_key_t *);
1690:	u32 skb_get_poff(const struct sk_buff *);
784:	static void __skb_flow_bpf_to_target(const struct bpf_flow_keys *, struct flow_dissector *, void *);
462:	static enum flow_dissect_ret __skb_flow_dissect_arp(const struct sk_buff *, struct flow_dissector *, void *, void *, int, int);
517:	static enum flow_dissect_ret __skb_flow_dissect_gre(const struct sk_buff *, struct flow_dissector_key_control *, struct flow_dissector *, void *, void *, __be16 *, int *, int *, unsigned int);
1799:	static int init_default_flow_dissectors(void);

File net/core/flow_offload.c:
177:	struct flow_action_cookie *flow_action_cookie_create(void *, unsigned int, gfp_t);
192:	void flow_action_cookie_destroy(struct flow_action_cookie *);
205:	struct flow_block_cb *flow_block_cb_alloc(flow_setup_cb_t *, void *, void *, void (*)(void *));
260:	unsigned int flow_block_cb_decref(struct flow_block_cb *);
224:	void flow_block_cb_free(struct flow_block_cb *);
254:	void flow_block_cb_incref(struct flow_block_cb *);
266:	bool flow_block_cb_is_busy(flow_setup_cb_t *, void *, struct list_head *);
233:	struct flow_block_cb *flow_block_cb_lookup(struct flow_block *, flow_setup_cb_t *, void *);
248:	void *flow_block_cb_priv(struct flow_block_cb *);
281:	int flow_block_cb_setup_simple(struct flow_block_offload *, struct list_head *, flow_setup_cb_t *, void *, void *, bool);
472:	struct flow_block_cb *flow_indr_block_cb_alloc(flow_setup_cb_t *, void *, void *, void (*)(void *), struct flow_block_offload *, struct net_device *, struct Qdisc *, void *, void *, void (*)(struct flow_block_cb *));
377:	int flow_indr_dev_register(flow_indr_block_bind_cb_t *, void *);
547:	int flow_indr_dev_setup_offload(struct net_device *, struct Qdisc *, enum tc_setup_type, void *, struct flow_block_offload *, void (*)(struct flow_block_cb *));
428:	void flow_indr_dev_unregister(flow_indr_block_bind_cb_t *, void *, void (*)(void *));
9:	struct flow_rule *flow_rule_alloc(unsigned int);
44:	void flow_rule_match_basic(const struct flow_rule *, struct flow_match_basic *);
51:	void flow_rule_match_control(const struct flow_rule *, struct flow_match_control *);
198:	void flow_rule_match_ct(const struct flow_rule *, struct flow_match_ct *);
72:	void flow_rule_match_cvlan(const struct flow_rule *, struct flow_match_vlan *);
128:	void flow_rule_match_enc_control(const struct flow_rule *, struct flow_match_control *);
149:	void flow_rule_match_enc_ip(const struct flow_rule *, struct flow_match_ip *);
135:	void flow_rule_match_enc_ipv4_addrs(const struct flow_rule *, struct flow_match_ipv4_addrs *);
142:	void flow_rule_match_enc_ipv6_addrs(const struct flow_rule *, struct flow_match_ipv6_addrs *);
163:	void flow_rule_match_enc_keyid(const struct flow_rule *, struct flow_match_enc_keyid *);
170:	void flow_rule_match_enc_opts(const struct flow_rule *, struct flow_match_enc_opts *);
156:	void flow_rule_match_enc_ports(const struct flow_rule *, struct flow_match_ports *);
58:	void flow_rule_match_eth_addrs(const struct flow_rule *, struct flow_match_eth_addrs *);
114:	void flow_rule_match_icmp(const struct flow_rule *, struct flow_match_icmp *);
93:	void flow_rule_match_ip(const struct flow_rule *, struct flow_match_ip *);
79:	void flow_rule_match_ipv4_addrs(const struct flow_rule *, struct flow_match_ipv4_addrs *);
86:	void flow_rule_match_ipv6_addrs(const struct flow_rule *, struct flow_match_ipv6_addrs *);
37:	void flow_rule_match_meta(const struct flow_rule *, struct flow_match_meta *);
121:	void flow_rule_match_mpls(const struct flow_rule *, struct flow_match_mpls *);
100:	void flow_rule_match_ports(const struct flow_rule *, struct flow_match_ports *);
107:	void flow_rule_match_tcp(const struct flow_rule *, struct flow_match_tcp *);
65:	void flow_rule_match_vlan(const struct flow_rule *, struct flow_match_vlan *);
362:	static void existing_qdiscs_register(flow_indr_block_bind_cb_t *, void *);
506:	static int indir_dev_add(void *, struct net_device *, struct Qdisc *, enum tc_setup_type, void (*)(struct flow_block_cb *), struct flow_block_offload *);

File net/core/gen_estimator.c:
242:	bool gen_estimator_active(struct net_rate_estimator **);
248:	bool gen_estimator_read(struct net_rate_estimator **, struct gnet_stats_rate_est64 *);
199:	void gen_kill_estimator(struct net_rate_estimator **);
124:	int gen_new_estimator(struct gnet_stats_basic_packed *, struct gnet_stats_basic_cpu *, struct net_rate_estimator **, spinlock_t *, seqcount_t *, struct nlattr *);
225:	int gen_replace_estimator(struct gnet_stats_basic_packed *, struct gnet_stats_basic_cpu *, struct net_rate_estimator **, spinlock_t *, seqcount_t *, struct nlattr *);
62:	static void est_fetch_counters(struct net_rate_estimator *, struct gnet_stats_basic_packed *);
76:	static void est_timer(struct timer_list *);

File net/core/gen_stats.c:
140:	void __gnet_stats_copy_basic(const seqcount_t *, struct gnet_stats_basic_packed *, struct gnet_stats_basic_cpu *, struct gnet_stats_basic_packed *);
302:	void __gnet_stats_copy_queue(struct gnet_stats_queue *, const struct gnet_stats_queue *, const struct gnet_stats_queue *, __u32);
374:	int gnet_stats_copy_app(struct gnet_dump *, void *, int);
207:	int gnet_stats_copy_basic(const seqcount_t *, struct gnet_dump *, struct gnet_stats_basic_cpu *, struct gnet_stats_basic_packed *);
231:	int gnet_stats_copy_basic_hw(const seqcount_t *, struct gnet_dump *, struct gnet_stats_basic_cpu *, struct gnet_stats_basic_packed *);
336:	int gnet_stats_copy_queue(struct gnet_dump *, struct gnet_stats_queue *, struct gnet_stats_queue *, __u32);
253:	int gnet_stats_copy_rate_est(struct gnet_dump *, struct net_rate_estimator **);
410:	int gnet_stats_finish_copy(struct gnet_dump *);
110:	int gnet_stats_start_copy(struct sk_buff *, int, spinlock_t *, struct gnet_dump *, int);
59:	int gnet_stats_start_copy_compat(struct sk_buff *, int, int, int, spinlock_t *, struct gnet_dump *, int);
161:	static int ___gnet_stats_copy_basic(const seqcount_t *, struct gnet_dump *, struct gnet_stats_basic_cpu *, struct gnet_stats_basic_packed *, int);

File net/core/gro_cells.c:
92:	void gro_cells_destroy(struct gro_cells *);
69:	int gro_cells_init(struct gro_cells *, struct net_device *);
12:	int gro_cells_receive(struct gro_cells *, struct sk_buff *);
50:	static int gro_cell_poll(struct napi_struct *, int);

File net/core/link_watch.c:
257:	void linkwatch_fire_event(struct net_device *);
226:	void linkwatch_forget_dev(struct net_device *);
81:	void linkwatch_init_dev(struct net_device *);
243:	void linkwatch_run_queue(void);
172:	static void __linkwatch_run_queue(int);
147:	static void linkwatch_do_dev(struct net_device *);
249:	static void linkwatch_event(struct work_struct *);
118:	static void linkwatch_schedule_work(int);
90:	static bool linkwatch_urgent_event(struct net_device *);
51:	static void rfc2863_policy(struct net_device *);

File net/core/lwt_bpf.c:
592:	int bpf_lwt_push_ip_encap(struct sk_buff *, void *, u32, bool);
370:	static int bpf_build_state(struct net *, struct nlattr *, unsigned int, const void *, struct lwtunnel_state **, struct netlink_ext_ack *);
318:	static void bpf_destroy_state(struct lwtunnel_state *);
502:	static int bpf_encap_cmp(struct lwtunnel_state *, struct lwtunnel_state *);
475:	static int bpf_encap_nlsize(struct lwtunnel_state *);
463:	static int bpf_fill_encap_info(struct sk_buff *, struct lwtunnel_state *);
444:	static int bpf_fill_lwt_prog(struct sk_buff *, int, struct bpf_lwt_prog *);
115:	static int bpf_input(struct sk_buff *);
653:	static int bpf_lwt_init(void);
175:	static int bpf_lwt_xmit_reroute(struct sk_buff *);
138:	static int bpf_output(struct net *, struct sock *, struct sk_buff *);
333:	static int bpf_parse_prog(struct nlattr *, struct bpf_lwt_prog *, enum bpf_prog_type);
269:	static int bpf_xmit(struct sk_buff *);
536:	static int handle_gso_encap(bool, int, struct sk_buff *, struct sk_buff *);
524:	static int handle_gso_type(unsigned int, int, struct sk_buff *, struct sk_buff *);
37:	static int run_lwt_bpf(struct sk_buff *, struct bpf_lwt_prog *, bool, struct dst_entry *);

File net/core/lwtunnel.c:
213:	void lwtstate_free(struct lwtunnel_state *);
103:	int lwtunnel_build_state(struct net *, u16, struct nlattr *, unsigned int, const void *, struct lwtunnel_state **, struct netlink_ext_ack *);
290:	int lwtunnel_cmp_encap(struct lwtunnel_state *, struct lwtunnel_state *);
72:	int lwtunnel_encap_add_ops(const struct lwtunnel_encap_ops *, unsigned int);
84:	int lwtunnel_encap_del_ops(const struct lwtunnel_encap_ops *, unsigned int);
227:	int lwtunnel_fill_encap(struct sk_buff *, struct lwtunnel_state *, int, int);
268:	int lwtunnel_get_encap_size(struct lwtunnel_state *);
387:	int lwtunnel_input(struct sk_buff *);
318:	int lwtunnel_output(struct net *, struct sock *, struct sk_buff *);
59:	struct lwtunnel_state *lwtunnel_state_alloc(int);
142:	int lwtunnel_valid_encap_type(u16, struct netlink_ext_ack *);
179:	int lwtunnel_valid_encap_type_attr(struct nlattr *, int, struct netlink_ext_ack *);
352:	int lwtunnel_xmit(struct sk_buff *);

File net/core/neighbour.c:
675:	struct neighbour *__neigh_create(struct neigh_table *, const void *, struct net_device *, bool);
1111:	int __neigh_event_send(struct neighbour *, struct sk_buff *);
2965:	void __neigh_for_each_release(struct neigh_table *, int (*)(struct neighbour *));
1434:	void __neigh_set_probe_once(struct neighbour *);
708:	struct pneigh_entry *__pneigh_lookup(struct neigh_table *, struct net *, const void *, struct net_device *);
3388:	void neigh_app_ns(struct neighbour *);
367:	int neigh_carrier_down(struct neigh_table *, struct net_device *);
347:	void neigh_changeaddr(struct neigh_table *, struct net_device *);
1517:	int neigh_connected_output(struct neighbour *, struct sk_buff *);
834:	void neigh_destroy(struct neighbour *);
1540:	int neigh_direct_output(struct neighbour *, struct sk_buff *);
1449:	struct neighbour *neigh_event_ns(struct neigh_table *, u8 *, void *, struct net_device *);
2942:	void neigh_for_each(struct neigh_table *, void (*)(struct neighbour *, void *), void *);
374:	int neigh_ifdown(struct neigh_table *, struct net_device *);
529:	struct neighbour *neigh_lookup(struct neigh_table *, const void *, struct net_device *);
549:	struct neighbour *neigh_lookup_nodev(struct neigh_table *, struct net *, const void *);
1623:	struct neigh_parms *neigh_parms_alloc(struct net_device *, struct neigh_table *);
1665:	void neigh_parms_release(struct neigh_table *, struct neigh_parms *);
3476:	int neigh_proc_dointvec(struct ctl_table *, int, void *, size_t *, loff_t *);
3486:	int neigh_proc_dointvec_jiffies(struct ctl_table *, int, void *, size_t *, loff_t *);
3506:	int neigh_proc_dointvec_ms_jiffies(struct ctl_table *, int, void *, size_t *, loff_t *);
113:	unsigned long neigh_rand_reach_time(unsigned long);
202:	bool neigh_remove_one(struct neighbour *, struct neigh_table *);
1482:	int neigh_resolve_output(struct neighbour *, struct sk_buff *);
3242:	void *neigh_seq_next(struct seq_file *, void *, loff_t *);
3224:	void *neigh_seq_start(struct seq_file *, loff_t *, struct neigh_table *, unsigned int);
3269:	void neigh_seq_stop(struct seq_file *, void *);
3633:	int neigh_sysctl_register(struct net_device *, struct neigh_parms *, proc_handler *);
3722:	void neigh_sysctl_unregister(struct neigh_parms *);
1740:	int neigh_table_clear(int, struct neigh_table *);
1688:	void neigh_table_init(int, struct neigh_table *);
1424:	int neigh_update(struct neighbour *, const u8 *, u8, u32, u32);
2999:	int neigh_xmit(int, struct net_device *, const void *, struct sk_buff *);
765:	int pneigh_delete(struct neigh_table *, struct net *, const void *, struct net_device *);
1580:	void pneigh_enqueue(struct neigh_table *, struct neigh_parms *, struct sk_buff *);
719:	struct pneigh_entry *pneigh_lookup(struct neigh_table *, struct net *, const void *, struct net_device *, int);
581:	static struct neighbour *___neigh_create(struct neigh_table *, const void *, struct net_device *, u8, bool, bool);
355:	static int __neigh_ifdown(struct neigh_table *, struct net_device *, bool);
3363:	static void __neigh_notify(struct neighbour *, int, int, u32);
1233:	static int __neigh_update(struct neighbour *, const u8 *, u8, u32, u32, struct netlink_ext_ack *);
692:	static struct pneigh_entry *__pneigh_lookup_1(struct pneigh_entry *, struct net *, const void *, unsigned int, struct net_device *);
1867:	static int neigh_add(struct sk_buff *, struct nlmsghdr *, struct netlink_ext_ack *);
263:	static void neigh_add_timer(struct neighbour *, unsigned long);
381:	static struct neighbour *neigh_alloc(struct neigh_table *, struct net_device *, u8, bool);
93:	static int neigh_blackhole(struct neighbour *, struct sk_buff *);
99:	static void neigh_cleanup_and_release(struct neighbour *);
273:	static int neigh_del_timer(struct neighbour *);
1802:	static int neigh_delete(struct sk_buff *, struct nlmsghdr *, struct netlink_ext_ack *);
2716:	static int neigh_dump_info(struct sk_buff *, struct netlink_callback *);
2563:	static int neigh_dump_table(struct neigh_table *, struct sk_buff *, struct netlink_callback *, struct neigh_dump_filter *);
2440:	static int neigh_fill_info(struct sk_buff *, struct neighbour *, u32, u32, int, unsigned int);
293:	static void neigh_flush_dev(struct net_device *, bool, struct neigh_table *, struct neigh_table *);
225:	static int neigh_forced_gc(struct neigh_table *);
2881:	static int neigh_get(struct sk_buff *, struct nlmsghdr *, struct netlink_ext_ack *);
3045:	static struct neighbour *neigh_get_first(struct seq_file *, struct seq_file *);
3211:	static void *neigh_get_idx_any(struct seq_file *, loff_t *, loff_t *);
3084:	static struct neighbour *neigh_get_next(struct neighbour *, loff_t *, struct seq_file *, struct seq_file *);
442:	static struct neigh_hash_table *neigh_hash_alloc(unsigned int);
471:	static void neigh_hash_free_rcu(struct callback_head *);
488:	static struct neigh_hash_table *neigh_hash_grow(struct neigh_table *, unsigned long);
3735:	static int neigh_init(void);
981:	static void neigh_invalidate(struct neighbour *);
119:	static void neigh_mark_dead(struct neighbour *);
891:	static void neigh_periodic_work(struct work_struct *);
1006:	static void neigh_probe(struct neighbour *);
3526:	static int neigh_proc_base_reachable_time(struct ctl_table *, int, void *, size_t *, loff_t *);
3516:	static int neigh_proc_dointvec_unres_qlen(struct ctl_table *, int, void *, size_t *, loff_t *);
3496:	static int neigh_proc_dointvec_userhz_jiffies(struct ctl_table *, int, void *, size_t *, loff_t *);
3461:	static int neigh_proc_dointvec_zero_intmax(struct ctl_table *, int, void *, size_t *, loff_t *);
3444:	static void neigh_proc_update(struct ctl_table *, int);
1546:	static void neigh_proxy_process(struct timer_list *);
1657:	static void neigh_rcu_free_parms(struct callback_head *);
3300:	static void *neigh_stat_seq_next(struct seq_file *, void *, loff_t *);
3320:	static int neigh_stat_seq_show(struct seq_file *, void *);
3283:	static void *neigh_stat_seq_start(struct seq_file *, loff_t *);
3315:	static void neigh_stat_seq_stop(struct seq_file *, void *);
1022:	static void neigh_timer_handler(struct timer_list *);
128:	static void neigh_update_gc_list(struct neighbour *);
2655:	static int neigh_valid_dump_req(const struct nlmsghdr *, bool, struct neigh_dump_filter *, struct netlink_ext_ack *);
2762:	static int neigh_valid_get_req(const struct nlmsghdr *, struct neigh_table **, void **, int *, u8 *, struct netlink_ext_ack *);
2379:	static int neightbl_dump_info(struct sk_buff *, struct netlink_callback *);
2045:	static int neightbl_fill_info(struct sk_buff *, struct neigh_table *, u32, u32, int, int);
2134:	static int neightbl_fill_param_info(struct sk_buff *, struct neigh_table *, struct neigh_parms *, u32, u32, unsigned int, int);
1997:	static int neightbl_fill_parms(struct sk_buff *, struct neigh_parms *);
2193:	static int neightbl_set(struct sk_buff *, struct nlmsghdr *, struct netlink_ext_ack *);
2610:	static int pneigh_dump_table(struct neigh_table *, struct sk_buff *, struct netlink_callback *, struct neigh_dump_filter *);
2496:	static int pneigh_fill_info(struct sk_buff *, struct pneigh_entry *, u32, u32, unsigned int, struct neigh_table *, int);
3147:	static struct pneigh_entry *pneigh_get_first(struct seq_file *, struct seq_file *);
3168:	static struct pneigh_entry *pneigh_get_next(struct pneigh_entry *, loff_t *, struct seq_file *, struct seq_file *);

File net/core/net-procfs.c:
372:	int dev_proc_init(void);
362:	static void dev_mc_net_exit(struct net *);
354:	static int dev_mc_net_init(struct net *);
328:	static int dev_mc_seq_show(struct seq_file *, void *);
314:	static void dev_proc_net_exit(struct net *);
286:	static int dev_proc_net_init(struct net *);
66:	static void *dev_seq_next(struct seq_file *, void *, loff_t *);
78:	static void dev_seq_printf_stats(struct seq_file *, struct net_device *);
106:	static int dev_seq_show(struct seq_file *, void *);
53:	static void *dev_seq_start(struct seq_file *, loff_t *);
72:	static void dev_seq_stop(struct seq_file *, void *);
196:	static void *ptype_get_idx(loff_t);
225:	static void *ptype_seq_next(struct seq_file *, void *, loff_t *);
260:	static int ptype_seq_show(struct seq_file *, void *);
218:	static void *ptype_seq_start(struct seq_file *, loff_t *);
125:	static struct softnet_data *softnet_get_online(loff_t *);
143:	static void *softnet_seq_next(struct seq_file *, void *, loff_t *);
153:	static int softnet_seq_show(struct seq_file *, void *);
138:	static void *softnet_seq_start(struct seq_file *, loff_t *);
149:	static void softnet_seq_stop(struct seq_file *, void *);

File net/core/net-sysfs.c:
1058:	int net_rx_queue_update_kobjects(struct net_device *, int, int);
2012:	int netdev_change_owner(struct net_device *, const struct net *, const struct net *);
2040:	int netdev_class_create_file_ns(const struct class_attribute *, const void *);
2047:	void netdev_class_remove_file_ns(const struct class_attribute *, const void *);
2054:	int netdev_kobject_init(void);
1687:	int netdev_queue_update_kobjects(struct net_device *, int, int);
1964:	int netdev_register_kobject(struct net_device *);
1947:	void netdev_unregister_kobject(struct net_device *);
108:	static ssize_t addr_assign_type_show(struct device *, struct device_attribute *, char *);
109:	static ssize_t addr_len_show(struct device *, struct device_attribute *, char *);
143:	static ssize_t address_show(struct device *, struct device_attribute *, char *);
1304:	static ssize_t bql_set_hold_time(struct netdev_queue *, const char *, size_t);
1352:	static ssize_t bql_set_limit(struct netdev_queue *, const char *, size_t);
1353:	static ssize_t bql_set_limit_max(struct netdev_queue *, const char *, size_t);
1354:	static ssize_t bql_set_limit_min(struct netdev_queue *, const char *, size_t);
1296:	static ssize_t bql_show_hold_time(struct netdev_queue *, char *);
1324:	static ssize_t bql_show_inflight(struct netdev_queue *, char *);
1352:	static ssize_t bql_show_limit(struct netdev_queue *, char *);
1353:	static ssize_t bql_show_limit_max(struct netdev_queue *, char *);
1354:	static ssize_t bql_show_limit_min(struct netdev_queue *, char *);
157:	static ssize_t broadcast_show(struct device *, struct device_attribute *, char *);
320:	static ssize_t carrier_changes_show(struct device *, struct device_attribute *, char *);
342:	static ssize_t carrier_down_count_show(struct device *, struct device_attribute *, char *);
189:	static ssize_t carrier_show(struct device *, struct device_attribute *, char *);
175:	static ssize_t carrier_store(struct device *, struct device_attribute *, const char *, size_t);
332:	static ssize_t carrier_up_count_show(struct device *, struct device_attribute *, char *);
168:	static int change_carrier(struct net_device *, unsigned long);
366:	static int change_flags(struct net_device *, unsigned long);
389:	static int change_gro_flush_timeout(struct net_device *, unsigned long);
468:	static int change_group(struct net_device *, unsigned long);
354:	static int change_mtu(struct net_device *, unsigned long);
406:	static int change_napi_defer_hard_irqs(struct net_device *, unsigned long);
482:	static int change_proto_down(struct net_device *, unsigned long);
667:	static ssize_t collisions_show(struct device *, struct device_attribute *, char *);
106:	static ssize_t dev_id_show(struct device *, struct device_attribute *, char *);
107:	static ssize_t dev_port_show(struct device *, struct device_attribute *, char *);
279:	static ssize_t dormant_show(struct device *, struct device_attribute *, char *);
227:	static ssize_t duplex_show(struct device *, struct device_attribute *, char *);
376:	static ssize_t flags_show(struct device *, struct device_attribute *, char *);
371:	static ssize_t flags_store(struct device *, struct device_attribute *, const char *, size_t);
404:	static ssize_t gro_flush_timeout_show(struct device *, struct device_attribute *, char *);
395:	static ssize_t gro_flush_timeout_store(struct device *, struct device_attribute *, const char *, size_t);
479:	static ssize_t group_show(struct device *, struct device_attribute *, char *);
474:	static ssize_t group_store(struct device *, struct device_attribute *, const char *, size_t);
454:	static ssize_t ifalias_show(struct device *, struct device_attribute *, char *);
423:	static ssize_t ifalias_store(struct device *, struct device_attribute *, const char *, size_t);
110:	static ssize_t ifindex_show(struct device *, struct device_attribute *, char *);
114:	static ssize_t iflink_show(struct device *, struct device_attribute *, char *);
112:	static ssize_t link_mode_show(struct device *, struct device_attribute *, char *);
364:	static ssize_t mtu_show(struct device *, struct device_attribute *, char *);
359:	static ssize_t mtu_store(struct device *, struct device_attribute *, const char *, size_t);
666:	static ssize_t multicast_show(struct device *, struct device_attribute *, char *);
128:	static ssize_t name_assign_type_show(struct device *, struct device_attribute *, char *);
421:	static ssize_t napi_defer_hard_irqs_show(struct device *, struct device_attribute *, char *);
412:	static ssize_t napi_defer_hard_irqs_store(struct device *, struct device_attribute *, const char *, size_t);
1812:	static bool net_current_may_mount(void);
1893:	static void net_get_ownership(struct device *, kuid_t *, kgid_t *);
1819:	static void *net_grab_current_ns(void);
1829:	static const void *net_initial_ns(void);
1886:	static const void *net_namespace(struct device *);
1834:	static const void *net_netlink_ns(struct sock *);
1130:	static ssize_t netdev_queue_attr_show(struct kobject *, struct attribute *, char *);
1143:	static ssize_t netdev_queue_attr_store(struct kobject *, struct attribute *, const char *, size_t);
1621:	static void netdev_queue_get_ownership(struct kobject *, kuid_t *, kgid_t *);
1609:	static const void *netdev_queue_namespace(struct kobject *);
1601:	static void netdev_queue_release(struct kobject *);
1873:	static void netdev_release(struct device *);
77:	static ssize_t netdev_store(struct device *, const char *, size_t, int (*)(struct net_device *, unsigned long), struct device_attribute *);
1849:	static int netdev_uevent(struct device *, struct kobj_uevent_env *);
627:	static ssize_t netstat_show(const struct device *, char *, unsigned long, struct device_attribute *);
301:	static ssize_t operstate_show(struct device *, struct device_attribute *, char *);
503:	static ssize_t phys_port_id_show(struct device *, struct device_attribute *, char *);
531:	static ssize_t phys_port_name_show(struct device *, struct device_attribute *, char *);
560:	static ssize_t phys_switch_id_show(struct device *, struct device_attribute *, char *);
501:	static ssize_t proto_down_show(struct device *, struct device_attribute *, char *);
487:	static ssize_t proto_down_store(struct device *, struct device_attribute *, const char *, size_t);
1771:	static int queue_change_owner(struct net_device *, kuid_t, kgid_t);
871:	static void rps_dev_flow_table_release(struct callback_head *);
660:	static ssize_t rx_bytes_show(struct device *, struct device_attribute *, char *);
679:	static ssize_t rx_compressed_show(struct device *, struct device_attribute *, char *);
670:	static ssize_t rx_crc_errors_show(struct device *, struct device_attribute *, char *);
664:	static ssize_t rx_dropped_show(struct device *, struct device_attribute *, char *);
662:	static ssize_t rx_errors_show(struct device *, struct device_attribute *, char *);
672:	static ssize_t rx_fifo_errors_show(struct device *, struct device_attribute *, char *);
671:	static ssize_t rx_frame_errors_show(struct device *, struct device_attribute *, char *);
668:	static ssize_t rx_length_errors_show(struct device *, struct device_attribute *, char *);
673:	static ssize_t rx_missed_errors_show(struct device *, struct device_attribute *, char *);
681:	static ssize_t rx_nohandler_show(struct device *, struct device_attribute *, char *);
669:	static ssize_t rx_over_errors_show(struct device *, struct device_attribute *, char *);
658:	static ssize_t rx_packets_show(struct device *, struct device_attribute *, char *);
737:	static ssize_t rx_queue_attr_show(struct kobject *, struct attribute *, char *);
749:	static ssize_t rx_queue_attr_store(struct kobject *, struct attribute *, const char *, size_t);
990:	static void rx_queue_get_ownership(struct kobject *, kuid_t *, kgid_t *);
978:	static const void *rx_queue_namespace(struct kobject *);
954:	static void rx_queue_release(struct kobject *);
856:	static ssize_t show_rps_dev_flow_table_cnt(struct netdev_rx_queue *, char *);
767:	static ssize_t show_rps_map(struct netdev_rx_queue *, char *);
201:	static ssize_t speed_show(struct device *, struct device_attribute *, char *);
878:	static ssize_t store_rps_dev_flow_table_cnt(struct netdev_rx_queue *, const char *, size_t);
789:	static ssize_t store_rps_map(struct netdev_rx_queue *, const char *, size_t);
267:	static ssize_t testing_show(struct device *, struct device_attribute *, char *);
1184:	static ssize_t traffic_class_show(struct netdev_queue *, char *);
674:	static ssize_t tx_aborted_errors_show(struct device *, struct device_attribute *, char *);
661:	static ssize_t tx_bytes_show(struct device *, struct device_attribute *, char *);
675:	static ssize_t tx_carrier_errors_show(struct device *, struct device_attribute *, char *);
680:	static ssize_t tx_compressed_show(struct device *, struct device_attribute *, char *);
665:	static ssize_t tx_dropped_show(struct device *, struct device_attribute *, char *);
663:	static ssize_t tx_errors_show(struct device *, struct device_attribute *, char *);
676:	static ssize_t tx_fifo_errors_show(struct device *, struct device_attribute *, char *);
677:	static ssize_t tx_heartbeat_errors_show(struct device *, struct device_attribute *, char *);
1215:	static ssize_t tx_maxrate_show(struct netdev_queue *, char *);
1221:	static ssize_t tx_maxrate_store(struct netdev_queue *, const char *, size_t);
659:	static ssize_t tx_packets_show(struct device *, struct device_attribute *, char *);
387:	static ssize_t tx_queue_len_show(struct device *, struct device_attribute *, char *);
378:	static ssize_t tx_queue_len_store(struct device *, struct device_attribute *, const char *, size_t);
1162:	static ssize_t tx_timeout_show(struct netdev_queue *, char *);
678:	static ssize_t tx_window_errors_show(struct device *, struct device_attribute *, char *);
111:	static ssize_t type_show(struct device *, struct device_attribute *, char *);
1372:	static ssize_t xps_cpus_show(struct netdev_queue *, char *);
1444:	static ssize_t xps_cpus_store(struct netdev_queue *, const char *, size_t);
1485:	static ssize_t xps_rxqs_show(struct netdev_queue *, char *);
1547:	static ssize_t xps_rxqs_store(struct netdev_queue *, const char *, size_t);

File net/core/net_namespace.c:
75:	u64 __net_gen_cookie(struct net *);
649:	void __put_net(struct net *);
456:	struct net *copy_net_ns(unsigned long, struct user_namespace *, struct net *);
663:	struct ns_common *get_net_ns(struct ns_common *);
669:	struct net *get_net_ns_by_fd(int);
306:	struct net *get_net_ns_by_id(const struct net *, int);
697:	struct net *get_net_ns_by_pid(pid_t);
449:	void net_drop_ns(void *);
640:	void net_ns_barrier(void);
510:	void net_ns_get_ownership(const struct net *, kuid_t *, kgid_t *);
286:	int peernet2id(const struct net *, struct net *);
248:	int peernet2id_alloc(struct net *, struct net *, gfp_t);
301:	bool peernet_has_id(const struct net *, struct net *);
1320:	int register_pernet_device(struct pernet_operations *);
1274:	int register_pernet_subsys(struct pernet_operations *);
1341:	void unregister_pernet_device(struct pernet_operations *);
1293:	void unregister_pernet_subsys(struct pernet_operations *);
1147:	static int __register_pernet_operations(struct list_head *, struct pernet_operations *);
1178:	static void __unregister_pernet_operations(struct pernet_operations *);
558:	static void cleanup_net(struct work_struct *);
87:	static struct net_generic *net_alloc_generic(void);
99:	static int net_assign_generic(struct net *, unsigned int, void *);
385:	static int net_defaults_init(void);
375:	static int net_defaults_init_net(struct net *);
222:	static int net_eq_idr(int, void *, void *);
1101:	static int net_ns_init(void);
727:	static void net_ns_net_exit(struct net *);
719:	static int net_ns_net_init(struct net *);
1352:	static struct ns_common *netns_get(struct task_struct *);
1376:	static int netns_install(struct nsset *, struct ns_common *);
1390:	static struct user_namespace *netns_owner(struct ns_common *);
1371:	static void netns_put(struct ns_common *);
181:	static void ops_exit_list(const struct pernet_operations *, struct list_head *);
193:	static void ops_free_list(const struct pernet_operations *, struct list_head *);
136:	static int ops_init(const struct pernet_operations *, struct net *);
1224:	static int register_pernet_operations(struct list_head *, struct pernet_operations *);
1039:	static int rtnl_net_dumpid(struct sk_buff *, struct netlink_callback *);
977:	static int rtnl_net_dumpid_one(int, void *, void *);
824:	static int rtnl_net_fill(struct sk_buff *, struct net_fill_args *);
889:	static int rtnl_net_getid(struct sk_buff *, struct nlmsghdr *, struct netlink_ext_ack *);
745:	static int rtnl_net_newid(struct sk_buff *, struct nlmsghdr *, struct netlink_ext_ack *);
1072:	static void rtnl_net_notifyid(struct net *, int, int, u32, struct nlmsghdr *, gfp_t);
852:	static int rtnl_net_valid_getid_req(struct sk_buff *, const struct nlmsghdr *, struct nlattr **, struct netlink_ext_ack *);
997:	static int rtnl_valid_dump_net_req(const struct nlmsghdr *, struct sock *, struct rtnl_net_dump_cb *, struct netlink_callback *, struct netlink_callback *);
325:	static int setup_net(struct net *, struct user_namespace *);
528:	static void unhash_nsid(struct net *, struct net *);

File net/core/netclassid_cgroup.c:
21:	struct cgroup_cls_state *task_cls_state(struct task_struct *);
100:	static void cgrp_attach(struct cgroup_taskset *);
29:	static struct cgroup_subsys_state *cgrp_css_alloc(struct cgroup_subsys_state *);
51:	static void cgrp_css_free(struct cgroup_subsys_state *);
40:	static int cgrp_css_online(struct cgroup_subsys_state *);
110:	static u64 read_classid(struct cgroup_subsys_state *, struct cftype *);
69:	static int update_classid_sock(const void *, struct file *, unsigned int);
84:	static void update_classid_task(struct task_struct *, u32);
115:	static int write_classid(struct cgroup_subsys_state *, struct cftype *, u64);

File net/core/netevent.c:
59:	int call_netevent_notifiers(unsigned long, void *);
28:	int register_netevent_notifier(struct notifier_block *);
44:	int unregister_netevent_notifier(struct notifier_block *);

File net/core/netpoll.c:
827:	void __netpoll_cleanup(struct netpoll *);
851:	void __netpoll_free(struct netpoll *);
605:	int __netpoll_setup(struct netpoll *, struct net_device *);
862:	void netpoll_cleanup(struct netpoll *);
523:	int netpoll_parse_options(struct netpoll *, char *);
174:	void netpoll_poll_dev(struct net_device *);
203:	void netpoll_poll_disable(struct net_device *);
216:	void netpoll_poll_enable(struct net_device *);
486:	void netpoll_print_options(struct netpoll *);
366:	netdev_tx_t netpoll_send_skb(struct netpoll *, struct sk_buff *);
383:	void netpoll_send_udp(struct netpoll *, const char *, int);
659:	int netpoll_setup(struct netpoll *);
309:	static netdev_tx_t __netpoll_send_skb(struct netpoll *, struct sk_buff *);
803:	static int netpoll_init(void);
503:	static int netpoll_parse_ip_addr(const char *, union inet_addr *);
73:	static netdev_tx_t netpoll_start_xmit(struct sk_buff *, struct net_device *, struct netdev_queue *);
140:	static void poll_one_napi(struct napi_struct *);
100:	static void queue_process(struct work_struct *);
810:	static void rcu_cleanup_netpoll_info(struct callback_head *);
227:	static void refill_skbs(void);
243:	static void zap_completion_queue(void);

File net/core/netprio_cgroup.c:
134:	static struct cgroup_subsys_state *cgrp_css_alloc(struct cgroup_subsys_state *);
173:	static void cgrp_css_free(struct cgroup_subsys_state *);
145:	static int cgrp_css_online(struct cgroup_subsys_state *);
41:	static int extend_netdev_table(struct net_device *, u32);
292:	static int init_cgroup_netprio(void);
231:	static void net_prio_attach(struct cgroup_taskset *);
266:	static int netprio_device_event(struct notifier_block *, unsigned long, void *);
178:	static u64 read_prioidx(struct cgroup_subsys_state *, struct cftype *);
183:	static int read_priomap(struct seq_file *, void *);
219:	static int update_netprio(const void *, struct file *, unsigned int);
195:	static ssize_t write_priomap(struct kernfs_open_file *, char *, size_t, loff_t);

File net/core/page_pool.c:
562:	struct page *page_pool_alloc_frag(struct page_pool *, unsigned int *, unsigned int, gfp_t);
312:	struct page *page_pool_alloc_pages(struct page_pool *, gfp_t);
92:	struct page_pool *page_pool_create(const struct page_pool_params *);
702:	void page_pool_destroy(struct page_pool *);
478:	void page_pool_put_page(struct page_pool *, struct page *, unsigned int, bool);
490:	void page_pool_put_page_bulk(struct page_pool *, void **, int);
351:	void page_pool_release_page(struct page_pool *, struct page *);
739:	bool page_pool_return_skb_page(struct page *);
724:	void page_pool_update_nid(struct page_pool *, int);
696:	void page_pool_use_xdp_mem(struct page_pool *, void (*)(void *));
230:	static struct page *__page_pool_alloc_page_order(struct page_pool *, gfp_t);
256:	static struct page *__page_pool_alloc_pages_slow(struct page_pool *, gfp_t);
194:	static bool page_pool_dma_map(struct page_pool *, struct page *);
527:	static struct page *page_pool_drain_frag(struct page_pool *, struct page *);
605:	static void page_pool_empty_ring(struct page_pool *);
332:	static s32 page_pool_inflight(struct page_pool *);
29:	static int page_pool_init(struct page_pool *, const struct page_pool_params *);
392:	static bool page_pool_recycle_in_ring(struct page_pool *, struct page *);
115:	static struct page *page_pool_refill_alloc_cache(struct page_pool *);
661:	static int page_pool_release(struct page_pool *);
673:	static void page_pool_release_retry(struct work_struct *);
381:	static void page_pool_return_page(struct page_pool *, struct page *);

File net/core/ptp_classifier.c:
140:	void ptp_classifier_init(void);
104:	unsigned int ptp_classify_raw(const struct sk_buff *);
110:	struct ptp_header *ptp_parse_header(struct sk_buff *, unsigned int);

File net/core/request_sock.c:
91:	void reqsk_fastopen_remove(struct sock *, struct request_sock *, bool);
34:	void reqsk_queue_alloc(struct request_sock_queue *);

File net/core/rtnetlink.c:
372:	int __rtnl_link_register(struct rtnl_link_ops *);
432:	void __rtnl_link_unregister(struct rtnl_link_ops *);
92:	void __rtnl_unlock(void);
4584:	int ndo_dflt_bridge_getlink(struct sk_buff *, u32, u32, struct net_device *, u16, u32, u32, int, u32, int (*)(struct sk_buff *, struct net_device *, u32));
3920:	int ndo_dflt_fdb_add(struct ndmsg *, struct nlattr **, struct net_device *, const unsigned char *, u16, u16);
4060:	int ndo_dflt_fdb_del(struct ndmsg *, struct nlattr **, struct net_device *, const unsigned char *, u16);
4206:	int ndo_dflt_fdb_dump(struct sk_buff *, struct netlink_callback *, struct net_device *, struct net_device *, int *);
128:	bool refcount_dec_and_rtnl_lock(refcount_t *);
3835:	void rtmsg_ifinfo(int, struct net_device *, unsigned int, gfp_t);
3783:	struct sk_buff *rtmsg_ifinfo_build_skb(int, struct net_device *, unsigned int, u32, gfp_t, int *, int);
3842:	void rtmsg_ifinfo_newnet(int, struct net_device *, unsigned int, gfp_t, int *, int);
3813:	void rtmsg_ifinfo_send(struct sk_buff *, struct net_device *, gfp_t);
5650:	void rtnetlink_init(void);
749:	int rtnetlink_put_metrics(struct sk_buff *, u32 *);
706:	int rtnetlink_send(struct sk_buff *, struct net *, u32, unsigned int, int);
558:	void rtnl_af_register(struct rtnl_af_ops *);
570:	void rtnl_af_unregister(struct rtnl_af_ops *);
3117:	int rtnl_configure_link(struct net_device *, const struct ifinfomsg *);
3140:	struct net_device *rtnl_create_link(struct net *, const char *, unsigned char, const struct rtnl_link_ops *, struct nlattr **, struct netlink_ext_ack *);
3046:	int rtnl_delete_link(struct net_device *);
1991:	struct net *rtnl_get_net_ns_capable(struct sock *, int);
122:	int rtnl_is_locked(void);
83:	void rtnl_kfree_skbs(struct sk_buff *, struct sk_buff *);
2164:	struct net *rtnl_link_get_net(struct net *, struct nlattr **);
396:	int rtnl_link_register(struct rtnl_link_ops *);
478:	void rtnl_link_unregister(struct rtnl_link_ops *);
70:	void rtnl_lock(void);
76:	int rtnl_lock_killable(void);
2156:	int rtnl_nla_parse_ifla(struct nlattr **, const struct nlattr *, int, struct netlink_ext_ack *);
728:	void rtnl_notify(struct sk_buff *, struct net *, u32, u32, struct nlmsghdr *, gfp_t);
801:	int rtnl_put_cacheinfo(struct sk_buff *, struct dst_entry *, u32, long, u32);
267:	void rtnl_register(int, int, rtnl_doit_func, rtnl_dumpit_func, unsigned int);
241:	int rtnl_register_module(struct module *, int, int, rtnl_doit_func, rtnl_dumpit_func, unsigned int);
741:	void rtnl_set_sk_err(struct net *, u32, int);
116:	int rtnl_trylock(void);
720:	int rtnl_unicast(struct sk_buff *, struct net *, u32);
109:	void rtnl_unlock(void);
287:	int rtnl_unregister(int, int);
319:	void rtnl_unregister_all(int);
3235:	static int __rtnl_newlink(struct sk_buff *, struct nlmsghdr *, struct nlattr **, struct netlink_ext_ack *);
2491:	static int do_set_master(struct net_device *, int, struct netlink_ext_ack *);
2591:	static int do_setlink(const struct sk_buff *, struct net_device *, struct ifinfomsg *, struct netlink_ext_ack *, struct nlattr **, char *, int);
2317:	static int do_setvfinfo(struct net_device *, struct nlattr **);
1013:	static size_t if_nlmsg_size(const struct net_device *, u32);
5246:	static size_t if_nlmsg_stats_size(const struct net_device *, u32);
1561:	static int nla_put_ifalias(struct sk_buff *, struct net_device *);
4166:	static int nlmsg_populate_fdb(struct sk_buff *, struct netlink_callback *, struct net_device *, int *, struct netdev_hw_addr_list *);
3849:	static int nlmsg_populate_fdb_fill(struct sk_buff *, struct net_device *, u8 *, u16, u32, u32, int, int, u16, unsigned int);
5577:	static int rtnetlink_bind(struct net *, int);
5589:	static int rtnetlink_event(struct notifier_block *, unsigned long, void *);
5639:	static void rtnetlink_net_exit(struct net *);
5621:	static int rtnetlink_net_init(struct net *);
5572:	static void rtnetlink_rcv(struct sk_buff *);
5457:	static int rtnetlink_rcv_msg(struct sk_buff *, struct nlmsghdr *, struct netlink_ext_ack *);
4929:	static int rtnl_bridge_dellink(struct sk_buff *, struct nlmsghdr *, struct netlink_ext_ack *);
4741:	static int rtnl_bridge_getlink(struct sk_buff *, struct netlink_callback *);
4816:	static int rtnl_bridge_notify(struct net_device *);
4852:	static int rtnl_bridge_setlink(struct sk_buff *, struct nlmsghdr *, struct netlink_ext_ack *);
3702:	static u32 rtnl_calcit(struct nlmsghdr *, struct sk_buff *, struct sk_buff *);
3062:	static int rtnl_dellink(struct sk_buff *, struct nlmsghdr *, struct netlink_ext_ack *);
3696:	static int rtnl_dellinkprop(struct sk_buff *, struct nlmsghdr *, struct netlink_ext_ack *);
3736:	static int rtnl_dump_all(struct sk_buff *, struct netlink_callback *);
2054:	static int rtnl_dump_ifinfo(struct sk_buff *, struct netlink_callback *);
2226:	static int rtnl_ensure_unique_netns(struct nlattr **, struct netlink_ext_ack *, bool);
3976:	static int rtnl_fdb_add(struct sk_buff *, struct nlmsghdr *, struct netlink_ext_ack *);
4084:	static int rtnl_fdb_del(struct sk_buff *, struct nlmsghdr *, struct netlink_ext_ack *);
4317:	static int rtnl_fdb_dump(struct sk_buff *, struct netlink_callback *);
4480:	static int rtnl_fdb_get(struct sk_buff *, struct nlmsghdr *, struct netlink_ext_ack *);
3893:	static void rtnl_fdb_notify(struct net_device *, u8 *, u16, int, u16);
1634:	static int rtnl_fill_alt_ifnames(struct sk_buff *, const struct net_device *);
1699:	static int rtnl_fill_ifinfo(struct sk_buff *, struct net_device *, struct net *, int, u32, u32, u32, unsigned int, u32, u32, int *, int, int, gfp_t);
1593:	static int rtnl_fill_link_af(struct sk_buff *, const struct net_device *, u32);
1397:	static int rtnl_fill_link_ifmap(struct sk_buff *, struct net_device *);
1670:	static int rtnl_fill_proto_down(struct sk_buff *, const struct net_device *);
1197:	static int rtnl_fill_stats(struct sk_buff *, struct net_device *);
5096:	static int rtnl_fill_statsinfo(struct sk_buff *, struct net_device *, u32, u32, unsigned int, unsigned int, int *, int *, u32, int);
1367:	static int rtnl_fill_vf(struct sk_buff *, struct net_device *, u32);
1221:	static int rtnl_fill_vfinfo(struct sk_buff *, struct net_device *, int, struct nlattr *);
3543:	static int rtnl_getlink(struct sk_buff *, struct nlmsghdr *, struct netlink_ext_ack *);
680:	static int rtnl_link_fill(struct sk_buff *, const struct net_device *);
2187:	static struct net *rtnl_link_get_net_by_nlattr(struct net *, struct nlattr **);
2205:	static struct net *rtnl_link_get_net_capable(const struct sk_buff *, struct net *, struct nlattr **, int);
513:	static size_t rtnl_link_get_size(const struct net_device *);
648:	static int rtnl_link_info_fill(struct sk_buff *, const struct net_device *);
616:	static int rtnl_link_slave_info_fill(struct sk_buff *, const struct net_device *);
3641:	static int rtnl_linkprop(int, struct nlmsghdr *, struct netlink_ext_ack *, struct sk_buff *, struct sk_buff *);
3480:	static int rtnl_newlink(struct sk_buff *, struct nlmsghdr *, struct netlink_ext_ack *);
3690:	static int rtnl_newlinkprop(struct sk_buff *, struct nlmsghdr *, struct netlink_ext_ack *);
1143:	static int rtnl_phys_port_id_fill(struct sk_buff *, struct net_device *);
1161:	static int rtnl_phys_port_name_fill(struct sk_buff *, struct net_device *);
1179:	static int rtnl_phys_switch_id_fill(struct sk_buff *, struct net_device *);
1101:	static int rtnl_port_self_fill(struct sk_buff *, struct net_device *);
172:	static int rtnl_register_internal(struct module *, int, int, rtnl_doit_func, rtnl_dumpit_func, unsigned int);
2967:	static int rtnl_setlink(struct sk_buff *, struct nlmsghdr *, struct netlink_ext_ack *);
5391:	static int rtnl_stats_dump(struct sk_buff *, struct netlink_callback *);
5344:	static int rtnl_stats_get(struct sk_buff *, struct nlmsghdr *, struct netlink_ext_ack *);
3495:	static int rtnl_valid_getlink_req(struct sk_buff *, const struct nlmsghdr *, struct nlattr **, struct netlink_ext_ack *);
5310:	static int rtnl_valid_stats_req(const struct nlmsghdr *, bool, bool, struct netlink_ext_ack *);
1065:	static int rtnl_vf_ports_fill(struct sk_buff *, struct net_device *);
1461:	static int rtnl_xdp_fill(struct sk_buff *, struct net_device *);
1415:	static u32 rtnl_xdp_prog_skb(struct net_device *);
825:	static void set_operstate(struct net_device *, unsigned char);
4687:	static int valid_bridge_getlink_req(const struct nlmsghdr *, bool, u32 *, struct netlink_ext_ack *);
4282:	static int valid_fdb_dump_legacy(const struct nlmsghdr *, int *, int *, struct netlink_ext_ack *);
4228:	static int valid_fdb_dump_strict(const struct nlmsghdr *, int *, int *, struct netlink_ext_ack *);
2255:	static int validate_linkmsg(struct net_device *, struct nlattr **);

File net/core/scm.c:
116:	void __scm_destroy(struct scm_cookie *);
131:	int __scm_send(struct socket *, struct msghdr *, struct scm_cookie *);
213:	int put_cmsg(struct msghdr *, int, int, int, void *);
269:	void put_cmsg_scm_timestamping(struct msghdr *, struct scm_timestamping_internal *);
255:	void put_cmsg_scm_timestamping64(struct msghdr *, struct scm_timestamping_internal *);
290:	void scm_detach_fds(struct msghdr *, struct scm_cookie *);
342:	struct scm_fp_list *scm_fp_dup(struct scm_fp_list *);

File net/core/secure_seq.c:
145:	u32 secure_ipv4_port_ephemeral(__be32, __be32, __be16);
97:	u32 secure_ipv6_port_ephemeral(const __be32 *, const __be32 *, __be16);
132:	u32 secure_tcp_seq(__be32, __be32, __be16, __be16);
117:	u32 secure_tcp_ts_off(const struct net *, __be32, __be32);
74:	u32 secure_tcpv6_seq(const __be32 *, const __be32 *, __be16, __be16);
54:	u32 secure_tcpv6_ts_off(const struct net *, const __be32 *, const __be32 *);

File net/core/skbuff.c:
1951:	int ___pskb_trim(struct sk_buff *, unsigned int);
183:	struct sk_buff *__alloc_skb(unsigned int, gfp_t, int, int);
313:	struct sk_buff *__build_skb(void *, unsigned int);
877:	void __consume_stateless_skb(struct sk_buff *);
707:	void __kfree_skb(struct sk_buff *);
918:	void __kfree_skb_defer(struct sk_buff *);
884:	void __kfree_skb_flush(void);
506:	struct sk_buff *__napi_alloc_skb(struct napi_struct *, unsigned int, gfp_t);
431:	struct sk_buff *__netdev_alloc_skb(struct net_device *, unsigned int, gfp_t);
1574:	struct sk_buff *__pskb_copy_fclone(struct sk_buff *, int, gfp_t, bool);
2082:	void *__pskb_pull_tail(struct sk_buff *, int);
2660:	__wsum __skb_checksum(const struct sk_buff *, int, int, __wsum, const struct skb_checksum_ops *);
2869:	__sum16 __skb_checksum_complete(struct sk_buff *);
2843:	__sum16 __skb_checksum_complete_head(struct sk_buff *, int);
6234:	struct skb_ext *__skb_ext_alloc(gfp_t);
6356:	void __skb_ext_del(struct sk_buff *, enum skb_ext_id);
6376:	void __skb_ext_put(struct skb_ext *);
6284:	void *__skb_ext_set(struct sk_buff *, enum skb_ext_id, struct skb_ext *);
1818:	int __skb_pad(struct sk_buff *, int, bool);
4732:	void __skb_tstamp_tx(struct sk_buff *, struct skb_shared_hwtstamps *, struct sock *, int);
5531:	int __skb_vlan_pop(struct sk_buff *, u16 *);
5163:	void __skb_warn_lro_forwarding(const struct sk_buff *);
1043:	struct sk_buff *alloc_skb_for_msg(struct sk_buff *);
5887:	struct sk_buff *alloc_skb_with_frags(unsigned long, unsigned long, int, int *, gfp_t);
331:	struct sk_buff *build_skb(void *, unsigned int);
350:	struct sk_buff *build_skb_around(struct sk_buff *, void *, unsigned int);
859:	void consume_skb(struct sk_buff *);
721:	void kfree_skb(struct sk_buff *);
731:	void kfree_skb_list(struct sk_buff *);
5170:	void kfree_skb_partial(struct sk_buff *, bool);
1081:	int mm_account_pinned_pages(struct mmpin *, size_t);
1112:	void mm_unaccount_pinned_pages(struct mmpin *);
385:	void *napi_alloc_frag(unsigned int);
923:	void napi_consume_skb(struct sk_buff *, int);
400:	void *netdev_alloc_frag(unsigned int);
1638:	int pskb_expand_head(struct sk_buff *, int, int, gfp_t);
6170:	struct sk_buff *pskb_extract(struct sk_buff *, int, int, gfp_t);
1866:	void *pskb_put(struct sk_buff *, struct sk_buff *, int);
2038:	int pskb_trim_rcsum_slow(struct sk_buff *, unsigned int);
3575:	void skb_abort_seq_read(struct skb_seq_state *);
557:	void skb_add_rx_frag(struct sk_buff *, int, struct page *, int, int, unsigned int);
3216:	void skb_append(struct sk_buff *, struct sk_buff *, struct sk_buff_head *);
3624:	int skb_append_pagefrags(struct sk_buff *, struct page *, int, size_t);
2744:	__wsum skb_checksum(const struct sk_buff *, int, int, __wsum);
5055:	int skb_checksum_setup(struct sk_buff *, bool);
5130:	struct sk_buff *skb_checksum_trimmed(struct sk_buff *, unsigned int, __sum16 (*)(struct sk_buff *));
1456:	struct sk_buff *skb_clone(struct sk_buff *, gfp_t);
4644:	struct sk_buff *skb_clone_sk(struct sk_buff *);
567:	void skb_coalesce_rx_frag(struct sk_buff *, int, int, unsigned int);
4709:	void skb_complete_tx_timestamp(struct sk_buff *, struct skb_shared_hwtstamps *);
4789:	void skb_complete_wifi_ack(struct sk_buff *, bool);
6199:	void skb_condense(struct sk_buff *);
1535:	struct sk_buff *skb_copy(const struct sk_buff *, gfp_t);
2758:	__wsum skb_copy_and_csum_bits(const struct sk_buff *, int, u8 *, int);
3034:	void skb_copy_and_csum_dev(const struct sk_buff *, u8 *);
2220:	int skb_copy_bits(const struct sk_buff *, int, void *, int);
1764:	struct sk_buff *skb_copy_expand(const struct sk_buff *, int, int, gfp_t);
1501:	void skb_copy_header(struct sk_buff *, const struct sk_buff *);
1368:	int skb_copy_ubufs(struct sk_buff *, gfp_t);
4465:	int skb_cow_data(struct sk_buff *, int, struct sk_buff **);
3070:	struct sk_buff *skb_dequeue(struct sk_buff_head *);
3090:	struct sk_buff *skb_dequeue_tail(struct sk_buff_head *);
748:	void skb_dump(const char *, const struct sk_buff *, bool);
5516:	int skb_ensure_writable(struct sk_buff *, int);
5642:	int skb_eth_pop(struct sk_buff *);
5669:	int skb_eth_push(struct sk_buff *, const unsigned char *, const unsigned char *);
6312:	void *skb_ext_add(struct sk_buff *, enum skb_ext_id);
3608:	unsigned int skb_find_text(struct sk_buff *, unsigned int, unsigned int, struct ts_config *);
4137:	int skb_gro_receive(struct sk_buff *, struct sk_buff *);
3763:	int skb_gro_receive_list(struct sk_buff *, struct sk_buff *);
5444:	bool skb_gso_validate_mac_len(const struct sk_buff *, unsigned int);
5429:	bool skb_gso_validate_network_len(const struct sk_buff *, unsigned int);
1485:	void skb_headers_offset_update(struct sk_buff *, int);
4306:	void skb_init(void);
1074:	struct sk_buff *skb_morph(struct sk_buff *, struct sk_buff *);
5853:	int skb_mpls_dec_ttl(struct sk_buff *);
5778:	int skb_mpls_pop(struct sk_buff *, __be16, int, bool);
5725:	int skb_mpls_push(struct sk_buff *, __be32, __be16, int, bool);
5821:	int skb_mpls_update_lse(struct sk_buff *, __be32);
4827:	bool skb_partial_csum_set(struct sk_buff *, u16, u16);
3465:	void skb_prepare_seq_read(struct sk_buff *, unsigned int, unsigned int, struct skb_seq_state *);
1926:	void *skb_pull(struct sk_buff *, unsigned int);
3653:	void *skb_pull_rcsum(struct sk_buff *, unsigned int);
1906:	void *skb_push(struct sk_buff *, unsigned int);
1885:	void *skb_put(struct sk_buff *, unsigned int);
3155:	void skb_queue_head(struct sk_buff_head *, struct sk_buff *);
3110:	void skb_queue_purge(struct sk_buff_head *);
3176:	void skb_queue_tail(struct sk_buff_head *, struct sk_buff *);
3128:	unsigned int skb_rbtree_purge(struct rb_root *);
1727:	struct sk_buff *skb_realloc_headroom(struct sk_buff *, unsigned int);
676:	void skb_release_head_state(struct sk_buff *);
5285:	void skb_scrub_packet(struct sk_buff *, bool);
3795:	struct sk_buff *skb_segment(struct sk_buff *, netdev_features_t);
3677:	struct sk_buff *skb_segment_list(struct sk_buff *, netdev_features_t, unsigned int);
2482:	int skb_send_sock_locked(struct sock *, struct sk_buff *, int, int);
3501:	unsigned int skb_seq_read(unsigned int, const u8 **, struct skb_seq_state *);
3335:	int skb_shift(struct sk_buff *, struct sk_buff *, int);
2457:	int skb_splice_bits(struct sk_buff *, struct sock *, unsigned int, struct pipe_inode_info *, unsigned int, unsigned int);
3294:	void skb_split(struct sk_buff *, struct sk_buff *, const u32);
2582:	int skb_store_bits(struct sk_buff *, int, const void *, int);
4407:	int skb_to_sgvec(struct sk_buff *, struct scatterlist *, int, int);
4439:	int skb_to_sgvec_nomark(struct sk_buff *, struct scatterlist *, int, int);
1941:	void skb_trim(struct sk_buff *, unsigned int);
5188:	bool skb_try_coalesce(struct sk_buff *, struct sk_buff *, bool *, int *);
4781:	void skb_tstamp_tx(struct sk_buff *, struct skb_shared_hwtstamps *);
844:	void skb_tx_error(struct sk_buff *);
3196:	void skb_unlink(struct sk_buff *, struct sk_buff_head *);
5570:	int skb_vlan_pop(struct sk_buff *);
5603:	int skb_vlan_push(struct sk_buff *, __be16, u16);
5476:	struct sk_buff *skb_vlan_untag(struct sk_buff *);
2974:	int skb_zerocopy(struct sk_buff *, struct sk_buff *, int, int);
2936:	unsigned int skb_zerocopy_headlen(const struct sk_buff *);
1296:	int skb_zerocopy_iter_dgram(struct sk_buff *, struct msghdr *, int);
1302:	int skb_zerocopy_iter_stream(struct sock *, struct sk_buff *, struct msghdr *, int, struct ubuf_info *);
4605:	struct sk_buff *sock_dequeue_err_skb(struct sock *);
4577:	int sock_queue_err_skb(struct sock *, struct sk_buff *);
1121:	struct ubuf_info *sock_zerocopy_alloc(struct sock *, size_t);
1222:	void sock_zerocopy_callback(struct ubuf_info *, bool);
1271:	void sock_zerocopy_put(struct ubuf_info *);
1282:	void sock_zerocopy_put_abort(struct ubuf_info *, bool);
1158:	struct ubuf_info *sock_zerocopy_realloc(struct sock *, size_t, struct ubuf_info *);
266:	static struct sk_buff *__build_skb_around(struct sk_buff *, void *, unsigned int);
954:	static void __copy_skb_header(struct sk_buff *, const struct sk_buff *);
1006:	static struct sk_buff *__skb_clone(struct sk_buff *, struct sk_buff *);
4665:	static void __skb_complete_tx_timestamp(struct sk_buff *, struct sock *, int, bool);
2405:	static bool __skb_splice_bits(struct sk_buff *, unsigned int *, unsigned int *, struct splice_pipe_desc *, struct sock *, struct pipe_inode_info *);
4324:	static int __skb_to_sgvec(struct sk_buff *, struct scatterlist *, int, int, unsigned int);
2366:	static bool __splice_segment(struct page *, unsigned int, unsigned int, unsigned int *, unsigned int *, struct splice_pipe_desc *, bool, struct sock *, struct pipe_inode_info *);
646:	static void kfree_skbmem(struct sk_buff *);
2307:	static struct page *linear_to_page(struct page *, unsigned int *, unsigned int *, struct sock *);
6018:	static int pskb_carve_frag_list(struct skb_shared_info *, int, gfp_t, struct sk_buff *);
5949:	static int pskb_carve_inside_header(struct sk_buff *, const u32, const int, gfp_t);
6072:	static int pskb_carve_inside_nonlinear(struct sk_buff *, const u32, int, gfp_t);
4868:	static __sum16 *skb_checksum_setup_ip(struct sk_buff *, int, unsigned int);
4950:	static int skb_checksum_setup_ipv6(struct sk_buff *, bool);
590:	static void skb_clone_fraglist(struct sk_buff *, struct sk_buff *);
6347:	static void skb_ext_put_sp(struct sec_path *);
598:	static void skb_free_head(struct sk_buff *);
5319:	static unsigned int skb_gso_transport_seglen(const struct sk_buff *);
103:	static void skb_panic(struct sk_buff *, unsigned int, void *, const char *);
611:	static void skb_release_data(struct sk_buff *);
5450:	static struct sk_buff *skb_reorder_vlan_header(struct sk_buff *);
3591:	static void skb_ts_finish(struct ts_config *, struct ts_state *);
3584:	static unsigned int skb_ts_get_next_block(unsigned int, const u8 **, struct ts_config *, struct ts_state *);
1333:	static int skb_zerocopy_clone(struct sk_buff *, struct sk_buff *, gfp_t);
4558:	static void sock_rmem_free(struct sk_buff *);
2302:	static void sock_spd_release(struct splice_pipe_desc *, unsigned int);
2339:	static bool spd_fill_page(struct splice_pipe_desc *, struct page *, unsigned int *, unsigned int, bool, struct sock *, struct pipe_inode_info *);
2910:	static __wsum warn_crc32c_csum_combine(__wsum, __wsum, int, int);
2902:	static __wsum warn_crc32c_csum_update(const void *, int, __wsum);

File net/core/skmsg.c:
628:	void __sk_psock_purge_ingress_msg(struct sk_psock *);
26:	int sk_msg_alloc(struct sock *, struct sk_msg *, int, int);
77:	int sk_msg_clone(struct sock *, struct sk_msg *, struct sk_msg *, u32, u32);
207:	int sk_msg_free(struct sock *, struct sk_msg *);
201:	int sk_msg_free_nocharge(struct sock *, struct sk_msg *);
241:	void sk_msg_free_partial(struct sock *, struct sk_msg *, u32);
247:	void sk_msg_free_partial_nocharge(struct sock *, struct sk_msg *, u32);
359:	int sk_msg_memcopy_from_iter(struct sock *, struct iov_iter *, struct sk_msg *, u32);
152:	void sk_msg_return(struct sock *, struct sk_msg *, int);
128:	void sk_msg_return_zero(struct sock *, struct sk_msg *, int);
253:	void sk_msg_trim(struct sock *, struct sk_msg *, int);
301:	int sk_msg_zerocopy_from_iter(struct sock *, struct iov_iter *, struct sk_msg *, u32);
687:	void sk_psock_drop(struct sock *, struct sk_psock *);
565:	struct sk_psock *sk_psock_init(struct sock *, int);
1008:	int sk_psock_init_strp(struct sock *, struct sk_psock *);
615:	struct sk_psock_link *sk_psock_link_pop(struct sk_psock *);
719:	int sk_psock_msg_verdict(struct sock *, struct sk_psock *, struct sk_msg *);
1033:	void sk_psock_start_strp(struct sock *, struct sk_psock *);
1020:	void sk_psock_start_verdict(struct sock *, struct sk_psock *);
1046:	void sk_psock_stop_strp(struct sock *, struct sk_psock *);
1059:	void sk_psock_stop_verdict(struct sock *, struct sk_psock *);
809:	int sk_psock_tls_strp_read(struct sk_psock *, struct sk_buff *);
183:	static int __sk_msg_free(struct sock *, struct sk_msg *, u32, bool);
213:	static void __sk_msg_free_partial(struct sock *, struct sk_msg *, u32, bool);
167:	static int sk_msg_free_elem(struct sock *, struct sk_msg *, u32, bool);
512:	static void sk_psock_backlog(struct work_struct *);
753:	static int sk_psock_bpf_run(struct bpf_prog *, struct sk_buff *, struct sk_psock *);
402:	static struct sk_msg *sk_psock_create_ingress_msg(struct sock *, struct sk_buff *);
679:	static void sk_psock_destroy(struct callback_head *);
655:	static void sk_psock_destroy_deferred(struct work_struct *);
452:	static int sk_psock_skb_ingress(struct sk_psock *, struct sk_buff *);
421:	static int sk_psock_skb_ingress_enqueue(struct sk_buff *, struct sk_psock *, struct sock *, struct sk_msg *);
485:	static int sk_psock_skb_ingress_self(struct sk_psock *, struct sk_buff *);
768:	static void sk_psock_skb_redirect(struct sk_buff *);
921:	static void sk_psock_strp_data_ready(struct sock *);
903:	static int sk_psock_strp_parse(struct strparser *, struct sk_buff *);
871:	static void sk_psock_strp_read(struct strparser *, struct sk_buff *);
898:	static int sk_psock_strp_read_done(struct strparser *, int);
829:	static void sk_psock_verdict_apply(struct sk_psock *, struct sk_buff *, int);
976:	static void sk_psock_verdict_data_ready(struct sock *);
939:	static int sk_psock_verdict_recv(read_descriptor_t *, struct sk_buff *, unsigned int, size_t);
991:	static void sk_psock_write_space(struct sock *);
639:	static void sk_psock_zap_ingress(struct sk_psock *);

File net/core/sock.c:
2825:	void __receive_sock(struct file *);
2524:	void __release_sock(struct sock *);
318:	int __sk_backlog_rcv(struct sock *, struct sk_buff *);
529:	struct dst_entry *__sk_dst_check(struct sock *, u32);
2557:	void __sk_flush_backlog(struct sock *);
2598:	int __sk_mem_raise_allocated(struct sock *, int, int, int);
2722:	void __sk_mem_reclaim(struct sock *, int);
2704:	void __sk_mem_reduce_allocated(struct sock *, int);
2685:	int __sk_mem_schedule(struct sock *, int, int);
485:	int __sk_receive_skb(struct sock *, struct sk_buff *, const int, unsigned int, bool);
2367:	int __sock_cmsg_send(struct sock *, struct msghdr *, struct cmsghdr *, struct sockcm_cookie *);
438:	int __sock_queue_rcv_skb(struct sock *, struct sk_buff *);
2071:	void __sock_wfree(struct sk_buff *);
3100:	bool lock_sock_fast(struct sock *);
3052:	void lock_sock_nested(struct sock *, int);
3469:	int proto_register(struct proto *, int);
3533:	void proto_unregister(struct proto *);
3068:	void release_sock(struct sock *);
1740:	struct sock *sk_alloc(struct net *, int, gfp_t, struct proto *, int);
3694:	bool sk_busy_loop_end(void *, unsigned long);
174:	bool sk_capable(const struct sock *, int);
301:	void sk_clear_memalloc(struct sock *);
1883:	struct sock *sk_clone_lock(const struct sock *, const gfp_t);
3258:	void sk_common_release(struct sock *);
1817:	void sk_destruct(struct sock *);
545:	struct dst_entry *sk_dst_check(struct sock *, u32);
1843:	void sk_free(struct sock *);
2005:	void sk_free_unlock_clone(struct sock *);
3295:	void sk_get_meminfo(const struct sock *, u32 *);
687:	bool sk_mc_loop(struct sock *);
189:	bool sk_net_capable(const struct sock *, int);
157:	bool sk_ns_capable(const struct sock *, struct user_namespace *, int);
2495:	bool sk_page_frag_refill(struct sock *, struct page_frag *);
2947:	void sk_reset_timer(struct sock *, struct timer_list *, unsigned long);
2939:	void sk_send_sigurg(struct sock *);
293:	void sk_set_memalloc(struct sock *);
2730:	int sk_set_peek_off(struct sock *, int);
2015:	void sk_setup_caps(struct sock *, struct dst_entry *);
2955:	void sk_stop_timer(struct sock *, struct timer_list *);
2962:	void sk_stop_timer_sync(struct sock *, struct timer_list *);
2575:	int sk_wait_data(struct sock *, long *, const struct sk_buff *);
2120:	void skb_orphan_partial(struct sk_buff *);
2461:	bool skb_page_frag_refill(unsigned int, struct page_frag *, gfp_t);
2079:	void skb_set_owner_w(struct sk_buff *, struct sock *);
2316:	struct sk_buff *sock_alloc_send_pskb(struct sock *, unsigned long, unsigned long, int, int *, int);
2360:	struct sk_buff *sock_alloc_send_skb(struct sock *, unsigned long, int, int *);
3704:	int sock_bind_add(struct sock *, struct sockaddr *, int);
587:	int sock_bindtoindex(struct sock *, int, bool);
2409:	int sock_cmsg_send(struct sock *, struct msghdr *, struct sockcm_cookie *);
3222:	int sock_common_getsockopt(struct socket *, int, int, char *, int *);
3231:	int sock_common_recvmsg(struct socket *, struct msghdr *, size_t, int);
3249:	int sock_common_setsockopt(struct socket *, int, int, sockptr_t, unsigned int);
2899:	void sock_def_readable(struct sock *);
2149:	void sock_efree(struct sk_buff *);
3162:	void sock_enable_timestamp(struct sock *, enum sock_flags);
763:	void sock_enable_timestamps(struct sock *);
1294:	int sock_getsockopt(struct socket *, int, int, char *, int *);
3123:	int sock_gettstamp(struct socket *, void *, bool, bool);
2178:	unsigned long sock_i_ino(struct sock *);
2167:	kuid_t sock_i_uid(struct sock *);
2969:	void sock_init_data(struct socket *, struct sock *);
3341:	int sock_inuse_get(struct net *);
2272:	void sock_kfree_s(struct sock *, void *, int);
2238:	void *sock_kmalloc(struct sock *, int, gfp_t);
2278:	void sock_kzfree_s(struct sock *, void *, int);
3548:	int sock_load_diag_module(int, int);
2763:	int sock_no_accept(struct socket *, struct socket *, int, bool);
2744:	int sock_no_bind(struct socket *, struct sockaddr *, int);
2750:	int sock_no_connect(struct socket *, struct sockaddr *, int, int);
2777:	int sock_no_ioctl(struct socket *, unsigned int, unsigned long);
722:	void sock_no_linger(struct sock *);
2783:	int sock_no_listen(struct socket *, int);
2814:	int sock_no_mmap(struct file *, struct socket *, struct vm_area_struct *);
2807:	int sock_no_recvmsg(struct socket *, struct msghdr *, size_t, int);
2795:	int sock_no_sendmsg(struct socket *, struct msghdr *, size_t);
2842:	ssize_t sock_no_sendpage(struct socket *, struct page *, int, size_t, int);
2856:	ssize_t sock_no_sendpage_locked(struct sock *, struct page *, int, size_t, int);
2757:	int sock_no_socketpair(struct socket *, struct socket *);
2215:	struct sk_buff *sock_omalloc(struct sock *, unsigned long, gfp_t);
2159:	void sock_pfree(struct sk_buff *);
3318:	void sock_prot_inuse_add(struct net *, struct proto *, int);
3324:	int sock_prot_inuse_get(struct net *, struct proto *);
473:	int sock_queue_rcv_skb(struct sock *, struct sk_buff *);
3179:	int sock_recv_errqueue(struct sock *, struct msghdr *, int, int, int);
2135:	void sock_rfree(struct sk_buff *);
771:	void sock_set_keepalive(struct sock *);
818:	void sock_set_mark(struct sock *, u32);
731:	void sock_set_priority(struct sock *, u32);
802:	void sock_set_rcvbuf(struct sock *, int);
706:	void sock_set_reuseaddr(struct sock *);
714:	void sock_set_reuseport(struct sock *);
739:	void sock_set_sndtimeo(struct sock *, s64);
831:	int sock_setsockopt(struct socket *, int, int, sockptr_t, unsigned int);
2045:	void sock_wfree(struct sk_buff *);
2192:	struct sk_buff *sock_wmalloc(struct sock *, unsigned long, int, gfp_t);
2506:	static void __lock_sock(struct sock *);
1778:	static void __sk_destruct(struct callback_head *);
1832:	static void __sk_free(struct sock *);
3381:	static int net_inuse_init(void);
3673:	static void proto_exit_net(struct net *);
3684:	static int proto_init(void);
3664:	static int proto_init_net(struct net *);
3579:	static void *proto_seq_next(struct seq_file *, void *, loff_t *);
3605:	static void proto_seq_printf(struct seq_file *, struct proto *);
3639:	static int proto_seq_show(struct seq_file *, void *);
3572:	static void *proto_seq_start(struct seq_file *, loff_t *);
3584:	static void proto_seq_stop(struct seq_file *, void *);
1677:	static struct sock *sk_prot_alloc(struct proto *, gfp_t, int);
559:	static int sock_bindtoindex_locked(struct sock *, int);
2935:	static void sock_def_destruct(struct sock *);
2887:	static void sock_def_error_report(struct sock *);
2876:	static void sock_def_wakeup(struct sock *);
2912:	static void sock_def_write_space(struct sock *);
334:	static int sock_get_timeout(long, void *, bool);
3370:	static void sock_inuse_exit_net(struct net *);
3353:	static int sock_inuse_init_net(struct net *);
2208:	static void sock_ofree(struct sk_buff *);
364:	static int sock_set_timeout(long *, sockptr_t, int, bool);
601:	static int sock_setbindtodevice(struct sock *, sockptr_t, int);
2287:	static long sock_wait_for_wmem(struct sock *, long);

File net/core/sock_diag.c:
25:	u64 __sock_gen_cookie(struct sock *);
153:	void sock_diag_broadcast_destroy(struct sock *);
37:	int sock_diag_check_cookie(struct sock *, const __u32 *);
297:	int sock_diag_destroy(struct sock *, int);
71:	int sock_diag_put_filterinfo(bool, struct sock *, struct sk_buff *, int);
61:	int sock_diag_put_meminfo(struct sock *, struct sk_buff *, int);
181:	int sock_diag_register(const struct sock_diag_handler *);
165:	void sock_diag_register_inet_compat(int (*)(struct sk_buff *, struct nlmsghdr *));
52:	void sock_diag_save_cookie(struct sock *, __u32 *);
199:	void sock_diag_unregister(const struct sock_diag_handler *);
173:	void sock_diag_unregister_inet_compat(int (*)(struct sk_buff *, struct nlmsghdr *));
322:	static void diag_net_exit(struct net *);
309:	static int diag_net_init(struct net *);
280:	static int sock_diag_bind(struct net *, int);
121:	static void sock_diag_broadcast_destroy_work(struct work_struct *);
333:	static int sock_diag_init(void);
273:	static void sock_diag_rcv(struct sk_buff *);
244:	static int sock_diag_rcv_msg(struct sk_buff *, struct nlmsghdr *, struct netlink_ext_ack *);

File net/core/sock_map.c:
734:	int bpf_iter_sockmap(struct bpf_iter_meta *, struct bpf_map *, void *, struct sock *);
1298:	u64 bpf_msg_redirect_hash(u64, u64, u64, u64, u64);
694:	u64 bpf_msg_redirect_map(u64, u64, u64, u64, u64);
1270:	u64 bpf_sk_redirect_hash(u64, u64, u64, u64, u64);
666:	u64 bpf_sk_redirect_map(u64, u64, u64, u64, u64);
1248:	u64 bpf_sock_hash_update(u64, u64, u64, u64, u64);
643:	u64 bpf_sock_map_update(u64, u64, u64, u64, u64);
1545:	void sock_map_close(struct sock *, long);
67:	int sock_map_get_from_fd(const union bpf_attr *, struct bpf_prog *);
86:	int sock_map_prog_detach(const union bpf_attr *, enum bpf_prog_type);
1471:	int sock_map_prog_update(struct bpf_map *, struct bpf_prog *, struct bpf_prog *, u32);
1525:	void sock_map_unhash(struct sock *);
577:	int sock_map_update_elem_sys(struct bpf_map *, void *, void *, u64);
893:	static struct sock *__sock_hash_lookup_elem(struct bpf_map *, void *);
1617:	static int bpf_sockmap_iter_init(void);
1102:	static struct bpf_map *sock_hash_alloc(union bpf_attr *);
964:	static struct bpf_shtab_elem *sock_hash_alloc_elem(struct bpf_shtab *, void *, u32, u32, struct sock *, struct bpf_shtab_elem *);
941:	static int sock_hash_delete_elem(struct bpf_map *, void *);
1164:	static void sock_hash_free(struct bpf_map *);
1062:	static int sock_hash_get_next_key(struct bpf_map *, void *, void *);
1424:	static int sock_hash_init_seq_private(void *, struct bpf_iter_aux_info *);
1231:	static void *sock_hash_lookup(struct bpf_map *, void *);
879:	static struct bpf_shtab_elem *sock_hash_lookup_elem_raw(u32, void *, u32, struct hlist_head *, struct hlist_head *);
1216:	static void *sock_hash_lookup_sys(struct bpf_map *, void *);
1243:	static void sock_hash_release_progs(struct bpf_map *);
1331:	static void *sock_hash_seq_find_next(struct sock_hash_seq_info *, struct bpf_shtab_elem *);
1374:	static void *sock_hash_seq_next(struct seq_file *, void *, loff_t *);
1383:	static int sock_hash_seq_show(struct seq_file *, void *);
1361:	static void *sock_hash_seq_start(struct seq_file *, loff_t *);
1407:	static void sock_hash_seq_stop(struct seq_file *, void *);
990:	static int sock_hash_update_common(struct bpf_map *, void *, struct sock *, u64);
27:	static struct bpf_map *sock_map_alloc(union bpf_attr *);
148:	static void sock_map_del_link(struct sock *, struct sk_psock *, void *);
447:	static int sock_map_delete_elem(struct bpf_map *, void *);
345:	static void sock_map_free(struct bpf_map *);
460:	static int sock_map_get_next_key(struct bpf_map *, void *, void *);
813:	static int sock_map_init_seq_private(void *, struct bpf_iter_aux_info *);
1566:	static int sock_map_iter_attach_target(struct bpf_prog *, union bpf_iter_link_info *, struct bpf_iter_aux_info *);
1597:	static void sock_map_iter_detach_target(struct bpf_iter_aux_info *);
233:	static int sock_map_link(struct bpf_map *, struct sk_psock_progs *, struct sock *);
324:	static int sock_map_link_no_progs(struct bpf_map *, struct sock *);
392:	static void *sock_map_lookup(struct bpf_map *, void *);
404:	static void *sock_map_lookup_sys(struct bpf_map *, void *);
213:	static struct sk_psock *sock_map_psock_get_checked(struct sock *);
376:	static void sock_map_release_progs(struct bpf_map *);
1515:	static void sock_map_remove_links(struct sock *, struct sk_psock *);
762:	static void *sock_map_seq_next(struct seq_file *, void *, loff_t *);
773:	static int sock_map_seq_show(struct seq_file *, void *);
749:	static void *sock_map_seq_start(struct seq_file *, loff_t *);
796:	static void sock_map_seq_stop(struct seq_file *, void *);
179:	static void sock_map_unref(struct sock *, void *);
477:	static int sock_map_update_common(struct bpf_map *, u32, struct sock *, u64);
618:	static int sock_map_update_elem(struct bpf_map *, void *, void *, u64);

File net/core/sock_reuseport.c:
140:	int reuseport_add_sock(struct sock *, struct sock *, bool);
36:	int reuseport_alloc(struct sock *, bool);
311:	int reuseport_attach_prog(struct sock *, struct bpf_prog *);
339:	int reuseport_detach_prog(struct sock *);
183:	void reuseport_detach_sock(struct sock *);
257:	struct sock *reuseport_select_sock(struct sock *, u32, struct sk_buff *, int);
21:	static struct sock_reuseport *__reuseport_alloc(unsigned int);
122:	static void reuseport_free_rcu(struct callback_head *);
217:	static struct sock *run_bpf_filter(struct sock_reuseport *, u16, struct bpf_prog *, struct sk_buff *, int);

File net/core/stream.c:
183:	int sk_stream_error(struct sock *, int, int);
193:	void sk_stream_kill_queues(struct sock *);
96:	void sk_stream_wait_close(struct sock *, long);
56:	int sk_stream_wait_connect(struct sock *, long *);
118:	int sk_stream_wait_memory(struct sock *, long *);
30:	void sk_stream_write_space(struct sock *);

File net/core/sysctl_net_core.c:
590:	static int fb_tunnels_only_for_init_net_sysctl_setup(char *);
119:	static int flow_limit_cpu_sysctl(struct ctl_table *, int, void *, size_t *, loff_t *);
194:	static int flow_limit_table_len_sysctl(struct ctl_table *, int, void *, size_t *, loff_t *);
235:	static int proc_do_dev_weight(struct ctl_table *, int, void *, size_t *, loff_t *);
250:	static int proc_do_rss_key(struct ctl_table *, int, void *, size_t *, loff_t *);
263:	static int proc_dointvec_minmax_bpf_enable(struct ctl_table *, int, void *, size_t *, loff_t *);
290:	static int proc_dointvec_minmax_bpf_restricted(struct ctl_table *, int, void *, size_t *, loff_t *);
301:	static int proc_dolongvec_minmax_bpf_restricted(struct ctl_table *, int, void *, size_t *, loff_t *);
49:	static int rps_sock_flow_sysctl(struct ctl_table *, int, void *, size_t *, loff_t *);
216:	static int set_default_qdisc(struct ctl_table *, int, void *, size_t *, loff_t *);
649:	static int sysctl_core_init(void);
634:	static void sysctl_core_net_exit(struct net *);
603:	static int sysctl_core_net_init(struct net *);

File net/core/timestamping.c:
22:	void skb_clone_tx_timestamp(struct sk_buff *);
45:	bool skb_defer_rx_timestamp(struct sk_buff *);

File net/core/tso.c:
54:	void tso_build_data(const struct sk_buff *, struct tso_t *, int);
16:	void tso_build_hdr(const struct sk_buff *, char *, struct tso_t *, int, bool);
9:	int tso_count_descs(const struct sk_buff *);
72:	int tso_start(struct sk_buff *, struct tso_t *);

File net/core/utils.c:
118:	int in4_pton(const char *, int, u8 *, int, const char **);
184:	int in6_pton(const char *, int, u8 *, int, const char **);
50:	__be32 in_aton(const char *);
402:	bool inet_addr_is_any(struct sockaddr *);
458:	void inet_proto_csum_replace16(__sum16 *, struct sk_buff *, const __be32 *, const __be32 *, bool);
425:	void inet_proto_csum_replace4(__sum16 *, struct sk_buff *, __be32, __be32, bool);
475:	void inet_proto_csum_replace_by_diff(__sum16 *, struct sk_buff *, __wsum, bool);
369:	int inet_pton_with_scope(struct net *, __kernel_sa_family_t, const char *, const char *, struct __kernel_sockaddr_storage *);
38:	int net_ratelimit(void);
301:	static int inet4_pton(const char *, u16, struct __kernel_sockaddr_storage *);
320:	static int inet6_pton(struct net *, const char *, u16, struct __kernel_sockaddr_storage *);

File net/core/xdp.c:
393:	void __xdp_release_frame(void *, struct xdp_mem_info *);
407:	void xdp_attachment_setup(struct xdp_attachment_info *, struct netdev_bpf *);
417:	struct xdp_frame *xdp_convert_zc_to_xdp_frame(struct xdp_buff *);
387:	void xdp_return_buff(struct xdp_buff *);
375:	void xdp_return_frame(struct xdp_frame *);
381:	void xdp_return_frame_rx_napi(struct xdp_frame *);
194:	bool xdp_rxq_info_is_reg(struct xdp_rxq_info *);
160:	int xdp_rxq_info_reg(struct xdp_rxq_info *, struct net_device *, u32);
262:	int xdp_rxq_info_reg_mem_model(struct xdp_rxq_info *, enum xdp_mem_type, void *);
135:	void xdp_rxq_info_unreg(struct xdp_rxq_info *);
113:	void xdp_rxq_info_unreg_mem_model(struct xdp_rxq_info *);
188:	void xdp_rxq_info_unused(struct xdp_rxq_info *);
457:	void xdp_warn(const char *, const char *, const int);
69:	static void __xdp_mem_allocator_rcu_free(struct callback_head *);
340:	static void __xdp_return(void *, struct xdp_mem_info *, bool, struct xdp_buff *);
89:	static void mem_allocator_disconnect(void *);
81:	static void mem_xa_remove(struct xdp_mem_allocator *);
48:	static int xdp_mem_id_cmp(struct rhashtable_compare_arg *, const void *);
36:	static u32 xdp_mem_id_hashfn(const void *, u32, u32);

File net/dcb/dcbevent.c:
27:	int call_dcbevent_notifiers(unsigned long, void *);
15:	int register_dcbevent_notifier(struct notifier_block *);
21:	int unregister_dcbevent_notifier(struct notifier_block *);

File net/dcb/dcbnl.c:
1837:	u8 dcb_getapp(struct net_device *, struct dcb_app *);
1954:	int dcb_ieee_delapp(struct net_device *, struct dcb_app *);
2046:	u8 dcb_ieee_getapp_default_prio_mask(const struct net_device *);
2016:	void dcb_ieee_getapp_dscp_prio_mask_map(const struct net_device *, struct dcb_ieee_app_dscp_map *);
1900:	u8 dcb_ieee_getapp_mask(struct net_device *, struct dcb_app *);
1986:	void dcb_ieee_getapp_prio_dscp_mask_map(const struct net_device *, struct dcb_ieee_app_prio_map *);
1923:	int dcb_ieee_setapp(struct net_device *, struct dcb_app *);
1859:	int dcb_setapp(struct net_device *, struct dcb_app *);
1411:	int dcbnl_cee_notify(struct net_device *, int, int, u32, u32);
1404:	int dcbnl_ieee_notify(struct net_device *, int, int, u32, u32);
551:	static int __dcbnl_pg_getcfg(struct net_device *, struct nlattr **, struct sk_buff *, int, struct nlmsghdr *);
765:	static int __dcbnl_pg_setcfg(struct net_device *, struct nlattr **, struct sk_buff *, int, u32, struct nlmsghdr *);
1815:	static int dcb_app_add(const struct dcb_app *, int);
1799:	static struct dcb_app_type *dcb_app_lookup(const struct dcb_app *, int, int);
1740:	static int dcb_doit(struct sk_buff *, struct nlmsghdr *, struct netlink_ext_ack *);
870:	static int dcbnl_bcn_getcfg(struct net_device *, struct nlmsghdr *, u32, struct nlattr **, struct sk_buff *);
932:	static int dcbnl_bcn_setcfg(struct net_device *, struct nlmsghdr *, u32, struct nlattr **, struct sk_buff *);
973:	static int dcbnl_build_peer_app(struct net_device *, struct sk_buff *, int, int, int);
1227:	static int dcbnl_cee_fill(struct sk_buff *, struct net_device *);
1690:	static int dcbnl_cee_get(struct net_device *, struct nlmsghdr *, u32, struct nlattr **, struct sk_buff *);
1174:	static int dcbnl_cee_pg_fill(struct sk_buff *, struct net_device *, int);
431:	static int dcbnl_getapp(struct net_device *, struct nlmsghdr *, u32, struct nlattr **, struct sk_buff *);
277:	static int dcbnl_getcap(struct net_device *, struct nlmsghdr *, u32, struct nlattr **, struct sk_buff *);
1579:	static int dcbnl_getdcbx(struct net_device *, struct nlmsghdr *, u32, struct nlattr **, struct sk_buff *);
1606:	static int dcbnl_getfeatcfg(struct net_device *, struct nlmsghdr *, u32, struct nlattr **, struct sk_buff *);
322:	static int dcbnl_getnumtcs(struct net_device *, struct nlmsghdr *, u32, struct nlattr **, struct sk_buff *);
263:	static int dcbnl_getperm_hwaddr(struct net_device *, struct nlmsghdr *, u32, struct nlattr **, struct sk_buff *);
218:	static int dcbnl_getpfccfg(struct net_device *, struct nlmsghdr *, u32, struct nlattr **, struct sk_buff *);
403:	static int dcbnl_getpfcstate(struct net_device *, struct nlmsghdr *, u32, struct nlattr **, struct sk_buff *);
207:	static int dcbnl_getstate(struct net_device *, struct nlmsghdr *, u32, struct nlattr **, struct sk_buff *);
1533:	static int dcbnl_ieee_del(struct net_device *, struct nlmsghdr *, u32, struct nlattr **, struct sk_buff *);
1031:	static int dcbnl_ieee_fill(struct sk_buff *, struct net_device *);
1522:	static int dcbnl_ieee_get(struct net_device *, struct nlmsghdr *, u32, struct nlattr **, struct sk_buff *);
1424:	static int dcbnl_ieee_set(struct net_device *, struct nlmsghdr *, u32, struct nlattr **, struct sk_buff *);
2066:	static int dcbnl_init(void);
182:	static struct sk_buff *dcbnl_newmsg(int, u8, u32, u32, u32, struct nlmsghdr **);
1370:	static int dcbnl_notify(struct net_device *, int, int, u32, u32, int);
693:	static int dcbnl_pgrx_getcfg(struct net_device *, struct nlmsghdr *, u32, struct nlattr **, struct sk_buff *);
864:	static int dcbnl_pgrx_setcfg(struct net_device *, struct nlmsghdr *, u32, struct nlattr **, struct sk_buff *);
687:	static int dcbnl_pgtx_getcfg(struct net_device *, struct nlmsghdr *, u32, struct nlattr **, struct sk_buff *);
858:	static int dcbnl_pgtx_setcfg(struct net_device *, struct nlmsghdr *, u32, struct nlattr **, struct sk_buff *);
747:	static int dcbnl_setall(struct net_device *, struct nlmsghdr *, u32, struct nlattr **, struct sk_buff *);
501:	static int dcbnl_setapp(struct net_device *, struct nlmsghdr *, u32, struct nlattr **, struct sk_buff *);
1589:	static int dcbnl_setdcbx(struct net_device *, struct nlmsghdr *, u32, struct nlattr **, struct sk_buff *);
1652:	static int dcbnl_setfeatcfg(struct net_device *, struct nlmsghdr *, u32, struct nlattr **, struct sk_buff *);
369:	static int dcbnl_setnumtcs(struct net_device *, struct nlmsghdr *, u32, struct nlattr **, struct sk_buff *);
716:	static int dcbnl_setpfccfg(struct net_device *, struct nlmsghdr *, u32, struct nlattr **, struct sk_buff *);
413:	static int dcbnl_setpfcstate(struct net_device *, struct nlmsghdr *, u32, struct nlattr **, struct sk_buff *);
699:	static int dcbnl_setstate(struct net_device *, struct nlmsghdr *, u32, struct nlattr **, struct sk_buff *);

File net/devres.c:
21:	struct net_device *devm_alloc_etherdev_mqs(struct device *, int, unsigned int, unsigned int);
67:	int devm_register_netdev(struct device *, struct net_device *);
14:	static void devm_free_netdev(struct device *, void *);
42:	static void devm_unregister_netdev(struct device *, void *);
49:	static int netdev_devres_match(struct device *, void *, void *);

File net/ethernet/eth.c:
395:	struct net_device *alloc_etherdev_mqs(int, unsigned int, unsigned int);
502:	unsigned char *arch_get_platform_mac_address(void);
308:	void eth_commit_mac_addr_change(struct net_device *, void *);
125:	u32 eth_get_headlen(const struct net_device *, void *, unsigned int);
463:	int eth_gro_complete(struct sk_buff *, int);
409:	struct sk_buff *eth_gro_receive(struct list_head *, struct sk_buff *);
79:	int eth_header(struct sk_buff *, struct net_device *, unsigned short, const void *, const void *, unsigned int);
233:	int eth_header_cache(const struct neighbour *, struct hh_cache *, __be16);
265:	void eth_header_cache_update(struct hh_cache *, const struct net_device *, const unsigned char *);
217:	int eth_header_parse(const struct sk_buff *, unsigned char *);
278:	__be16 eth_header_parse_protocol(const struct sk_buff *);
326:	int eth_mac_addr(struct net_device *, void *);
507:	int eth_platform_get_mac_address(struct device *, u8 *);
291:	int eth_prepare_mac_addr_change(struct net_device *, void *);
155:	__be16 eth_type_trans(struct sk_buff *, struct net_device *);
338:	int eth_validate_addr(struct net_device *);
361:	void ether_setup(struct net_device *);
534:	int nvmem_get_mac_address(struct device *, void *);
403:	ssize_t sysfs_format_mac(char *, const unsigned char *, int);
493:	static int eth_offload_init(void);

File net/ethtool/bitset.c:
171:	int ethnl_bitset32_size(const u32 *, const u32 *, unsigned int, ethnl_string_array_t, bool);
328:	int ethnl_bitset_is_compact(const struct nlattr *, bool *);
808:	int ethnl_bitset_size(const unsigned long *, const unsigned long *, unsigned int, ethnl_string_array_t, bool);
604:	int ethnl_parse_bitset(unsigned long *, unsigned long *, unsigned int, const struct nlattr *, ethnl_string_array_t, struct netlink_ext_ack *);
816:	int ethnl_put_bitset(struct sk_buff *, int, const unsigned long *, const unsigned long *, unsigned int, ethnl_string_array_t, bool);
232:	int ethnl_put_bitset32(struct sk_buff *, int, const u32 *, const u32 *, unsigned int, ethnl_string_array_t, bool);
825:	int ethnl_update_bitset(unsigned long *, unsigned int, const struct nlattr *, ethnl_string_array_t, struct netlink_ext_ack *, bool *);
552:	int ethnl_update_bitset32(u32 *, unsigned int, const struct nlattr *, ethnl_string_array_t, struct netlink_ext_ack *, bool *);
34:	static void ethnl_bitmap32_clear(u32 *, unsigned int, unsigned int, bool *);
480:	static int ethnl_compact_sanity_checks(unsigned int, const struct nlattr *, struct nlattr **, struct netlink_ext_ack *);
377:	static int ethnl_parse_bit(unsigned int *, bool *, unsigned int, const struct nlattr *, bool, ethnl_string_array_t, struct netlink_ext_ack *);
429:	static int ethnl_update_bitset32_verbose(u32 *, unsigned int, struct nlattr **, ethnl_string_array_t, struct netlink_ext_ack *, bool *, const struct nlattr *);

File net/ethtool/cabletest.c:
56:	int ethnl_act_cable_test(struct sk_buff *, struct genl_info *);
307:	int ethnl_act_cable_test_tdr(struct sk_buff *, struct genl_info *);
103:	int ethnl_cable_test_alloc(struct phy_device *, u8);
360:	int ethnl_cable_test_amplitude(struct phy_device *, u8, s16);
186:	int ethnl_cable_test_fault_length(struct phy_device *, u8, u32);
153:	void ethnl_cable_test_finished(struct phy_device *);
146:	void ethnl_cable_test_free(struct phy_device *);
385:	int ethnl_cable_test_pulse(struct phy_device *, u16);
163:	int ethnl_cable_test_result(struct phy_device *, u8, u8);
406:	int ethnl_cable_test_step(struct phy_device *, u32, u32, u32);
228:	static int ethnl_act_cable_test_tdr_cfg(const struct nlattr *, struct genl_info *, struct phy_tdr_config *);
19:	static int ethnl_cable_test_started(struct phy_device *, u8);

File net/ethtool/channels.c:
112:	int ethnl_set_channels(struct sk_buff *, struct genl_info *);
57:	static int channels_fill_reply(struct sk_buff *, const struct ethnl_req_info *, const struct ethnl_reply_data *);
25:	static int channels_prepare_data(const struct ethnl_req_info *, struct ethnl_reply_data *, struct genl_info *);
44:	static int channels_reply_size(const struct ethnl_req_info *, const struct ethnl_reply_data *);

File net/ethtool/coalesce.c:
232:	int ethnl_set_coalesce(struct sk_buff *, struct genl_info *);
127:	static int coalesce_fill_reply(struct sk_buff *, const struct ethnl_req_info *, const struct ethnl_reply_data *);
60:	static int coalesce_prepare_data(const struct ethnl_req_info *, struct ethnl_reply_data *, struct genl_info *);
82:	static int coalesce_reply_size(const struct ethnl_req_info *, const struct ethnl_reply_data *);

File net/ethtool/common.c:
335:	int __ethtool_get_link(struct net_device *);
385:	int __ethtool_get_ts_info(struct net_device *, struct ethtool_ts_info *);
291:	bool convert_legacy_settings_to_link_ksettings(struct ethtool_link_ksettings *, const struct ethtool_cmd *);
374:	int ethtool_check_ops(const struct ethtool_ops *);
343:	int ethtool_get_max_rxfh_channel(struct net_device *, u32 *);
407:	void ethtool_set_ethtool_phy_ops(const struct ethtool_phy_ops *);

File net/ethtool/debug.c:
86:	int ethnl_set_debug(struct sk_buff *, struct genl_info *);
54:	static int debug_fill_reply(struct sk_buff *, const struct ethnl_req_info *, const struct ethnl_reply_data *);
24:	static int debug_prepare_data(const struct ethnl_req_info *, struct ethnl_reply_data *, struct genl_info *);
44:	static int debug_reply_size(const struct ethnl_req_info *, const struct ethnl_reply_data *);

File net/ethtool/eee.c:
134:	int ethnl_set_eee(struct sk_buff *, struct genl_info *);
81:	static int eee_fill_reply(struct sk_buff *, const struct ethnl_req_info *, const struct ethnl_reply_data *);
27:	static int eee_prepare_data(const struct ethnl_req_info *, struct ethnl_reply_data *, struct genl_info *);
46:	static int eee_reply_size(const struct ethnl_req_info *, const struct ethnl_reply_data *);

File net/ethtool/features.c:
211:	int ethnl_set_features(struct sk_buff *, struct genl_info *);
86:	static int features_fill_reply(struct sk_buff *, const struct ethnl_req_info *, const struct ethnl_reply_data *);
36:	static int features_prepare_data(const struct ethnl_req_info *, struct ethnl_reply_data *, struct genl_info *);
54:	static int features_reply_size(const struct ethnl_req_info *, const struct ethnl_reply_data *);
157:	static int features_send_reply(struct net_device *, struct genl_info *, const unsigned long *, const unsigned long *, const unsigned long *, const unsigned long *, bool);

File net/ethtool/ioctl.c:
427:	int __ethtool_get_link_ksettings(struct net_device *, struct ethtool_link_ksettings *);
2681:	int dev_ethtool(struct net *, struct ifreq *);
334:	void ethtool_convert_legacy_u32_to_link_mode(unsigned long *, u32);
343:	bool ethtool_convert_link_mode_to_legacy_u32(u32 *, const unsigned long *);
319:	void ethtool_intersect_link_masks(struct ethtool_link_ksettings *, struct ethtool_link_ksettings *);
40:	u32 ethtool_op_get_link(struct net_device *);
46:	int ethtool_op_get_ts_info(struct net_device *, struct ethtool_ts_info *);
2990:	struct ethtool_rx_flow_rule *ethtool_rx_flow_rule_create(const struct ethtool_rx_flow_spec_input *);
3236:	void ethtool_rx_flow_rule_destroy(struct ethtool_rx_flow_rule *);
611:	int ethtool_virtdev_set_link_ksettings(struct net_device *, const struct ethtool_link_ksettings *, u32 *, u8 *);
466:	bool ethtool_virtdev_validate_cmd(const struct ethtool_link_ksettings *);
1037:	void netdev_rss_key_fill(void *, size_t);
269:	static u32 __ethtool_get_flags(struct net_device *);
2333:	static int __ethtool_get_module_eeprom(struct net_device *, struct ethtool_eeprom *, u8 *);
2296:	static int __ethtool_get_module_info(struct net_device *, struct ethtool_modinfo *);
137:	static int __ethtool_get_sset_count(struct net_device *, int);
168:	static void __ethtool_get_strings(struct net_device *, u32, u8 *);
287:	static int __ethtool_set_flags(struct net_device *, u32);
1018:	static int ethtool_copy_validate_indir(u32 *, void *, struct ethtool_rxnfc *, u32);
2167:	static int ethtool_flash_device(struct net_device *, char *);
1506:	static int ethtool_get_any_eeprom(struct net_device *, void *, int (*)(struct net_device *, struct ethtool_eeprom *, u8 *), u32);
1764:	static int ethtool_get_channels(struct net_device *, void *);
1617:	static int ethtool_get_coalesce(struct net_device *, void *);
699:	static int ethtool_get_drvinfo(struct net_device *, void *);
2218:	static int ethtool_get_dump_data(struct net_device *, void *);
196:	static netdev_features_t ethtool_get_feature_mask(u32);
59:	static int ethtool_get_features(struct net_device *, void *);
511:	static int ethtool_get_link_ksettings(struct net_device *, void *);
2444:	static int ethtool_get_per_queue_coalesce(struct net_device *, void *, struct ethtool_per_queue_op *);
2104:	static int ethtool_get_perm_addr(struct net_device *, void *);
2046:	static int ethtool_get_phy_stats(struct net_device *, void *);
1347:	static int ethtool_get_regs(struct net_device *, char *);
1155:	static int ethtool_get_rxfh(struct net_device *, void *);
1045:	static int ethtool_get_rxfh_indir(struct net_device *, void *);
957:	static int ethtool_get_rxnfc(struct net_device *, u32, void *);
641:	static int ethtool_get_settings(struct net_device *, void *);
755:	static int ethtool_get_sset_info(struct net_device *, void *);
2003:	static int ethtool_get_stats(struct net_device *, void *);
1906:	static int ethtool_get_strings(struct net_device *, void *);
2388:	static int ethtool_get_tunable(struct net_device *, void *);
1948:	static int ethtool_phys_id(struct net_device *, void *);
812:	static int ethtool_rxnfc_copy_from_compat(struct ethtool_rxnfc *, const struct compat_ethtool_rxnfc *, size_t);
856:	static int ethtool_rxnfc_copy_from_user(struct ethtool_rxnfc *, const void *, size_t);
869:	static int ethtool_rxnfc_copy_to_compat(void *, const struct ethtool_rxnfc *, size_t, const u32 *);
898:	static int ethtool_rxnfc_copy_to_user(void *, const struct ethtool_rxnfc *, size_t, const u32 *);
1866:	static int ethtool_self_test(struct net_device *, char *);
1779:	static int ethtool_set_channels(struct net_device *, void *);
1692:	static int ethtool_set_coalesce(struct net_device *, void *);
1638:	static bool ethtool_set_coalesce_supported(struct ethtool_coalesce *, struct net_device *, struct net_device *);
1569:	static int ethtool_set_eeprom(struct net_device *, void *);
97:	static int ethtool_set_features(struct net_device *, void *);
567:	static int ethtool_set_link_ksettings(struct net_device *, void *);
2536:	static int ethtool_set_per_queue(struct net_device *, void *, u32);
2475:	static int ethtool_set_per_queue_coalesce(struct net_device *, void *, struct ethtool_per_queue_op *);
1736:	static int ethtool_set_ringparam(struct net_device *, void *);
1234:	static int ethtool_set_rxfh(struct net_device *, void *);
1093:	static int ethtool_set_rxfh_indir(struct net_device *, void *);
925:	static int ethtool_set_rxnfc(struct net_device *, u32, void *);
674:	static int ethtool_set_settings(struct net_device *, void *);
2419:	static int ethtool_set_tunable(struct net_device *, void *);
2578:	static int get_phy_tunable(struct net_device *, void *);
443:	static int load_link_ksettings_from_user(struct ethtool_link_ksettings *, const void *);
2617:	static int set_phy_tunable(struct net_device *, void *);
488:	static int store_link_ksettings_for_user(void *, const struct ethtool_link_ksettings *);

File net/ethtool/linkinfo.c:
98:	int ethnl_set_linkinfo(struct sk_buff *, struct genl_info *);
56:	static int linkinfo_fill_reply(struct sk_buff *, const struct ethnl_req_info *, const struct ethnl_reply_data *);
24:	static int linkinfo_prepare_data(const struct ethnl_req_info *, struct ethnl_reply_data *, struct genl_info *);
45:	static int linkinfo_reply_size(const struct ethnl_req_info *, const struct ethnl_reply_data *);

File net/ethtool/linkmodes.c:
380:	int ethnl_set_linkmodes(struct sk_buff *, struct genl_info *);
285:	static bool ethnl_auto_linkmodes(struct ethtool_link_ksettings *, bool, bool);
328:	static int ethnl_update_linkmodes(struct genl_info *, struct nlattr **, struct ethtool_link_ksettings *, bool *);
93:	static int linkmodes_fill_reply(struct sk_buff *, const struct ethnl_req_info *, const struct ethnl_reply_data *);
26:	static int linkmodes_prepare_data(const struct ethnl_req_info *, struct ethnl_reply_data *, struct genl_info *);
55:	static int linkmodes_reply_size(const struct ethnl_req_info *, const struct ethnl_reply_data *);

File net/ethtool/linkstate.c:
140:	static int linkstate_fill_reply(struct sk_buff *, const struct ethnl_req_info *, const struct ethnl_reply_data *);
81:	static int linkstate_prepare_data(const struct ethnl_req_info *, struct ethnl_reply_data *, struct genl_info *);
116:	static int linkstate_reply_size(const struct ethnl_req_info *, const struct ethnl_reply_data *);

File net/ethtool/netlink.c:
198:	void *ethnl_bcastmsg_put(struct sk_buff *, u8);
192:	void *ethnl_dump_put(struct sk_buff *, struct netlink_callback *, u8);
125:	int ethnl_fill_reply_header(struct sk_buff *, struct net_device *, u16);
204:	int ethnl_multicast(struct sk_buff *, struct net_device *);
48:	int ethnl_parse_header_dev_get(struct ethnl_req_info *, const struct nlattr *, struct net *, struct netlink_ext_ack *, bool);
162:	struct sk_buff *ethnl_reply_init(size_t, struct net_device *, u8, u16, struct genl_info *, void **);
649:	void ethtool_notify(struct net_device *, unsigned int, const void *);
309:	static int ethnl_default_doit(struct sk_buff *, struct genl_info *);
532:	static int ethnl_default_done(struct netlink_callback *);
379:	static int ethnl_default_dump_one(struct sk_buff *, struct net_device *, const struct ethnl_dump_ctx *, struct netlink_callback *, struct netlink_callback *);
419:	static int ethnl_default_dumpit(struct sk_buff *, struct netlink_callback *);
558:	static void ethnl_default_notify(struct net_device *, unsigned int, const void *);
269:	static int ethnl_default_parse(struct ethnl_req_info *, struct nlattr **, struct net *, const struct ethnl_request_ops *, struct netlink_ext_ack *, bool);
477:	static int ethnl_default_start(struct netlink_callback *);
935:	static int ethnl_init(void);
671:	static int ethnl_netdev_event(struct notifier_block *, unsigned long, void *);

File net/ethtool/pause.c:
145:	int ethnl_set_pause(struct sk_buff *, struct genl_info *);
104:	static int pause_fill_reply(struct sk_buff *, const struct ethnl_req_info *, const struct ethnl_reply_data *);
30:	static int pause_prepare_data(const struct ethnl_req_info *, struct ethnl_reply_data *, struct genl_info *);
80:	static int pause_put_stats(struct sk_buff *, const struct ethtool_pause_stats *);
56:	static int pause_reply_size(const struct ethnl_req_info *, const struct ethnl_reply_data *);

File net/ethtool/privflags.c:
142:	int ethnl_set_privflags(struct sk_buff *, struct genl_info *);
26:	static int ethnl_get_priv_flags_info(struct net_device *, unsigned int *, const char (**)[32]);
114:	static void privflags_cleanup_data(struct ethnl_reply_data *);
100:	static int privflags_fill_reply(struct sk_buff *, const struct ethnl_req_info *, const struct ethnl_reply_data *);
58:	static int privflags_prepare_data(const struct ethnl_req_info *, struct ethnl_reply_data *, struct genl_info *);
88:	static int privflags_reply_size(const struct ethnl_req_info *, const struct ethnl_reply_data *);

File net/ethtool/rings.c:
119:	int ethnl_set_rings(struct sk_buff *, struct genl_info *);
59:	static int rings_fill_reply(struct sk_buff *, const struct ethnl_req_info *, const struct ethnl_reply_data *);
24:	static int rings_prepare_data(const struct ethnl_req_info *, struct ethnl_reply_data *, struct genl_info *);
45:	static int rings_reply_size(const struct ethnl_req_info *, const struct ethnl_reply_data *);

File net/ethtool/strset.c:
197:	static void strset_cleanup_data(struct ethnl_reply_data *);
411:	static int strset_fill_reply(struct sk_buff *, const struct ethnl_req_info *, const struct ethnl_reply_data *);
372:	static int strset_fill_set(struct sk_buff *, const struct strset_info *, u32, bool);
349:	static int strset_fill_string(struct sk_buff *, u32, const struct strset_info *, const struct strset_info *);
156:	static int strset_parse_request(struct ethnl_req_info *, struct nlattr **, struct netlink_ext_ack *);
250:	static int strset_prepare_data(const struct ethnl_req_info *, struct ethnl_reply_data *, struct genl_info *);
210:	static int strset_prepare_set(struct strset_info *, struct net_device *, unsigned int, bool);
322:	static int strset_reply_size(const struct ethnl_req_info *, const struct ethnl_reply_data *);

File net/ethtool/tsinfo.c:
86:	static int tsinfo_fill_reply(struct sk_buff *, const struct ethnl_req_info *, const struct ethnl_reply_data *);
26:	static int tsinfo_prepare_data(const struct ethnl_req_info *, struct ethnl_reply_data *, struct genl_info *);
43:	static int tsinfo_reply_size(const struct ethnl_req_info *, const struct ethnl_reply_data *);

File net/ethtool/tunnels.c:
163:	int ethnl_tunnel_info_doit(struct sk_buff *, struct genl_info *);
240:	int ethnl_tunnel_info_dumpit(struct sk_buff *, struct netlink_callback *);
217:	int ethnl_tunnel_info_start(struct netlink_callback *);
82:	static int ethnl_tunnel_info_fill_reply(const struct ethnl_req_info *, struct sk_buff *);
36:	static ssize_t ethnl_tunnel_info_reply_size(const struct ethnl_req_info *, struct netlink_ext_ack *);

File net/ethtool/wol.c:
107:	int ethnl_set_wol(struct sk_buff *, struct genl_info *);
64:	static int wol_fill_reply(struct sk_buff *, const struct ethnl_req_info *, const struct ethnl_reply_data *);
25:	static int wol_prepare_data(const struct ethnl_req_info *, struct ethnl_reply_data *, struct genl_info *);
47:	static int wol_reply_size(const struct ethnl_req_info *, const struct ethnl_reply_data *);

File net/ipv4/af_inet.c:
461:	int __inet_bind(struct sock *, struct sockaddr *, int, u32);
609:	int __inet_stream_connect(struct socket *, struct sockaddr *, int, int, int);
735:	int inet_accept(struct socket *, struct socket *, int, bool);
438:	int inet_bind(struct socket *, struct sockaddr *, int);
1649:	int inet_ctl_sock_create(struct sock **, unsigned short, unsigned short, unsigned char, struct net *);
1575:	__be32 inet_current_timestamp(void);
558:	int inet_dgram_connect(struct socket *, struct sockaddr *, int, int);
765:	int inet_getname(struct socket *, struct sockaddr *, int);
1606:	int inet_gro_complete(struct sk_buff *, int);
1434:	struct sk_buff *inet_gro_receive(struct list_head *, struct sk_buff *);
1328:	struct sk_buff *inet_gso_segment(struct sk_buff *, netdev_features_t);
924:	int inet_ioctl(struct socket *, unsigned int, unsigned long);
196:	int inet_listen(struct socket *, int);
1595:	int inet_recv_error(struct sock *, struct msghdr *, int, int *);
839:	int inet_recvmsg(struct socket *, struct msghdr *, size_t, int);
1157:	void inet_register_protosw(struct inet_protosw *);
407:	int inet_release(struct socket *);
798:	int inet_send_prepare(struct sock *);
811:	int inet_sendmsg(struct socket *, struct msghdr *, size_t);
823:	ssize_t inet_sendpage(struct socket *, struct page *, int, size_t, int);
858:	int inet_shutdown(struct socket *, int);
1267:	int inet_sk_rebuild_header(struct sock *);
1315:	void inet_sk_set_state(struct sock *, int);
1322:	void inet_sk_state_store(struct sock *, int);
131:	void inet_sock_destruct(struct sock *);
719:	int inet_stream_connect(struct socket *, struct sockaddr *, int, int);
1204:	void inet_unregister_protosw(struct inet_protosw *);
1675:	unsigned long snmp_fold_field(void *, int);
1669:	u64 snmp_get_cpu_field(void *, int, int);
176:	static int inet_autobind(struct sock *);
1002:	static int inet_compat_ioctl(struct socket *, unsigned int, unsigned long);
982:	static int inet_compat_routing_ioctl(struct sock *, unsigned int, struct compat_rtentry *);
248:	static int inet_create(struct net *, struct socket *, int, int);
1939:	static int inet_init(void);
1837:	static int inet_init_net(struct net *);
1219:	static int inet_sk_reselect_saddr(struct sock *);
581:	static long inet_wait_for_connect(struct sock *, long, int);
1642:	static int ipip_gro_complete(struct sk_buff *, int);
1556:	static struct sk_buff *ipip_gro_receive(struct list_head *, struct sk_buff *);
1425:	static struct sk_buff *ipip_gso_segment(struct sk_buff *, netdev_features_t);
1812:	static void ipv4_mib_exit_net(struct net *);
1759:	static int ipv4_mib_init_net(struct net *);
1915:	static int ipv4_offload_init(void);

File net/ipv4/arp.c:
523:	struct sk_buff *arp_create(int, int, __be32, struct net_device *, __be32, const unsigned char *, const unsigned char *, const unsigned char *);
1278:	void arp_ifdown(struct net_device *);
1295:	void arp_init(void);
1179:	int arp_ioctl(struct net *, unsigned int, void *);
186:	int arp_mc_map(__be32, u8 *, struct net_device *, int);
322:	void arp_send(int, int, __be32, struct net_device *, __be32, const unsigned char *, const unsigned char *, const unsigned char *);
638:	void arp_xmit(struct sk_buff *);
222:	static int arp_constructor(struct neighbour *);
293:	static void arp_error_report(struct neighbour *, struct sk_buff *);
1345:	static void arp_format_neigh_entry(struct seq_file *, struct neighbour *);
210:	static u32 arp_hash(const void *, const struct net_device *, __u32 *);
395:	static int arp_ignore(struct in_device *, __be32, __be32);
1119:	static int arp_invalidate(struct net_device *, __be32);
933:	static int arp_is_multicast(const void *);
217:	static bool arp_key_eq(const struct neighbour *, const void *);
1435:	static void arp_net_exit(struct net *);
1427:	static int arp_net_init(struct net *);
1245:	static int arp_netdev_event(struct notifier_block *, unsigned long, void *);
677:	static int arp_process(struct net *, struct sock *, struct sk_buff *);
942:	static int arp_rcv(struct sk_buff *, struct net_device *, struct net_device *, struct packet_type *);
1154:	static int arp_req_delete(struct net *, struct arpreq *, struct net_device *);
1097:	static int arp_req_get(struct arpreq *, struct net_device *);
1024:	static int arp_req_set(struct net *, struct arpreq *, struct net_device *);
300:	static void arp_send_dst(int, int, __be32, struct net_device *, __be32, const unsigned char *, const unsigned char *, const unsigned char *, struct dst_entry *);
1391:	static int arp_seq_show(struct seq_file *, void *);
1408:	static void *arp_seq_start(struct seq_file *, loff_t *);
332:	static void arp_solicit(struct neighbour *, struct sk_buff *);
630:	static int arp_xmit_finish(struct net *, struct sock *, struct sk_buff *);
928:	static void parp_redo(struct sk_buff *);

File net/ipv4/bpf_tcp_ca.c:
147:	u64 bpf_tcp_send_ack(u64, u64, u64, u64, u64);
97:	static int bpf_tcp_ca_btf_struct_access(struct bpf_verifier_log *, const struct btf_type *, int, int, enum bpf_access_type, u32 *);
225:	static int bpf_tcp_ca_check_member(const struct btf_type *, const struct btf_member *);
165:	static const struct bpf_func_proto *bpf_tcp_ca_get_func_proto(enum bpf_func_id, const struct bpf_prog *);
31:	static int bpf_tcp_ca_init(struct btf *);
186:	static int bpf_tcp_ca_init_member(const struct btf_type *, const struct btf_member *, void *, const void *);
75:	static bool bpf_tcp_ca_is_valid_access(int, int, enum bpf_access_type, const struct bpf_prog *, struct bpf_insn_access_aux *);
233:	static int bpf_tcp_ca_reg(void *);
238:	static void bpf_tcp_ca_unreg(void *);

File net/ipv4/cipso_ipv4.c:
297:	int cipso_v4_cache_add(const unsigned char *, const struct netlbl_lsm_secattr *);
194:	void cipso_v4_cache_invalidate(void);
382:	int cipso_v4_doi_add(struct cipso_v4_doi *, struct netlbl_audit *);
464:	void cipso_v4_doi_free(struct cipso_v4_doi *);
552:	struct cipso_v4_doi *cipso_v4_doi_getdef(u32);
576:	void cipso_v4_doi_putdef(struct cipso_v4_doi *);
510:	int cipso_v4_doi_remove(u32, struct netlbl_audit *);
601:	int cipso_v4_doi_walk(u32 *, int (*)(struct cipso_v4_doi *, void *), void *);
1718:	void cipso_v4_error(struct sk_buff *, int, u32);
2083:	int cipso_v4_getattr(const unsigned char *, struct netlbl_lsm_secattr *);
1499:	unsigned char *cipso_v4_optptr(const struct sk_buff *);
2068:	void cipso_v4_req_delattr(struct request_sock *);
1914:	int cipso_v4_req_setattr(struct request_sock *, const struct cipso_v4_doi *, const struct netlbl_lsm_secattr *);
2240:	int cipso_v4_skbuff_delattr(struct sk_buff *);
2162:	int cipso_v4_skbuff_setattr(struct sk_buff *, const struct cipso_v4_doi *, const struct netlbl_lsm_secattr *);
2045:	void cipso_v4_sock_delattr(struct sock *);
2135:	int cipso_v4_sock_getattr(struct sock *, struct netlbl_lsm_secattr *);
1829:	int cipso_v4_sock_setattr(struct sock *, const struct cipso_v4_doi *, const struct netlbl_lsm_secattr *);
1548:	int cipso_v4_validate(const struct sk_buff *, unsigned char **);
234:	static int cipso_v4_cache_check(const unsigned char *, u32, struct netlbl_lsm_secattr *);
132:	static void cipso_v4_cache_entry_free(struct cipso_v4_map_cache_entry *);
1979:	static int cipso_v4_delopt(struct ip_options_rcu **);
491:	static void cipso_v4_doi_free_rcu(struct callback_head *);
1760:	static int cipso_v4_genopt(unsigned char *, const struct cipso_v4_doi *, const struct netlbl_lsm_secattr *, u32);
2282:	static int cipso_v4_init(void);
149:	static u32 cipso_v4_map_cache_hash(const unsigned char *, u32);
1229:	static int cipso_v4_parsetag_rbm(const struct cipso_v4_doi *, const unsigned char *, struct netlbl_lsm_secattr *);
1411:	static int cipso_v4_parsetag_rng(const struct cipso_v4_doi *, const unsigned char *, struct netlbl_lsm_secattr *);

File net/ipv4/datagram.c:
20:	int __ip4_datagram_connect(struct sock *, struct sockaddr *, int);
85:	int ip4_datagram_connect(struct sock *, struct sockaddr *, int);
100:	void ip4_datagram_release_cb(struct sock *);

File net/ipv4/devinet.c:
150:	struct net_device *__ip_dev_find(struct net *, __be32, bool);
2757:	void devinet_init(void);
1009:	int devinet_ioctl(struct net *, unsigned int, struct ifreq *);
234:	void in_dev_finish_destroy(struct in_device *);
331:	int inet_addr_onlink(struct in_device *, __be32, __be32);
1423:	__be32 inet_confirm_addr(struct net *, struct in_device *, __be32, __be32, int);
604:	struct in_ifaddr *inet_ifa_byprefix(struct in_device *, __be32, __be32);
181:	struct in_ifaddr *inet_lookup_ifaddr_rcu(struct net *, __be32);
2087:	void inet_netconf_notify_devconf(struct net *, int, int, int, struct ipv4_devconf *);
1301:	__be32 inet_select_addr(const struct net_device *, __be32, int);
588:	struct in_device *inetdev_by_index(struct net *, int);
1451:	int register_inetaddr_notifier(struct notifier_block *);
1463:	int register_inetaddr_validator_notifier(struct notifier_block *);
1457:	int unregister_inetaddr_notifier(struct notifier_block *);
1469:	int unregister_inetaddr_validator_notifier(struct notifier_block *);
2553:	static int __devinet_sysctl_register(struct net *, char *, int, struct ipv4_devconf *);
348:	static void __inet_del_ifa(struct in_device *, struct in_ifaddr **, int, struct nlmsghdr *, u32);
472:	static int __inet_insert_ifa(struct in_ifaddr *, struct nlmsghdr *, u32, struct netlink_ext_ack *);
697:	static void check_lifetime(struct work_struct *);
1371:	static __be32 confirm_addr_indev(struct in_device *, __be32, __be32, int);
2369:	static int devinet_conf_proc(struct ctl_table *, int, void *, size_t *, loff_t *);
2727:	static void devinet_exit_net(struct net *);
2642:	static int devinet_init_net(struct net *);
2421:	static int devinet_sysctl_forward(struct ctl_table *, int, void *, size_t *, loff_t *);
2602:	static int devinet_sysctl_register(struct in_device *);
1773:	static int in_dev_dump_addr(struct sk_buff *, struct netlink_callback *, int, struct inet_fill_args *, struct in_device *, struct in_device *);
298:	static void in_dev_rcu_put(struct callback_head *);
1801:	static int inet_dump_ifaddr(struct sk_buff *, struct netlink_callback *);
1649:	static int inet_fill_ifaddr(struct sk_buff *, struct in_ifaddr *, struct inet_fill_args *);
1929:	static int inet_fill_link_af(struct sk_buff *, const struct net_device *, u32);
2324:	static void inet_forward_change(struct net *);
1918:	static size_t inet_get_link_af_size(const struct net_device *, u32);
1247:	static int inet_gifconf(struct net_device *, char *, int, int);
136:	static void inet_hash_remove(struct in_ifaddr *);
2219:	static int inet_netconf_dump_devconf(struct sk_buff *, struct netlink_callback *);
2027:	static int inet_netconf_fill_devconf(struct sk_buff *, int, struct ipv4_devconf *, u32, u32, int, unsigned int, int);
2159:	static int inet_netconf_get_devconf(struct sk_buff *, struct nlmsghdr *, struct netlink_ext_ack *);
221:	static void inet_rcu_free_ifa(struct callback_head *);
644:	static int inet_rtm_deladdr(struct sk_buff *, struct nlmsghdr *, struct netlink_ext_ack *);
928:	static int inet_rtm_newaddr(struct sk_buff *, struct nlmsghdr *, struct netlink_ext_ack *);
563:	static int inet_set_ifa(struct in_ifaddr *, struct net_device *, struct net_device *);
1982:	static int inet_set_link_af(struct net_device *, const struct nlattr *);
1716:	static int inet_valid_dump_ifaddr_req(const struct nlmsghdr *, struct inet_fill_args *, struct net **, struct sock *, struct netlink_callback *);
1953:	static int inet_validate_link_af(const struct net_device *, const struct nlattr *);
1479:	static void inetdev_changename(struct net_device *, struct in_device *, struct in_device *);
304:	static void inetdev_destroy(struct in_device *);
1521:	static int inetdev_event(struct notifier_block *, unsigned long, void *);
252:	static struct in_device *inetdev_init(struct net_device *);
618:	static int ip_mc_autojoin_config(bool, const struct in_ifaddr *, struct net *, const struct in_ifaddr *, struct net *);
2464:	static int ipv4_doint_and_flush(struct ctl_table *, int, void *, size_t *, loff_t *);
823:	static struct in_ifaddr *rtm_to_ifaddr(struct net *, struct nlmsghdr *, __u32 *, __u32 *, struct netlink_ext_ack *);
1885:	static void rtmsg_ifa(int, struct in_ifaddr *, struct nlmsghdr *, u32);
799:	static void set_ifa_lifetime(struct in_ifaddr *, __u32, __u32);

File net/ipv4/fib_frontend.c:
1092:	void fib_add_ifaddr(struct in_ifaddr *);
270:	__be32 fib_compute_spec_dst(struct sk_buff *);
1165:	void fib_del_ifaddr(struct in_ifaddr *, struct in_ifaddr *);
183:	void fib_flush(struct net *);
111:	struct fib_table *fib_get_table(struct net *, u32);
677:	int fib_gw_from_via(struct fib_config *, struct nlattr *, struct netlink_ext_ack *);
308:	bool fib_info_nh_uses_dev(struct fib_info *, const struct net_device *);
1137:	void fib_modify_prefix_metric(struct in_ifaddr *, u32);
75:	struct fib_table *fib_new_table(struct net *, u32);
151:	int fib_unmerge(struct net *);
421:	int fib_validate_source(struct sk_buff *, __be32, __be32, u8, int, struct net_device *, struct in_device *, u32 *);
242:	unsigned int inet_addr_type(struct net *, __be32);
260:	unsigned int inet_addr_type_dev_table(struct net *, const struct net_device *, __be32);
236:	unsigned int inet_addr_type_table(struct net *, __be32, u32);
248:	unsigned int inet_dev_addr_type(struct net *, const struct net_device *, __be32);
1614:	void ip_fib_init(void);
613:	int ip_rt_ioctl(struct net *, unsigned int, struct rtentry *);
893:	int ip_valid_fib_dump_req(struct net *, const struct nlmsghdr *, struct fib_dump_filter *, struct netlink_callback *);
343:	static int __fib_validate_source(struct sk_buff *, __be32, __be32, u8, int, struct net_device *, int, struct in_device *, u32 *);
1414:	static int fib_inetaddr_event(struct notifier_block *, unsigned long, void *);
1052:	static void fib_magic(int, int, __be32, int, struct in_ifaddr *, u32);
1602:	static void fib_net_exit(struct net *);
1576:	static int fib_net_init(struct net *);
1445:	static int fib_netdev_event(struct notifier_block *, unsigned long, void *);
967:	static int inet_dump_fib(struct sk_buff *, struct netlink_callback *);
838:	static int inet_rtm_delroute(struct sk_buff *, struct nlmsghdr *, struct netlink_ext_ack *);
868:	static int inet_rtm_newroute(struct sk_buff *, struct nlmsghdr *, struct netlink_ext_ack *);
1542:	static void ip_fib_net_exit(struct net *);
1356:	static void nl_fib_input(struct sk_buff *);
1321:	static void nl_fib_lookup(struct net *, struct fib_result_nl *);
468:	static int rtentry_to_fib_config(struct net *, int, struct rtentry *, struct fib_config *);
721:	static int rtm_to_fib_config(struct net *, struct sk_buff *, struct nlmsghdr *, struct fib_config *, struct netlink_ext_ack *);

File net/ipv4/fib_notifier.c:
12:	int call_fib4_notifier(struct notifier_block *, enum fib_event_type, struct fib_notifier_info *);
20:	int call_fib4_notifiers(struct net *, enum fib_event_type, struct fib_notifier_info *);
70:	void fib4_notifier_exit(struct net *);
56:	int fib4_notifier_init(struct net *);
37:	static int fib4_dump(struct net *, struct notifier_block *, struct netlink_ext_ack *);
30:	static unsigned int fib4_seq_read(struct net *);

File net/ipv4/fib_rules.c:
80:	int __fib_lookup(struct net *, struct flowi4 *, struct fib_result *, unsigned int);
107:	int fib4_rule_action(struct fib_rule *, struct flowi *, int, struct fib_lookup_arg *);
57:	bool fib4_rule_default(const struct fib_rule *);
176:	int fib4_rule_match(struct fib_rule *, struct flowi *, int);
143:	bool fib4_rule_suppress(struct fib_rule *, int, struct fib_lookup_arg *);
69:	int fib4_rules_dump(struct net *, struct notifier_block *, struct netlink_ext_ack *);
432:	void fib4_rules_exit(struct net *);
409:	int fib4_rules_init(struct net *);
75:	unsigned int fib4_rules_seq_read(struct net *);
310:	static int fib4_rule_compare(struct fib_rule *, struct fib_rule_hdr *, struct nlattr **);
224:	static int fib4_rule_configure(struct fib_rule *, struct sk_buff *, struct fib_rule_hdr *, struct nlattr **, struct netlink_ext_ack *);
287:	static int fib4_rule_delete(struct fib_rule *);
338:	static int fib4_rule_fill(struct fib_rule *, struct sk_buff *, struct fib_rule_hdr *);
370:	static void fib4_rule_flush_cache(struct fib_rules_ops *);
363:	static size_t fib4_rule_nlmsg_payload(struct fib_rule *);

File net/ipv4/fib_semantics.c:
1702:	int fib_add_nexthop(struct sk_buff *, const struct fib_nh_common *, int, u8, u32);
1229:	int fib_check_nh(struct net *, struct fib_nh *, u32, u8, struct netlink_ext_ack *);
1383:	struct fib_info *fib_create_info(struct fib_config *, struct netlink_ext_ack *);
1775:	int fib_dump_info(struct sk_buff *, u32, u32, int, struct fib_rt_info *, unsigned int);
1326:	__be32 fib_info_update_nhc_saddr(struct net *, struct fib_nh_common *, unsigned char);
992:	bool fib_metrics_match(struct fib_config *, struct fib_info *);
1630:	int fib_nexthop_info(struct sk_buff *, const struct fib_nh_common *, u8, unsigned char *, bool);
573:	int fib_nh_common_init(struct net *, struct fib_nh_common *, struct nlattr *, u16, void *, gfp_t, struct netlink_ext_ack *);
209:	void fib_nh_common_release(struct fib_nh_common *);
611:	int fib_nh_init(struct net *, struct fib_nh *, struct fib_config *, int, struct netlink_ext_ack *);
866:	int fib_nh_match(struct net *, struct fib_config *, struct fib_info *, struct netlink_ext_ack *);
221:	void fib_nh_release(struct net *, struct fib_nh *);
1931:	void fib_nhc_update_mtu(struct fib_nh_common *, u32, u32);
260:	void fib_release_info(struct fib_info *);
1341:	__be32 fib_result_prefsrc(struct net *, struct fib_result *);
2215:	void fib_select_multipath(struct fib_result *, int);
2247:	void fib_select_path(struct net *, struct fib_result *, struct flowi4 *, const struct sk_buff *);
1869:	int fib_sync_down_addr(struct net_device *, __be32);
1979:	int fib_sync_down_dev(struct net_device *, unsigned long, bool);
1959:	void fib_sync_mtu(struct net_device *, u32);
2128:	int fib_sync_up(struct net_device *, unsigned char);
248:	void free_fib_info(struct fib_info *);
431:	int ip_fib_check_default(__be32, struct net_device *);
503:	void rtmsg_fib(int, __be32, struct fib_alias *, int, u32, const struct nl_info *, unsigned int);
1736:	static int fib_add_multipath(struct sk_buff *, struct fib_info *);
1100:	static int fib_check_nh_v4_gw(struct net *, struct fib_nh *, u32, u8, struct netlink_ext_ack *);
1032:	static int fib_check_nh_v6_gw(struct net *, struct fib_nh *, u32, struct netlink_ext_ack *);
539:	static int fib_detect_death(struct fib_info *, int, struct fib_info **, int *, int);
399:	static struct fib_info *fib_find_info(struct fib_info *);
367:	static struct fib_info *fib_find_info_nh(struct net *, const struct fib_config *);
680:	static int fib_get_nhs(struct fib_info *, struct rtnexthop *, int, struct fib_config *, struct netlink_ext_ack *);
2189:	static bool fib_good_nh(const struct fib_nh *);
1253:	static struct hlist_head *fib_info_hash_alloc(int);
1263:	static void fib_info_hash_free(struct hlist_head *, int);
1274:	static void fib_info_hash_move(struct hlist_head *, struct hlist_head *, unsigned int);
791:	static void fib_rebalance(struct fib_info *);
2046:	static void fib_select_default(const struct flowi4 *, struct fib_result *);
231:	static void free_fib_info_rcu(struct callback_head *);
190:	static void rt_fibinfo_free_cpus(struct rtable **);

File net/ipv4/fib_trie.c:
1038:	void fib_alias_hw_flags_set(struct net *, const struct fib_rt_info *);
2215:	void fib_free_table(struct fib_table *);
2116:	void fib_info_notify_update(struct net *, struct nl_info *);
1374:	bool fib_lookup_good_nhc(const struct fib_nh_common *, int, const struct flowi4 *);
2184:	int fib_notify(struct net *, struct notifier_block *, struct netlink_ext_ack *);
3010:	void fib_proc_exit(struct net *);
2986:	int fib_proc_init(struct net *);
1661:	int fib_table_delete(struct net *, struct fib_table *, struct fib_config *, struct netlink_ext_ack *);
2306:	int fib_table_dump(struct fib_table *, struct sk_buff *, struct netlink_callback *, struct fib_dump_filter *);
1974:	int fib_table_flush(struct net *, struct fib_table *, bool);
1905:	void fib_table_flush_external(struct fib_table *);
1168:	int fib_table_insert(struct net *, struct fib_table *, struct fib_config *, struct netlink_ext_ack *);
1395:	int fib_table_lookup(struct fib_table *, const struct flowi4 *, struct fib_result *, int);
2350:	void fib_trie_init(void);
2361:	struct fib_table *fib_trie_table(u32, struct fib_table *);
1846:	struct fib_table *fib_trie_unmerge(struct fib_table *);
293:	static void __alias_free_mem(struct callback_head *);
2059:	static void __fib_info_notify_update(struct net *, struct fib_table *, struct nl_info *);
307:	static void __node_free_rcu(struct callback_head *);
2203:	static void __trie_free_rcu(struct callback_head *);
981:	static struct fib_alias *fib_find_alias(struct hlist_head *, u8, u8, u32, u32, bool);
1011:	static struct fib_alias *fib_find_matching_alias(struct net *, const struct fib_rt_info *);
1112:	static int fib_insert_alias(struct trie *, struct key_vector *, struct key_vector *, struct fib_alias *, struct fib_alias *, t_key);
1062:	static int fib_insert_node(struct trie *, struct key_vector *, struct fib_alias *, t_key);
1630:	static void fib_notify_alias_delete(struct net *, u32, struct hlist_head *, struct fib_alias *, struct netlink_ext_ack *);
1599:	static void fib_remove_alias(struct trie *, struct key_vector *, struct key_vector *, struct fib_alias *);
2865:	static void *fib_route_seq_next(struct seq_file *, void *, loff_t *);
2917:	static int fib_route_seq_show(struct seq_file *, void *);
2839:	static void *fib_route_seq_start(struct seq_file *, loff_t *);
1788:	static void fib_trie_free(struct fib_table *);
2405:	static struct key_vector *fib_trie_get_next(struct fib_trie_iter *);
2658:	static void *fib_trie_seq_next(struct seq_file *, void *, loff_t *);
2748:	static int fib_trie_seq_show(struct seq_file *, void *);
2651:	static void *fib_trie_seq_start(struct seq_file *, loff_t *);
2698:	static void fib_trie_seq_stop(struct seq_file *, void *);
2587:	static int fib_triestat_seq_show(struct seq_file *, void *);
2220:	static int fn_trie_dump_leaf(struct fib_table *, struct sk_buff *, struct netlink_callback *, struct fib_dump_filter *, struct key_vector *, struct key_vector *);
631:	static struct key_vector *halve(struct trie *, struct key_vector *);
535:	static struct key_vector *inflate(struct trie *, struct key_vector *);
1731:	static struct key_vector *leaf_walk_rcu(struct key_vector **, t_key);
416:	static void put_child(struct key_vector *, unsigned long, struct key_vector *);
506:	static struct key_vector *replace(struct trie *, struct key_vector *, struct key_vector *);
846:	static struct key_vector *resize(struct trie *, struct key_vector *);
488:	static void tnode_free(struct key_vector *);
375:	static struct key_vector *tnode_new(t_key, int, int);
2474:	static void trie_collect_stats(struct trie *, struct trie_stat *);
2506:	static void trie_show_stats(struct seq_file *, struct trie_stat *);
2547:	static void trie_show_usage(struct seq_file *, const struct trie_use_stats *);
445:	static void update_children(struct key_vector *);
707:	static unsigned char update_suffix(struct key_vector *);

File net/ipv4/gre_offload.c:
236:	static int gre_gro_complete(struct sk_buff *, int);
116:	static struct sk_buff *gre_gro_receive(struct list_head *, struct sk_buff *);
14:	static struct sk_buff *gre_gso_segment(struct sk_buff *, netdev_features_t);
274:	static int gre_offload_init(void);

File net/ipv4/icmp.c:
591:	void __icmp_send(struct sk_buff *, int, int, __be32, const struct ip_options *);
1208:	int icmp_err(struct sk_buff *, u32);
246:	bool icmp_global_allow(void);
1383:	int icmp_init(void);
782:	void icmp_ndo_send(struct sk_buff *, int, int, __be32);
340:	void icmp_out_count(struct net *, unsigned char);
1060:	int icmp_rcv(struct sk_buff *);
1183:	void ip_icmp_error_rfc4884(const struct sk_buff *, struct sock_ee_data_rfc4884 *, int, int);
1051:	static bool icmp_discard(struct sk_buff *);
992:	static bool icmp_echo(struct sk_buff *);
350:	static int icmp_glue_bits(void *, char *, int, int, int, struct sk_buff *);
366:	static void icmp_push_reply(struct icmp_bxm *, struct flowi4 *, struct ipcm_cookie *, struct rtable **);
964:	static bool icmp_redirect(struct sk_buff *);
401:	static void icmp_reply(struct icmp_bxm *, struct sk_buff *);
480:	static struct rtable *icmp_route_lookup(struct net *, struct flowi4 *, struct sk_buff *, const struct iphdr *, __be32, u8, u32, int, int, struct icmp_bxm *);
1308:	static void icmp_sk_exit(struct net *);
1318:	static int icmp_sk_init(struct net *);
815:	static void icmp_socket_deliver(struct sk_buff *, u32);
1019:	static bool icmp_timestamp(struct sk_buff *);
851:	static bool icmp_unreach(struct sk_buff *);
313:	static bool icmpv4_xrlim_allow(struct net *, struct rtable *, struct flowi4 *, int, int);
1149:	static bool ip_icmp_error_rfc4884_validate(const struct sk_buff *, int);

File net/ipv4/igmp.c:
1666:	void __ip_mc_dec_group(struct in_device *, __be32, gfp_t);
1475:	void __ip_mc_inc_group(struct in_device *, __be32, gfp_t);
3069:	int igmp_mc_init(void);
1066:	int igmp_rcv(struct sk_buff *);
2696:	int ip_check_mc_rcu(struct in_device *, __be32, __be32, u8);
1611:	int ip_mc_check_igmp(struct sk_buff *);
1796:	void ip_mc_destroy_dev(struct in_device *);
1724:	void ip_mc_down(struct in_device *);
2670:	void ip_mc_drop_socket(struct sock *);
2575:	int ip_mc_gsfget(struct sock *, struct group_filter *, struct __kernel_sockaddr_storage *);
1481:	void ip_mc_inc_group(struct in_device *, __be32);
1760:	void ip_mc_init_dev(struct in_device *);
2214:	int ip_mc_join_group(struct sock *, struct ip_mreqn *);
2222:	int ip_mc_join_group_ssm(struct sock *, struct ip_mreqn *, unsigned int);
2248:	int ip_mc_leave_group(struct sock *, struct ip_mreqn *);
2517:	int ip_mc_msfget(struct sock *, struct ip_msfilter *, struct ip_msfilter *, int *);
2432:	int ip_mc_msfilter(struct sock *, struct ip_msfilter *, int);
1708:	void ip_mc_remap(struct in_device *);
2622:	int ip_mc_sf_allow(struct sock *, __be32, __be32, int, int);
2296:	int ip_mc_source(int, int, struct sock *, struct ip_mreq_source *, int);
1698:	void ip_mc_unmap(struct in_device *);
1775:	void ip_mc_up(struct in_device *);
1427:	static void ____ip_mc_inc_group(struct in_device *, __be32, unsigned int, gfp_t);
1283:	static void __igmp_group_dropped(struct ip_mc_list *, gfp_t);
2162:	static int __ip_mc_join_group(struct sock *, struct ip_mreqn *, unsigned int);
457:	static struct sk_buff *add_grec(struct sk_buff *, struct ip_mc_list *, int, int, int);
432:	static struct sk_buff *add_grhead(struct sk_buff *, struct ip_mc_list *, int, struct igmpv3_grec **, unsigned int);
223:	static void igmp_gq_start_timer(struct in_device *);
794:	static void igmp_gq_timer_expire(struct timer_list *);
1326:	static void igmp_group_added(struct ip_mc_list *);
938:	static bool igmp_heard_query(struct in_device *, struct sk_buff *, int);
823:	static void igmp_ifc_event(struct in_device *);
237:	static void igmp_ifc_start_timer(struct in_device *, int);
803:	static void igmp_ifc_timer_expire(struct timer_list *);
2807:	static void *igmp_mc_seq_next(struct seq_file *, void *, loff_t *);
2828:	static int igmp_mc_seq_show(struct seq_file *, void *);
2800:	static void *igmp_mc_seq_start(struct seq_file *, loff_t *);
2818:	static void igmp_mc_seq_stop(struct seq_file *, void *);
2936:	static struct ip_sf_list *igmp_mcf_get_idx(loff_t, struct seq_file *, struct seq_file *);
2908:	static struct ip_sf_list *igmp_mcf_get_next(struct ip_sf_list *, struct seq_file *, struct ip_sf_list *, struct seq_file *);
2952:	static void *igmp_mcf_seq_next(struct seq_file *, void *, loff_t *);
2976:	static int igmp_mcf_seq_show(struct seq_file *, void *);
2945:	static void *igmp_mcf_seq_start(struct seq_file *, loff_t *);
2963:	static void igmp_mcf_seq_stop(struct seq_file *, void *);
245:	static void igmp_mod_timer(struct ip_mc_list *, int);
3034:	static void igmp_net_exit(struct net *);
3003:	static int igmp_net_init(struct net *);
3047:	static int igmp_netdev_event(struct notifier_block *, unsigned long, void *);
722:	static int igmp_send_report(struct in_device *, struct ip_mc_list *, int);
214:	static void igmp_start_timer(struct ip_mc_list *, int);
202:	static void igmp_stop_timer(struct ip_mc_list *);
833:	static void igmp_timer_expire(struct timer_list *);
1169:	static void igmpv3_add_delrec(struct in_device *, struct ip_mc_list *, gfp_t);
1253:	static void igmpv3_clear_delrec(struct in_device *);
1211:	static void igmpv3_del_delrec(struct in_device *, struct ip_mc_list *);
346:	static struct sk_buff *igmpv3_newpack(struct net_device *, unsigned int);
649:	static void igmpv3_send_cr(struct in_device *);
584:	static int igmpv3_send_report(struct in_device *, struct ip_mc_list *);
417:	static int igmpv3_sendpack(struct sk_buff *);
167:	static void ip_ma_put(struct ip_mc_list *);
2073:	static int ip_mc_add_src(struct in_device *, __be32 *, int, int, __be32 *, int);
1487:	static int ip_mc_check_iphdr(struct sk_buff *);
2142:	static void ip_mc_clear_src(struct ip_mc_list *);
1852:	static int ip_mc_del1_src(struct ip_mc_list *, int, __be32 *);
1901:	static int ip_mc_del_src(struct in_device *, __be32 *, int, int, __be32 *, int);
1817:	static struct in_device *ip_mc_find_dev(struct net *, struct ip_mreqn *);
2228:	static int ip_mc_leave_src(struct sock *, struct ip_mc_socklist *, struct in_device *);
1632:	static void ip_mc_rejoin_groups(struct in_device *);
1571:	static __sum16 ip_mc_validate_checksum(struct sk_buff *);
270:	static int is_in(struct ip_mc_list *, struct ip_sf_list *, int, int, int);
1996:	static void sf_markstate(struct ip_mc_list *);
2010:	static int sf_setstate(struct ip_mc_list *);
133:	static int unsolicited_report_interval(struct in_device *);

File net/ipv4/inet_connection_sock.c:
463:	struct sock *inet_csk_accept(struct sock *, int, int *, bool);
1062:	void inet_csk_addr2sockaddr(struct sock *, struct sockaddr *);
563:	void inet_csk_clear_xmit_timers(struct sock *);
829:	struct sock *inet_csk_clone_lock(const struct sock *, const struct request_sock *, const gfp_t);
996:	struct sock *inet_csk_complete_hashdance(struct sock *, struct sock *, struct request_sock *, bool);
575:	void inet_csk_delete_keepalive_timer(struct sock *);
876:	void inet_csk_destroy_sock(struct sock *);
354:	int inet_csk_get_port(struct sock *, unsigned short);
549:	void inet_csk_init_xmit_timers(struct sock *, void (*)(struct timer_list *), void (*)(struct timer_list *), void (*)(struct timer_list *));
915:	int inet_csk_listen_start(struct sock *, int);
1016:	void inet_csk_listen_stop(struct sock *);
904:	void inet_csk_prepare_forced_close(struct sock *);
971:	struct sock *inet_csk_reqsk_queue_add(struct sock *, struct request_sock *, struct sock *);
708:	bool inet_csk_reqsk_queue_drop(struct sock *, struct request_sock *);
720:	void inet_csk_reqsk_queue_drop_and_put(struct sock *, struct request_sock *);
801:	void inet_csk_reqsk_queue_hash_add(struct sock *, struct request_sock *, unsigned long);
581:	void inet_csk_reset_keepalive_timer(struct sock *, unsigned long);
623:	struct dst_entry *inet_csk_route_child_sock(const struct sock *, struct sock *, const struct request_sock *);
587:	struct dst_entry *inet_csk_route_req(const struct sock *, struct flowi4 *, const struct request_sock *);
299:	void inet_csk_update_fastreuse(struct inet_bind_bucket *, struct sock *);
1099:	struct dst_entry *inet_csk_update_pmtu(struct sock *, u32);
120:	void inet_get_local_port_range(struct net *, int *, int *);
111:	bool inet_rcv_saddr_any(const struct sock *);
91:	bool inet_rcv_saddr_equal(const struct sock *, const struct sock *, bool);
680:	int inet_rtx_syn_ack(const struct sock *, struct request_sock *);
947:	static void inet_child_forget(struct sock *, struct request_sock *, struct sock *);
133:	static int inet_csk_bind_conflict(const struct sock *, const struct inet_bind_bucket *, bool, bool);
182:	static struct inet_bind_hashbucket *inet_csk_find_open_port(struct sock *, struct inet_bind_bucket **, int *);
1073:	static struct dst_entry *inet_csk_rebuild_route(struct sock *, struct flowi *);
415:	static int inet_csk_wait_for_connect(struct sock *, long);
34:	static bool ipv6_rcv_saddr_equal(const struct in6_addr *, const struct in6_addr *, __be32, __be32, bool, bool, bool, bool);
691:	static bool reqsk_queue_unlink(struct request_sock *);
727:	static void reqsk_timer_handler(struct timer_list *);

File net/ipv4/inet_fragment.c:
187:	void fqdir_exit(struct fqdir *);
167:	int fqdir_init(struct fqdir **, struct inet_frags *, struct net *);
254:	void inet_frag_destroy(struct inet_frag_queue *);
322:	struct inet_frag_queue *inet_frag_find(struct fqdir *, void *);
194:	void inet_frag_kill(struct inet_frag_queue *);
545:	struct sk_buff *inet_frag_pull_head(struct inet_frag_queue *);
344:	int inet_frag_queue_insert(struct inet_frag_queue *, struct sk_buff *, int, int);
232:	unsigned int inet_frag_rbtree_purge(struct rb_root *);
477:	void inet_frag_reasm_finish(struct inet_frag_queue *, struct sk_buff *, void *, bool);
408:	void *inet_frag_reasm_prepare(struct inet_frag_queue *, struct sk_buff *, struct sk_buff *);
115:	void inet_frags_fini(struct inet_frags *);
102:	int inet_frags_init(struct inet_frags *);
148:	static void fqdir_work_fn(struct work_struct *);
296:	static struct inet_frag_queue *inet_frag_create(struct fqdir *, void *, struct inet_frag_queue **);
221:	static void inet_frag_destroy_rcu(struct callback_head *);
128:	static void inet_frags_free_cb(void *, void *);

File net/ipv4/inet_hashtables.c:
633:	int __inet_hash(struct sock *, struct sock *);
714:	int __inet_hash_connect(struct inet_timewait_death_row *, struct sock *, u32, int (*)(struct inet_timewait_death_row *, struct sock *, __u16, struct inet_timewait_sock **));
131:	int __inet_inherit_port(const struct sock *, struct sock *);
392:	struct sock *__inet_lookup_established(struct net *, struct inet_hashinfo *, const __be32, const __be16, const __be32, const u16, const int, const int);
329:	struct sock *__inet_lookup_listener(struct net *, struct inet_hashinfo *, struct sk_buff *, int, const __be32, __be16, const __be32, const unsigned short, const int, const int);
64:	struct inet_bind_bucket *inet_bind_bucket_create(struct kmem_cache *, struct net *, struct inet_bind_hashbucket *, const unsigned short, int);
87:	void inet_bind_bucket_destroy(struct kmem_cache *, struct inet_bind_bucket *);
95:	void inet_bind_hash(struct sock *, struct inet_bind_bucket *, const unsigned short);
561:	bool inet_ehash_insert(struct sock *, struct sock *, bool *);
899:	int inet_ehash_locks_alloc(struct inet_hashinfo *);
594:	bool inet_ehash_nolisten(struct sock *, struct sock *, bool *);
668:	int inet_hash(struct sock *);
829:	int inet_hash_connect(struct inet_timewait_death_row *, struct sock *);
867:	void inet_hashinfo2_init(struct inet_hashinfo *, const char *, unsigned long, int, unsigned long, unsigned long);
884:	int inet_hashinfo2_init_mod(struct inet_hashinfo *);
841:	void inet_hashinfo_init(struct inet_hashinfo *);
123:	void inet_put_port(struct sock *);
682:	void inet_unhash(struct sock *);
386:	void sock_edemux(struct sk_buff *);
372:	void sock_gen_put(struct sock *);
441:	static int __inet_check_established(struct inet_timewait_death_row *, struct sock *, __u16, struct inet_timewait_sock **);
106:	static void __inet_put_port(struct sock *);
519:	static bool inet_ehash_lookup_by_sk(struct sock *, struct hlist_nulls_head *);
31:	static u32 inet_ehashfn(const struct net *, const __be32, const __u16, const __be32, const __be16);
179:	static struct inet_listen_hashbucket *inet_lhash2_bucket_sk(struct inet_hashinfo *, struct sock *);
278:	static struct sock *inet_lhash2_lookup(struct net *, struct sk_buff *, int, const __be32, __be16, const __be32, const unsigned short, const int, const int, struct inet_listen_hashbucket *, struct inet_listen_hashbucket *);
610:	static int inet_reuseport_add_sock(struct sock *, struct inet_listen_hashbucket *);
856:	static void init_hashinfo_lhash2(struct inet_hashinfo *);

File net/ipv4/inet_timewait_sock.c:
220:	void __inet_twsk_schedule(struct inet_timewait_sock *, int, bool);
155:	struct inet_timewait_sock *inet_twsk_alloc(const struct sock *, struct inet_timewait_death_row *, const int);
29:	void inet_twsk_bind_unhash(struct inet_timewait_sock *, struct inet_hashinfo *);
212:	void inet_twsk_deschedule_put(struct inet_timewait_sock *);
66:	void inet_twsk_free(struct inet_timewait_sock *);
101:	void inet_twsk_hashdance(struct inet_timewait_sock *, struct sock *, struct inet_hashinfo *);
257:	void inet_twsk_purge(struct inet_hashinfo *, int);
77:	void inet_twsk_put(struct inet_timewait_sock *);
44:	static void inet_twsk_kill(struct inet_timewait_sock *);
144:	static void tw_timer_handler(struct timer_list *);

File net/ipv4/inetpeer.c:
182:	struct inet_peer *inet_getpeer(struct inet_peer_base *, const struct inetpeer_addr *, int);
74:	void inet_initpeers(void);
57:	void inet_peer_base_init(struct inet_peer_base *);
273:	bool inet_peer_xrlim_allow(struct inet_peer *, int);
243:	void inet_putpeer(struct inet_peer *);
296:	void inetpeer_invalidate_tree(struct inet_peer_base *);
147:	static void inet_peer_gc(struct inet_peer_base *, struct inet_peer **, unsigned int);
141:	static void inetpeer_free_rcu(struct callback_head *);
98:	static struct inet_peer *lookup(const struct inetpeer_addr *, struct inet_peer_base *, unsigned int, struct inet_peer **, unsigned int *, struct rb_node **, struct rb_node ***);

File net/ipv4/ip_forward.c:
86:	int ip_forward(struct sk_buff *);
65:	static int ip_forward_finish(struct net *, struct sock *, struct sk_buff *);

File net/ipv4/ip_fragment.c:
503:	struct sk_buff *ip_check_defrag(struct net *, struct sk_buff *, u32);
474:	int ip_defrag(struct net *, struct sk_buff *, u32);
739:	void ipfrag_init(void);
96:	static void ip4_frag_free(struct inet_frag_queue *);
82:	static void ip4_frag_init(struct inet_frag_queue *, const void *);
707:	static u32 ip4_key_hashfn(const void *, u32, u32);
721:	static int ip4_obj_cmpfn(struct rhashtable_compare_arg *, const void *);
713:	static u32 ip4_obj_hashfn(const void *, u32, u32);
133:	static void ip_expire(struct timer_list *);
272:	static int ip_frag_queue(struct ipq *, struct sk_buff *);
402:	static int ip_frag_reasm(struct ipq *, struct sk_buff *, struct sk_buff *, struct net_device *);
247:	static int ip_frag_reinit(struct ipq *);
108:	static void ipq_put(struct ipq *);
694:	static void ipv4_frags_exit_net(struct net *);
651:	static int ipv4_frags_init_net(struct net *);
689:	static void ipv4_frags_pre_exit_net(struct net *);

File net/ipv4/ip_input.c:
148:	bool ip_call_ra_chain(struct sk_buff *);
612:	void ip_list_rcv(struct list_head *, struct packet_type *, struct net_device *);
240:	int ip_local_deliver(struct sk_buff *);
187:	void ip_protocol_deliver_rcu(struct net *, struct sk_buff *, int);
530:	int ip_rcv(struct sk_buff *, struct net_device *, struct packet_type *, struct net_device *);
563:	static void ip_list_rcv_finish(struct net *, struct list_head *, struct sock *);
226:	static int ip_local_deliver_finish(struct net *, struct sock *, struct sk_buff *);
435:	static struct sk_buff *ip_rcv_core(struct sk_buff *, struct net *);
414:	static int ip_rcv_finish(struct net *, struct sock *, struct sk_buff *);
314:	static int ip_rcv_finish_core(struct net *, struct sk_buff *, struct net_device *, const struct sk_buff *, struct sock *);
603:	static void ip_sublist_rcv(struct list_head *, struct net_device *, struct net *);
544:	static void ip_sublist_rcv_finish(struct list_head *);

File net/ipv4/ip_options.c:
254:	int __ip_options_compile(struct net *, struct ip_options *, struct sk_buff *, __be32 *);
90:	int __ip_options_echo(struct net *, struct ip_options *, struct sk_buff *, const struct ip_options *);
551:	void ip_forward_options(struct sk_buff *);
44:	void ip_options_build(struct sk_buff *, struct ip_options *, __be32, struct rtable *, int);
478:	int ip_options_compile(struct net *, struct ip_options *, struct sk_buff *);
208:	void ip_options_fragment(struct sk_buff *);
525:	int ip_options_get(struct net *, struct ip_options_rcu **, sockptr_t, int);
598:	int ip_options_rcv_srr(struct sk_buff *, struct net_device *);
495:	void ip_options_undo(struct ip_options *);

File net/ipv4/ip_output.c:
99:	int __ip_local_out(struct net *, struct sock *, struct sk_buff *);
1476:	struct sk_buff *__ip_make_skb(struct sock *, struct flowi4 *, struct sk_buff_head *, struct inet_cork *);
454:	int __ip_queue_xmit(struct sock *, struct sk_buff *, struct flowi *, __u8);
1307:	int ip_append_data(struct sock *, struct flowi4 *, int (*)(void *, char *, int, int, int, struct sk_buff *), void *, int, int, struct ipcm_cookie *, struct rtable **, unsigned int);
1333:	ssize_t ip_append_page(struct sock *, struct flowi4 *, struct page *, int, size_t, int);
145:	int ip_build_and_send_pkt(struct sk_buff *, const struct sock *, __be32, __be32, struct ip_options_rcu *, u8);
773:	int ip_do_fragment(struct net *, struct sock *, struct sk_buff *, int (*)(struct net *, struct sock *, struct sk_buff *));
1611:	void ip_flush_pending_frames(struct sock *);
654:	void ip_frag_init(struct sk_buff *, unsigned int, unsigned int, unsigned int, bool, struct ip_frag_state *);
689:	struct sk_buff *ip_frag_next(struct sk_buff *, struct ip_frag_state *);
597:	void ip_fraglist_init(struct sk_buff *, struct iphdr *, unsigned int, struct ip_fraglist_iter *);
629:	void ip_fraglist_prepare(struct sk_buff *, struct ip_fraglist_iter *);
932:	int ip_generic_getfrag(void *, char *, int, int, int, struct sk_buff *);
1739:	void ip_init(void);
120:	int ip_local_out(struct net *, struct sock *, struct sk_buff *);
1616:	struct sk_buff *ip_make_skb(struct sock *, struct flowi4 *, int (*)(void *, char *, int, int, int, struct sk_buff *), void *, int, int, struct ipcm_cookie *, struct rtable **, struct inet_cork *, unsigned int);
361:	int ip_mc_output(struct net *, struct sock *, struct sk_buff *);
423:	int ip_output(struct net *, struct sock *, struct sk_buff *);
1584:	int ip_push_pending_frames(struct sock *, struct flowi4 *);
545:	int ip_queue_xmit(struct sock *, struct sk_buff *, struct flowi *);
92:	void ip_send_check(struct iphdr *);
1569:	int ip_send_skb(struct net *, struct sk_buff *);
1667:	void ip_send_unicast_reply(struct sock *, struct sk_buff *, const struct ip_options *, __be32, __be32, const struct ip_reply_arg *, unsigned int, u64);
960:	static int __ip_append_data(struct sock *, struct flowi4 *, struct sk_buff_head *, struct inet_cork *, struct page_frag *, int (*)(void *, char *, int, int, int, struct sk_buff *), void *, int, int, unsigned int);
290:	static int __ip_finish_output(struct net *, struct sock *, struct sk_buff *);
1599:	static void __ip_flush_pending_frames(struct sk_buff_head *, struct inet_cork *, struct sock *);
551:	static void ip_copy_metadata(struct sk_buff *, struct sk_buff *);
311:	static int ip_finish_output(struct net *, struct sock *, struct sk_buff *);
187:	static int ip_finish_output2(struct net *, struct sock *, struct sk_buff *);
242:	static int ip_finish_output_gso(struct net *, struct sock *, struct sk_buff *, unsigned int);
575:	static int ip_fragment(struct net *, struct sock *, struct sk_buff *, unsigned int, int (*)(struct net *, struct sock *, struct sk_buff *));
327:	static int ip_mc_finish_output(struct net *, struct sock *, struct sk_buff *);
1653:	static int ip_reply_glue_bits(void *, char *, int, int, int, struct sk_buff *);
1246:	static int ip_setup_cork(struct sock *, struct inet_cork *, struct ipcm_cookie *, struct rtable **);

File net/ipv4/ip_sockglue.c:
171:	void ip_cmsg_recv_offset(struct msghdr *, struct sock *, struct sk_buff *, int, int);
242:	int ip_cmsg_send(struct sock *, struct msghdr *, struct ipcm_cookie *, bool);
1756:	int ip_getsockopt(struct sock *, int, int, char *, int *);
405:	void ip_icmp_error(struct sock *, struct sk_buff *, int, __be16, u32, u8 *);
437:	void ip_local_error(struct sock *, int, __be32, __be16, u32);
336:	int ip_ra_control(struct sock *, unsigned char, void (*)(struct sock *));
516:	int ip_recv_error(struct sock *, struct msghdr *, int, int *);
1415:	int ip_setsockopt(struct sock *, int, int, sockptr_t, unsigned int);
600:	void ip_sock_set_freebind(struct sock *);
616:	int ip_sock_set_mtu_discover(struct sock *, int);
627:	void ip_sock_set_pktinfo(struct sock *);
608:	void ip_sock_set_recverr(struct sock *);
592:	void ip_sock_set_tos(struct sock *, int);
1383:	void ipv4_pktinfo_prepare(const struct sock *, struct sk_buff *);
579:	static void __ip_sock_set_tos(struct sock *, int);
1482:	static int compat_ip_get_mcast_msfilter(struct sock *, void *, int *, int);
866:	static int compat_ip_mcast_join_leave(struct sock *, int, sockptr_t, int);
800:	static int compat_ip_set_mcast_msfilter(struct sock *, sockptr_t, int);
698:	static int copy_group_source_from_sockptr(struct group_source_req *, sockptr_t, int);
1515:	static int do_ip_getsockopt(struct sock *, int, int, char *, int *);
889:	static int do_ip_setsockopt(struct sock *, int, sockptr_t, unsigned int, int);
721:	static int do_mcast_group_source(struct sock *, int, sockptr_t, int);
1456:	static int ip_get_mcast_msfilter(struct sock *, void *, int *, int);
844:	static int ip_mcast_join_leave(struct sock *, int, sockptr_t, int);
328:	static void ip_ra_destroy_rcu(struct callback_head *);
769:	static int ip_set_mcast_msfilter(struct sock *, sockptr_t, int);
661:	static int set_mcast_msfilter(struct sock *, int, int, int, struct __kernel_sockaddr_storage *, struct __kernel_sockaddr_storage *);

File net/ipv4/ip_tunnel_core.c:
92:	int __iptunnel_pull_header(struct sk_buff *, int, __be16, bool, bool);
1046:	void ip_tunnel_core_init(void);
433:	void ip_tunnel_get_stats64(struct net_device *, struct rtnl_link_stats64 *);
1061:	void ip_tunnel_need_metadata(void);
1074:	__be16 ip_tunnel_parse_protocol(const struct sk_buff *);
1067:	void ip_tunnel_unneed_metadata(void);
156:	int iptunnel_handle_offloads(struct sk_buff *, int);
125:	struct metadata_dst *iptunnel_metadata_reply(struct metadata_dst *, gfp_t);
50:	void iptunnel_xmit(struct sock *, struct rtable *, struct sk_buff *, __be32, __be32, __u8, __u8, __u8, __be16, bool);
407:	int skb_tunnel_check_pmtu(struct sk_buff *, struct dst_entry *, int, bool);
947:	static int ip6_tun_build_state(struct net *, struct nlattr *, unsigned int, const void *, struct lwtunnel_state **, struct netlink_ext_ack *);
1026:	static int ip6_tun_encap_nlsize(struct lwtunnel_state *);
1008:	static int ip6_tun_fill_encap_info(struct sk_buff *, struct lwtunnel_state *);
660:	static int ip_tun_build_state(struct net *, struct nlattr *, unsigned int, const void *, struct lwtunnel_state **, struct netlink_ext_ack *);
915:	static int ip_tun_cmp_encap(struct lwtunnel_state *, struct lwtunnel_state *);
729:	static void ip_tun_destroy_state(struct lwtunnel_state *);
903:	static int ip_tun_encap_nlsize(struct lwtunnel_state *);
846:	static int ip_tun_fill_encap_info(struct sk_buff *, struct lwtunnel_state *);
817:	static int ip_tun_fill_encap_opts(struct sk_buff *, struct ip_tunnel_info *, int);
786:	static int ip_tun_fill_encap_opts_erspan(struct sk_buff *, struct ip_tunnel_info *);
738:	static int ip_tun_fill_encap_opts_geneve(struct sk_buff *, struct ip_tunnel_info *);
864:	static int ip_tun_opts_nlsize(struct ip_tunnel_info *);
592:	static int ip_tun_parse_opts(struct nlattr *, struct ip_tunnel_info *, struct netlink_ext_ack *);
195:	static int iptunnel_pmtud_build_icmp(struct sk_buff *, int);
288:	static int iptunnel_pmtud_build_icmpv6(struct sk_buff *, int);

File net/ipv4/ipmr.c:
3106:	int ip_mr_init(void);
2071:	int ip_mr_input(struct sk_buff *);
1541:	int ip_mroute_getsockopt(struct sock *, int, char *, int *);
1348:	int ip_mroute_setsockopt(struct sock *, int, sockptr_t, unsigned int);
1660:	int ipmr_compat_ioctl(struct sock *, unsigned int, void *);
2232:	int ipmr_get_route(struct net *, struct sk_buff *, __be32, __be32, struct rtmsg *, u32);
1585:	int ipmr_ioctl(struct sock *, int, void *);
294:	bool ipmr_rule_default(const struct fib_rule *);
2178:	int pim_rcv_v1(struct sk_buff *);
575:	static int __pim_rcv(struct mr_table *, struct sk_buff *, unsigned int);
2340:	static int _ipmr_fill_mroute(struct mr_table *, struct sk_buff *, u32, u32, struct mr_mfc *, int, int);
629:	static int call_ipmr_mfc_entry_notifiers(struct net *, enum fib_event_type, struct mfc_cache *, u32);
619:	static int call_ipmr_vif_entry_notifiers(struct net *, enum fib_event_type, vifi_t, u32, struct vif_device *, struct vif_device *);
2411:	static void igmpmsg_netlink_event(struct mr_table *, struct sk_buff *);
1748:	static void ip_encap(struct net *, struct sk_buff *, __be32, __be32);
1925:	static void ip_mr_forward(struct net *, struct mr_table *, struct net_device *, struct sk_buff *, struct mfc_cache *, int);
703:	static void ipmr_cache_free_rcu(struct callback_head *);
1010:	static int ipmr_cache_report(struct mr_table *, struct sk_buff *, vifi_t, int);
974:	static void ipmr_cache_resolve(struct net *, struct mr_table *, struct mfc_cache *, struct mfc_cache *);
1093:	static int ipmr_cache_unresolved(struct mr_table *, vifi_t, struct sk_buff *, struct net_device *);
718:	static void ipmr_destroy_unres(struct mr_table *, struct mfc_cache *);
1719:	static int ipmr_device_event(struct notifier_block *, unsigned long, void *);
3021:	static int ipmr_dump(struct net *, struct notifier_block *, struct netlink_ext_ack *);
747:	static void ipmr_expire_process(struct timer_list *);
145:	static int ipmr_fib_lookup(struct net *, struct flowi4 *, struct mr_table **);
2296:	static int ipmr_fill_mroute(struct mr_table *, struct sk_buff *, u32, u32, struct mfc_cache *, int, int);
2731:	static bool ipmr_fill_table(struct mr_table *, struct sk_buff *);
2749:	static bool ipmr_fill_vif(struct mr_table *, u32, struct sk_buff *);
1775:	static int ipmr_forward_finish(struct net *, struct sock *, struct sk_buff *);
360:	static int ipmr_hash_cmp(struct rhashtable_compare_arg *, const void *);
425:	static bool ipmr_init_vif_indev(const struct net_device *);
1188:	static int ipmr_mfc_add(struct net *, struct mr_table *, struct mfcctl *, int, int);
1167:	static int ipmr_mfc_delete(struct mr_table *, struct mfcctl *, int);
2958:	static int ipmr_mfc_seq_show(struct seq_file *, void *);
2946:	static void *ipmr_mfc_seq_start(struct seq_file *, loff_t *);
117:	static struct mr_table *ipmr_mr_table_iter(struct net *, struct mr_table *);
3091:	static void ipmr_net_exit(struct net *);
3056:	static int ipmr_net_init(struct net *);
379:	static void ipmr_new_table_set(struct mr_table *, struct net *);
441:	static struct net_device *ipmr_new_tunnel(struct net *, struct vifctl *);
1813:	static void ipmr_queue_xmit(struct net *, struct mr_table *, int, struct sk_buff *, int);
2044:	static struct mr_table *ipmr_rt_fib_lookup(struct net *, struct sk_buff *);
2808:	static int ipmr_rtm_dumplink(struct sk_buff *, struct netlink_callback *);
2572:	static int ipmr_rtm_dumproute(struct sk_buff *, struct netlink_callback *);
2515:	static int ipmr_rtm_getroute(struct sk_buff *, struct nlmsghdr *, struct netlink_ext_ack *);
2710:	static int ipmr_rtm_route(struct sk_buff *, struct nlmsghdr *, struct netlink_ext_ack *);
2460:	static int ipmr_rtm_valid_getroute_req(struct sk_buff *, const struct nlmsghdr *, struct nlattr **, struct netlink_ext_ack *);
166:	static int ipmr_rule_action(struct fib_rule *, struct flowi *, int, struct fib_lookup_arg *);
209:	static int ipmr_rule_compare(struct fib_rule *, struct fib_rule_hdr *, struct nlattr **);
202:	static int ipmr_rule_configure(struct fib_rule *, struct sk_buff *, struct fib_rule_hdr *, struct nlattr **, struct netlink_ext_ack *);
215:	static int ipmr_rule_fill(struct fib_rule *, struct sk_buff *, struct fib_rule_hdr *);
193:	static int ipmr_rule_match(struct fib_rule *, struct flowi *, int);
283:	static int ipmr_rules_dump(struct net *, struct notifier_block *, struct netlink_ext_ack *);
270:	static void ipmr_rules_exit(struct net *);
3014:	static unsigned int ipmr_seq_read(struct net *);
786:	static void ipmr_update_thresholds(struct mr_table *, struct mr_mfc *, unsigned char *);
2916:	static int ipmr_vif_seq_show(struct seq_file *, void *);
2893:	static void *ipmr_vif_seq_start(struct seq_file *, loff_t *);
2910:	static void ipmr_vif_seq_stop(struct seq_file *, void *);
1269:	static void mroute_clean_tables(struct mr_table *, int);
2369:	static void mroute_netlink_event(struct mr_table *, struct mfc_cache *, int);
1322:	static void mrtsock_destruct(struct sock *);
2205:	static int pim_rcv(struct sk_buff *);
518:	static int reg_vif_get_iflink(const struct net_device *);
528:	static void reg_vif_setup(struct net_device *);
492:	static netdev_tx_t reg_vif_xmit(struct sk_buff *, struct net_device *);
2638:	static int rtm_to_ipmr_mfcc(struct net *, struct nlmsghdr *, struct mfcctl *, int *, struct mr_table **, struct netlink_ext_ack *);
808:	static int vif_add(struct net *, struct mr_table *, struct vifctl *, int);
644:	static int vif_delete(struct mr_table *, int, int, struct list_head *);

File net/ipv4/ipmr_base.c:
387:	int mr_dump(struct net *, struct notifier_block *, unsigned short, struct mr_table *(*)(struct net *, struct mr_table *), rwlock_t *, struct netlink_ext_ack *, int (*)(struct net *, struct notifier_block *, struct netlink_ext_ack *));
208:	int mr_fill_mroute(struct mr_table *, struct sk_buff *, struct mr_mfc *, struct rtmsg *);
93:	void *mr_mfc_find_any(struct mr_table *, int, void *);
78:	void *mr_mfc_find_any_parent(struct mr_table *, int);
64:	void *mr_mfc_find_parent(struct mr_table *, void *, int);
147:	void *mr_mfc_seq_idx(struct net *, struct mr_mfc_iter *, loff_t);
172:	void *mr_mfc_seq_next(struct seq_file *, void *, loff_t *);
344:	int mr_rtm_dumproute(struct sk_buff *, struct netlink_callback *, struct mr_table *(*)(struct net *, struct mr_table *), int (*)(struct mr_table *, struct sk_buff *, u32, u32, struct mr_mfc *, int, int), spinlock_t *, struct fib_dump_filter *);
32:	struct mr_table *mr_table_alloc(struct net *, u32, struct mr_table_ops *, void (*)(struct timer_list *), void (*)(struct mr_table *, struct net *));
289:	int mr_table_dump(struct mr_table *, struct sk_buff *, struct netlink_callback *, int (*)(struct mr_table *, struct sk_buff *, u32, u32, struct mr_mfc *, int, int), spinlock_t *, struct fib_dump_filter *);
114:	void *mr_vif_seq_idx(struct net *, struct mr_vif_iter *, loff_t);
128:	void *mr_vif_seq_next(struct seq_file *, void *, loff_t *);
9:	void vif_device_init(struct vif_device *, struct net_device *, unsigned long, unsigned char, unsigned short, unsigned short);

File net/ipv4/metrics.c:
67:	struct dst_metrics *ip_fib_metrics_init(struct net *, struct nlattr *, int, struct netlink_ext_ack *);
9:	static int ip_metrics_convert(struct net *, struct nlattr *, int, u32 *, struct netlink_ext_ack *);

File net/ipv4/netfilter.c:
20:	int ip_route_me_harder(struct net *, struct sock *, struct sk_buff *, unsigned int);
87:	int nf_ip_route(struct net *, struct dst_entry **, struct flowi *, bool);

File net/ipv4/netlink.c:
10:	int rtm_getroute_parse_ip_proto(struct nlattr *, u8 *, u8, struct netlink_ext_ack *);

File net/ipv4/nexthop.c:
626:	int fib6_check_nexthop(struct nexthop *, struct fib6_config *, struct netlink_ext_ack *);
707:	int fib_check_nexthop(struct nexthop *, u8, struct netlink_ext_ack *);
152:	struct nexthop *nexthop_find_by_id(struct net *, u32);
585:	int nexthop_for_each_fib6_nh(struct nexthop *, int (*)(struct fib6_nh *, void *), void *);
107:	void nexthop_free_rcu(struct callback_head *);
542:	struct nexthop *nexthop_select_path(int, struct nexthop *, struct nexthop *);
1993:	int register_nexthop_notifier(struct net *, struct notifier_block *);
2000:	int unregister_nexthop_notifier(struct net *, struct notifier_block *);
1046:	static void __nexthop_replace_notify(struct net *, struct nexthop *, struct nl_info *);
889:	static void __remove_nexthop(struct net *, struct nexthop *, struct nl_info *);
867:	static void __remove_nexthop_fib(struct net *, struct nexthop *);
670:	static int fib6_check_nh_list(struct nexthop *, struct nexthop *, struct netlink_ext_ack *);
525:	static bool ipv4_good_nh(const struct fib_nh *);
509:	static bool ipv6_good_nh(const struct fib6_nh *);
1448:	static struct nexthop *nexthop_add(struct net *, struct nh_config *, struct netlink_ext_ack *);
1391:	static struct nexthop *nexthop_create(struct net *, struct nh_config *, struct netlink_ext_ack *);
1240:	static struct nexthop *nexthop_create_group(struct net *, struct nh_config *);
1206:	static void nexthop_flush_dev(struct net_device *, unsigned long);
72:	static void nexthop_free_mpath(struct nexthop *, struct nexthop *);
134:	static struct nh_group *nexthop_grp_alloc(u16);
2033:	static int nexthop_init(void);
2007:	static void nexthop_net_exit(struct net *);
2015:	static int nexthop_net_init(struct net *);
359:	static void nexthop_notify(int, struct nexthop *, struct nl_info *);
437:	static int nh_check_attr_group(struct net *, struct nlattr **, struct netlink_ext_ack *);
1317:	static int nh_create_ipv4(struct net *, struct nexthop *, struct nh_info *, struct nh_config *, struct netlink_ext_ack *);
1356:	static int nh_create_ipv6(struct net *, struct nexthop *, struct nh_info *, struct nh_config *, struct netlink_ext_ack *);
224:	static int nh_fill_node(struct sk_buff *, struct nexthop *, int, u32, u32, unsigned int);
761:	static void nh_group_rebalance(struct nh_group *);
1965:	static int nh_netdev_event(struct notifier_block *, unsigned long, void *);
927:	static void nh_rt_cache_flush(struct net *, struct nexthop *, struct nexthop *);
1838:	static int nh_valid_dump_req(const struct nlmsghdr *, int *, int *, bool *, bool *, struct netlink_callback *, struct netlink_callback *);
1690:	static int nh_valid_get_del_req(struct nlmsghdr *, u32 *, struct netlink_ext_ack *);
907:	static void remove_nexthop(struct net *, struct nexthop *, struct nl_info *);
780:	static void remove_nh_grp_entry(struct net *, struct nh_grp_entry *, struct nl_info *);
1086:	static int replace_nexthop(struct net *, struct nexthop *, struct nexthop *, struct netlink_ext_ack *);
1736:	static int rtm_del_nexthop(struct sk_buff *, struct nlmsghdr *, struct netlink_ext_ack *);
1896:	static int rtm_dump_nexthop(struct sk_buff *, struct netlink_callback *);
1763:	static int rtm_get_nexthop(struct sk_buff *, struct nlmsghdr *, struct netlink_ext_ack *);
1672:	static int rtm_new_nexthop(struct sk_buff *, struct nlmsghdr *, struct netlink_ext_ack *);
1490:	static int rtm_to_nh_config(struct net *, struct sk_buff *, struct nlmsghdr *, struct nh_config *, struct netlink_ext_ack *);

File net/ipv4/ping.c:
392:	int ping_bind(struct sock *, struct sockaddr *, int);
284:	void ping_close(struct sock *, long);
637:	int ping_common_sendmsg(int, struct msghdr *, size_t, void *, size_t);
464:	void ping_err(struct sk_buff *, int, u32);
77:	int ping_get_port(struct sock *, unsigned short);
585:	int ping_getfrag(void *, char *, int, int, int, struct sk_buff *);
143:	int ping_hash(struct sock *);
1169:	void ping_init(void);
252:	int ping_init_sock(struct sock *);
1162:	void ping_proc_exit(void);
1157:	int ping_proc_init(void);
932:	int ping_queue_rcv_skb(struct sock *, struct sk_buff *);
950:	bool ping_rcv(struct sk_buff *);
842:	int ping_recvmsg(struct sock *, struct msghdr *, size_t, int, int, int *);
1074:	void *ping_seq_next(struct seq_file *, void *, loff_t *);
1056:	void *ping_seq_start(struct seq_file *, loff_t *, sa_family_t);
1088:	void ping_seq_stop(struct seq_file *, void *);
151:	void ping_unhash(struct sock *);
295:	static int ping_check_bind_addr(struct sock *, struct inet_sock *, struct sockaddr *, int);
1005:	static struct sock *ping_get_first(int, struct seq_file *, struct seq_file *);
1046:	static struct sock *ping_get_idx(struct seq_file *, loff_t);
1032:	static struct sock *ping_get_next(struct sock *, struct seq_file *, struct seq_file *);
169:	static struct sock *ping_lookup(struct sk_buff *, u16, struct net *, struct net *);
1095:	static void ping_v4_format_sock(struct sock *, struct seq_file *, int);
1147:	static void ping_v4_proc_exit_net(struct net *);
1139:	static int ping_v4_proc_init_net(struct net *);
683:	static int ping_v4_sendmsg(struct sock *, struct msghdr *, size_t);
1116:	static int ping_v4_seq_show(struct seq_file *, void *);
1069:	static void *ping_v4_seq_start(struct seq_file *, loff_t *);

File net/ipv4/proc.c:
529:	int ip_misc_proc_init(void);
343:	static void icmp_put(struct seq_file *);
317:	static void icmpmsg_put(struct seq_file *);
300:	static void icmpmsg_put_line(struct seq_file *, unsigned long *, unsigned short *, int);
517:	static void ip_proc_exit_net(struct net *);
495:	static int ip_proc_init_net(struct net *);
464:	static int netstat_seq_show(struct seq_file *, void *);
449:	static int snmp_seq_show(struct seq_file *, void *);
373:	static int snmp_seq_show_ipstats(struct seq_file *, void *);
399:	static int snmp_seq_show_tcp_udp(struct seq_file *, void *);
51:	static int sockstat_seq_show(struct seq_file *, void *);

File net/ipv4/protocol.c:
45:	int inet_add_offload(const struct net_offload *, unsigned char);
32:	int inet_add_protocol(const struct net_protocol *, unsigned char);
65:	int inet_del_offload(const struct net_offload *, unsigned char);
52:	int inet_del_protocol(const struct net_protocol *, unsigned char);

File net/ipv4/raw.c:
120:	struct sock *__raw_v4_lookup(struct net *, struct sock *, unsigned short, __be32, __be32, int, int);
927:	int raw_abort(struct sock *, int);
93:	int raw_hash_sk(struct sock *);
287:	void raw_icmp_error(struct sk_buff *, int, u32);
1131:	void raw_init(void);
207:	int raw_local_deliver(struct sk_buff *, int);
1108:	void raw_proc_exit(void);
1103:	int raw_proc_init(void);
329:	int raw_rcv(struct sock *, struct sk_buff *);
1025:	void *raw_seq_next(struct seq_file *, void *, loff_t *);
1015:	void *raw_seq_start(struct seq_file *, loff_t *);
1038:	void raw_seq_stop(struct seq_file *, void *);
109:	void raw_unhash_sk(struct sock *);
911:	static int compat_raw_ioctl(struct sock *, unsigned int, unsigned long);
716:	static int raw_bind(struct sock *, struct sockaddr *, int);
698:	static void raw_close(struct sock *, long);
708:	static void raw_destroy(struct sock *);
225:	static void raw_err(struct sock *, struct sk_buff *, u32);
1093:	static void raw_exit_net(struct net *);
970:	static struct sock *raw_get_first(struct seq_file *);
987:	static struct sock *raw_get_next(struct seq_file *, struct sock *);
468:	static int raw_getfrag(void *, char *, int, int, int, struct sk_buff *);
822:	static int raw_geticmpfilter(struct sock *, char *, int *);
873:	static int raw_getsockopt(struct sock *, int, int, char *, int *);
1084:	static int raw_init_net(struct net *);
881:	static int raw_ioctl(struct sock *, int, unsigned long);
316:	static int raw_rcv_skb(struct sock *, struct sk_buff *);
751:	static int raw_recvmsg(struct sock *, struct msghdr *, size_t, int, int, int *);
344:	static int raw_send_hdrinc(struct sock *, struct flowi4 *, struct msghdr *, size_t, struct rtable **, unsigned int, const struct sockcm_cookie *);
499:	static int raw_sendmsg(struct sock *, struct msghdr *, size_t);
1066:	static int raw_seq_show(struct seq_file *, void *);
853:	static int raw_setsockopt(struct sock *, int, int, sockptr_t, unsigned int);
804:	static int raw_sk_init(struct sock *);
1047:	static void raw_sock_seq_show(struct seq_file *, struct sock *, int);
1121:	static int raw_sysctl_init(struct net *);
169:	static int raw_v4_input(struct sk_buff *, const struct iphdr *, int);

File net/ipv4/route.c:
514:	void __ip_select_ident(struct net *, struct iphdr *, int);
3018:	int fib_dump_info_fnhe(struct sk_buff *, struct netlink_callback *, u32, struct fib_info *, int *, int, unsigned int);
1945:	int fib_multipath_hash(const struct net *, const struct flowi4 *, const struct sk_buff *, struct flow_keys *);
491:	u32 ip_idents_reserve(u32, int);
1718:	int ip_mc_validate_source(struct sk_buff *, __be32, __be32, u8, struct net_device *, struct in_device *, u32 *);
1425:	u32 ip_mtu_from_fib_result(struct fib_result *, __be32);
2330:	int ip_route_input_noref(struct sk_buff *, __be32, __be32, u8, struct net_device *);
2346:	int ip_route_input_rcu(struct sk_buff *, __be32, __be32, u8, struct net_device *, struct fib_result *);
2771:	struct rtable *ip_route_output_flow(struct net *, struct flowi4 *, const struct sock *);
2524:	struct rtable *ip_route_output_key_hash(struct net *, struct flowi4 *, const struct sk_buff *);
2549:	struct rtable *ip_route_output_key_hash_rcu(struct net *, struct flowi4 *, struct fib_result *, const struct sk_buff *);
2790:	struct rtable *ip_route_output_tunnel(struct sk_buff *, struct net_device *, struct net *, __be32 *, const struct ip_tunnel_info *, u8, bool);
2058:	int ip_route_use_hint(struct sk_buff *, __be32, __be32, u8, struct net_device *, const struct sk_buff *);
1286:	void ip_rt_get_source(u8 *, struct sk_buff *, struct rtable *);
3580:	int ip_rt_init(void);
3344:	void ip_rt_multicast_event(struct in_device *);
893:	void ip_rt_send_redirect(struct sk_buff *);
3654:	void ip_static_sysctl_init(void);
2731:	struct dst_entry *ipv4_blackhole_route(struct net *, struct dst_entry *);
1178:	void ipv4_redirect(struct sk_buff *, struct net *, int, u8);
1195:	void ipv4_sk_redirect(struct sk_buff *, struct sock *);
1124:	void ipv4_sk_update_pmtu(struct sk_buff *, struct sock *, u32);
1088:	void ipv4_update_pmtu(struct sk_buff *, struct net *, u32, int, u8);
1537:	void rt_add_uncached_list(struct rtable *);
428:	void rt_cache_flush(struct net *);
1548:	void rt_del_uncached_list(struct rtable *);
1653:	struct rtable *rt_dst_alloc(struct net_device *, unsigned int, u16, bool, bool);
1685:	struct rtable *rt_dst_clone(struct net_device *, struct rtable *);
1567:	void rt_flush_dev(struct net_device *);
532:	static void __build_flow_key(const struct net *, struct flowi4 *, const struct sock *, const struct iphdr *, int, u8, u8, u32, int);
757:	static void __ip_do_redirect(struct rtable *, struct sk_buff *, struct flowi4 *, bool);
1036:	static void __ip_rt_update_pmtu(struct rtable *, struct flowi4 *, u32);
1106:	static void __ipv4_sk_update_pmtu(struct sk_buff *, struct sock *, u32);
1813:	static int __mkroute_input(struct sk_buff *, const struct fib_result *, struct in_device *, __be32, __be32, u32);
2397:	static struct rtable *__mkroute_output(const struct fib_result *, const struct flowi4 *, int, struct net_device *, unsigned int);
566:	static void build_sk_flow_key(struct flowi4 *, const struct sock *);
1393:	static struct fib_nh_exception *find_exception(struct fib_nh_common *, __be32);
2973:	static int fnhe_dump_bucket(struct net *, struct sk_buff *, struct netlink_callback *, u32, struct fnhe_hash_bucket *, int, int *, int, unsigned int);
634:	static u32 fnhe_hashfun(__be32);
3178:	static int inet_rtm_getroute(struct sk_buff *, struct nlmsghdr *, struct netlink_ext_ack *);
3048:	static struct sk_buff *inet_rtm_getroute_build_skb(__be32, __be32, u8, __be16, __be16);
3109:	static int inet_rtm_valid_getroute_req(struct sk_buff *, const struct nlmsghdr *, struct nlattr **, struct netlink_ext_ack *);
842:	static void ip_do_redirect(struct dst_entry *, struct sock *, struct sk_buff *);
960:	static int ip_error(struct sk_buff *);
1787:	static void ip_handle_martian_source(struct net_device *, struct in_device *, struct sk_buff *, __be32, __be32);
1908:	static void ip_multipath_l3_keys(const struct sk_buff *, struct flow_keys *);
2120:	static int ip_route_input_slow(struct sk_buff *, __be32, __be32, u8, struct net_device *, struct fib_result *);
1267:	static int ip_rt_bug(struct net *, struct sock *, struct sk_buff *);
397:	static void ip_rt_do_proc_exit(struct net *);
365:	static int ip_rt_do_proc_init(struct net *);
1072:	static void ip_rt_update_pmtu(struct dst_entry *, struct sock *, struct sk_buff *, u32, bool);
462:	static void ipv4_confirm_neigh(const struct dst_entry *, const void *);
149:	static u32 *ipv4_cow_metrics(struct dst_entry *, unsigned long);
1326:	static unsigned int ipv4_default_advmss(const struct dst_entry *);
1211:	static struct dst_entry *ipv4_dst_check(struct dst_entry *, u32);
1559:	static void ipv4_dst_destroy(struct dst_entry *);
3562:	static void ipv4_inetpeer_exit(struct net *);
3551:	static int ipv4_inetpeer_init(struct net *);
1256:	static void ipv4_link_failure(struct sk_buff *);
1335:	static unsigned int ipv4_mtu(const struct dst_entry *);
859:	static struct dst_entry *ipv4_negative_advice(struct dst_entry *);
433:	static struct neighbour *ipv4_neigh_lookup(const struct dst_entry *, struct sk_buff *, const void *);
1228:	static void ipv4_send_dest_unreach(struct sk_buff *);
3355:	static int ipv4_sysctl_rtcache_flush(struct ctl_table *, int, void *, size_t *, loff_t *);
340:	static int rt_acct_proc_show(struct seq_file *, void *);
1500:	static bool rt_cache_route(struct fib_nh_common *, struct rtable *);
209:	static void *rt_cache_seq_next(struct seq_file *, void *, loff_t *);
236:	static int rt_cache_seq_open(struct inode *, struct file *);
219:	static int rt_cache_seq_show(struct seq_file *, void *);
202:	static void *rt_cache_seq_start(struct seq_file *, loff_t *);
215:	static void rt_cache_seq_stop(struct seq_file *, void *);
265:	static void *rt_cpu_seq_next(struct seq_file *, void *, loff_t *);
327:	static int rt_cpu_seq_open(struct inode *, struct file *);
285:	static int rt_cpu_seq_show(struct seq_file *, void *);
249:	static void *rt_cpu_seq_start(struct seq_file *, loff_t *);
2839:	static int rt_fill_info(struct net *, __be32, __be32, struct rtable *, u32, struct flowi4 *, struct sk_buff *, u32, u32, unsigned int);
3539:	static int rt_genid_init(struct net *);
1594:	static void rt_set_nexthop(struct rtable *, __be32, const struct fib_result *, struct fib_nh_exception *, struct fib_info *, u32, const bool, u16);
3523:	static void sysctl_route_net_exit(struct net *);
3493:	static int sysctl_route_net_init(struct net *);
658:	static void update_or_create_fnhe(struct fib_nh_common *, __be32, __be32, u32, bool, unsigned long);

File net/ipv4/syncookies.c:
190:	int __cookie_v4_check(const struct iphdr *, const struct tcphdr *, u32);
161:	u32 __cookie_v4_init_sequence(const struct iphdr *, const struct tcphdr *, u16 *);
270:	bool cookie_ecn_ok(const struct tcp_options_received *, const struct net *, const struct dst_entry *);
65:	u64 cookie_init_timestamp(struct request_sock *, u64);
285:	struct request_sock *cookie_tcp_reqsk_alloc(const struct request_sock_ops *, struct sock *, struct sk_buff *);
241:	bool cookie_timestamp_decode(const struct net *, struct tcp_options_received *);
323:	struct sock *cookie_v4_check(struct sock *, struct sk_buff *);
178:	__u32 cookie_v4_init_sequence(const struct sk_buff *, __u16 *);
201:	struct sock *tcp_get_cookie_sock(struct sock *, struct sk_buff *, struct request_sock *, struct dst_entry *, u32);
48:	static u32 cookie_hash(__be32, __be32, __be16, __be16, u32, int);

File net/ipv4/sysctl_net_ipv4.c:
204:	static int ipv4_fwd_update_priority(struct ctl_table *, int, void *, size_t *, loff_t *);
73:	static int ipv4_local_port_range(struct ctl_table *, int, void *, size_t *, loff_t *);
169:	static int ipv4_ping_group_range(struct ctl_table *, int, void *, size_t *, loff_t *);
108:	static int ipv4_privileged_ports(struct ctl_table *, int, void *, size_t *, loff_t *);
1448:	static void ipv4_sysctl_exit_net(struct net *);
1402:	static int ipv4_sysctl_init_net(struct net *);
256:	static int proc_allowed_congestion_control(struct ctl_table *, int, void *, size_t *, loff_t *);
452:	static int proc_fib_multipath_hash_policy(struct ctl_table *, int, void *, size_t *, loff_t *);
240:	static int proc_tcp_available_congestion_control(struct ctl_table *, int, void *, size_t *, loff_t *);
434:	static int proc_tcp_available_ulp(struct ctl_table *, int, void *, size_t *, loff_t *);
469:	static int proc_tcp_compression_ports(struct ctl_table *, int, void *, size_t *, loff_t *);
220:	static int proc_tcp_congestion_control(struct ctl_table *, int, void *, size_t *, loff_t *);
387:	static int proc_tcp_early_demux(struct ctl_table *, int, void *, size_t *, loff_t *);
293:	static int proc_tcp_fastopen_key(struct ctl_table *, int, void *, size_t *, loff_t *);
419:	static int proc_tfo_blackhole_detect_timeout(struct ctl_table *, int, void *, size_t *, loff_t *);
403:	static int proc_udp_early_demux(struct ctl_table *, int, void *, size_t *, loff_t *);
275:	static int sscanf_key(char *, __le32 *);
1463:	static int sysctl_ipv4_init(void);

File net/ipv4/tcp.c:
971:	ssize_t do_tcp_sendpages(struct sock *, struct page *, int, size_t, int);
869:	struct sk_buff *sk_stream_alloc_skb(struct sock *, int, gfp_t, bool);
4166:	int tcp_abort(struct sock *, int);
4046:	bool tcp_alloc_md5sig_pool(void);
2498:	bool tcp_check_oom(struct sock *, int);
1538:	void tcp_cleanup_rbuf(struct sock *, int);
2512:	void tcp_close(struct sock *, long);
2735:	int tcp_disconnect(struct sock *, int);
4139:	void tcp_done(struct sock *);
330:	void tcp_enter_memory_pressure(struct sock *);
1138:	void tcp_free_fastopen_req(struct tcp_sock *);
3476:	void tcp_get_info(struct sock *, struct tcp_info *);
4071:	struct tcp_md5sig_pool *tcp_get_md5sig_pool(void);
3625:	struct sk_buff *tcp_get_timestamping_opt_stats(const struct sock *, const struct sk_buff *);
3989:	int tcp_getsockopt(struct sock *, int, int, char *, int *);
4238:	void tcp_init(void);
413:	void tcp_init_sock(struct sock *);
609:	int tcp_ioctl(struct sock *, int, unsigned long);
345:	void tcp_leave_memory_pressure(struct sock *);
4124:	int tcp_md5_hash_key(struct tcp_md5sig_pool *, const struct tcp_md5sig_key *);
4085:	int tcp_md5_hash_skb_data(struct tcp_md5sig_pool *, const struct sk_buff *, unsigned int);
1738:	int tcp_mmap(struct file *, struct socket *, struct vm_area_struct *);
2473:	int tcp_orphan_count_sum(void);
1701:	int tcp_peek_len(struct socket *);
507:	__poll_t tcp_poll(struct file *, struct socket *, poll_table *);
710:	void tcp_push(struct sock *, int, int, int, int);
1629:	int tcp_read_sock(struct sock *, read_descriptor_t *, sk_read_actor_t);
2095:	int tcp_recvmsg(struct sock *, struct msghdr *, size_t, int, int, int *);
945:	int tcp_send_mss(struct sock *, int *, int);
1446:	int tcp_sendmsg(struct sock *, struct msghdr *, size_t);
1193:	int tcp_sendmsg_locked(struct sock *, struct msghdr *, size_t);
1125:	int tcp_sendpage(struct sock *, struct page *, int, size_t, int);
1113:	int tcp_sendpage_locked(struct sock *, struct page *, int, size_t, int);
1708:	int tcp_set_rcvlowat(struct sock *, int);
2359:	void tcp_set_state(struct sock *, int);
3444:	int tcp_setsockopt(struct sock *, int, int, sockptr_t, unsigned int);
2453:	void tcp_shutdown(struct sock *, int);
2996:	void tcp_sock_set_cork(struct sock *, bool);
3118:	int tcp_sock_set_keepcnt(struct sock *, int);
3095:	int tcp_sock_set_keepidle(struct sock *, int);
3073:	int tcp_sock_set_keepidle_locked(struct sock *, int);
3106:	int tcp_sock_set_keepintvl(struct sock *, int);
3020:	void tcp_sock_set_nodelay(struct sock *);
3045:	void tcp_sock_set_quickack(struct sock *, int);
3053:	int tcp_sock_set_syncnt(struct sock *, int);
3065:	void tcp_sock_set_user_timeout(struct sock *, u32);
780:	ssize_t tcp_splice_read(struct socket *, loff_t *, struct pipe_inode_info *, size_t, unsigned int);
2713:	void tcp_write_queue_purge(struct sock *);
4006:	static void __tcp_alloc_md5sig_pool(void);
2982:	static void __tcp_sock_set_cork(struct sock *, bool);
3686:	static int do_tcp_getsockopt(struct sock *, int, char *, int *, int);
3133:	static int do_tcp_setsockopt(struct sock *, int, sockptr_t, unsigned int, int);
4213:	static int set_thash_entries(char *);
666:	static void skb_entail(struct sock *, struct sk_buff *);
3456:	static void tcp_get_info_chrono_stats(const struct tcp_sock *, struct tcp_info *);
2066:	static int tcp_inq_hint(struct sock *);
2487:	static void tcp_orphan_update(struct timer_list *);
1507:	static int tcp_peek_sndq(struct sock *, struct msghdr *, int);
1594:	static struct sk_buff *tcp_recv_skb(struct sock *, u32, u32 *);
2001:	static void tcp_recv_timestamp(struct msghdr *, const struct sock *, struct scm_timestamping_internal *);
961:	static void tcp_remove_empty_skb(struct sock *, struct sk_buff *);
2908:	static int tcp_repair_options_est(struct sock *, sockptr_t, unsigned int);
2696:	static void tcp_rtx_queue_purge(struct sock *);
744:	static int tcp_splice_data_recv(read_descriptor_t *, struct sk_buff *, unsigned int, size_t);
466:	static void tcp_tx_timestamp(struct sock *, u16);
1854:	static int tcp_zerocopy_receive(struct sock *, struct tcp_zerocopy_receive *);

File net/ipv4/tcp_bpf.c:
13:	int __tcp_bpf_recvmsg(struct sock *, struct sk_psock *, struct msghdr *, int, int);
635:	void tcp_bpf_clone(const struct sock *, struct sock *);
615:	struct proto *tcp_bpf_get_proto(struct sock *, struct sk_psock *);
214:	int tcp_bpf_sendmsg_redir(struct sock *, struct sk_msg *, u32, int);
93:	static int bpf_tcp_ingress(struct sock *, struct sk_psock *, struct sk_msg *, u32, int);
146:	static int tcp_bpf_push(struct sock *, struct sk_msg *, u32, int, bool);
268:	static int tcp_bpf_recvmsg(struct sock *, struct msghdr *, size_t, int, int, int *);
314:	static int tcp_bpf_send_verdict(struct sock *, struct sk_psock *, struct sk_msg *, int *, int);
420:	static int tcp_bpf_sendmsg(struct sock *, struct msghdr *, size_t);
508:	static int tcp_bpf_sendpage(struct sock *, struct page *, int, size_t, int);
233:	static bool tcp_bpf_stream_read(const struct sock *);
597:	static int tcp_bpf_v4_build_proto(void);

File net/ipv4/tcp_comp.c:
767:	void comp_setup_strp(struct sock *, struct tcp_comp_context *);
728:	bool comp_stream_read(const struct sock *);
869:	void tcp_cleanup_compression(struct sock *);
892:	int tcp_comp_init(void);
808:	void tcp_init_compression(struct sock *);
80:	bool tcp_syn_comp_enabled(const struct sock *);
88:	bool tcp_synack_comp_enabled(const struct sock *, const struct inet_request_sock *);
741:	static void comp_data_ready(struct sock *);
748:	static void comp_queue(struct strparser *, struct sk_buff *);
757:	static int comp_read_size(struct strparser *, struct sk_buff *);
444:	static struct sk_buff *comp_wait_data(struct sock *, int, long, int *);
166:	static int memcopy_from_iter(struct sock *, struct iov_iter *, int);
186:	static int memcopy_to_msg(struct sock *, int);
223:	static int tcp_comp_compress_to_msg(struct sock *, int);
857:	static void tcp_comp_context_free(struct callback_head *);
568:	static int tcp_comp_decompress(struct sock *, struct sk_buff *, int);
299:	static int tcp_comp_push(struct sock *, int, int);
256:	static int tcp_comp_push_msg(struct sock *, struct sk_msg *, int);
670:	static int tcp_comp_recvmsg(struct sock *, struct msghdr *, size_t, int, int, int *);
528:	static int tcp_comp_rx_context_init(struct tcp_comp_context *);
372:	static int tcp_comp_sendmsg(struct sock *, struct msghdr *, size_t);
107:	static int tcp_comp_tx_context_init(struct tcp_comp_context *);
784:	static void tcp_comp_write_space(struct sock *);
321:	static int wait_on_pending_writer(struct sock *, long *);

File net/ipv4/tcp_cong.c:
157:	void tcp_assign_congestion_control(struct sock *);
24:	struct tcp_congestion_ops *tcp_ca_find(const char *);
54:	struct tcp_congestion_ops *tcp_ca_find_key(u32);
121:	u32 tcp_ca_get_key_by_name(struct net *, const char *, bool *);
140:	char *tcp_ca_get_name_by_key(u32, char *);
211:	void tcp_cleanup_congestion_control(struct sock *);
410:	void tcp_cong_avoid_ai(struct tcp_sock *, u32, u32);
288:	void tcp_get_allowed_congestion_control(char *, size_t);
259:	void tcp_get_available_congestion_control(char *, size_t);
277:	void tcp_get_default_congestion_control(struct net *, char *);
177:	void tcp_init_congestion_control(struct sock *);
70:	int tcp_register_congestion_control(struct tcp_congestion_ops *);
436:	void tcp_reno_cong_avoid(struct sock *, u32, u32);
455:	u32 tcp_reno_ssthresh(struct sock *);
463:	u32 tcp_reno_undo_cwnd(struct sock *);
309:	int tcp_set_allowed_congestion_control(char *);
352:	int tcp_set_congestion_control(struct sock *, const char *, bool, bool);
221:	int tcp_set_default_congestion_control(struct net *, const char *);
396:	u32 tcp_slow_start(struct tcp_sock *, u32);
104:	void tcp_unregister_congestion_control(struct tcp_congestion_ops *);
37:	static struct tcp_congestion_ops *tcp_ca_find_autoload(const char *, struct net *);
251:	static int tcp_congestion_default(void);
191:	static void tcp_reinit_congestion_control(struct sock *, const struct tcp_congestion_ops *);

File net/ipv4/tcp_cubic.c:
455:	static void bictcp_acked(struct sock *, const struct ack_sample *);
331:	static void bictcp_cong_avoid(struct sock *, u32, u32);
149:	static void bictcp_cwnd_event(struct sock *, enum tcp_ca_event);
136:	static void bictcp_init(struct sock *);
348:	static u32 bictcp_recalc_ssthresh(struct sock *);
365:	static void bictcp_state(struct sock *, u8);
495:	static int cubictcp_register(void);
530:	static void cubictcp_unregister(void);
393:	static void hystart_update(struct sock *, u32);

File net/ipv4/tcp_fastopen.c:
593:	void tcp_fastopen_active_detect_blackhole(struct sock *, bool);
505:	void tcp_fastopen_active_disable(struct sock *);
567:	void tcp_fastopen_active_disable_ofo_check(struct sock *);
528:	bool tcp_fastopen_active_should_disable(struct sock *);
186:	void tcp_fastopen_add_skb(struct sock *, struct sk_buff *);
428:	bool tcp_fastopen_cookie_check(struct sock *, u16 *, struct tcp_fastopen_cookie *);
54:	void tcp_fastopen_ctx_destroy(struct net *);
460:	bool tcp_fastopen_defer_connect(struct sock *, int *);
44:	void tcp_fastopen_destroy_cipher(struct sock *);
111:	int tcp_fastopen_get_cipher(struct net *, struct inet_connection_sock *, u64 *);
13:	void tcp_fastopen_init_key_once(struct net *);
69:	int tcp_fastopen_reset_cipher(struct net *, struct sock *, void *, void *);
361:	struct sock *tcp_try_fastopen(struct sock *, struct sk_buff *, struct request_sock *, struct tcp_fastopen_cookie *, const struct dst_entry *);
227:	static int tcp_fastopen_cookie_gen_check(struct sock *, struct request_sock *, struct sk_buff *, struct tcp_fastopen_cookie *, struct tcp_fastopen_cookie *);
255:	static struct sock *tcp_fastopen_create_child(struct sock *, struct sk_buff *, struct request_sock *);
36:	static void tcp_fastopen_ctx_free(struct callback_head *);
312:	static bool tcp_fastopen_queue_check(struct sock *);

File net/ipv4/tcp_input.c:
127:	void clean_acked_data_disable(struct inet_connection_sock *);
119:	void clean_acked_data_enable(struct inet_connection_sock *, void (*)(struct sock *, u32));
134:	void clean_acked_data_flush(void);
6665:	struct request_sock *inet_reqsk_alloc(const struct request_sock_ops *, struct sock *, bool);
2038:	void tcp_clear_retrans(struct tcp_sock *);
6778:	int tcp_conn_request(struct request_sock_ops *, const struct tcp_request_sock_ops *, struct sock *, struct sk_buff *);
2567:	void tcp_cwnd_reduction(struct sock *, int, int);
4937:	void tcp_data_ready(struct sock *);
2611:	void tcp_enter_cwr(struct sock *);
2094:	void tcp_enter_loss(struct sock *);
289:	void tcp_enter_quickack_mode(struct sock *, unsigned int);
2726:	void tcp_enter_recovery(struct sock *, bool);
4295:	void tcp_fin(struct sock *);
5944:	void tcp_finish_connect(struct sock *, struct sk_buff *);
6751:	u16 tcp_get_syncookie_mss(struct request_sock_ops *, const struct tcp_request_sock_ops *, struct sock *, struct tcphdr *);
929:	__u32 tcp_init_cwnd(const struct tcp_sock *, const struct dst_entry *);
5915:	void tcp_init_transfer(struct sock *, int, struct sk_buff *);
568:	void tcp_initialize_rcv_mss(struct sock *);
1045:	void tcp_mark_skb_lost(struct sock *, struct sk_buff *);
3539:	bool tcp_oow_rate_limited(struct net *, const struct sk_buff *, int, u32 *);
4151:	const u8 *tcp_parse_md5sig_option(const struct tcphdr *);
3973:	void tcp_parse_options(const struct net *, const struct sk_buff *, struct tcp_options_received *, int, struct tcp_fastopen_cookie *);
5077:	void tcp_rbtree_insert(struct rb_root *, struct sk_buff *);
5735:	void tcp_rcv_established(struct sock *, struct sk_buff *);
669:	void tcp_rcv_space_adjust(struct sock *);
6335:	int tcp_rcv_state_process(struct sock *, struct sk_buff *);
3084:	void tcp_rearm_rto(struct sock *);
4254:	void tcp_reset(struct sock *);
4885:	int tcp_send_rcvq(struct sock *, struct msghdr *, size_t);
2688:	void tcp_simple_retransmit(struct sock *);
1486:	int tcp_skb_shift(struct sk_buff *, struct sk_buff *, int, int);
3061:	void tcp_synack_rtt_meas(struct sock *, struct request_sock *);
5414:	static void __tcp_ack_snd_check(struct sock *, int);
337:	static void __tcp_ecn_check_ce(struct sock *, const struct sk_buff *);
3682:	static int tcp_ack(struct sock *, const struct sk_buff *, int);
3370:	static void tcp_ack_probe(struct sock *);
3141:	static void tcp_ack_tstamp(struct sock *, struct sk_buff *, u32);
3012:	static bool tcp_ack_update_rtt(struct sock *, const int, long, long, long, struct rate_sample *);
1998:	static void tcp_add_reno_sack(struct sock *, int, bool);
1209:	static bool tcp_check_dsack(struct sock *, const struct sk_buff *, struct tcp_sack_block_wire *, int, u32, struct tcp_sacktag_state *);
992:	static void tcp_check_sack_reordering(struct sock *, const u32, const int);
5393:	static void tcp_check_space(struct sock *);
5491:	static void tcp_check_urg(struct sock *, const struct tcphdr *, const struct tcphdr *);
3163:	static int tcp_clean_rtx_queue(struct sock *, u32, u32, struct tcp_sacktag_state *, bool);
5104:	static void tcp_collapse(struct sock *, struct sk_buff_head *, struct rb_root *, struct sk_buff *, struct sk_buff *, u32, u32);
5209:	static void tcp_collapse_ofo_queue(struct sock *);
5059:	static struct sk_buff *tcp_collapse_one(struct sock *, struct sk_buff *, struct sk_buff_head *, struct rb_root *);
4950:	static void tcp_data_queue(struct sock *, struct sk_buff *);
4724:	static void tcp_data_queue_ofo(struct sock *, struct sk_buff *);
4397:	static void tcp_dsack_extend(struct sock *, u32, u32);
6611:	static void tcp_ecn_create_request(struct request_sock *, const struct sk_buff *, const struct sock *, const struct dst_entry *);
742:	static void tcp_event_data_recv(struct sock *, struct sk_buff *);
2878:	static void tcp_fastretrans_alert(struct sock *, const u32, int, int *, int *);
474:	static void tcp_grow_window(struct sock *, const struct sk_buff *);
2847:	static void tcp_identify_packet_loss(struct sock *, int *);
504:	static void tcp_init_buffer_space(struct sock *);
2294:	static void tcp_mark_head_lost(struct sock *, int, int);
1256:	static int tcp_match_skb_to_sack(struct sock *, struct sk_buff *, u32, u32);
226:	static void tcp_measure_rcv_mss(struct sock *, const struct sk_buff *);
3667:	static u32 tcp_newly_delivered(struct sock *, u32, int);
4657:	static void tcp_ofo_queue(struct sock *);
3873:	static void tcp_parse_fastopen_option(int, const unsigned char *, bool, struct tcp_fastopen_cookie *, bool);
3929:	static u16 tcp_parse_mss_option(const struct tcphdr *, u16);
3607:	static void tcp_process_tlp_ack(struct sock *, u32, int);
5267:	static bool tcp_prune_ofo_queue(struct sock *);
5312:	static int tcp_prune_queue(struct sock *);
4868:	static int tcp_queue_rcv(struct sock *, struct sk_buff *, bool *);
5974:	static bool tcp_rcv_fastopen_synack(struct sock *, struct sk_buff *, struct tcp_fastopen_cookie *);
6296:	static void tcp_rcv_synrecv_state_fastopen(struct sock *);
6064:	static int tcp_rcv_synsent_state_process(struct sock *, struct sk_buff *, const struct tcphdr *);
6717:	static void tcp_reqsk_record_syn(const struct sock *, struct request_sock *, const struct sk_buff *);
797:	static void tcp_rtt_estimator(struct sock *, long);
4470:	static void tcp_sack_compress_send_ack(struct sock *);
4497:	static void tcp_sack_new_ofo_skb(struct sock *, u32, u32);
1305:	static u8 tcp_sacktag_one(struct sock *, struct tcp_sacktag_state *, u8, u32, u32, int, int, u64);
1640:	static struct sk_buff *tcp_sacktag_walk(struct sk_buff *, struct sock *, struct tcp_sack_block *, struct tcp_sacktag_state *, u32, u32, bool);
1767:	static int tcp_sacktag_write_queue(struct sock *, const struct sk_buff *, u32, struct tcp_sacktag_state *);
3551:	static void tcp_send_challenge_ack(struct sock *, const struct sk_buff *);
4419:	static void tcp_send_dupack(struct sock *, const struct sk_buff *);
1504:	static struct sk_buff *tcp_shift_skb_data(struct sock *, struct sk_buff *, struct tcp_sacktag_state *, u32, u32, bool);
1390:	static bool tcp_shifted_skb(struct sock *, struct sk_buff *, struct sk_buff *, struct tcp_sacktag_state *, unsigned int, int, int, bool);
399:	static void tcp_sndbuf_expand(struct sock *);
6692:	static bool tcp_syn_flood_action(const struct sock *, const char *);
2063:	static void tcp_timeout_mark_lost(struct sock *);
4591:	static bool tcp_try_coalesce(struct sock *, struct sk_buff *, struct sk_buff *, bool *);
2624:	static void tcp_try_keep_open(struct sock *);
4707:	static int tcp_try_rmem_schedule(struct sock *, struct sk_buff *, unsigned int);
2522:	static bool tcp_try_undo_loss(struct sock *, bool);
2471:	static bool tcp_try_undo_recovery(struct sock *);
3121:	static u32 tcp_tso_acked(struct sock *, struct sk_buff *);
2436:	static void tcp_undo_cwnd_reduction(struct sock *, bool);
865:	static void tcp_update_pacing_rate(struct sock *);
5557:	static void tcp_urg(struct sock *, struct sk_buff *, const struct tcphdr *);
5602:	static bool tcp_validate_incoming(struct sock *, struct sk_buff *, const struct tcphdr *, int);
3649:	static void tcp_xmit_recovery(struct sock *, int);

File net/ipv4/tcp_ipv4.c:
1040:	struct tcp_md5sig_key *__tcp_md5_do_lookup(const struct sock *, int, const union tcp_md5_addr *, int);
627:	void __tcp_v4_send_check(struct sk_buff *, __be32, __be32);
2967:	int bpf_iter_tcp(struct bpf_iter_meta *, struct sock_common *, uid_t);
2158:	void inet_sk_rx_dst_set(struct sock *, const struct sk_buff *);
2773:	void tcp4_proc_exit(void);
2768:	int tcp4_proc_init(void);
1768:	bool tcp_add_backlog(struct sock *, struct sk_buff *);
1889:	int tcp_filter(struct sock *, struct sk_buff *);
408:	void tcp_ld_RTO_revert(struct sock *, u32);
1129:	int tcp_md5_do_add(struct sock *, const union tcp_md5_addr *, int, u8, int, const u8 *, u8, gfp_t);
1191:	int tcp_md5_do_del(struct sock *, const union tcp_md5_addr *, int, u8, int);
383:	void tcp_req_err(struct sock *, u32, bool);
2489:	void *tcp_seq_next(struct seq_file *, void *, loff_t *);
2466:	void *tcp_seq_start(struct seq_file *, loff_t *);
2520:	void tcp_seq_stop(struct seq_file *, void *);
107:	int tcp_twsk_unique(struct sock *, struct sock *, void *);
1493:	int tcp_v4_conn_request(struct sock *, struct sk_buff *);
198:	int tcp_v4_connect(struct sock *, struct sockaddr *, int);
2211:	void tcp_v4_destroy_sock(struct sock *);
1668:	int tcp_v4_do_rcv(struct sock *, struct sk_buff *);
1730:	int tcp_v4_early_demux(struct sk_buff *);
463:	int tcp_v4_err(struct sk_buff *, u32);
1645:	u16 tcp_v4_get_syncookie(struct sock *, struct iphdr *, struct tcphdr *, u32 *);
3022:	void tcp_v4_init(void);
1333:	int tcp_v4_md5_hash_skb(char *, const struct tcp_md5sig_key *, const struct sock *, const struct sk_buff *);
1115:	struct tcp_md5sig_key *tcp_v4_md5_lookup(const struct sock *, const struct sock *);
337:	void tcp_v4_mtu_reduced(struct sock *);
1929:	int tcp_v4_rcv(struct sk_buff *);
637:	void tcp_v4_send_check(struct sock *, struct sk_buff *);
1513:	struct sock *tcp_v4_syn_recv_sock(const struct sock *, struct sk_buff *, struct request_sock *, struct dst_entry *, struct request_sock *, bool *);
2988:	static void bpf_iter_fini_tcp(void *);
2970:	static int bpf_iter_init_tcp(void *, struct bpf_iter_aux_info *);
2690:	static int bpf_iter_tcp_seq_show(struct seq_file *, void *);
2716:	static void bpf_iter_tcp_seq_stop(struct seq_file *, void *);
2333:	static void *established_get_first(struct seq_file *, struct seq_file *);
2371:	static void *established_get_next(void *, struct seq_file *, struct seq_file *);
2537:	static void get_openreq4(const struct request_sock *, struct seq_file *, int);
2563:	static void get_tcp4_sock(struct sock *, struct seq_file *, int);
2266:	static void *listening_get_next(void *, struct seq_file *, struct seq_file *);
2758:	static void tcp4_proc_exit_net(struct net *);
2750:	static int tcp4_proc_init_net(struct net *);
2646:	static int tcp4_seq_show(struct seq_file *, void *);
2416:	static void *tcp_get_idx(struct seq_file *, loff_t);
1083:	static struct tcp_md5sig_key *tcp_md5_do_lookup_exact(const struct sock *, const union tcp_md5_addr *, int, u8, int);
2432:	static void *tcp_seek_last_pos(struct seq_file *);
2823:	static void tcp_sk_exit(struct net *);
2950:	static void tcp_sk_exit_batch(struct list_head *);
2836:	static int tcp_sk_init(struct net *);
1903:	static void tcp_v4_fill_cb(struct sk_buff *, const struct iphdr *, const struct tcphdr *);
1383:	static bool tcp_v4_inbound_md5_hash(const struct sock *, const struct sk_buff *, int, int);
1448:	static void tcp_v4_init_req(struct request_sock *, const struct sock *, struct sk_buff *);
94:	static u32 tcp_v4_init_seq(const struct sk_buff *);
2196:	static int tcp_v4_init_sock(struct sock *);
102:	static u32 tcp_v4_init_ts_off(const struct net *, const struct sk_buff *);
1302:	static int tcp_v4_md5_hash_hdr(char *, const struct tcp_md5sig_key *, __be32, __be32, const struct tcphdr *);
1277:	static int tcp_v4_md5_hash_headers(struct tcp_md5sig_pool *, __be32, __be32, const struct tcphdr *, int);
1222:	static int tcp_v4_parse_md5_keys(struct sock *, int, sockptr_t, int);
182:	static int tcp_v4_pre_connect(struct sock *, struct sockaddr *, int);
1010:	static void tcp_v4_reqsk_destructor(struct request_sock *);
929:	static void tcp_v4_reqsk_send_ack(const struct sock *, struct sk_buff *, struct request_sock *);
1897:	static void tcp_v4_restore_cb(struct sk_buff *);
1460:	static struct dst_entry *tcp_v4_route_req(const struct sock *, struct flowi *, const struct request_sock *);
824:	static void tcp_v4_send_ack(const struct sock *, struct sk_buff *, u32, u32, u32, u32, u32, int, struct tcp_md5sig_key *, int, u8);
658:	static void tcp_v4_send_reset(const struct sock *, struct sk_buff *);
964:	static int tcp_v4_send_synack(const struct sock *, struct dst_entry *, struct flowi *, struct request_sock *, struct tcp_fastopen_cookie *, enum tcp_synack_type, struct sk_buff *);

File net/ipv4/tcp_metrics.c:
543:	void tcp_fastopen_cache_get(struct sock *, u16 *, struct tcp_fastopen_cookie *);
566:	void tcp_fastopen_cache_set(struct sock *, u16, struct tcp_fastopen_cookie *, bool, u16);
443:	void tcp_init_metrics(struct sock *);
1025:	void tcp_metrics_init(void);
522:	bool tcp_peer_is_proven(struct request_sock *, struct dst_entry *);
320:	void tcp_update_metrics(struct sock *);
777:	static int __parse_nl_addr(struct inetpeer_addr *, unsigned int *, int, int, int, struct genl_info *, struct genl_info *);
211:	static struct tcp_metrics_block *__tcp_get_metrics(const struct inetpeer_addr *, const struct inetpeer_addr *, struct net *, unsigned int);
229:	static struct tcp_metrics_block *__tcp_get_metrics_req(struct request_sock *, struct dst_entry *);
974:	static int set_tcpmhash_entries(char *);
271:	static struct tcp_metrics_block *tcp_get_metrics(struct sock *, struct dst_entry *, bool);
721:	static int tcp_metrics_dump_info(struct sk_buff *, struct tcp_metrics_block *, struct netlink_callback *, struct netlink_callback *);
621:	static int tcp_metrics_fill_info(struct sk_buff *, struct tcp_metrics_block *);
875:	static void tcp_metrics_flush_all(struct net *);
902:	static int tcp_metrics_nl_cmd_del(struct sk_buff *, struct genl_info *);
819:	static int tcp_metrics_nl_cmd_get(struct sk_buff *, struct genl_info *);
744:	static int tcp_metrics_nl_dump(struct sk_buff *, struct netlink_callback *);
1015:	static void tcp_net_metrics_exit_batch(struct list_head *);
989:	static int tcp_net_metrics_init(struct net *);
146:	static struct tcp_metrics_block *tcpm_new(struct dst_entry *, struct inetpeer_addr *, struct inetpeer_addr *, unsigned int);
93:	static void tcpm_suck_dst(struct tcp_metrics_block *, const struct dst_entry *, bool);

File net/ipv4/tcp_minisocks.c:
406:	void tcp_ca_openreq_child(struct sock *, const struct dst_entry *);
573:	struct sock *tcp_check_req(struct sock *, struct sk_buff *, struct request_sock *, bool, bool *);
832:	int tcp_child_process(struct sock *, struct sock *, struct sk_buff *);
456:	struct sock *tcp_create_openreq_child(const struct sock *, struct request_sock *, struct sk_buff *);
360:	void tcp_openreq_init_rwin(struct request_sock *, const struct sock *, const struct dst_entry *);
253:	void tcp_time_wait(struct sock *, int, int);
92:	enum tcp_tw_status tcp_timewait_state_process(struct inet_timewait_sock *, struct sk_buff *, const struct tcphdr *);
344:	void tcp_twsk_destructor(struct sock *);

File net/ipv4/tcp_offload.c:
322:	int tcp4_gro_complete(struct sk_buff *, int);
309:	struct sk_buff *tcp4_gro_receive(struct list_head *, struct sk_buff *);
288:	int tcp_gro_complete(struct sk_buff *);
180:	struct sk_buff *tcp_gro_receive(struct list_head *, struct sk_buff *);
54:	struct sk_buff *tcp_gso_segment(struct sk_buff *, netdev_features_t);
345:	int tcpv4_offload_init(void);
29:	static struct sk_buff *tcp4_gso_segment(struct sk_buff *, netdev_features_t);

File net/ipv4/tcp_output.c:
2908:	void __tcp_push_pending_frames(struct sock *, unsigned int, int);
3187:	int __tcp_retransmit_skb(struct sock *, struct sk_buff *, int);
2987:	u32 __tcp_select_window(struct sock *);
3985:	void __tcp_send_ack(struct sock *, u32);
3417:	void sk_forced_mem_schedule(struct sock *, int);
2602:	void tcp_chrono_start(struct sock *, const enum tcp_chrono);
2615:	void tcp_chrono_stop(struct sock *, const enum tcp_chrono);
3874:	int tcp_connect(struct sock *);
1874:	unsigned int tcp_current_mss(struct sock *);
141:	void tcp_cwnd_restart(struct sock *, s32);
1584:	int tcp_fragment(struct sock *, enum tcp_queue, struct sk_buff *, u32, unsigned int, gfp_t);
3561:	struct sk_buff *tcp_make_synack(const struct sock *, struct dst_entry *, struct request_sock *, struct tcp_fastopen_cookie *, enum tcp_synack_type, struct sk_buff *);
1788:	int tcp_mss_to_mtu(struct sock *, int);
53:	void tcp_mstamp_refresh(struct tcp_sock *);
1779:	int tcp_mtu_to_mss(struct sock *, int);
1811:	void tcp_mtup_init(struct sock *);
1241:	enum hrtimer_restart tcp_pace_kick(struct hrtimer *);
2926:	void tcp_push_one(struct sock *, unsigned int);
1130:	void tcp_release_cb(struct sock *);
3306:	int tcp_retransmit_skb(struct sock *, struct sk_buff *, int);
4156:	int tcp_rtx_synack(const struct sock *, struct request_sock *);
2775:	bool tcp_schedule_loss_probe(struct sock *, bool);
208:	void tcp_select_initial_window(const struct sock *, int, __u32, __u32 *, __u32 *, int, __u8 *, __u32);
4027:	void tcp_send_ack(struct sock *);
3483:	void tcp_send_active_reset(struct sock *, gfp_t);
3932:	void tcp_send_delayed_ack(struct sock *);
3434:	void tcp_send_fin(struct sock *);
2841:	void tcp_send_loss_probe(struct sock *);
4122:	void tcp_send_probe0(struct sock *);
3517:	int tcp_send_synack(struct sock *);
4066:	void tcp_send_window_probe(struct sock *);
3069:	void tcp_skb_collapse_tstamp(struct sk_buff *, const struct sk_buff *);
1849:	unsigned int tcp_sync_mss(struct sock *, u32);
1172:	void tcp_tasklet_init(void);
1721:	int tcp_trim_head(struct sock *, struct sk_buff *, u32);
1191:	void tcp_wfree(struct sk_buff *);
4076:	int tcp_write_wakeup(struct sock *, int);
3336:	void tcp_xmit_retransmit_queue(struct sock *);
1682:	static int __pskb_trim_head(struct sk_buff *, int);
1291:	static int __tcp_transmit_skb(struct sock *, struct sk_buff *, int, gfp_t, u32);
484:	static void bpf_skops_hdr_opt_len(struct sock *, struct sk_buff *, struct request_sock *, struct sk_buff *, enum tcp_synack_type, struct tcp_out_options *, unsigned int *);
547:	static void bpf_skops_write_hdr_opt(struct sock *, struct sk_buff *, struct request_sock *, struct sk_buff *, enum tcp_synack_type, struct tcp_out_options *, struct tcp_out_options *);
1513:	static void tcp_adjust_pcount(struct sock *, const struct sk_buff *, int);
3670:	static void tcp_ca_dst_init(struct sock *, const struct dst_entry *);
3085:	static bool tcp_collapse_retrans(struct sock *, struct sk_buff *);
3690:	static void tcp_connect_init(struct sock *);
3766:	static void tcp_connect_queue_skb(struct sock *, struct sk_buff *);
1927:	static void tcp_cwnd_validate(struct sock *, bool);
322:	static void tcp_ecn_send_syn(struct sock *, struct sk_buff *);
309:	static void tcp_ecn_send_synack(struct sock *, struct sk_buff *);
965:	static unsigned int tcp_established_options(struct sock *, struct sk_buff *, struct tcp_out_options *, struct tcp_md5sig_key **);
65:	static void tcp_event_new_data_sent(struct sock *, struct sk_buff *);
1544:	static void tcp_fragment_tstamp(struct sk_buff *, struct sk_buff *);
2107:	static int tcp_init_tso_segs(struct sk_buff *, unsigned int);
2375:	static int tcp_mtu_probe(struct sock *);
622:	static void tcp_options_write(__be32 *, struct tcp_sock *, struct tcp_out_options *);
2515:	static bool tcp_pacing_check(struct sock *);
3146:	static void tcp_retrans_try_collapse(struct sock *, struct sk_buff *, int);
3786:	static int tcp_send_syn_data(struct sock *, struct sk_buff *);
2545:	static bool tcp_small_queue_check(struct sock *, unsigned int, const struct sk_buff *, const struct sk_buff *);
808:	static unsigned int tcp_syn_options(struct sock *, struct sk_buff *, struct tcp_out_options *, struct tcp_md5sig_key **);
890:	static unsigned int tcp_synack_options(const struct sock *, struct request_sock *, unsigned int, struct sk_buff *, struct tcp_out_options *, const struct tcp_md5sig_key *, struct tcp_fastopen_cookie *, enum tcp_synack_type, struct sk_buff *);
1093:	static void tcp_tasklet_func(unsigned long);
2221:	static bool tcp_tso_should_defer(struct sock *, struct sk_buff *, bool *, bool *, u32);
1078:	static void tcp_tsq_handler(struct sock *);
1060:	static void tcp_tsq_write(struct sock *);
1252:	static void tcp_update_skb_after_send(struct sock *, struct sk_buff *, u64);
2647:	static bool tcp_write_xmit(struct sock *, unsigned int, int, int, gfp_t);
4043:	static int tcp_xmit_probe_skb(struct sock *, int, int);
2164:	static int tso_fragment(struct sock *, struct sk_buff *, unsigned int, unsigned int, gfp_t);

File net/ipv4/tcp_rate.c:
183:	void tcp_rate_check_app_limited(struct sock *);
110:	void tcp_rate_gen(struct sock *, u32, u32, bool, struct rate_sample *);
78:	void tcp_rate_skb_delivered(struct sock *, struct sk_buff *, struct rate_sample *);
40:	void tcp_rate_skb_sent(struct sock *, struct sk_buff *);

File net/ipv4/tcp_recovery.c:
218:	void tcp_newreno_mark_lost(struct sock *, bool);
122:	void tcp_rack_advance(struct tcp_sock *, u8, u32, u64);
99:	bool tcp_rack_mark_lost(struct sock *);
153:	void tcp_rack_reo_timeout(struct sock *);
36:	s32 tcp_rack_skb_timeout(struct tcp_sock *, struct sk_buff *, u32);
189:	void tcp_rack_update_reo_wnd(struct sock *, struct rate_sample *);
62:	static void tcp_rack_detect_loss(struct sock *, u32 *);

File net/ipv4/tcp_timer.c:
43:	u32 tcp_clamp_probe0_to_user_timeout(const struct sock *, u32);
289:	void tcp_delack_timer_handler(struct sock *);
787:	void tcp_init_xmit_timers(struct sock *);
448:	void tcp_retransmit_timer(struct sock *);
660:	void tcp_set_keepalive(struct sock *, int);
652:	void tcp_syn_ack_timeout(const struct request_sock *);
596:	void tcp_write_timer_handler(struct sock *);
209:	static bool retransmits_timed_out(struct sock *, unsigned int, unsigned int);
760:	static enum hrtimer_restart tcp_compressed_ack_kick(struct hrtimer *);
336:	static void tcp_delack_timer(struct timer_list *);
406:	static void tcp_fastopen_synack_timer(struct sock *, struct request_sock *);
673:	static void tcp_keepalive_timer(struct timer_list *);
102:	static int tcp_out_of_resources(struct sock *, bool);
231:	static int tcp_write_timeout(struct sock *);
634:	static void tcp_write_timer(struct timer_list *);

File net/ipv4/tcp_ulp.c:
112:	void tcp_cleanup_ulp(struct sock *);
85:	void tcp_get_available_ulp(char *, size_t);
59:	int tcp_register_ulp(struct tcp_ulp_ops *);
150:	int tcp_set_ulp(struct sock *, const char *);
74:	void tcp_unregister_ulp(struct tcp_ulp_ops *);
103:	void tcp_update_ulp(struct sock *, struct proto *, void (*)(struct sock *));

File net/ipv4/udp.c:
1710:	struct sk_buff *__skb_recv_udp(struct sock *, unsigned int, int, int *, int *);
690:	int __udp4_lib_err(struct sk_buff *, u32, struct udp_table *);
485:	struct sock *__udp4_lib_lookup(struct net *, __be32, __be16, __be32, __be16, int, int, struct udp_table *, struct sk_buff *);
2339:	int __udp4_lib_rcv(struct sk_buff *, struct udp_table *, int);
1907:	int __udp_disconnect(struct sock *, int);
1505:	int __udp_enqueue_schedule_skb(struct sock *, struct sk_buff *);
3199:	int bpf_iter_udp(struct bpf_iter_meta *, struct udp_sock *, uid_t, int);
1605:	void skb_consume_udp(struct sock *, struct sk_buff *, int);
807:	void udp4_hwcsum(struct sk_buff *, __be32, __be32);
560:	struct sock *udp4_lib_lookup(struct net *, __be32, __be16, __be32, __be16, int);
545:	struct sock *udp4_lib_lookup_skb(struct sk_buff *, __be16, __be16);
3117:	void udp4_proc_exit(void);
3112:	int udp4_proc_init(void);
3004:	int udp4_seq_show(struct seq_file *, void *);
2821:	int udp_abort(struct sock *, int);
999:	int udp_cmsg_send(struct sock *, struct msghdr *, u16 *);
2568:	void udp_destroy_sock(struct sock *);
1579:	void udp_destruct_sock(struct sock *);
1935:	int udp_disconnect(struct sock *, int);
595:	void udp_encap_enable(void);
780:	int udp_err(struct sk_buff *, u32);
3168:	u32 udp_flow_hashrnd(void);
788:	void udp_flush_pending_frames(struct sock *);
2782:	int udp_getsockopt(struct sock *, int, int, char *, int *);
3254:	void udp_init(void);
1597:	int udp_init_sock(struct sock *);
1685:	int udp_ioctl(struct sock *, int, unsigned long);
230:	int udp_lib_get_port(struct sock *, unsigned short, unsigned int);
2721:	int udp_lib_getsockopt(struct sock *, int, int, char *, int *);
1975:	void udp_lib_rehash(struct sock *, u16);
2592:	int udp_lib_setsockopt(struct sock *, int, int, sockptr_t, unsigned int, int (*)(struct sock *));
1944:	void udp_lib_unhash(struct sock *);
2803:	__poll_t udp_poll(struct file *, struct socket *, poll_table *);
1894:	int udp_pre_connect(struct sock *, struct sockaddr *, int);
965:	int udp_push_pending_frames(struct sock *);
2563:	int udp_rcv(struct sk_buff *);
1786:	int udp_recvmsg(struct sock *, struct msghdr *, size_t, int, int, int *);
1023:	int udp_sendmsg(struct sock *, struct msghdr *, size_t);
1303:	int udp_sendpage(struct sock *, struct page *, int, size_t, int);
2953:	void *udp_seq_next(struct seq_file *, void *, loff_t *);
2944:	void *udp_seq_start(struct seq_file *, loff_t *);
2967:	void udp_seq_stop(struct seq_file *, void *);
849:	void udp_set_csum(bool, struct sk_buff *, __be32, __be32, int);
2711:	int udp_setsockopt(struct sock *, int, int, sockptr_t, unsigned int);
2184:	bool udp_sk_rx_dst_set(struct sock *, struct dst_entry *);
1466:	void udp_skb_destructor(struct sock *, struct sk_buff *);
3141:	void udp_table_init(struct udp_table *, const char *);
2495:	int udp_v4_early_demux(struct sk_buff *);
345:	int udp_v4_get_port(struct sock *, unsigned short);
2013:	void udp_v4_rehash(struct sock *);
1626:	static struct sk_buff *__first_packet_length(struct sock *, struct sk_buff_head *, int *);
640:	static struct sock *__udp4_lib_err_encap(struct net *, const struct iphdr *, struct udphdr *, struct udp_table *, struct sk_buff *, u32);
2202:	static int __udp4_lib_mcast_deliver(struct net *, struct sk_buff *, struct udphdr *, __be32, __be32, struct udp_table *, int);
2441:	static struct sock *__udp4_lib_mcast_demux_lookup(struct net *, __be16, __be32, __be16, __be32, int, int);
2021:	static int __udp_queue_rcv_skb(struct sock *, struct sk_buff *);
3221:	static void bpf_iter_fini_udp(void *);
3202:	static int bpf_iter_init_udp(void *, struct bpf_iter_aux_info *);
3041:	static int bpf_iter_udp_seq_show(struct seq_file *, void *);
3058:	static void bpf_iter_udp_seq_stop(struct seq_file *, void *);
1499:	static void busylock_release(spinlock_t *);
1657:	static int first_packet_length(struct sock *);
3124:	static int set_uhash_entries(char *);
2983:	static void udp4_format_sock(struct sock *, struct seq_file *, int);
430:	static struct sock *udp4_lib_lookup2(struct net *, __be32, __be16, __be32, unsigned int, int, int, struct sk_buff *, struct udp_hslot *, struct udp_hslot *);
459:	static struct sock *udp4_lookup_run_bpf(struct net *, struct udp_table *, struct sk_buff *, __be32, __be16, __be32, u16);
3102:	static void udp4_proc_exit_net(struct net *);
3094:	static int udp4_proc_init_net(struct net *);
401:	static u32 udp_ehashfn(const struct net *, const __be32, const __u16, const __be32, const __be16);
2875:	static struct sock *udp_get_first(int, struct seq_file *, struct seq_file *);
2909:	static struct sock *udp_get_next(struct sock *, struct seq_file *, struct seq_file *);
132:	static int udp_lib_lport_inuse(struct net *, __u16, const struct udp_hslot *, unsigned long *, struct sock *, unsigned int);
168:	static int udp_lib_lport_inuse2(struct net *, __u16, struct udp_hslot *, struct sock *);
2058:	static int udp_queue_rcv_one_skb(struct sock *, struct sk_buff *);
2161:	static int udp_queue_rcv_skb(struct sock *, struct sk_buff *);
199:	static int udp_reuseport_add_sock(struct sock *, struct udp_hslot *);
1419:	static void udp_rmem_release(struct sock *, int, int, bool);
872:	static int udp_send_skb(struct sk_buff *, struct flowi4 *, struct inet_cork *);
3188:	static int udp_sysctl_init(struct net *);
2317:	static int udp_unicast_rcv_skb(struct sock *, struct sk_buff *, struct udphdr *);

File net/ipv4/udp_bpf.c:
44:	struct proto *udp_bpf_get_proto(struct sock *, struct sk_psock *);
37:	static int udp_bpf_v4_build_proto(void);

File net/ipv4/udp_offload.c:
260:	struct sk_buff *__udp_gso_segment(struct sk_buff *, netdev_features_t, bool);
148:	struct sk_buff *skb_udp_tunnel_segment(struct sk_buff *, netdev_features_t, bool);
660:	int udp4_gro_complete(struct sk_buff *, int);
573:	struct sk_buff *udp4_gro_receive(struct list_head *, struct sk_buff *);
625:	int udp_gro_complete(struct sk_buff *, int, udp_lookup_t);
506:	struct sk_buff *udp_gro_receive(struct list_head *, struct sk_buff *, struct udphdr *, struct sock *);
697:	int udpv4_offload_init(void);
14:	static struct sk_buff *__skb_udp_tunnel_segment(struct sk_buff *, netdev_features_t, struct sk_buff *(*)(struct sk_buff *, netdev_features_t), __be16, bool);
187:	static void __udpv4_gso_segment_csum(struct sk_buff *, __be32 *, __be32 *, __be16 *, __be16 *);
214:	static struct sk_buff *__udpv4_gso_segment_list_csum(struct sk_buff *);
364:	static struct sk_buff *udp4_ufo_fragment(struct sk_buff *, netdev_features_t);
425:	static struct sk_buff *udp_gro_receive_segment(struct list_head *, struct sk_buff *);

File net/ipv4/udplite.c:
105:	void udplite4_register(void);
84:	static void udplite4_proc_exit_net(struct net *);
76:	static int udplite4_proc_init_net(struct net *);
25:	static int udplite_err(struct sk_buff *, u32);
20:	static int udplite_rcv(struct sk_buff *);

File net/ipv4/xfrm4_input.c:
168:	int xfrm4_rcv(struct sk_buff *);
47:	int xfrm4_transport_finish(struct sk_buff *, int);
82:	int xfrm4_udp_encap_rcv(struct sock *, struct sk_buff *);
27:	static int xfrm4_rcv_encap_finish(struct net *, struct sock *, struct sk_buff *);
21:	static int xfrm4_rcv_encap_finish2(struct net *, struct sock *, struct sk_buff *);

File net/ipv4/xfrm4_output.c:
39:	void xfrm4_local_error(struct sk_buff *, u32);
31:	int xfrm4_output(struct net *, struct sock *, struct sk_buff *);
17:	static int __xfrm4_output(struct net *, struct sock *, struct sk_buff *);

File net/ipv4/xfrm4_policy.c:
255:	void xfrm4_init(void);
20:	static struct dst_entry *__xfrm4_dst_lookup(struct net *, struct flowi4 *, int, int, const xfrm_address_t *, const xfrm_address_t *, u32);
121:	static void xfrm4_dst_destroy(struct dst_entry *);
131:	static void xfrm4_dst_ifdown(struct dst_entry *, struct net_device *, int);
45:	static struct dst_entry *xfrm4_dst_lookup(struct net *, int, int, const xfrm_address_t *, const xfrm_address_t *, u32);
71:	static int xfrm4_fill_dst(struct xfrm_dst *, struct net_device *, const struct flowi *);
55:	static int xfrm4_get_saddr(struct net *, int, xfrm_address_t *, xfrm_address_t *, u32);
239:	static void xfrm4_net_exit(struct net *);
222:	static int xfrm4_net_init(struct net *);
112:	static void xfrm4_redirect(struct dst_entry *, struct sock *, struct sk_buff *);
102:	static void xfrm4_update_pmtu(struct dst_entry *, struct sock *, struct sk_buff *, u32, bool);

File net/ipv4/xfrm4_protocol.c:
267:	int xfrm4_protocol_deregister(struct xfrm4_protocol *, unsigned char);
306:	void xfrm4_protocol_init(void);
220:	int xfrm4_protocol_register(struct xfrm4_protocol *, unsigned char);
61:	int xfrm4_rcv_encap(struct sk_buff *, int, __be32, int);
141:	static int xfrm4_ah_err(struct sk_buff *, u32);
124:	static int xfrm4_ah_rcv(struct sk_buff *);
113:	static int xfrm4_esp_err(struct sk_buff *, u32);
96:	static int xfrm4_esp_rcv(struct sk_buff *);
169:	static int xfrm4_ipcomp_err(struct sk_buff *, u32);
152:	static int xfrm4_ipcomp_rcv(struct sk_buff *);
45:	static int xfrm4_rcv_cb(struct sk_buff *, u8, int);

File net/ipv4/xfrm4_state.c:
21:	void xfrm4_state_init(void);

File net/ipv6/addrconf.c:
1831:	int __ipv6_get_lladdr(struct inet6_dev *, struct in6_addr *, u32);
3018:	int addrconf_add_ifaddr(struct net *, void *);
3162:	void addrconf_add_linklocal(struct inet6_dev *, const struct in6_addr *, u32);
7206:	void addrconf_cleanup(void);
2084:	void addrconf_dad_failure(struct sk_buff *, struct inet6_ifaddr *);
3043:	int addrconf_del_ifaddr(struct net *, void *);
7096:	int addrconf_init(void);
2159:	void addrconf_join_solict(struct net_device *, const struct in6_addr *);
2171:	void addrconf_leave_solict(struct inet6_dev *, const struct in6_addr *);
2660:	void addrconf_prefix_rcv(struct net_device *, u8 *, int, bool);
2572:	int addrconf_prefix_rcv_add_addr(struct net *, struct net_device *, const struct prefix_info *, struct inet6_dev *, const struct in6_addr *, int, u32, bool, bool, __u32, u32);
2844:	int addrconf_set_dstaddr(struct net *, void *);
4367:	void if6_proc_exit(void);
4362:	int if6_proc_init(void);
949:	void inet6_ifa_finish_destroy(struct inet6_ifaddr *);
5941:	void inet6_ifinfo_notify(int, struct inet6_dev *);
566:	void inet6_netconf_notify_devconf(struct net *, int, int, int, struct ipv6_devconf *);
1879:	int ipv6_chk_addr(struct net *, const struct in6_addr *, const struct net_device *, int);
1939:	int ipv6_chk_addr_and_flags(struct net *, const struct in6_addr *, const struct net_device *, bool, int, u32);
1952:	bool ipv6_chk_custom_prefix(const struct in6_addr *, const unsigned int, struct net_device *);
4375:	int ipv6_chk_home_addr(struct net *, const struct in6_addr *);
1974:	int ipv6_chk_prefix(const struct in6_addr *, struct net_device *);
4406:	int ipv6_chk_rpl_srh_loop(struct net *, const struct in6_addr *, unsigned char);
2003:	struct net_device *ipv6_dev_find(struct net *, const struct in6_addr *, struct net_device *);
1733:	int ipv6_dev_get_saddr(struct net *, const struct net_device *, const struct in6_addr *, unsigned int, struct in6_addr *);
2011:	struct inet6_ifaddr *ipv6_get_ifaddr(struct net *, const struct in6_addr *, struct net_device *, int);
1850:	int ipv6_get_lladdr(struct net_device *, struct in6_addr *, u32);
6908:	static int __addrconf_sysctl_register(struct net *, char *, struct inet6_dev *, struct ipv6_devconf *);
1897:	static struct net_device *__ipv6_chk_addr_and_flags(struct net *, const struct in6_addr *, const struct net_device *, bool, int, u32);
1639:	static int __ipv6_dev_get_saddr(struct net *, struct ipv6_saddr_dst *, struct inet6_dev *, struct ipv6_saddr_score *, int);
6037:	static void __ipv6_ifa_notify(int, struct inet6_ifaddr *);
2261:	static int __ipv6_isatap_ifid(u8 *, __be32);
3061:	static void add_addr(struct inet6_dev *, const struct in6_addr *, int, int);
2479:	static struct inet6_dev *addrconf_add_dev(struct net_device *);
2461:	static void addrconf_add_mroute(struct net_device *);
3281:	static void addrconf_addr_gen(struct inet6_dev *, bool);
3930:	static void addrconf_dad_begin(struct inet6_ifaddr *);
4144:	static void addrconf_dad_completed(struct inet6_ifaddr *, bool, bool);
3907:	static void addrconf_dad_kick(struct inet6_ifaddr *);
4218:	static void addrconf_dad_run(struct inet6_dev *, bool);
2037:	static void addrconf_dad_stop(struct inet6_ifaddr *, int);
4016:	static void addrconf_dad_work(struct work_struct *);
308:	static void addrconf_del_dad_work(struct inet6_ifaddr *);
3325:	static void addrconf_dev_config(struct net_device *);
6462:	static int addrconf_disable_policy(struct ctl_table *, int *, int);
6432:	static void addrconf_disable_policy_idev(struct inet6_dev *, int);
7067:	static void addrconf_exit_net(struct net *);
840:	static int addrconf_fixup_forwarding(struct ctl_table *, int *, int);
908:	static int addrconf_fixup_linkdown(struct ctl_table *, int *, int);
2416:	static struct fib6_info *addrconf_get_prefix_route(const struct in6_addr *, int, const struct net_device *, u32, u32, bool);
3395:	static void addrconf_gre_config(struct net_device *);
3695:	static int addrconf_ifdown(struct net_device *, bool);
6998:	static int addrconf_init_net(struct net *);
2183:	static void addrconf_join_anycast(struct inet6_ifaddr *);
2196:	static void addrconf_leave_anycast(struct inet6_ifaddr *);
322:	static void addrconf_mod_dad_work(struct inet6_ifaddr *, unsigned long);
314:	static void addrconf_mod_rs_timer(struct inet6_dev *, unsigned long);
3477:	static int addrconf_notify(struct notifier_block *, unsigned long, void *);
2385:	static void addrconf_prefix_route(struct in6_addr *, int, u32, struct net_device *, unsigned long, u32, gfp_t);
3857:	static void addrconf_rs_timer(struct timer_list *);
2812:	static int addrconf_set_sit_dstaddr(struct net *, struct net_device *, struct in6_ifreq *);
3364:	static void addrconf_sit_config(struct net_device *);
6265:	static int addrconf_sysctl_addr_gen_mode(struct ctl_table *, int, void *, size_t *, loff_t *);
6199:	static int addrconf_sysctl_disable(struct ctl_table *, int, void *, size_t *, loff_t *);
6495:	static int addrconf_sysctl_disable_policy(struct ctl_table *, int, void *, size_t *, loff_t *);
6103:	static int addrconf_sysctl_forward(struct ctl_table *, int, void *, size_t *, loff_t *);
6394:	static int addrconf_sysctl_ignore_routes_with_linkdown(struct ctl_table *, int, void *, size_t *, loff_t *);
6128:	static int addrconf_sysctl_mtu(struct ctl_table *, int, void *, size_t *, loff_t *);
6224:	static int addrconf_sysctl_proxy_ndp(struct ctl_table *, int, void *, size_t *, loff_t *);
6969:	static int addrconf_sysctl_register(struct inet6_dev *);
6327:	static int addrconf_sysctl_stable_secret(struct ctl_table *, int, void *, size_t *, loff_t *);
6988:	static void addrconf_sysctl_unregister(struct inet6_dev *);
4577:	static void addrconf_verify(void);
4453:	static void addrconf_verify_rtnl(void);
4570:	static void addrconf_verify_work(struct work_struct *);
1191:	static enum cleanup_prefix_rt_t check_cleanup_prefix_route(struct inet6_ifaddr *, unsigned long *);
1229:	static void cleanup_prefix_route(struct inet6_ifaddr *, unsigned long, bool, bool);
6142:	static void dev_disable_change(struct inet6_dev *);
788:	static void dev_forward_change(struct inet6_dev *);
3413:	static int fixup_permanent_addr(struct net *, struct inet6_dev *, struct inet6_ifaddr *);
4276:	static struct inet6_ifaddr *if6_get_next(struct inet6_ifaddr *, struct seq_file *, struct inet6_ifaddr *, struct seq_file *);
4352:	static void if6_proc_net_exit(struct net *);
4344:	static int if6_proc_net_init(struct net *);
4309:	static void *if6_seq_next(struct seq_file *, void *, loff_t *);
4324:	static int if6_seq_show(struct seq_file *, void *);
4302:	static void *if6_seq_start(struct seq_file *, loff_t *);
4318:	static void if6_seq_stop(struct seq_file *, void *);
5081:	static int in6_dump_addrs(struct inet6_dev *, struct sk_buff *, struct netlink_callback *, int, struct inet6_fill_args *);
2883:	static int inet6_addr_add(struct net *, int, struct ifa6_config *, struct netlink_ext_ack *);
2975:	static int inet6_addr_del(struct net *, int, u32, const struct in6_addr *, unsigned int);
4675:	static int inet6_addr_modify(struct inet6_ifaddr *, struct ifa6_config *);
5198:	static int inet6_dump_addr(struct sk_buff *, struct netlink_callback *, enum addr_type_t);
5293:	static int inet6_dump_ifacaddr(struct sk_buff *, struct netlink_callback *);
5278:	static int inet6_dump_ifaddr(struct sk_buff *, struct netlink_callback *);
5892:	static int inet6_dump_ifinfo(struct sk_buff *, struct netlink_callback *);
5285:	static int inet6_dump_ifmcaddr(struct sk_buff *, struct netlink_callback *);
5046:	static int inet6_fill_ifacaddr(struct sk_buff *, struct ifacaddr6 *, struct inet6_fill_args *);
4947:	static int inet6_fill_ifaddr(struct sk_buff *, struct inet6_ifaddr *, struct inet6_fill_args *);
5822:	static int inet6_fill_ifinfo(struct sk_buff *, struct inet6_dev *, u32, u32, int, unsigned int);
5598:	static int inet6_fill_ifla6_attrs(struct sk_buff *, struct inet6_dev *, u32);
5013:	static int inet6_fill_ifmcaddr(struct sk_buff *, struct ifmcaddr6 *, struct inet6_fill_args *);
5657:	static int inet6_fill_link_af(struct sk_buff *, const struct net_device *, u32);
5972:	static int inet6_fill_prefix(struct sk_buff *, struct inet6_dev *, struct prefix_info *, unsigned int, int, u32, u32);
5648:	static size_t inet6_get_link_af_size(const struct net_device *, u32);
5418:	static void inet6_ifa_notify(int, struct inet6_ifaddr *);
700:	static int inet6_netconf_dump_devconf(struct sk_buff *, struct netlink_callback *);
513:	static int inet6_netconf_fill_devconf(struct sk_buff *, int, struct ipv6_devconf *, u32, u32, int, unsigned int, int);
636:	static int inet6_netconf_get_devconf(struct sk_buff *, struct nlmsghdr *, struct netlink_ext_ack *);
6012:	static void inet6_prefix_notify(struct inet6_dev *, struct prefix_info *, int);
4611:	static int inet6_rtm_deladdr(struct sk_buff *, struct nlmsghdr *, struct netlink_ext_ack *);
5346:	static int inet6_rtm_getaddr(struct sk_buff *, struct nlmsghdr *, struct netlink_ext_ack *);
4795:	static int inet6_rtm_newaddr(struct sk_buff *, struct nlmsghdr *, struct netlink_ext_ack *);
5671:	static int inet6_set_iftoken(struct inet6_dev *, struct in6_addr *);
5795:	static int inet6_set_link_af(struct net_device *, const struct nlattr *);
5142:	static int inet6_valid_dump_ifaddr_req(const struct nlmsghdr *, struct inet6_fill_args *, struct net **, struct sock *, struct netlink_callback *);
5762:	static int inet6_validate_link_af(const struct net_device *, const struct nlattr *);
3145:	static void init_loopback(struct net_device *);
1037:	static struct inet6_ifaddr *ipv6_add_addr(struct inet6_dev *, struct ifa6_config *, bool, struct netlink_ext_ack *);
1014:	static int ipv6_add_addr_hash(struct net_device *, struct inet6_ifaddr *);
364:	static struct inet6_dev *ipv6_add_dev(struct net_device *);
1307:	static int ipv6_create_tempaddr(struct inet6_ifaddr *, bool);
1251:	static void ipv6_del_addr(struct inet6_ifaddr *);
471:	static struct inet6_dev *ipv6_find_idev(struct net_device *);
2300:	static int ipv6_generate_eui64(u8 *, struct net_device *);
3208:	static int ipv6_generate_stable_address(struct in6_addr *, u8, const struct inet6_dev *);
1505:	static int ipv6_get_saddr_eval(struct net *, struct ipv6_saddr_score *, struct ipv6_saddr_dst *, int);
2863:	static int ipv6_mc_config(struct sock *, bool, const struct in6_addr *, int);
2499:	static void manage_tempaddrs(struct inet6_dev *, struct inet6_ifaddr *, __u32, __u32, bool, unsigned long);
4640:	static int modify_prefix_route(struct inet6_ifaddr *, unsigned long, u32, bool);
3086:	static void sit_add_v4_addrs(struct inet6_dev *);
330:	static int snmp6_alloc_dev(struct inet6_dev *);
5584:	static void snmp6_fill_stats(u64 *, struct inet6_dev *, int, int);

File net/ipv6/addrconf_core.c:
38:	int __ipv6_addr_type(const struct in6_addr *);
248:	void in6_dev_finish_destroy(struct inet6_dev *);
107:	int inet6addr_notifier_call_chain(unsigned long, void *);
126:	int inet6addr_validator_notifier_call_chain(unsigned long, void *);
95:	int register_inet6addr_notifier(struct notifier_block *);
113:	int register_inet6addr_validator_notifier(struct notifier_block *);
101:	int unregister_inet6addr_notifier(struct notifier_block *);
119:	int unregister_inet6addr_validator_notifier(struct notifier_block *);
145:	static struct fib6_table *eafnosupport_fib6_get_table(struct net *, u32);
159:	static int eafnosupport_fib6_lookup(struct net *, int, struct flowi6 *, struct fib6_result *, int);
180:	static int eafnosupport_fib6_nh_init(struct net *, struct fib6_nh *, struct fib6_config *, gfp_t, struct netlink_ext_ack *);
166:	static void eafnosupport_fib6_select_path(const struct net *, struct fib6_result *, struct flowi6 *, int, bool, const struct sk_buff *, int);
151:	static int eafnosupport_fib6_table_lookup(struct net *, struct fib6_table *, int, struct flowi6 *, struct fib6_result *, int);
188:	static int eafnosupport_ip6_del_rt(struct net *, struct fib6_info *, bool);
173:	static u32 eafnosupport_ip6_mtu_from_fib6(const struct fib6_result *, const struct in6_addr *, const struct in6_addr *);
132:	static struct dst_entry *eafnosupport_ipv6_dst_lookup_flow(struct net *, const struct sock *, struct flowi6 *, const struct in6_addr *);
194:	static int eafnosupport_ipv6_fragment(struct net *, struct sock *, struct sk_buff *, int (*)(struct net *, struct sock *, struct sk_buff *));
140:	static int eafnosupport_ipv6_route_input(struct sk_buff *);
238:	static void in6_dev_finish_destroy_rcu(struct callback_head *);

File net/ipv6/addrlabel.c:
140:	u32 ipv6_addr_label(struct net *, const struct in6_addr *, int, int);
362:	void ipv6_addr_label_cleanup(void);
357:	int ipv6_addr_label_init(void);
633:	int ipv6_addr_label_rtnl_register(void);
203:	static int __ip6addrlbl_add(struct net *, struct ip6addrlbl_entry *, int);
127:	static struct ip6addrlbl_entry *__ipv6_addr_label(const struct in6_addr *, int, int, struct net *, struct net *);
242:	static int ip6addrlbl_add(struct net *, const struct in6_addr *, int, int, u32, int);
160:	static struct ip6addrlbl_entry *ip6addrlbl_alloc(const struct in6_addr *, int, int, u32);
289:	static int ip6addrlbl_del(struct net *, const struct in6_addr *, int, int);
494:	static int ip6addrlbl_dump(struct sk_buff *, struct netlink_callback *);
446:	static int ip6addrlbl_fill(struct sk_buff *, struct ip6addrlbl_entry *, u32, u32, u32, unsigned int, int);
578:	static int ip6addrlbl_get(struct sk_buff *, struct nlmsghdr *, struct netlink_ext_ack *);
338:	static void ip6addrlbl_net_exit(struct net *);
307:	static int ip6addrlbl_net_init(struct net *);
384:	static int ip6addrlbl_newdel(struct sk_buff *, struct nlmsghdr *, struct netlink_ext_ack *);

File net/ipv6/af_inet6.c:
439:	int inet6_bind(struct socket *, struct sockaddr *, int);
614:	int inet6_compat_ioctl(struct socket *, unsigned int, unsigned long);
479:	void inet6_destroy_sock(struct sock *);
509:	int inet6_getname(struct socket *, struct sockaddr *, int);
549:	int inet6_ioctl(struct socket *, unsigned int, unsigned long);
645:	int inet6_recvmsg(struct socket *, struct msghdr *, size_t, int);
729:	int inet6_register_protosw(struct inet_protosw *);
462:	int inet6_release(struct socket *);
632:	int inet6_sendmsg(struct socket *, struct msghdr *, size_t);
801:	int inet6_sk_rebuild_header(struct sock *);
786:	void inet6_unregister_protosw(struct inet_protosw *);
97:	bool ipv6_mod_enabled(void);
844:	bool ipv6_opt_accepted(const struct sock *, const struct sk_buff *, const struct inet6_skb_parm *);
277:	static int __inet6_bind(struct sock *, struct sockaddr *, int, u32);
594:	static int inet6_compat_routing_ioctl(struct sock *, unsigned int, struct compat_in6_rtmsg *);
110:	static int inet6_create(struct net *, struct socket *, int, int);
1040:	static int inet6_init(void);
987:	static void inet6_net_exit(struct net *);
931:	static int inet6_net_init(struct net *);
881:	static int ipv6_init_mibs(struct net *);
1002:	static int ipv6_route_input(struct sk_buff *);

File net/ipv6/anycast.c:
345:	int __ipv6_dev_ac_dec(struct inet6_dev *, const struct in6_addr *);
284:	int __ipv6_dev_ac_inc(struct inet6_dev *, const struct in6_addr *);
186:	void __ipv6_sock_ac_close(struct sock *);
594:	void ac6_proc_exit(struct net *);
585:	int ac6_proc_init(struct net *);
390:	void ipv6_ac_destroy_dev(struct inet6_dev *);
611:	void ipv6_anycast_cleanup(void);
602:	int ipv6_anycast_init(void);
436:	bool ipv6_chk_acast_addr(struct net *, struct net_device *, const struct in6_addr *);
467:	bool ipv6_chk_acast_addr_src(struct net *, struct net_device *, const struct in6_addr *);
213:	void ipv6_sock_ac_close(struct sock *);
155:	int ipv6_sock_ac_drop(struct sock *, int, const struct in6_addr *);
63:	int ipv6_sock_ac_join(struct sock *, int, const struct in6_addr *);
531:	static struct ifacaddr6 *ac6_get_idx(loff_t, struct seq_file *, struct seq_file *);
508:	static struct ifacaddr6 *ac6_get_next(struct ifacaddr6 *, struct seq_file *, struct ifacaddr6 *, struct seq_file *);
547:	static void *ac6_seq_next(struct seq_file *, void *, loff_t *);
567:	static int ac6_seq_show(struct seq_file *, void *);
540:	static void *ac6_seq_start(struct seq_file *, loff_t *);
555:	static void ac6_seq_stop(struct seq_file *, void *);
260:	static struct ifacaddr6 *aca_alloc(struct fib6_info *, const struct in6_addr *);
245:	static void aca_free_rcu(struct callback_head *);
253:	static void aca_put(struct ifacaddr6 *);
224:	static void ipv6_add_acaddr_hash(struct ifacaddr6 *, struct net *, struct net *);
233:	static void ipv6_del_acaddr_hash(struct ifacaddr6 *);

File net/ipv6/calipso.c:
1454:	void calipso_exit(void);
1444:	int calipso_init(void);
570:	bool calipso_validate(const struct sk_buff *, const unsigned char *);
264:	static int calipso_cache_add(const unsigned char *, const struct netlbl_lsm_secattr *);
199:	static int calipso_cache_check(const unsigned char *, u32, struct netlbl_lsm_secattr *);
101:	static void calipso_cache_entry_free(struct calipso_map_cache_entry *);
159:	static void calipso_cache_invalidate(void);
348:	static int calipso_doi_add(struct calipso_doi *, struct netlbl_audit *);
403:	static void calipso_doi_free(struct calipso_doi *);
418:	static void calipso_doi_free_rcu(struct callback_head *);
478:	static struct calipso_doi *calipso_doi_getdef(u32);
502:	static void calipso_doi_putdef(struct calipso_doi *);
437:	static int calipso_doi_remove(u32, struct netlbl_audit *);
527:	static int calipso_doi_walk(u32 *, int (*)(struct calipso_doi *, void *), void *);
723:	static int calipso_genopt(unsigned char *, u32, u32, const struct calipso_doi *, const struct netlbl_lsm_secattr *);
118:	static u32 calipso_map_cache_hash(const unsigned char *, u32);
971:	static int calipso_opt_del(struct ipv6_opt_hdr *, struct ipv6_opt_hdr **);
846:	static int calipso_opt_find(struct ipv6_opt_hdr *, unsigned int *, unsigned int *);
1014:	static int calipso_opt_getattr(const unsigned char *, struct netlbl_lsm_secattr *);
908:	static struct ipv6_opt_hdr *calipso_opt_insert(struct ipv6_opt_hdr *, const struct calipso_doi *, const struct netlbl_lsm_secattr *);
780:	static int calipso_opt_update(struct sock *, struct ipv6_opt_hdr *);
687:	static int calipso_pad_write(unsigned char *, unsigned int, unsigned int);
1231:	static void calipso_req_delattr(struct request_sock *);
1189:	static int calipso_req_setattr(struct request_sock *, const struct calipso_doi *, const struct netlbl_lsm_secattr *);
1369:	static int calipso_skbuff_delattr(struct sk_buff *);
1268:	static unsigned char *calipso_skbuff_optptr(const struct sk_buff *);
1294:	static int calipso_skbuff_setattr(struct sk_buff *, const struct calipso_doi *, const struct netlbl_lsm_secattr *);
1156:	static void calipso_sock_delattr(struct sock *);
1072:	static int calipso_sock_getattr(struct sock *, struct netlbl_lsm_secattr *);
1125:	static int calipso_sock_setattr(struct sock *, const struct calipso_doi *, const struct netlbl_lsm_secattr *);
808:	static int calipso_tlv_len(struct ipv6_opt_hdr *, unsigned int);

File net/ipv6/datagram.c:
134:	int __ip6_datagram_connect(struct sock *, struct sockaddr *, int);
1042:	void __ip6_dgram_sock_seq_show(struct seq_file *, struct sock *, __u16, __u16, int, int);
267:	int ip6_datagram_connect(struct sock *, struct sockaddr *, int);
278:	int ip6_datagram_connect_v6_only(struct sock *, struct sockaddr *, int);
66:	int ip6_datagram_dst_update(struct sock *, bool);
589:	void ip6_datagram_recv_common_ctl(struct sock *, struct msghdr *, struct sk_buff *);
745:	void ip6_datagram_recv_ctl(struct sock *, struct msghdr *, struct sk_buff *);
614:	void ip6_datagram_recv_specific_ctl(struct sock *, struct msghdr *, struct sk_buff *);
114:	void ip6_datagram_release_cb(struct sock *);
753:	int ip6_datagram_send_ctl(struct net *, struct sock *, struct msghdr *, struct flowi6 *, struct ipcm6_cookie *);
299:	void ipv6_icmp_error(struct sock *, struct sk_buff *, int, __be16, u32, u8 *);
338:	void ipv6_local_error(struct sock *, int, struct flowi6 *, u32);
378:	void ipv6_local_rxpmtu(struct sock *, struct flowi6 *, u32);
448:	int ipv6_recv_error(struct sock *, struct msghdr *, int, int *);
541:	int ipv6_recv_rxpmtu(struct sock *, struct msghdr *, int, int *);
41:	static void ip6_datagram_flow_key_init(struct flowi6 *, struct sock *);

File net/ipv6/exthdrs.c:
1335:	struct in6_addr *fl6_update_dst(struct flowi6 *, const struct ipv6_txoptions *, struct in6_addr *);
1188:	struct ipv6_txoptions *ipv6_dup_options(struct sock *, struct ipv6_txoptions *);
894:	void ipv6_exthdrs_exit(void);
869:	int ipv6_exthdrs_init(void);
1304:	struct ipv6_txoptions *ipv6_fixup_options(struct ipv6_txoptions *, struct ipv6_txoptions *);
1017:	int ipv6_parse_hopopts(struct sk_buff *);
1180:	void ipv6_push_frag_opts(struct sk_buff *, struct ipv6_txoptions *, u8 *);
1163:	void ipv6_push_nfrag_opts(struct sk_buff *, struct ipv6_txoptions *, u8 *, struct in6_addr **, struct in6_addr *);
1248:	struct ipv6_txoptions *ipv6_renew_options(struct sock *, struct ipv6_txoptions *, int, struct ipv6_opt_hdr *);
114:	static bool ip6_parse_tlv(const struct tlvtype_proc *, struct sk_buff *, int);
208:	static bool ipv6_dest_hao(struct sk_buff *, int);
277:	static int ipv6_destopt_rcv(struct sk_buff *);
981:	static bool ipv6_hop_calipso(struct sk_buff *, int);
937:	static bool ipv6_hop_jumbo(struct sk_buff *, int);
920:	static bool ipv6_hop_ra(struct sk_buff *, int);
1154:	static void ipv6_push_exthdr(struct sk_buff *, u8 *, u8, struct ipv6_opt_hdr *);
1062:	static void ipv6_push_rthdr0(struct sk_buff *, u8 *, struct ipv6_rt_hdr *, struct in6_addr **, struct in6_addr *);
1087:	static void ipv6_push_rthdr4(struct sk_buff *, u8 *, struct ipv6_rt_hdr *, struct in6_addr **, struct in6_addr *);
1210:	static void ipv6_renew_option(int, struct ipv6_opt_hdr **, struct ipv6_opt_hdr *, struct ipv6_opt_hdr *, int, char **);
471:	static int ipv6_rpl_srh_rcv(struct sk_buff *);
665:	static int ipv6_rthdr_rcv(struct sk_buff *);
352:	static int ipv6_srh_rcv(struct sk_buff *);
323:	static void seg6_update_csum(struct sk_buff *);

File net/ipv6/exthdrs_core.c:
13:	bool ipv6_ext_hdr(u8);
186:	int ipv6_find_hdr(const struct sk_buff *, unsigned int *, int, unsigned short *, int *);
116:	int ipv6_find_tlv(const struct sk_buff *, int, int);
72:	int ipv6_skip_exthdr(const struct sk_buff *, int, u8 *, __be16 *);

File net/ipv6/exthdrs_offload.c:
19:	int ipv6_exthdrs_offload_init(void);

File net/ipv6/fib6_notifier.c:
10:	int call_fib6_notifier(struct notifier_block *, enum fib_event_type, struct fib_notifier_info *);
18:	int call_fib6_notifiers(struct net *, enum fib_event_type, struct fib_notifier_info *);
61:	void fib6_notifier_exit(struct net *);
49:	int fib6_notifier_init(struct net *);
30:	static int fib6_dump(struct net *, struct notifier_block *, struct netlink_ext_ack *);
25:	static unsigned int fib6_seq_read(struct net *);

File net/ipv6/fib6_rules.c:
63:	int fib6_lookup(struct net *, int, struct flowi6 *, struct fib6_result *, int);
259:	int fib6_rule_action(struct fib_rule *, struct flowi *, int, struct fib_lookup_arg *);
40:	bool fib6_rule_default(const struct fib_rule *);
91:	struct dst_entry *fib6_rule_lookup(struct net *, struct flowi6 *, const struct sk_buff *, int, pol_lookup_t);
302:	int fib6_rule_match(struct fib_rule *, struct flowi *, int);
269:	bool fib6_rule_suppress(struct fib_rule *, int, struct fib_lookup_arg *);
512:	void fib6_rules_cleanup(void);
51:	int fib6_rules_dump(struct net *, struct notifier_block *, struct netlink_ext_ack *);
506:	int fib6_rules_init(void);
57:	unsigned int fib6_rules_seq_read(struct net *);
195:	static int __fib6_rule_action(struct fib_rule *, struct flowi *, int, struct fib_lookup_arg *);
398:	static int fib6_rule_compare(struct fib_rule *, struct fib_rule_hdr *, struct nlattr **);
347:	static int fib6_rule_configure(struct fib_rule *, struct sk_buff *, struct fib_rule_hdr *, struct nlattr **, struct netlink_ext_ack *);
387:	static int fib6_rule_delete(struct fib_rule *);
423:	static int fib6_rule_fill(struct fib_rule *, struct sk_buff *, struct fib_rule_hdr *);
443:	static size_t fib6_rule_nlmsg_payload(struct fib_rule *);
132:	static int fib6_rule_saddr(struct net *, struct fib_rule *, int, struct flowi6 *, const struct net_device *);
494:	static void fib6_rules_net_exit(struct net *);
467:	static int fib6_rules_net_init(struct net *);

File net/ipv6/icmp.c:
447:	void icmp6_send(struct sk_buff *, u8, u8, __u32, const struct in6_addr *, const struct inet6_skb_parm *);
1085:	void icmpv6_cleanup(void);
1127:	int icmpv6_err_convert(u8, u8, int *);
998:	void icmpv6_flow_init(struct sock *, struct flowi6 *, u8, const struct in6_addr *, const struct in6_addr *, int);
1060:	int icmpv6_init(void);
811:	void icmpv6_notify(struct sk_buff *, u8, u8, __be32);
641:	void icmpv6_param_prob(struct sk_buff *, u8, int);
275:	void icmpv6_push_pending_frames(struct sock *, struct flowi6 *, struct icmp6hdr *, int);
653:	int ip6_err_gen_icmpv6_unreach(struct sk_buff *, int, int, unsigned int);
1200:	struct ctl_table *ipv6_icmp_sysctl_init(struct net *);
713:	static void icmpv6_echo_reply(struct sk_buff *);
83:	static int icmpv6_err(struct sk_buff *, struct inet6_skb_parm *, u8, u8, int, __be32);
319:	static int icmpv6_getfrag(void *, char *, int, int, int, struct sk_buff *);
185:	static bool icmpv6_global_allow(struct net *, int);
859:	static int icmpv6_rcv(struct sk_buff *);
356:	static struct dst_entry *icmpv6_route_lookup(struct net *, struct sk_buff *, struct sock *, struct flowi6 *);
1014:	static void icmpv6_sk_exit(struct net *);
1023:	static int icmpv6_sk_init(struct net *);
199:	static bool icmpv6_xrlim_allow(struct sock *, u8, struct flowi6 *);

File net/ipv6/inet6_connection_sock.c:
59:	void inet6_csk_addr2sockaddr(struct sock *, struct sockaddr *);
27:	struct dst_entry *inet6_csk_route_req(const struct sock *, struct flowi6 *, const struct request_sock *, u8);
142:	struct dst_entry *inet6_csk_update_pmtu(struct sock *, u32);
114:	int inet6_csk_xmit(struct sock *, struct sk_buff *, struct flowi *);
79:	static struct dst_entry *inet6_csk_route_socket(struct sock *, struct flowi6 *);

File net/ipv6/inet6_hashtables.c:
51:	struct sock *__inet6_lookup_established(struct net *, struct inet_hashinfo *, const struct in6_addr *, const __be16, const struct in6_addr *, const u16, const int, const int);
26:	u32 inet6_ehashfn(const struct net *, const struct in6_addr *, const u16, const struct in6_addr *, const __be16);
332:	int inet6_hash(struct sock *);
320:	int inet6_hash_connect(struct inet_timewait_death_row *, struct sock *);
229:	struct sock *inet6_lookup(struct net *, struct inet_hashinfo *, struct sk_buff *, int, const struct in6_addr *, const __be16, const struct in6_addr *, const __be16, const int);
187:	struct sock *inet6_lookup_listener(struct net *, struct inet_hashinfo *, struct sk_buff *, int, const struct in6_addr *, const __be16, const struct in6_addr *, const unsigned short, const int, const int);
246:	static int __inet6_check_established(struct inet_timewait_death_row *, struct sock *, const __u16, struct inet_timewait_sock **);
134:	static struct sock *inet6_lhash2_lookup(struct net *, struct sk_buff *, int, const struct in6_addr *, const __be16, const struct in6_addr *, const unsigned short, const int, const int, struct inet_listen_hashbucket *, struct inet_listen_hashbucket *);

File net/ipv6/ip6_checksum.c:
65:	int udp6_csum_init(struct sk_buff *, struct udphdr *, int);
115:	void udp6_set_csum(bool, struct sk_buff *, const struct in6_addr *, const struct in6_addr *, int);

File net/ipv6/ip6_fib.c:
389:	int call_fib6_entry_notifiers(struct net *, enum fib_event_type, struct fib6_info *, struct netlink_ext_ack *);
419:	int call_fib6_entry_notifiers_replace(struct net *, struct fib6_info *);
403:	int call_fib6_multipath_entry_notifiers(struct net *, enum fib_event_type, struct fib6_info *, unsigned int, struct netlink_ext_ack *);
1372:	int fib6_add(struct fib6_node *, struct fib6_info *, struct nl_info *, struct netlink_ext_ack *);
2262:	void fib6_clean_all(struct net *, int (*)(struct fib6_info *, void *), void *);
2268:	void fib6_clean_all_skip_notify(struct net *, int (*)(struct fib6_info *, void *), void *);
1997:	int fib6_del(struct fib6_info *, struct nl_info *);
1330:	void fib6_force_start_gc(struct net *);
2472:	void fib6_gc_cleanup(void);
271:	struct fib6_table *fib6_get_table(struct net *, u32);
146:	struct fib6_info *fib6_info_alloc(gfp_t, bool);
165:	void fib6_info_destroy_rcu(struct callback_head *);
2441:	int fib6_init(void);
1705:	struct fib6_node *fib6_locate(struct fib6_node *, const struct in6_addr *, int, const struct in6_addr *, int, bool);
712:	void fib6_metric_set(struct fib6_info *, int, u32);
253:	struct fib6_table *fib6_new_table(struct net *, u32);
1615:	struct fib6_node *fib6_node_lookup(struct fib6_node *, const struct in6_addr *, const struct in6_addr *);
2313:	void fib6_run_gc(unsigned long, struct net *, bool);
478:	int fib6_tables_dump(struct net *, struct notifier_block *, struct netlink_ext_ack *);
344:	unsigned int fib6_tables_seq_read(struct net *);
106:	void fib6_update_sernum(struct net *, struct fib6_info *);
1358:	void fib6_update_sernum_stub(struct net *, struct fib6_info *);
1352:	void fib6_update_sernum_upto_root(struct net *, struct fib6_info *);
2241:	static void __fib6_clean_all(struct net *, int (*)(struct fib6_info *, void *), int, void *, bool);
953:	static void __fib6_drop_pcpu_from(struct fib6_nh *, const struct fib6_info *, const struct fib6_table *);
738:	static struct fib6_node *fib6_add_1(struct net *, struct fib6_node *, struct in6_addr *, int, int, int, struct netlink_ext_ack *, struct fib6_table *, int);
1064:	static int fib6_add_rt2node(struct fib6_node *, struct fib6_info *, struct nl_info *, struct netlink_ext_ack *);
2286:	static int fib6_age(struct fib6_info *, void *);
2164:	static int fib6_clean_node(struct fib6_walker *);
2221:	static void fib6_clean_tree(struct net *, struct fib6_node *, int (*)(struct fib6_info *, void *), int, void *, bool);
1900:	static void fib6_del_route(struct fib6_node *, struct fib6_info **, struct nl_info *, struct fib6_table *);
565:	static int fib6_dump_done(struct netlink_callback *);
514:	static int fib6_dump_node(struct fib6_walker *);
571:	static int fib6_dump_table(struct fib6_table *, struct netlink_callback *, struct sk_buff *, struct sk_buff *);
2275:	static void fib6_flush_trees(struct net *);
2341:	static void fib6_gc_timer_cb(struct timer_list *);
1655:	static struct fib6_node *fib6_locate_1(struct fib6_node *, const struct in6_addr *, int, bool, int);
2414:	static void fib6_net_exit(struct net *);
2348:	static int fib6_net_init(struct net *);
991:	static int fib6_nh_drop_pcpu_from(struct fib6_nh *, void *);
456:	static int fib6_node_dump(struct fib6_walker *);
1546:	static struct fib6_node *fib6_node_lookup_1(struct fib6_node *, struct lookup_args *);
1024:	static void fib6_purge_rt(struct fib6_info *, struct fib6_node *, struct net *);
1775:	static struct fib6_node *fib6_repair_tree(struct net *, struct fib6_node *, struct fib6_table *);
2150:	static int fib6_walk(struct net *, struct fib6_walker *);
2060:	static int fib6_walk_continue(struct fib6_walker *);
616:	static int inet6_dump_fib(struct sk_buff *, struct netlink_callback *);
2577:	static void *ipv6_route_seq_next(struct seq_file *, void *, loff_t *);
2531:	static void ipv6_route_seq_setup_walk(struct ipv6_route_iter *, struct net *);
2663:	static int ipv6_route_seq_show(struct seq_file *, void *);
2613:	static void *ipv6_route_seq_start(struct seq_file *, loff_t *);
2681:	static void ipv6_route_seq_stop(struct seq_file *, void *);
2512:	static int ipv6_route_yield(struct fib6_walker *);
198:	static void node_free_rcu(struct callback_head *);

File net/ipv6/ip6_flowlabel.c:
259:	struct ip6_flowlabel *__fl6_sock_lookup(struct sock *, __be32);
281:	void fl6_free_socklist(struct sock *);
312:	struct ipv6_txoptions *fl6_merge_options(struct ipv6_txoptions *, struct ip6_flowlabel *, struct ipv6_txoptions *);
902:	void ip6_flowlabel_cleanup(void);
897:	int ip6_flowlabel_init(void);
722:	int ipv6_flowlabel_opt(struct sock *, sockptr_t, int);
500:	int ipv6_flowlabel_opt_get(struct sock *, struct in6_flowlabel_req *, int);
350:	static int fl6_renew(struct ip6_flowlabel *, unsigned long, unsigned long);
373:	static struct ip6_flowlabel *fl_create(struct net *, struct sock *, struct in6_flowlabel_req *, sockptr_t, int, int *);
104:	static void fl_free_rcu(struct callback_head *);
85:	static struct ip6_flowlabel *fl_lookup(struct net *, __be32);
126:	static void fl_release(struct ip6_flowlabel *);
148:	static void ip6_fl_gc(struct timer_list *);
886:	static void ip6_flowlabel_net_exit(struct net *);
864:	static int ip6_flowlabel_proc_init(struct net *);
770:	static struct ip6_flowlabel *ip6fl_get_next(struct ip6_flowlabel *, struct seq_file *, struct ip6_flowlabel *, struct seq_file *);
814:	static void *ip6fl_seq_next(struct seq_file *, void *, loff_t *);
832:	static int ip6fl_seq_show(struct seq_file *, void *);
803:	static void *ip6fl_seq_start(struct seq_file *, loff_t *);
826:	static void ip6fl_seq_stop(struct seq_file *, void *);
607:	static int ipv6_flowlabel_get(struct sock *, struct in6_flowlabel_req *, sockptr_t, int);
575:	static int ipv6_flowlabel_renew(struct sock *, struct in6_flowlabel_req *);

File net/ipv6/ip6_icmp.c:
52:	void icmpv6_ndo_send(struct sk_buff *, u8, u8, __u32);

File net/ipv6/ip6_input.c:
471:	int ip6_input(struct sk_buff *);
479:	int ip6_mc_input(struct sk_buff *);
351:	void ip6_protocol_deliver_rcu(struct net *, struct sk_buff *, int, bool);
66:	int ip6_rcv_finish(struct net *, struct sock *, struct sk_buff *);
311:	void ipv6_list_rcv(struct list_head *, struct packet_type *, struct net_device *);
290:	int ipv6_rcv(struct sk_buff *, struct net_device *, struct packet_type *, struct net_device *);
461:	static int ip6_input_finish(struct net *, struct sock *, struct sk_buff *);
105:	static void ip6_list_rcv_finish(struct net *, struct list_head *, struct sock *);
145:	static struct sk_buff *ip6_rcv_core(struct sk_buff *, struct net_device *, struct net *);
49:	static void ip6_rcv_finish_core(struct sk_buff *, struct sock *, struct net *, struct net *);
302:	static void ip6_sublist_rcv(struct list_head *, struct net_device *, struct net *);
79:	static void ip6_sublist_rcv_finish(struct list_head *);

File net/ipv6/ip6_offload.c:
320:	int ipv6_gro_complete(struct sk_buff *, int);
182:	struct sk_buff *ipv6_gro_receive(struct list_head *, struct sk_buff *);
362:	static int ip4ip6_gro_complete(struct sk_buff *, int);
305:	static struct sk_buff *ip4ip6_gro_receive(struct list_head *, struct sk_buff *);
387:	static struct sk_buff *ip4ip6_gso_segment(struct sk_buff *, netdev_features_t);
355:	static int ip6ip6_gro_complete(struct sk_buff *, int);
396:	static struct sk_buff *ip6ip6_gso_segment(struct sk_buff *, netdev_features_t);
38:	static int ipv6_gso_pull_exthdrs(struct sk_buff *, int);
73:	static struct sk_buff *ipv6_gso_segment(struct sk_buff *, netdev_features_t);
428:	static int ipv6_offload_init(void);
348:	static int sit_gro_complete(struct sk_buff *, int);
378:	static struct sk_buff *sit_gso_segment(struct sk_buff *, netdev_features_t);
290:	static struct sk_buff *sit_ip6ip6_gro_receive(struct list_head *, struct sk_buff *);

File net/ipv6/ip6_output.c:
1855:	struct sk_buff *__ip6_make_skb(struct sock *, struct sk_buff_head *, struct inet_cork_full *, struct inet6_cork *);
1798:	int ip6_append_data(struct sock *, int (*)(void *, char *, int, int, int, struct sk_buff *), void *, int, int, struct ipcm6_cookie *, struct flowi6 *, struct rt6_info *, unsigned int);
249:	bool ip6_autoflowlabel(struct net *, const struct ipv6_pinfo *);
1198:	int ip6_dst_lookup(struct net *, struct sock *, struct dst_entry **, struct flowi6 *);
1218:	struct dst_entry *ip6_dst_lookup_flow(struct net *, const struct sock *, struct flowi6 *, const struct in6_addr *);
1286:	struct dst_entry *ip6_dst_lookup_tunnel(struct sk_buff *, struct net_device *, struct net *, struct socket *, struct in6_addr *, const struct ip_tunnel_info *, u8, bool);
1978:	void ip6_flush_pending_frames(struct sock *);
488:	int ip6_forward(struct sk_buff *);
734:	void ip6_frag_init(struct sk_buff *, unsigned int, unsigned int, unsigned short, int, u8 *, u8, __be32, struct ip6_frag_state *);
755:	struct sk_buff *ip6_frag_next(struct sk_buff *, struct ip6_frag_state *);
668:	int ip6_fraglist_init(struct sk_buff *, unsigned int, u8 *, u8, __be32, struct ip6_fraglist_iter *);
709:	void ip6_fraglist_prepare(struct sk_buff *, struct ip6_fraglist_iter *);
831:	int ip6_fragment(struct net *, struct sock *, struct sk_buff *, int (*)(struct net *, struct sock *, struct sk_buff *));
1985:	struct sk_buff *ip6_make_skb(struct sock *, int (*)(void *, char *, int, int, int, struct sk_buff *), void *, int, int, struct ipcm6_cookie *, struct flowi6 *, struct rt6_info *, unsigned int, struct inet_cork_full *);
229:	int ip6_output(struct net *, struct sock *, struct sk_buff *);
1949:	int ip6_push_pending_frames(struct sock *);
1931:	int ip6_send_skb(struct sk_buff *);
1252:	struct dst_entry *ip6_sk_dst_lookup_flow(struct sock *, struct flowi6 *, const struct in6_addr *, bool);
263:	int ip6_xmit(const struct sock *, struct sk_buff *, struct flowi6 *, __u32, struct ipv6_txoptions *, int, u32);
1452:	static int __ip6_append_data(struct sock *, struct flowi6 *, struct sk_buff_head *, struct inet_cork *, struct page_frag *, int (*)(void *, char *, int, int, int, struct sk_buff *), void *, int, int, unsigned int, struct ipcm6_cookie *, struct inet6_cork *, struct inet6_cork *);
189:	static int __ip6_finish_output(struct net *, struct sock *, struct sk_buff *);
1961:	static void __ip6_flush_pending_frames(struct sock *, struct sk_buff_head *, struct inet_cork_full *, struct inet6_cork *);
364:	static int ip6_call_ra_chain(struct sk_buff *, int);
648:	static void ip6_copy_metadata(struct sk_buff *, struct sk_buff *);
1835:	static void ip6_cork_release(struct inet_cork_full *, struct inet6_cork *);
1069:	static int ip6_dst_lookup_tail(struct net *, const struct sock *, struct dst_entry **, struct flowi6 *);
213:	static int ip6_finish_output(struct net *, struct sock *, struct sk_buff *);
59:	static int ip6_finish_output2(struct net *, struct sock *, struct sk_buff *);
157:	static int ip6_finish_output_gso_slowpath_drop(struct net *, struct sock *, struct sk_buff *, unsigned int);
451:	static int ip6_forward_finish(struct net *, struct sock *, struct sk_buff *);
399:	static int ip6_forward_proxy_check(struct sk_buff *);
1375:	static int ip6_setup_cork(struct sock *, struct inet_cork_full *, struct inet6_cork *, struct ipcm6_cookie *, struct rt6_info *, struct flowi6 *);

File net/ipv6/ip6mr.c:
1395:	void ip6_mr_cleanup(void);
1353:	int ip6_mr_init(void);
2189:	int ip6_mr_input(struct sk_buff *);
1805:	int ip6_mroute_getsockopt(struct sock *, int, char *, int *);
1632:	int ip6_mroute_setsockopt(struct sock *, int, sockptr_t, unsigned int);
1930:	int ip6mr_compat_ioctl(struct sock *, unsigned int, void *);
2256:	int ip6mr_get_route(struct net *, struct sk_buff *, struct rtmsg *, u32);
1855:	int ip6mr_ioctl(struct sock *, int, void *);
281:	bool ip6mr_rule_default(const struct fib_rule *);
1573:	int ip6mr_sk_done(struct sock *);
1609:	bool mroute6_is_socket(struct net *, struct sk_buff *);
2370:	static int _ip6mr_fill_mroute(struct mr_table *, struct sk_buff *, u32, u32, struct mr_mfc *, int, int);
686:	static int call_ip6mr_mfc_entry_notifiers(struct net *, enum fib_event_type, struct mfc6_cache *, u32);
676:	static int call_ip6mr_vif_entry_notifiers(struct net *, enum fib_event_type, mifi_t, u32, struct vif_device *, struct vif_device *);
2087:	static void ip6_mr_forward(struct net *, struct mr_table *, struct net_device *, struct sk_buff *, struct mfc6_cache *);
948:	static struct mfc6_cache *ip6mr_cache_find_any(struct mr_table *, struct in6_addr *, mifi_t);
754:	static void ip6mr_cache_free_rcu(struct callback_head *);
1039:	static int ip6mr_cache_report(struct mr_table *, struct sk_buff *, mifi_t, int);
1004:	static void ip6mr_cache_resolve(struct net *, struct mr_table *, struct mfc6_cache *, struct mfc6_cache *);
1134:	static int ip6mr_cache_unresolved(struct mr_table *, mifi_t, struct sk_buff *, struct net_device *);
770:	static void ip6mr_destroy_unres(struct mr_table *, struct mfc6_cache *);
1233:	static int ip6mr_device_event(struct notifier_block *, unsigned long, void *);
1263:	static int ip6mr_dump(struct net *, struct notifier_block *, struct netlink_ext_ack *);
132:	static int ip6mr_fib_lookup(struct net *, struct flowi6 *, struct mr_table **);
2326:	static int ip6mr_fill_mroute(struct mr_table *, struct sk_buff *, u32, u32, struct mfc6_cache *, int, int);
2002:	static int ip6mr_forward2(struct net *, struct mr_table *, struct sk_buff *, int);
1989:	static int ip6mr_forward2_finish(struct net *, struct sock *, struct sk_buff *);
342:	static int ip6mr_hash_cmp(struct rhashtable_compare_arg *, const void *);
1406:	static int ip6mr_mfc_add(struct net *, struct mr_table *, struct mf6cctl *, int, int);
1211:	static int ip6mr_mfc_delete(struct mr_table *, struct mf6cctl *, int);
104:	static struct mr_table *ip6mr_mr_table_iter(struct net *, struct mr_table *);
1338:	static void ip6mr_net_exit(struct net *);
1303:	static int ip6mr_net_init(struct net *);
361:	static void ip6mr_new_table_set(struct mr_table *, struct net *);
2489:	static int ip6mr_rtm_dumproute(struct sk_buff *, struct netlink_callback *);
153:	static int ip6mr_rule_action(struct fib_rule *, struct flowi *, int, struct fib_lookup_arg *);
196:	static int ip6mr_rule_compare(struct fib_rule *, struct fib_rule_hdr *, struct nlattr **);
189:	static int ip6mr_rule_configure(struct fib_rule *, struct sk_buff *, struct fib_rule_hdr *, struct nlattr **, struct netlink_ext_ack *);
202:	static int ip6mr_rule_fill(struct fib_rule *, struct sk_buff *, struct fib_rule_hdr *);
180:	static int ip6mr_rule_match(struct fib_rule *, struct flowi *, int);
270:	static int ip6mr_rules_dump(struct net *, struct notifier_block *, struct netlink_ext_ack *);
257:	static void ip6mr_rules_exit(struct net *);
1256:	static unsigned int ip6mr_seq_read(struct net *);
837:	static void ip6mr_update_thresholds(struct mr_table *, struct mr_mfc *, unsigned char *);
428:	static int ip6mr_vif_seq_show(struct seq_file *, void *);
405:	static void *ip6mr_vif_seq_start(struct seq_file *, loff_t *);
422:	static void ip6mr_vif_seq_stop(struct seq_file *, void *);
796:	static void ipmr_do_expire_process(struct mr_table *);
820:	static void ipmr_expire_process(struct timer_list *);
469:	static int ipmr_mfc_seq_show(struct seq_file *, void *);
457:	static void *ipmr_mfc_seq_start(struct seq_file *, loff_t *);
860:	static int mif6_add(struct net *, struct mr_table *, struct mif6ctl *, int);
695:	static int mif6_delete(struct mr_table *, int, int, struct list_head *);
2399:	static void mr6_netlink_event(struct mr_table *, struct mfc6_cache *, int);
1499:	static void mroute_clean_tables(struct mr_table *, int);
2441:	static void mrt6msg_netlink_event(struct mr_table *, struct sk_buff *);
521:	static int pim6_rcv(struct sk_buff *);
623:	static int reg_vif_get_iflink(const struct net_device *);
633:	static void reg_vif_setup(struct net_device *);
592:	static netdev_tx_t reg_vif_xmit(struct sk_buff *, struct net_device *);

File net/ipv6/ipv6_sockglue.c:
58:	int ip6_ra_control(struct sock *, int);
1466:	int ipv6_getsockopt(struct sock *, int, int, char *, int *);
992:	int ipv6_setsockopt(struct sock *, int, int, sockptr_t, unsigned int);
100:	struct ipv6_txoptions *ipv6_update_options(struct sock *, struct ipv6_txoptions *);
1077:	static int compat_ipv6_get_msfilter(struct sock *, void *, int *);
298:	static int compat_ipv6_mcast_join_leave(struct sock *, int, sockptr_t, int);
234:	static int compat_ipv6_set_mcast_msfilter(struct sock *, sockptr_t, int);
139:	static int copy_group_source_from_sockptr(struct group_source_req *, sockptr_t, int);
1117:	static int do_ipv6_getsockopt(struct sock *, int, char *, int *, unsigned int, int);
162:	static int do_ipv6_mcast_group_source(struct sock *, int, sockptr_t, int);
392:	static int do_ipv6_setsockopt(struct sock *, int, sockptr_t, unsigned int, int);
1048:	static int ipv6_get_msfilter(struct sock *, void *, int *, int);
278:	static int ipv6_mcast_join_leave(struct sock *, int, sockptr_t, int);
203:	static int ipv6_set_mcast_msfilter(struct sock *, sockptr_t, int);
318:	static int ipv6_set_opt_hdr(struct sock *, int, sockptr_t, int);

File net/ipv6/mcast.c:
942:	int __ipv6_dev_mc_dec(struct inet6_dev *, const struct in6_addr *);
289:	void __ipv6_sock_mc_close(struct sock *);
3010:	void igmp6_cleanup(void);
1333:	int igmp6_event_query(struct sk_buff *);
1453:	int igmp6_event_report(struct sk_buff *);
3000:	int igmp6_init(void);
3015:	void igmp6_late_cleanup(void);
3005:	int igmp6_late_init(void);
617:	bool inet6_mc_check(struct sock *, const struct in6_addr *, const struct in6_addr *);
550:	int ip6_mc_msfget(struct sock *, struct group_filter *, struct __kernel_sockaddr_storage *);
460:	int ip6_mc_msfilter(struct sock *, struct group_filter *, struct __kernel_sockaddr_storage *);
328:	int ip6_mc_source(int, int, struct sock *, struct group_source_req *);
990:	bool ipv6_chk_mcast_addr(struct net_device *, const struct in6_addr *, const struct in6_addr *);
970:	int ipv6_dev_mc_dec(struct net_device *, const struct in6_addr *);
933:	int ipv6_dev_mc_inc(struct net_device *, const struct in6_addr *);
2096:	void ipv6_mc_dad_complete(struct inet6_dev *);
2592:	void ipv6_mc_destroy_dev(struct inet6_dev *);
2526:	void ipv6_mc_down(struct inet6_dev *);
2574:	void ipv6_mc_init_dev(struct inet6_dev *);
2519:	void ipv6_mc_remap(struct inet6_dev *);
2507:	void ipv6_mc_unmap(struct inet6_dev *);
2557:	void ipv6_mc_up(struct inet6_dev *);
317:	void ipv6_sock_mc_close(struct sock *);
217:	int ipv6_sock_mc_drop(struct sock *, int, const struct in6_addr *);
202:	int ipv6_sock_mc_join(struct sock *, int, const struct in6_addr *);
208:	int ipv6_sock_mc_join_ssm(struct sock *, int, const struct in6_addr *, unsigned int);
880:	static int __ipv6_dev_mc_inc(struct net_device *, const struct in6_addr *, unsigned int);
133:	static int __ipv6_sock_mc_join(struct sock *, int, const struct in6_addr *, unsigned int);
1724:	static struct sk_buff *add_grec(struct sk_buff *, struct ifmcaddr6 *, int, int, int, int);
1700:	static struct sk_buff *add_grhead(struct sk_buff *, struct ifmcaddr6 *, int, struct mld2_grec **, unsigned int);
656:	static void igmp6_group_added(struct ifmcaddr6 *);
692:	static void igmp6_group_dropped(struct ifmcaddr6 *);
1079:	static void igmp6_group_queried(struct ifmcaddr6 *, unsigned long);
2404:	static void igmp6_join_group(struct ifmcaddr6 *);
2715:	static struct ifmcaddr6 *igmp6_mc_get_idx(loff_t, struct seq_file *, struct seq_file *);
2692:	static struct ifmcaddr6 *igmp6_mc_get_next(struct ifmcaddr6 *, struct seq_file *, struct ifmcaddr6 *, struct seq_file *);
2731:	static void *igmp6_mc_seq_next(struct seq_file *, void *, loff_t *);
2752:	static int igmp6_mc_seq_show(struct seq_file *, void *);
2724:	static void *igmp6_mc_seq_start(struct seq_file *, loff_t *);
2739:	static void igmp6_mc_seq_stop(struct seq_file *, void *);
2846:	static struct ip6_sf_list *igmp6_mcf_get_idx(loff_t, struct seq_file *, struct seq_file *);
2814:	static struct ip6_sf_list *igmp6_mcf_get_next(struct ip6_sf_list *, struct seq_file *, struct ip6_sf_list *, struct seq_file *);
2862:	static void *igmp6_mcf_seq_next(struct seq_file *, void *, loff_t *);
2889:	static int igmp6_mcf_seq_show(struct seq_file *, void *);
2855:	static void *igmp6_mcf_seq_start(struct seq_file *, loff_t *);
2873:	static void igmp6_mcf_seq_stop(struct seq_file *, void *);
2988:	static void igmp6_net_exit(struct net *);
2952:	static int igmp6_net_init(struct net *);
1975:	static void igmp6_send(struct in6_addr *, struct net_device *, int);
2489:	static void igmp6_timer_handler(struct timer_list *);
2323:	static int ip6_mc_add_src(struct inet6_dev *, const struct in6_addr *, int, int, const struct in6_addr *, int);
2122:	static int ip6_mc_del1_src(struct ifmcaddr6 *, int, const struct in6_addr *);
2159:	static int ip6_mc_del_src(struct inet6_dev *, const struct in6_addr *, int, int, const struct in6_addr *, int);
259:	static struct inet6_dev *ip6_mc_find_dev_rcu(struct net *, const struct in6_addr *, int);
1561:	static void ip6_mc_hdr(struct sock *, struct sk_buff *, struct net_device *, const struct in6_addr *, const struct in6_addr *, int, int);
2427:	static int ip6_mc_leave_src(struct sock *, struct ipv6_mc_socklist *, struct inet6_dev *);
2637:	static int ipv6_mc_netdev_event(struct notifier_block *, unsigned long, void *);
2622:	static void ipv6_mc_rejoin_groups(struct inet6_dev *);
1503:	static bool is_in(struct ifmcaddr6 *, struct ip6_sf_list *, int, int, int);
839:	static void ma_put(struct ifmcaddr6 *);
847:	static struct ifmcaddr6 *mca_alloc(struct inet6_dev *, const struct in6_addr *, unsigned int);
724:	static void mld_add_delrec(struct inet6_dev *, struct ifmcaddr6 *);
801:	static void mld_clear_delrec(struct inet6_dev *);
2108:	static void mld_dad_timer_expire(struct timer_list *);
762:	static void mld_del_delrec(struct inet6_dev *, struct ifmcaddr6 *);
1030:	static void mld_gq_start_timer(struct inet6_dev *);
2458:	static void mld_gq_timer_expire(struct timer_list *);
2481:	static void mld_ifc_event(struct inet6_dev *);
1046:	static void mld_ifc_start_timer(struct inet6_dev *, unsigned long);
2467:	static void mld_ifc_timer_expire(struct timer_list *);
1586:	static struct sk_buff *mld_newpack(struct inet6_dev *, unsigned int);
1318:	static int mld_process_v2(struct inet6_dev *, struct mld2_query *, unsigned long *);
1902:	static void mld_send_cr(struct inet6_dev *);
2071:	static void mld_send_initial_cr(struct inet6_dev *);
1849:	static void mld_send_report(struct inet6_dev *, struct ifmcaddr6 *);
1636:	static void mld_sendpack(struct sk_buff *);
2245:	static void sf_markstate(struct ifmcaddr6 *);
2259:	static int sf_setstate(struct ifmcaddr6 *);

File net/ipv6/mcast_snoop.c:
172:	int ipv6_mc_check_mld(struct sk_buff *);
106:	static int ipv6_mc_check_mld_msg(struct sk_buff *);
73:	static int ipv6_mc_check_mld_query(struct sk_buff *);
129:	static __sum16 ipv6_mc_validate_checksum(struct sk_buff *);

File net/ipv6/ndisc.c:
145:	void __ndisc_fill_addr_option(struct sk_buff *, int, void *, int, int);
1957:	void ndisc_cleanup(void);
1845:	int ndisc_ifinfo_sysctl_change(struct ctl_table *, int, void *, size_t *, loff_t *);
1919:	int ndisc_init(void);
1952:	void ndisc_late_cleanup(void);
1947:	int ndisc_late_init(void);
287:	int ndisc_mc_map(const struct in6_addr *, char *, struct net_device *, int);
218:	struct ndisc_options *ndisc_parse_options(const struct net_device *, u8 *, int, struct ndisc_options *);
1730:	int ndisc_rcv(struct sk_buff *);
519:	void ndisc_send_na(struct net_device *, const struct in6_addr *, const struct in6_addr *, bool, bool, bool, bool);
601:	void ndisc_send_ns(struct net_device *, const struct in6_addr *, const struct in6_addr *, const struct in6_addr *, u64);
1579:	void ndisc_send_redirect(struct sk_buff *, const struct in6_addr *);
653:	void ndisc_send_rs(struct net_device *, const struct in6_addr *, const struct in6_addr *);
761:	void ndisc_update(const struct net_device *, struct neighbour *, const u8 *, u8, u32, u8, struct ndisc_options *);
412:	static struct sk_buff *ndisc_alloc_skb(struct net_device *, int);
399:	static bool ndisc_allow_add(const struct net_device *, struct netlink_ext_ack *);
325:	static int ndisc_constructor(struct neighbour *);
706:	static void ndisc_error_report(struct neighbour *, struct sk_buff *);
313:	static u32 ndisc_hash(const void *, const struct net_device *, __u32 *);
1711:	static int ndisc_is_multicast(const void *);
320:	static bool ndisc_key_eq(const struct neighbour *, const void *);
1909:	static void ndisc_net_exit(struct net *);
1884:	static int ndisc_net_init(struct net *);
1782:	static int ndisc_netdev_event(struct notifier_block *, unsigned long, void *);
183:	static struct nd_opt_hdr *ndisc_next_option(struct nd_opt_hdr *, struct nd_opt_hdr *);
206:	static struct nd_opt_hdr *ndisc_next_useropt(const struct net_device *, struct nd_opt_hdr *, struct nd_opt_hdr *);
1124:	static void ndisc_ra_useropt(struct sk_buff *, struct nd_opt_hdr *);
954:	static void ndisc_recv_na(struct sk_buff *);
770:	static void ndisc_recv_ns(struct sk_buff *);
1068:	static void ndisc_recv_rs(struct sk_buff *);
1523:	static void ndisc_redirect_rcv(struct sk_buff *);
1170:	static void ndisc_router_discovery(struct sk_buff *);
469:	static void ndisc_send_skb(struct sk_buff *, const struct in6_addr *, const struct in6_addr *);
575:	static void ndisc_send_unsol_na(struct net_device *);
718:	static void ndisc_solicit(struct neighbour *, struct sk_buff *);
1830:	static void ndisc_warn_deprecated_sysctl(struct ctl_table *, const char *, const char *);
373:	static int pndisc_constructor(struct pneigh_entry *);
386:	static void pndisc_destructor(struct pneigh_entry *);
1705:	static void pndisc_redo(struct sk_buff *);

File net/ipv6/netfilter.c:
94:	int __nf_ip6_route(struct net *, struct dst_entry **, struct flowi *, bool);
117:	int br_ip6_fragment(struct net *, struct sock *, struct sk_buff *, struct nf_bridge_frag_data *, int (*)(struct net *, struct sock *, const struct nf_bridge_frag_data *, struct sk_buff *));
23:	int ip6_route_me_harder(struct net *, struct sock *, struct sk_buff *);
264:	void ipv6_netfilter_fini(void);
255:	int ipv6_netfilter_init(void);
79:	static int nf_ip6_reroute(struct sk_buff *, const struct nf_queue_entry *);

File net/ipv6/output_core.c:
130:	int __ip6_local_out(struct net *, struct sock *, struct sk_buff *);
110:	int ip6_dst_hoplimit(struct dst_entry *);
64:	int ip6_find_1stfragopt(struct sk_buff *, u8 **);
155:	int ip6_local_out(struct net *, struct sock *, struct sk_buff *);
35:	__be32 ipv6_proxy_select_ident(struct net *, struct sk_buff *);
53:	__be32 ipv6_select_ident(struct net *, const struct in6_addr *, const struct in6_addr *);

File net/ipv6/ping.c:
258:	void pingv6_exit(void);
238:	int pingv6_init(void);
35:	static int dummy_icmpv6_err_convert(u8, u8, int *);
31:	static void dummy_ip6_datagram_recv_ctl(struct sock *, struct msghdr *, struct sk_buff *);
41:	static int dummy_ipv6_chk_addr(struct net *, const struct in6_addr *, const struct net_device *, int);
39:	static void dummy_ipv6_icmp_error(struct sock *, struct sk_buff *, int, __be16, u32, u8 *);
26:	static int dummy_ipv6_recv_error(struct sock *, struct msghdr *, int, int *);
227:	static void ping_v6_proc_exit_net(struct net *);
219:	static int ping_v6_proc_init_net(struct net *);
47:	static int ping_v6_sendmsg(struct sock *, struct msghdr *, size_t);
198:	static int ping_v6_seq_show(struct seq_file *, void *);
193:	static void *ping_v6_seq_start(struct seq_file *, loff_t *);

File net/ipv6/proc.c:
314:	void ipv6_misc_proc_exit(void);
309:	int ipv6_misc_proc_init(void);
242:	int snmp6_register_dev(struct inet6_dev *);
263:	int snmp6_unregister_dev(struct inet6_dev *);
297:	static void ipv6_proc_exit_net(struct net *);
275:	static int ipv6_proc_init_net(struct net *);
229:	static int snmp6_dev_seq_show(struct seq_file *, void *);
213:	static int snmp6_seq_show(struct seq_file *, void *);
143:	static void snmp6_seq_show_icmpv6msg(struct seq_file *, atomic_long_t *);
179:	static void snmp6_seq_show_item(struct seq_file *, void *, const struct snmp_mib *, atomic_long_t *);
200:	static void snmp6_seq_show_item64(struct seq_file *, void *, size_t, const struct snmp_mib *);
34:	static int sockstat6_seq_show(struct seq_file *, void *);

File net/ipv6/protocol.c:
52:	int inet6_add_offload(const struct net_offload *, unsigned char);
28:	int inet6_add_protocol(const struct inet6_protocol *, unsigned char);
59:	int inet6_del_offload(const struct net_offload *, unsigned char);
35:	int inet6_del_protocol(const struct inet6_protocol *, unsigned char);

File net/ipv6/raw.c:
69:	struct sock *__raw_v6_lookup(struct net *, struct sock *, unsigned short, const struct in6_addr *, const struct in6_addr *, int, int);
361:	void raw6_icmp_error(struct sk_buff *, int, u8, u8, int, __be32);
230:	bool raw6_local_deliver(struct sk_buff *, int);
1305:	void raw6_proc_exit(void);
1300:	int raw6_proc_init(void);
1350:	void rawv6_exit(void);
1345:	int rawv6_init(void);
133:	int rawv6_mh_filter_register(mh_filter_t *);
140:	int rawv6_mh_filter_unregister(mh_filter_t *);
416:	int rawv6_rcv(struct sock *, struct sk_buff *);
1181:	static int compat_rawv6_ioctl(struct sock *, unsigned int, unsigned long);
157:	static bool ipv6_raw_deliver(struct sk_buff *, int);
1205:	static void raw6_destroy(struct sock *);
1290:	static void raw6_exit_net(struct net *);
735:	static int raw6_getfrag(void *, char *, int, int, int, struct sk_buff *);
1281:	static int raw6_init_net(struct net *);
1261:	static int raw6_seq_show(struct seq_file *, void *);
242:	static int rawv6_bind(struct sock *, struct sockaddr *, int);
1197:	static void rawv6_close(struct sock *, long);
1128:	static int rawv6_getsockopt(struct sock *, int, int, char *, int *);
1214:	static int rawv6_init_sk(struct sock *);
1151:	static int rawv6_ioctl(struct sock *, int, unsigned long);
539:	static int rawv6_push_pending_frames(struct sock *, struct flowi6 *, struct raw6_sock *);
390:	static int rawv6_rcv_skb(struct sock *, struct sk_buff *);
462:	static int rawv6_recvmsg(struct sock *, struct msghdr *, size_t, int, int, int *);
618:	static int rawv6_send_hdrinc(struct sock *, struct msghdr *, int, struct flowi6 *, struct dst_entry **, unsigned int, const struct sockcm_cookie *);
766:	static int rawv6_sendmsg(struct sock *, struct msghdr *, size_t);
1067:	static int rawv6_setsockopt(struct sock *, int, int, sockptr_t, unsigned int);

File net/ipv6/reassembly.c:
605:	void ipv6_frag_exit(void);
567:	int ipv6_frag_init(void);
73:	static void ip6_frag_expire(struct timer_list *);
106:	static int ip6_frag_queue(struct frag_queue *, struct sk_buff *, struct frag_hdr *, int, u32 *);
250:	static int ip6_frag_reasm(struct frag_queue *, struct sk_buff *, struct sk_buff *, struct net_device *);
321:	static int ipv6_frag_rcv(struct sk_buff *);
547:	static void ipv6_frags_exit_net(struct net *);
524:	static int ipv6_frags_init_net(struct net *);
542:	static void ipv6_frags_pre_exit_net(struct net *);

File net/ipv6/route.c:
2913:	struct rt6_info *__ip6_route_redirect(struct net *, struct fib6_table *, struct flowi6 *, const struct sk_buff *, int);
4455:	struct fib6_info *addrconf_f6i_alloc(struct net *, struct inet6_dev *, const struct in6_addr *, bool, gfp_t);
6474:	int bpf_iter_ipv6_route(struct bpf_iter_meta *, struct fib6_info *);
3409:	int fib6_nh_init(struct net *, struct fib6_nh *, struct fib6_config *, gfp_t, struct netlink_ext_ack *);
3536:	void fib6_nh_release(struct fib6_nh *);
3573:	void fib6_nh_release_dsts(struct fib6_nh *);
6082:	void fib6_rt_update(struct net *, struct fib6_info *, struct nl_info *);
411:	void fib6_select_path(const struct net *, struct fib6_result *, struct flowi6 *, int, bool, const struct sk_buff *, int);
2174:	int fib6_table_lookup(struct net *, struct fib6_table *, int, struct flowi6 *, struct fib6_result *, int);
3149:	struct dst_entry *icmp6_dst_alloc(struct net_device *, struct flowi6 *);
6051:	void inet6_rt_notify(int, struct fib6_info *, struct nl_info *, unsigned int);
2529:	struct dst_entry *ip6_blackhole_route(struct net *, struct dst_entry *);
3788:	int ip6_del_rt(struct net *, struct fib6_info *, bool);
336:	struct rt6_info *ip6_dst_alloc(struct net *, struct net_device *, int);
1306:	int ip6_ins_rt(struct net *, struct fib6_info *);
3116:	u32 ip6_mtu_from_fib6(const struct fib6_result *, const struct in6_addr *, const struct in6_addr *);
202:	struct neighbour *ip6_neigh_lookup(const struct in6_addr *, struct net_device *, struct sk_buff *, const void *);
2204:	struct rt6_info *ip6_pol_route(struct net *, struct fib6_table *, int, struct flowi6 *, const struct sk_buff *, int);
2274:	struct rt6_info *ip6_pol_route_input(struct net *, struct fib6_table *, struct flowi6 *, const struct sk_buff *, int);
1197:	struct rt6_info *ip6_pol_route_lookup(struct net *, struct fib6_table *, struct flowi6 *, const struct sk_buff *, int);
2465:	struct rt6_info *ip6_pol_route_output(struct net *, struct fib6_table *, struct flowi6 *, const struct sk_buff *, int);
3017:	void ip6_redirect(struct sk_buff *, struct net *, int, u32, kuid_t);
3038:	void ip6_redirect_no_header(struct sk_buff *, struct net *, int);
3751:	int ip6_route_add(struct fib6_config *, gfp_t, struct netlink_ext_ack *);
6609:	void ip6_route_cleanup(void);
6509:	int ip6_route_init(void);
6456:	void ip6_route_init_special_entries(void);
2435:	void ip6_route_input(struct sk_buff *);
2283:	struct dst_entry *ip6_route_input_lookup(struct net *, struct net_device *, struct flowi6 *, const struct sk_buff *, int);
1253:	struct dst_entry *ip6_route_lookup(struct net *, struct flowi6 *, const struct sk_buff *, int);
2507:	struct dst_entry *ip6_route_output_flags(struct net *, const struct sock *, struct flowi6 *, int);
2474:	struct dst_entry *ip6_route_output_flags_noref(struct net *, const struct sock *, struct flowi6 *, int);
2845:	void ip6_sk_dst_store_flow(struct sock *, struct dst_entry *, const struct flowi6 *);
3056:	void ip6_sk_redirect(struct sk_buff *, struct sock *);
2823:	void ip6_sk_update_pmtu(struct sk_buff *, struct sock *, __be32);
2802:	void ip6_update_pmtu(struct sk_buff *, struct net *, __be32, int, u32, kuid_t);
4365:	int ipv6_route_ioctl(struct net *, unsigned int, struct in6_rtmsg *);
6273:	struct ctl_table *ipv6_route_sysctl_init(struct net *);
4268:	struct fib6_info *rt6_add_dflt_router(struct net *, const struct in6_addr *, struct net_device *, unsigned int);
2156:	void rt6_age_exceptions(struct fib6_info *, struct fib6_gc_args *, unsigned long);
4548:	void rt6_clean_tohost(struct net *, struct in6_addr *);
4799:	void rt6_disable_ip(struct net_device *, unsigned long);
5773:	int rt6_dump_route(struct fib6_info *, void *, unsigned int);
1771:	void rt6_flush_exceptions(struct fib6_info *);
4236:	struct fib6_info *rt6_get_dflt_router(struct net *, const struct in6_addr *, struct net_device *);
1260:	struct rt6_info *rt6_lookup(struct net *, const struct in6_addr *, const struct in6_addr *, int, const struct sk_buff *, int);
4866:	void rt6_mtu_change(struct net_device *, unsigned int);
2342:	u32 rt6_multipath_hash(const struct net *, const struct flowi6 *, const struct sk_buff *, struct flow_keys *);
4631:	void rt6_multipath_rebalance(struct fib6_info *);
4323:	void rt6_purge_dflt_routers(struct net *);
4511:	void rt6_remove_prefsrc(struct inet6_ifaddr *);
922:	int rt6_route_rcv(struct net_device *, u8 *, int, const struct in6_addr *);
4783:	void rt6_sync_down_dev(struct net_device *, unsigned long);
4670:	void rt6_sync_up(struct net_device *, unsigned char);
135:	void rt6_uncached_list_add(struct rt6_info *);
146:	void rt6_uncached_list_del(struct rt6_info *);
780:	static void __find_rr_leaf(struct fib6_info *, struct fib6_info *, u32, struct fib6_result *, struct fib6_info **, int, int, bool *, int *);
3767:	static int __ip6_del_rt(struct fib6_info *, struct nl_info *);
3798:	static int __ip6_del_rt_siblings(struct fib6_info *, struct fib6_config *);
2715:	static void __ip6_rt_update_pmtu(struct dst_entry *, const struct sock *, const struct ipv6hdr *, u32, bool);
1545:	static struct rt6_exception *__rt6_find_exception_rcu(struct rt6_exception_bucket **, const struct in6_addr *, const struct in6_addr *);
1512:	static struct rt6_exception *__rt6_find_exception_spinlock(struct rt6_exception_bucket **, const struct in6_addr *, const struct in6_addr *);
491:	static int __rt6_nh_dev_match(struct fib6_nh *, void *);
4299:	static void __rt6_purge_dflt_routers(struct net *, struct fib6_table *);
4525:	static int fib6_clean_tohost(struct fib6_info *, void *);
5116:	static int fib6_gw_from_attr(struct in6_addr *, struct nlattr *, struct netlink_ext_ack *);
4740:	static int fib6_ifdown(struct fib6_info *, void *);
4655:	static int fib6_ifup(struct fib6_info *, void *);
5676:	static int fib6_info_nh_uses_dev(struct fib6_nh *, void *);
2114:	static void fib6_nh_age_exceptions(const struct fib6_nh *, struct fib6_gc_args *, unsigned long);
3914:	static int fib6_nh_del_cached_rt(struct fib6_nh *, void *);
1940:	static int fib6_nh_find_match(struct fib6_nh *, void *);
1732:	static void fib6_nh_flush_exceptions(struct fib6_nh *, struct fib6_info *);
4812:	static int fib6_nh_mtu_change(struct fib6_nh *, void *);
2899:	static int fib6_nh_redirect_match(struct fib6_nh *, void *);
1826:	static int fib6_nh_remove_exception(const struct fib6_nh *, const struct rt6_info *, int);
4493:	static int fib6_remove_prefsrc(struct fib6_info *, void *);
726:	static bool find_match(struct fib6_nh *, u32, int, int, int *, bool *);
5368:	static int inet6_rtm_delroute(struct sk_buff *, struct nlmsghdr *, struct netlink_ext_ack *);
5907:	static int inet6_rtm_getroute(struct sk_buff *, struct nlmsghdr *, struct netlink_ext_ack *);
5392:	static int inet6_rtm_newroute(struct sk_buff *, struct nlmsghdr *, struct netlink_ext_ack *);
5840:	static int inet6_rtm_valid_getroute_req(struct sk_buff *, const struct nlmsghdr *, struct nlattr **, struct netlink_ext_ack *);
228:	static void ip6_confirm_neigh(const struct dst_entry *, const void *);
1171:	static struct rt6_info *ip6_create_rt_rcu(const struct fib6_result *);
3063:	static unsigned int ip6_default_advmss(const struct dst_entry *);
3893:	static int ip6_del_cached_rt(struct fib6_config *, struct fib6_info *, struct fib6_nh *);
2607:	static struct dst_entry *ip6_dst_check(struct dst_entry *, u32);
351:	static void ip6_dst_destroy(struct dst_entry *);
3187:	static int ip6_dst_gc(struct dst_ops *);
370:	static void ip6_dst_ifdown(struct dst_entry *, struct net_device *, int);
218:	static struct neighbour *ip6_dst_neigh_lookup(const struct dst_entry *, struct sk_buff *, const void *);
1154:	static bool ip6_hold_safe(struct net *, struct rt6_info **);
2658:	static void ip6_link_failure(struct sk_buff *);
3085:	static unsigned int ip6_mtu(const struct dst_entry *);
2296:	static void ip6_multipath_l3_keys(const struct sk_buff *, struct flow_keys *, struct flow_keys *);
2638:	static struct dst_entry *ip6_negative_advice(struct dst_entry *);
3215:	static int ip6_nh_lookup_table(struct net *, struct fib6_config *, u32, int, struct fib6_result *, const struct in6_addr *, const struct in6_addr *);
4429:	static int ip6_pkt_discard(struct sk_buff *);
4434:	static int ip6_pkt_discard_out(struct net *, struct sock *, struct sk_buff *);
4394:	static int ip6_pkt_drop(struct sk_buff *, u8, int);
4440:	static int ip6_pkt_prohibit(struct sk_buff *);
4445:	static int ip6_pkt_prohibit_out(struct net *, struct sock *, struct sk_buff *);
2862:	static bool ip6_redirect_nh_match(struct flowi6 *, const struct in6_addr *, struct rt6_info **, const struct fib6_result *, const struct fib6_result *);
3267:	static int ip6_route_check_nh(struct net *, struct fib6_config *, struct net_device **, struct inet6_dev **);
3933:	static int ip6_route_del(struct fib6_config *, struct netlink_ext_ack *);
6114:	static int ip6_route_dev_notify(struct notifier_block *, unsigned long, void *);
5045:	static int ip6_route_info_append(struct list_head *, struct fib6_info *, struct fib6_config *, struct net *);
3592:	static struct fib6_info *ip6_route_info_create(struct fib6_config *, gfp_t, struct netlink_ext_ack *);
5129:	static int ip6_route_multipath_add(struct fib6_config *, struct netlink_ext_ack *);
5322:	static int ip6_route_multipath_del(struct fib6_config *, struct netlink_ext_ack *);
6386:	static void ip6_route_net_exit(struct net *);
6408:	static void ip6_route_net_exit_late(struct net *);
6304:	static int ip6_route_net_init(struct net *);
6397:	static int ip6_route_net_init_late(struct net *);
3002:	static struct dst_entry *ip6_route_redirect(struct net *, const struct flowi6 *, const struct sk_buff *, const struct in6_addr *, const struct in6_addr *);
1313:	static struct rt6_info *ip6_rt_cache_alloc(const struct fib6_result *, const struct in6_addr *, const struct in6_addr *);
1115:	static void ip6_rt_copy_init(struct rt6_info *, const struct fib6_result *);
1002:	static struct net_device *ip6_rt_get_dev_rcu(const struct fib6_result *);
1355:	static struct rt6_info *ip6_rt_pcpu_alloc(const struct fib6_result *);
2794:	static void ip6_rt_update_pmtu(struct dst_entry *, struct sock *, struct sk_buff *, u32, bool);
3321:	static int ip6_validate_gw(struct net *, struct fib6_config *, struct net_device **, struct inet6_dev **, struct netlink_ext_ack *);
6432:	static void ipv6_inetpeer_exit(struct net *);
6421:	static int ipv6_inetpeer_init(struct net *);
6171:	static int ipv6_sysctl_rtcache_flush(struct ctl_table *, int, void *, size_t *, loff_t *);
4203:	static struct fib6_info *rt6_add_route_info(struct net *, const struct in6_addr *, int, const struct in6_addr *, struct net_device *, unsigned int);
2070:	static void rt6_age_examine_exception(struct rt6_exception_bucket *, struct rt6_exception *, struct fib6_gc_args *, unsigned long);
395:	static bool rt6_check_expired(const struct rt6_info *);
676:	static enum rt6_nud_state rt6_check_neigh(const struct fib6_nh *);
522:	static void rt6_device_match(struct net *, struct fib6_result *, const struct in6_addr *, int, int);
4020:	static void rt6_do_redirect(struct dst_entry *, struct sock *, struct sk_buff *);
2700:	static void rt6_do_update_pmtu(struct rt6_info *, u32);
1483:	static u32 rt6_exception_hash(const struct in6_addr *, const struct in6_addr *, const struct in6_addr *);
2008:	static void rt6_exceptions_update_pmtu(struct inet6_dev *, int, const struct fib6_nh *, const struct fib6_nh *);
5498:	static int rt6_fill_node(struct net *, struct sk_buff *, struct fib6_info *, struct dst_entry *, struct in6_addr *, int, int, u32, u32, unsigned int, struct in6_addr *);
1783:	static struct rt6_info *rt6_find_cached_rt(const struct in6_addr *, const struct in6_addr *, const struct fib6_result *, const struct fib6_result *);
4163:	static struct fib6_info *rt6_get_route_info(struct net *, const struct in6_addr *, int, const struct in6_addr *, struct net_device *);
1649:	static int rt6_insert_exception(struct rt6_info *, const struct fib6_result *, const struct fib6_result *);
1410:	static struct rt6_info *rt6_make_pcpu_route(const struct fib6_result *, struct net *);
4838:	static int rt6_mtu_change_route(struct fib6_info *, void *);
2148:	static int rt6_nh_age_exceptions(struct fib6_nh *, void *);
5721:	static int rt6_nh_dump_exceptions(struct fib6_nh *, void *);
771:	static int rt6_nh_find_match(struct fib6_nh *, void *);
1762:	static int rt6_nh_flush_exceptions(struct fib6_nh *, void *);
5412:	static int rt6_nh_nlmsg_size(struct fib6_nh *, void *);
1869:	static int rt6_nh_remove_exception_rt(struct fib6_nh *, void *);
5430:	static size_t rt6_nlmsg_size(struct fib6_info *);
609:	static void rt6_probe(struct fib6_nh *);
597:	static void rt6_probe_deferred(struct work_struct *);
1440:	static void rt6_remove_exception(struct rt6_exception_bucket *, struct rt6_exception *);
1881:	static int rt6_remove_exception_rt(struct rt6_info *);
704:	static int rt6_score_route(const struct fib6_nh *, u32, int, int);
6153:	static int rt6_stats_seq_show(struct seq_file *, void *);
159:	static void rt6_uncached_list_flush_dev(struct net_device *, struct net *, struct net *);
1956:	static void rt6_update_exception_stamp_rt(struct rt6_info *);
4898:	static int rtm_to_fib6_config(struct sk_buff *, struct nlmsghdr *, struct fib6_config *, struct netlink_ext_ack *);
4342:	static void rtmsg_to_fib6_config(struct net *, struct in6_rtmsg *, struct fib6_config *);

File net/ipv6/rpl.c:
93:	void ipv6_rpl_srh_compress(struct ipv6_rpl_sr_hdr *, const struct ipv6_rpl_sr_hdr *, const struct in6_addr *, unsigned char);
38:	void ipv6_rpl_srh_decompress(struct ipv6_rpl_sr_hdr *, const struct ipv6_rpl_sr_hdr *, const struct in6_addr *, unsigned char);
32:	size_t ipv6_rpl_srh_size(unsigned char, unsigned char, unsigned char);
13:	static void ipv6_rpl_addr_decompress(struct in6_addr *, const struct in6_addr *, const void *, unsigned char);

File net/ipv6/seg6.c:
493:	void seg6_exit(void);
445:	int seg6_init(void);
28:	bool seg6_validate_srh(struct ipv6_sr_hdr *, int, bool);
344:	static int seg6_genl_dumphmac_start(struct netlink_callback *);
204:	static int seg6_genl_get_tunsrc(struct sk_buff *, struct genl_info *);
175:	static int seg6_genl_set_tunsrc(struct sk_buff *, struct genl_info *);
168:	static int seg6_genl_sethmac(struct sk_buff *, struct genl_info *);
386:	static void seg6_net_exit(struct net *);
361:	static int seg6_net_init(struct net *);

File net/ipv6/syncookies.c:
117:	int __cookie_v6_check(const struct ipv6hdr *, const struct tcphdr *, __u32);
92:	u32 __cookie_v6_init_sequence(const struct ipv6hdr *, const struct tcphdr *, __u16 *);
128:	struct sock *cookie_v6_check(struct sock *, struct sk_buff *);
109:	__u32 cookie_v6_init_sequence(const struct sk_buff *, __u16 *);
40:	static u32 cookie_hash(__be16, __be16, u32, int, const struct in6_addr *, const struct in6_addr *, const struct in6_addr *, const struct in6_addr *);

File net/ipv6/sysctl_net_ipv6.c:
281:	int ipv6_sysctl_register(void);
300:	void ipv6_sysctl_unregister(void);
255:	static void ipv6_sysctl_net_exit(struct net *);
201:	static int ipv6_sysctl_net_init(struct net *);
29:	static int proc_rt6_multipath_hash_policy(struct ctl_table *, int, void *, size_t *, loff_t *);

File net/ipv6/tcp_ipv6.c:
2119:	void tcp6_proc_exit(struct net *);
2111:	int tcp6_proc_init(struct net *);
1818:	void tcp_v6_early_demux(struct sk_buff *);
1165:	u16 tcp_v6_get_syncookie(struct sock *, struct ipv6hdr *, struct tcphdr *, u32 *);
1598:	int tcp_v6_rcv(struct sk_buff *);
1862:	void tcp_v6_send_check(struct sock *, struct sk_buff *);
2244:	void tcpv6_exit(void);
2211:	int tcpv6_init(void);
1945:	static void get_openreq6(struct seq_file *, const struct request_sock *, int);
1977:	static void get_tcp6_sock(struct seq_file *, struct sock *, int);
2049:	static void get_timewait6_sock(struct seq_file *, struct inet_timewait_sock *, int);
103:	static void inet6_sk_rx_dst_set(struct sock *, const struct sk_buff *);
2074:	static int tcp6_seq_show(struct seq_file *, void *);
1180:	static int tcp_v6_conn_request(struct sock *, struct sk_buff *);
145:	static int tcp_v6_connect(struct sock *, struct sockaddr *, int);
1937:	static void tcp_v6_destroy_sock(struct sock *);
1446:	static int tcp_v6_do_rcv(struct sock *, struct sk_buff *);
374:	static int tcp_v6_err(struct sk_buff *, struct inet6_skb_parm *, u8, u8, int, __be32);
1574:	static void tcp_v6_fill_cb(struct sk_buff *, const struct ipv6hdr *, const struct tcphdr *);
769:	static bool tcp_v6_inbound_md5_hash(const struct sock *, const struct sk_buff *, int, int);
820:	static void tcp_v6_init_req(struct request_sock *, const struct sock *, struct sk_buff *);
116:	static u32 tcp_v6_init_seq(const struct sk_buff *);
1922:	static int tcp_v6_init_sock(struct sock *);
124:	static u32 tcp_v6_init_ts_off(const struct net *, const struct sk_buff *);
688:	static int tcp_v6_md5_hash_hdr(char *, const struct tcp_md5sig_key *, const struct in6_addr *, struct in6_addr *, const struct tcphdr *);
662:	static int tcp_v6_md5_hash_headers(struct tcp_md5sig_pool *, const struct in6_addr *, const struct tcphdr *, int, const struct in6_addr *, const struct in6_addr *);
720:	static int tcp_v6_md5_hash_skb(char *, const struct tcp_md5sig_key *, const struct sock *, const struct sk_buff *);
584:	static struct tcp_md5sig_key *tcp_v6_md5_lookup(const struct sock *, const struct sock *);
348:	static void tcp_v6_mtu_reduced(struct sock *);
595:	static int tcp_v6_parse_md5_keys(struct sock *, int, sockptr_t, int);
130:	static int tcp_v6_pre_connect(struct sock *, struct sockaddr *, int);
569:	static void tcp_v6_reqsk_destructor(struct request_sock *);
1128:	static void tcp_v6_reqsk_send_ack(const struct sock *, struct sk_buff *, struct request_sock *);
1201:	static void tcp_v6_restore_cb(struct sk_buff *);
846:	static struct dst_entry *tcp_v6_route_req(const struct sock *, struct flowi *, const struct request_sock *);
998:	static void tcp_v6_send_reset(const struct sock *, struct sk_buff *);
880:	static void tcp_v6_send_response(const struct sock *, struct sk_buff *, u32, u32, u32, u32, u32, int, struct tcp_md5sig_key *, int, u8, __be32, u32);
515:	static int tcp_v6_send_synack(const struct sock *, struct dst_entry *, struct flowi *, struct request_sock *, struct tcp_fastopen_cookie *, enum tcp_synack_type, struct sk_buff *);
1211:	static struct sock *tcp_v6_syn_recv_sock(const struct sock *, struct sk_buff *, struct request_sock *, struct dst_entry *, struct request_sock *, bool *);
2195:	static void tcpv6_net_exit(struct net *);
2200:	static void tcpv6_net_exit_batch(struct list_head *);
2189:	static int tcpv6_net_init(struct net *);

File net/ipv6/tcpv6_offload.c:
29:	int tcp6_gro_complete(struct sk_buff *, int);
16:	struct sk_buff *tcp6_gro_receive(struct list_head *, struct sk_buff *);
75:	int tcpv6_offload_init(void);
41:	static struct sk_buff *tcp6_gso_segment(struct sk_buff *, netdev_features_t);

File net/ipv6/udp.c:
546:	int __udp6_lib_err(struct sk_buff *, struct inet6_skb_parm *, u8, u8, int, __be32, struct udp_table *);
218:	struct sock *__udp6_lib_lookup(struct net *, const struct in6_addr *, __be16, const struct in6_addr *, __be16, int, int, struct udp_table *, struct sk_buff *);
894:	int __udp6_lib_rcv(struct sk_buff *, struct udp_table *, int);
295:	struct sock *udp6_lib_lookup(struct net *, const struct in6_addr *, __be16, const struct in6_addr *, __be16, int);
280:	struct sock *udp6_lib_lookup_skb(struct sk_buff *, __be16, __be16);
1689:	void udp6_proc_exit(struct net *);
1681:	int udp6_proc_init(struct net *);
1653:	int udp6_seq_show(struct seq_file *, void *);
1029:	void udp_v6_early_demux(struct sk_buff *);
80:	int udp_v6_get_port(struct sock *, unsigned short);
92:	void udp_v6_rehash(struct sock *);
1595:	void udpv6_destroy_sock(struct sock *);
455:	void udpv6_encap_enable(void);
1752:	void udpv6_exit(void);
1632:	int udpv6_getsockopt(struct sock *, int, int, char *, int *);
1733:	int udpv6_init(void);
1070:	int udpv6_rcv(struct sk_buff *);
323:	int udpv6_recvmsg(struct sock *, struct msghdr *, size_t, int, int, int *);
1274:	int udpv6_sendmsg(struct sock *, struct msghdr *, size_t);
1622:	int udpv6_setsockopt(struct sock *, int, int, sockptr_t, unsigned int);
1007:	static struct sock *__udp6_lib_demux_lookup(struct net *, __be16, const struct in6_addr *, __be16, const struct in6_addr *, int, int);
503:	static struct sock *__udp6_lib_err_encap(struct net *, const struct ipv6hdr *, int, struct udphdr *, struct udp_table *, struct sk_buff *, struct inet6_skb_parm *, u8, u8, __be32);
797:	static int __udp6_lib_mcast_deliver(struct net *, struct sk_buff *, const struct in6_addr *, const struct in6_addr *, struct udp_table *, int);
620:	static int __udpv6_queue_rcv_skb(struct sock *, struct sk_buff *);
57:	static u32 udp6_ehashfn(const struct net *, const struct in6_addr *, const u16, const struct in6_addr *, const __be16);
1121:	static void udp6_hwcsum_outgoing(struct sk_buff *, const struct in6_addr *, const struct in6_addr *, int, struct sock *);
164:	static struct sock *udp6_lib_lookup2(struct net *, const struct in6_addr *, __be16, const struct in6_addr *, unsigned int, int, int, struct sk_buff *, struct udp_hslot *, struct udp_hslot *);
878:	static int udp6_unicast_rcv_skb(struct sock *, struct sk_buff *, struct udphdr *);
1247:	static int udp_v6_push_pending_frames(struct sock *);
1162:	static int udp_v6_send_skb(struct sk_buff *, struct flowi6 *, struct inet_cork *);
648:	static int udpv6_err(struct sk_buff *, struct inet6_skb_parm *, u8, u8, int, __be32);
1091:	static int udpv6_pre_connect(struct sock *, struct sockaddr *, int);
655:	static int udpv6_queue_rcv_one_skb(struct sock *, struct sk_buff *);
738:	static int udpv6_queue_rcv_skb(struct sock *, struct sk_buff *);

File net/ipv6/udp_offload.c:
161:	int udp6_gro_complete(struct sk_buff *, int);
125:	struct sk_buff *udp6_gro_receive(struct list_head *, struct sk_buff *);
203:	int udpv6_offload_exit(void);
198:	int udpv6_offload_init(void);
17:	static struct sk_buff *udp6_ufo_fragment(struct sk_buff *, netdev_features_t);

File net/ipv6/udplite.c:
120:	void udplite6_proc_exit(void);
115:	int udplite6_proc_init(void);
84:	void udplitev6_exit(void);
65:	int udplitev6_init(void);
105:	static void udplite6_proc_exit_net(struct net *);
96:	static int udplite6_proc_init_net(struct net *);
20:	static int udplitev6_err(struct sk_buff *, struct inet6_skb_parm *, u8, u8, int, __be32);
15:	static int udplitev6_rcv(struct sk_buff *);

File net/ipv6/xfrm6_input.c:
175:	int xfrm6_input_addr(struct sk_buff *, xfrm_address_t *, xfrm_address_t *, u8);
170:	int xfrm6_rcv(struct sk_buff *);
20:	int xfrm6_rcv_spi(struct sk_buff *, int, __be32, struct ip6_tnl *);
163:	int xfrm6_rcv_tnl(struct sk_buff *, struct ip6_tnl *);
41:	int xfrm6_transport_finish(struct sk_buff *, int);
77:	int xfrm6_udp_encap_rcv(struct sock *, struct sk_buff *);
30:	static int xfrm6_transport_finish2(struct net *, struct sock *, struct sk_buff *);

File net/ipv6/xfrm6_output.c:
19:	int xfrm6_find_1stfragopt(struct xfrm_state *, struct sk_buff *, u8 **);
37:	void xfrm6_local_error(struct sk_buff *, u32);
26:	void xfrm6_local_rxpmtu(struct sk_buff *, u32);
97:	int xfrm6_output(struct net *, struct sock *, struct sk_buff *);
55:	static int __xfrm6_output(struct net *, struct sock *, struct sk_buff *);
50:	static int __xfrm6_output_finish(struct net *, struct sock *, struct sk_buff *);

File net/ipv6/xfrm6_policy.c:
302:	void xfrm6_fini(void);
277:	int xfrm6_init(void);
119:	static void xfrm6_dst_destroy(struct dst_entry *);
131:	static void xfrm6_dst_ifdown(struct dst_entry *, struct net_device *, int);
26:	static struct dst_entry *xfrm6_dst_lookup(struct net *, int, int, const xfrm_address_t *, const xfrm_address_t *, u32);
71:	static int xfrm6_fill_dst(struct xfrm_dst *, struct net_device *, const struct flowi *);
54:	static int xfrm6_get_saddr(struct net *, int, xfrm_address_t *, xfrm_address_t *, u32);
266:	static void xfrm6_net_exit(struct net *);
249:	static int xfrm6_net_init(struct net *);
110:	static void xfrm6_redirect(struct dst_entry *, struct sock *, struct sk_buff *);
100:	static void xfrm6_update_pmtu(struct dst_entry *, struct sock *, struct sk_buff *, u32, bool);

File net/ipv6/xfrm6_protocol.c:
280:	int xfrm6_protocol_deregister(struct xfrm6_protocol *, unsigned char);
324:	void xfrm6_protocol_fini(void);
319:	int xfrm6_protocol_init(void);
233:	int xfrm6_protocol_register(struct xfrm6_protocol *, unsigned char);
62:	int xfrm6_rcv_encap(struct sk_buff *, int, __be32, int);
155:	static int xfrm6_ah_err(struct sk_buff *, struct inet6_skb_parm *, u8, u8, int, __be32);
138:	static int xfrm6_ah_rcv(struct sk_buff *);
126:	static int xfrm6_esp_err(struct sk_buff *, struct inet6_skb_parm *, u8, u8, int, __be32);
109:	static int xfrm6_esp_rcv(struct sk_buff *);
184:	static int xfrm6_ipcomp_err(struct sk_buff *, struct inet6_skb_parm *, u8, u8, int, __be32);
167:	static int xfrm6_ipcomp_rcv(struct sk_buff *);
46:	static int xfrm6_rcv_cb(struct sk_buff *, u8, int);

File net/ipv6/xfrm6_state.c:
30:	void xfrm6_state_fini(void);
25:	int xfrm6_state_init(void);

File net/l3mdev/l3mdev.c:
246:	int l3mdev_fib_rule_match(struct net *, struct flowi *, struct fib_lookup_arg *);
189:	u32 l3mdev_fib_table_by_index(struct net *, int);
162:	u32 l3mdev_fib_table_rcu(const struct net_device *);
76:	int l3mdev_ifindex_lookup_by_table_id(enum l3mdev_type, struct net *, u32);
218:	struct dst_entry *l3mdev_link_scope_lookup(struct net *, struct flowi6 *);
110:	int l3mdev_master_ifindex_rcu(const struct net_device *);
144:	int l3mdev_master_upper_ifindex_by_index_rcu(struct net *, int);
28:	int l3mdev_table_lookup_register(enum l3mdev_type, lookup_by_table_id_t);
57:	void l3mdev_table_lookup_unregister(enum l3mdev_type, lookup_by_table_id_t);
276:	void l3mdev_update_flow(struct net *, struct flowi *);

File net/mpls/mpls_gso.c:
98:	static void mpls_gso_exit(void);
88:	static int mpls_gso_init(void);
19:	static struct sk_buff *mpls_gso_segment(struct sk_buff *, netdev_features_t);

File net/netfilter/core.c:
752:	int netfilter_init(void);
670:	void nf_conntrack_destroy(struct nf_conntrack *);
656:	void nf_ct_attach(struct sk_buff *, const struct sk_buff *);
682:	bool nf_ct_get_tuple_skb(struct nf_conntrack_tuple *, const struct sk_buff *);
507:	void nf_hook_entries_delete_raw(struct nf_hook_entries **, const struct nf_hook_ops *);
185:	int nf_hook_entries_insert_raw(struct nf_hook_entries **, const struct nf_hook_ops *);
582:	int nf_hook_slow(struct sk_buff *, struct nf_hook_state *, const struct nf_hook_entries *, unsigned int);
616:	void nf_hook_slow_list(struct list_head *, struct nf_hook_state *, const struct nf_hook_entries *);
520:	int nf_register_net_hook(struct net *, const struct nf_hook_ops *);
550:	int nf_register_net_hooks(struct net *, const struct nf_hook_ops *, unsigned int);
492:	void nf_unregister_net_hook(struct net *, const struct nf_hook_ops *);
570:	void nf_unregister_net_hooks(struct net *, const struct nf_hook_ops *, unsigned int);
67:	static void __nf_hook_entries_free(struct callback_head *);
222:	static void *__nf_hook_entries_try_shrink(struct nf_hook_entries *, struct nf_hook_entries **);
377:	static int __nf_register_net_hook(struct net *, int, const struct nf_hook_ops *);
455:	static void __nf_unregister_net_hook(struct net *, int, const struct nf_hook_ops *);
91:	static unsigned int accept_all(void *, struct sk_buff *, const struct nf_hook_state *);
164:	static void hooks_validate(const struct nf_hook_entries *);
742:	static void netfilter_net_exit(struct net *);
714:	static int netfilter_net_init(struct net *);
104:	static struct nf_hook_entries *nf_hook_entries_grow(const struct nf_hook_entries *, const struct nf_hook_ops *);
267:	static struct nf_hook_entries **nf_hook_entry_head(struct net *, int, unsigned int, struct net_device *);

File net/netfilter/nf_log.c:
575:	int netfilter_log_init(void);
128:	int nf_log_bind_pf(struct net *, u_int8_t, const struct nf_logger *);
276:	int nf_log_buf_add(struct nf_log_buf *, const char *, ...);
311:	void nf_log_buf_close(struct nf_log_buf *);
296:	struct nf_log_buf *nf_log_buf_open(void);
215:	void nf_log_packet(struct net *, u_int8_t, unsigned int, const struct sk_buff *, const struct net_device *, const struct net_device *, const struct nf_loginfo *, const char *, ...);
79:	int nf_log_register(u_int8_t, struct nf_logger *);
45:	int nf_log_set(struct net *, u_int8_t, const struct nf_logger *);
244:	void nf_log_trace(struct net *, u_int8_t, unsigned int, const struct sk_buff *, const struct net_device *, const struct net_device *, const struct nf_loginfo *, const char *, ...);
144:	void nf_log_unbind_pf(struct net *, u_int8_t);
112:	void nf_log_unregister(struct nf_logger *);
63:	void nf_log_unset(struct net *, const struct nf_logger *);
161:	int nf_logger_find_get(int, enum nf_log_type);
196:	void nf_logger_put(int, enum nf_log_type);
154:	void nf_logger_request_module(int, enum nf_log_type);
28:	static struct nf_logger *__find_logger(int, const char *);
562:	static void nf_log_net_exit(struct net *);
540:	static int nf_log_net_init(struct net *);
416:	static int nf_log_proc_dostring(struct ctl_table *, int, void *, size_t *, loff_t *);
338:	static void *seq_next(struct seq_file *, void *, loff_t *);
355:	static int seq_show(struct seq_file *, void *);
326:	static void *seq_start(struct seq_file *, loff_t *);
350:	static void seq_stop(struct seq_file *, void *);

File net/netfilter/nf_queue.c:
220:	int nf_queue(struct sk_buff *, struct nf_hook_state *, unsigned int, unsigned int);
69:	void nf_queue_entry_free(struct nf_queue_entry *);
94:	void nf_queue_entry_get_refs(struct nf_queue_entry *);
114:	void nf_queue_nf_hook_drop(struct net *);
34:	void nf_register_queue_handler(struct net *, const struct nf_queue_handler *);
282:	void nf_reinject(struct nf_queue_entry *, unsigned int);
43:	void nf_unregister_queue_handler(struct net *);
155:	static int __nf_queue(struct sk_buff *, const struct nf_hook_state *, unsigned int, unsigned int);
49:	static void nf_queue_entry_release_refs(struct nf_queue_entry *);

File net/netfilter/nf_sockopt.c:
107:	int nf_getsockopt(struct sock *, u_int8_t, int, char *, int *);
25:	int nf_register_sockopt(struct nf_sockopt_ops *);
92:	int nf_setsockopt(struct sock *, u_int8_t, int, sockptr_t, unsigned int);
54:	void nf_unregister_sockopt(struct nf_sockopt_ops *);
62:	static struct nf_sockopt_ops *nf_sockopt_find(u_int8_t, int, int, struct sock *);

File net/netfilter/utils.c:
123:	__sum16 nf_checksum(struct sk_buff *, unsigned int, unsigned int, u8, unsigned short);
142:	__sum16 nf_checksum_partial(struct sk_buff *, unsigned int, unsigned int, unsigned int, u8, unsigned short);
64:	__sum16 nf_ip6_checksum(struct sk_buff *, unsigned int, unsigned int, u8);
10:	__sum16 nf_ip_checksum(struct sk_buff *, unsigned int, unsigned int, u8);
201:	int nf_reroute(struct sk_buff *, struct nf_queue_entry *);
163:	int nf_route(struct net *, struct dst_entry **, struct flowi *, bool, unsigned short);

File net/netfilter/x_tables.c:
943:	unsigned int *xt_alloc_entry_offsets(unsigned int);
1164:	struct xt_table_info *xt_alloc_table_info(unsigned int);
892:	int xt_check_entry_offsets(const void *, const char *, unsigned int, unsigned int);
460:	int xt_check_match(struct xt_mtchk_param *, unsigned int, u16, bool);
443:	int xt_check_proc_name(const char *, unsigned int);
564:	int xt_check_table_hooks(const struct xt_table_info *, unsigned int);
980:	int xt_check_target(struct xt_tgchk_param *, unsigned int, u16, bool);
645:	int xt_compat_add_offset(u_int8_t, unsigned int, int);
679:	int xt_compat_calc_jump(u_int8_t, unsigned int);
800:	int xt_compat_check_entry_offsets(const void *, const char *, unsigned int, unsigned int);
666:	void xt_compat_flush_offsets(u_int8_t);
697:	int xt_compat_init_offsets(u8, unsigned int);
1271:	void xt_compat_lock(u_int8_t);
731:	void xt_compat_match_from_user(struct xt_entry_match *, void **, unsigned int *);
724:	int xt_compat_match_offset(const struct xt_match *);
764:	int xt_compat_match_to_user(const struct xt_entry_match *, void **, unsigned int *);
1111:	void xt_compat_target_from_user(struct xt_entry_target *, void **, unsigned int *);
1104:	int xt_compat_target_offset(const struct xt_target *);
1138:	int xt_compat_target_to_user(const struct xt_entry_target *, void **, unsigned int *);
1277:	void xt_compat_unlock(u_int8_t);
1049:	void *xt_copy_counters(sockptr_t, unsigned int, struct xt_counters_info *);
1333:	struct xt_counters *xt_counters_alloc(unsigned int);
292:	int xt_data_to_user(void *, const void *, int, int, int);
960:	bool xt_find_jump_offset(const unsigned int *, unsigned int, unsigned int);
177:	struct xt_match *xt_find_match(u8, const char *, u8);
373:	int xt_find_revision(u8, const char *, u8, int, int *);
1197:	struct xt_table *xt_find_table_lock(struct net *, u_int8_t, const char *);
1182:	void xt_free_table_info(struct xt_table_info *);
1689:	struct nf_hook_ops *xt_hook_ops_alloc(const struct xt_table *, nf_hookfn *);
312:	int xt_match_to_user(const struct xt_entry_match *, struct xt_entry_match *);
1826:	bool xt_percpu_counter_alloc(struct xt_percpu_counter_alloc_state *, struct xt_counters *);
1850:	void xt_percpu_counter_free(struct xt_counters *);
1784:	void xt_proto_fini(struct net *, u_int8_t);
1718:	int xt_proto_init(struct net *, u_int8_t);
119:	int xt_register_match(struct xt_match *);
142:	int xt_register_matches(struct xt_match *, unsigned int);
1415:	struct xt_table *xt_register_table(struct net *, const struct xt_table *, struct xt_table_info *, struct xt_table_info *);
69:	int xt_register_target(struct xt_target *);
92:	int xt_register_targets(struct xt_target *, unsigned int);
1349:	struct xt_table_info *xt_replace_table(struct xt_table *, unsigned int, struct xt_table_info *, int *);
208:	struct xt_match *xt_request_find_match(uint8_t, const char *, uint8_t);
1246:	struct xt_table *xt_request_find_table_lock(struct net *, u_int8_t, const char *);
255:	struct xt_target *xt_request_find_target(u8, const char *, u8);
1264:	void xt_table_unlock(struct xt_table *);
320:	int xt_target_to_user(const struct xt_entry_target *, struct xt_entry_target *);
131:	void xt_unregister_match(struct xt_match *);
162:	void xt_unregister_matches(struct xt_match *, unsigned int);
1464:	void *xt_unregister_table(struct xt_table *);
81:	void xt_unregister_target(struct xt_target *);
112:	void xt_unregister_targets(struct xt_target *, unsigned int);
328:	static int match_revfn(u8, const char *, u8, int *);
350:	static int target_revfn(u8, const char *, u8, int *);
397:	static char *textify_hooks(char *, unsigned int, uint8_t, size_t);
226:	static struct xt_target *xt_find_target(u8, const char *, u8);
1909:	static void xt_fini(void);
1881:	static int xt_init(void);
1290:	static int xt_jumpstack_alloc(struct xt_table_info *);
1611:	static void *xt_match_seq_next(struct seq_file *, void *, loff_t *);
1616:	static int xt_match_seq_show(struct seq_file *, void *);
1606:	static void *xt_match_seq_start(struct seq_file *, loff_t *);
1537:	static void *xt_mttg_seq_next(struct seq_file *, loff_t *, bool, void *);
1591:	static void xt_mttg_seq_stop(struct seq_file *, void *);
1868:	static void xt_net_exit(struct net *);
1859:	static int xt_net_init(struct net *);
273:	static int xt_obj_to_user(u16 *, u16, void *, const char *, u8 *, u8);
1490:	static void *xt_table_seq_next(struct seq_file *, void *, loff_t *);
1505:	static int xt_table_seq_show(struct seq_file *, void *);
1481:	static void *xt_table_seq_start(struct seq_file *, loff_t *);
1498:	static void xt_table_seq_stop(struct seq_file *, void *);
1645:	static void *xt_target_seq_next(struct seq_file *, void *, loff_t *);
1650:	static int xt_target_seq_show(struct seq_file *, void *);
1640:	static void *xt_target_seq_start(struct seq_file *, loff_t *);

File net/netfilter/xt_tcpudp.c:
66:	static bool tcp_mt(const struct sk_buff *, struct xt_action_param *);
121:	static int tcp_mt_check(const struct xt_mtchk_param *);
226:	static void tcpudp_mt_exit(void);
221:	static int tcpudp_mt_init(void);
129:	static bool udp_mt(const struct sk_buff *, struct xt_action_param *);
156:	static int udp_mt_check(const struct xt_mtchk_param *);

File net/netlabel/netlabel_addrlist.c:
148:	int netlbl_af4list_add(struct netlbl_af4list *, struct list_head *);
310:	void netlbl_af4list_audit_addr(struct audit_buffer *, int, const char *, __be32, __be32);
239:	struct netlbl_af4list *netlbl_af4list_remove(__be32, __be32, struct list_head *);
221:	void netlbl_af4list_remove_entry(struct netlbl_af4list *);
46:	struct netlbl_af4list *netlbl_af4list_search(__be32, struct list_head *);
70:	struct netlbl_af4list *netlbl_af4list_search_exact(__be32, __be32, struct list_head *);
185:	int netlbl_af6list_add(struct netlbl_af6list *, struct list_head *);
343:	void netlbl_af6list_audit_addr(struct audit_buffer *, int, const char *, const struct in6_addr *, const struct in6_addr *);
279:	struct netlbl_af6list *netlbl_af6list_remove(const struct in6_addr *, const struct in6_addr *, struct list_head *);
261:	void netlbl_af6list_remove_entry(struct netlbl_af6list *);
96:	struct netlbl_af6list *netlbl_af6list_search(const struct in6_addr *, struct list_head *);
121:	struct netlbl_af6list *netlbl_af6list_search_exact(const struct in6_addr *, const struct in6_addr *, struct list_head *);

File net/netlabel/netlabel_calipso.c:
720:	int calipso_cache_add(const unsigned char *, const struct netlbl_lsm_secattr *);
702:	void calipso_cache_invalidate(void);
399:	int calipso_doi_add(struct calipso_doi *, struct netlbl_audit *);
418:	void calipso_doi_free(struct calipso_doi *);
457:	struct calipso_doi *calipso_doi_getdef(u32);
475:	void calipso_doi_putdef(struct calipso_doi *);
437:	int calipso_doi_remove(u32, struct netlbl_audit *);
496:	int calipso_doi_walk(u32 *, int (*)(struct calipso_doi *, void *), void *);
641:	int calipso_getattr(const unsigned char *, struct netlbl_lsm_secattr *);
621:	unsigned char *calipso_optptr(const struct sk_buff *);
604:	void calipso_req_delattr(struct request_sock *);
584:	int calipso_req_setattr(struct request_sock *, const struct calipso_doi *, const struct netlbl_lsm_secattr *);
684:	int calipso_skbuff_delattr(struct sk_buff *);
663:	int calipso_skbuff_setattr(struct sk_buff *, const struct calipso_doi *, const struct netlbl_lsm_secattr *);
564:	void calipso_sock_delattr(struct sock *);
520:	int calipso_sock_getattr(struct sock *, struct netlbl_lsm_secattr *);
544:	int calipso_sock_setattr(struct sock *, const struct calipso_doi *, const struct netlbl_lsm_secattr *);
360:	int netlbl_calipso_genl_init(void);
375:	const struct netlbl_calipso_ops *netlbl_calipso_ops_register(const struct netlbl_calipso_ops *);
98:	static int netlbl_calipso_add(struct sk_buff *, struct genl_info *);
130:	static int netlbl_calipso_list(struct sk_buff *, struct genl_info *);
230:	static int netlbl_calipso_listall(struct sk_buff *, struct netlink_callback *);
191:	static int netlbl_calipso_listall_cb(struct calipso_doi *, void *);
279:	static int netlbl_calipso_remove(struct sk_buff *, struct genl_info *);
258:	static int netlbl_calipso_remove_cb(struct netlbl_dom_map *, void *);

File net/netlabel/netlabel_cipso_v4.c:
784:	int netlbl_cipsov4_genl_init(void);
403:	static int netlbl_cipsov4_add(struct sk_buff *, struct genl_info *);
79:	static int netlbl_cipsov4_add_common(struct genl_info *, struct cipso_v4_doi *);
121:	static int netlbl_cipsov4_add_std(struct genl_info *, struct netlbl_audit *);
448:	static int netlbl_cipsov4_list(struct sk_buff *, struct genl_info *);
652:	static int netlbl_cipsov4_listall(struct sk_buff *, struct netlink_callback *);
613:	static int netlbl_cipsov4_listall_cb(struct cipso_v4_doi *, void *);
701:	static int netlbl_cipsov4_remove(struct sk_buff *, struct genl_info *);
680:	static int netlbl_cipsov4_remove_cb(struct netlbl_dom_map *, void *);

File net/netlabel/netlabel_domainhash.c:
405:	int netlbl_domhsh_add(struct netlbl_dom_map *, struct netlbl_audit *);
563:	int netlbl_domhsh_add_default(struct netlbl_dom_map *, struct netlbl_audit *);
857:	struct netlbl_dom_map *netlbl_domhsh_getentry(const char *, u16);
875:	struct netlbl_dommap_def *netlbl_domhsh_getentry_af4(const char *, __be32);
905:	struct netlbl_dommap_def *netlbl_domhsh_getentry_af6(const char *, const struct in6_addr *);
362:	int netlbl_domhsh_init(u32);
794:	int netlbl_domhsh_remove(const char *, u16, struct netlbl_audit *);
660:	int netlbl_domhsh_remove_af4(const char *, const struct in_addr *, const struct in_addr *, struct netlbl_audit *);
729:	int netlbl_domhsh_remove_af6(const char *, const struct in6_addr *, const struct in6_addr *, struct netlbl_audit *);
840:	int netlbl_domhsh_remove_default(u16, struct netlbl_audit *);
581:	int netlbl_domhsh_remove_entry(struct netlbl_dom_map *, struct netlbl_audit *);
939:	int netlbl_domhsh_walk(u32 *, u32 *, int (*)(struct netlbl_dom_map *, void *), void *);
208:	static void netlbl_domhsh_audit_add(struct netlbl_dom_map *, struct netlbl_af4list *, struct netlbl_af6list *, int, struct netlbl_audit *);
64:	static void netlbl_domhsh_free_entry(struct callback_head *);
105:	static u32 netlbl_domhsh_hash(const char *);
137:	static struct netlbl_dom_map *netlbl_domhsh_search(const char *, u16);
172:	static struct netlbl_dom_map *netlbl_domhsh_search_def(const char *, u16);
274:	static int netlbl_domhsh_validate(const struct netlbl_dom_map *);

File net/netlabel/netlabel_kapi.c:
1473:	struct audit_buffer *netlbl_audit_start(int, struct netlbl_audit *);
921:	void netlbl_bitmap_setbit(unsigned char *, u32, u8);
880:	int netlbl_bitmap_walk(const unsigned char *, u32, u32, u8);
1432:	int netlbl_cache_add(const struct sk_buff *, u16, const struct netlbl_lsm_secattr *);
1412:	void netlbl_cache_invalidate(void);
725:	int netlbl_catmap_getlong(struct netlbl_lsm_catmap *, u32 *, unsigned long *);
775:	int netlbl_catmap_setbit(struct netlbl_lsm_catmap **, u32, gfp_t);
842:	int netlbl_catmap_setlong(struct netlbl_lsm_catmap **, u32, unsigned long, gfp_t);
806:	int netlbl_catmap_setrng(struct netlbl_lsm_catmap **, u32, u32, gfp_t);
608:	int netlbl_catmap_walk(struct netlbl_lsm_catmap *, u32);
663:	int netlbl_catmap_walkrng(struct netlbl_lsm_catmap *, u32);
407:	int netlbl_cfg_calipso_add(struct calipso_doi *, struct netlbl_audit *);
427:	void netlbl_cfg_calipso_del(u32, struct netlbl_audit *);
448:	int netlbl_cfg_calipso_map_add(u32, const char *, const struct in6_addr *, const struct in6_addr *, struct netlbl_audit *);
288:	int netlbl_cfg_cipsov4_add(struct cipso_v4_doi *, struct netlbl_audit *);
304:	void netlbl_cfg_cipsov4_del(u32, struct netlbl_audit *);
323:	int netlbl_cfg_cipsov4_map_add(u32, const char *, const struct in_addr *, const struct in_addr *, struct netlbl_audit *);
56:	int netlbl_cfg_map_del(const char *, u16, const void *, const void *, struct netlbl_audit *);
95:	int netlbl_cfg_unlbl_map_add(const char *, u16, const void *, const void *, struct netlbl_audit *);
208:	int netlbl_cfg_unlbl_static_add(struct net *, const char *, const void *, const void *, u16, u32, struct netlbl_audit *);
251:	int netlbl_cfg_unlbl_static_del(struct net *, const char *, const void *, const void *, u16, struct netlbl_audit *);
1102:	int netlbl_conn_setattr(struct sock *, struct sockaddr *, const struct netlbl_lsm_secattr *);
952:	int netlbl_enabled(void);
1250:	void netlbl_req_delattr(struct request_sock *);
1182:	int netlbl_req_setattr(struct request_sock *, const struct netlbl_lsm_secattr *);
1393:	void netlbl_skbuff_err(struct sk_buff *, u16, int, int);
1356:	int netlbl_skbuff_getattr(const struct sk_buff *, u16, struct netlbl_lsm_secattr *);
1275:	int netlbl_skbuff_setattr(struct sk_buff *, u16, const struct netlbl_lsm_secattr *);
1043:	void netlbl_sock_delattr(struct sock *);
1069:	int netlbl_sock_getattr(struct sock *, struct netlbl_lsm_secattr *);
975:	int netlbl_sock_setattr(struct sock *, u16, const struct netlbl_lsm_secattr *);
553:	static struct netlbl_lsm_catmap *_netlbl_catmap_getnode(struct netlbl_lsm_catmap **, u32, unsigned int, gfp_t);
1491:	static int netlbl_init(void);

File net/netlabel/netlabel_mgmt.c:
843:	int netlbl_mgmt_genl_init(void);
422:	static int netlbl_mgmt_add(struct sk_buff *, struct genl_info *);
76:	static int netlbl_mgmt_add_common(struct genl_info *, struct netlbl_audit *);
546:	static int netlbl_mgmt_adddef(struct sk_buff *, struct genl_info *);
515:	static int netlbl_mgmt_listall(struct sk_buff *, struct netlink_callback *);
479:	static int netlbl_mgmt_listall_cb(struct netlbl_dom_map *, void *);
596:	static int netlbl_mgmt_listdef(struct sk_buff *, struct genl_info *);
281:	static int netlbl_mgmt_listentry(struct sk_buff *, struct netlbl_dom_map *);
684:	static int netlbl_mgmt_protocols(struct sk_buff *, struct netlink_callback *);
650:	static int netlbl_mgmt_protocols_cb(struct sk_buff *, u32, struct netlink_callback *, struct netlink_callback *);
453:	static int netlbl_mgmt_remove(struct sk_buff *, struct genl_info *);
576:	static int netlbl_mgmt_removedef(struct sk_buff *, struct genl_info *);
728:	static int netlbl_mgmt_version(struct sk_buff *, struct genl_info *);

File net/netlabel/netlabel_unlabeled.c:
1533:	int netlbl_unlabel_defconf(void);
1393:	int netlbl_unlabel_genl_init(void);
1459:	int netlbl_unlabel_getattr(const struct sk_buff *, u16, struct netlbl_lsm_secattr *);
1417:	int netlbl_unlabel_init(u32);
364:	int netlbl_unlhsh_add(struct net *, const char *, const void *, const void *, u32, u32, struct netlbl_audit *);
628:	int netlbl_unlhsh_remove(struct net *, const char *, const void *, const void *, u32, struct netlbl_audit *);
809:	static int netlbl_unlabel_accept(struct sk_buff *, struct genl_info *);
735:	static void netlbl_unlabel_acceptflg_set(u8, struct netlbl_audit *);
764:	static int netlbl_unlabel_addrinfo_get(struct genl_info *, void **, void **, u32 *);
836:	static int netlbl_unlabel_list(struct sk_buff *, struct genl_info *);
877:	static int netlbl_unlabel_staticadd(struct sk_buff *, struct genl_info *);
929:	static int netlbl_unlabel_staticadddef(struct sk_buff *, struct genl_info *);
1163:	static int netlbl_unlabel_staticlist(struct sk_buff *, struct netlink_callback *);
1065:	static int netlbl_unlabel_staticlist_gen(u32, const struct netlbl_unlhsh_iface *, const struct netlbl_unlhsh_addr4 *, const struct netlbl_unlhsh_addr6 *, void *);
1253:	static int netlbl_unlabel_staticlistdef(struct sk_buff *, struct netlink_callback *);
978:	static int netlbl_unlabel_staticremove(struct sk_buff *, struct genl_info *);
1020:	static int netlbl_unlabel_staticremovedef(struct sk_buff *, struct genl_info *);
231:	static int netlbl_unlhsh_add_addr4(struct netlbl_unlhsh_iface *, const struct in_addr *, const struct in_addr *, u32);
271:	static int netlbl_unlhsh_add_addr6(struct netlbl_unlhsh_iface *, const struct in6_addr *, const struct in6_addr *, u32);
312:	static struct netlbl_unlhsh_iface *netlbl_unlhsh_add_iface(int);
586:	static void netlbl_unlhsh_condremove_iface(struct netlbl_unlhsh_iface *);
147:	static void netlbl_unlhsh_free_iface(struct callback_head *);
699:	static int netlbl_unlhsh_netdev_handler(struct notifier_block *, unsigned long, void *);
466:	static int netlbl_unlhsh_remove_addr4(struct net *, struct netlbl_unlhsh_iface *, const struct in_addr *, const struct in_addr *, struct netlbl_audit *);
528:	static int netlbl_unlhsh_remove_addr6(struct net *, struct netlbl_unlhsh_iface *, const struct in6_addr *, const struct in6_addr *, struct netlbl_audit *);
202:	static struct netlbl_unlhsh_iface *netlbl_unlhsh_search_iface(int);

File net/netlabel/netlabel_user.c:
83:	struct audit_buffer *netlbl_audit_start_common(int, struct netlbl_audit *);
49:	int netlbl_netlink_init(void);

File net/netlink/af_netlink.c:
2124:	int __netlink_change_ngroups(struct sock *, unsigned int);
2170:	void __netlink_clear_multicast_users(struct sock *, unsigned int);
2332:	int __netlink_dump_start(struct sock *, struct sk_buff *, const struct nlmsghdr *, struct netlink_dump_control *);
2040:	struct sock *__netlink_kernel_create(struct net *, int, struct module *, struct netlink_kernel_cfg *);
858:	bool __netlink_ns_capable(const struct netlink_skb_parms *, struct user_namespace *, int);
2180:	struct nlmsghdr *__nlmsg_put(struct sk_buff *, u32, u32, int, int, int);
2683:	int bpf_iter_netlink(struct bpf_iter_meta *, struct netlink_sock *);
2409:	void netlink_ack(struct sk_buff *, struct nlmsghdr *, int, const struct netlink_ext_ack *);
180:	int netlink_add_tap(struct netlink_tap *);
1211:	int netlink_attachskb(struct sock *, struct sk_buff *, long *, struct sock *);
1540:	int netlink_broadcast(struct sock *, struct sk_buff *, u32, u32, gfp_t);
1489:	int netlink_broadcast_filtered(struct sock *, struct sk_buff *, u32, u32, gfp_t, int (*)(struct sock *, struct sk_buff *, void *), void *);
893:	bool netlink_capable(const struct sk_buff *, int);
2159:	int netlink_change_ngroups(struct sock *, unsigned int);
1270:	void netlink_detachskb(struct sock *, struct sk_buff *);
1160:	struct sock *netlink_getsockbyfilp(struct file *);
1356:	int netlink_has_listeners(struct sock *, unsigned int);
2115:	void netlink_kernel_release(struct sock *);
909:	bool netlink_net_capable(const struct sk_buff *, int);
877:	bool netlink_ns_capable(const struct sk_buff *, struct user_namespace *, int);
2481:	int netlink_rcv_skb(struct sk_buff *, int (*)(struct sk_buff *, struct nlmsghdr *, struct netlink_ext_ack *));
2747:	int netlink_register_notifier(struct notifier_block *);
225:	int netlink_remove_tap(struct netlink_tap *);
1262:	int netlink_sendskb(struct sock *, struct sk_buff *);
1591:	int netlink_set_err(struct sock *, u32, u32, int);
1375:	bool netlink_strict_get_check(struct sk_buff *);
421:	void netlink_table_grab(void);
446:	void netlink_table_ungrab(void);
1320:	int netlink_unicast(struct sock *, struct sk_buff *, u32, int);
2753:	int netlink_unregister_notifier(struct notifier_block *);
2535:	int nlmsg_notify(struct sock *, struct sk_buff *, u32, unsigned int, int, gfp_t);
626:	static int __netlink_create(struct net *, struct socket *, struct mutex *, int, int);
273:	static int __netlink_deliver_tap_skb(struct sk_buff *, struct net_device *);
510:	static int __netlink_insert(struct netlink_table *, struct sock *);
500:	static struct sock *__netlink_lookup(struct netlink_table *, u32, struct net *);
198:	static int __netlink_remove_tap(struct netlink_tap *);
2586:	static void *__netlink_seq_next(struct seq_file *);
718:	static void deferred_put_nlk_sk(struct callback_head *);
1411:	static void do_one_broadcast(struct sock *, struct netlink_broadcast_data *);
811:	static int netlink_autobind(struct socket *, struct socket *);
980:	static int netlink_bind(struct socket *, struct sockaddr *, int);
482:	static int netlink_compare(struct rhashtable_compare_arg *, const void *);
1068:	static int netlink_connect(struct socket *, struct sockaddr *, int, int);
658:	static int netlink_create(struct net *, struct socket *, int, int);
2028:	static void netlink_data_ready(struct sock *);
319:	static void netlink_deliver_tap(struct net *, struct sk_buff *);
2225:	static int netlink_dump(struct sock *);
2202:	static int netlink_dump_done(struct netlink_sock *, struct sk_buff *, struct netlink_callback *, struct netlink_ext_ack *);
1111:	static int netlink_getname(struct socket *, struct sockaddr *, int);
1141:	static struct sock *netlink_getsockbyportid(struct sock *, u32);
1731:	static int netlink_getsockopt(struct socket *, int, int, char *, int *);
2828:	static u32 netlink_hash(const void *, u32, u32);
560:	static int netlink_insert(struct sock *, u32);
1133:	static int netlink_ioctl(struct socket *, unsigned int, unsigned long);
520:	static struct sock *netlink_lookup(struct net *, int, u32);
2796:	static void netlink_net_exit(struct net *);
2786:	static int netlink_net_init(struct net *);
338:	static void netlink_overrun(struct sock *);
2873:	static int netlink_proto_init(void);
933:	static int netlink_realloc_groups(struct sock *);
1939:	static int netlink_recvmsg(struct socket *, struct msghdr *, size_t, int);
738:	static int netlink_release(struct socket *);
599:	static void netlink_remove(struct sock *);
1851:	static int netlink_sendmsg(struct socket *, struct msghdr *, size_t);
2633:	static void *netlink_seq_next(struct seq_file *, void *, loff_t *);
2697:	static int netlink_seq_show(struct seq_file *, void *);
2616:	static void *netlink_seq_start(struct seq_file *, loff_t *);
2713:	static void netlink_seq_stop(struct seq_file *, void *);
1630:	static int netlink_setsockopt(struct socket *, int, int, sockptr_t, unsigned int);
362:	static void netlink_skb_destructor(struct sk_buff *);
375:	static void netlink_skb_set_owner_r(struct sk_buff *, struct sock *);
384:	static void netlink_sock_destruct(struct sock *);
407:	static void netlink_sock_destruct_work(struct work_struct *);
236:	static int netlink_tap_init_net(struct net *);
155:	static struct sk_buff *netlink_to_full_skb(const struct sk_buff *, gfp_t);
1276:	static struct sk_buff *netlink_trim(struct sk_buff *, gfp_t);
966:	static void netlink_undo_bind(int, unsigned long, struct sock *);
537:	static void netlink_update_listeners(struct sock *);
1614:	static void netlink_update_socket_mc(struct netlink_sock *, unsigned int, int);
922:	static void netlink_update_subscriptions(struct sock *, unsigned int);

File net/netlink/genetlink.c:
31:	void genl_lock(void);
1461:	void genl_notify(const struct genl_family *, struct sk_buff *, struct genl_info *, u32, gfp_t);
392:	int genl_register_family(struct genl_family *);
37:	void genl_unlock(void);
461:	int genl_unregister_family(const struct genl_family *);
1450:	int genlmsg_multicast_allns(const struct genl_family *, struct sk_buff *, u32, unsigned int, gfp_t);
496:	void *genlmsg_put(struct sk_buff *, u32, u32, const struct genl_family *, int, u8);
951:	static int ctrl_dumpfamily(struct sk_buff *, struct netlink_callback *);
1262:	static int ctrl_dumppolicy(struct sk_buff *, struct netlink_callback *);
1320:	static int ctrl_dumppolicy_done(struct netlink_callback *);
1194:	static void *ctrl_dumppolicy_prep(struct sk_buff *, struct netlink_callback *);
1212:	static int ctrl_dumppolicy_put_op(struct sk_buff *, struct netlink_callback *, struct genl_ops *);
1130:	static int ctrl_dumppolicy_start(struct netlink_callback *);
821:	static int ctrl_fill_info(const struct genl_family *, u32, u32, u32, struct sk_buff *, u8);
910:	static int ctrl_fill_mcgrp_info(const struct genl_family *, const struct genl_multicast_group *, int, u32, struct sk_buff *, u8, u32, u32);
1025:	static int ctrl_getfamily(struct sk_buff *, struct genl_info *);
189:	static int genl_allocate_reserve_groups(int, int *);
1072:	static int genl_ctrl_event(int, const struct genl_family *, const struct genl_multicast_group *, int);
750:	static int genl_family_rcv_msg(const struct genl_family *, struct sk_buff *, struct nlmsghdr *, struct netlink_ext_ack *);
527:	static struct nlattr **genl_family_rcv_msg_attrs_parse(struct nlmsghdr *, struct netlink_ext_ack *, const struct genl_ops *, int, enum genl_validate_flags, const struct genl_family *);
703:	static int genl_family_rcv_msg_doit(const struct genl_family *, struct sk_buff *, struct nlmsghdr *, struct netlink_ext_ack *, const struct genl_ops *, int, struct net *);
657:	static int genl_family_rcv_msg_dumpit(const struct genl_family *, struct sk_buff *, struct nlmsghdr *, struct netlink_ext_ack *, const struct genl_ops *, int, struct net *);
169:	static int genl_get_cmd(u32, const struct genl_family *, struct genl_ops *);
177:	static void genl_get_cmd_by_index(unsigned int, const struct genl_family *, struct genl_ops *);
1393:	static int genl_init(void);
628:	static int genl_lock_done(struct netlink_callback *);
617:	static int genl_lock_dumpit(struct sk_buff *, struct netlink_callback *);
140:	static void genl_op_from_small(const struct genl_family *, unsigned int, struct genl_ops *);
644:	static int genl_parallel_done(struct netlink_callback *);
1382:	static void genl_pernet_exit(struct net *);
1363:	static int genl_pernet_init(struct net *);
808:	static void genl_rcv(struct sk_buff *);
787:	static int genl_rcv_msg(struct sk_buff *, struct nlmsghdr *, struct netlink_ext_ack *);
570:	static int genl_start(struct netlink_callback *);
329:	static void genl_unregister_mc_groups(const struct genl_family *);
251:	static int genl_validate_assign_mc_groups(struct genl_family *);
354:	static int genl_validate_ops(const struct genl_family *);
1413:	static int genlmsg_mcast(struct sk_buff *, u32, unsigned long, gfp_t);

File net/netlink/policy.c:
126:	int netlink_policy_dump_add_policy(struct netlink_policy_dump_state **, const struct nla_policy *, unsigned int);
199:	int netlink_policy_dump_attr_size_estimate(const struct nla_policy *);
466:	void netlink_policy_dump_free(struct netlink_policy_dump_state *);
81:	int netlink_policy_dump_get_policy_idx(struct netlink_policy_dump_state *, const struct nla_policy *, unsigned int);
194:	bool netlink_policy_dump_loop(struct netlink_policy_dump_state *);
411:	int netlink_policy_dump_write(struct sk_buff *, struct netlink_policy_dump_state *);
397:	int netlink_policy_dump_write_attr(struct sk_buff *, const struct nla_policy *, int);
241:	static int __netlink_policy_dump_write_attr(struct netlink_policy_dump_state *, struct sk_buff *, const struct nla_policy *, int);
27:	static int add_policy(struct netlink_policy_dump_state **, const struct nla_policy *, unsigned int);

File net/nsh/nsh.c:
47:	int nsh_pop(struct sk_buff *);
14:	int nsh_push(struct sk_buff *, const struct nshhdr *);
142:	static void nsh_cleanup_module(void);
76:	static struct sk_buff *nsh_gso_segment(struct sk_buff *, netdev_features_t);
136:	static int nsh_init_module(void);

File net/packet/af_packet.c:
1478:	static void __fanout_link(struct sock *, struct packet_sock *);
1533:	static void __fanout_set_data_bpf(struct packet_fanout *, struct bpf_prog *);
1491:	static void __fanout_unlink(struct sock *, struct packet_sock *);
390:	static int __packet_get_status(const struct packet_sock *, void *);
1012:	static void *__packet_lookup_frame_in_block(struct packet_sock *, struct sk_buff *, unsigned int);
1235:	static int __packet_rcv_has_room(const struct packet_sock *, const struct sk_buff *);
364:	static void __packet_set_status(struct packet_sock *, void *, int);
431:	static __u32 __packet_set_timestamp(struct packet_sock *, void *, struct sk_buff *);
300:	static void __register_prot_hook(struct sock *);
327:	static void __unregister_prot_hook(struct sock *, bool);
4280:	static struct pgv *alloc_pg_vec(int, struct tpacket_req *, struct tpacket_req *);
1643:	static int fanout_add(struct sock *, struct fanout_args *);
1400:	static unsigned int fanout_demux_bpf(struct packet_fanout *, struct sk_buff *, unsigned int);
1354:	static unsigned int fanout_demux_rollover(struct packet_fanout *, struct sk_buff *, unsigned int, bool, unsigned int);
1778:	static struct packet_fanout *fanout_release(struct sock *);
4237:	static void free_pg_vec(struct pgv *, unsigned int, unsigned int);
573:	static void init_prb_bdqc(struct packet_sock *, struct packet_ring_buffer *, struct pgv *, union tpacket_req_u *);
1512:	static bool match_fanout_group(struct packet_type *, struct sock *);
3243:	static int packet_bind(struct socket *, struct sockaddr *, int);
3222:	static int packet_bind_spkt(struct socket *, struct sockaddr *, int);
3271:	static int packet_create(struct net *, struct socket *, int, int);
3547:	static int packet_dev_mc(struct net_device *, struct packet_mclist *, int);
241:	static int packet_direct_xmit(struct sk_buff *);
3125:	static int packet_do_bind(struct sock *, const char *, int, __be16);
4667:	static void packet_exit(void);
3515:	static int packet_getname(struct socket *, struct sockaddr *, int);
3495:	static int packet_getname_spkt(struct socket *, struct sockaddr *, int);
3962:	static int packet_getsockopt(struct socket *, int, int, char *, int *);
4675:	static int packet_init(void);
4135:	static int packet_ioctl(struct socket *, unsigned int, unsigned long);
3592:	static int packet_mc_add(struct sock *, struct packet_mreq_max *);
3647:	static int packet_mc_drop(struct sock *, struct packet_mreq_max *);
4222:	static void packet_mm_close(struct vm_area_struct *);
4212:	static void packet_mm_open(struct vm_area_struct *);
4472:	static int packet_mmap(struct file *, struct socket *, struct vm_area_struct *);
4655:	static void packet_net_exit(struct net *);
4641:	static int packet_net_init(struct net *);
4084:	static int packet_notifier(struct notifier_block *, unsigned long, void *);
1882:	static void packet_parse_headers(struct sk_buff *, struct socket *);
275:	static u16 packet_pick_tx_queue(struct sk_buff *);
4183:	static __poll_t packet_poll(struct file *, struct socket *, poll_table *);
2067:	static int packet_rcv(struct sk_buff *, struct net_device *, struct packet_type *, struct net_device *);
1421:	static int packet_rcv_fanout(struct sk_buff *, struct net_device *, struct packet_type *, struct net_device *);
1816:	static int packet_rcv_spkt(struct sk_buff *, struct net_device *, struct packet_type *, struct net_device *);
3352:	static int packet_recvmsg(struct socket *, struct msghdr *, size_t, int);
3050:	static int packet_release(struct socket *);
3031:	static int packet_sendmsg(struct socket *, struct msghdr *, size_t);
1898:	static int packet_sendmsg_spkt(struct socket *, struct msghdr *, size_t);
4597:	static void *packet_seq_next(struct seq_file *, void *, loff_t *);
4609:	static int packet_seq_show(struct seq_file *, void *);
4588:	static void *packet_seq_start(struct seq_file *, loff_t *);
4603:	static void packet_seq_stop(struct seq_file *, void *);
4305:	static int packet_set_ring(struct sock *, union tpacket_req_u *, int, int);
3695:	static int packet_setsockopt(struct socket *, int, int, sockptr_t, unsigned int);
2875:	static int packet_snd(struct socket *, struct msghdr *, size_t);
1289:	static void packet_sock_destruct(struct sock *);
947:	static void prb_clear_blk_fill_status(struct packet_ring_buffer *);
993:	static void prb_fill_curr_block(char *, struct tpacket_kbdq_core *, struct tpacket_block_desc *, unsigned int);
811:	static void prb_open_block(struct tpacket_kbdq_core *, struct tpacket_block_desc *);
911:	static void prb_retire_current_block(struct tpacket_kbdq_core *, struct packet_sock *, unsigned int);
641:	static void prb_retire_rx_blk_timer_expired(struct timer_list *);
2025:	static unsigned int run_filter(struct sk_buff *, const struct sock *, unsigned int);
2457:	static void tpacket_destruct_skb(struct sk_buff *);
2507:	static int tpacket_fill_skb(struct packet_sock *, struct sk_buff *, void *, struct net_device *, void *, int, __be16, unsigned char *, int, int, const struct sockcm_cookie *);
414:	static __u32 tpacket_get_timestamp(struct sk_buff *, struct timespec64 *, unsigned int);
2182:	static int tpacket_rcv(struct sk_buff *, struct net_device *, struct packet_type *, struct net_device *);
2655:	static int tpacket_snd(struct packet_sock *, struct msghdr *);

File net/sched/act_api.c:
924:	struct tc_action_ops *tc_action_load_ops(char *, struct nlattr *, bool, struct netlink_ext_ack *);
51:	int tcf_action_check_ctrlact(int, struct tcf_proto *, struct tcf_chain **, struct netlink_ext_ack *);
1126:	int tcf_action_copy_stats(struct sk_buff *, struct tc_action *, int);
721:	int tcf_action_destroy(struct tc_action **, int);
836:	int tcf_action_dump(struct sk_buff *, struct tc_action **, int, int, bool);
797:	int tcf_action_dump_1(struct sk_buff *, struct tc_action *, int, int);
763:	int tcf_action_dump_old(struct sk_buff *, struct tc_action *, int, int);
669:	int tcf_action_exec(struct sk_buff *, struct tc_action **, int, struct tcf_result *);
1045:	int tcf_action_init(struct net *, struct tcf_proto *, struct nlattr *, struct nlattr *, char *, int, int, struct tc_action **, int *, size_t *, bool, struct netlink_ext_ack *);
985:	struct tc_action *tcf_action_init_1(struct net *, struct tcf_proto *, struct nlattr *, struct nlattr *, char *, int, int, struct tc_action_ops *, int *, bool, struct netlink_ext_ack *);
87:	struct tcf_chain *tcf_action_set_ctrlact(struct tc_action *, int, struct tcf_chain *);
1105:	void tcf_action_update_stats(struct tc_action *, u64, u64, u64, bool);
347:	int tcf_generic_walker(struct tc_action_net *, struct sk_buff *, struct netlink_callback *, int, const struct tc_action_ops *, struct netlink_ext_ack *);
506:	int tcf_idr_check_alloc(struct tc_action_net *, u32 *, struct tc_action **, int);
489:	void tcf_idr_cleanup(struct tc_action_net *, u32);
420:	int tcf_idr_create(struct tc_action_net *, u32, struct nlattr *, struct tc_action **, const struct tc_action_ops *, int, bool, u32);
476:	int tcf_idr_create_from_flags(struct tc_action_net *, u32, struct nlattr *, struct tc_action **, const struct tc_action_ops *, int, u32);
904:	void tcf_idr_insert_many(struct tc_action **);
172:	int tcf_idr_release(struct tc_action *, bool);
366:	int tcf_idr_search(struct tc_action_net *, struct tc_action **, u32);
553:	void tcf_idrinfo_destroy(const struct tc_action_ops *, struct tcf_idrinfo *);
576:	int tcf_register_action(struct tc_action_ops *, struct pernet_operations *);
608:	int tcf_unregister_action(struct tc_action_ops *, struct pernet_operations *);
125:	static int __tcf_action_put(struct tc_action *, bool);
1570:	static struct nlattr *find_dump_kind(struct nlattr **);
1680:	static int tc_action_init(void);
1519:	static int tc_ctl_action(struct sk_buff *, struct nlmsghdr *, struct netlink_ext_ack *);
1592:	static int tc_dump_action(struct sk_buff *, struct netlink_callback *);
649:	static struct tc_action_ops *tc_lookup_action(struct nlattr *);
630:	static struct tc_action_ops *tc_lookup_action_n(char *);
1270:	static int tca_action_flush(struct net *, struct nlattr *, struct nlmsghdr *, u32, struct netlink_ext_ack *);
1412:	static int tca_action_gd(struct net *, struct nlattr *, struct nlmsghdr *, u32, int, struct netlink_ext_ack *);
1172:	static int tca_get_fill(struct sk_buff *, struct tc_action **, u32, u32, u16, int, int, int);
1485:	static int tcf_action_add(struct net *, struct nlattr *, struct nlmsghdr *, u32, int, struct netlink_ext_ack *);
116:	static void tcf_action_cleanup(struct tc_action *);
769:	static int tcf_action_dump_terse(struct sk_buff *, struct tc_action *);
220:	static size_t tcf_action_fill_size(const struct tc_action *);
1226:	static struct tc_action *tcf_action_get_1(struct net *, struct nlattr *, struct netlink_ext_ack *, u32, struct nlmsghdr *);
746:	static void tcf_action_put_many(struct tc_action **);
1378:	static int tcf_del_notify(struct net *, struct nlmsghdr *, struct tc_action **, u32, size_t, struct netlink_ext_ack *);
304:	static int tcf_del_walker(struct tcf_idrinfo *, struct sk_buff *, const struct tc_action_ops *);
229:	static int tcf_dump_walker(struct tcf_idrinfo *, struct sk_buff *, struct netlink_callback *);
33:	static void tcf_free_cookie_rcu(struct callback_head *);
387:	static int tcf_idr_delete_index(struct tcf_idrinfo *, u32);

File net/sched/cls_api.c:
160:	int register_tcf_proto_ops(struct tcf_proto_ops *);
3483:	void tc_cleanup_flow_action(struct flow_action *);
3302:	int tc_setup_cb_add(struct tcf_block *, struct tcf_proto *, enum tc_setup_type, void *, bool, u32 *, unsigned int *, bool);
3267:	int tc_setup_cb_call(struct tcf_block *, enum tc_setup_type, void *, bool, bool);
3406:	int tc_setup_cb_destroy(struct tcf_block *, struct tcf_proto *, enum tc_setup_type, void *, bool, u32 *, unsigned int *, bool);
3440:	int tc_setup_cb_reoffload(struct tcf_block *, struct tcf_proto *, bool, flow_setup_cb_t *, enum tc_setup_type, void *, void *, u32 *, unsigned int *);
3352:	int tc_setup_cb_replace(struct tcf_block *, struct tcf_proto *, enum tc_setup_type, void *, bool, u32 *, unsigned int *, u32 *, unsigned int *, bool);
3566:	int tc_setup_flow_action(struct flow_action *, const struct tcf_exts *);
1360:	int tcf_block_get(struct tcf_block **, struct tcf_proto **, struct Qdisc *, struct netlink_ext_ack *);
1302:	int tcf_block_get_ext(struct tcf_block **, struct Qdisc *, struct tcf_block_ext_info *, struct netlink_ext_ack *);
1260:	void tcf_block_netif_keep_dst(struct tcf_block *);
1389:	void tcf_block_put(struct tcf_block *);
1377:	void tcf_block_put_ext(struct tcf_block *, struct Qdisc *, struct tcf_block_ext_info *);
520:	struct tcf_chain *tcf_chain_get_by_act(struct tcf_block *, u32);
585:	void tcf_chain_put_by_act(struct tcf_chain *);
1582:	int tcf_classify(struct sk_buff *, const struct tcf_proto *, struct tcf_result *, bool);
1592:	int tcf_classify_ingress(struct sk_buff *, const struct tcf_block *, const struct tcf_proto *, struct tcf_result *, bool);
3101:	void tcf_exts_change(struct tcf_exts *, struct tcf_exts *);
3037:	void tcf_exts_destroy(struct tcf_exts *);
3122:	int tcf_exts_dump(struct sk_buff *, struct tcf_exts *);
3189:	int tcf_exts_dump_stats(struct sk_buff *, struct tcf_exts *);
3747:	unsigned int tcf_exts_num_actions(struct tcf_exts *);
3163:	int tcf_exts_terse_dump(struct sk_buff *, struct tcf_exts *);
3049:	int tcf_exts_validate(struct net *, struct tcf_proto *, struct nlattr **, struct nlattr *, struct tcf_exts *, bool, bool, struct netlink_ext_ack *);
942:	struct tcf_chain *tcf_get_next_chain(struct tcf_block *, struct tcf_chain *);
995:	struct tcf_proto *tcf_get_next_proto(struct tcf_chain *, struct tcf_proto *, bool);
3804:	void tcf_qevent_destroy(struct tcf_qevent *, struct Qdisc *);
3867:	int tcf_qevent_dump(struct sk_buff *, int, struct tcf_qevent *);
3834:	struct sk_buff *tcf_qevent_handle(struct tcf_qevent *, struct Qdisc *, struct sk_buff *, struct sk_buff **, int *);
3777:	int tcf_qevent_init(struct tcf_qevent *, struct Qdisc *, enum flow_block_binder_type, struct nlattr *, struct netlink_ext_ack *);
3811:	int tcf_qevent_validate_change(struct tcf_qevent *, struct nlattr *, struct netlink_ext_ack *);
204:	bool tcf_queue_work(struct rcu_work *, work_func_t);
180:	int unregister_tcf_proto_ops(struct tcf_proto_ops *);
1121:	static struct tcf_block *__tcf_block_find(struct net *, struct Qdisc *, unsigned long, int, u32, struct netlink_ext_ack *);
1158:	static void __tcf_block_put(struct tcf_block *, struct Qdisc *, struct tcf_block_ext_info *, bool);
474:	static struct tcf_chain *__tcf_chain_get(struct tcf_block *, u32, bool, bool);
533:	static void __tcf_chain_put(struct tcf_chain *, bool, bool);
910:	static struct tcf_chain *__tcf_get_next_chain(struct tcf_block *, struct tcf_chain *);
954:	static struct tcf_proto *__tcf_get_next_proto(struct tcf_chain *, struct tcf_proto *);
110:	static const struct tcf_proto_ops *__tcf_proto_lookup_ops(const char *);
1026:	static int __tcf_qdisc_find(struct net *, struct Qdisc **, u32 *, int, bool, struct netlink_ext_ack *);
52:	static u32 destroy_obj_hashfn(const struct tcf_proto *, const struct tcf_proto *);
644:	static void tc_block_indr_cleanup(struct flow_block_cb *);
2645:	static int tc_chain_fill_node(const struct tcf_proto_ops *, void *, u32, struct net *, struct sk_buff *, struct tcf_block *, u32, u32, u16, int);
2695:	static int tc_chain_notify(struct tcf_chain *, struct sk_buff *, u32, u16, int, bool);
2751:	static int tc_chain_tmplt_add(struct tcf_chain *, struct net *, struct nlattr **, struct netlink_ext_ack *);
3236:	static void tc_cls_offload_cnt_reset(struct tcf_block *, struct tcf_proto *, u32 *, u32 *);
3216:	static void tc_cls_offload_cnt_update(struct tcf_block *, struct tcf_proto *, u32 *, u32 *, u32, bool);
2799:	static int tc_ctl_chain(struct sk_buff *, struct nlmsghdr *, struct netlink_ext_ack *);
2172:	static int tc_del_tfilter(struct sk_buff *, struct nlmsghdr *, struct netlink_ext_ack *);
2934:	static int tc_dump_chain(struct sk_buff *, struct netlink_callback *);
2541:	static int tc_dump_tfilter(struct sk_buff *, struct netlink_callback *);
3899:	static int tc_filter_init(void);
2332:	static int tc_get_tfilter(struct sk_buff *, struct nlmsghdr *, struct netlink_ext_ack *);
1945:	static int tc_new_tfilter(struct sk_buff *, struct nlmsghdr *, struct netlink_ext_ack *);
1443:	static int tcf_block_bind(struct tcf_block *, struct flow_block_offload *);
835:	static int tcf_block_insert(struct tcf_block *, struct net *, struct netlink_ext_ack *);
670:	static int tcf_block_offload_cmd(struct tcf_block *, struct net_device *, struct Qdisc *, enum flow_block_command, struct netlink_ext_ack *, struct tcf_block_ext_info *, struct tcf_block_ext_info *);
742:	static void tcf_block_offload_unbind(struct tcf_block *, struct Qdisc *, struct tcf_block_ext_info *);
1286:	static void tcf_block_owner_del(struct tcf_block *, struct Qdisc *, enum flow_block_binder_type);
1401:	static int tcf_block_playback_offloads(struct tcf_block *, flow_setup_cb_t *, void *, bool, bool, struct netlink_ext_ack *);
896:	static struct tcf_block *tcf_block_refcnt_get(struct net *, u32);
1229:	static void tcf_block_release(struct Qdisc *, struct tcf_block *, bool);
1503:	static int tcf_block_setup(struct tcf_block *, struct flow_block_offload *);
1484:	static void tcf_block_unbind(struct tcf_block *, struct flow_block_offload *);
375:	static void tcf_chain0_head_change(struct tcf_proto *, struct tcf_chain *, struct tcf_chain *);
761:	static int tcf_chain0_head_change_cb_add(struct tcf_block *, struct tcf_block_ext_info *, struct netlink_ext_ack *);
805:	static void tcf_chain0_head_change_cb_del(struct tcf_block *, struct tcf_block_ext_info *);
348:	static struct tcf_chain *tcf_chain_create(struct tcf_block *, u32);
2475:	static bool tcf_chain_dump(struct tcf_chain *, struct Qdisc *, u32, struct sk_buff *, struct netlink_callback *, long, long *, bool);
596:	static void tcf_chain_flush(struct tcf_chain *, bool);
1353:	static void tcf_chain_head_change_dflt(struct tcf_proto *, void *);
1724:	static void tcf_chain_tp_delete_empty(struct tcf_chain *, struct tcf_proto *, bool, struct netlink_ext_ack *);
1765:	static struct tcf_proto *tcf_chain_tp_find(struct tcf_chain *, struct tcf_chain_info *, u32, u32, bool);
1690:	static struct tcf_proto *tcf_chain_tp_insert_unique(struct tcf_chain *, struct tcf_proto *, u32, u32, bool);
1798:	static int tcf_fill_node(struct net *, struct sk_buff *, struct tcf_proto *, struct tcf_block *, struct Qdisc *, u32, void *, u32, u32, u16, int, bool, bool);
3542:	static int tcf_gate_get_entries(struct flow_action_entry *, const struct tc_action *);
3885:	static void tcf_net_exit(struct net *);
3876:	static int tcf_net_init(struct net *);
2464:	static int tcf_node_dump(struct tcf_proto *, void *, struct tcf_walker *);
251:	static struct tcf_proto *tcf_proto_create(const char *, u32, u32, struct tcf_chain *, bool, struct netlink_ext_ack *);
294:	static void tcf_proto_destroy(struct tcf_proto *, bool, bool, struct netlink_ext_ack *);
287:	static void tcf_proto_get(struct tcf_proto *);
231:	static bool tcf_proto_is_unlocked(const char *);
129:	static const struct tcf_proto_ops *tcf_proto_lookup_ops(const char *, bool, struct netlink_ext_ack *);
305:	static void tcf_proto_put(struct tcf_proto *, bool, struct netlink_ext_ack *);
58:	static void tcf_proto_signal_destroying(struct tcf_proto *, struct tcf_chain *, struct tcf_chain *);
3507:	static void tcf_tunnel_encap_put_tunnel(void *);
1884:	static int tfilter_del_notify(struct net *, struct sk_buff *, struct nlmsghdr *, struct tcf_proto *, struct tcf_block *, struct Qdisc *, u32, void *, bool *, bool, struct netlink_ext_ack *, bool);
1852:	static int tfilter_notify(struct net *, struct sk_buff *, struct nlmsghdr *, struct tcf_proto *, struct tcf_block *, struct Qdisc *, u32, void *, int, bool, bool);
1925:	static void tfilter_notify_chain(struct net *, struct sk_buff *, struct tcf_block *, struct Qdisc *, u32, struct nlmsghdr *, struct tcf_chain *, bool, int);

File net/sched/cls_cgroup.c:
58:	static void __cls_cgroup_destroy(struct cls_cgroup_head *);
76:	static int cls_cgroup_change(struct net *, struct sk_buff *, struct tcf_proto *, unsigned long, u32, struct nlattr **, void **, bool, bool, struct netlink_ext_ack *);
25:	static int cls_cgroup_classify(struct sk_buff *, const struct tcf_proto *, struct tcf_result *);
146:	static int cls_cgroup_delete(struct tcf_proto *, void *, bool *, bool, struct netlink_ext_ack *);
132:	static void cls_cgroup_destroy(struct tcf_proto *, bool, struct netlink_ext_ack *);
66:	static void cls_cgroup_destroy_work(struct work_struct *);
170:	static int cls_cgroup_dump(struct net *, struct tcf_proto *, void *, struct sk_buff *, struct tcmsg *, bool);
44:	static void *cls_cgroup_get(struct tcf_proto *, u32);
49:	static int cls_cgroup_init(struct tcf_proto *);
152:	static void cls_cgroup_walk(struct tcf_proto *, struct tcf_walker *, bool);
216:	static void exit_cgroup_cls(void);
211:	static int init_cgroup_cls(void);

File net/sched/ematch.c:
498:	int __tcf_em_tree_match(struct sk_buff *, struct tcf_ematch_tree *, struct tcf_pkt_info *);
122:	int tcf_em_register(struct tcf_ematch_ops *);
398:	void tcf_em_tree_destroy(struct tcf_ematch_tree *);
435:	int tcf_em_tree_dump(struct sk_buff *, struct tcf_ematch_tree *, int);
303:	int tcf_em_tree_validate(struct tcf_proto *, struct nlattr *, struct tcf_ematch_tree *);
154:	void tcf_em_unregister(struct tcf_ematch_ops *);
92:	static struct tcf_ematch_ops *tcf_em_lookup(u16);
169:	static int tcf_em_validate(struct tcf_ematch_tree_hdr *, struct tcf_ematch *, struct nlattr *, int, struct tcf_proto *, struct tcf_proto *);

File net/sched/sch_api.c:
565:	void __qdisc_calculate_pkt_len(struct sk_buff *, const struct qdisc_size_table *);
724:	void qdisc_class_hash_destroy(struct Qdisc_class_hash *);
674:	void qdisc_class_hash_grow(struct Qdisc *, struct Qdisc_class_hash *);
710:	int qdisc_class_hash_init(struct Qdisc_class_hash *);
730:	void qdisc_class_hash_insert(struct Qdisc_class_hash *, struct Qdisc_class_common *);
742:	void qdisc_class_hash_remove(struct Qdisc_class_hash *, struct Qdisc_class_common *);
194:	void qdisc_get_default(char *, size_t);
409:	struct qdisc_rate_table *qdisc_get_rtab(struct tc_ratespec *, struct nlattr *, struct netlink_ext_ack *);
278:	void qdisc_hash_add(struct Qdisc *, bool);
289:	void qdisc_hash_del(struct Qdisc *);
298:	struct Qdisc *qdisc_lookup(struct net_device *, u32);
316:	struct Qdisc *qdisc_lookup_rcu(struct net_device *, u32);
819:	int qdisc_offload_dump_helper(struct Qdisc *, enum tc_setup_type, void *);
840:	void qdisc_offload_graft_helper(struct net_device *, struct Qdisc *, struct Qdisc *, struct Qdisc *, enum tc_setup_type, void *, struct netlink_ext_ack *);
446:	void qdisc_put_rtab(struct qdisc_rate_table *);
536:	void qdisc_put_stab(struct qdisc_size_table *);
217:	int qdisc_set_default(const char *);
770:	void qdisc_tree_reduce_backlog(struct Qdisc *, int, int);
594:	void qdisc_warn_nonwc(const char *, struct Qdisc *);
654:	void qdisc_watchdog_cancel(struct qdisc_watchdog *);
625:	void qdisc_watchdog_init(struct qdisc_watchdog *, struct Qdisc *);
616:	void qdisc_watchdog_init_clockid(struct qdisc_watchdog *, struct Qdisc *, clockid_t);
631:	void qdisc_watchdog_schedule_range_ns(struct qdisc_watchdog *, u64, u64);
130:	int register_qdisc(struct Qdisc_ops *);
174:	int unregister_qdisc(struct Qdisc_ops *);
1378:	static int check_loop(struct Qdisc *, struct Qdisc *, int);
1394:	static int check_loop_fn(struct Qdisc *, unsigned long, struct qdisc_walker *);
2280:	static int pktsched_init(void);
2260:	static void psched_net_exit(struct net *);
2249:	static int psched_net_init(struct net *);
2239:	static int psched_show(struct seq_file *, void *);
1323:	static int qdisc_change(struct Qdisc *, struct nlattr **, struct netlink_ext_ack *);
2135:	static int qdisc_class_dump(struct Qdisc *, unsigned long, struct qdisc_walker *);
1164:	static struct Qdisc *qdisc_create(struct net_device *, struct netdev_queue *, struct Qdisc *, u32, u32, struct nlattr **, int *, struct netlink_ext_ack *);
472:	static struct qdisc_size_table *qdisc_get_stab(struct nlattr *, struct netlink_ext_ack *);
1037:	static int qdisc_graft(struct net_device *, struct Qdisc *, struct sk_buff *, struct nlmsghdr *, u32, struct Qdisc *, struct Qdisc *, struct netlink_ext_ack *);
334:	static struct Qdisc *qdisc_leaf(struct Qdisc *, u32);
350:	static struct Qdisc_ops *qdisc_lookup_ops(struct nlattr *);
259:	static struct Qdisc *qdisc_match_from_root(struct Qdisc *, u32);
973:	static int qdisc_notify(struct net *, struct sk_buff *, struct nlmsghdr *, u32, struct Qdisc *, struct Qdisc *);
604:	static enum hrtimer_restart qdisc_watchdog(struct hrtimer *);
247:	static int sch_default_qdisc(void);
1937:	static int tc_bind_class_walker(struct Qdisc *, unsigned long, struct qdisc_walker *);
1992:	static int tc_ctl_tclass(struct sk_buff *, struct nlmsghdr *, struct netlink_ext_ack *);
1744:	static int tc_dump_qdisc(struct sk_buff *, struct netlink_callback *);
1690:	static int tc_dump_qdisc_root(struct Qdisc *, struct sk_buff *, struct netlink_callback *, int *, int, bool, bool);
2205:	static int tc_dump_tclass(struct sk_buff *, struct netlink_callback *);
2145:	static int tc_dump_tclass_qdisc(struct Qdisc *, struct sk_buff *, struct tcmsg *, struct netlink_callback *, int *, int);
2174:	static int tc_dump_tclass_root(struct Qdisc *, struct sk_buff *, struct tcmsg *, struct netlink_callback *, int *, int, bool);
884:	static int tc_fill_qdisc(struct sk_buff *, struct Qdisc *, u32, u32, u32, u16, int);
1802:	static int tc_fill_tclass(struct sk_buff *, struct Qdisc *, unsigned long, u32, u32, u16, int);
1424:	static int tc_get_qdisc(struct sk_buff *, struct nlmsghdr *, struct netlink_ext_ack *);
1509:	static int tc_modify_qdisc(struct sk_buff *, struct nlmsghdr *, struct netlink_ext_ack *);
1916:	static int tcf_node_bind(struct tcf_proto *, void *, struct tcf_walker *);
1848:	static int tclass_notify(struct net *, struct sk_buff *, struct nlmsghdr *, struct Qdisc *, unsigned long, int);

File net/sched/sch_blackhole.c:
23:	static struct sk_buff *blackhole_dequeue(struct Qdisc *);
16:	static int blackhole_enqueue(struct sk_buff *, struct Qdisc *, struct sk_buff **);
37:	static int blackhole_init(void);

File net/sched/sch_fifo.c:
252:	struct Qdisc *fifo_create_dflt(struct Qdisc *, struct Qdisc_ops *, unsigned int, struct netlink_ext_ack *);
227:	int fifo_set_limit(struct Qdisc *, unsigned int);
19:	static int bfifo_enqueue(struct sk_buff *, struct Qdisc *, struct sk_buff **);
150:	static void fifo_destroy(struct Qdisc *);
167:	static int fifo_dump(struct Qdisc *, struct sk_buff *);
178:	static int fifo_hd_dump(struct Qdisc *, struct sk_buff *);
144:	static int fifo_hd_init(struct Qdisc *, struct nlattr *, struct netlink_ext_ack *);
131:	static int fifo_init(struct Qdisc *, struct nlattr *, struct netlink_ext_ack *);
28:	static int pfifo_enqueue(struct sk_buff *, struct Qdisc *, struct sk_buff **);
37:	static int pfifo_tail_enqueue(struct sk_buff *, struct Qdisc *, struct sk_buff **);

File net/sched/sch_fq_codel.c:
255:	static struct sk_buff *dequeue_func(struct codel_vars *, void *);
273:	static void drop_func(struct sk_buff *, void *);
595:	static unsigned long fq_codel_bind(struct Qdisc *, unsigned long, u32);
367:	static int fq_codel_change(struct Qdisc *, struct nlattr *, struct netlink_ext_ack *);
281:	static struct sk_buff *fq_codel_dequeue(struct Qdisc *);
448:	static void fq_codel_destroy(struct Qdisc *);
137:	static unsigned int fq_codel_drop(struct Qdisc *, unsigned int, struct sk_buff **);
520:	static int fq_codel_dump(struct Qdisc *, struct sk_buff *);
615:	static int fq_codel_dump_class(struct Qdisc *, unsigned long, struct sk_buff *, struct tcmsg *);
622:	static int fq_codel_dump_class_stats(struct Qdisc *, unsigned long, struct gnet_dump *);
558:	static int fq_codel_dump_stats(struct Qdisc *, struct gnet_dump *);
184:	static int fq_codel_enqueue(struct sk_buff *, struct Qdisc *, struct sk_buff **);
590:	static unsigned long fq_codel_find(struct Qdisc *, u32);
457:	static int fq_codel_init(struct Qdisc *, struct nlattr *, struct netlink_ext_ack *);
585:	static struct Qdisc *fq_codel_leaf(struct Qdisc *, unsigned long);
723:	static void fq_codel_module_exit(void);
718:	static int fq_codel_module_init(void);
335:	static void fq_codel_reset(struct Qdisc *);
605:	static struct tcf_block *fq_codel_tcf_block(struct Qdisc *, unsigned long, struct netlink_ext_ack *);
601:	static void fq_codel_unbind(struct Qdisc *, unsigned long);
669:	static void fq_codel_walk(struct Qdisc *, struct qdisc_walker *);

File net/sched/sch_generic.c:
482:	void __netdev_watchdog_up(struct net_device *);
404:	void __qdisc_run(struct Qdisc *);
1135:	void dev_activate(struct net_device *);
1285:	void dev_deactivate(struct net_device *);
1245:	void dev_deactivate_many(struct list_head *);
1039:	struct Qdisc *dev_graft_qdisc(struct netdev_queue *, struct Qdisc *);
1347:	void dev_init_scheduler(struct net_device *);
1306:	void dev_qdisc_change_real_num_tx(struct net_device *, unsigned int);
1315:	int dev_qdisc_change_tx_queue_len(struct net_device *);
1372:	void dev_shutdown(struct net_device *);
418:	unsigned long dev_trans_start(struct net_device *);
1460:	void mini_qdisc_pair_block_init(struct mini_Qdisc_pair *, struct tcf_block *);
1468:	void mini_qdisc_pair_init(struct mini_Qdisc_pair *, struct Qdisc *, struct mini_Qdisc **);
1423:	void mini_qdisc_pair_swap(struct mini_Qdisc_pair *, struct tcf_proto *);
532:	void netif_carrier_off(struct net_device *);
513:	void netif_carrier_on(struct net_device *);
1383:	void psched_ratecfg_precompute(struct psched_ratecfg *, const struct tc_ratespec *, u64);
845:	struct Qdisc *qdisc_alloc(struct netdev_queue *, const struct Qdisc_ops *, struct netlink_ext_ack *);
912:	struct Qdisc *qdisc_create_dflt(struct netdev_queue *, const struct Qdisc_ops *, unsigned int, struct netlink_ext_ack *);
968:	void qdisc_free(struct Qdisc *);
1009:	void qdisc_put(struct Qdisc *);
1027:	void qdisc_put_unlocked(struct Qdisc *);
943:	void qdisc_reset(struct Qdisc *);
308:	bool sch_direct_xmit(struct sk_buff *, struct Qdisc *, struct net_device *, struct netdev_queue *, spinlock_t *, bool);
1081:	static void attach_default_qdiscs(struct net_device *);
1060:	static void attach_one_default_qdisc(struct net_device *, struct netdev_queue *, void *);
222:	static struct sk_buff *dequeue_skb(struct Qdisc *, bool *, int *);
1185:	static void dev_reset_queue(struct net_device *, void *, struct netdev_queue *, struct netdev_queue *);
438:	static void dev_watchdog(struct timer_list *);
499:	static void dev_watchdog_down(struct net_device *);
1419:	static void mini_qdisc_rcu_func(struct callback_head *);
555:	static struct sk_buff *noop_dequeue(struct Qdisc *);
548:	static int noop_enqueue(struct sk_buff *, struct Qdisc *, struct sk_buff **);
598:	static int noqueue_init(struct Qdisc *, struct nlattr *, struct netlink_ext_ack *);
809:	static int pfifo_fast_change_tx_queue_len(struct Qdisc *, unsigned int);
664:	static struct sk_buff *pfifo_fast_dequeue(struct Qdisc *);
789:	static void pfifo_fast_destroy(struct Qdisc *);
751:	static int pfifo_fast_dump(struct Qdisc *, struct sk_buff *);
642:	static int pfifo_fast_enqueue(struct sk_buff *, struct Qdisc *, struct sk_buff **);
764:	static int pfifo_fast_init(struct Qdisc *, struct nlattr *, struct netlink_ext_ack *);
706:	static struct sk_buff *pfifo_fast_peek(struct Qdisc *);
721:	static void pfifo_fast_reset(struct Qdisc *);
985:	static void qdisc_destroy(struct Qdisc *);
978:	static void qdisc_free_cb(struct callback_head *);
38:	static void qdisc_maybe_clear_missed(struct Qdisc *, const struct netdev_queue *);
196:	static void try_bulk_dequeue_skb_slow(struct Qdisc *, struct sk_buff *, int *);

File net/sched/sch_mq.c:
106:	static void mq_attach(struct Qdisc *);
128:	static void mq_change_real_num_tx(struct Qdisc *, unsigned int);
52:	static void mq_destroy(struct Qdisc *);
151:	static int mq_dump(struct Qdisc *, struct sk_buff *);
255:	static int mq_dump_class(struct Qdisc *, unsigned long, struct sk_buff *, struct tcmsg *);
266:	static int mq_dump_class_stats(struct Qdisc *, unsigned long, struct gnet_dump *);
246:	static unsigned long mq_find(struct Qdisc *, u32);
213:	static int mq_graft(struct Qdisc *, unsigned long, struct Qdisc *, struct Qdisc **, struct netlink_ext_ack *);
67:	static int mq_init(struct Qdisc *, struct nlattr *, struct netlink_ext_ack *);
239:	static struct Qdisc *mq_leaf(struct Qdisc *, unsigned long);
24:	static int mq_offload(struct Qdisc *, enum tc_mq_command);
207:	static struct netdev_queue *mq_select_queue(struct Qdisc *, struct tcmsg *);
279:	static void mq_walk(struct Qdisc *, struct qdisc_walker *);

File net/socket.c:
2216:	int __copy_msghdr_from_user(struct msghdr *, struct user_msghdr *, struct sockaddr **, struct iovec **, size_t *);
1808:	long __ia32_sys_accept(const struct pt_regs *);
1802:	long __ia32_sys_accept4(const struct pt_regs *);
1654:	long __ia32_sys_bind(const struct pt_regs *);
1865:	long __ia32_sys_connect(const struct pt_regs *);
1939:	long __ia32_sys_getpeername(const struct pt_regs *);
1903:	long __ia32_sys_getsockname(const struct pt_regs *);
2174:	long __ia32_sys_getsockopt(const struct pt_regs *);
1686:	long __ia32_sys_listen(const struct pt_regs *);
2063:	long __ia32_sys_recv(const struct pt_regs *);
2052:	long __ia32_sys_recvfrom(const struct pt_regs *);
2802:	long __ia32_sys_recvmmsg(const struct pt_regs *);
2813:	long __ia32_sys_recvmmsg_time32(const struct pt_regs *);
2650:	long __ia32_sys_recvmsg(const struct pt_regs *);
2000:	long __ia32_sys_send(const struct pt_regs *);
2512:	long __ia32_sys_sendmmsg(const struct pt_regs *);
2436:	long __ia32_sys_sendmsg(const struct pt_regs *);
1989:	long __ia32_sys_sendto(const struct pt_regs *);
2129:	long __ia32_sys_setsockopt(const struct pt_regs *);
2199:	long __ia32_sys_shutdown(const struct pt_regs *);
1516:	long __ia32_sys_socket(const struct pt_regs *);
2844:	long __ia32_sys_socketcall(const struct pt_regs *);
1617:	long __ia32_sys_socketpair(const struct pt_regs *);
1345:	int __sock_create(struct net *, int, int, int, struct socket **, int);
769:	void __sock_recv_timestamp(struct msghdr *, struct sock *, struct sk_buff *);
870:	void __sock_recv_ts_and_drops(struct msghdr *, struct sock *, struct sk_buff *);
846:	void __sock_recv_wifi_status(struct msghdr *, struct sock *, struct sk_buff *);
628:	void __sock_tx_timestamp(__u16, __u8 *);
1785:	int __sys_accept4(int, struct sockaddr *, int *, int);
1691:	int __sys_accept4_file(struct file *, unsigned int, struct sockaddr *, int *, int, unsigned long);
1631:	int __sys_bind(int, struct sockaddr *, int);
1847:	int __sys_connect(int, struct sockaddr *, int);
1826:	int __sys_connect_file(struct file *, struct __kernel_sockaddr_storage *, int, int);
1914:	int __sys_getpeername(int, struct sockaddr *, int *);
1876:	int __sys_getsockname(int, struct sockaddr *, int *);
2139:	int __sys_getsockopt(int, int, int, char *, int *);
1665:	int __sys_listen(int, int);
2011:	int __sys_recvfrom(int, void *, size_t, unsigned int, struct sockaddr *, int *);
2771:	int __sys_recvmmsg(int, struct mmsghdr *, unsigned int, unsigned int, struct __kernel_timespec *, struct old_timespec32 *);
2629:	long __sys_recvmsg(int, struct user_msghdr *, unsigned int, bool);
2616:	long __sys_recvmsg_sock(struct socket *, struct msghdr *, struct user_msghdr *, struct sockaddr *, unsigned int);
2445:	int __sys_sendmmsg(int, struct mmsghdr *, unsigned int, unsigned int, bool);
2415:	long __sys_sendmsg(int, struct user_msghdr *, unsigned int, bool);
2405:	long __sys_sendmsg_sock(struct socket *, struct msghdr *, unsigned int);
1950:	int __sys_sendto(int, void *, size_t, unsigned int, struct sockaddr *, int);
2084:	int __sys_setsockopt(int, int, int, char *, int);
2184:	int __sys_shutdown(int, int);
1489:	int __sys_socket(int, int, int);
1525:	int __sys_socketpair(int, int, int, int *);
1808:	long __x64_sys_accept(const struct pt_regs *);
1802:	long __x64_sys_accept4(const struct pt_regs *);
1654:	long __x64_sys_bind(const struct pt_regs *);
1865:	long __x64_sys_connect(const struct pt_regs *);
1939:	long __x64_sys_getpeername(const struct pt_regs *);
1903:	long __x64_sys_getsockname(const struct pt_regs *);
2174:	long __x64_sys_getsockopt(const struct pt_regs *);
1686:	long __x64_sys_listen(const struct pt_regs *);
2063:	long __x64_sys_recv(const struct pt_regs *);
2052:	long __x64_sys_recvfrom(const struct pt_regs *);
2802:	long __x64_sys_recvmmsg(const struct pt_regs *);
2813:	long __x64_sys_recvmmsg_time32(const struct pt_regs *);
2650:	long __x64_sys_recvmsg(const struct pt_regs *);
2000:	long __x64_sys_send(const struct pt_regs *);
2512:	long __x64_sys_sendmmsg(const struct pt_regs *);
2436:	long __x64_sys_sendmsg(const struct pt_regs *);
1989:	long __x64_sys_sendto(const struct pt_regs *);
2129:	long __x64_sys_setsockopt(const struct pt_regs *);
2199:	long __x64_sys_shutdown(const struct pt_regs *);
1516:	long __x64_sys_socket(const struct pt_regs *);
2844:	long __x64_sys_socketcall(const struct pt_regs *);
1617:	long __x64_sys_socketpair(const struct pt_regs *);
1011:	void brioctl_set(int (*)(struct net *, unsigned int, void *));
1033:	void dlci_ioctl_set(int (*)(unsigned int, void *));
3422:	int kernel_accept(struct socket *, struct socket **, int);
3391:	int kernel_bind(struct socket *, struct sockaddr *, int);
3460:	int kernel_connect(struct socket *, struct sockaddr *, int, int);
3491:	int kernel_getpeername(struct socket *, struct sockaddr *);
3476:	int kernel_getsockname(struct socket *, struct sockaddr *);
3405:	int kernel_listen(struct socket *, int);
923:	int kernel_recvmsg(struct socket *, struct msghdr *, struct kvec *, size_t, size_t, int);
687:	int kernel_sendmsg(struct socket *, struct msghdr *, struct kvec *, size_t, size_t);
708:	int kernel_sendmsg_locked(struct sock *, struct msghdr *, struct kvec *, size_t, size_t);
3508:	int kernel_sendpage(struct socket *, struct page *, int, size_t, int);
3532:	int kernel_sendpage_locked(struct sock *, struct page *, int, size_t, int);
3569:	u32 kernel_sock_ip_overhead(struct sock *);
3553:	int kernel_sock_shutdown(struct socket *, enum sock_shutdown_cmd);
192:	int move_addr_to_kernel(void *, int, struct __kernel_sockaddr_storage *);
2518:	int recvmsg_copy_msghdr(struct msghdr *, struct user_msghdr *, unsigned int, struct sockaddr **, struct iovec **);
2361:	int sendmsg_copy_msghdr(struct msghdr *, struct user_msghdr *, unsigned int, struct iovec **);
568:	struct socket *sock_alloc(void);
404:	struct file *sock_alloc_file(struct socket *, int, const char *);
1465:	int sock_create(int, int, int, struct socket **);
1483:	int sock_create_kern(struct net *, int, int, int, struct socket **);
1206:	int sock_create_lite(int, int, int, struct socket **);
453:	struct socket *sock_from_file(struct file *, int *);
3025:	bool sock_is_registered(int);
899:	int sock_recvmsg(struct socket *, struct msghdr *, int);
2974:	int sock_register(const struct net_proto_family *);
622:	void sock_release(struct socket *);
666:	int sock_sendmsg(struct socket *, struct msghdr *);
3011:	void sock_unregister(int);
1304:	int sock_wake_async(struct socket_wq *, int, int);
3082:	void socket_seq_show(struct seq_file *);
476:	struct socket *sockfd_lookup(int, int *);
1022:	void vlan_ioctl_set(int (*)(struct net *, void *));
2539:	static int ____sys_recvmsg(struct socket *, struct msghdr *, struct user_msghdr *, struct sockaddr *, unsigned int, int);
2286:	static int ____sys_sendmsg(struct socket *, struct msghdr *, unsigned int, struct used_address *, unsigned int);
2595:	static int ___sys_recvmsg(struct socket *, struct user_msghdr *, struct msghdr *, unsigned int, int);
2381:	static int ___sys_sendmsg(struct socket *, struct user_msghdr *, struct msghdr *, unsigned int, struct used_address *, unsigned int);
2844:	static long __se_sys_socketcall(long, long);
589:	static void __sock_release(struct socket *, struct inode *);
3141:	static int compat_ifr_data_ioctl(struct net *, unsigned int, struct compat_ifreq *);
3158:	static int compat_ifreq_ioctl(struct net *, struct socket *, unsigned int, struct compat_ifreq *);
3206:	static int compat_sioc_ifmap(struct net *, unsigned int, struct compat_ifreq *);
3357:	static long compat_sock_ioctl(struct file *, unsigned int, unsigned long);
3255:	static int compat_sock_ioctl_trans(struct file *, struct socket *, unsigned int, unsigned long);
2267:	static int copy_msghdr_from_user(struct msghdr *, struct user_msghdr *, struct sockaddr **, struct iovec **);
2660:	static int do_recvmmsg(int, struct mmsghdr *, unsigned int, unsigned int, struct timespec64 *);
277:	static void init_once(void *);
220:	static int move_addr_to_user(struct __kernel_sockaddr_storage *, int, void *, int *);
249:	static struct inode *sock_alloc_inode(struct super_block *);
1264:	static int sock_close(struct inode *, struct file *);
1041:	static long sock_do_ioctl(struct net *, struct socket *, unsigned int, unsigned long);
1281:	static int sock_fasync(int, struct file *, int);
269:	static void sock_free_inode(struct inode *);
3030:	static int sock_init(void);
1085:	static long sock_ioctl(struct file *, unsigned int, unsigned long);
1257:	static int sock_mmap(struct file *, struct vm_area_struct *);
1237:	static __poll_t sock_poll(struct file *, poll_table *);
959:	static ssize_t sock_read_iter(struct kiocb *, struct iov_iter *);
932:	static ssize_t sock_sendpage(struct file *, struct page *, int, size_t, loff_t *, int);
133:	static void sock_show_fdinfo(struct seq_file *, struct file *);
947:	static ssize_t sock_splice_read(struct file *, loff_t *, struct pipe_inode_info *, size_t, unsigned int);
981:	static ssize_t sock_write_iter(struct kiocb *, struct iov_iter *);
494:	static struct socket *sockfd_lookup_light(int, int *, int *);
305:	static char *sockfs_dname(struct dentry *, char *, int);
356:	static int sockfs_init_fs_context(struct fs_context *);
511:	static ssize_t sockfs_listxattr(struct dentry *, char *, size_t);
336:	static int sockfs_security_xattr_set(const struct xattr_handler *, struct dentry *, struct inode *, const char *, const void *, size_t, int);
539:	static int sockfs_setattr(struct dentry *, struct iattr *);
315:	static int sockfs_xattr_get(const struct xattr_handler *, struct dentry *, struct inode *, const char *, void *, size_t);

File net/strparser/strparser.c:
482:	void __strp_unpause(struct strparser *);
528:	void strp_check_rcv(struct strparser *);
366:	void strp_data_ready(struct strparser *);
508:	void strp_done(struct strparser *);
440:	int strp_init(struct strparser *, struct sock *, const struct strp_callbacks *);
317:	int strp_process(struct strparser *, struct sk_buff *, unsigned int, size_t, size_t, long);
522:	void strp_stop(struct strparser *);
494:	void strp_unpause(struct strparser *);
89:	static int __strp_recv(read_descriptor_t *, struct sk_buff *, unsigned int, size_t, size_t, long);
339:	static int default_read_sock_done(struct strparser *, int);
37:	static void strp_abort_strp(struct strparser *, int);
534:	static int strp_dev_init(void);
418:	static void strp_msg_timeout(struct work_struct *);
345:	static int strp_read_sock(struct strparser *);
330:	static int strp_recv(read_descriptor_t *, struct sk_buff *, unsigned int, size_t);
430:	static void strp_sock_lock(struct strparser *);
435:	static void strp_sock_unlock(struct strparser *);
413:	static void strp_work(struct work_struct *);

File net/switchdev/switchdev.c:
436:	int call_switchdev_blocking_notifiers(unsigned long, struct net_device *, struct switchdev_notifier_info *, struct netlink_ext_ack *);
410:	int call_switchdev_notifiers(unsigned long, struct net_device *, struct switchdev_notifier_info *, struct netlink_ext_ack *);
420:	int register_switchdev_blocking_notifier(struct notifier_block *);
384:	int register_switchdev_notifier(struct notifier_block *);
58:	void switchdev_deferred_process(void);
599:	int switchdev_handle_port_attr_set(struct net_device *, struct switchdev_notifier_port_attr_info *, bool (*)(const struct net_device *), int (*)(struct net_device *, const struct switchdev_attr *, struct switchdev_trans *));
490:	int switchdev_handle_port_obj_add(struct net_device *, struct switchdev_notifier_port_obj_info *, bool (*)(const struct net_device *), int (*)(struct net_device *, const struct switchdev_obj *, struct switchdev_trans *, struct netlink_ext_ack *));
545:	int switchdev_handle_port_obj_del(struct net_device *, struct switchdev_notifier_port_obj_info *, bool (*)(const struct net_device *), int (*)(struct net_device *, const struct switchdev_obj *));
196:	int switchdev_port_attr_set(struct net_device *, const struct switchdev_attr *);
317:	int switchdev_port_obj_add(struct net_device *, const struct switchdev_obj *, struct netlink_ext_ack *);
365:	int switchdev_port_obj_del(struct net_device *, const struct switchdev_obj *);
428:	int unregister_switchdev_blocking_notifier(struct notifier_block *);
396:	int unregister_switchdev_notifier(struct notifier_block *);
561:	static int __switchdev_handle_port_attr_set(struct net_device *, struct switchdev_notifier_port_attr_info *, bool (*)(const struct net_device *), int (*)(struct net_device *, const struct switchdev_attr *, struct switchdev_trans *));
447:	static int __switchdev_handle_port_obj_add(struct net_device *, struct switchdev_notifier_port_obj_info *, bool (*)(const struct net_device *), int (*)(struct net_device *, const struct switchdev_obj *, struct switchdev_trans *, struct netlink_ext_ack *));
508:	static int __switchdev_handle_port_obj_del(struct net_device *, struct switchdev_notifier_port_obj_info *, bool (*)(const struct net_device *), int (*)(struct net_device *, const struct switchdev_obj *));
81:	static int switchdev_deferred_enqueue(struct net_device *, const void *, size_t, switchdev_deferred_func_t *);
72:	static void switchdev_deferred_process_work(struct work_struct *);
206:	static size_t switchdev_obj_size(const struct switchdev_obj *);
101:	static int switchdev_port_attr_notify(struct net_device *, const struct switchdev_attr *, struct switchdev_trans *, enum switchdev_notifier_type);
162:	static void switchdev_port_attr_set_deferred(struct net_device *, const void *);
129:	static int switchdev_port_attr_set_now(struct net_device *, const struct switchdev_attr *);
282:	static void switchdev_port_obj_add_deferred(struct net_device *, const void *);
247:	static int switchdev_port_obj_add_now(struct net_device *, const struct switchdev_obj *, struct netlink_ext_ack *);
335:	static void switchdev_port_obj_del_deferred(struct net_device *, const void *);
221:	static int switchdev_port_obj_notify(enum switchdev_notifier_type, struct net_device *, const struct switchdev_obj *, struct switchdev_trans *, struct netlink_ext_ack *);

File net/sysctl_net.c:
96:	int net_sysctl_init(void);
118:	struct ctl_table_header *register_net_sysctl(struct net *, const char *, struct ctl_table *);
125:	void unregister_net_sysctl_table(struct ctl_table_header *);
36:	static int is_seen(struct ctl_table_set *);
31:	static struct ctl_table_set *net_ctl_header_lookup(struct ctl_table_root *);
42:	static int net_ctl_permissions(struct ctl_table_header *, struct ctl_table *);
56:	static void net_ctl_set_ownership(struct ctl_table_header *, struct ctl_table *, kuid_t *, kgid_t *);
85:	static void sysctl_net_exit(struct net *);
79:	static int sysctl_net_init(struct net *);

File net/unix/af_unix.c:
2615:	long unix_inq_len(struct sock *);
2639:	long unix_outq_len(struct sock *);
203:	struct sock *unix_peer_get(struct sock *);
279:	static struct sock *__unix_find_socket_byname(struct net *, struct sockaddr_un *, int, int, unsigned int);
259:	static void __unix_insert_socket(struct hlist_head *, struct sock *);
254:	static void __unix_remove_socket(struct sock *);
2996:	static void af_unix_exit(void);
2978:	static int af_unix_init(void);
610:	static void copy_peercred(struct sock *, struct sock *);
594:	static void init_peercred(struct sock *);
1622:	static void maybe_add_creds(struct sk_buff *, const struct sock *, const struct socket *);
1633:	static int maybe_init_creds(struct scm_cookie *, struct socket *, const struct sock *);
1469:	static int unix_accept(struct socket *, struct socket *, int, bool);
888:	static int unix_autobind(struct socket *);
1032:	static int unix_bind(struct socket *, struct sockaddr *, int);
2710:	static int unix_compat_ioctl(struct socket *, unsigned int, unsigned long);
2138:	static void unix_copy_addr(struct msghdr *, struct sock *);
843:	static int unix_create(struct net *, struct socket *, int, int);
801:	static struct sock *unix_create1(struct net *, struct socket *, int);
1148:	static int unix_dgram_connect(struct socket *, struct sockaddr *, int, int);
475:	static void unix_dgram_disconnected(struct sock *, struct sock *);
399:	static void unix_dgram_peer_wake_disconnect(struct sock *, struct sock *);
430:	static int unix_dgram_peer_wake_me(struct sock *, struct sock *);
358:	static int unix_dgram_peer_wake_relay(wait_queue_entry_t *, unsigned int, int, void *);
2751:	static __poll_t unix_dgram_poll(struct file *, struct socket *, poll_table *);
2148:	static int unix_dgram_recvmsg(struct socket *, struct msghdr *, size_t, int);
1684:	static int unix_dgram_sendmsg(struct socket *, struct msghdr *, size_t);
948:	static struct sock *unix_find_other(struct net *, struct sockaddr_un *, int, int, unsigned int, int *);
313:	static struct sock *unix_find_socket_byinode(struct inode *);
1514:	static int unix_getname(struct socket *, struct sockaddr *, int);
2681:	static int unix_ioctl(struct socket *, unsigned int, unsigned long);
634:	static int unix_listen(struct socket *, int);
229:	static int unix_mkname(struct sockaddr_un *, int, unsigned int *);
1003:	static int unix_mknod(const char *, umode_t, struct path *);
2967:	static void unix_net_exit(struct net *);
2947:	static int unix_net_init(struct net *);
2834:	static struct sock *unix_next_socket(struct seq_file *, struct sock *, loff_t *);
2645:	static int unix_open_file(struct sock *);
1546:	static void unix_peek_fds(struct scm_cookie *, struct sk_buff *);
2716:	static __poll_t unix_poll(struct file *, struct socket *, poll_table *);
875:	static int unix_release(struct socket *);
519:	static void unix_release_sock(struct sock *, int);
1593:	static int unix_scm_to_skb(struct scm_cookie *, struct sk_buff *, bool);
2875:	static void *unix_seq_next(struct seq_file *, void *, loff_t *);
2887:	static int unix_seq_show(struct seq_file *, void *);
2861:	static void *unix_seq_start(struct seq_file *, loff_t *);
2881:	static void unix_seq_stop(struct seq_file *, void *);
2127:	static int unix_seqpacket_recvmsg(struct socket *, struct msghdr *, size_t, int);
2108:	static int unix_seqpacket_sendmsg(struct socket *, struct msghdr *, size_t);
693:	static int unix_set_peek_off(struct sock *, int);
707:	static void unix_show_fdinfo(struct seq_file *, struct socket *);
2569:	static int unix_shutdown(struct socket *, int);
492:	static void unix_sock_destructor(struct sock *);
1439:	static int unix_socketpair(struct socket *, struct socket *);
1123:	static void unix_state_double_lock(struct sock *, struct sock *);
1138:	static void unix_state_double_unlock(struct sock *, struct sock *);
1250:	static int unix_stream_connect(struct socket *, struct sockaddr *, int, int);
2258:	static long unix_stream_data_wait(struct sock *, long, struct sk_buff *, unsigned int, bool);
2513:	static int unix_stream_read_actor(struct sk_buff *, int, int, struct unix_stream_read_state *);
2314:	static int unix_stream_read_generic(struct unix_stream_read_state *, bool);
2524:	static int unix_stream_recvmsg(struct socket *, struct msghdr *, size_t, int);
1892:	static int unix_stream_sendmsg(struct socket *, struct msghdr *, size_t);
1992:	static ssize_t unix_stream_sendpage(struct socket *, struct page *, int, size_t, int);
2538:	static int unix_stream_splice_actor(struct sk_buff *, int, int, struct unix_stream_read_state *);
2547:	static ssize_t unix_stream_splice_read(struct socket *, loff_t *, struct pipe_inode_info *, size_t, unsigned int);
1228:	static long unix_wait_for_peer(struct sock *, long);
456:	static void unix_write_space(struct sock *);

File net/unix/garbage.c:
202:	void unix_gc(void);
191:	void wait_for_unix_gc(void);
167:	static void dec_inflight(struct unix_sock *);
172:	static void inc_inflight(struct unix_sock *);
177:	static void inc_inflight_move_tail(struct unix_sock *);
133:	static void scan_children(struct sock *, void (*)(struct unix_sock *), struct sk_buff_head *);
91:	static void scan_inflight(struct sock *, void (*)(struct unix_sock *), struct sk_buff_head *);

File net/unix/scm.c:
104:	int unix_attach_fds(struct scm_cookie *, struct sk_buff *);
138:	void unix_destruct_scm(struct sk_buff *);
126:	void unix_detach_fds(struct scm_cookie *, struct sk_buff *);
24:	struct sock *unix_get_socket(struct file *);
48:	void unix_inflight(struct user_struct *, struct file *);
69:	void unix_notinflight(struct user_struct *, struct file *);

File net/unix/sysctl_net_unix.c:
25:	int unix_sysctl_register(struct net *);
50:	void unix_sysctl_unregister(struct net *);

File net/xdp/xdp_umem.c:
76:	void xdp_get_umem(struct xdp_umem *);
81:	void xdp_put_umem(struct xdp_umem *, bool);
237:	struct xdp_umem *xdp_umem_create(struct xdp_umem_reg *);
131:	static int xdp_umem_account_pages(struct xdp_umem *);
96:	static int xdp_umem_pin_pages(struct xdp_umem *, unsigned long);
154:	static int xdp_umem_reg(struct xdp_umem *, struct xdp_umem_reg *);
69:	static void xdp_umem_release_deferred(struct work_struct *);

File net/xdp/xsk.c:
283:	void __xsk_map_flush(void);
268:	int __xsk_map_redirect(struct xdp_sock *, struct xdp_buff *);
136:	void xp_release(struct xdp_buff_xsk *);
108:	void xsk_clear_pool_at_qid(struct net_device *, u16);
63:	void xsk_clear_rx_need_wakeup(struct xsk_buff_pool *);
73:	void xsk_clear_tx_need_wakeup(struct xsk_buff_pool *);
257:	int xsk_generic_rcv(struct xdp_sock *, struct xdp_buff *);
96:	struct xsk_buff_pool *xsk_get_pool_from_qid(struct net_device *, u16);
120:	int xsk_reg_pool_at_qid(struct net_device *, struct xsk_buff_pool *, u16);
36:	void xsk_set_rx_need_wakeup(struct xsk_buff_pool *);
46:	void xsk_set_tx_need_wakeup(struct xsk_buff_pool *);
294:	void xsk_tx_completed(struct xsk_buff_pool *, u32);
314:	bool xsk_tx_peek_desc(struct xsk_buff_pool *, struct xdp_desc *);
300:	void xsk_tx_release(struct xsk_buff_pool *);
90:	bool xsk_uses_need_wakeup(struct xsk_buff_pool *);
186:	static int __xsk_rcv(struct xdp_sock *, struct xdp_buff *, u32, bool);
151:	static int __xsk_rcv_zc(struct xdp_sock *, struct xdp_buff *, u32);
468:	static int __xsk_sendmsg(struct sock *);
664:	static int xsk_bind(struct socket *, struct sockaddr *, int);
1178:	static int xsk_create(struct net *, struct socket *, int, int);
578:	static void xsk_delete_from_maps(struct xdp_sock *);
1165:	static void xsk_destruct(struct sock *);
361:	static void xsk_destruct_skb(struct sk_buff *);
374:	static int xsk_generic_xmit(struct sock *);
935:	static int xsk_getsockopt(struct socket *, int, int, char *, int *);
1255:	static int xsk_init(void);
1066:	static int xsk_mmap(struct file *, struct socket *, struct vm_area_struct *);
1245:	static void xsk_net_exit(struct net *);
1238:	static int xsk_net_init(struct net *);
1106:	static int xsk_notifier(struct notifier_block *, unsigned long, void *);
494:	static __poll_t xsk_poll(struct file *, struct socket *, struct poll_table_struct *);
232:	static int xsk_rcv(struct xdp_sock *, struct xdp_buff *, bool);
604:	static int xsk_release(struct socket *);
480:	static int xsk_sendmsg(struct socket *, struct msghdr *, size_t);
820:	static int xsk_setsockopt(struct socket *, int, int, sockptr_t, unsigned int);

File net/xdp/xsk_buff_pool.c:
11:	void xp_add_xsk(struct xsk_buff_pool *, struct xdp_sock *);
490:	struct xdp_buff *xp_alloc(struct xsk_buff_pool *);
195:	int xp_assign_dev(struct xsk_buff_pool *, struct net_device *, u16, u16);
201:	int xp_assign_dev_shared(struct xsk_buff_pool *, struct xdp_umem *, struct net_device *, u16);
517:	bool xp_can_alloc(struct xsk_buff_pool *, u32);
217:	void xp_clear_dev(struct xsk_buff_pool *);
44:	struct xsk_buff_pool *xp_create_and_assign_umem(struct xdp_sock *, struct xdp_umem *);
23:	void xp_del_xsk(struct xsk_buff_pool *, struct xdp_sock *);
35:	void xp_destroy(struct xsk_buff_pool *);
380:	int xp_dma_map(struct xsk_buff_pool *, struct device *, unsigned long, struct page **, u32);
548:	void xp_dma_sync_for_cpu_slow(struct xdp_buff_xsk *);
555:	void xp_dma_sync_for_device_slow(struct xsk_buff_pool *, dma_addr_t, size_t);
330:	void xp_dma_unmap(struct xsk_buff_pool *, unsigned long);
525:	void xp_free(struct xdp_buff_xsk *);
251:	void xp_get_pool(struct xsk_buff_pool *);
256:	bool xp_put_pool(struct xsk_buff_pool *);
532:	void *xp_raw_get_data(struct xsk_buff_pool *, u64);
539:	dma_addr_t xp_raw_get_dma(struct xsk_buff_pool *, u64);
94:	void xp_set_rxq_info(struct xsk_buff_pool *, struct xdp_rxq_info *);
449:	static struct xdp_buff_xsk *__xp_alloc(struct xsk_buff_pool *);
122:	static int __xp_assign_dev(struct xsk_buff_pool *, struct net_device *, u16, u16);
313:	static void __xp_dma_unmap(struct xsk_dma_map *, unsigned long);
103:	static void xp_disable_drv_zc(struct xsk_buff_pool *);
365:	static int xp_init_dma_info(struct xsk_buff_pool *, struct xsk_dma_map *);
228:	static void xp_release_deferred(struct work_struct *);

File net/xdp/xsk_queue.c:
23:	struct xsk_queue *xskq_create(u32, bool);
50:	void xskq_destroy(struct xsk_queue *);

File net/xdp/xskmap.c:
14:	int xsk_map_inc(struct xsk_map *);
20:	void xsk_map_put(struct xsk_map *);
241:	void xsk_map_try_sock_delete(struct xsk_map *, struct xdp_sock *, struct xdp_sock **);
74:	static struct bpf_map *xsk_map_alloc(union bpf_attr *);
222:	static int xsk_map_delete_elem(struct bpf_map *, void *);
109:	static void xsk_map_free(struct bpf_map *);
135:	static int xsk_map_gen_lookup(struct bpf_map *, struct bpf_insn *);
118:	static int xsk_map_get_next_key(struct bpf_map *, void *, void *);
151:	static void *xsk_map_lookup_elem(struct bpf_map *, void *);
157:	static void *xsk_map_lookup_elem_sys_only(struct bpf_map *, void *);
252:	static bool xsk_map_meta_equal(const struct bpf_map *, const struct bpf_map *);
59:	static void xsk_map_sock_delete(struct xdp_sock *, struct xdp_sock **);
162:	static int xsk_map_update_elem(struct bpf_map *, void *, void *, u64);

File net/xfrm/xfrm_algo.c:
675:	struct xfrm_algo_desc *xfrm_aalg_get_byid(int);
753:	struct xfrm_algo_desc *xfrm_aalg_get_byidx(unsigned int);
705:	struct xfrm_algo_desc *xfrm_aalg_get_byname(const char *, int);
741:	struct xfrm_algo_desc *xfrm_aead_get_byname(const char *, int, int);
689:	struct xfrm_algo_desc *xfrm_calg_get_byid(int);
719:	struct xfrm_algo_desc *xfrm_calg_get_byname(const char *, int);
803:	int xfrm_count_pfkey_auth_supported(void);
814:	int xfrm_count_pfkey_enc_supported(void);
682:	struct xfrm_algo_desc *xfrm_ealg_get_byid(int);
762:	struct xfrm_algo_desc *xfrm_ealg_get_byidx(unsigned int);
712:	struct xfrm_algo_desc *xfrm_ealg_get_byname(const char *, int);
776:	void xfrm_probe_algs(void);

File net/xfrm/xfrm_device.c:
100:	struct sk_buff *validate_xmit_xfrm(struct sk_buff *, netdev_features_t, bool *);
339:	void xfrm_dev_backlog(struct softnet_data *);
422:	void xfrm_dev_init(void);
282:	bool xfrm_dev_offload_ok(struct sk_buff *, struct xfrm_state *);
312:	void xfrm_dev_resume(struct sk_buff *);
209:	int xfrm_dev_state_add(struct net *, struct xfrm_state *, struct xfrm_user_offload *);
47:	static void __xfrm_mode_beet_prep(struct xfrm_state *, struct sk_buff *, unsigned int);
34:	static void __xfrm_mode_tunnel_prep(struct xfrm_state *, struct sk_buff *, unsigned int);
22:	static void __xfrm_transport_prep(struct xfrm_state *, struct sk_buff *, unsigned int);
400:	static int xfrm_dev_event(struct notifier_block *, unsigned long, void *);
67:	static void xfrm_outer_mode_prep(struct xfrm_state *, struct sk_buff *);

File net/xfrm/xfrm_hash.c:
16:	struct hlist_head *xfrm_hash_alloc(unsigned int);
32:	void xfrm_hash_free(struct hlist_head *, unsigned int);

File net/xfrm/xfrm_input.c:
117:	struct sec_path *secpath_set(struct sk_buff *);
459:	int xfrm_input(struct sk_buff *, int, __be32, int);
806:	void xfrm_input_init(void);
52:	int xfrm_input_register_afinfo(const struct xfrm_input_afinfo *);
757:	int xfrm_input_resume(struct sk_buff *, int);
69:	int xfrm_input_unregister_afinfo(const struct xfrm_input_afinfo *);
139:	int xfrm_parse_spi(struct sk_buff *, u8, __be32 *, __be32 *);
798:	int xfrm_trans_queue(struct sk_buff *, int (*)(struct net *, struct sock *, struct sk_buff *));
777:	int xfrm_trans_queue_net(struct net *, struct sk_buff *, int (*)(struct net *, struct sock *, struct sk_buff *));
174:	static int xfrm4_remove_beet_encap(struct xfrm_state *, struct sk_buff *);
228:	static int xfrm4_remove_tunnel_encap(struct xfrm_state *, struct sk_buff *);
296:	static int xfrm6_remove_beet_encap(struct xfrm_state *, struct sk_buff *);
266:	static int xfrm6_remove_tunnel_encap(struct xfrm_state *, struct sk_buff *);
434:	static int xfrm_inner_mode_input(struct xfrm_state *, const struct xfrm_mode *, struct sk_buff *);
355:	static int xfrm_prepare_input(struct xfrm_state *, struct sk_buff *);
100:	static int xfrm_rcv_cb(struct sk_buff *, unsigned int, u8, int);
763:	static void xfrm_trans_reinject(unsigned long);

File net/xfrm/xfrm_output.c:
406:	int pktgen_xfrm_outer_mode_output(struct xfrm_state *, struct sk_buff *);
753:	void xfrm_local_error(struct sk_buff *, int);
568:	int xfrm_output(struct sock *, struct sk_buff *);
506:	int xfrm_output_resume(struct sock *, struct sk_buff *, int);
51:	static struct dst_entry *skb_dst_pop(struct sk_buff *);
148:	static int xfrm4_beet_encap_add(struct xfrm_state *, struct sk_buff *);
64:	static int xfrm4_transport_output(struct xfrm_state *, struct sk_buff *);
632:	static int xfrm4_tunnel_check_size(struct sk_buff *);
197:	static int xfrm4_tunnel_encap_add(struct xfrm_state *, struct sk_buff *);
277:	static int xfrm6_beet_encap_add(struct xfrm_state *, struct sk_buff *);
116:	static int xfrm6_ro_output(struct xfrm_state *, struct sk_buff *);
85:	static int xfrm6_transport_output(struct xfrm_state *, struct sk_buff *);
680:	static int xfrm6_tunnel_check_size(struct sk_buff *);
242:	static int xfrm6_tunnel_encap_add(struct xfrm_state *, struct sk_buff *);
730:	static int xfrm_inner_extract_output(struct xfrm_state *, struct sk_buff *);
376:	static int xfrm_outer_mode_output(struct xfrm_state *, struct sk_buff *);
535:	static int xfrm_output2(struct net *, struct sock *, struct sk_buff *);
540:	static int xfrm_output_gso(struct sock *, struct sk_buff *, struct net *);
413:	static int xfrm_output_one(struct sk_buff *, int);

File net/xfrm/xfrm_policy.c:
3485:	int __xfrm_decode_session(struct sk_buff *, struct flowi *, unsigned int, int);
252:	struct dst_entry *__xfrm_dst_lookup(struct net *, int, int, const xfrm_address_t *, const xfrm_address_t *, int, u32);
3517:	int __xfrm_policy_check(struct sock *, int, struct sk_buff *, unsigned short);
3683:	int __xfrm_route_forward(struct sk_buff *, unsigned short);
2324:	int __xfrm_sk_clone_policy(struct sock *, const struct sock *);
4215:	void xfrm_audit_policy_add(struct xfrm_policy *, int, bool);
4229:	void xfrm_audit_policy_delete(struct xfrm_policy *, int, bool);
3747:	void xfrm_dst_ifdown(struct dst_entry *, struct net_device *);
3974:	void xfrm_if_register_cb(const struct xfrm_if_cb *);
3982:	void xfrm_if_unregister_cb(void);
4166:	void xfrm_init(void);
3182:	struct dst_entry *xfrm_lookup(struct net *, struct dst_entry *, const struct flowi *, const struct sock *, int);
3193:	struct dst_entry *xfrm_lookup_route(struct net *, struct dst_entry *, const struct flowi *, const struct sock *, int);
3029:	struct dst_entry *xfrm_lookup_with_ifid(struct net *, struct dst_entry *, const struct flowi *, const struct sock *, int, u32);
4402:	int xfrm_migrate(const struct xfrm_selector *, u8, u8, struct xfrm_migrate *, int, struct xfrm_kmaddress *, struct net *, struct xfrm_encap_tmpl *);
386:	struct xfrm_policy *xfrm_policy_alloc(struct net *, gfp_t);
1710:	struct xfrm_policy *xfrm_policy_byid(struct net *, const struct xfrm_mark *, u32, u8, int, u32, int, int *);
1640:	struct xfrm_policy *xfrm_policy_bysel_ctx(struct net *, const struct xfrm_mark *, u32, u8, int, struct xfrm_selector *, struct xfrm_sec_ctx *, int, int *);
2241:	int xfrm_policy_delete(struct xfrm_policy *, int);
419:	void xfrm_policy_destroy(struct xfrm_policy *);
1778:	int xfrm_policy_flush(struct net *, u8, bool);
1362:	void xfrm_policy_hash_rebuild(struct net *);
1570:	int xfrm_policy_insert(int, struct xfrm_policy *, int);
3917:	int xfrm_policy_register_afinfo(const struct xfrm_policy_afinfo *, int);
3953:	void xfrm_policy_unregister_afinfo(const struct xfrm_policy_afinfo *);
1815:	int xfrm_policy_walk(struct net *, struct xfrm_policy_walk *, int (*)(struct xfrm_policy *, int, int, void *), void *);
1872:	void xfrm_policy_walk_done(struct xfrm_policy_walk *, struct net *);
1863:	void xfrm_policy_walk_init(struct xfrm_policy_walk *, u8);
221:	bool xfrm_selector_match(const struct xfrm_selector *, const struct flowi *, unsigned short);
2256:	int xfrm_sk_policy_insert(struct sock *, int, struct xfrm_policy *);
657:	void xfrm_spd_getinfo(struct net *, struct xfrmk_spdinfo *);
1618:	static struct xfrm_policy *__xfrm_policy_bysel_ctx(struct hlist_head *, const struct xfrm_mark *, u32, u8, struct xfrm_selector *, struct xfrm_sec_ctx *, int);
1084:	static void __xfrm_policy_inexact_prune_bin(struct xfrm_pol_inexact_bin *, bool);
2201:	static void __xfrm_policy_link(struct xfrm_policy *, int);
2210:	static struct xfrm_policy *__xfrm_policy_unlink(struct xfrm_policy *, int);
2292:	static struct xfrm_policy *clone_policy(const struct xfrm_policy *, int);
3278:	static void decode_session4(struct sk_buff *, struct flowi *, bool);
3387:	static void decode_session6(struct sk_buff *, struct flowi *, bool);
481:	static struct hlist_head *policy_hash_bysel(struct net *, const struct xfrm_selector *, unsigned short, int);
500:	static struct hlist_head *policy_hash_direct(struct net *, const xfrm_address_t *, const xfrm_address_t *, unsigned short, int);
2840:	static int xdst_queue_output(struct net *, struct sock *, struct sk_buff *);
4181:	static void xfrm_audit_common_policyinfo(struct xfrm_policy *, struct audit_buffer *);
2534:	static struct dst_entry *xfrm_bundle_create(struct xfrm_policy *, struct xfrm_state **, struct xfrm_dst **, int, const struct flowi *, struct dst_entry *);
2941:	static struct xfrm_dst *xfrm_bundle_lookup(struct net *, const struct flowi *, u16, struct xfrm_flo *, u32, u8);
3800:	static int xfrm_bundle_ok(struct xfrm_dst *);
574:	static void xfrm_bydst_resize(struct net *, int);
606:	static void xfrm_byidx_resize(struct net *, int);
3909:	static void xfrm_confirm_neigh(const struct dst_entry *, const void *);
2882:	static struct xfrm_dst *xfrm_create_dummy_bundle(struct net *, struct xfrm_flo *, const struct flowi *, int, u16);
3868:	static unsigned int xfrm_default_advmss(const struct dst_entry *);
3713:	static struct dst_entry *xfrm_dst_check(struct dst_entry *, u32);
517:	static void xfrm_dst_hash_transfer(struct net *, struct hlist_head *, struct hlist_head *, unsigned int, int);
2670:	static int xfrm_expand_policies(const struct flowi *, u16, struct xfrm_policy **, int *, int *);
1370:	static u32 xfrm_gen_index(int, u32, struct net *, struct net *);
1219:	static void xfrm_hash_rebuild(struct work_struct *);
671:	static void xfrm_hash_resize(struct work_struct *);
3773:	static void xfrm_init_pmtu(struct xfrm_dst **, int);
3757:	static void xfrm_link_failure(struct sk_buff *);
4373:	static int xfrm_migrate_check(const struct xfrm_migrate *, int);
4267:	static struct xfrm_policy *xfrm_migrate_policy_find(const struct xfrm_selector *, u8, u8, struct net *);
4246:	static bool xfrm_migrate_selector_match(const struct xfrm_selector *, const struct xfrm_selector *);
3873:	static unsigned int xfrm_mtu(const struct dst_entry *);
3762:	static struct dst_entry *xfrm_negative_advice(struct dst_entry *);
3898:	static struct neighbour *xfrm_neigh_lookup(const struct dst_entry *, struct sk_buff *, const void *);
4153:	static void xfrm_net_exit(struct net *);
4118:	static int xfrm_net_init(struct net *);
1467:	static int xfrm_pol_bin_cmp(struct rhashtable_compare_arg *, const void *);
1451:	static u32 xfrm_pol_bin_key(const void *, u32, u32);
1460:	static u32 xfrm_pol_bin_obj(const void *, u32, u32);
736:	static bool xfrm_pol_inexact_addr_use_any_list(const xfrm_address_t *, int, u8);
791:	static int xfrm_policy_addr_delta(const xfrm_address_t *, const xfrm_address_t *, u8, u16);
409:	static void xfrm_policy_destroy_rcu(struct callback_head *);
2052:	static struct xfrm_policy *xfrm_policy_eval_candidates(struct xfrm_pol_inexact_candidates *, struct xfrm_policy *, const struct flowi *, u8, u16, int, u32);
1947:	static bool xfrm_policy_find_inexact_candidates(struct xfrm_pol_inexact_candidates *, struct xfrm_pol_inexact_bin *, const xfrm_address_t *, const xfrm_address_t *);
4083:	static void xfrm_policy_fini(struct net *);
694:	static struct xfrm_pol_inexact_bin *xfrm_policy_inexact_alloc_bin(const struct xfrm_policy *, u8);
1124:	static struct hlist_head *xfrm_policy_inexact_alloc_chain(struct xfrm_pol_inexact_bin *, struct xfrm_policy *, u8);
1063:	static void xfrm_policy_inexact_gc_tree(struct rb_root *, bool);
1184:	static struct xfrm_policy *xfrm_policy_inexact_insert(struct xfrm_policy *, u8, int);
987:	static struct xfrm_pol_inexact_node *xfrm_policy_inexact_insert_node(struct net *, struct rb_root *, xfrm_address_t *, u16, u8, u8);
837:	static void xfrm_policy_inexact_list_reinsert(struct net *, struct xfrm_pol_inexact_node *, u16);
1981:	static struct xfrm_pol_inexact_bin *xfrm_policy_inexact_lookup_rcu(struct net *, u8, u16, u8, u32);
900:	static void xfrm_policy_inexact_node_reinsert(struct net *, struct xfrm_pol_inexact_node *, struct rb_root *, u16);
4018:	static int xfrm_policy_init(struct net *);
1500:	static void xfrm_policy_insert_inexact_list(struct hlist_head *, struct xfrm_policy *);
1536:	static struct xfrm_policy *xfrm_policy_insert_list(struct hlist_head *, struct xfrm_policy *, bool);
434:	static void xfrm_policy_kill(struct xfrm_policy *);
2076:	static struct xfrm_policy *xfrm_policy_lookup_bytype(struct net *, u8, const struct flowi *, u16, u8, u32);
1910:	static struct xfrm_pol_inexact_node *xfrm_policy_lookup_inexact_addr(const struct rb_root *, seqcount_spinlock_t *, const xfrm_address_t *, u16);
1888:	static int xfrm_policy_match(const struct xfrm_policy *, const struct flowi *, u8, u16, int, u32);
4333:	static int xfrm_policy_migrate(struct xfrm_policy *, struct xfrm_migrate *, int);
2753:	static void xfrm_policy_queue_process(struct timer_list *);
1418:	static void xfrm_policy_requeue(struct xfrm_policy *, struct xfrm_policy *);
312:	static void xfrm_policy_timer(struct timer_list *);
2716:	static struct xfrm_dst *xfrm_resolve_and_create_bundle(struct xfrm_policy **, int, const struct flowi *, u16, struct dst_entry *);
2157:	static struct xfrm_policy *xfrm_sk_policy_lookup(const struct sock *, int, const struct flowi *, u16, u32);
2422:	static int xfrm_tmpl_resolve(struct xfrm_policy **, int, const struct flowi *, struct xfrm_state **, unsigned short);
2363:	static int xfrm_tmpl_resolve_one(struct xfrm_policy *, const struct flowi *, struct xfrm_state **, unsigned short);

File net/xfrm/xfrm_proc.c:
72:	void xfrm_proc_fini(struct net *);
64:	int xfrm_proc_init(struct net *);
47:	static int xfrm_statistics_seq_show(struct seq_file *, void *);

File net/xfrm/xfrm_replay.c:
732:	int xfrm_init_replay(struct xfrm_state *);
12:	u32 xfrm_replay_seqhi(struct xfrm_state *, __be32);
139:	static void xfrm_replay_advance(struct xfrm_state *, __be32);
231:	static void xfrm_replay_advance_bmp(struct xfrm_state *, __be32);
496:	static void xfrm_replay_advance_esn(struct xfrm_state *, __be32);
107:	static int xfrm_replay_check(struct xfrm_state *, struct sk_buff *, __be32);
187:	static int xfrm_replay_check_bmp(struct xfrm_state *, struct sk_buff *, __be32);
425:	static int xfrm_replay_check_esn(struct xfrm_state *, struct sk_buff *, __be32);
38:	static void xfrm_replay_notify(struct xfrm_state *, int);
279:	static void xfrm_replay_notify_bmp(struct xfrm_state *, int);
330:	static void xfrm_replay_notify_esn(struct xfrm_state *, int);
84:	static int xfrm_replay_overflow(struct xfrm_state *, struct sk_buff *);
163:	static int xfrm_replay_overflow_bmp(struct xfrm_state *, struct sk_buff *);
396:	static int xfrm_replay_overflow_esn(struct xfrm_state *, struct sk_buff *);
555:	static int xfrm_replay_overflow_offload(struct xfrm_state *, struct sk_buff *);
594:	static int xfrm_replay_overflow_offload_bmp(struct xfrm_state *, struct sk_buff *);
634:	static int xfrm_replay_overflow_offload_esn(struct xfrm_state *, struct sk_buff *);
484:	static int xfrm_replay_recheck_esn(struct xfrm_state *, struct sk_buff *, __be32);

File net/xfrm/xfrm_state.c:
2562:	int __xfrm_init_state(struct xfrm_state *, bool, bool);
656:	int __xfrm_state_delete(struct xfrm_state *);
640:	void __xfrm_state_destroy(struct xfrm_state *, bool);
2519:	u32 __xfrm_state_mtu(struct xfrm_state *, int);
2240:	int km_migrate(const struct xfrm_selector *, u8, u8, const struct xfrm_migrate *, int, const struct xfrm_kmaddress *, const struct xfrm_encap_tmpl *);
2211:	int km_new_mapping(struct xfrm_state *, xfrm_address_t *, __be16);
2228:	void km_policy_expired(struct xfrm_policy *, int, int, u32);
2156:	void km_policy_notify(struct xfrm_policy *, int, const struct km_event *);
2195:	int km_query(struct xfrm_state *, struct xfrm_tmpl *, struct xfrm_policy *);
2264:	int km_report(struct net *, u8, struct xfrm_selector *, xfrm_address_t *);
2180:	void km_state_expired(struct xfrm_state *, int, u32);
2167:	void km_state_notify(struct xfrm_state *, const struct km_event *);
1974:	int verify_spi_info(u8, u32, u32);
1998:	int xfrm_alloc_spi(struct xfrm_state *, u32, u32);
2755:	void xfrm_audit_state_add(struct xfrm_state *, int, bool);
2769:	void xfrm_audit_state_delete(struct xfrm_state *, int, bool);
2847:	void xfrm_audit_state_icvfail(struct xfrm_state *, struct sk_buff *, u8);
2830:	void xfrm_audit_state_notfound(struct sk_buff *, u16, __be32, __be32);
2818:	void xfrm_audit_state_notfound_simple(struct sk_buff *, u16);
2801:	void xfrm_audit_state_replay(struct xfrm_state *, struct sk_buff *, __be32);
2783:	void xfrm_audit_state_replay_overflow(struct xfrm_state *, struct sk_buff *);
801:	int xfrm_dev_state_flush(struct net *, struct net_device *, bool);
1789:	struct xfrm_state *xfrm_find_acq(struct net *, const struct xfrm_mark *, u8, u32, u32, u8, const xfrm_address_t *, const xfrm_address_t *, int, unsigned short);
1950:	struct xfrm_state *xfrm_find_acq_byseq(struct net *, u32, u32);
2498:	void xfrm_flush_gc(void);
1961:	u32 xfrm_get_acqseq(void);
2637:	int xfrm_init_state(struct xfrm_state *);
1569:	struct xfrm_state *xfrm_migrate_state_find(struct xfrm_migrate *, struct net *);
2421:	int xfrm_register_km(struct xfrm_mgr *);
181:	int xfrm_register_type(const struct xfrm_type *, unsigned short);
326:	int xfrm_register_type_offload(const struct xfrm_type_offload *, unsigned short);
843:	void xfrm_sad_getinfo(struct net *, struct xfrmk_sadinfo *);
1389:	int xfrm_state_add(struct xfrm_state *);
2477:	struct xfrm_state_afinfo *xfrm_state_afinfo_get_rcu(unsigned int);
610:	struct xfrm_state *xfrm_state_alloc(struct net *);
1739:	int xfrm_state_check_expire(struct xfrm_state *);
689:	int xfrm_state_delete(struct xfrm_state *);
2505:	void xfrm_state_delete_tunnel(struct xfrm_state *);
1044:	struct xfrm_state *xfrm_state_find(const xfrm_address_t *, const xfrm_address_t *, const struct flowi *, struct xfrm_tmpl *, struct xfrm_policy *, int *, unsigned short, u32);
2687:	void xfrm_state_fini(struct net *);
758:	int xfrm_state_flush(struct net *, u8, bool, bool);
473:	void xfrm_state_free(struct xfrm_state *);
2486:	struct xfrm_state_afinfo *xfrm_state_get_afinfo(unsigned int);
2650:	int xfrm_state_init(struct net *);
1296:	void xfrm_state_insert(struct xfrm_state *);
1762:	struct xfrm_state *xfrm_state_lookup(struct net *, u32, const xfrm_address_t *, __be32, u8, unsigned short);
1775:	struct xfrm_state *xfrm_state_lookup_byaddr(struct net *, u32, const xfrm_address_t *, const xfrm_address_t *, u8, unsigned short);
1221:	struct xfrm_state *xfrm_state_lookup_byspi(struct net *, __be32, unsigned short);
1616:	struct xfrm_state *xfrm_state_migrate(struct xfrm_state *, struct xfrm_migrate *, struct xfrm_encap_tmpl *);
2552:	u32 xfrm_state_mtu(struct xfrm_state *, int);
2440:	int xfrm_state_register_afinfo(struct xfrm_state_afinfo *);
1915:	void xfrm_state_sort(struct xfrm_state **, struct xfrm_state **, int, unsigned short);
2457:	int xfrm_state_unregister_afinfo(struct xfrm_state_afinfo *);
1647:	int xfrm_state_update(struct xfrm_state *);
2072:	int xfrm_state_walk(struct net *, struct xfrm_state_walk *, int (*)(struct xfrm_state *, int, void *), void *);
2125:	void xfrm_state_walk_done(struct xfrm_state_walk *, struct net *);
2114:	void xfrm_state_walk_init(struct xfrm_state_walk *, u8, struct xfrm_address_filter *);
1188:	struct xfrm_state *xfrm_stateonly_find(struct net *, u32, u32, xfrm_address_t *, xfrm_address_t *, unsigned short, u8, u8, u32);
1901:	void xfrm_tmpl_sort(struct xfrm_tmpl **, struct xfrm_tmpl **, int, unsigned short);
2430:	int xfrm_unregister_km(struct xfrm_mgr *);
227:	void xfrm_unregister_type(const struct xfrm_type *, unsigned short);
351:	void xfrm_unregister_type_offload(const struct xfrm_type_offload *, unsigned short);
2360:	int xfrm_user_policy(struct sock *, int, sockptr_t, int);
479:	static void ___xfrm_state_destroy(struct xfrm_state *);
1308:	static struct xfrm_state *__find_acq_core(struct net *, const struct xfrm_mark *, unsigned short, u8, u32, u32, u8, const xfrm_address_t *, const xfrm_address_t *, int);
854:	static void __xfrm4_init_tempsel(struct xfrm_selector *, const struct flowi *);
872:	static void __xfrm6_init_tempsel(struct xfrm_selector *, const struct flowi *);
1807:	static void __xfrm6_sort(void **, void **, int, int (*)(const void *), int);
1838:	static int __xfrm6_state_sort_cmp(const void *);
1867:	static int __xfrm6_tmpl_sort_cmp(const void *);
1931:	static struct xfrm_state *__xfrm_find_acq_byseq(u32, u32, struct net *, struct net *);
1274:	static void __xfrm_state_bump_genids(struct xfrm_state *);
2055:	static bool __xfrm_state_filter_match(struct xfrm_state *, struct xfrm_address_filter *);
1243:	static void __xfrm_state_insert(struct xfrm_state *);
929:	static struct xfrm_state *__xfrm_state_lookup(u32, const xfrm_address_t *, __be32, u8, unsigned short, struct net *, struct net *);
954:	static struct xfrm_state *__xfrm_state_lookup_byaddr(u32, const xfrm_address_t *, const xfrm_address_t *, u8, unsigned short, struct net *, struct net *);
2731:	static void xfrm_audit_helper_pktinfo(struct sk_buff *, u16, struct audit_buffer *);
2707:	static void xfrm_audit_helper_sainfo(struct xfrm_state *, struct audit_buffer *);
117:	static void xfrm_hash_resize(struct work_struct *);
81:	static void xfrm_hash_transfer(struct hlist_head *, struct hlist_head *, struct hlist_head *, unsigned int, struct hlist_head *, struct hlist_head *);
891:	static void xfrm_init_tempstate(struct xfrm_state *, const struct flowi *, const struct xfrm_tmpl *, const xfrm_address_t *, const xfrm_address_t *, unsigned short);
2138:	static void xfrm_replay_timer_handler(struct timer_list *);
1470:	static struct xfrm_state *xfrm_state_clone(struct xfrm_state *, struct xfrm_encap_tmpl *);
504:	static void xfrm_state_gc_task(struct work_struct *);
1003:	static void xfrm_state_look_at(struct xfrm_policy *, struct xfrm_state *, const struct flowi *, unsigned short, struct xfrm_state **, int *, int *);
520:	static enum hrtimer_restart xfrm_timer_handler(struct hrtimer *);

File net/xfrm/xfrm_sysctl.c:
73:	void xfrm_sysctl_fini(struct net *);
44:	int xfrm_sysctl_init(struct net *);

File net/xfrm/xfrm_user.c:
400:	static int attach_aead(struct xfrm_state *, struct nlattr *);
340:	static int attach_auth(struct xfrm_algo_auth **, u8 *, struct nlattr *);
370:	static int attach_auth_trunc(struct xfrm_algo_auth **, u8 *, struct nlattr *);
315:	static int attach_crypt(struct xfrm_state *, struct nlattr *);
289:	static int attach_one_algo(struct xfrm_algo **, u8 *, struct nlattr *, struct xfrm_algo_desc *(*)(const char *, int));
3008:	static int build_acquire(struct sk_buff *, struct xfrm_state *, struct xfrm_tmpl *, struct xfrm_policy *);
2025:	static int build_aevent(struct sk_buff *, struct xfrm_state *, const struct km_event *);
2784:	static int build_expire(struct sk_buff *, struct xfrm_state *, const struct km_event *);
3352:	static int build_mapping(struct sk_buff *, struct xfrm_state *, xfrm_address_t *, __be16);
2506:	static int build_migrate(struct sk_buff *, const struct xfrm_migrate *, int, const struct xfrm_kmaddress *, const struct xfrm_selector *, const struct xfrm_encap_tmpl *, u8, u8);
3134:	static int build_polexpire(struct sk_buff *, struct xfrm_policy *, int, const struct km_event *, const struct km_event *);
1253:	static int build_sadinfo(struct sk_buff *, struct net *, u32, u32, u32);
1128:	static int build_spdinfo(struct sk_buff *, struct net *, u32, u32, u32);
2373:	static int copy_from_user_migrate(struct xfrm_migrate *, struct xfrm_kmaddress *, struct nlattr **, int *);
1620:	static void copy_from_user_policy(struct xfrm_policy *, struct xfrm_userpolicy_info *);
494:	static void copy_from_user_state(struct xfrm_state *, struct xfrm_usersa_info *);
813:	static int copy_sec_ctx(struct xfrm_sec_ctx *, struct sk_buff *);
1502:	static void copy_templates(struct xfrm_policy *, struct xfrm_user_tmpl *, int);
851:	static int copy_to_user_auth(struct xfrm_algo_auth *, struct sk_buff *);
2465:	static int copy_to_user_migrate(const struct xfrm_migrate *, struct sk_buff *);
1632:	static void copy_to_user_policy(struct xfrm_policy *, struct xfrm_userpolicy_info *, int);
787:	static void copy_to_user_state(struct xfrm_state *, struct xfrm_usersa_info *);
882:	static int copy_to_user_state_extra(struct xfrm_state *, struct xfrm_usersa_info *, struct sk_buff *);
1726:	static int copy_to_user_tmpl(struct xfrm_policy *, struct sk_buff *);
1797:	static int dump_one_policy(struct xfrm_policy *, int, int, void *);
973:	static int dump_one_state(struct xfrm_state *, int, void *);
1527:	static int validate_tmpl(int, struct xfrm_user_tmpl *, u16);
1436:	static int verify_newpolicy_info(struct xfrm_userpolicy_info *, struct xfrm_userpolicy_info *);
148:	static int verify_newsa_info(struct xfrm_usersa_info *, struct nlattr **);
2310:	static int xfrm_add_acquire(struct sk_buff *, struct nlmsghdr *, struct nlattr **);
2210:	static int xfrm_add_pol_expire(struct sk_buff *, struct nlmsghdr *, struct nlattr **);
1681:	static int xfrm_add_policy(struct sk_buff *, struct nlmsghdr *, struct nlattr **);
671:	static int xfrm_add_sa(struct sk_buff *, struct nlmsghdr *, struct nlattr **);
2276:	static int xfrm_add_sa_expire(struct sk_buff *, struct nlmsghdr *, struct nlattr **);
2829:	static int xfrm_aevent_state_notify(struct xfrm_state *, const struct km_event *);
450:	static int xfrm_alloc_replay_state_esn(struct xfrm_replay_state_esn **, struct xfrm_replay_state_esn **, struct nlattr *);
1329:	static int xfrm_alloc_userspi(struct sk_buff *, struct nlmsghdr *, struct nlattr **);
3068:	static struct xfrm_policy *xfrm_compile_policy(struct sock *, int, u8 *, int, int *);
750:	static int xfrm_del_sa(struct sk_buff *, struct nlmsghdr *, struct nlattr **);
2415:	static int xfrm_do_migrate(struct sk_buff *, struct nlmsghdr *, struct nlattr **);
1862:	static int xfrm_dump_policy(struct sk_buff *, struct netlink_callback *);
1843:	static int xfrm_dump_policy_done(struct netlink_callback *);
1852:	static int xfrm_dump_policy_start(struct netlink_callback *);
1022:	static int xfrm_dump_sa(struct sk_buff *, struct netlink_callback *);
1011:	static int xfrm_dump_sa_done(struct netlink_callback *);
3167:	static int xfrm_exp_policy_notify(struct xfrm_policy *, int, const struct km_event *);
2182:	static int xfrm_flush_policy(struct sk_buff *, struct nlmsghdr *, struct nlattr **);
1987:	static int xfrm_flush_sa(struct sk_buff *, struct nlmsghdr *, struct nlattr **);
2087:	static int xfrm_get_ae(struct sk_buff *, struct nlmsghdr *, struct nlattr **);
1904:	static int xfrm_get_policy(struct sk_buff *, struct nlmsghdr *, struct nlattr **);
1305:	static int xfrm_get_sa(struct sk_buff *, struct nlmsghdr *, struct nlattr **);
1285:	static int xfrm_get_sadinfo(struct sk_buff *, struct nlmsghdr *, struct nlattr **);
1226:	static int xfrm_get_spdinfo(struct sk_buff *, struct nlmsghdr *, struct nlattr **);
3401:	static bool xfrm_is_alive(const struct km_event *);
2769:	static void xfrm_netlink_rcv(struct sk_buff *);
2131:	static int xfrm_new_ae(struct sk_buff *, struct nlmsghdr *, struct nlattr **);
3183:	static int xfrm_notify_policy(struct xfrm_policy *, int, const struct km_event *);
3252:	static int xfrm_notify_policy_flush(const struct km_event *);
2915:	static int xfrm_notify_sa(struct xfrm_state *, const struct km_event *);
2845:	static int xfrm_notify_sa_flush(const struct km_event *);
1647:	static struct xfrm_policy *xfrm_policy_construct(struct net *, struct xfrm_userpolicy_info *, struct nlattr **, int *);
3048:	static int xfrm_send_acquire(struct xfrm_state *, struct xfrm_tmpl *, struct xfrm_policy *);
3378:	static int xfrm_send_mapping(struct xfrm_state *, xfrm_address_t *, __be16);
2553:	static int xfrm_send_migrate(const struct xfrm_selector *, u8, u8, const struct xfrm_migrate *, int, const struct xfrm_kmaddress *, const struct xfrm_encap_tmpl *);
3280:	static int xfrm_send_policy_notify(struct xfrm_policy *, int, const struct km_event *);
3331:	static int xfrm_send_report(struct net *, u8, struct xfrm_selector *, xfrm_address_t *);
2974:	static int xfrm_send_state_notify(struct xfrm_state *, const struct km_event *);
1181:	static int xfrm_set_spdinfo(struct sk_buff *, struct nlmsghdr *, struct nlattr **);
570:	static struct xfrm_state *xfrm_state_construct(struct net *, struct xfrm_usersa_info *, struct nlattr **, int *);
1066:	static struct sk_buff *xfrm_state_netlink(struct sk_buff *, struct xfrm_state *, u32);
516:	static void xfrm_update_ae_params(struct xfrm_state *, struct nlattr **, int);
3463:	static void xfrm_user_exit(void);
3448:	static int xfrm_user_init(void);
3433:	static void xfrm_user_net_exit(struct list_head *);
3417:	static int xfrm_user_net_init(struct net *);
2688:	static int xfrm_user_rcv_msg(struct sk_buff *, struct nlmsghdr *, struct netlink_ext_ack *);
716:	static struct xfrm_state *xfrm_user_state_lookup(struct net *, struct xfrm_usersa_id *, struct nlattr **, int *);

File security/apparmor/apparmorfs.c:
593:	void __aa_bump_ns_revision(struct aa_ns *);
1427:	int __aa_fs_create_rawdata(struct aa_ns *, struct aa_loaddata *);
1415:	void __aa_fs_remove_rawdata(struct aa_loaddata *);
1995:	int __aafs_ns_mkdir(struct aa_ns *, struct dentry *, const char *, struct dentry *);
1887:	void __aafs_ns_rmdir(struct aa_ns *);
1530:	void __aafs_profile_migrate_dents(struct aa_profile *, struct aa_profile *);
1667:	int __aafs_profile_mkdir(struct aa_profile *, struct dentry *);
1503:	void __aafs_profile_rmdir(struct aa_profile *);
2488:	void aa_destroy_aafs(void);
1936:	static int __aafs_ns_mkdir_entries(struct aa_ns *, struct dentry *);
211:	static int __aafs_setup_d_inode(struct inode *, struct dentry *, umode_t, void *, const struct file_operations *, const struct inode_operations *, char *);
2590:	static int aa_create_aafs(void);
2497:	static int aa_mk_null_file(struct dentry *);
1010:	static int aa_sfs_seq_open(struct inode *, struct file *);
985:	static int aa_sfs_seq_show(struct seq_file *, void *);
384:	static struct aa_loaddata *aa_simple_write_to_buffer(const char *, size_t, size_t, loff_t *);
931:	static ssize_t aa_write_access(struct file *, const char *, size_t, loff_t *);
261:	static struct dentry *aafs_create(const char *, umode_t, struct dentry *, void *, const struct file_operations *, const struct inode_operations *, void *);
153:	static void aafs_free_inode(struct inode *);
348:	static void aafs_remove(struct dentry *);
147:	static int aafs_show_path(struct seq_file *, struct dentry *);
166:	static int apparmorfs_fill_super(struct super_block *, struct fs_context *);
179:	static int apparmorfs_get_tree(struct fs_context *);
188:	static int apparmorfs_init_fs_context(struct fs_context *);
1547:	static struct dentry *create_profile_file(struct dentry *, const char *, struct aa_profile *, const struct file_operations *);
1296:	static int deflate_decompress(char *, size_t, char *, size_t);
2423:	static int entry_create_dir(struct aa_sfs_entry *, struct dentry *);
2469:	static void entry_remove_dir(struct aa_sfs_entry *);
1573:	static char *gen_symlink_name(int, const char *, const char *);
105:	static int mangle_name(const char *, char *);
876:	static ssize_t multi_transaction_read(struct file *, char *, size_t, loff_t *);
894:	static int multi_transaction_release(struct inode *, struct file *);
1776:	static int ns_mkdir_op(struct inode *, struct dentry *, umode_t);
562:	static int ns_revision_open(struct inode *, struct file *);
577:	static __poll_t ns_revision_poll(struct file *, poll_table *);
531:	static ssize_t ns_revision_read(struct file *, char *, size_t, loff_t *);
519:	static int ns_revision_release(struct inode *, struct file *);
1825:	static int ns_rmdir_op(struct inode *, struct dentry *);
2213:	static void *p_next(struct seq_file *, void *, loff_t *);
2185:	static void *p_start(struct seq_file *, loff_t *);
2229:	static void p_stop(struct seq_file *, void *);
2541:	static const char *policy_get_link(struct dentry *, struct inode *, struct delayed_call *);
2561:	static int policy_readlink(struct dentry *, char *, int);
411:	static ssize_t policy_update(u32, const char *, size_t, loff_t *, struct aa_ns *);
440:	static ssize_t profile_load(struct file *, const char *, size_t, loff_t *);
608:	static void profile_query_cb(struct aa_profile *, struct aa_perms *, const char *, size_t);
474:	static ssize_t profile_remove(struct file *, const char *, size_t, loff_t *);
457:	static ssize_t profile_replace(struct file *, const char *, size_t, loff_t *);
2268:	static int profiles_open(struct inode *, struct file *);
2276:	static int profiles_release(struct inode *, struct file *);
835:	static void put_multi_transaction(struct multi_transaction *);
658:	static ssize_t query_data(char *, char *, size_t, size_t);
751:	static ssize_t query_label(char *, char *, size_t, bool, size_t);
75:	static void rawdata_f_data_free(struct rawdata_f_data *);
1638:	static const char *rawdata_get_link_abi(struct dentry *, struct inode *, struct delayed_call *);
1603:	static const char *rawdata_get_link_base(struct dentry *, struct delayed_call *, const char *, struct inode *, struct inode *);
1645:	static const char *rawdata_get_link_data(struct dentry *, struct inode *, struct delayed_call *);
1631:	static const char *rawdata_get_link_sha1(struct dentry *, struct inode *, struct delayed_call *);
1598:	static void rawdata_link_cb(void *);
1355:	static int rawdata_open(struct inode *, struct file *);
1338:	static ssize_t rawdata_read(struct file *, char *, size_t, loff_t *);
1348:	static int rawdata_release(struct inode *, struct file *);
1200:	static int seq_ns_level_open(struct inode *, struct file *);
1178:	static int seq_ns_level_show(struct seq_file *, void *);
1201:	static int seq_ns_name_open(struct inode *, struct file *);
1189:	static int seq_ns_name_show(struct seq_file *, void *);
1199:	static int seq_ns_nsstacked_open(struct inode *, struct file *);
1155:	static int seq_ns_nsstacked_show(struct seq_file *, void *);
1198:	static int seq_ns_stacked_open(struct inode *, struct file *);
1144:	static int seq_ns_stacked_show(struct seq_file *, void *);
1121:	static int seq_profile_attach_open(struct inode *, struct file *);
1086:	static int seq_profile_attach_show(struct seq_file *, void *);
1122:	static int seq_profile_hash_open(struct inode *, struct file *);
1102:	static int seq_profile_hash_show(struct seq_file *, void *);
1120:	static int seq_profile_mode_open(struct inode *, struct file *);
1075:	static int seq_profile_mode_show(struct seq_file *, void *);
1119:	static int seq_profile_name_open(struct inode *, struct file *);
1064:	static int seq_profile_name_show(struct seq_file *, void *);
1042:	static int seq_profile_open(struct file *, int (*)(struct seq_file *, void *), struct inode *, struct inode *);
1056:	static int seq_profile_release(struct inode *, struct file *);
1291:	static int seq_rawdata_abi_open(struct inode *, struct file *);
1250:	static int seq_rawdata_abi_show(struct seq_file *, void *);
1294:	static int seq_rawdata_compressed_size_open(struct inode *, struct file *);
1282:	static int seq_rawdata_compressed_size_show(struct seq_file *, void *);
1293:	static int seq_rawdata_hash_open(struct inode *, struct file *);
1268:	static int seq_rawdata_hash_show(struct seq_file *, void *);
1220:	static int seq_rawdata_open(struct file *, int (*)(struct seq_file *, void *), struct inode *, struct inode *);
1240:	static int seq_rawdata_release(struct inode *, struct file *);
1292:	static int seq_rawdata_revision_open(struct inode *, struct file *);
1259:	static int seq_rawdata_revision_show(struct seq_file *, void *);
2249:	static int seq_show_profile(struct seq_file *, void *);

File security/apparmor/audit.c:
123:	int aa_audit(int, struct aa_profile *, struct common_audit_data *, void (*)(struct audit_buffer *, void *));
105:	void aa_audit_msg(int, struct common_audit_data *, void (*)(struct audit_buffer *, void *));
165:	void aa_audit_rule_free(void *);
176:	int aa_audit_rule_init(u32, u32, char *, void **);
207:	int aa_audit_rule_known(struct audit_krule *);
223:	int aa_audit_rule_match(u32, u32, u32, void *);
55:	static void audit_pre(struct audit_buffer *, void *);

File security/apparmor/capability.c:
147:	int aa_capable(struct aa_label *, int, unsigned int);
64:	static int audit_caps(struct common_audit_data *, struct aa_profile *, int, int);
44:	static void audit_cb(struct audit_buffer *, void *);

File security/apparmor/crypto.c:
28:	char *aa_calc_hash(void *, size_t);
61:	int aa_calc_profile_hash(struct aa_profile *, u32, void *, size_t);
23:	unsigned int aa_hash_size(void);
102:	static int init_profile_hash(void);

File security/apparmor/domain.c:
1146:	int aa_change_hat(const char **, int, u64, int);
1291:	int aa_change_profile(const char *, int);
35:	void aa_free_domain_entries(struct aa_domain *);
852:	int apparmor_bprm_creds_for_exec(struct linux_binprm *);
509:	struct aa_label *x_table_lookup(struct aa_profile *, u32, const char **);
985:	static struct aa_label *build_change_hat(struct aa_profile *, const char *, bool);
1033:	static struct aa_label *change_hat(struct aa_label *, const char **, int, int);
386:	static struct aa_label *find_attach(const struct linux_binprm *, struct aa_ns *, struct list_head *, const char *, const char **);
792:	static struct aa_label *handle_onexec(struct aa_label *, struct aa_label *, bool, const struct linux_binprm *, char *, struct path_cond *, bool *);
192:	static int label_components_match(struct aa_profile *, struct aa_label *, bool, unsigned int, bool, u32, struct aa_perms *);
132:	static int label_compound_match(struct aa_profile *, struct aa_label *, bool, unsigned int, bool, u32, struct aa_perms *);
253:	static int label_match(struct aa_profile *, struct aa_label *, bool, unsigned int, u32, struct aa_perms *, bool);
59:	static int may_change_ptraced_domain(struct aa_label *, const char **);
720:	static int profile_onexec(struct aa_profile *, struct aa_label *, bool, const struct linux_binprm *, char *, struct path_cond *, bool *);
622:	static struct aa_label *profile_transition(struct aa_profile *, const struct linux_binprm *, char *, struct path_cond *, bool *);
555:	static struct aa_label *x_to_label(struct aa_profile *, const struct linux_binprm *, const char *, u32, const char **, const char **);

File security/apparmor/file.c:
266:	int __aa_path_perm(const char *, struct aa_profile *, const char *, u32, struct path_cond *, struct aa_perms *, int);
90:	int aa_audit_file(struct aa_profile *, struct aa_perms *, const char *, u32, const char *, const char *, struct aa_label *, kuid_t, const char *, int);
213:	struct aa_perms aa_compute_fperms(struct aa_dfa *, unsigned int, struct path_cond *);
596:	int aa_file_perm(const char *, struct aa_label *, struct file *, u32, bool);
685:	void aa_inherit_files(const struct cred *, struct files_struct *);
455:	int aa_path_link(struct aa_label *, struct dentry *, const struct path *, struct dentry *);
313:	int aa_path_perm(const char *, struct aa_label *, const struct path *, int, u32, struct path_cond *);
255:	unsigned int aa_str_perms(struct aa_dfa *, unsigned int, const char *, struct path_cond *, struct aa_perms *);
505:	static int __file_path_perm(const char *, struct aa_label *, struct aa_label *, struct file *, u32, u32, bool);
42:	static void file_audit_cb(struct audit_buffer *, void *);
181:	static u32 map_old_perms(u32);
673:	static int match_file(const void *, struct file *, unsigned int);
155:	static int path_name(const char *, struct aa_label *, const struct path *, int, char *, const char **, struct path_cond *, u32);
356:	static int profile_path_link(struct aa_profile *, const struct path *, char *, const struct path *, char *, struct path_cond *);
282:	static int profile_path_perm(const char *, struct aa_profile *, const struct path *, char *, u32, struct path_cond *, int, struct aa_perms *);
644:	static void revalidate_tty(struct aa_label *);
484:	static void update_file_ctx(struct aa_file_ctx *, struct aa_label *, u32);

File security/apparmor/ipc.c:
118:	int aa_may_ptrace(struct aa_label *, struct aa_label *, u32);
208:	int aa_may_signal(struct aa_label *, struct aa_label *, int);
43:	static void audit_ptrace_cb(struct audit_buffer *, void *);
162:	static void audit_signal_cb(struct audit_buffer *, void *);
63:	static int profile_ptrace_perm(struct aa_profile *, struct aa_label *, u32, struct common_audit_data *);
187:	static int profile_signal_perm(struct aa_profile *, struct aa_label *, u32, struct common_audit_data *);

File security/apparmor/label.c:
497:	struct aa_profile *__aa_label_next_not_in_set(struct label_it *, struct aa_label *, struct aa_label *);
2147:	void __aa_labelset_update_subtree(struct aa_ns *);
73:	void __aa_proxy_redirect(struct aa_label *, struct aa_label *);
60:	struct aa_proxy *aa_alloc_proxy(struct aa_label *, gfp_t);
1716:	int aa_label_acntsxprint(char **, struct aa_ns *, struct aa_label *, int, gfp_t);
421:	struct aa_label *aa_label_alloc(int, struct aa_proxy *, gfp_t);
1687:	int aa_label_asxprint(char **, struct aa_ns *, struct aa_label *, int, gfp_t);
1812:	void aa_label_audit(struct audit_buffer *, struct aa_label *, gfp_t);
312:	void aa_label_destroy(struct aa_label *);
908:	struct aa_label *aa_label_find(struct aa_label *);
1181:	struct aa_label *aa_label_find_merge(struct aa_label *, struct aa_label *);
339:	void aa_label_free(struct aa_label *);
396:	bool aa_label_init(struct aa_label *, int, gfp_t);
926:	struct aa_label *aa_label_insert(struct aa_labelset *, struct aa_label *);
535:	bool aa_label_is_subset(struct aa_label *, struct aa_label *);
562:	bool aa_label_is_unconfined_subset(struct aa_label *, struct aa_label *);
367:	void aa_label_kref(struct kref *);
1418:	int aa_label_match(struct aa_profile *, struct aa_label *, unsigned int, bool, u32, struct aa_perms *);
1218:	struct aa_label *aa_label_merge(struct aa_label *, struct aa_label *, gfp_t);
475:	int aa_label_next_confined(struct aa_label *, int);
960:	struct aa_profile *aa_label_next_in_merge(struct label_it *, struct aa_label *, struct aa_label *);
1966:	struct aa_label *aa_label_parse(struct aa_label *, const char *, gfp_t, bool, bool);
1828:	void aa_label_printk(struct aa_label *, gfp_t);
770:	bool aa_label_remove(struct aa_label *);
793:	bool aa_label_replace(struct aa_label *, struct aa_label *);
1820:	void aa_label_seq_print(struct seq_file *, struct aa_label *, gfp_t);
1765:	void aa_label_seq_xprint(struct seq_file *, struct aa_ns *, struct aa_label *, int, gfp_t);
1623:	int aa_label_snxprint(char *, size_t, struct aa_ns *, struct aa_label *, int);
1885:	struct aa_label *aa_label_strn_parse(struct aa_label *, const char *, size_t, gfp_t, bool, bool);
1735:	void aa_label_xaudit(struct audit_buffer *, struct aa_ns *, struct aa_label *, int, gfp_t);
1789:	void aa_label_xprintk(struct aa_ns *, struct aa_label *, int, gfp_t);
1980:	void aa_labelset_destroy(struct aa_labelset *);
2003:	void aa_labelset_init(struct aa_labelset *);
53:	void aa_proxy_kref(struct kref *);
1444:	bool aa_update_label_name(struct aa_ns *, struct aa_label *, gfp_t);
887:	struct aa_label *aa_vec_find_or_create_label(struct aa_profile **, int, gfp_t);
262:	int aa_vec_unique(struct aa_profile **, int, int);
1140:	static struct aa_label *__label_find_merge(struct aa_labelset *, struct aa_label *, struct aa_label *);
663:	static struct aa_label *__label_insert(struct aa_labelset *, struct aa_label *, bool);
591:	static bool __label_remove(struct aa_label *, struct aa_label *);
2049:	static struct aa_label *__label_update(struct aa_label *);
2121:	static void __labelset_update(struct aa_ns *);
88:	static void __proxy_share(struct aa_label *, struct aa_label *);
720:	static struct aa_label *__vec_find(struct aa_profile **, int);
42:	static void free_proxy(struct aa_proxy *);
1359:	static int label_components_match(struct aa_profile *, struct aa_label *, unsigned int, bool, u32, struct aa_perms *);
1301:	static int label_compound_match(struct aa_profile *, struct aa_label *, unsigned int, bool, u32, struct aa_perms *);
1836:	static int label_count_strn_entries(const char *, size_t);
387:	static void label_free_or_put_new(struct aa_label *, struct aa_label *);
358:	static void label_free_rcu(struct callback_head *);
348:	static void label_free_switch(struct aa_label *);
1047:	static struct aa_label *label_merge_insert(struct aa_label *, struct aa_label *, struct aa_label *);
1553:	static const char *label_modename(struct aa_ns *, struct aa_label *, int);
2011:	static struct aa_label *labelset_next_stale(struct aa_labelset *);
135:	static int profile_cmp(struct aa_profile *, struct aa_profile *);
214:	static int sort_cmp(const void *, const void *);
853:	static struct aa_label *vec_create_and_insert_label(struct aa_profile **, int, gfp_t);

File security/apparmor/lib.c:
290:	void aa_apply_modes_to_perms(struct aa_profile *, struct aa_perms *);
239:	void aa_audit_perm_mask(struct audit_buffer *, u32, const char *, u32, const char * const *, u32);
221:	void aa_audit_perm_names(struct audit_buffer *, const char * const *, u32);
429:	int aa_check_perms(struct aa_profile *, struct aa_perms *, u32, struct common_audit_data *, void (*)(struct audit_buffer *, void *));
325:	void aa_compute_perms(struct aa_dfa *, unsigned int, struct aa_perms *);
124:	void aa_info_message(const char *);
203:	void aa_perm_mask_to_str(char *, size_t, const char *, u32);
367:	void aa_perms_accum(struct aa_perms *, struct aa_perms *);
348:	void aa_perms_accum_raw(struct aa_perms *, struct aa_perms *);
518:	void aa_policy_destroy(struct aa_policy *);
488:	bool aa_policy_init(struct aa_policy *, const char *, const char *, gfp_t);
395:	int aa_profile_label_perm(struct aa_profile *, struct aa_profile *, u32, int, u32 *, struct common_audit_data *);
381:	void aa_profile_match_label(struct aa_profile *, struct aa_label *, int, u32, struct aa_perms *);
42:	char *aa_split_fqname(char *, char **);
83:	const char *aa_splitn_fqname(const char *, size_t, const char **, size_t *);
135:	char *aa_str_alloc(int, gfp_t);
147:	void aa_str_kref(struct kref *);
74:	const char *skipn_spaces(const char *, size_t);
262:	static void aa_audit_perms_cb(struct audit_buffer *, void *);

File security/apparmor/lsm.c:
1582:	char *aa_get_buffer(bool);
1623:	void aa_put_buffer(char *);
1671:	static int alloc_buffers(void);
714:	static void apparmor_bprm_committed_creds(struct linux_binprm *);
692:	static void apparmor_bprm_committing_creds(struct linux_binprm *);
180:	static int apparmor_capable(const struct cred *, struct user_namespace *, int, unsigned int);
147:	static int apparmor_capget(struct task_struct *, kernel_cap_t *, kernel_cap_t *, kernel_cap_t *);
75:	static int apparmor_cred_alloc_blank(struct cred *, gfp_t);
66:	static void apparmor_cred_free(struct cred *);
84:	static int apparmor_cred_prepare(struct cred *, const struct cred *, gfp_t);
94:	static void apparmor_cred_transfer(struct cred *, const struct cred *);
1703:	static int apparmor_dointvec(struct ctl_table *, int, void *, size_t *, loff_t *);
1379:	static int apparmor_enabled_setup(char *);
436:	static int apparmor_file_alloc_security(struct file *);
447:	static void apparmor_file_free_security(struct file *);
483:	static int apparmor_file_lock(struct file *, unsigned int);
521:	static int apparmor_file_mprotect(struct vm_area_struct *, unsigned long, unsigned long);
402:	static int apparmor_file_open(struct file *);
478:	static int apparmor_file_permission(struct file *, int);
472:	static int apparmor_file_receive(struct file *);
588:	static int apparmor_getprocattr(struct task_struct *, char *, char **);
1150:	static int apparmor_inet_conn_request(struct sock *, struct sk_buff *, struct request_sock *);
1835:	static int apparmor_init(void);
397:	static int apparmor_inode_getattr(const struct path *);
1766:	static unsigned int apparmor_ipv4_postroute(void *, struct sk_buff *, const struct nf_hook_state *);
515:	static int apparmor_mmap_file(struct file *, unsigned long, unsigned long, unsigned long);
1819:	static int apparmor_nf_ip_init(void);
1799:	static int apparmor_nf_register(struct net *);
1808:	static void apparmor_nf_unregister(struct net *);
387:	static int apparmor_path_chmod(const struct path *, umode_t);
392:	static int apparmor_path_chown(const struct path *, kuid_t, kgid_t);
336:	static int apparmor_path_link(struct dentry *, const struct path *, struct dentry *);
306:	static int apparmor_path_mkdir(const struct path *, struct dentry *, umode_t);
318:	static int apparmor_path_mknod(const struct path *, struct dentry *, umode_t, unsigned int);
353:	static int apparmor_path_rename(const struct path *, struct dentry *, const struct path *, struct dentry *);
313:	static int apparmor_path_rmdir(const struct path *, struct dentry *);
329:	static int apparmor_path_symlink(const struct path *, struct dentry *, const char *);
324:	static int apparmor_path_truncate(const struct path *);
301:	static int apparmor_path_unlink(const struct path *, struct dentry *);
115:	static int apparmor_ptrace_access_check(struct task_struct *, unsigned int);
132:	static int apparmor_ptrace_traceme(struct task_struct *);
529:	static int apparmor_sb_mount(const char *, const struct path *, const char *, unsigned long, void *);
574:	static int apparmor_sb_pivotroot(const struct path *, const struct path *);
561:	static int apparmor_sb_umount(struct vfsmount *, int);
615:	static int apparmor_setprocattr(const char *, void *, size_t);
772:	static int apparmor_sk_alloc_security(struct sock *, int, gfp_t);
801:	static void apparmor_sk_clone_security(const struct sock *, struct sock *);
788:	static void apparmor_sk_free_security(struct sock *);
1141:	static void apparmor_sock_graft(struct sock *, struct socket *);
923:	static int apparmor_socket_accept(struct socket *, struct socket *);
874:	static int apparmor_socket_bind(struct socket *, struct sockaddr *, int);
890:	static int apparmor_socket_connect(struct socket *, struct sockaddr *, int);
819:	static int apparmor_socket_create(int, int, int, int);
989:	static int apparmor_socket_getpeername(struct socket *);
1122:	static int apparmor_socket_getpeersec_dgram(struct socket *, struct sk_buff *, u32 *);
1072:	static int apparmor_socket_getpeersec_stream(struct socket *, char *, int *, unsigned int);
981:	static int apparmor_socket_getsockname(struct socket *);
1010:	static int apparmor_socket_getsockopt(struct socket *, int, int);
906:	static int apparmor_socket_listen(struct socket *, int);
847:	static int apparmor_socket_post_create(struct socket *, int, int, int, int);
960:	static int apparmor_socket_recvmsg(struct socket *, struct msghdr *, int, int);
951:	static int apparmor_socket_sendmsg(struct socket *, struct msghdr *, int);
1020:	static int apparmor_socket_setsockopt(struct socket *, int, int);
1030:	static int apparmor_socket_shutdown(struct socket *, int);
1044:	static int apparmor_socket_sock_rcv_skb(struct sock *, struct sk_buff *);
105:	static int apparmor_task_alloc(struct task_struct *, unsigned long);
99:	static void apparmor_task_free(struct task_struct *);
722:	static void apparmor_task_getsecid(struct task_struct *, u32 *);
742:	static int apparmor_task_kill(struct task_struct *, struct kernel_siginfo *, int, const struct cred *);
729:	static int apparmor_task_setrlimit(struct task_struct *, unsigned int, struct rlimit *);
455:	static int common_file_perm(const char *, struct file *, u32, bool);
203:	static int common_perm(const char *, const struct path *, u32, struct path_cond *);
1655:	static void destroy_buffers(void);
1418:	static int param_get_aabool(char *, const struct kernel_param *);
1514:	static int param_get_aacompressionlevel(char *, const struct kernel_param *);
1480:	static int param_get_aaintbool(char *, const struct kernel_param *);
1444:	static int param_get_aauint(char *, const struct kernel_param *);
1524:	static int param_get_audit(char *, const struct kernel_param *);
1552:	static int param_get_mode(char *, const struct kernel_param *);
1409:	static int param_set_aabool(const char *, const struct kernel_param *);
1493:	static int param_set_aacompressionlevel(const char *, const struct kernel_param *);
1454:	static int param_set_aaintbool(const char *, const struct kernel_param *);
1427:	static int param_set_aauint(const char *, const struct kernel_param *);
1533:	static int param_set_audit(const char *, const struct kernel_param *);
1562:	static int param_set_mode(const char *, const struct kernel_param *);

File security/apparmor/match.c:
288:	void aa_dfa_free_kref(struct kref *);
784:	unsigned int aa_dfa_leftmatch(struct aa_dfa *, unsigned int, const char *, unsigned int *);
479:	unsigned int aa_dfa_match(struct aa_dfa *, unsigned int, const char *);
439:	unsigned int aa_dfa_match_len(struct aa_dfa *, unsigned int, const char *, int);
567:	unsigned int aa_dfa_match_until(struct aa_dfa *, unsigned int, const char *, const char **);
628:	unsigned int aa_dfa_matchn_until(struct aa_dfa *, unsigned int, const char *, int, const char **);
518:	unsigned int aa_dfa_next(struct aa_dfa *, unsigned int, const char);
537:	unsigned int aa_dfa_outofband_transition(struct aa_dfa *, unsigned int);
306:	struct aa_dfa *aa_dfa_unpack(void *, size_t, int);
34:	int aa_setup_dfa_engine(void);
62:	void aa_teardown_dfa_engine(void);
703:	static unsigned int leftmatch_fb(struct aa_dfa *, unsigned int, const char *, struct match_workbuf *, unsigned int *);
77:	static struct table_header *unpack_table(char *, size_t);
197:	static int verify_dfa(struct aa_dfa *);

File security/apparmor/mount.c:
422:	int aa_bind_mount(struct aa_label *, const struct path *, const char *, unsigned long);
459:	int aa_mount_change_type(struct aa_label *, const struct path *, unsigned long);
484:	int aa_move_mount(struct aa_label *, const struct path *, const char *);
518:	int aa_new_mount(struct aa_label *, const char *, const struct path *, const char *, unsigned long, void *);
690:	int aa_pivotroot(struct aa_label *, const struct path *, const struct path *);
398:	int aa_remount(struct aa_label *, const struct path *, unsigned long, void *);
613:	int aa_umount(struct aa_label *, struct vfsmount *, int);
86:	static void audit_cb(struct audit_buffer *, void *);
27:	static void audit_mnt_flags(struct audit_buffer *, unsigned long);
130:	static int audit_mount(struct aa_profile *, const char *, const char *, const char *, const char *, unsigned long, const void *, u32, struct aa_perms *, const char *, int, const char *);
638:	static struct aa_label *build_pivotroot(struct aa_profile *, const struct path *, char *, const struct path *, char *);
213:	static struct aa_perms compute_mnt_perms(unsigned int, struct aa_dfa *, struct aa_dfa *);
239:	static int do_match_mnt(struct aa_dfa *, unsigned int, const char *, const char *, const char *, unsigned long, void *, bool, struct aa_perms *);
372:	static int match_mnt(struct aa_profile *, const struct path *, char *, struct path *, char *, const char *, unsigned long, void *, bool);
315:	static int match_mnt_path_str(struct aa_profile *, const struct path *, char *, const char *, const char *, unsigned long, void *, bool, const char *);

File security/apparmor/net.c:
134:	int aa_af_perm(struct aa_label *, const char *, u32, u16, int, int);
108:	int aa_profile_af_perm(struct aa_profile *, struct common_audit_data *, u32, u16, int);
164:	int aa_sk_perm(const char *, u32, struct sock *);
181:	int aa_sock_file_perm(struct aa_label *, const char *, u32, struct socket *);
246:	int apparmor_secmark_check(struct aa_label *, char *, u32, u32, struct sock *);
71:	void audit_net_cb(struct audit_buffer *, void *);
145:	static int aa_label_sk_perm(struct aa_label *, const char *, u32, struct sock *);
192:	static int apparmor_secmark_init(struct aa_secmark *);

File security/apparmor/path.c:
197:	int aa_path_name(const struct path *, int, char *, const char **, const char **, const char *);
88:	static int d_namespace_path(const struct path *, char *, char **, int, const char *);
48:	static int disconnect(char *, char **, const char *, int, const struct path *);
25:	static int prepend(char **, int, const char *, int);

File security/apparmor/policy.c:
174:	void __aa_profile_list_release(struct list_head *);
257:	struct aa_profile *aa_alloc_profile(const char *, struct aa_proxy *, gfp_t);
334:	struct aa_profile *aa_find_child(struct aa_profile *, const char *);
457:	struct aa_profile *aa_fqlookupn_profile(struct aa_label *, const char *, size_t);
205:	void aa_free_profile(struct aa_profile *);
452:	struct aa_profile *aa_lookup_profile(struct aa_ns *, const char *);
433:	struct aa_profile *aa_lookupn_profile(struct aa_ns *, const char *, size_t);
681:	int aa_may_manage_policy(struct aa_label *, struct aa_ns *, u32);
503:	struct aa_profile *aa_new_null_profile(struct aa_profile *, bool, const char *, gfp_t);
1095:	ssize_t aa_remove_profiles(struct aa_ns *, struct aa_label *, char *, size_t);
857:	ssize_t aa_replace_profiles(struct aa_ns *, struct aa_label *, u32, struct aa_loaddata *);
663:	bool policy_admin_capable(struct aa_ns *);
643:	bool policy_view_capable(struct aa_ns *);
109:	static void __add_profile(struct list_head *, struct aa_profile *);
322:	static struct aa_profile *__find_child(struct list_head *, const char *);
705:	static struct aa_profile *__list_lookup_parent(struct list_head *, struct aa_profile *);
138:	static void __list_remove_profile(struct aa_profile *);
419:	static struct aa_profile *__lookup_profile(struct aa_policy *, const char *);
797:	static int __lookup_replace(struct aa_ns *, const char *, bool, struct aa_profile **, const char **);
396:	static struct aa_profile *__lookupn_profile(struct aa_policy *, const char *, size_t);
741:	static void __replace_profile(struct aa_profile *, struct aa_profile *);
307:	static struct aa_profile *__strn_find_child(struct list_head *, const char *, int);
186:	static void aa_free_data(void *, void *);
597:	static void audit_cb(struct audit_buffer *, void *);
618:	static int audit_policy(struct aa_label *, const char *, const char *, const char *, const char *, int);
825:	static struct aa_profile *update_to_newest_parent(struct aa_profile *);

File security/apparmor/policy_ns.c:
282:	struct aa_ns *__aa_find_or_create_ns(struct aa_ns *, const char *, struct dentry *);
200:	struct aa_ns *__aa_lookupn_ns(struct aa_ns *, const char *, size_t);
360:	void __aa_remove_ns(struct aa_ns *);
389:	int aa_alloc_root_ns(void);
183:	struct aa_ns *aa_find_ns(struct aa_ns *, const char *);
162:	struct aa_ns *aa_findn_ns(struct aa_ns *, const char *, size_t);
137:	void aa_free_ns(struct aa_ns *);
402:	void aa_free_root_ns(void);
231:	struct aa_ns *aa_lookupn_ns(struct aa_ns *, const char *, size_t);
61:	const char *aa_ns_name(struct aa_ns *, struct aa_ns *, bool);
37:	bool aa_ns_visible(struct aa_ns *, struct aa_ns *, bool);
308:	struct aa_ns *aa_prepare_ns(struct aa_ns *, const char *);
242:	static struct aa_ns *__aa_create_ns(struct aa_ns *, const char *, struct dentry *);
87:	static struct aa_ns *alloc_ns(const char *, const char *);
330:	static void destroy_ns(struct aa_ns *);

File security/apparmor/policy_unpack.c:
124:	void __aa_loaddata_update(struct aa_loaddata *, long);
1044:	struct aa_load_ent *aa_load_ent_alloc(void);
1033:	void aa_load_ent_free(struct aa_load_ent *);
182:	struct aa_loaddata *aa_loaddata_alloc(size_t);
172:	void aa_loaddata_kref(struct kref *);
139:	bool aa_rawdata_eq(struct aa_loaddata *, struct aa_loaddata *);
1163:	int aa_unpack(struct aa_loaddata *, struct list_head *, const char **);
78:	static void audit_cb(struct audit_buffer *, void *);
105:	static int audit_iface(struct aa_profile *, const char *, const char *, struct aa_ext *, int, const char *);
660:	static int datacmp(struct rhashtable_compare_arg *, const void *);
1052:	static int deflate_compress(const char *, size_t, char **, size_t *);
154:	static void do_loaddata_free(struct work_struct *);
653:	static u32 strhash(const void *, u32, u32);
371:	static size_t unpack_blob(struct aa_ext *, char **, const char *);
442:	static struct aa_dfa *unpack_dfa(struct aa_ext *);
269:	static bool unpack_nameX(struct aa_ext *, enum aa_code, const char *);
674:	static struct aa_profile *unpack_profile(struct aa_ext *, char **);
619:	static bool unpack_rlimits(struct aa_ext *, struct aa_profile *);
575:	static bool unpack_secmark(struct aa_ext *, struct aa_profile *);
393:	static int unpack_str(struct aa_ext *, const char **, const char *);
416:	static int unpack_strdup(struct aa_ext *, char **, const char *);
477:	static bool unpack_trans_table(struct aa_ext *, struct aa_profile *);
317:	static bool unpack_u32(struct aa_ext *, u32 *, const char *);
546:	static bool unpack_xattrs(struct aa_ext *, struct aa_profile *);
1002:	static bool verify_dfa_xindex(int, struct aa_dfa *, struct aa_dfa *);
946:	static int verify_header(struct aa_ext *, int, const char **);

File security/apparmor/procattr.c:
33:	int aa_getprocattr(struct aa_label *, char **);
102:	int aa_setprocattr_changehat(char *, size_t, int);

File security/apparmor/resource.c:
141:	void __aa_transition_rlimits(struct aa_label *, struct aa_label *);
76:	int aa_map_resource(int);
104:	int aa_task_setrlimit(struct aa_label *, struct task_struct *, unsigned int, struct rlimit *);
30:	static void audit_cb(struct audit_buffer *, void *);
52:	static int audit_resource(struct aa_profile *, unsigned int, unsigned long, struct aa_label *, const char *, int);

File security/apparmor/secid.c:
124:	int aa_alloc_secid(struct aa_label *, gfp_t);
149:	void aa_free_secid(u32);
59:	struct aa_label *aa_secid_to_label(u32);
46:	void aa_secid_update(u32, struct aa_label *);
158:	void aa_secids_init(void);
111:	void apparmor_release_secctx(char *, u32);
98:	int apparmor_secctx_to_secid(const char *, u32, u32 *);
70:	int apparmor_secid_to_secctx(u32, char **, u32 *);

File security/apparmor/task.c:
24:	struct aa_label *aa_get_task_label(struct task_struct *);
41:	int aa_replace_current_label(struct aa_label *);
155:	int aa_restore_previous_label(u64);
115:	int aa_set_current_hat(struct aa_label *, u64);
93:	int aa_set_current_onexec(struct aa_label *, bool);

File security/commoncap.c:
828:	int cap_bprm_creds_from_file(struct linux_binprm *, struct file *);
65:	int cap_capable(const struct cred *, struct user_namespace *, int, unsigned int);
199:	int cap_capget(struct task_struct *, kernel_cap_t *, kernel_cap_t *, kernel_cap_t *);
241:	int cap_capset(struct cred *, const struct cred *, const kernel_cap_t *, const kernel_cap_t *, const kernel_cap_t *);
495:	int cap_convert_nscap(struct dentry *, void **, size_t);
369:	int cap_inode_getsecurity(struct inode *, const char *, void **, bool);
312:	int cap_inode_killpriv(struct dentry *);
295:	int cap_inode_need_killpriv(struct dentry *);
965:	int cap_inode_removexattr(struct dentry *, const char *);
932:	int cap_inode_setxattr(struct dentry *, const char *, const void *, size_t, int);
1341:	int cap_mmap_addr(unsigned long);
1355:	int cap_mmap_file(struct file *, unsigned long, unsigned long, unsigned long);
133:	int cap_ptrace_access_check(struct task_struct *, unsigned int);
170:	int cap_ptrace_traceme(struct task_struct *);
111:	int cap_settime(const struct timespec64 *, const struct timezone *);
1055:	int cap_task_fix_setuid(struct cred *, const struct cred *, int);
1188:	int cap_task_prctl(int, unsigned long, unsigned long, unsigned long, unsigned long);
1138:	int cap_task_setioprio(struct task_struct *, int);
1125:	int cap_task_setscheduler(struct task_struct *);
1321:	int cap_vm_enough_memory(struct mm_struct *, long);
590:	int get_vfs_caps_from_disk(const struct dentry *, struct cpu_vfs_cap_data *);
1104:	static int cap_safe_nice(struct task_struct *);
1384:	static int capability_init(void);
669:	static int get_file_caps(struct linux_binprm *, struct file *, bool *, bool *);

File security/device_cgroup.c:
835:	int devcgroup_check_permission(short, u32, u32, short);
142:	static void __dev_exception_clean(struct dev_cgroup *);
87:	static int dev_exception_add(struct dev_cgroup *, struct dev_exception_item *);
119:	static void dev_exception_rm(struct dev_cgroup *, struct dev_exception_item *);
61:	static int dev_exceptions_copy(struct list_head *, struct list_head *);
758:	static ssize_t devcgroup_access_write(struct kernfs_open_file *, char *, size_t, loff_t);
210:	static struct cgroup_subsys_state *devcgroup_css_alloc(struct cgroup_subsys_state *);
223:	static void devcgroup_css_free(struct cgroup_subsys_state *);
197:	static void devcgroup_offline(struct cgroup_subsys_state *);
176:	static int devcgroup_online(struct cgroup_subsys_state *);
269:	static int devcgroup_seq_show(struct seq_file *, void *);
598:	static int devcgroup_update_access(struct dev_cgroup *, int, char *);
315:	static bool match_exception(struct list_head *, short, u32, u32, short);
352:	static bool match_exception_partial(struct list_head *, short, u32, u32, short);
536:	static int propagate_exception(struct dev_cgroup *, struct dev_exception_item *);
517:	static void revalidate_active_exceptions(struct dev_cgroup *);

File security/inode.c:
228:	struct dentry *securityfs_create_dir(const char *, struct dentry *);
200:	struct dentry *securityfs_create_file(const char *, umode_t, struct dentry *, void *, const struct file_operations *);
260:	struct dentry *securityfs_create_symlink(const char *, struct dentry *, const char *, const struct inode_operations *);
295:	void securityfs_remove(struct dentry *);
318:	static ssize_t lsm_read(struct file *, char *, size_t, loff_t *);
107:	static struct dentry *securityfs_create_dentry(const char *, umode_t, struct dentry *, void *, const struct file_operations *, const struct inode_operations *);
40:	static int securityfs_fill_super(struct super_block *, struct fs_context *);
28:	static void securityfs_free_inode(struct inode *);
54:	static int securityfs_get_tree(struct fs_context *);
331:	static int securityfs_init(void);
63:	static int securityfs_init_fs_context(struct fs_context *);

File security/integrity/digsig.c:
146:	int integrity_add_key(const unsigned int, const void *, off_t, key_perm_t);
60:	int integrity_digsig_verify(const unsigned int, const char *, int, const char *, int);
119:	int integrity_init_keyring(const unsigned int);
195:	int integrity_load_cert(const unsigned int, const char *, const void *, size_t, key_perm_t);
171:	int integrity_load_x509(const unsigned int, const char *);
85:	int integrity_modsig_verify(const unsigned int, const struct modsig *);
41:	static struct key *integrity_keyring_from_id(const unsigned int);

File security/integrity/digsig_asymmetric.c:
92:	int asymmetric_verify(struct key *, const char *, int, const char *, int);
160:	int integrity_kernel_module_request(char *);
23:	static struct key *request_asymmetric_key(struct key *, uint32_t);

File security/integrity/evm/evm_crypto.c:
268:	int evm_calc_hash(struct dentry *, const char *, const char *, size_t, char, struct evm_digest *);
260:	int evm_calc_hmac(struct dentry *, const char *, const char *, size_t, struct evm_digest *);
342:	int evm_init_hmac(struct inode *, const struct xattr *, char *);
362:	int evm_init_key(void);
50:	int evm_set_key(void *, size_t);
310:	int evm_update_evmxattr(struct dentry *, const char *, const char *, size_t);
193:	static int evm_calc_hmac_or_hash(struct dentry *, const char *, const char *, size_t, uint8_t, struct evm_digest *);
147:	static void hmac_add_misc(struct shash_desc *, struct inode *, char, char *);
72:	static struct shash_desc *init_desc(char, uint8_t);

File security/integrity/evm/evm_main.c:
762:	int evm_inode_init_security(struct inode *, const struct xattr *, struct xattr *);
670:	void evm_inode_post_removexattr(struct dentry *, const char *);
748:	void evm_inode_post_setattr(struct dentry *, int);
646:	void evm_inode_post_setxattr(struct dentry *, const char *, const void *, size_t);
588:	int evm_inode_removexattr(struct dentry *, const char *);
703:	int evm_inode_setattr(struct dentry *, struct iattr *);
557:	int evm_inode_setxattr(struct dentry *, const char *, const void *, size_t);
793:	void evm_load_x509(void);
617:	bool evm_status_revalidate(const char *);
366:	enum integrity_status evm_verifyxattr(struct dentry *, const char *, void *, size_t, struct integrity_iint_cache *);
484:	static int evm_protect_xattr(struct dentry *, const char *, const void *, size_t);
326:	static int evm_protected_xattr(const char *);
60:	static int evm_set_param(char *);
391:	static enum integrity_status evm_verify_current_integrity(struct dentry *);
157:	static enum integrity_status evm_verify_hmac(struct dentry *, const char *, char *, size_t, struct integrity_iint_cache *);
411:	static int evm_xattr_acl_change(const void *, size_t, const char *, struct dentry *, struct dentry *);
449:	static int evm_xattr_change(struct dentry *, const char *, const void *, size_t);
803:	static int init_evm(void);

File security/integrity/evm/evm_posix_acl.c:
12:	int posix_xattr_acl(const char *);

File security/integrity/evm/evm_secfs.c:
289:	int evm_init_secfs(void);
39:	static ssize_t evm_read_key(struct file *, char *, size_t, loff_t *);
66:	static ssize_t evm_write_key(struct file *, const char *, size_t, loff_t *);

File security/integrity/iint.c:
57:	struct integrity_iint_cache *integrity_iint_find(struct inode *);
146:	void integrity_inode_free(struct inode *);
95:	struct integrity_iint_cache *integrity_inode_get(struct inode *);
196:	int integrity_kernel_read(struct file *, loff_t, void *, unsigned long);
208:	void integrity_load_keys(void);
161:	static void init_once(void *);
218:	static int integrity_fs_init(void);
175:	static int integrity_iintcache_init(void);

File security/integrity/ima/ima_api.c:
153:	void ima_add_violation(struct file *, const unsigned char *, struct integrity_iint_cache *, const char *, const char *);
37:	int ima_alloc_init_template(struct ima_event_data *, struct ima_template_entry **, struct ima_template_desc *);
368:	void ima_audit_measurement(struct integrity_iint_cache *, const unsigned char *);
229:	int ima_collect_measurement(struct integrity_iint_cache *, struct file *, void *, loff_t, enum hash_algo, struct modsig *);
415:	const char *ima_d_path(const struct path *, char **, char *);
23:	void ima_free_template_entry(struct ima_template_entry *);
206:	int ima_get_action(struct inode *, const struct cred *, u32, int, enum ima_hooks, int *, struct ima_template_desc **, const char *);
316:	void ima_store_measurement(struct integrity_iint_cache *, struct file *, const unsigned char *, struct evm_ima_xattr_data *, int, const struct modsig *, int, struct ima_template_desc *, struct ima_digest *);
102:	int ima_store_template(struct ima_template_entry *, int, struct inode *, const unsigned char *, int, struct ima_digest *);

File security/integrity/ima/ima_appraise.c:
355:	int ima_appraise_measurement(enum ima_hooks, struct integrity_iint_cache *, struct file *, const unsigned char *, struct evm_ima_xattr_data *, int, const struct modsig *, struct ima_digest *);
323:	int ima_check_blacklist(struct integrity_iint_cache *, const struct modsig *, int);
124:	enum integrity_status ima_get_cache_status(struct integrity_iint_cache *, enum ima_hooks);
655:	void ima_inode_post_removexattr(struct dentry *, const char *);
558:	void ima_inode_post_setattr(struct dentry *);
627:	void ima_inode_post_setxattr(struct dentry *, const char *, const void *, size_t);
644:	int ima_inode_removexattr(struct dentry *, const char *);
611:	int ima_inode_setxattr(struct dentry *, const char *, const void *, size_t);
87:	int ima_must_appraise(struct inode *, int, enum ima_hooks);
527:	void ima_update_xattr(struct integrity_iint_cache *, struct file *);
77:	bool is_ima_appraise_enabled(void);
58:	static int appraise_digest_list_setup(char *);
21:	static int default_appraise_setup(char *);
99:	static int ima_fix_xattr(struct dentry *, struct integrity_iint_cache *);
593:	static void ima_reset_appraise_flags(struct inode *, int);
199:	static int xattr_verify(struct integrity_iint_cache *, struct evm_ima_xattr_data *, int, enum integrity_status *, const char **, struct ima_digest *, enum ima_hooks);

File security/integrity/ima/ima_asymmetric_keys.c:
27:	void ima_post_key_create_or_update(struct key *, struct key *, const void *, size_t, unsigned long, bool);

File security/integrity/ima/ima_crypto.c:
843:	int ima_calc_boot_aggregate(struct ima_digest_data *);
765:	int ima_calc_buffer_hash(const void *, loff_t, struct ima_digest_data *);
626:	int ima_calc_field_array_hash(struct ima_field_data *, struct ima_template_entry *);
535:	int ima_calc_file_hash(struct file *, struct ima_digest_data *);
115:	int ima_init_crypto(void);
662:	static int calc_buffer_ahash_atfm(const void *, loff_t, struct ima_digest_data *, struct crypto_ahash *);
719:	static int calc_buffer_shash_tfm(const void *, loff_t, struct ima_digest_data *, struct crypto_shash *);
289:	static struct crypto_ahash *ima_alloc_atfm(enum hash_algo);
242:	static void *ima_alloc_pages(loff_t, size_t *, int);
91:	static struct crypto_shash *ima_alloc_tfm(enum hash_algo);
799:	static int ima_calc_boot_aggregate_tfm(char *, u16, struct crypto_shash *);
582:	static int ima_calc_field_array_hash_tfm(struct ima_field_data *, struct ima_template_entry *, int);
328:	static int ima_calc_file_hash_atfm(struct file *, struct ima_digest_data *, struct crypto_ahash *);
455:	static int ima_calc_file_hash_tfm(struct file *, struct ima_digest_data *, struct crypto_shash *);
282:	static void ima_free_pages(void *, size_t);
213:	static void ima_free_tfm(struct crypto_shash *);
34:	static int param_set_bufsize(const char *, const struct kernel_param *);

File security/integrity/ima/ima_digest_list.c:
420:	bool ima_check_current_is_parser(void);
244:	void ima_check_measured_appraised(struct file *);
462:	bool ima_current_is_parser(void);
282:	struct ima_digest *ima_digest_allow(struct ima_digest *, int);
388:	void ima_load_digest_lists(void);
85:	struct ima_digest *ima_lookup_digest(u8 *, enum hash_algo, enum compact_types);
168:	int ima_parse_compact_list(loff_t, void *, int);
452:	void ima_set_parser(void);
457:	void ima_unset_parser(void);
39:	static int digest_db_max_size_setup(char *);
57:	static int digest_list_pcr_setup(char *);
102:	static int ima_add_digest_data_entry(u8 *, enum hash_algo, enum compact_types, u16);
298:	static int load_digest_list(struct dir_context *, const char *, int, loff_t, u64, unsigned int);

File security/integrity/ima/ima_fs.c:
570:	int ima_fs_init(void);
131:	int ima_measurements_show(struct seq_file *, void *);
212:	void ima_print_digest(struct seq_file *, u8 *, u32);
117:	void ima_putc(struct seq_file *, void *, int);
44:	static int default_canonical_fmt_setup(char *);
266:	static int ima_ascii_measurements_open(struct inode *, struct file *);
221:	static int ima_ascii_measurements_show(struct seq_file *, void *);
98:	static void *ima_measurements_next(struct seq_file *, void *, loff_t *);
200:	static int ima_measurements_open(struct inode *, struct file *);
81:	static void *ima_measurements_start(struct seq_file *, loff_t *);
113:	static void ima_measurements_stop(struct seq_file *, void *);
477:	static int ima_open_data_upload(struct inode *, struct file *);
278:	static ssize_t ima_read_file(char *, struct dentry *);
517:	static int ima_release_data_upload(struct inode *, struct file *);
55:	static ssize_t ima_show_htable_value(struct file *, char *, size_t, loff_t *);
365:	static ssize_t ima_write_data(struct file *, const char *, size_t, loff_t *);

File security/integrity/ima/ima_init.c:
117:	int ima_init(void);
103:	void ima_load_x509(void);
40:	static int ima_add_boot_aggregate(void);

File security/integrity/ima/ima_main.c:
542:	int ima_bprm_check(struct linux_binprm *);
568:	int ima_file_check(struct file *, int);
244:	void ima_file_free(struct file *);
601:	int ima_file_hash(struct file *, char *, size_t);
464:	int ima_file_mmap(struct file *, unsigned long);
489:	int ima_file_mprotect(struct vm_area_struct *, unsigned long);
967:	void ima_kexec_cmdline(int, const void *, int);
792:	int ima_load_data(enum kernel_load_data_id, bool);
650:	void ima_post_create_tmpfile(struct inode *);
845:	int ima_post_load_data(char *, loff_t, enum kernel_load_data_id, char *);
676:	void ima_post_path_mknod(struct dentry *);
758:	int ima_post_read_file(struct file *, void *, loff_t, enum kernel_read_file_id);
707:	int ima_read_file(struct file *, enum kernel_read_file_id, bool);
873:	void process_buffer_measurement(struct inode *, const void *, int, const char *, enum ima_hooks, int, const char *);
54:	static int hash_setup(char *);
983:	static int init_ima(void);
89:	static int mmap_violation_check(enum ima_hooks, struct file *, char **, const char **, char *);
259:	static int process_measurement(struct file *, const struct cred *, u32, char *, loff_t, int, enum ima_hooks);

File security/integrity/ima/ima_policy.c:
1886:	bool ima_appraise_signature(enum kernel_read_file_id);
931:	int ima_check_policy(void);
1636:	void ima_delete_rules(void);
848:	void ima_init_policy(void);
474:	int ima_lsm_policy_change(struct notifier_block *, unsigned long, void *);
655:	int ima_match_policy(struct inode *, const struct cred *, u32, enum ima_hooks, int, int, int *, struct ima_template_desc **, const char *);
1592:	ssize_t ima_parse_add_rule(char *);
1681:	void *ima_policy_next(struct seq_file *, void *, loff_t *);
1720:	int ima_policy_show(struct seq_file *, void *);
1665:	void *ima_policy_start(struct seq_file *, loff_t *);
1693:	void ima_policy_stop(struct seq_file *, void *);
949:	void ima_update_policy(void);
712:	void ima_update_policy_flag(void);
741:	static void add_rules(struct ima_rule_entry *, int, enum policy_rule_list);
282:	static int default_appraise_policy_setup(char *);
238:	static int default_measure_policy_setup(char *);
289:	static struct ima_rule_opt_list *ima_alloc_rule_opt_list(const substring_t *);
726:	static int ima_appraise_flag(enum ima_hooks);
1058:	static void ima_log_string_op(struct audit_buffer *, char *, char *, bool (*)(kuid_t, kuid_t));
381:	static struct ima_rule_entry *ima_lsm_copy_rule(struct ima_rule_entry *);
1027:	static int ima_lsm_rule_init(struct ima_rule_entry *, substring_t *, int, int);
457:	static void ima_lsm_update_rules(void);
529:	static bool ima_match_rules(struct ima_rule_entry *, struct inode *, const struct cred *, u32, enum ima_hooks, int, const char *);
1203:	static int ima_parse_rule(char *, struct ima_rule_entry *);
1109:	static bool ima_validate_rule(struct ima_rule_entry *);
253:	static int policy_setup(char *);

File security/integrity/ima/ima_queue.c:
159:	int ima_add_template_entry(struct ima_template_entry *, int, const char *, struct inode *, const unsigned char *);
130:	unsigned long ima_get_binary_runtime_size(void);
213:	int ima_init_digests(void);
203:	int ima_restore_measurement_entry(struct ima_template_entry *);
93:	static int ima_add_digest_entry(struct ima_template_entry *, bool);
48:	static struct ima_queue_entry *ima_lookup_digest_entry(u8 *, int);

File security/integrity/ima/ima_queue_keys.c:
51:	void ima_init_key_queue(void);
132:	void ima_process_queued_keys(void);
103:	bool ima_queue_key(struct key *, const void *, size_t);
171:	bool ima_should_queue_key(void);
66:	static struct ima_key_entry *ima_alloc_key_entry(struct key *, const void *, size_t);
41:	static void ima_keys_handler(struct work_struct *);

File security/integrity/ima/ima_template.c:
257:	int ima_init_template(void);
232:	void ima_init_template_list(void);
359:	int ima_restore_measurement_list(loff_t, void *);
247:	struct ima_template_desc *ima_template_desc_current(void);
68:	bool ima_template_has_modsig(const struct ima_template_desc *);
136:	struct ima_template_desc *lookup_template_desc(const char *);
181:	int template_desc_init_fields(const char *, const struct ima_template_field ***, int *);
301:	static int ima_restore_template_data(struct ima_template_desc *, void *, int, struct ima_template_entry **);
116:	static int ima_template_fmt_setup(char *);
80:	static int ima_template_setup(char *);
273:	static struct ima_template_desc *restore_template_fmt(char *);

File security/integrity/ima/ima_template_lib.c:
452:	int ima_eventbuf_init(struct ima_event_data *, struct ima_field_data *);
267:	int ima_eventdigest_init(struct ima_event_data *, struct ima_field_data *);
353:	int ima_eventdigest_modsig_init(struct ima_event_data *, struct ima_field_data *);
331:	int ima_eventdigest_ng_init(struct ima_event_data *, struct ima_field_data *);
493:	int ima_eventevmsig_init(struct ima_event_data *, struct ima_field_data *);
467:	int ima_eventmodsig_init(struct ima_event_data *, struct ima_field_data *);
418:	int ima_eventname_init(struct ima_event_data *, struct ima_field_data *);
427:	int ima_eventname_ng_init(struct ima_event_data *, struct ima_field_data *);
436:	int ima_eventsig_init(struct ima_event_data *, struct ima_field_data *);
180:	int ima_parse_buf(void *, void *, void **, int, struct ima_field_data *, int *, unsigned long *, int, char *);
135:	void ima_show_template_digest(struct seq_file *, enum ima_show_type, struct ima_field_data *);
141:	void ima_show_template_digest_ng(struct seq_file *, enum ima_show_type, struct ima_field_data *);
154:	void ima_show_template_sig(struct seq_file *, enum ima_show_type, struct ima_field_data *);
148:	void ima_show_template_string(struct seq_file *, enum ima_show_type, struct ima_field_data *);
227:	static int ima_eventdigest_init_common(const u8 *, u32, u8, struct ima_field_data *);
384:	static int ima_eventname_init_common(struct ima_event_data *, struct ima_field_data *, bool);
116:	static void ima_show_template_field_data(struct seq_file *, enum ima_show_type, enum data_formats, struct ima_field_data *);
30:	static int ima_write_template_field_data(const void *, const u32, enum data_formats, struct ima_field_data *);

File security/integrity/integrity_audit.c:
36:	void integrity_audit_message(int, struct inode *, const unsigned char *, const char *, const char *, int, int, int);
28:	void integrity_audit_msg(int, struct inode *, const unsigned char *, const char *, const char *, int, int);
18:	static int integrity_audit_setup(char *);

File security/keys/compat.c:
17:	long __ia32_compat_sys_keyctl(const struct pt_regs *);
17:	static long __se_compat_sys_keyctl(long, long, long, long, long);

File security/keys/encrypted-keys/ecryptfs_format.c:
48:	int ecryptfs_fill_auth_tok(struct ecryptfs_auth_tok *, const char *);
19:	u8 *ecryptfs_get_auth_tok_key(struct ecryptfs_auth_tok *);
31:	void ecryptfs_get_versions(int *, int *, int *);

File security/keys/encrypted-keys/encrypted.c:
712:	static void __ekey_init(struct encrypted_key_payload *, const char *, const char *, const char *);
326:	static int calc_hmac(u8 *, const u8 *, const u8 *, unsigned int, unsigned int);
1001:	static void cleanup_encrypted(void);
270:	static char *datablob_format(struct encrypted_key_payload *, size_t);
510:	static int datablob_hmac_verify(struct encrypted_key_payload *, const u8 *, const u8 *, size_t);
171:	static int datablob_parse(char *, const char **, char **, char **, char **);
548:	static int derived_key_decrypt(struct encrypted_key_payload *, const u8 *, unsigned int);
446:	static int derived_key_encrypt(struct encrypted_key_payload *, const u8 *, unsigned int);
962:	static void encrypted_destroy(struct key *);
781:	static int encrypted_instantiate(struct key *, struct key_preparsed_payload *);
595:	static struct encrypted_key_payload *encrypted_key_alloc(struct key *, const char *, const char *, const char *);
655:	static int encrypted_key_decrypt(struct encrypted_key_payload *, const char *, const char *);
825:	static void encrypted_rcu_free(struct callback_head *);
900:	static long encrypted_read(const struct key *, char *, size_t);
842:	static int encrypted_update(struct key *, struct key_preparsed_payload *);
349:	static int get_derived_key(u8 *, enum derived_key_type, const u8 *, size_t);
977:	static int init_encrypted(void);
377:	static struct skcipher_request *init_skcipher_req(const u8 *, unsigned int);
410:	static struct key *request_master_key(struct encrypted_key_payload *, const u8 **, size_t *);
104:	static int valid_ecryptfs_desc(const char *);
137:	static int valid_master_desc(const char *, const char *);

File security/keys/encrypted-keys/masterkey_trusted.c:
27:	struct key *request_trusted_key(const char *, const u8 **, size_t *);

File security/keys/gc.c:
99:	void key_gc_keytype(struct key_type *);
51:	void key_schedule_gc(time64_t);
72:	void key_schedule_gc_links(void);
173:	static void key_garbage_collector(struct work_struct *);
82:	static void key_gc_timer_func(struct timer_list *);
122:	static void key_gc_unused_keys(struct list_head *);

File security/keys/key.c:
1119:	int generic_key_instantiate(struct key *, struct key_preparsed_payload *);
225:	struct key *key_alloc(struct key_type *, const char *, kuid_t, kgid_t, const struct cred *, key_perm_t, unsigned long, struct key_restriction *);
815:	key_ref_t key_create_or_update(key_ref_t, const char *, const char *, const void *, size_t, key_perm_t, unsigned long);
1199:	void key_init(void);
498:	int key_instantiate_and_link(struct key *, const void *, size_t, struct key *, struct key *);
1092:	void key_invalidate(struct key *);
660:	struct key *key_lookup(key_serial_t);
372:	int key_payload_reserve(struct key *, size_t);
646:	void key_put(struct key *);
573:	int key_reject_and_link(struct key *, unsigned int, unsigned int, struct key *, struct key *);
1056:	void key_revoke(struct key *);
722:	void key_set_timeout(struct key *, unsigned int);
702:	struct key_type *key_type_lookup(const char *);
742:	void key_type_put(struct key_type *);
1001:	int key_update(key_ref_t, const void *, size_t);
51:	struct key_user *key_user_lookup(kuid_t);
120:	void key_user_put(struct key_user *);
1149:	int register_key_type(struct key_type *);
1185:	void unregister_key_type(struct key_type *);
424:	static int __key_instantiate_and_link(struct key *, struct key_preparsed_payload *, struct key *, struct key *, struct assoc_array_edit **);

File security/keys/keyctl.c:
74:	long __ia32_sys_add_key(const struct pt_regs *);
1869:	long __ia32_sys_keyctl(const struct pt_regs *);
167:	long __ia32_sys_request_key(const struct pt_regs *);
74:	long __x64_sys_add_key(const struct pt_regs *);
1869:	long __x64_sys_keyctl(const struct pt_regs *);
167:	long __x64_sys_request_key(const struct pt_regs *);
1511:	long keyctl_assume_authority(key_serial_t);
1849:	long keyctl_capabilities(unsigned char *, size_t);
949:	long keyctl_chown_key(key_serial_t, uid_t, gid_t);
644:	long keyctl_describe_key(key_serial_t, char *, size_t);
258:	long keyctl_get_keyring_ID(key_serial_t, int);
1556:	long keyctl_get_security(key_serial_t, char *, size_t);
1244:	long keyctl_instantiate_key(key_serial_t, const void *, size_t, key_serial_t);
1274:	long keyctl_instantiate_key_iov(key_serial_t, const struct iovec *, unsigned int, key_serial_t);
420:	long keyctl_invalidate_key(key_serial_t);
288:	long keyctl_join_session_keyring(const char *);
467:	long keyctl_keyring_clear(key_serial_t);
515:	long keyctl_keyring_link(key_serial_t, key_serial_t);
595:	long keyctl_keyring_move(key_serial_t, key_serial_t, key_serial_t, unsigned int);
716:	long keyctl_keyring_search(key_serial_t, const char *, const char *, key_serial_t);
552:	long keyctl_keyring_unlink(key_serial_t, key_serial_t);
1310:	long keyctl_negate_key(key_serial_t, unsigned int, key_serial_t);
825:	long keyctl_read_key(key_serial_t, char *, size_t);
1330:	long keyctl_reject_key(key_serial_t, unsigned int, unsigned int, key_serial_t);
1724:	long keyctl_restrict_keyring(key_serial_t, const char *, const char *);
379:	long keyctl_revoke_key(key_serial_t);
1621:	long keyctl_session_to_parent(void);
1388:	long keyctl_set_reqkey_keyring(int);
1452:	long keyctl_set_timeout(key_serial_t, unsigned int);
1067:	long keyctl_setperm_key(key_serial_t, key_perm_t);
325:	long keyctl_update_key(key_serial_t, const void *, size_t);
74:	static long __se_sys_add_key(long, long, long, long, long);
1869:	static long __se_sys_keyctl(long, long, long, long, long);
167:	static long __se_sys_request_key(long, long, long, long);
1107:	static long get_instantiation_keyring(key_serial_t, struct request_key_auth *, struct key **);
1144:	static int keyctl_change_reqkey_auth(struct key *);
1167:	static long keyctl_instantiate_key_common(key_serial_t, struct iov_iter *, key_serial_t);

File security/keys/keyctl_pkey.c:
206:	long keyctl_pkey_e_d_s(int, const struct keyctl_pkey_params *, const char *, const void *, void *);
161:	long keyctl_pkey_query(key_serial_t, const char *, struct keyctl_pkey_query *);
282:	long keyctl_pkey_verify(const struct keyctl_pkey_params *, const char *, const void *, const void *);
78:	static int keyctl_pkey_params_get(key_serial_t, const char *, struct kernel_pkey_params *);
113:	static int keyctl_pkey_params_get_2(const struct keyctl_pkey_params *, const char *, int, struct kernel_pkey_params *);
38:	static int keyctl_pkey_params_parse(struct kernel_pkey_params *);

File security/keys/keyring.c:
1367:	void __key_link(struct key *, struct key *, struct assoc_array_edit **);
1292:	int __key_link_begin(struct key *, const struct keyring_index_key *, struct assoc_array_edit **);
1350:	int __key_link_check_live_key(struct key *, struct key *);
1382:	void __key_link_end(struct key *, const struct keyring_index_key *, struct assoc_array_edit *);
1236:	int __key_link_lock(struct key *, const struct keyring_index_key *);
1258:	int __key_move_lock(struct key *, struct key *, const struct keyring_index_key *);
1098:	key_ref_t find_key_to_update(key_ref_t, const struct keyring_index_key *);
1141:	struct key *find_keyring_by_name(const char *, bool);
565:	bool key_default_cmp(const struct key *, const struct key_match_data *);
57:	void key_free_user_ns(struct user_namespace *);
1435:	int key_link(struct key *, struct key *);
1590:	int key_move(struct key *, struct key *, struct key *, unsigned int);
238:	bool key_put_tag(struct key_tag *);
256:	void key_remove_domain(struct key_tag *);
214:	void key_set_index_key(struct keyring_index_key *);
1545:	int key_unlink(struct key *, struct key *);
517:	struct key *keyring_alloc(const char *, kuid_t, kgid_t, const struct cred *, key_perm_t, unsigned long, struct key_restriction *, struct key *);
1647:	int keyring_clear(struct key *);
1716:	void keyring_gc(struct key *, time64_t);
1021:	int keyring_restrict(key_ref_t, const char *, const char *);
1761:	void keyring_restriction_gc(struct key *, struct key_type *);
937:	key_ref_t keyring_search(key_ref_t, struct key_type *, const char *, bool);
899:	key_ref_t keyring_search_rcu(key_ref_t, struct keyring_search_context *);
554:	int restrict_link_reject(struct key *, const struct key_type *, const union key_payload *, struct key *);
163:	static void hash_key_type_and_desc(struct keyring_index_key *);
309:	static bool keyring_compare_object(const void *, const void *);
437:	static void keyring_describe(const struct key *, struct seq_file *);
412:	static void keyring_destroy(struct key *);
1213:	static int keyring_detect_cycle(struct key *, struct key *);
1189:	static int keyring_detect_cycle_iterator(const void *, void *);
325:	static int keyring_diff_objects(const void *, const void *);
387:	static void keyring_free_object(void *);
131:	static void keyring_free_preparse(struct key_preparsed_payload *);
1701:	static int keyring_gc_check_iterator(const void *, void *);
1690:	static bool keyring_gc_select_iterator(void *, void *);
268:	static unsigned long keyring_get_key_chunk(const void *, int);
303:	static unsigned long keyring_get_object_key_chunk(const void *, int);
140:	static int keyring_instantiate(struct key *, struct key_preparsed_payload *);
123:	static int keyring_preparse(struct key_preparsed_payload *);
481:	static long keyring_read(const struct key *, char *, size_t);
458:	static int keyring_read_iterator(const void *, void *);
1678:	static void keyring_revoke(struct key *);
574:	static int keyring_search_iterator(const void *, void *);
663:	static bool search_nested_keyrings(struct key *, struct keyring_search_context *);

File security/keys/permission.c:
26:	int key_task_permission(const key_ref_t, const struct cred *, enum key_need_perm);
102:	int key_validate(const struct key *);

File security/keys/persistent.c:
129:	long keyctl_get_persistent(uid_t, key_serial_t);
73:	static long key_get_persistent(struct user_namespace *, kuid_t, key_ref_t);

File security/keys/proc.c:
78:	static struct key *find_ge_key(key_serial_t, struct seq_file *, struct seq_file *);
43:	static int key_proc_init(void);
291:	static void *proc_key_users_next(struct seq_file *, void *, loff_t *);
303:	static int proc_key_users_show(struct seq_file *, void *);
274:	static void *proc_key_users_start(struct seq_file *, loff_t *);
297:	static void proc_key_users_stop(struct seq_file *, void *);
135:	static void *proc_keys_next(struct seq_file *, void *, loff_t *);
153:	static int proc_keys_show(struct seq_file *, void *);
112:	static void *proc_keys_start(struct seq_file *, loff_t *);
147:	static void proc_keys_stop(struct seq_file *, void *);

File security/keys/process_keys.c:
185:	struct key *get_user_session_keyring_rcu(const struct cred *);
268:	int install_process_keyring_to_cred(struct cred *);
317:	int install_session_keyring_to_cred(struct cred *, struct key *);
221:	int install_thread_keyring_to_cred(struct cred *);
836:	long join_session_keyring(const char *);
910:	void key_change_session_keyring(struct callback_head *);
390:	void key_fsgid_changed(struct cred *);
377:	void key_fsuid_changed(struct cred *);
74:	int look_up_user_keyrings(struct key **, struct key **);
611:	key_ref_t lookup_user_key(key_serial_t, unsigned long, enum key_need_perm);
587:	bool lookup_user_key_possessed(const struct key *, const struct key_match_data *);
422:	key_ref_t search_cred_keyrings_rcu(struct keyring_search_context *);
539:	key_ref_t search_process_keyrings_rcu(struct keyring_search_context *);
951:	static int init_root_keyring(void);

File security/keys/request_key.c:
56:	void complete_request_key(struct key *, int);
558:	struct key *request_key_and_link(struct key_type *, const char *, struct key_tag *, const void *, size_t, void *, struct key *, unsigned long);
766:	struct key *request_key_rcu(struct key_type *, const char *, struct key_tag *);
690:	struct key *request_key_tag(struct key_type *, const char *, struct key_tag *, const char *);
730:	struct key *request_key_with_auxdata(struct key_type *, const char *, struct key_tag *, const void *, size_t, void *);
660:	int wait_for_key_construction(struct key *, bool);
115:	static int call_sbin_request_key(struct key *, void *);
366:	static int construct_alloc_key(struct keyring_search_context *, struct key *, unsigned long, struct key_user *, struct key **);
262:	static int construct_get_dest_keyring(struct key **);
473:	static struct key *construct_key_and_link(struct keyring_search_context *, const char *, size_t, void *, struct key *, unsigned long);
87:	static void umh_keys_cleanup(struct subprocess_info *);
77:	static int umh_keys_init(struct subprocess_info *, struct cred *);

File security/keys/request_key_auth.c:
246:	struct key *key_get_instantiation_authkey(key_serial_t);
161:	struct key *request_key_auth_new(struct key *, const char *, const void *, size_t, struct key *);
106:	static void free_request_key_auth(struct request_key_auth *);
64:	static void request_key_auth_describe(const struct key *, struct seq_file *);
146:	static void request_key_auth_destroy(struct key *);
47:	static void request_key_auth_free_preparse(struct key_preparsed_payload *);
54:	static int request_key_auth_instantiate(struct key *, struct key_preparsed_payload *);
42:	static int request_key_auth_preparse(struct key_preparsed_payload *);
121:	static void request_key_auth_rcu_disposal(struct callback_head *);
82:	static long request_key_auth_read(const struct key *, char *, size_t);
134:	static void request_key_auth_revoke(struct key *);

File security/keys/trusted-keys/trusted_tpm1.c:
122:	int TSS_authhmac(unsigned char *, const unsigned char *, unsigned int, unsigned char *, unsigned char *, unsigned int, ...);
177:	int TSS_checkhmac1(unsigned char *, const uint32_t, const unsigned char *, const unsigned char *, unsigned int, ...);
433:	int oiap(struct tpm_buf *, uint32_t *, unsigned char *);
364:	int trusted_tpm_send(unsigned char *, size_t);
262:	static int TSS_checkhmac2(unsigned char *, const uint32_t, const unsigned char *, const unsigned char *, unsigned int, const unsigned char *, unsigned int, unsigned int, unsigned int, ...);
75:	static int TSS_rawhmac(unsigned char *, const unsigned char *, unsigned int, ...);
1286:	static void cleanup_trusted(void);
882:	static int datablob_parse(char *, struct trusted_key_payload *, struct trusted_key_options *);
743:	static int getoptions(char *, struct trusted_key_payload *, struct trusted_key_options *);
1241:	static int init_digests(void);
45:	static struct sdesc *init_sdesc(struct crypto_shash *);
1256:	static int init_trusted(void);
668:	static int key_seal(struct trusted_key_payload *, struct trusted_key_options *);
694:	static int key_unseal(struct trusted_key_payload *, struct trusted_key_options *);
398:	static int osap(struct tpm_buf *, struct osapsess *, const unsigned char *, uint16_t, uint32_t);
464:	static int tpm_seal(struct tpm_buf *, uint16_t, uint32_t, const unsigned char *, const unsigned char *, uint32_t, unsigned char *, uint32_t *, const unsigned char *, const unsigned char *, uint32_t);
582:	static int tpm_unseal(struct tpm_buf *, uint32_t, const unsigned char *, const unsigned char *, int, const unsigned char *, unsigned char *, unsigned int *);
1191:	static void trusted_destroy(struct key *);
984:	static int trusted_instantiate(struct key *, struct key_preparsed_payload *);
941:	static struct trusted_key_options *trusted_options_alloc(void);
1079:	static void trusted_rcu_free(struct callback_head *);
1169:	static long trusted_read(const struct key *, char *, size_t);
1207:	static void trusted_shash_release(void);
1090:	static int trusted_update(struct key *, struct key_preparsed_payload *);

File security/keys/trusted-keys/trusted_tpm2.c:
62:	int tpm2_seal_trusted(struct tpm_chip *, struct trusted_key_payload *, struct trusted_key_options *);
309:	int tpm2_unseal_trusted(struct tpm_chip *, struct trusted_key_payload *, struct trusted_key_options *);
34:	static void tpm2_buf_append_auth(struct tpm_buf *, u32, u8, const u8 *, u16, u16, const u8 *);
185:	static int tpm2_load_cmd(struct tpm_chip *, struct trusted_key_payload *, struct trusted_key_options *, u32 *);
249:	static int tpm2_unseal_cmd(struct tpm_chip *, struct trusted_key_payload *, struct trusted_key_options *, u32);

File security/keys/user_defined.c:
158:	void user_describe(const struct key *, struct seq_file *);
146:	void user_destroy(struct key *);
83:	void user_free_preparse(struct key_preparsed_payload *);
59:	int user_preparse(struct key_preparsed_payload *);
171:	long user_read(const struct key *, char *, size_t);
128:	void user_revoke(struct key *);
101:	int user_update(struct key *, struct key_preparsed_payload *);
193:	static int logon_vet_description(const char *);
89:	static void user_free_payload_rcu(struct callback_head *);

File security/lockdown/lockdown.c:
26:	static int lock_kernel_down(enum lockdown_reason, const char *);
58:	static int lockdown_is_locked_down(enum lockdown_reason);
78:	static int lockdown_lsm_init(void);
37:	static int lockdown_param(char *);
90:	static ssize_t lockdown_read(struct file *, char *, size_t, loff_t *);
149:	static int lockdown_secfs_init(void);
116:	static ssize_t lockdown_write(struct file *, const char *, size_t, loff_t *);

File security/lsm_audit.c:
453:	void common_lsm_audit(struct common_audit_data *, void (*)(struct audit_buffer *, void *), void (*)(struct audit_buffer *, void *));
40:	int ipv4_skb_to_auditdata(struct sk_buff *, struct common_audit_data *, u8 *);
109:	int ipv6_skb_to_auditdata(struct sk_buff *, struct common_audit_data *, u8 *);
209:	static void dump_common_audit_data(struct audit_buffer *, struct common_audit_data *);

File security/min_addr.c:
32:	int mmap_min_addr_handler(struct ctl_table *, int, void *, size_t *, loff_t *);
47:	static int init_mmap_min_addr(void);

File security/security.c:
497:	int call_blocking_lsm_notifier(enum lsm_event, void *);
363:	int early_security_init(void);
583:	int lsm_inode_alloc(struct inode *);
504:	int register_blocking_lsm_notifier(struct notifier_block *);
477:	void security_add_hooks(struct security_hook_list *, int, char *);
952:	int security_add_mnt_opt(const char *, const char *, int, void **);
2489:	void security_audit_rule_free(void *);
2479:	int security_audit_rule_init(u32, u32, char *, void **);
2484:	int security_audit_rule_known(struct audit_krule *);
2494:	int security_audit_rule_match(u32, u32, u32, void *);
726:	int security_binder_set_context_mgr(const struct cred *);
731:	int security_binder_transaction(const struct cred *, const struct cred *);
737:	int security_binder_transfer_binder(const struct cred *, const struct cred *);
743:	int security_binder_transfer_file(const struct cred *, const struct cred *, struct file *);
2501:	int security_bpf(int, union bpf_attr *, unsigned int);
2505:	int security_bpf_map(struct bpf_map *, fmode_t);
2513:	int security_bpf_map_alloc(struct bpf_map *);
2521:	void security_bpf_map_free(struct bpf_map *);
2509:	int security_bpf_prog(struct bpf_prog *);
2517:	int security_bpf_prog_alloc(struct bpf_prog_aux *);
2525:	void security_bpf_prog_free(struct bpf_prog_aux *);
838:	int security_bprm_check(struct linux_binprm *);
853:	void security_bprm_committed_creds(struct linux_binprm *);
848:	void security_bprm_committing_creds(struct linux_binprm *);
828:	int security_bprm_creds_for_exec(struct linux_binprm *);
833:	int security_bprm_creds_from_file(struct linux_binprm *, struct file *);
777:	int security_capable(const struct cred *, struct user_namespace *, int, unsigned int);
759:	int security_capget(struct task_struct *, kernel_cap_t *, kernel_cap_t *, kernel_cap_t *);
768:	int security_capset(struct cred *, const struct cred *, const kernel_cap_t *, const kernel_cap_t *, const kernel_cap_t *);
1604:	int security_cred_alloc_blank(struct cred *, gfp_t);
1617:	void security_cred_free(struct cred *);
1650:	void security_cred_getsecid(const struct cred *, u32 *);
1971:	void security_d_instantiate(struct dentry *, struct inode *);
1018:	int security_dentry_create_files_as(struct dentry *, int, struct qstr *, const struct cred *, struct cred *);
1009:	int security_dentry_init_security(struct dentry *, int, const struct qstr *, void **, u32 *);
1456:	int security_file_alloc(struct file *);
1552:	int security_file_fcntl(struct file *, unsigned int, unsigned long);
1468:	void security_file_free(struct file *);
1481:	int security_file_ioctl(struct file *, unsigned int, unsigned long);
1547:	int security_file_lock(struct file *, unsigned int);
1536:	int security_file_mprotect(struct vm_area_struct *, unsigned long, unsigned long);
1573:	int security_file_open(struct file *);
1445:	int security_file_permission(struct file *, int);
1568:	int security_file_receive(struct file *);
1562:	int security_file_send_sigiotask(struct task_struct *, struct fown_struct *, int);
1557:	void security_file_set_fowner(struct file *);
878:	void security_free_mnt_opts(void **);
858:	int security_fs_context_dup(struct fs_context *, struct fs_context *);
863:	int security_fs_context_parse_param(struct fs_context *, struct fs_parameter *);
1979:	int security_getprocattr(struct task_struct *, const char *, char *, char **);
2341:	int security_ib_alloc_security(void **);
2335:	int security_ib_endport_manage_subnet(void *, const char *, u8);
2347:	void security_ib_free_security(void *);
2329:	int security_ib_pkey_access(void *, u64, u16);
2243:	void security_inet_conn_established(struct sock *, struct sk_buff *);
2230:	int security_inet_conn_request(struct sock *, struct sk_buff *, struct request_sock *);
2237:	void security_inet_csk_clone(struct sock *, const struct request_sock *);
388:	int security_init(void);
971:	int security_inode_alloc(struct inode *);
1412:	int security_inode_copy_up(struct dentry *, struct cred **);
1418:	int security_inode_copy_up_xattr(const char *);
1169:	int security_inode_create(struct inode *, struct dentry *, umode_t);
1248:	int security_inode_follow_link(struct dentry *, struct inode *, bool);
991:	void security_inode_free(struct inode *);
1276:	int security_inode_getattr(const struct path *);
2066:	int security_inode_getsecctx(struct inode *, void **, u32 *);
1407:	void security_inode_getsecid(struct inode *, u32 *);
1362:	int security_inode_getsecurity(struct inode *, const char *, void **, bool);
1317:	int security_inode_getxattr(struct dentry *, const char *);
1027:	int security_inode_init_security(struct inode *, struct inode *, const struct qstr *, const initxattrs, void *);
2048:	void security_inode_invalidate_secctx(struct inode *);
1357:	int security_inode_killpriv(struct dentry *);
1177:	int security_inode_link(struct dentry *, struct inode *, struct dentry *);
1399:	int security_inode_listsecurity(struct inode *, char *, size_t);
1324:	int security_inode_listxattr(struct dentry *);
1200:	int security_inode_mkdir(struct inode *, struct dentry *, umode_t);
1215:	int security_inode_mknod(struct inode *, struct dentry *, umode_t, dev_t);
1352:	int security_inode_need_killpriv(struct dentry *);
2054:	int security_inode_notifysecctx(struct inode *, void *, u32);
1256:	int security_inode_permission(struct inode *, int);
1307:	void security_inode_post_setxattr(struct dentry *, const char *, const void *, size_t, int);
1241:	int security_inode_readlink(struct dentry *);
1331:	int security_inode_removexattr(struct dentry *, const char *);
1222:	int security_inode_rename(struct inode *, struct dentry *, struct inode *, struct dentry *, unsigned int);
1208:	int security_inode_rmdir(struct inode *, struct dentry *);
1263:	int security_inode_setattr(struct dentry *, struct iattr *);
2060:	int security_inode_setsecctx(struct dentry *, void *, u32);
1380:	int security_inode_setsecurity(struct inode *, const char *, const void *, size_t, int);
1283:	int security_inode_setxattr(struct dentry *, const char *, const void *, size_t, int);
1192:	int security_inode_symlink(struct inode *, struct dentry *, const char *);
1185:	int security_inode_unlink(struct inode *, struct dentry *);
1836:	void security_ipc_getsecid(struct kern_ipc_perm *, u32 *);
1831:	int security_ipc_permission(struct kern_ipc_perm *, short);
2010:	int security_ismaclabel(const char *);
1657:	int security_kernel_act_as(struct cred *, u32);
1662:	int security_kernel_create_files_as(struct cred *, struct inode *);
1701:	int security_kernel_load_data(enum kernel_load_data_id, bool);
1667:	int security_kernel_module_request(char *);
1712:	int security_kernel_post_load_data(char *, loff_t, enum kernel_load_data_id, char *);
1689:	int security_kernel_post_read_file(struct file *, char *, loff_t, enum kernel_read_file_id);
1677:	int security_kernel_read_file(struct file *, enum kernel_read_file_id, bool);
1439:	int security_kernfs_init_security(struct kernfs_node *, struct kernfs_node *);
2452:	int security_key_alloc(struct key *, const struct cred *, unsigned long);
2458:	void security_key_free(struct key *);
2469:	int security_key_getsecurity(struct key *, char **);
2463:	int security_key_permission(key_ref_t, const struct cred *, enum key_need_perm);
2531:	int security_locked_down(enum lockdown_reason);
1531:	int security_mmap_addr(unsigned long);
1520:	int security_mmap_file(struct file *, unsigned long, unsigned long);
960:	int security_move_mount(const struct path *, const struct path *);
1842:	int security_msg_msg_alloc(struct msg_msg *);
1854:	void security_msg_msg_free(struct msg_msg *);
1861:	int security_msg_queue_alloc(struct kern_ipc_perm *);
1880:	int security_msg_queue_associate(struct kern_ipc_perm *, int);
1873:	void security_msg_queue_free(struct kern_ipc_perm *);
1885:	int security_msg_queue_msgctl(struct kern_ipc_perm *, int);
1896:	int security_msg_queue_msgrcv(struct kern_ipc_perm *, struct msg_msg *, struct task_struct *, long, int);
1890:	int security_msg_queue_msgsnd(struct kern_ipc_perm *, struct msg_msg *, int);
2005:	int security_netlink_send(struct sock *, struct sk_buff *);
1062:	int security_old_inode_init_security(struct inode *, struct inode *, const struct qstr *, const char **, void **, size_t *);
1149:	int security_path_chmod(const struct path *, umode_t);
1156:	int security_path_chown(const struct path *, kuid_t, kgid_t);
1163:	int security_path_chroot(const struct path *);
1114:	int security_path_link(struct dentry *, const struct path *, struct dentry *);
1083:	int security_path_mkdir(const struct path *, struct dentry *, umode_t);
1074:	int security_path_mknod(const struct path *, struct dentry *, umode_t, unsigned int);
965:	int security_path_notify(const struct path *, u64, unsigned int);
1122:	int security_path_rename(const struct path *, struct dentry *, const struct path *, struct dentry *, unsigned int);
1091:	int security_path_rmdir(const struct path *, struct dentry *);
1106:	int security_path_symlink(const struct path *, struct dentry *, const char *);
1142:	int security_path_truncate(const struct path *);
1098:	int security_path_unlink(const struct path *, struct dentry *);
2543:	int security_perf_event_alloc(struct perf_event *);
2548:	void security_perf_event_free(struct perf_event *);
2538:	int security_perf_event_open(struct perf_event_attr *, int);
2553:	int security_perf_event_read(struct perf_event *);
2558:	int security_perf_event_write(struct perf_event *);
1632:	int security_prepare_creds(struct cred *, const struct cred *, gfp_t);
749:	int security_ptrace_access_check(struct task_struct *, unsigned int);
754:	int security_ptrace_traceme(struct task_struct *);
790:	int security_quota_on(struct dentry *);
785:	int security_quotactl(int, int, int, struct super_block *);
2042:	void security_release_secctx(char *, u32);
2218:	void security_req_classify_flow(const struct request_sock *, struct flowi *);
868:	int security_sb_alloc(struct super_block *);
942:	int security_sb_clone_mnt_opts(const struct super_block *, struct super_block *, unsigned long, unsigned long *);
887:	int security_sb_eat_lsm_opts(char *, void **);
873:	void security_sb_free(struct super_block *);
900:	int security_sb_kern_mount(struct super_block *);
915:	int security_sb_mount(const char *, const struct path *, const char *, unsigned long, void *);
926:	int security_sb_pivotroot(const struct path *, const struct path *);
893:	int security_sb_remount(struct super_block *, void *);
931:	int security_sb_set_mnt_opts(struct super_block *, void *, unsigned long, unsigned long *);
905:	int security_sb_show_options(struct seq_file *, struct super_block *);
910:	int security_sb_statfs(struct dentry *);
921:	int security_sb_umount(struct vfsmount *, int);
2304:	int security_sctp_assoc_request(struct sctp_endpoint *, struct sk_buff *);
2310:	int security_sctp_bind_connect(struct sock *, int, struct sockaddr *, int);
2318:	void security_sctp_sk_clone(struct sctp_endpoint *, struct sock *, struct sock *);
2035:	int security_secctx_to_secid(const char *, u32, u32 *);
2016:	int security_secid_to_secctx(u32, char **, u32 *);
2262:	void security_secmark_refcount_dec(void);
2256:	void security_secmark_refcount_inc(void);
2250:	int security_secmark_relabel_packet(u32);
1936:	int security_sem_alloc(struct kern_ipc_perm *);
1955:	int security_sem_associate(struct kern_ipc_perm *, int);
1948:	void security_sem_free(struct kern_ipc_perm *);
1960:	int security_sem_semctl(struct kern_ipc_perm *, int);
1965:	int security_sem_semop(struct kern_ipc_perm *, struct sembuf *, unsigned int, int);
1992:	int security_setprocattr(const char *, const char *, void *, size_t);
800:	int security_settime64(const struct timespec64 *, const struct timezone *);
1902:	int security_shm_alloc(struct kern_ipc_perm *);
1921:	int security_shm_associate(struct kern_ipc_perm *, int);
1914:	void security_shm_free(struct kern_ipc_perm *);
1931:	int security_shm_shmat(struct kern_ipc_perm *, char *, int);
1926:	int security_shm_shmctl(struct kern_ipc_perm *, int);
2196:	int security_sk_alloc(struct sock *, int, gfp_t);
2212:	void security_sk_classify_flow(struct sock *, struct flowi *);
2206:	void security_sk_clone(const struct sock *, struct sock *);
2201:	void security_sk_free(struct sock *);
2439:	void security_skb_classify_flow(struct sk_buff *, struct flowi *);
2224:	void security_sock_graft(struct sock *, struct socket *);
2176:	int security_sock_rcv_skb(struct sock *, struct sk_buff *);
2135:	int security_socket_accept(struct socket *, struct socket *);
2120:	int security_socket_bind(struct socket *, struct sockaddr *, int);
2125:	int security_socket_connect(struct socket *, struct sockaddr *, int);
2102:	int security_socket_create(int, int, int, int);
2156:	int security_socket_getpeername(struct socket *);
2189:	int security_socket_getpeersec_dgram(struct socket *, struct sk_buff *, u32 *);
2182:	int security_socket_getpeersec_stream(struct socket *, char *, int *, unsigned int);
2151:	int security_socket_getsockname(struct socket *);
2161:	int security_socket_getsockopt(struct socket *, int, int);
2130:	int security_socket_listen(struct socket *, int);
2107:	int security_socket_post_create(struct socket *, int, int, int, int);
2145:	int security_socket_recvmsg(struct socket *, struct msghdr *, int, int);
2140:	int security_socket_sendmsg(struct socket *, struct msghdr *, int);
2166:	int security_socket_setsockopt(struct socket *, int, int);
2171:	int security_socket_shutdown(struct socket *, int);
2114:	int security_socket_socketpair(struct socket *, struct socket *);
795:	int security_syslog(int);
1584:	int security_task_alloc(struct task_struct *, unsigned long);
1732:	int security_task_fix_setgid(struct cred *, const struct cred *, int);
1726:	int security_task_fix_setuid(struct cred *, const struct cred *, int);
1596:	void security_task_free(struct task_struct *);
1770:	int security_task_getioprio(struct task_struct *);
1743:	int security_task_getpgid(struct task_struct *);
1792:	int security_task_getscheduler(struct task_struct *);
1753:	void security_task_getsecid(struct task_struct *, u32 *);
1748:	int security_task_getsid(struct task_struct *);
1802:	int security_task_kill(struct task_struct *, struct kernel_siginfo *, int, const struct cred *);
1797:	int security_task_movememory(struct task_struct *);
1808:	int security_task_prctl(int, unsigned long, unsigned long, unsigned long, unsigned long);
1775:	int security_task_prlimit(const struct cred *, const struct cred *, unsigned int);
1765:	int security_task_setioprio(struct task_struct *, int);
1760:	int security_task_setnice(struct task_struct *, int);
1738:	int security_task_setpgid(struct task_struct *, pid_t);
1781:	int security_task_setrlimit(struct task_struct *, unsigned int, struct rlimit *);
1787:	int security_task_setscheduler(struct task_struct *);
1826:	void security_task_to_inode(struct task_struct *, struct inode *);
1645:	void security_transfer_creds(struct cred *, const struct cred *);
2268:	int security_tun_dev_alloc_security(void **);
2292:	int security_tun_dev_attach(struct sock *, void *);
2286:	int security_tun_dev_attach_queue(void *);
2280:	int security_tun_dev_create(void);
2274:	void security_tun_dev_free_security(void *);
2298:	int security_tun_dev_open(void *);
2096:	int security_unix_may_send(struct socket *, struct socket *);
2090:	int security_unix_stream_connect(struct sock *, struct sock *, struct sock *);
805:	int security_vm_enough_memory_mm(struct mm_struct *, long);
2434:	int security_xfrm_decode_session(struct sk_buff *, u32 *);
2356:	int security_xfrm_policy_alloc(struct xfrm_sec_ctx **, struct xfrm_user_sec_ctx *, gfp_t);
2364:	int security_xfrm_policy_clone(struct xfrm_sec_ctx *, struct xfrm_sec_ctx **);
2376:	int security_xfrm_policy_delete(struct xfrm_sec_ctx *);
2370:	void security_xfrm_policy_free(struct xfrm_sec_ctx *);
2405:	int security_xfrm_policy_lookup(struct xfrm_sec_ctx *, u32, u8);
2381:	int security_xfrm_state_alloc(struct xfrm_state *, struct xfrm_user_sec_ctx *);
2388:	int security_xfrm_state_alloc_acquire(struct xfrm_state *, struct xfrm_sec_ctx *, u32);
2394:	int security_xfrm_state_delete(struct xfrm_state *);
2400:	void security_xfrm_state_free(struct xfrm_state *);
2410:	int security_xfrm_state_pol_flow_match(struct xfrm_state *, struct xfrm_policy *, const struct flowi *);
511:	int unregister_blocking_lsm_notifier(struct notifier_block *);
145:	static void append_ordered_lsm(struct lsm_info *, const char *);
418:	static int choose_lsm_order(char *);
410:	static int choose_major_lsm(char *);
426:	static int enable_debug(char *);
132:	static bool exists_ordered_lsm(struct lsm_info *);
229:	static void initialize_lsm(struct lsm_info *);
983:	static void inode_free_by_rcu(struct callback_head *);
98:	static bool is_enabled(struct lsm_info *, struct lsm_info *);
448:	static int lsm_append(const char *, char **);
527:	static int lsm_cred_alloc(struct cred *, gfp_t);
625:	static int lsm_ipc_alloc(struct kern_ipc_perm *);
646:	static int lsm_msg_msg_alloc(struct msg_msg *);
179:	static void lsm_set_blob_size(int *, int *);
604:	static int lsm_task_alloc(struct task_struct *);
317:	static void ordered_lsm_init(void);
241:	static void ordered_lsm_parse(const char *, const char *);
210:	static void prepare_lsm(struct lsm_info *);
109:	static void set_enabled(struct lsm_info *, bool);

File security/selinux/avc.c:
803:	int avc_add_callback(int (*)(u32), u32);
1224:	void avc_disable(void);
110:	unsigned int avc_get_cache_threshold(struct selinux_avc *);
153:	int avc_get_hash_stats(struct selinux_avc *, char *);
1040:	int avc_has_extended_perms(struct selinux_state *, u32, u32, u16, u32, u8, u8, struct common_audit_data *);
1184:	int avc_has_perm(struct selinux_state *, u32, u32, u16, u32, struct common_audit_data *);
1200:	int avc_has_perm_flags(struct selinux_state *, u32, u32, u16, u32, struct common_audit_data *, int);
1137:	int avc_has_perm_noaudit(struct selinux_state *, u32, u32, u16, u32, unsigned int, struct av_decision *);
137:	void avc_init(void);
1219:	u32 avc_policy_seqno(struct selinux_state *);
115:	void avc_set_cache_threshold(struct selinux_avc *, unsigned int);
972:	int avc_ss_reset(struct selinux_avc *, u32);
96:	void selinux_avc_init(struct selinux_avc **);
763:	int slow_avc_audit(struct selinux_state *, u32, u32, u16, u32, u32, u32, int, struct common_audit_data *);
500:	static struct avc_node *avc_alloc_node(struct selinux_avc *);
705:	static void avc_audit_post_callback(struct audit_buffer *, void *);
664:	static void avc_audit_pre_callback(struct audit_buffer *, void *);
1003:	static struct avc_node *avc_compute_av(struct selinux_state *, u32, u32, u16, struct av_decision *, struct avc_xperms_node *);
255:	static void avc_copy_xperms_decision(struct extended_perms_decision *, struct extended_perms_decision *);
1015:	static int avc_denied(struct selinux_state *, u32, u32, u16, u32, u8, u8, unsigned int, struct av_decision *);
943:	static void avc_flush(struct selinux_avc *);
616:	static struct avc_node *avc_insert(struct selinux_avc *, u32, u32, u16, struct av_decision *, struct avc_xperms_node *);
560:	static struct avc_node *avc_lookup(struct selinux_avc *, u32, u32, u16);
434:	static void avc_node_free(struct callback_head *);
457:	static void avc_node_replace(struct selinux_avc *, struct avc_node *, struct avc_node *);
836:	static int avc_update_node(struct selinux_avc *, u32, u32, u8, u8, u32, u32, u16, u32, struct extended_perms_decision *, u32);
295:	static struct avc_xperms_decision_node *avc_xperms_decision_alloc(u8);
227:	static void avc_xperms_decision_free(struct avc_xperms_decision_node *);
241:	static void avc_xperms_free(struct avc_xperms_node *);
355:	static int avc_xperms_populate(struct avc_node *, struct avc_xperms_node *);

File security/selinux/hooks.c:
7280:	void selinux_complete_init(void);
7394:	int selinux_disable(struct selinux_state *);
3002:	static int audit_inode_permission(struct inode *, u32, u32, u32, int);
310:	static struct inode_security_struct *backing_inode_security(struct dentry *);
6755:	static int bpf_fd_pass(struct file *, u32);
2238:	static int check_nnp_nosuid(const struct task_security_struct *, const struct task_security_struct *, const struct linux_binprm *, const struct linux_binprm *);
142:	static int checkreqprot_setup(char *);
1590:	static int cred_has_capability(int, unsigned int, bool, const struct cred *, const struct cred *);
7275:	static void delayed_superblock_init(struct super_block *, void *);
115:	static int enforcing_setup(char *);
1706:	static int file_has_perm(const struct cred *, struct file *, u32);
3654:	static int file_map_prot_check(struct file *, unsigned long, int);
3105:	static bool has_cap_mac_admin(bool);
1321:	static int inode_doinit_use_xattr(struct inode *, struct dentry *, u32, u32 *);
1383:	static int inode_doinit_with_dentry(struct inode *, struct dentry *);
318:	static void inode_free_security(struct inode *, struct inode *);
1630:	static int inode_has_perm(const struct cred *, struct inode *, u32, struct common_audit_data *);
3572:	static int ioctl_has_perm(struct file *, u16, u32, const struct cred *, const struct cred *);
5915:	static int ipc_has_perm(struct kern_ipc_perm *, u32);
2406:	static int match_file(const void *, struct file *, unsigned int);
388:	static int match_opt_prefix(char *, int, char **);
428:	static int may_context_mount_inode_relabel(u32, const struct cred *, struct superblock_security_struct *, const struct cred *, struct superblock_security_struct *);
409:	static int may_context_mount_sb_relabel(u32, const struct cred *, struct superblock_security_struct *, const struct cred *, struct superblock_security_struct *);
1772:	static int may_create(struct inode *, struct dentry *, u16);
1819:	static int may_link(struct inode *, struct dentry *, int);
2224:	static u32 ptrace_parent_sid(void);
487:	static int sb_finish_set_opts(struct super_block *);
990:	static int selinux_add_mnt_opt(const char *, const char *, int, void **);
947:	static int selinux_add_opt(int, const char *, void **);
2007:	static int selinux_binder_set_context_mgr(const struct cred *);
2014:	static int selinux_binder_transaction(const struct cred *, const struct cred *);
2034:	static int selinux_binder_transfer_binder(const struct cred *, const struct cred *);
2043:	static int selinux_binder_transfer_file(const struct cred *, const struct cred *, struct file *);
6711:	static int selinux_bpf(int, union bpf_attr *, unsigned int);
6782:	static int selinux_bpf_map(struct bpf_map *, fmode_t);
6804:	static int selinux_bpf_map_alloc(struct bpf_map *);
6818:	static void selinux_bpf_map_free(struct bpf_map *);
6793:	static int selinux_bpf_prog(struct bpf_prog *);
6826:	static int selinux_bpf_prog_alloc(struct bpf_prog_aux *);
6840:	static void selinux_bpf_prog_free(struct bpf_prog_aux *);
2510:	static void selinux_bprm_committed_creds(struct linux_binprm *);
2463:	static void selinux_bprm_committing_creds(struct linux_binprm *);
2292:	static int selinux_bprm_creds_for_exec(struct linux_binprm *);
2131:	static int selinux_capable(const struct cred *, struct user_namespace *, int, unsigned int);
2103:	static int selinux_capget(struct task_struct *, kernel_cap_t *, kernel_cap_t *, kernel_cap_t *);
2111:	static int selinux_capset(struct cred *, const struct cred *, const kernel_cap_t *, const kernel_cap_t *, const kernel_cap_t *);
836:	static int selinux_cmp_sb_context(const struct super_block *, const struct super_block *, const struct super_block *);
3918:	static void selinux_cred_getsecid(const struct cred *, u32 *);
3897:	static int selinux_cred_prepare(struct cred *, const struct cred *, gfp_t);
3910:	static void selinux_cred_transfer(struct cred *, const struct cred *);
6281:	static void selinux_d_instantiate(struct dentry *, struct inode *);
2863:	static int selinux_dentry_create_files_as(struct dentry *, int, struct qstr *, const struct cred *, struct cred *);
2845:	static int selinux_dentry_init_security(struct dentry *, int, const struct qstr *, void **, u32 *);
1748:	static int selinux_determine_inode_label(const struct task_security_struct *, struct inode *, const struct qstr *, u16, u32 *);
129:	static int selinux_enabled_setup(char *);
3557:	static int selinux_file_alloc_security(struct file *);
3778:	static int selinux_file_fcntl(struct file *, unsigned int, unsigned long);
3611:	static int selinux_file_ioctl(struct file *, unsigned int, unsigned long);
3771:	static int selinux_file_lock(struct file *, unsigned int);
3729:	static int selinux_file_mprotect(struct vm_area_struct *, unsigned long, unsigned long);
3856:	static int selinux_file_open(struct file *);
3537:	static int selinux_file_permission(struct file *, int);
3849:	static int selinux_file_receive(struct file *);
3826:	static int selinux_file_send_sigiotask(struct task_struct *, struct fown_struct *, int);
3818:	static void selinux_file_set_fowner(struct file *);
354:	static void selinux_free_mnt_opts(void *);
2757:	static int selinux_fs_context_dup(struct fs_context *, struct fs_context *);
2804:	static int selinux_fs_context_parse_param(struct fs_context *, struct fs_parameter *);
6287:	static int selinux_getprocattr(struct task_struct *, char *, char **);
6691:	static int selinux_ib_alloc_security(void **);
6666:	static int selinux_ib_endport_manage_subnet(void *, const char *, u8);
6644:	static int selinux_ib_pkey_access(void *, u64, u16);
5402:	static void selinux_inet_conn_established(struct sock *, struct sk_buff *);
5364:	static int selinux_inet_conn_request(struct sock *, struct sk_buff *, struct request_sock *);
5385:	static void selinux_inet_csk_clone(struct sock *, const struct request_sock *);
4936:	static int selinux_inet_sys_rcv_skb(struct net *, int, char *, u16, u32, struct common_audit_data *);
7233:	static int selinux_init(void);
2824:	static int selinux_inode_alloc_security(struct inode *);
3426:	static int selinux_inode_copy_up(struct dentry *, struct cred **);
3446:	static int selinux_inode_copy_up_xattr(const char *);
2932:	static int selinux_inode_create(struct inode *, struct dentry *, umode_t);
2980:	static int selinux_inode_follow_link(struct dentry *, struct inode *, bool);
2840:	static void selinux_inode_free_security(struct inode *);
3100:	static int selinux_inode_getattr(const struct path *);
6530:	static int selinux_inode_getsecctx(struct inode *, void **, u32 *);
3420:	static void selinux_inode_getsecid(struct inode *, u32 *);
3334:	static int selinux_inode_getsecurity(struct inode *, const char *, void **, bool);
3251:	static int selinux_inode_getxattr(struct dentry *, const char *);
2884:	static int selinux_inode_init_security(struct inode *, struct inode *, const struct qstr *, const char **, void **, size_t *);
6502:	static void selinux_inode_invalidate_secctx(struct inode *);
2937:	static int selinux_inode_link(struct dentry *, struct inode *, struct dentry *);
3408:	static int selinux_inode_listsecurity(struct inode *, char *, size_t);
3258:	static int selinux_inode_listxattr(struct dentry *);
2952:	static int selinux_inode_mkdir(struct inode *, struct dentry *, umode_t);
2962:	static int selinux_inode_mknod(struct inode *, struct dentry *, umode_t, dev_t);
6514:	static int selinux_inode_notifysecctx(struct inode *, void *, u32);
3021:	static int selinux_inode_permission(struct inode *, int);
3209:	static void selinux_inode_post_setxattr(struct dentry *, const char *, const void *, size_t, int);
2973:	static int selinux_inode_readlink(struct dentry *);
3265:	static int selinux_inode_removexattr(struct dentry *, const char *);
2967:	static int selinux_inode_rename(struct inode *, struct dentry *, struct inode *, struct dentry *);
2957:	static int selinux_inode_rmdir(struct inode *, struct dentry *);
3072:	static int selinux_inode_setattr(struct dentry *, struct iattr *);
6525:	static int selinux_inode_setsecctx(struct dentry *, void *, u32);
3378:	static int selinux_inode_setsecurity(struct inode *, const char *, const void *, size_t, int);
3117:	static int selinux_inode_setxattr(struct dentry *, const char *, const void *, size_t, int);
2947:	static int selinux_inode_symlink(struct inode *, struct dentry *, const char *);
2942:	static int selinux_inode_unlink(struct inode *, struct dentry *);
5527:	static unsigned int selinux_ip_forward(struct sk_buff *, const struct net_device *, u16);
5693:	static unsigned int selinux_ip_postroute(struct sk_buff *, const struct net_device *, u16);
5659:	static unsigned int selinux_ip_postroute_compat(struct sk_buff *, int, u16);
6275:	static void selinux_ipc_getsecid(struct kern_ipc_perm *, u32 *);
6259:	static int selinux_ipc_permission(struct kern_ipc_perm *, short);
5585:	static unsigned int selinux_ipv4_forward(void *, struct sk_buff *, const struct nf_hook_state *);
5643:	static unsigned int selinux_ipv4_output(void *, struct sk_buff *, const struct nf_hook_state *);
5833:	static unsigned int selinux_ipv4_postroute(void *, struct sk_buff *, const struct nf_hook_state *);
5593:	static unsigned int selinux_ipv6_forward(void *, struct sk_buff *, const struct nf_hook_state *);
5651:	static unsigned int selinux_ipv6_output(void *, struct sk_buff *, const struct nf_hook_state *);
5841:	static unsigned int selinux_ipv6_postroute(void *, struct sk_buff *, const struct nf_hook_state *);
446:	static int selinux_is_genfs_special_handling(struct super_block *, struct super_block *);
6480:	static int selinux_ismaclabel(const char *);
3927:	static int selinux_kernel_act_as(struct cred *, u32);
3951:	static int selinux_kernel_create_files_as(struct cred *, struct inode *);
4031:	static int selinux_kernel_load_data(enum kernel_load_data_id, bool);
3969:	static int selinux_kernel_module_request(char *);
4014:	static int selinux_kernel_read_file(struct file *, enum kernel_read_file_id, bool);
3463:	static int selinux_kernfs_init_security(struct kernfs_node *, struct kernfs_node *);
6542:	static int selinux_key_alloc(struct key *, const struct cred *, unsigned long);
6562:	static void selinux_key_free(struct key *);
6616:	static int selinux_key_getsecurity(struct key *, char **);
6570:	static int selinux_key_permission(key_ref_t, const struct cred *, enum key_need_perm);
6849:	static int selinux_lockdown(enum lockdown_reason);
199:	static int selinux_lsm_notifier_avc_callback(u32);
3693:	static int selinux_mmap_addr(unsigned long);
3707:	static int selinux_mmap_file(struct file *, unsigned long, unsigned long, unsigned long);
2726:	static int selinux_mount(const char *, const struct path *, const char *, unsigned long, void *);
2741:	static int selinux_move_mount(const struct path *, const struct path *);
5931:	static int selinux_msg_msg_alloc_security(struct msg_msg *);
5942:	static int selinux_msg_queue_alloc_security(struct kern_ipc_perm *);
5961:	static int selinux_msg_queue_associate(struct kern_ipc_perm *, int);
5977:	static int selinux_msg_queue_msgctl(struct kern_ipc_perm *, int);
6054:	static int selinux_msg_queue_msgrcv(struct kern_ipc_perm *, struct msg_msg *, struct task_struct *, long, int);
6008:	static int selinux_msg_queue_msgsnd(struct kern_ipc_perm *, struct msg_msg *, int);
188:	static int selinux_netcache_avc_callback(u32);
5851:	static int selinux_netlink_send(struct sock *, struct sk_buff *);
7359:	static int selinux_nf_ip_init(void);
7342:	static int selinux_nf_register(struct net *);
7348:	static void selinux_nf_unregister(struct net *);
4362:	static int selinux_parse_skb(struct sk_buff *, struct common_audit_data *, char **, int, u8 *);
4178:	static int selinux_parse_skb_ipv4(struct sk_buff *, struct common_audit_data *, u8 *);
4276:	static int selinux_parse_skb_ipv6(struct sk_buff *, struct common_audit_data *, u8 *);
3285:	static int selinux_path_notify(const struct path *, u64, unsigned int);
6905:	static int selinux_perf_event_alloc(struct perf_event *);
6919:	static void selinux_perf_event_free(struct perf_event *);
6886:	static int selinux_perf_event_open(struct perf_event_attr *, int);
6927:	static int selinux_perf_event_read(struct perf_event *);
6936:	static int selinux_perf_event_write(struct perf_event *);
2082:	static int selinux_ptrace_access_check(struct task_struct *, unsigned int);
2096:	static int selinux_ptrace_traceme(struct task_struct *);
2172:	static int selinux_quota_on(struct dentry *);
2137:	static int selinux_quotactl(int, int, int, struct super_block *);
6497:	static void selinux_release_secctx(char *, u32);
5437:	static void selinux_req_classify_flow(const struct request_sock *, struct flowi *);
3524:	static int selinux_revalidate_file_permission(struct file *, int);
2554:	static int selinux_sb_alloc_security(struct super_block *);
866:	static int selinux_sb_clone_mnt_opts(const struct super_block *, struct super_block *, unsigned long, unsigned long *);
2594:	static int selinux_sb_eat_lsm_opts(char *, void **);
2574:	static void selinux_sb_free_security(struct super_block *);
2706:	static int selinux_sb_kern_mount(struct super_block *);
2654:	static int selinux_sb_remount(struct super_block *, void *);
1050:	static int selinux_sb_show_options(struct seq_file *, struct super_block *);
2716:	static int selinux_sb_statfs(struct dentry *);
5195:	static int selinux_sctp_assoc_request(struct sctp_endpoint *, struct sk_buff *);
5267:	static int selinux_sctp_bind_connect(struct sock *, int, struct sockaddr *, int);
5346:	static void selinux_sctp_sk_clone(struct sctp_endpoint *, struct sock *, struct sock *);
6491:	static int selinux_secctx_to_secid(const char *, u32, u32 *);
6485:	static int selinux_secid_to_secctx(u32, char **, u32 *);
5432:	static void selinux_secmark_refcount_dec(void);
5427:	static void selinux_secmark_refcount_inc(void);
5414:	static int selinux_secmark_relabel_packet(u32);
6166:	static int selinux_sem_alloc_security(struct kern_ipc_perm *);
6185:	static int selinux_sem_associate(struct kern_ipc_perm *, int);
6202:	static int selinux_sem_semctl(struct kern_ipc_perm *, int);
6246:	static int selinux_sem_semop(struct kern_ipc_perm *, struct sembuf *, unsigned int, int);
596:	static int selinux_set_mnt_opts(struct super_block *, void *, unsigned long, unsigned long *);
6337:	static int selinux_setprocattr(const char *, void *, size_t);
6081:	static int selinux_shm_alloc_security(struct kern_ipc_perm *);
6100:	static int selinux_shm_associate(struct kern_ipc_perm *, int);
6152:	static int selinux_shm_shmat(struct kern_ipc_perm *, char *, int);
6117:	static int selinux_shm_shmctl(struct kern_ipc_perm *, int);
5130:	static int selinux_sk_alloc_security(struct sock *, int, gfp_t);
5156:	static void selinux_sk_clone_security(const struct sock *, struct sock *);
5147:	static void selinux_sk_free_security(struct sock *);
5168:	static void selinux_sk_getsecid(struct sock *, u32 *);
4418:	static int selinux_skb_peerlbl_sid(struct sk_buff *, u16, u32 *);
5179:	static void selinux_sock_graft(struct sock *, struct socket *);
4961:	static int selinux_sock_rcv_skb_compat(struct sock *, struct sk_buff *, u16);
4814:	static int selinux_socket_accept(struct socket *, struct socket *);
4571:	static int selinux_socket_bind(struct socket *, struct sockaddr *, int);
4796:	static int selinux_socket_connect(struct socket *, struct sockaddr *, int);
4705:	static int selinux_socket_connect_helper(struct sockaddr *, int, struct socket *, struct socket *);
4501:	static int selinux_socket_create(int, int, int, int);
5102:	static int selinux_socket_getpeersec_dgram(struct socket *, struct sk_buff *, u32 *);
5066:	static int selinux_socket_getpeersec_stream(struct socket *, char *, int *, unsigned int);
4852:	static int selinux_socket_getsockname(struct socket *);
4873:	static int selinux_socket_getsockopt(struct socket *, int, int);
4809:	static int selinux_socket_listen(struct socket *, int);
4521:	static int selinux_socket_post_create(struct socket *, int, int, int, int);
4846:	static int selinux_socket_recvmsg(struct socket *, struct msghdr *, int, int);
4840:	static int selinux_socket_sendmsg(struct socket *, struct msghdr *, int);
4862:	static int selinux_socket_setsockopt(struct socket *, int, int);
4879:	static int selinux_socket_shutdown(struct socket *, int);
4995:	static int selinux_socket_sock_rcv_skb(struct sock *, struct sk_buff *);
4555:	static int selinux_socket_socketpair(struct socket *, struct socket *);
4919:	static int selinux_socket_unix_may_send(struct socket *, struct socket *);
4884:	static int selinux_socket_unix_stream_connect(struct sock *, struct sock *, struct sock *);
2179:	static int selinux_syslog(int);
3885:	static int selinux_task_alloc(struct task_struct *, unsigned long);
4085:	static int selinux_task_getioprio(struct task_struct *);
4052:	static int selinux_task_getpgid(struct task_struct *);
4066:	static void selinux_task_getsecid(struct task_struct *, u32 *);
4059:	static int selinux_task_getsid(struct task_struct *);
4146:	static int selinux_task_kill(struct task_struct *, struct kernel_siginfo *, int, const struct cred *);
4092:	static int selinux_task_prlimit(const struct cred *, const struct cred *, unsigned int);
4071:	static int selinux_task_setnice(struct task_struct *, int);
4045:	static int selinux_task_setpgid(struct task_struct *, pid_t);
4108:	static int selinux_task_setrlimit(struct task_struct *, unsigned int, struct rlimit *);
4125:	static int selinux_task_setscheduler(struct task_struct *);
4164:	static void selinux_task_to_inode(struct task_struct *, struct inode *);
5443:	static int selinux_tun_dev_alloc_security(void **);
5486:	static int selinux_tun_dev_attach(struct sock *, void *);
5477:	static int selinux_tun_dev_attach_queue(void *);
5461:	static int selinux_tun_dev_create(void);
5456:	static void selinux_tun_dev_free_security(void *);
5504:	static int selinux_tun_dev_open(void *);
2749:	static int selinux_umount(struct vfsmount *, int);
2210:	static int selinux_vm_enough_memory(struct mm_struct *, long);
1028:	static int show_sid(struct seq_file *, u32);
4483:	static int sock_has_perm(struct sock *, u32);

File security/selinux/ibpkey.c:
205:	void sel_ib_pkey_flush(void);
182:	int sel_ib_pkey_sid(u64, u16, u32 *);
223:	static int sel_ib_pkey_init(void);
94:	static void sel_ib_pkey_insert(struct sel_ib_pkey *);
130:	static int sel_ib_pkey_sid_slow(u64, u16, u32 *);

File security/selinux/netif.c:
238:	void sel_netif_flush(void);
192:	int sel_netif_sid(struct net *, int, u32 *);
265:	static int sel_netif_init(void);
250:	static int sel_netif_netdev_notifier_handler(struct notifier_block *, unsigned long, void *);
133:	static int sel_netif_sid_slow(struct net *, int, u32 *);

File security/selinux/netlabel.c:
123:	void selinux_netlbl_cache_invalidate(void);
141:	void selinux_netlbl_err(struct sk_buff *, u16, int, int);
324:	int selinux_netlbl_inet_conn_request(struct request_sock *, u16);
353:	void selinux_netlbl_inet_csk_clone(struct sock *, u16);
271:	int selinux_netlbl_sctp_assoc_request(struct sctp_endpoint *, struct sk_buff *);
371:	void selinux_netlbl_sctp_sk_clone(struct sock *, struct sock *);
154:	void selinux_netlbl_sk_security_free(struct sk_security_struct *);
170:	void selinux_netlbl_sk_security_reset(struct sk_security_struct *);
188:	int selinux_netlbl_skbuff_getsid(struct sk_buff *, u16, u32 *, u32 *);
225:	int selinux_netlbl_skbuff_setsid(struct sk_buff *, u16, u32);
428:	int selinux_netlbl_sock_rcv_skb(struct sk_security_struct *, struct sk_buff *, u16, struct common_audit_data *);
603:	int selinux_netlbl_socket_connect(struct sock *, struct sockaddr *);
581:	int selinux_netlbl_socket_connect_locked(struct sock *, struct sockaddr *);
389:	int selinux_netlbl_socket_post_create(struct sock *, u16);
501:	int selinux_netlbl_socket_setsockopt(struct socket *, int, int);
67:	static struct netlbl_lsm_secattr *selinux_netlbl_sock_genattr(struct sock *);

File security/selinux/netlink.c:
103:	void selnl_notify_policyload(u32);
98:	void selnl_notify_setenforce(int);
108:	static int selnl_init(void);
67:	static void selnl_notify(int, void *);

File security/selinux/netnode.c:
273:	void sel_netnode_flush(void);
250:	int sel_netnode_sid(void *, u16, u32 *);
104:	static struct sel_netnode *sel_netnode_find(const void *, u16);
290:	static int sel_netnode_init(void);

File security/selinux/netport.c:
207:	void sel_netport_flush(void);
184:	int sel_netport_sid(u8, u16, u32 *);
224:	static int sel_netport_init(void);
105:	static void sel_netport_insert(struct sel_netport *);
138:	static int sel_netport_sid_slow(u8, u16, u32 *);

File security/selinux/nlmsgtab.c:
163:	int selinux_nlmsg_lookup(u16, u16, u32 *);

File security/selinux/selinuxfs.c:
2248:	void exit_sel_fs(void);
2209:	static int init_sel_fs(void);
1632:	static void *sel_avc_stats_seq_next(struct seq_file *, void *, loff_t *);
1637:	static int sel_avc_stats_seq_show(struct seq_file *, void *);
1622:	static void *sel_avc_stats_seq_start(struct seq_file *, loff_t *);
1655:	static void sel_avc_stats_seq_stop(struct seq_file *, void *);
1359:	static ssize_t sel_commit_bools_write(struct file *, const char *, size_t, loff_t *);
2052:	static int sel_fill_super(struct super_block *, struct fs_context *);
2179:	static int sel_get_tree(struct fs_context *);
2188:	static int sel_init_fs_context(struct fs_context *);
2194:	static void sel_kill_sb(struct super_block *);
1678:	static int sel_make_avc_files(struct dentry *);
1417:	static int sel_make_bools(struct selinux_policy *, struct dentry *, unsigned int *, char ***, unsigned int **);
1938:	static int sel_make_classes(struct selinux_policy *, struct dentry *, unsigned long *);
2007:	static struct dentry *sel_make_dir(struct dentry *, const char *, unsigned long *);
1865:	static int sel_make_perm_files(struct selinux_policy *, char *, int, struct dentry *);
536:	static int sel_make_policy_nodes(struct selinux_fs_info *, struct selinux_policy *);
247:	static int sel_mmap_handle_status(struct file *, struct vm_area_struct *);
500:	static int sel_mmap_policy(struct file *, struct vm_area_struct *);
474:	static vm_fault_t sel_mmap_policy_fault(struct vm_fault *);
1665:	static int sel_open_avc_cache_stats(struct inode *, struct file *);
222:	static int sel_open_handle_status(struct inode *, struct file *);
392:	static int sel_open_policy(struct inode *, struct file *);
1496:	static ssize_t sel_read_avc_cache_threshold(struct file *, char *, size_t, loff_t *);
1550:	static ssize_t sel_read_avc_hash_stats(struct file *, char *, size_t, loff_t *);
1261:	static ssize_t sel_read_bool(struct file *, char *, size_t, loff_t *);
712:	static ssize_t sel_read_checkreqprot(struct file *, char *, size_t, loff_t *);
1817:	static ssize_t sel_read_class(struct file *, char *, size_t, loff_t *);
124:	static ssize_t sel_read_enforce(struct file *, char *, size_t, loff_t *);
235:	static ssize_t sel_read_handle_status(struct file *, char *, size_t, loff_t *);
201:	static ssize_t sel_read_handle_unknown(struct file *, char *, size_t, loff_t *);
1745:	static ssize_t sel_read_initcon(struct file *, char *, size_t, loff_t *);
370:	static ssize_t sel_read_mls(struct file *, char *, size_t, loff_t *);
1831:	static ssize_t sel_read_perm(struct file *, char *, size_t, loff_t *);
459:	static ssize_t sel_read_policy(struct file *, char *, size_t, loff_t *);
1845:	static ssize_t sel_read_policycap(struct file *, char *, size_t, loff_t *);
336:	static ssize_t sel_read_policyvers(struct file *, char *, size_t, loff_t *);
1570:	static ssize_t sel_read_sidtab_hash_stats(struct file *, char *, size_t, loff_t *);
444:	static int sel_release_policy(struct inode *, struct file *);
905:	static ssize_t sel_write_access(struct file *, char *, size_t);
1509:	static ssize_t sel_write_avc_cache_threshold(struct file *, const char *, size_t, loff_t *);
1302:	static ssize_t sel_write_bool(struct file *, const char *, size_t, loff_t *);
724:	static ssize_t sel_write_checkreqprot(struct file *, const char *, size_t, loff_t *);
676:	static ssize_t sel_write_context(struct file *, char *, size_t);
956:	static ssize_t sel_write_create(struct file *, char *, size_t);
277:	static ssize_t sel_write_disable(struct file *, const char *, size_t, loff_t *);
137:	static ssize_t sel_write_enforce(struct file *, const char *, size_t, loff_t *);
614:	static ssize_t sel_write_load(struct file *, const char *, size_t, loff_t *);
1186:	static ssize_t sel_write_member(struct file *, char *, size_t);
1060:	static ssize_t sel_write_relabel(struct file *, char *, size_t);
1121:	static ssize_t sel_write_user(struct file *, char *, size_t);
774:	static ssize_t sel_write_validatetrans(struct file *, const char *, size_t, loff_t *);
98:	static void selinux_fs_info_free(struct super_block *);
871:	static ssize_t selinux_transaction_write(struct file *, const char *, size_t, loff_t *);

File security/selinux/ss/avtab.c:
325:	int avtab_alloc(struct avtab *, u32);
350:	int avtab_alloc_dup(struct avtab *, const struct avtab *);
669:	void avtab_cache_init(void);
277:	void avtab_destroy(struct avtab *);
355:	void avtab_hash_eval(struct avtab *, char *);
303:	void avtab_init(struct avtab *);
151:	struct avtab_node *avtab_insert_nonunique(struct avtab *, struct avtab_key *, struct avtab_datum *);
566:	int avtab_read(struct avtab *, void *, struct policydb *);
398:	int avtab_read_item(struct avtab *, void *, struct policydb *, int (*)(struct avtab *, struct avtab_key *, struct avtab_datum *, void *), void *);
181:	struct avtab_datum *avtab_search(struct avtab *, struct avtab_key *);
217:	struct avtab_node *avtab_search_node(struct avtab *, struct avtab_key *);
249:	struct avtab_node *avtab_search_node_next(struct avtab_node *, int);
645:	int avtab_write(struct policydb *, struct avtab *, void *);
610:	int avtab_write_item(struct policydb *, struct avtab_node *, void *);
106:	static int avtab_insert(struct avtab *, struct avtab_key *, struct avtab_datum *);
69:	static struct avtab_node *avtab_insert_node(struct avtab *, int, struct avtab_node *, struct avtab_key *, struct avtab_datum *, struct avtab_node *);
560:	static int avtab_insertf(struct avtab *, struct avtab_key *, struct avtab_datum *, void *);

File security/selinux/ss/conditional.c:
574:	void cond_compute_av(struct avtab *, struct avtab_key *, struct av_decision *, struct extended_perms *);
555:	void cond_compute_xperms(struct avtab *, struct avtab_key *, struct extended_perms_decision *);
175:	int cond_destroy_bool(void *, void *, void *);
182:	int cond_index_bool(void *, void *, void *);
164:	int cond_init_bool_indexes(struct policydb *);
157:	void cond_policydb_destroy(struct policydb *);
737:	void cond_policydb_destroy_dup(struct policydb *);
744:	int cond_policydb_dup(struct policydb *, struct policydb *);
131:	void cond_policydb_init(struct policydb *);
206:	int cond_read_bool(struct policydb *, struct symtab *, void *);
413:	int cond_read_list(struct policydb *, void *);
447:	int cond_write_bool(void *, void *, void *);
535:	int cond_write_list(struct policydb *, void *);
123:	void evaluate_cond_nodes(struct policydb *);
685:	static int cond_bools_copy(struct hashtab_node *, struct hashtab_node *, void *);
678:	static int cond_bools_destroy(void *, void *, void *);
699:	static int cond_bools_index(void *, void *, void *);
604:	static int cond_dup_av_list(struct cond_av_list *, struct cond_av_list *, struct avtab *);
24:	static int cond_evaluate_expr(struct policydb *, struct cond_expr *, struct cond_expr *);
257:	static int cond_insertf(struct avtab *, struct avtab_key *, struct avtab_datum *, void *);
321:	static int cond_read_av_list(struct policydb *, void *, struct cond_av_list *, struct cond_av_list *);
373:	static int cond_read_node(struct policydb *, struct cond_node *, void *);
479:	static int cond_write_av_list(struct policydb *, struct cond_av_list *, struct policy_file *);
500:	static int cond_write_node(struct policydb *, struct cond_node *, struct policy_file *);
710:	static int duplicate_policydb_bools(struct policydb *, struct policydb *);
628:	static int duplicate_policydb_cond_list(struct policydb *, struct policydb *);
92:	static void evaluate_cond_node(struct policydb *, struct cond_node *);

File security/selinux/ss/context.c:
14:	u32 context_compute_hash(const struct context *);

File security/selinux/ss/ebitmap.c:
81:	int ebitmap_and(struct ebitmap *, struct ebitmap *, struct ebitmap *);
559:	void ebitmap_cache_init(void);
31:	int ebitmap_cmp(struct ebitmap *, struct ebitmap *);
220:	int ebitmap_contains(struct ebitmap *, struct ebitmap *, u32);
53:	int ebitmap_cpy(struct ebitmap *, struct ebitmap *);
346:	void ebitmap_destroy(struct ebitmap *);
261:	int ebitmap_get_bit(unsigned long, struct ebitmap *, struct ebitmap *);
546:	u32 ebitmap_hash(const struct ebitmap *, u32);
110:	int ebitmap_netlbl_export(struct ebitmap *, struct netlbl_lsm_catmap **);
162:	int ebitmap_netlbl_import(struct ebitmap *, struct netlbl_lsm_catmap *);
365:	int ebitmap_read(struct ebitmap *, void *);
278:	int ebitmap_set_bit(struct ebitmap *, unsigned long, int);
471:	int ebitmap_write(struct ebitmap *, void *);

File security/selinux/ss/hashtab.c:
49:	int __hashtab_insert(struct hashtab *, struct hashtab_node **, void *, void *);
185:	void hashtab_cache_init(void);
66:	void hashtab_destroy(struct hashtab *);
132:	int hashtab_duplicate(struct hashtab *, struct hashtab *, int (*)(struct hashtab_node *, struct hashtab_node *, void *), int (*)(void *, void *, void *), void *);
31:	int hashtab_init(struct hashtab *, u32);
85:	int hashtab_map(struct hashtab *, int (*)(void *, void *, void *), void *);
106:	void hashtab_stat(struct hashtab *, struct hashtab_info *);
26:	static u32 hashtab_compute_size(u32);

File security/selinux/ss/mls.c:
36:	int mls_compute_context_len(struct policydb *, struct context *);
488:	int mls_compute_sid(struct policydb *, struct context *, struct context *, u16, u32, struct context *, bool);
193:	int mls_context_isvalid(struct policydb *, struct context *);
234:	int mls_context_to_sid(struct policydb *, char, char *, struct context *, struct sidtab *, u32);
447:	int mls_convert_context(struct policydb *, struct policydb *, struct context *, struct context *);
606:	int mls_export_netlbl_cat(struct policydb *, struct context *, struct netlbl_lsm_secattr *);
564:	void mls_export_netlbl_lvl(struct policydb *, struct context *, struct netlbl_lsm_secattr *);
361:	int mls_from_string(struct policydb *, char *, struct context *, gfp_t);
635:	int mls_import_netlbl_cat(struct policydb *, struct context *, struct netlbl_lsm_secattr *);
585:	void mls_import_netlbl_lvl(struct policydb *, struct context *, struct netlbl_lsm_secattr *);
162:	int mls_level_isvalid(struct policydb *, struct mls_level *);
182:	int mls_range_isvalid(struct policydb *, struct mls_range *);
385:	int mls_range_set(struct context *, struct mls_range *);
402:	int mls_setup_user_range(struct policydb *, struct context *, struct user_datum *, struct context *);
89:	void mls_sid_to_context(struct policydb *, struct context *, char **);

File security/selinux/ss/policydb.c:
906:	int policydb_class_isvalid(struct policydb *, unsigned int);
931:	int policydb_context_isvalid(struct policydb *, struct context *);
786:	void policydb_destroy(struct policydb *);
452:	struct filename_trans_datum *policydb_filenametr_search(struct policydb *, struct filename_trans_key *);
869:	int policydb_load_isids(struct policydb *, struct sidtab *);
489:	struct mls_range *policydb_rangetr_search(struct policydb *, struct range_trans *);
2402:	int policydb_read(struct policydb *, void *);
913:	int policydb_role_isvalid(struct policydb *, unsigned int);
523:	struct role_trans_datum *policydb_roletr_search(struct policydb *, struct role_trans_key *);
920:	int policydb_type_isvalid(struct policydb *, unsigned int);
3610:	int policydb_write(struct policydb *, void *);
1791:	u32 string_to_av_perm(struct policydb *, u16, const char *);
1780:	u16 string_to_security_class(struct policydb *, const char *);
657:	static int cat_index(void *, void *, void *);
1611:	static int cat_read(struct policydb *, struct symtab *, void *);
2805:	static int cat_write(void *, void *, void *);
569:	static int class_index(void *, void *, void *);
1295:	static int class_read(struct policydb *, struct symtab *, void *);
3041:	static int class_write(void *, void *, void *);
218:	static int cls_destroy(void *, void *, void *);
191:	static int common_destroy(void *, void *, void *);
554:	static int common_index(void *, void *, void *);
1131:	static int common_read(struct policydb *, struct symtab *, void *);
2946:	static int common_write(void *, void *, void *);
1035:	static int context_read_and_validate(struct context *, struct policydb *, void *);
2897:	static int context_write(struct context *, void *, struct policydb *);
1973:	static int filename_trans_read_helper(struct policydb *, void *);
1889:	static int filename_trans_read_helper_compat(struct policydb *, void *);
3529:	static int filename_write_helper(void *, void *, void *);
3492:	static int filename_write_helper_compat(void *, void *, void *);
331:	static int filenametr_destroy(void *, void *, void *);
2103:	static int genfs_read(struct policydb *, void *);
3390:	static int genfs_write(struct policydb *, void *);
1498:	static int mls_read_level(struct mls_level *, void *);
976:	static int mls_read_range_helper(struct mls_range *, void *);
2721:	static int mls_write_level(struct mls_level *, void *);
2742:	static int mls_write_range_helper(struct mls_range *, void *);
367:	static void ocontext_destroy(struct ocontext *, int);
2216:	static int ocontext_read(struct policydb *, struct policydb_compat_info *, void *);
3260:	static int ocontext_write(struct policydb *, struct policydb_compat_info *, void *);
184:	static int perm_destroy(void *, void *, void *);
1098:	static int perm_read(struct symtab *, void *, struct policydb *);
2924:	static int perm_write(void *, void *, void *);
718:	static int policydb_index(struct policydb *);
1812:	static int range_read(struct policydb *, void *);
348:	static int range_tr_destroy(void *, void *, void *);
3442:	static int range_write_helper(void *, void *, void *);
1200:	static int read_cons_helper(struct policydb *, struct constraint_node **, int, int, void *);
1692:	static int role_bounds_sanity_check(void *, void *, void *);
260:	static int role_destroy(void *, void *, void *);
584:	static int role_index(void *, void *, void *);
1390:	static int role_read(struct policydb *, struct symtab *, void *);
2830:	static int role_trans_write_one(void *, void *, void *);
3126:	static int role_write(void *, void *, void *);
297:	static int sens_destroy(void *, void *, void *);
638:	static int sens_index(void *, void *, void *);
1570:	static int sens_read(struct policydb *, struct symtab *, void *);
2777:	static int sens_write(void *, void *, void *);
1075:	static int str_read(char **, gfp_t, void *, u32);
1728:	static int type_bounds_sanity_check(void *, void *, void *);
601:	static int type_index(void *, void *, void *);
1446:	static int type_read(struct policydb *, struct symtab *, void *);
3165:	static int type_write(void *, void *, void *);
1656:	static int user_bounds_sanity_check(void *, void *, void *);
281:	static int user_destroy(void *, void *, void *);
621:	static int user_index(void *, void *, void *);
1520:	static int user_read(struct policydb *, struct symtab *, void *);
3206:	static int user_write(void *, void *, void *);
2994:	static int write_cons_helper(struct policydb *, struct constraint_node *, void *);

File security/selinux/ss/services.c:
865:	int security_bounded_transition(struct selinux_state *, u32, u32);
1976:	int security_change_sid(struct selinux_state *, u32, u32, u16, u32 *);
1110:	void security_compute_av(struct selinux_state *, u32, u32, u16, struct av_decision *, struct extended_perms *);
1169:	void security_compute_av_user(struct selinux_state *, u32, u32, u16, struct av_decision *);
1014:	void security_compute_xperms_decision(struct selinux_state *, u32, u32, u16, u8, struct extended_perms_decision *);
1608:	int security_context_str_to_sid(struct selinux_state *, const char *, u32 *, gfp_t);
1600:	int security_context_to_sid(struct selinux_state *, const char *, u32, u32 *, gfp_t);
1633:	int security_context_to_sid_default(struct selinux_state *, const char *, u32, u32 *, u32, gfp_t);
1641:	int security_context_to_sid_force(struct selinux_state *, const char *, u32, u32 *);
2947:	int security_fs_use(struct selinux_state *, struct super_block *);
2909:	int security_genfs_sid(struct selinux_state *, const char *, char *, u16, u32 *);
3487:	int security_get_allow_unknown(struct selinux_state *);
3130:	int security_get_bool_value(struct selinux_state *, u32);
3006:	int security_get_bools(struct selinux_policy *, u32 *, char ***, int **);
3387:	int security_get_classes(struct selinux_policy *, char ***, int *);
1318:	const char *security_get_initial_sid_context(u32);
3427:	int security_get_permissions(struct selinux_policy *, char *, char ***, int *);
3472:	int security_get_reject_unknown(struct selinux_state *);
2732:	int security_get_user_sids(struct selinux_state *, u32, char *, u32 **, u32 *);
2520:	int security_ib_endport_sid(struct selinux_state *, const char *, u8, u32 *);
2467:	int security_ib_pkey_sid(struct selinux_state *, u64, u16, u32 *);
2274:	int security_load_policy(struct selinux_state *, void *, size_t, struct selinux_load_state *);
1952:	int security_member_sid(struct selinux_state *, u32, u32, u16, u32 *);
242:	int security_mls_enabled(struct selinux_state *);
3298:	int security_net_peersid_resolve(struct selinux_state *, u32, u32, u32, u32 *);
2573:	int security_netif_sid(struct selinux_state *, char *, u32 *);
3855:	int security_netlbl_secattr_to_sid(struct selinux_state *, struct netlbl_lsm_secattr *, u32 *);
3932:	int security_netlbl_sid_to_secattr(struct selinux_state *, u32, struct netlbl_lsm_secattr *);
2637:	int security_node_sid(struct selinux_state *, u16, void *, u32, u32 *);
3512:	int security_policycap_supported(struct selinux_state *, unsigned int);
2414:	int security_port_sid(struct selinux_state *, u8, u16, u32 *);
3974:	int security_read_policy(struct selinux_state *, void **, size_t *);
3059:	int security_set_bools(struct selinux_state *, u32, int *);
3189:	int security_sid_mls_copy(struct selinux_state *, u32, u32, u32 *);
1397:	int security_sid_to_context(struct selinux_state *, u32, char **, u32 *);
1404:	int security_sid_to_context_force(struct selinux_state *, u32, char **, u32 *);
1424:	int security_sid_to_context_inval(struct selinux_state *, u32, char **, u32 *);
1299:	int security_sidtab_hash_stats(struct selinux_state *, char *);
1921:	int security_transition_sid(struct selinux_state *, u32, u32, u16, const struct qstr *, u32 *);
1930:	int security_transition_sid_user(struct selinux_state *, u32, u32, u16, const char *, u32 *);
848:	int security_validate_transition(struct selinux_state *, u32, u32, u32, u16);
840:	int security_validate_transition_user(struct selinux_state *, u32, u32, u32, u16);
3534:	void selinux_audit_rule_free(void *);
3544:	int selinux_audit_rule_init(u32, u32, char *, void **);
3647:	int selinux_audit_rule_known(struct audit_krule *);
3671:	int selinux_audit_rule_match(u32, u32, u32, void *);
2184:	void selinux_policy_cancel(struct selinux_state *, struct selinux_load_state *);
2208:	void selinux_policy_commit(struct selinux_state *, struct selinux_load_state *);
2933:	int selinux_policy_genfs_sid(struct selinux_policy *, const char *, char *, u16, u32 *);
960:	void services_compute_xperms_decision(struct extended_perms_decision *, struct avtab_node *);
594:	void services_compute_xperms_drivers(struct extended_perms *, struct avtab_node *);
3787:	static int aurule_avc_callback(u32);
3796:	static int aurule_init(void);
1649:	static int compute_sid_handle_invalid_context(struct selinux_state *, struct selinux_policy *, struct sidtab_entry *, struct sidtab_entry *, u16, struct context *);
268:	static int constraint_expr_eval(struct policydb *, struct context *, struct context *, struct context *, struct constraint_expr *);
619:	static void context_struct_compute_av(struct policydb *, struct context *, struct context *, u16, struct av_decision *, struct extended_perms *);
1230:	static int context_struct_to_string(struct policydb *, struct context *, char **, u32 *);
2014:	static int convert_context(struct context *, struct context *, void *);
447:	static int dump_masked_av_helper(void *, void *, void *);
3374:	static int get_classes_callback(void *, void *, void *);
3414:	static int get_permissions_callback(void *, void *, void *);
203:	static void map_decision(u16, struct av_decision *, int, struct selinux_map *, struct selinux_map *);
1716:	static int security_compute_sid(struct selinux_state *, u32, u32, u16, u32, const char *, u32 *, bool);
756:	static int security_compute_validatetrans(struct selinux_state *, u32, u32, u32, u16, bool);
1512:	static int security_context_to_sid_core(struct selinux_state *, const char *, u32, u32 *, u32, gfp_t, int);
459:	static void security_dump_masked_av(struct policydb *, struct context *, struct context *, u16, u32, const char *);
2138:	static void security_load_policycaps(struct selinux_state *, struct selinux_policy *);
3156:	static int security_preserve_bools(struct selinux_policy *, struct selinux_policy *);
1325:	static int security_sid_to_context_core(struct selinux_state *, u32, char **, u32 *, int, int);
724:	static int security_validtrans_handle_fail(struct selinux_state *, struct selinux_policy *, struct sidtab_entry *, struct sidtab_entry *, struct sidtab_entry *, u16);
2197:	static void selinux_notify_policy_change(struct selinux_state *, u32);
99:	static int selinux_set_mapping(struct policydb *, struct selinux_map *, struct security_class_mapping *);
1280:	static int sidtab_entry_to_string(struct policydb *, struct sidtab *, struct sidtab_entry *, char **, u32 *);
1434:	static int string_to_context_struct(struct policydb *, struct sidtab *, char *, struct context *, u32);
538:	static void type_attribute_bounds_av(struct policydb *, struct context *, struct context *, u16, struct av_decision *);

File security/selinux/ss/sidtab.c:
477:	void sidtab_cancel_convert(struct sidtab *);
264:	int sidtab_context_to_sid(struct sidtab *, struct context *, u32 *);
418:	int sidtab_convert(struct sidtab *, struct sidtab_convert_params *);
531:	void sidtab_destroy(struct sidtab *);
487:	void sidtab_freeze_begin(struct sidtab *, unsigned long *);
493:	void sidtab_freeze_end(struct sidtab *, unsigned long *);
113:	int sidtab_hash_stats(struct sidtab *, char *);
33:	int sidtab_init(struct sidtab *);
254:	struct sidtab_entry *sidtab_search_entry(struct sidtab *, u32);
259:	struct sidtab_entry *sidtab_search_entry_force(struct sidtab *, u32);
76:	int sidtab_set_initial(struct sidtab *, u32, struct context *);
598:	int sidtab_sid2str_get(struct sidtab *, struct sidtab_entry *, char **, u32 *);
553:	void sidtab_sid2str_put(struct sidtab *, struct sidtab_entry *, const char *, u32);
58:	static u32 context_to_sid(struct sidtab *, struct context *, u32);
371:	static int sidtab_convert_tree(union sidtab_entry_inner *, union sidtab_entry_inner *, u32 *, u32, u32, struct sidtab_convert_params *);
498:	static void sidtab_destroy_entry(struct sidtab_entry *);
506:	static void sidtab_destroy_tree(union sidtab_entry_inner, u32);
180:	static struct sidtab_entry *sidtab_do_lookup(struct sidtab *, u32, int);

File security/selinux/ss/symtab.c:
40:	int symtab_init(struct symtab *, unsigned int);
46:	int symtab_insert(struct symtab *, char *, void *);
51:	void *symtab_search(struct symtab *, const char *);
12:	static unsigned int symhash(const void *);

File security/selinux/status.c:
42:	struct page *selinux_kernel_status_page(struct selinux_state *);
105:	void selinux_status_update_policyload(struct selinux_state *, int);
79:	void selinux_status_update_setenforce(struct selinux_state *, int);

File security/selinux/xfrm.c:
261:	int selinux_xfrm_decode_session(struct sk_buff *, u32 *, int);
284:	int selinux_xfrm_policy_alloc(struct xfrm_sec_ctx **, struct xfrm_user_sec_ctx *, gfp_t);
295:	int selinux_xfrm_policy_clone(struct xfrm_sec_ctx *, struct xfrm_sec_ctx **);
324:	int selinux_xfrm_policy_delete(struct xfrm_sec_ctx *);
316:	void selinux_xfrm_policy_free(struct xfrm_sec_ctx *);
153:	int selinux_xfrm_policy_lookup(struct xfrm_sec_ctx *, u32, u8);
438:	int selinux_xfrm_postroute_last(u32, struct sk_buff *, struct common_audit_data *, u8);
270:	int selinux_xfrm_skb_sid(struct sk_buff *, u32 *);
404:	int selinux_xfrm_sock_rcv_skb(u32, struct sk_buff *, struct common_audit_data *);
333:	int selinux_xfrm_state_alloc(struct xfrm_state *, struct xfrm_user_sec_ctx *);
343:	int selinux_xfrm_state_alloc_acquire(struct xfrm_state *, struct xfrm_sec_ctx *, u32);
392:	int selinux_xfrm_state_delete(struct xfrm_state *);
384:	void selinux_xfrm_state_free(struct xfrm_state *);
176:	int selinux_xfrm_state_pol_flow_match(struct xfrm_state *, struct xfrm_policy *, const struct flowi *);
74:	static int selinux_xfrm_alloc_user(struct xfrm_sec_ctx **, struct xfrm_user_sec_ctx *, gfp_t);
226:	static int selinux_xfrm_skb_sid_ingress(struct sk_buff *, u32 *, int);

File security/yama/yama_lsm.c:
51:	static void __report_access(struct callback_head *);
305:	static int ptracer_exception_found(struct task_struct *, struct task_struct *);
74:	static void report_access(const char *, struct task_struct *, struct task_struct *);
272:	static int task_is_descendant(struct task_struct *, struct task_struct *);
432:	static int yama_dointvec_minmax(struct ctl_table *, int, void *, size_t *, loff_t *);
477:	static int yama_init(void);
354:	static int yama_ptrace_access_check(struct task_struct *, unsigned int);
400:	static int yama_ptrace_traceme(struct task_struct *);
141:	static int yama_ptracer_add(struct task_struct *, struct task_struct *);
179:	static void yama_ptracer_del(struct task_struct *, struct task_struct *);
115:	static void yama_relation_cleanup(struct work_struct *);
205:	static void yama_task_free(struct task_struct *);
221:	static int yama_task_prctl(int, unsigned long, unsigned long, unsigned long, unsigned long);

Non-debugging symbols:
0xffffffff81001000  xen_hypercall_set_trap_table
0xffffffff81001020  xen_hypercall_mmu_update
0xffffffff81001040  xen_hypercall_set_gdt
0xffffffff81001060  xen_hypercall_stack_switch
0xffffffff81001080  xen_hypercall_set_callbacks
0xffffffff810010a0  xen_hypercall_fpu_taskswitch
0xffffffff810010c0  xen_hypercall_sched_op_compat
0xffffffff810010e0  xen_hypercall_platform_op
0xffffffff81001100  xen_hypercall_set_debugreg
0xffffffff81001120  xen_hypercall_get_debugreg
0xffffffff81001140  xen_hypercall_update_descriptor
0xffffffff81001180  xen_hypercall_memory_op
0xffffffff810011a0  xen_hypercall_multicall
0xffffffff810011c0  xen_hypercall_update_va_mapping
0xffffffff810011e0  xen_hypercall_set_timer_op
0xffffffff81001200  xen_hypercall_event_channel_op_compat
0xffffffff81001220  xen_hypercall_xen_version
0xffffffff81001240  xen_hypercall_console_io
0xffffffff81001260  xen_hypercall_physdev_op_compat
0xffffffff81001280  xen_hypercall_grant_table_op
0xffffffff810012a0  xen_hypercall_vm_assist
0xffffffff810012c0  xen_hypercall_update_va_mapping_otherdomain
0xffffffff810012e0  xen_hypercall_iret
0xffffffff81001300  xen_hypercall_vcpu_op
0xffffffff81001320  xen_hypercall_set_segment_base
0xffffffff81001340  xen_hypercall_mmuext_op
0xffffffff81001360  xen_hypercall_xsm_op
0xffffffff81001380  xen_hypercall_nmi_op
0xffffffff810013a0  xen_hypercall_sched_op
0xffffffff810013c0  xen_hypercall_callback_op
0xffffffff810013e0  xen_hypercall_xenoprof_op
0xffffffff81001400  xen_hypercall_event_channel_op
0xffffffff81001420  xen_hypercall_physdev_op
0xffffffff81001440  xen_hypercall_hvm_op
0xffffffff81001460  xen_hypercall_sysctl
0xffffffff81001480  xen_hypercall_domctl
0xffffffff810014a0  xen_hypercall_kexec_op
0xffffffff810014c0  xen_hypercall_tmem_op
0xffffffff810014e0  xen_hypercall_xc_reserved_op
0xffffffff81001500  xen_hypercall_xenpmu_op
0xffffffff81001520  xen_hypercall_dm_op
0xffffffff81001600  xen_hypercall_mca
0xffffffff81001620  xen_hypercall_arch_1
0xffffffff81001640  xen_hypercall_arch_2
0xffffffff81001660  xen_hypercall_arch_3
0xffffffff81001680  xen_hypercall_arch_4
0xffffffff810016a0  xen_hypercall_arch_5
0xffffffff810016c0  xen_hypercall_arch_6
0xffffffff810016e0  xen_hypercall_arch_7
0xffffffff81a30568  __lock_text_end
0xffffffff81c0167a  _paravirt_nop
0xffffffff81e00280  __SCT__tp_func_initcall_level
0xffffffff81e00280  __static_call_text_start
0xffffffff81e00288  __SCT__tp_func_initcall_start
0xffffffff81e00290  __SCT__tp_func_initcall_finish
0xffffffff81e00298  __SCT__tp_func_emulate_vsyscall
0xffffffff81e002a0  __SCT__x86_pmu_handle_irq
0xffffffff81e002a8  __SCT__x86_pmu_disable_all
0xffffffff81e002b0  __SCT__x86_pmu_enable_all
0xffffffff81e002b8  __SCT__x86_pmu_enable
0xffffffff81e002c0  __SCT__x86_pmu_disable
0xffffffff81e002c8  __SCT__x86_pmu_add
0xffffffff81e002d0  __SCT__x86_pmu_del
0xffffffff81e002d8  __SCT__x86_pmu_read
0xffffffff81e002e0  __SCT__x86_pmu_schedule_events
0xffffffff81e002e8  __SCT__x86_pmu_get_event_constraints
0xffffffff81e002f0  __SCT__x86_pmu_put_event_constraints
0xffffffff81e002f8  __SCT__x86_pmu_start_scheduling
0xffffffff81e00300  __SCT__x86_pmu_commit_scheduling
0xffffffff81e00308  __SCT__x86_pmu_stop_scheduling
0xffffffff81e00310  __SCT__x86_pmu_sched_task
0xffffffff81e00318  __SCT__x86_pmu_swap_task_ctx
0xffffffff81e00320  __SCT__x86_pmu_drain_pebs
0xffffffff81e00328  __SCT__x86_pmu_pebs_aliases
0xffffffff81e00330  __SCT__tp_func_xen_mc_batch
0xffffffff81e00338  __SCT__tp_func_xen_mc_issue
0xffffffff81e00340  __SCT__tp_func_xen_mc_entry
0xffffffff81e00348  __SCT__tp_func_xen_mc_entry_alloc
0xffffffff81e00350  __SCT__tp_func_xen_mc_callback
0xffffffff81e00358  __SCT__tp_func_xen_mc_flush_reason
0xffffffff81e00360  __SCT__tp_func_xen_mc_flush
0xffffffff81e00368  __SCT__tp_func_xen_mc_extend_args
0xffffffff81e00370  __SCT__tp_func_xen_mmu_set_pte
0xffffffff81e00378  __SCT__tp_func_xen_mmu_set_pmd
0xffffffff81e00380  __SCT__tp_func_xen_mmu_set_pud
0xffffffff81e00388  __SCT__tp_func_xen_mmu_set_p4d
0xffffffff81e00390  __SCT__tp_func_xen_mmu_ptep_modify_prot_start
0xffffffff81e00398  __SCT__tp_func_xen_mmu_ptep_modify_prot_commit
0xffffffff81e003a0  __SCT__tp_func_xen_mmu_alloc_ptpage
0xffffffff81e003a8  __SCT__tp_func_xen_mmu_release_ptpage
0xffffffff81e003b0  __SCT__tp_func_xen_mmu_pgd_pin
0xffffffff81e003b8  __SCT__tp_func_xen_mmu_pgd_unpin
0xffffffff81e003c0  __SCT__tp_func_xen_mmu_flush_tlb_one_user
0xffffffff81e003c8  __SCT__tp_func_xen_mmu_flush_tlb_multi
0xffffffff81e003d0  __SCT__tp_func_xen_mmu_write_cr3
0xffffffff81e003d8  __SCT__tp_func_xen_cpu_write_ldt_entry
0xffffffff81e003e0  __SCT__tp_func_xen_cpu_write_idt_entry
0xffffffff81e003e8  __SCT__tp_func_xen_cpu_load_idt
0xffffffff81e003f0  __SCT__tp_func_xen_cpu_write_gdt_entry
0xffffffff81e003f8  __SCT__tp_func_xen_cpu_set_ldt
0xffffffff81e00400  __SCT__tp_func_hyperv_mmu_flush_tlb_multi
0xffffffff81e00408  __SCT__tp_func_hyperv_nested_flush_guest_mapping
0xffffffff81e00410  __SCT__tp_func_hyperv_nested_flush_guest_mapping_range
0xffffffff81e00418  __SCT__tp_func_hyperv_send_ipi_mask
0xffffffff81e00420  __SCT__tp_func_hyperv_send_ipi_one
0xffffffff81e00428  __SCT__tp_func_local_timer_entry
0xffffffff81e00430  __SCT__tp_func_local_timer_exit
0xffffffff81e00438  __SCT__tp_func_spurious_apic_entry
0xffffffff81e00440  __SCT__tp_func_spurious_apic_exit
0xffffffff81e00448  __SCT__tp_func_error_apic_entry
0xffffffff81e00450  __SCT__tp_func_error_apic_exit
0xffffffff81e00458  __SCT__tp_func_x86_platform_ipi_entry
0xffffffff81e00460  __SCT__tp_func_x86_platform_ipi_exit
0xffffffff81e00468  __SCT__tp_func_irq_work_entry
0xffffffff81e00470  __SCT__tp_func_irq_work_exit
0xffffffff81e00478  __SCT__tp_func_reschedule_entry
0xffffffff81e00480  __SCT__tp_func_reschedule_exit
0xffffffff81e00488  __SCT__tp_func_call_function_entry
0xffffffff81e00490  __SCT__tp_func_call_function_exit
0xffffffff81e00498  __SCT__tp_func_call_function_single_entry
0xffffffff81e004a0  __SCT__tp_func_call_function_single_exit
0xffffffff81e004a8  __SCT__tp_func_threshold_apic_entry
0xffffffff81e004b0  __SCT__tp_func_threshold_apic_exit
0xffffffff81e004b8  __SCT__tp_func_deferred_error_apic_entry
0xffffffff81e004c0  __SCT__tp_func_deferred_error_apic_exit
0xffffffff81e004c8  __SCT__tp_func_thermal_apic_entry
0xffffffff81e004d0  __SCT__tp_func_thermal_apic_exit
0xffffffff81e004d8  __SCT__tp_func_vector_config
0xffffffff81e004e0  __SCT__tp_func_vector_update
0xffffffff81e004e8  __SCT__tp_func_vector_clear
0xffffffff81e004f0  __SCT__tp_func_vector_reserve_managed
0xffffffff81e004f8  __SCT__tp_func_vector_reserve
0xffffffff81e00500  __SCT__tp_func_vector_alloc
0xffffffff81e00508  __SCT__tp_func_vector_alloc_managed
0xffffffff81e00510  __SCT__tp_func_vector_activate
0xffffffff81e00518  __SCT__tp_func_vector_deactivate
0xffffffff81e00520  __SCT__tp_func_vector_teardown
0xffffffff81e00528  __SCT__tp_func_vector_setup
0xffffffff81e00530  __SCT__tp_func_vector_free_moved
0xffffffff81e00538  __SCT__tp_func_nmi_handler
0xffffffff81e00540  __SCT__tp_func_x86_fpu_before_save
0xffffffff81e00548  __SCT__tp_func_x86_fpu_after_save
0xffffffff81e00550  __SCT__tp_func_x86_fpu_before_restore
0xffffffff81e00558  __SCT__tp_func_x86_fpu_after_restore
0xffffffff81e00560  __SCT__tp_func_x86_fpu_regs_activated
0xffffffff81e00568  __SCT__tp_func_x86_fpu_regs_deactivated
0xffffffff81e00570  __SCT__tp_func_x86_fpu_init_state
0xffffffff81e00578  __SCT__tp_func_x86_fpu_dropped
0xffffffff81e00580  __SCT__tp_func_x86_fpu_copy_src
0xffffffff81e00588  __SCT__tp_func_x86_fpu_copy_dst
0xffffffff81e00590  __SCT__tp_func_x86_fpu_xstate_check_failed
0xffffffff81e00598  __SCT__tp_func_mce_record
0xffffffff81e005a0  __SCT__tp_func_pseudo_lock_mem_latency
0xffffffff81e005a8  __SCT__tp_func_pseudo_lock_l2
0xffffffff81e005b0  __SCT__tp_func_pseudo_lock_l3
0xffffffff81e005b8  __SCT__tp_func_tlb_flush
0xffffffff81e005c0  __SCT__tp_func_page_fault_user
0xffffffff81e005c8  __SCT__tp_func_page_fault_kernel
0xffffffff81e005d0  __SCT__tp_func_task_newtask
0xffffffff81e005d8  __SCT__tp_func_task_rename
0xffffffff81e005e0  __SCT__tp_func_cpuhp_enter
0xffffffff81e005e8  __SCT__tp_func_cpuhp_multi_enter
0xffffffff81e005f0  __SCT__tp_func_cpuhp_exit
0xffffffff81e005f8  __SCT__tp_func_irq_handler_entry
0xffffffff81e00600  __SCT__tp_func_irq_handler_exit
0xffffffff81e00608  __SCT__tp_func_softirq_entry
0xffffffff81e00610  __SCT__tp_func_softirq_exit
0xffffffff81e00618  __SCT__tp_func_softirq_raise
0xffffffff81e00620  __SCT__tp_func_signal_generate
0xffffffff81e00628  __SCT__tp_func_signal_deliver
0xffffffff81e00630  __SCT__tp_func_workqueue_queue_work
0xffffffff81e00638  __SCT__tp_func_workqueue_activate_work
0xffffffff81e00640  __SCT__tp_func_workqueue_execute_start
0xffffffff81e00648  __SCT__tp_func_workqueue_execute_end
0xffffffff81e00650  __SCT__tp_func_sched_kthread_stop
0xffffffff81e00658  __SCT__tp_func_sched_kthread_stop_ret
0xffffffff81e00660  __SCT__tp_func_sched_waking
0xffffffff81e00668  __SCT__tp_func_sched_wakeup
0xffffffff81e00670  __SCT__tp_func_sched_wakeup_new
0xffffffff81e00678  __SCT__tp_func_sched_switch
0xffffffff81e00680  __SCT__tp_func_sched_migrate_task
0xffffffff81e00688  __SCT__tp_func_sched_process_free
0xffffffff81e00690  __SCT__tp_func_sched_process_exit
0xffffffff81e00698  __SCT__tp_func_sched_wait_task
0xffffffff81e006a0  __SCT__tp_func_sched_process_wait
0xffffffff81e006a8  __SCT__tp_func_sched_process_fork
0xffffffff81e006b0  __SCT__tp_func_sched_process_exec
0xffffffff81e006b8  __SCT__tp_func_sched_stat_wait
0xffffffff81e006c0  __SCT__tp_func_sched_stat_sleep
0xffffffff81e006c8  __SCT__tp_func_sched_stat_iowait
0xffffffff81e006d0  __SCT__tp_func_sched_stat_blocked
0xffffffff81e006d8  __SCT__tp_func_sched_stat_runtime
0xffffffff81e006e0  __SCT__tp_func_sched_pi_setprio
0xffffffff81e006e8  __SCT__tp_func_sched_process_hang
0xffffffff81e006f0  __SCT__tp_func_sched_move_numa
0xffffffff81e006f8  __SCT__tp_func_sched_stick_numa
0xffffffff81e00700  __SCT__tp_func_sched_swap_numa
0xffffffff81e00708  __SCT__tp_func_sched_wake_idle_without_ipi
0xffffffff81e00710  __SCT__tp_func_pelt_cfs_tp
0xffffffff81e00718  __SCT__tp_func_pelt_rt_tp
0xffffffff81e00720  __SCT__tp_func_pelt_dl_tp
0xffffffff81e00728  __SCT__tp_func_pelt_thermal_tp
0xffffffff81e00730  __SCT__tp_func_pelt_irq_tp
0xffffffff81e00738  __SCT__tp_func_pelt_se_tp
0xffffffff81e00740  __SCT__tp_func_sched_cpu_capacity_tp
0xffffffff81e00748  __SCT__tp_func_sched_overutilized_tp
0xffffffff81e00750  __SCT__tp_func_sched_util_est_cfs_tp
0xffffffff81e00758  __SCT__tp_func_sched_util_est_se_tp
0xffffffff81e00760  __SCT__tp_func_sched_update_nr_running_tp
0xffffffff81e00768  __SCT__tp_func_console
0xffffffff81e00770  __SCT__tp_func_irq_matrix_online
0xffffffff81e00778  __SCT__tp_func_irq_matrix_offline
0xffffffff81e00780  __SCT__tp_func_irq_matrix_reserve
0xffffffff81e00788  __SCT__tp_func_irq_matrix_remove_reserved
0xffffffff81e00790  __SCT__tp_func_irq_matrix_assign_system
0xffffffff81e00798  __SCT__tp_func_irq_matrix_alloc_reserved
0xffffffff81e007a0  __SCT__tp_func_irq_matrix_reserve_managed
0xffffffff81e007a8  __SCT__tp_func_irq_matrix_remove_managed
0xffffffff81e007b0  __SCT__tp_func_irq_matrix_alloc_managed
0xffffffff81e007b8  __SCT__tp_func_irq_matrix_assign
0xffffffff81e007c0  __SCT__tp_func_irq_matrix_alloc
0xffffffff81e007c8  __SCT__tp_func_irq_matrix_free
0xffffffff81e007d0  __SCT__tp_func_rcu_utilization
0xffffffff81e007d8  __SCT__tp_func_swiotlb_bounced
0xffffffff81e007e0  __SCT__tp_func_sys_enter
0xffffffff81e007e8  __SCT__tp_func_sys_exit
0xffffffff81e007f0  __SCT__tp_func_timer_init
0xffffffff81e007f8  __SCT__tp_func_timer_start
0xffffffff81e00800  __SCT__tp_func_timer_expire_entry
0xffffffff81e00808  __SCT__tp_func_timer_expire_exit
0xffffffff81e00810  __SCT__tp_func_timer_cancel
0xffffffff81e00818  __SCT__tp_func_hrtimer_init
0xffffffff81e00820  __SCT__tp_func_hrtimer_start
0xffffffff81e00828  __SCT__tp_func_hrtimer_expire_entry
0xffffffff81e00830  __SCT__tp_func_hrtimer_expire_exit
0xffffffff81e00838  __SCT__tp_func_hrtimer_cancel
0xffffffff81e00840  __SCT__tp_func_itimer_state
0xffffffff81e00848  __SCT__tp_func_itimer_expire
0xffffffff81e00850  __SCT__tp_func_tick_stop
0xffffffff81e00858  __SCT__tp_func_alarmtimer_suspend
0xffffffff81e00860  __SCT__tp_func_alarmtimer_fired
0xffffffff81e00868  __SCT__tp_func_alarmtimer_start
0xffffffff81e00870  __SCT__tp_func_alarmtimer_cancel
0xffffffff81e00878  __SCT__tp_func_module_load
0xffffffff81e00880  __SCT__tp_func_module_free
0xffffffff81e00888  __SCT__tp_func_module_get
0xffffffff81e00890  __SCT__tp_func_module_put
0xffffffff81e00898  __SCT__tp_func_module_request
0xffffffff81e008a0  __SCT__tp_func_cgroup_setup_root
0xffffffff81e008a8  __SCT__tp_func_cgroup_destroy_root
0xffffffff81e008b0  __SCT__tp_func_cgroup_remount
0xffffffff81e008b8  __SCT__tp_func_cgroup_mkdir
0xffffffff81e008c0  __SCT__tp_func_cgroup_rmdir
0xffffffff81e008c8  __SCT__tp_func_cgroup_release
0xffffffff81e008d0  __SCT__tp_func_cgroup_rename
0xffffffff81e008d8  __SCT__tp_func_cgroup_freeze
0xffffffff81e008e0  __SCT__tp_func_cgroup_unfreeze
0xffffffff81e008e8  __SCT__tp_func_cgroup_attach_task
0xffffffff81e008f0  __SCT__tp_func_cgroup_transfer_tasks
0xffffffff81e008f8  __SCT__tp_func_cgroup_notify_populated
0xffffffff81e00900  __SCT__tp_func_cgroup_notify_frozen
0xffffffff81e00908  __SCT__tp_func_thread_noise
0xffffffff81e00910  __SCT__tp_func_softirq_noise
0xffffffff81e00918  __SCT__tp_func_irq_noise
0xffffffff81e00920  __SCT__tp_func_nmi_noise
0xffffffff81e00928  __SCT__tp_func_sample_threshold
0xffffffff81e00930  __SCT__tp_func_bpf_trace_printk
0xffffffff81e00938  __SCT__tp_func_error_report_end
0xffffffff81e00940  __SCT__tp_func_cpu_idle
0xffffffff81e00948  __SCT__tp_func_powernv_throttle
0xffffffff81e00950  __SCT__tp_func_pstate_sample
0xffffffff81e00958  __SCT__tp_func_cpu_frequency
0xffffffff81e00960  __SCT__tp_func_cpu_frequency_limits
0xffffffff81e00968  __SCT__tp_func_device_pm_callback_start
0xffffffff81e00970  __SCT__tp_func_device_pm_callback_end
0xffffffff81e00978  __SCT__tp_func_suspend_resume
0xffffffff81e00980  __SCT__tp_func_wakeup_source_activate
0xffffffff81e00988  __SCT__tp_func_wakeup_source_deactivate
0xffffffff81e00990  __SCT__tp_func_clock_enable
0xffffffff81e00998  __SCT__tp_func_clock_disable
0xffffffff81e009a0  __SCT__tp_func_clock_set_rate
0xffffffff81e009a8  __SCT__tp_func_power_domain_target
0xffffffff81e009b0  __SCT__tp_func_pm_qos_add_request
0xffffffff81e009b8  __SCT__tp_func_pm_qos_update_request
0xffffffff81e009c0  __SCT__tp_func_pm_qos_remove_request
0xffffffff81e009c8  __SCT__tp_func_pm_qos_update_target
0xffffffff81e009d0  __SCT__tp_func_pm_qos_update_flags
0xffffffff81e009d8  __SCT__tp_func_dev_pm_qos_add_request
0xffffffff81e009e0  __SCT__tp_func_dev_pm_qos_update_request
0xffffffff81e009e8  __SCT__tp_func_dev_pm_qos_remove_request
0xffffffff81e009f0  __SCT__tp_func_rpm_suspend
0xffffffff81e009f8  __SCT__tp_func_rpm_resume
0xffffffff81e00a00  __SCT__tp_func_rpm_idle
0xffffffff81e00a08  __SCT__tp_func_rpm_usage
0xffffffff81e00a10  __SCT__tp_func_rpm_return_int
0xffffffff81e00a18  __SCT__tp_func_xdp_exception
0xffffffff81e00a20  __SCT__tp_func_xdp_bulk_tx
0xffffffff81e00a28  __SCT__tp_func_xdp_redirect
0xffffffff81e00a30  __SCT__tp_func_xdp_redirect_err
0xffffffff81e00a38  __SCT__tp_func_xdp_redirect_map
0xffffffff81e00a40  __SCT__tp_func_xdp_redirect_map_err
0xffffffff81e00a48  __SCT__tp_func_xdp_cpumap_kthread
0xffffffff81e00a50  __SCT__tp_func_xdp_cpumap_enqueue
0xffffffff81e00a58  __SCT__tp_func_xdp_devmap_xmit
0xffffffff81e00a60  __SCT__tp_func_mem_disconnect
0xffffffff81e00a68  __SCT__tp_func_mem_connect
0xffffffff81e00a70  __SCT__tp_func_mem_return_failed
0xffffffff81e00a78  __SCT__tp_func_user_enter
0xffffffff81e00a80  __SCT__tp_func_user_exit
0xffffffff81e00a88  __SCT__tp_func_rseq_update
0xffffffff81e00a90  __SCT__tp_func_rseq_ip_fixup
0xffffffff81e00a98  __SCT__tp_func_mm_filemap_delete_from_page_cache
0xffffffff81e00aa0  __SCT__tp_func_mm_filemap_add_to_page_cache
0xffffffff81e00aa8  __SCT__tp_func_filemap_set_wb_err
0xffffffff81e00ab0  __SCT__tp_func_file_check_and_advance_wb_err
0xffffffff81e00ab8  __SCT__tp_func_oom_score_adj_update
0xffffffff81e00ac0  __SCT__tp_func_reclaim_retry_zone
0xffffffff81e00ac8  __SCT__tp_func_mark_victim
0xffffffff81e00ad0  __SCT__tp_func_wake_reaper
0xffffffff81e00ad8  __SCT__tp_func_start_task_reaping
0xffffffff81e00ae0  __SCT__tp_func_finish_task_reaping
0xffffffff81e00ae8  __SCT__tp_func_skip_task_reaping
0xffffffff81e00af0  __SCT__tp_func_compact_retry
0xffffffff81e00af8  __SCT__tp_func_mm_lru_insertion
0xffffffff81e00b00  __SCT__tp_func_mm_lru_activate
0xffffffff81e00b08  __SCT__tp_func_mm_vmscan_kswapd_sleep
0xffffffff81e00b10  __SCT__tp_func_mm_vmscan_kswapd_wake
0xffffffff81e00b18  __SCT__tp_func_mm_vmscan_wakeup_kswapd
0xffffffff81e00b20  __SCT__tp_func_mm_vmscan_direct_reclaim_begin
0xffffffff81e00b28  __SCT__tp_func_mm_vmscan_memcg_reclaim_begin
0xffffffff81e00b30  __SCT__tp_func_mm_vmscan_memcg_softlimit_reclaim_begin
0xffffffff81e00b38  __SCT__tp_func_mm_vmscan_direct_reclaim_end
0xffffffff81e00b40  __SCT__tp_func_mm_vmscan_memcg_reclaim_end
0xffffffff81e00b48  __SCT__tp_func_mm_vmscan_memcg_softlimit_reclaim_end
0xffffffff81e00b50  __SCT__tp_func_mm_shrink_slab_start
0xffffffff81e00b58  __SCT__tp_func_mm_shrink_slab_end
0xffffffff81e00b60  __SCT__tp_func_mm_vmscan_lru_isolate
0xffffffff81e00b68  __SCT__tp_func_mm_vmscan_writepage
0xffffffff81e00b70  __SCT__tp_func_mm_vmscan_lru_shrink_inactive
0xffffffff81e00b78  __SCT__tp_func_mm_vmscan_lru_shrink_active
0xffffffff81e00b80  __SCT__tp_func_mm_vmscan_inactive_list_is_low
0xffffffff81e00b88  __SCT__tp_func_mm_vmscan_node_reclaim_begin
0xffffffff81e00b90  __SCT__tp_func_mm_vmscan_node_reclaim_end
0xffffffff81e00b98  __SCT__tp_func_percpu_alloc_percpu
0xffffffff81e00ba0  __SCT__tp_func_percpu_free_percpu
0xffffffff81e00ba8  __SCT__tp_func_percpu_alloc_percpu_fail
0xffffffff81e00bb0  __SCT__tp_func_percpu_create_chunk
0xffffffff81e00bb8  __SCT__tp_func_percpu_destroy_chunk
0xffffffff81e00bc0  __SCT__tp_func_kmalloc
0xffffffff81e00bc8  __SCT__tp_func_kmem_cache_alloc
0xffffffff81e00bd0  __SCT__tp_func_kmalloc_node
0xffffffff81e00bd8  __SCT__tp_func_kmem_cache_alloc_node
0xffffffff81e00be0  __SCT__tp_func_kfree
0xffffffff81e00be8  __SCT__tp_func_kmem_cache_free
0xffffffff81e00bf0  __SCT__tp_func_mm_page_free
0xffffffff81e00bf8  __SCT__tp_func_mm_page_free_batched
0xffffffff81e00c00  __SCT__tp_func_mm_page_alloc
0xffffffff81e00c08  __SCT__tp_func_mm_page_alloc_zone_locked
0xffffffff81e00c10  __SCT__tp_func_mm_page_pcpu_drain
0xffffffff81e00c18  __SCT__tp_func_mm_page_alloc_extfrag
0xffffffff81e00c20  __SCT__tp_func_rss_stat
0xffffffff81e00c28  __SCT__tp_func_mm_compaction_isolate_migratepages
0xffffffff81e00c30  __SCT__tp_func_mm_compaction_isolate_freepages
0xffffffff81e00c38  __SCT__tp_func_mm_compaction_migratepages
0xffffffff81e00c40  __SCT__tp_func_mm_compaction_begin
0xffffffff81e00c48  __SCT__tp_func_mm_compaction_end
0xffffffff81e00c50  __SCT__tp_func_mm_compaction_try_to_compact_pages
0xffffffff81e00c58  __SCT__tp_func_mm_compaction_finished
0xffffffff81e00c60  __SCT__tp_func_mm_compaction_suitable
0xffffffff81e00c68  __SCT__tp_func_mm_compaction_deferred
0xffffffff81e00c70  __SCT__tp_func_mm_compaction_defer_compaction
0xffffffff81e00c78  __SCT__tp_func_mm_compaction_defer_reset
0xffffffff81e00c80  __SCT__tp_func_mm_compaction_kcompactd_sleep
0xffffffff81e00c88  __SCT__tp_func_mm_compaction_wakeup_kcompactd
0xffffffff81e00c90  __SCT__tp_func_mm_compaction_kcompactd_wake
0xffffffff81e00c98  __SCT__tp_func_mmap_lock_start_locking
0xffffffff81e00ca0  __SCT__tp_func_mmap_lock_acquire_returned
0xffffffff81e00ca8  __SCT__tp_func_mmap_lock_released
0xffffffff81e00cb0  __SCT__tp_func_vm_unmapped_area
0xffffffff81e00cb8  __SCT__tp_func_dynamic_hugetlb_split_merge
0xffffffff81e00cc0  __SCT__tp_func_dynamic_hugetlb_acct_memory
0xffffffff81e00cc8  __SCT__tp_func_dynamic_hugetlb_alloc_free
0xffffffff81e00cd0  __SCT__tp_func_mm_migrate_pages
0xffffffff81e00cd8  __SCT__tp_func_mm_khugepaged_scan_pmd
0xffffffff81e00ce0  __SCT__tp_func_mm_collapse_huge_page
0xffffffff81e00ce8  __SCT__tp_func_mm_collapse_huge_page_isolate
0xffffffff81e00cf0  __SCT__tp_func_mm_collapse_huge_page_swapin
0xffffffff81e00cf8  __SCT__tp_func_test_pages_isolated
0xffffffff81e00d00  __SCT__tp_func_writeback_dirty_page
0xffffffff81e00d08  __SCT__tp_func_wait_on_page_writeback
0xffffffff81e00d10  __SCT__tp_func_writeback_mark_inode_dirty
0xffffffff81e00d18  __SCT__tp_func_writeback_dirty_inode_start
0xffffffff81e00d20  __SCT__tp_func_writeback_dirty_inode
0xffffffff81e00d28  __SCT__tp_func_inode_foreign_history
0xffffffff81e00d30  __SCT__tp_func_inode_switch_wbs
0xffffffff81e00d38  __SCT__tp_func_track_foreign_dirty
0xffffffff81e00d40  __SCT__tp_func_flush_foreign
0xffffffff81e00d48  __SCT__tp_func_writeback_write_inode_start
0xffffffff81e00d50  __SCT__tp_func_writeback_write_inode
0xffffffff81e00d58  __SCT__tp_func_writeback_queue
0xffffffff81e00d60  __SCT__tp_func_writeback_exec
0xffffffff81e00d68  __SCT__tp_func_writeback_start
0xffffffff81e00d70  __SCT__tp_func_writeback_written
0xffffffff81e00d78  __SCT__tp_func_writeback_wait
0xffffffff81e00d80  __SCT__tp_func_writeback_pages_written
0xffffffff81e00d88  __SCT__tp_func_writeback_wake_background
0xffffffff81e00d90  __SCT__tp_func_writeback_bdi_register
0xffffffff81e00d98  __SCT__tp_func_wbc_writepage
0xffffffff81e00da0  __SCT__tp_func_writeback_queue_io
0xffffffff81e00da8  __SCT__tp_func_global_dirty_state
0xffffffff81e00db0  __SCT__tp_func_bdi_dirty_ratelimit
0xffffffff81e00db8  __SCT__tp_func_balance_dirty_pages
0xffffffff81e00dc0  __SCT__tp_func_writeback_sb_inodes_requeue
0xffffffff81e00dc8  __SCT__tp_func_writeback_congestion_wait
0xffffffff81e00dd0  __SCT__tp_func_writeback_wait_iff_congested
0xffffffff81e00dd8  __SCT__tp_func_writeback_single_inode_start
0xffffffff81e00de0  __SCT__tp_func_writeback_single_inode
0xffffffff81e00de8  __SCT__tp_func_writeback_lazytime
0xffffffff81e00df0  __SCT__tp_func_writeback_lazytime_iput
0xffffffff81e00df8  __SCT__tp_func_writeback_dirty_inode_enqueue
0xffffffff81e00e00  __SCT__tp_func_sb_mark_inode_writeback
0xffffffff81e00e08  __SCT__tp_func_sb_clear_inode_writeback
0xffffffff81e00e10  __SCT__tp_func_io_uring_create
0xffffffff81e00e18  __SCT__tp_func_io_uring_register
0xffffffff81e00e20  __SCT__tp_func_io_uring_file_get
0xffffffff81e00e28  __SCT__tp_func_io_uring_queue_async_work
0xffffffff81e00e30  __SCT__tp_func_io_uring_defer
0xffffffff81e00e38  __SCT__tp_func_io_uring_link
0xffffffff81e00e40  __SCT__tp_func_io_uring_cqring_wait
0xffffffff81e00e48  __SCT__tp_func_io_uring_fail_link
0xffffffff81e00e50  __SCT__tp_func_io_uring_complete
0xffffffff81e00e58  __SCT__tp_func_io_uring_submit_sqe
0xffffffff81e00e60  __SCT__tp_func_io_uring_poll_arm
0xffffffff81e00e68  __SCT__tp_func_io_uring_poll_wake
0xffffffff81e00e70  __SCT__tp_func_io_uring_task_add
0xffffffff81e00e78  __SCT__tp_func_io_uring_task_run
0xffffffff81e00e80  __SCT__tp_func_dax_pmd_fault
0xffffffff81e00e88  __SCT__tp_func_dax_pmd_fault_done
0xffffffff81e00e90  __SCT__tp_func_dax_pmd_load_hole
0xffffffff81e00e98  __SCT__tp_func_dax_pmd_load_hole_fallback
0xffffffff81e00ea0  __SCT__tp_func_dax_pmd_insert_mapping
0xffffffff81e00ea8  __SCT__tp_func_dax_pte_fault
0xffffffff81e00eb0  __SCT__tp_func_dax_pte_fault_done
0xffffffff81e00eb8  __SCT__tp_func_dax_load_hole
0xffffffff81e00ec0  __SCT__tp_func_dax_insert_pfn_mkwrite_no_entry
0xffffffff81e00ec8  __SCT__tp_func_dax_insert_pfn_mkwrite
0xffffffff81e00ed0  __SCT__tp_func_dax_insert_mapping
0xffffffff81e00ed8  __SCT__tp_func_dax_writeback_range
0xffffffff81e00ee0  __SCT__tp_func_dax_writeback_range_done
0xffffffff81e00ee8  __SCT__tp_func_dax_writeback_one
0xffffffff81e00ef0  __SCT__tp_func_locks_get_lock_context
0xffffffff81e00ef8  __SCT__tp_func_posix_lock_inode
0xffffffff81e00f00  __SCT__tp_func_fcntl_setlk
0xffffffff81e00f08  __SCT__tp_func_locks_remove_posix
0xffffffff81e00f10  __SCT__tp_func_flock_lock_inode
0xffffffff81e00f18  __SCT__tp_func_break_lease_noblock
0xffffffff81e00f20  __SCT__tp_func_break_lease_block
0xffffffff81e00f28  __SCT__tp_func_break_lease_unblock
0xffffffff81e00f30  __SCT__tp_func_generic_delete_lease
0xffffffff81e00f38  __SCT__tp_func_time_out_leases
0xffffffff81e00f40  __SCT__tp_func_generic_add_lease
0xffffffff81e00f48  __SCT__tp_func_leases_conflict
0xffffffff81e00f50  __SCT__tp_func_iomap_readpage
0xffffffff81e00f58  __SCT__tp_func_iomap_readahead
0xffffffff81e00f60  __SCT__tp_func_iomap_writepage
0xffffffff81e00f68  __SCT__tp_func_iomap_releasepage
0xffffffff81e00f70  __SCT__tp_func_iomap_invalidatepage
0xffffffff81e00f78  __SCT__tp_func_iomap_dio_invalidate_fail
0xffffffff81e00f80  __SCT__tp_func_iomap_apply_dstmap
0xffffffff81e00f88  __SCT__tp_func_iomap_apply_srcmap
0xffffffff81e00f90  __SCT__tp_func_iomap_apply
0xffffffff81e00f98  __SCT__tp_func_selinux_audited
0xffffffff81e00fa0  __SCT__tp_func_block_touch_buffer
0xffffffff81e00fa8  __SCT__tp_func_block_dirty_buffer
0xffffffff81e00fb0  __SCT__tp_func_block_rq_requeue
0xffffffff81e00fb8  __SCT__tp_func_block_rq_complete
0xffffffff81e00fc0  __SCT__tp_func_block_rq_insert
0xffffffff81e00fc8  __SCT__tp_func_block_rq_issue
0xffffffff81e00fd0  __SCT__tp_func_block_rq_merge
0xffffffff81e00fd8  __SCT__tp_func_block_bio_bounce
0xffffffff81e00fe0  __SCT__tp_func_block_bio_complete
0xffffffff81e00fe8  __SCT__tp_func_block_bio_backmerge
0xffffffff81e00ff0  __SCT__tp_func_block_bio_frontmerge
0xffffffff81e00ff8  __SCT__tp_func_block_bio_queue
0xffffffff81e01000  __SCT__tp_func_block_getrq
0xffffffff81e01008  __SCT__tp_func_block_sleeprq
0xffffffff81e01010  __SCT__tp_func_block_plug
0xffffffff81e01018  __SCT__tp_func_block_unplug
0xffffffff81e01020  __SCT__tp_func_block_split
0xffffffff81e01028  __SCT__tp_func_block_bio_remap
0xffffffff81e01030  __SCT__tp_func_block_rq_remap
0xffffffff81e01038  __SCT__tp_func_kyber_latency
0xffffffff81e01040  __SCT__tp_func_kyber_adjust
0xffffffff81e01048  __SCT__tp_func_kyber_throttled
0xffffffff81e01050  __SCT__tp_func_wbt_stat
0xffffffff81e01058  __SCT__tp_func_wbt_lat
0xffffffff81e01060  __SCT__tp_func_wbt_step
0xffffffff81e01068  __SCT__tp_func_wbt_timer
0xffffffff81e01070  __SCT__tp_func_read_msr
0xffffffff81e01078  __SCT__tp_func_write_msr
0xffffffff81e01080  __SCT__tp_func_rdpmc
0xffffffff81e01088  __SCT__tp_func_gpio_direction
0xffffffff81e01090  __SCT__tp_func_gpio_value
0xffffffff81e01098  __SCT__tp_func_pwm_apply
0xffffffff81e010a0  __SCT__tp_func_pwm_get
0xffffffff81e010a8  __SCT__tp_func_clk_enable
0xffffffff81e010b0  __SCT__tp_func_clk_enable_complete
0xffffffff81e010b8  __SCT__tp_func_clk_disable
0xffffffff81e010c0  __SCT__tp_func_clk_disable_complete
0xffffffff81e010c8  __SCT__tp_func_clk_prepare
0xffffffff81e010d0  __SCT__tp_func_clk_prepare_complete
0xffffffff81e010d8  __SCT__tp_func_clk_unprepare
0xffffffff81e010e0  __SCT__tp_func_clk_unprepare_complete
0xffffffff81e010e8  __SCT__tp_func_clk_set_rate
0xffffffff81e010f0  __SCT__tp_func_clk_set_rate_complete
0xffffffff81e010f8  __SCT__tp_func_clk_set_parent
0xffffffff81e01100  __SCT__tp_func_clk_set_parent_complete
0xffffffff81e01108  __SCT__tp_func_clk_set_phase
0xffffffff81e01110  __SCT__tp_func_clk_set_phase_complete
0xffffffff81e01118  __SCT__tp_func_clk_set_duty_cycle
0xffffffff81e01120  __SCT__tp_func_clk_set_duty_cycle_complete
0xffffffff81e01128  __SCT__tp_func_add_device_randomness
0xffffffff81e01130  __SCT__tp_func_mix_pool_bytes
0xffffffff81e01138  __SCT__tp_func_mix_pool_bytes_nolock
0xffffffff81e01140  __SCT__tp_func_credit_entropy_bits
0xffffffff81e01148  __SCT__tp_func_push_to_pool
0xffffffff81e01150  __SCT__tp_func_debit_entropy
0xffffffff81e01158  __SCT__tp_func_add_input_randomness
0xffffffff81e01160  __SCT__tp_func_add_disk_randomness
0xffffffff81e01168  __SCT__tp_func_xfer_secondary_pool
0xffffffff81e01170  __SCT__tp_func_get_random_bytes
0xffffffff81e01178  __SCT__tp_func_get_random_bytes_arch
0xffffffff81e01180  __SCT__tp_func_extract_entropy
0xffffffff81e01188  __SCT__tp_func_extract_entropy_user
0xffffffff81e01190  __SCT__tp_func_random_read
0xffffffff81e01198  __SCT__tp_func_urandom_read
0xffffffff81e011a0  __SCT__tp_func_prandom_u32
0xffffffff81e011a8  __SCT__tp_func_map_single
0xffffffff81e011b0  __SCT__tp_func_bounce_map_single
0xffffffff81e011b8  __SCT__tp_func_unmap_single
0xffffffff81e011c0  __SCT__tp_func_unmap_sg
0xffffffff81e011c8  __SCT__tp_func_bounce_unmap_single
0xffffffff81e011d0  __SCT__tp_func_map_sg
0xffffffff81e011d8  __SCT__tp_func_bounce_map_sg
0xffffffff81e011e0  __SCT__tp_func_add_device_to_group
0xffffffff81e011e8  __SCT__tp_func_remove_device_from_group
0xffffffff81e011f0  __SCT__tp_func_attach_device_to_domain
0xffffffff81e011f8  __SCT__tp_func_detach_device_from_domain
0xffffffff81e01200  __SCT__tp_func_map
0xffffffff81e01208  __SCT__tp_func_unmap
0xffffffff81e01210  __SCT__tp_func_switch_dirty_log
0xffffffff81e01218  __SCT__tp_func_sync_dirty_log
0xffffffff81e01220  __SCT__tp_func_clear_dirty_log
0xffffffff81e01228  __SCT__tp_func_io_page_fault
0xffffffff81e01230  __SCT__tp_func_dev_fault
0xffffffff81e01238  __SCT__tp_func_dev_page_response
0xffffffff81e01240  __SCT__tp_func_smmu_bind_alloc
0xffffffff81e01248  __SCT__tp_func_smmu_bind_get
0xffffffff81e01250  __SCT__tp_func_smmu_unbind_put
0xffffffff81e01258  __SCT__tp_func_smmu_unbind_free
0xffffffff81e01260  __SCT__tp_func_smmu_mm_release
0xffffffff81e01268  __SCT__tp_func_smmu_mm_invalidate
0xffffffff81e01270  __SCT__tp_func_smmu_mn_alloc
0xffffffff81e01278  __SCT__tp_func_smmu_mn_free
0xffffffff81e01280  __SCT__tp_func_smmu_mn_get
0xffffffff81e01288  __SCT__tp_func_smmu_mn_put
0xffffffff81e01290  __SCT__tp_func_regmap_reg_write
0xffffffff81e01298  __SCT__tp_func_regmap_reg_read
0xffffffff81e012a0  __SCT__tp_func_regmap_reg_read_cache
0xffffffff81e012a8  __SCT__tp_func_regmap_hw_read_start
0xffffffff81e012b0  __SCT__tp_func_regmap_hw_read_done
0xffffffff81e012b8  __SCT__tp_func_regmap_hw_write_start
0xffffffff81e012c0  __SCT__tp_func_regmap_hw_write_done
0xffffffff81e012c8  __SCT__tp_func_regcache_sync
0xffffffff81e012d0  __SCT__tp_func_regmap_cache_only
0xffffffff81e012d8  __SCT__tp_func_regmap_cache_bypass
0xffffffff81e012e0  __SCT__tp_func_regmap_async_write_start
0xffffffff81e012e8  __SCT__tp_func_regmap_async_io_complete
0xffffffff81e012f0  __SCT__tp_func_regmap_async_complete_start
0xffffffff81e012f8  __SCT__tp_func_regmap_async_complete_done
0xffffffff81e01300  __SCT__tp_func_regcache_drop_region
0xffffffff81e01308  __SCT__tp_func_dma_fence_emit
0xffffffff81e01310  __SCT__tp_func_dma_fence_init
0xffffffff81e01318  __SCT__tp_func_dma_fence_destroy
0xffffffff81e01320  __SCT__tp_func_dma_fence_enable_signal
0xffffffff81e01328  __SCT__tp_func_dma_fence_signaled
0xffffffff81e01330  __SCT__tp_func_dma_fence_wait_start
0xffffffff81e01338  __SCT__tp_func_dma_fence_wait_end
0xffffffff81e01340  __SCT__tp_func_scsi_dispatch_cmd_start
0xffffffff81e01348  __SCT__tp_func_scsi_dispatch_cmd_error
0xffffffff81e01350  __SCT__tp_func_scsi_dispatch_cmd_done
0xffffffff81e01358  __SCT__tp_func_scsi_dispatch_cmd_timeout
0xffffffff81e01360  __SCT__tp_func_scsi_eh_wakeup
0xffffffff81e01368  __SCT__tp_func_spi_controller_idle
0xffffffff81e01370  __SCT__tp_func_spi_controller_busy
0xffffffff81e01378  __SCT__tp_func_spi_message_submit
0xffffffff81e01380  __SCT__tp_func_spi_message_start
0xffffffff81e01388  __SCT__tp_func_spi_message_done
0xffffffff81e01390  __SCT__tp_func_spi_transfer_start
0xffffffff81e01398  __SCT__tp_func_spi_transfer_stop
0xffffffff81e013a0  __SCT__tp_func_mdio_access
0xffffffff81e013a8  __SCT__tp_func_xhci_dbg_address
0xffffffff81e013b0  __SCT__tp_func_xhci_dbg_context_change
0xffffffff81e013b8  __SCT__tp_func_xhci_dbg_quirks
0xffffffff81e013c0  __SCT__tp_func_xhci_dbg_reset_ep
0xffffffff81e013c8  __SCT__tp_func_xhci_dbg_cancel_urb
0xffffffff81e013d0  __SCT__tp_func_xhci_dbg_init
0xffffffff81e013d8  __SCT__tp_func_xhci_dbg_ring_expansion
0xffffffff81e013e0  __SCT__tp_func_xhci_address_ctx
0xffffffff81e013e8  __SCT__tp_func_xhci_handle_event
0xffffffff81e013f0  __SCT__tp_func_xhci_handle_command
0xffffffff81e013f8  __SCT__tp_func_xhci_handle_transfer
0xffffffff81e01400  __SCT__tp_func_xhci_queue_trb
0xffffffff81e01408  __SCT__tp_func_xhci_dbc_handle_event
0xffffffff81e01410  __SCT__tp_func_xhci_dbc_handle_transfer
0xffffffff81e01418  __SCT__tp_func_xhci_dbc_gadget_ep_queue
0xffffffff81e01420  __SCT__tp_func_xhci_free_virt_device
0xffffffff81e01428  __SCT__tp_func_xhci_alloc_virt_device
0xffffffff81e01430  __SCT__tp_func_xhci_setup_device
0xffffffff81e01438  __SCT__tp_func_xhci_setup_addressable_virt_device
0xffffffff81e01440  __SCT__tp_func_xhci_stop_device
0xffffffff81e01448  __SCT__tp_func_xhci_urb_enqueue
0xffffffff81e01450  __SCT__tp_func_xhci_urb_giveback
0xffffffff81e01458  __SCT__tp_func_xhci_urb_dequeue
0xffffffff81e01460  __SCT__tp_func_xhci_handle_cmd_stop_ep
0xffffffff81e01468  __SCT__tp_func_xhci_handle_cmd_set_deq_ep
0xffffffff81e01470  __SCT__tp_func_xhci_handle_cmd_reset_ep
0xffffffff81e01478  __SCT__tp_func_xhci_handle_cmd_config_ep
0xffffffff81e01480  __SCT__tp_func_xhci_add_endpoint
0xffffffff81e01488  __SCT__tp_func_xhci_alloc_dev
0xffffffff81e01490  __SCT__tp_func_xhci_free_dev
0xffffffff81e01498  __SCT__tp_func_xhci_handle_cmd_disable_slot
0xffffffff81e014a0  __SCT__tp_func_xhci_discover_or_reset_device
0xffffffff81e014a8  __SCT__tp_func_xhci_setup_device_slot
0xffffffff81e014b0  __SCT__tp_func_xhci_handle_cmd_addr_dev
0xffffffff81e014b8  __SCT__tp_func_xhci_handle_cmd_reset_dev
0xffffffff81e014c0  __SCT__tp_func_xhci_handle_cmd_set_deq
0xffffffff81e014c8  __SCT__tp_func_xhci_configure_endpoint
0xffffffff81e014d0  __SCT__tp_func_xhci_address_ctrl_ctx
0xffffffff81e014d8  __SCT__tp_func_xhci_configure_endpoint_ctrl_ctx
0xffffffff81e014e0  __SCT__tp_func_xhci_ring_alloc
0xffffffff81e014e8  __SCT__tp_func_xhci_ring_free
0xffffffff81e014f0  __SCT__tp_func_xhci_ring_expansion
0xffffffff81e014f8  __SCT__tp_func_xhci_inc_enq
0xffffffff81e01500  __SCT__tp_func_xhci_inc_deq
0xffffffff81e01508  __SCT__tp_func_xhci_handle_port_status
0xffffffff81e01510  __SCT__tp_func_xhci_get_port_status
0xffffffff81e01518  __SCT__tp_func_xhci_hub_status_data
0xffffffff81e01520  __SCT__tp_func_xhci_ring_ep_doorbell
0xffffffff81e01528  __SCT__tp_func_xhci_ring_host_doorbell
0xffffffff81e01530  __SCT__tp_func_xhci_dbc_alloc_request
0xffffffff81e01538  __SCT__tp_func_xhci_dbc_free_request
0xffffffff81e01540  __SCT__tp_func_xhci_dbc_queue_request
0xffffffff81e01548  __SCT__tp_func_xhci_dbc_giveback_request
0xffffffff81e01550  __SCT__tp_func_rtc_set_time
0xffffffff81e01558  __SCT__tp_func_rtc_read_time
0xffffffff81e01560  __SCT__tp_func_rtc_set_alarm
0xffffffff81e01568  __SCT__tp_func_rtc_read_alarm
0xffffffff81e01570  __SCT__tp_func_rtc_irq_set_freq
0xffffffff81e01578  __SCT__tp_func_rtc_irq_set_state
0xffffffff81e01580  __SCT__tp_func_rtc_alarm_irq_enable
0xffffffff81e01588  __SCT__tp_func_rtc_set_offset
0xffffffff81e01590  __SCT__tp_func_rtc_read_offset
0xffffffff81e01598  __SCT__tp_func_rtc_timer_enqueue
0xffffffff81e015a0  __SCT__tp_func_rtc_timer_dequeue
0xffffffff81e015a8  __SCT__tp_func_rtc_timer_fired
0xffffffff81e015b0  __SCT__tp_func_i2c_write
0xffffffff81e015b8  __SCT__tp_func_i2c_read
0xffffffff81e015c0  __SCT__tp_func_i2c_reply
0xffffffff81e015c8  __SCT__tp_func_i2c_result
0xffffffff81e015d0  __SCT__tp_func_smbus_write
0xffffffff81e015d8  __SCT__tp_func_smbus_read
0xffffffff81e015e0  __SCT__tp_func_smbus_reply
0xffffffff81e015e8  __SCT__tp_func_smbus_result
0xffffffff81e015f0  __SCT__tp_func_hwmon_attr_show
0xffffffff81e015f8  __SCT__tp_func_hwmon_attr_store
0xffffffff81e01600  __SCT__tp_func_hwmon_attr_show_string
0xffffffff81e01608  __SCT__tp_func_thermal_temperature
0xffffffff81e01610  __SCT__tp_func_cdev_update
0xffffffff81e01618  __SCT__tp_func_thermal_zone_trip
0xffffffff81e01620  __SCT__tp_func_extlog_mem_event
0xffffffff81e01628  __SCT__tp_func_mc_event
0xffffffff81e01630  __SCT__tp_func_arm_event
0xffffffff81e01638  __SCT__tp_func_non_standard_event
0xffffffff81e01640  __SCT__tp_func_aer_event
0xffffffff81e01648  __SCT__tp_func_memory_failure_event
0xffffffff81e01650  __SCT__tp_func_kfree_skb
0xffffffff81e01658  __SCT__tp_func_consume_skb
0xffffffff81e01660  __SCT__tp_func_skb_copy_datagram_iovec
0xffffffff81e01668  __SCT__tp_func_net_dev_start_xmit
0xffffffff81e01670  __SCT__tp_func_net_dev_xmit
0xffffffff81e01678  __SCT__tp_func_net_dev_xmit_timeout
0xffffffff81e01680  __SCT__tp_func_net_dev_queue
0xffffffff81e01688  __SCT__tp_func_netif_receive_skb
0xffffffff81e01690  __SCT__tp_func_netif_rx
0xffffffff81e01698  __SCT__tp_func_napi_gro_frags_entry
0xffffffff81e016a0  __SCT__tp_func_napi_gro_receive_entry
0xffffffff81e016a8  __SCT__tp_func_netif_receive_skb_entry
0xffffffff81e016b0  __SCT__tp_func_netif_receive_skb_list_entry
0xffffffff81e016b8  __SCT__tp_func_netif_rx_entry
0xffffffff81e016c0  __SCT__tp_func_netif_rx_ni_entry
0xffffffff81e016c8  __SCT__tp_func_napi_gro_frags_exit
0xffffffff81e016d0  __SCT__tp_func_napi_gro_receive_exit
0xffffffff81e016d8  __SCT__tp_func_netif_receive_skb_exit
0xffffffff81e016e0  __SCT__tp_func_netif_rx_exit
0xffffffff81e016e8  __SCT__tp_func_netif_rx_ni_exit
0xffffffff81e016f0  __SCT__tp_func_netif_receive_skb_list_exit
0xffffffff81e016f8  __SCT__tp_func_napi_poll
0xffffffff81e01700  __SCT__tp_func_sock_rcvqueue_full
0xffffffff81e01708  __SCT__tp_func_sock_exceed_buf_limit
0xffffffff81e01710  __SCT__tp_func_inet_sock_set_state
0xffffffff81e01718  __SCT__tp_func_udp_fail_queue_rcv_skb
0xffffffff81e01720  __SCT__tp_func_tcp_retransmit_skb
0xffffffff81e01728  __SCT__tp_func_tcp_send_reset
0xffffffff81e01730  __SCT__tp_func_tcp_receive_reset
0xffffffff81e01738  __SCT__tp_func_tcp_destroy_sock
0xffffffff81e01740  __SCT__tp_func_tcp_rcv_space_adjust
0xffffffff81e01748  __SCT__tp_func_tcp_retransmit_synack
0xffffffff81e01750  __SCT__tp_func_tcp_probe
0xffffffff81e01758  __SCT__tp_func_fib_table_lookup
0xffffffff81e01760  __SCT__tp_func_qdisc_dequeue
0xffffffff81e01768  __SCT__tp_func_qdisc_reset
0xffffffff81e01770  __SCT__tp_func_qdisc_destroy
0xffffffff81e01778  __SCT__tp_func_qdisc_create
0xffffffff81e01780  __SCT__tp_func_br_fdb_add
0xffffffff81e01788  __SCT__tp_func_br_fdb_external_learn_add
0xffffffff81e01790  __SCT__tp_func_fdb_delete
0xffffffff81e01798  __SCT__tp_func_br_fdb_update
0xffffffff81e017a0  __SCT__tp_func_page_pool_release
0xffffffff81e017a8  __SCT__tp_func_page_pool_state_release
0xffffffff81e017b0  __SCT__tp_func_page_pool_state_hold
0xffffffff81e017b8  __SCT__tp_func_page_pool_update_nid
0xffffffff81e017c0  __SCT__tp_func_neigh_create
0xffffffff81e017c8  __SCT__tp_func_neigh_update
0xffffffff81e017d0  __SCT__tp_func_neigh_update_done
0xffffffff81e017d8  __SCT__tp_func_neigh_timer_handler
0xffffffff81e017e0  __SCT__tp_func_neigh_event_send_done
0xffffffff81e017e8  __SCT__tp_func_neigh_event_send_dead
0xffffffff81e017f0  __SCT__tp_func_neigh_cleanup_and_release
0xffffffff81e017f8  __SCT__tp_func_devlink_hwmsg
0xffffffff81e01800  __SCT__tp_func_devlink_hwerr
0xffffffff81e01808  __SCT__tp_func_devlink_health_report
0xffffffff81e01810  __SCT__tp_func_devlink_health_recover_aborted
0xffffffff81e01818  __SCT__tp_func_devlink_health_reporter_state_update
0xffffffff81e01820  __SCT__tp_func_devlink_trap_report
0xffffffff81e01828  __SCT__tp_func_bpf_test_finish
0xffffffff81e01830  __SCT__tp_func_fib6_table_lookup
0xffffffff83246b02  int3_magic
0xffffffff832515ea  parse_nolapic_timer
